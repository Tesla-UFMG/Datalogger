
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd00  0800dd00  0001dd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd04  0800dd04  0001dd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800dd08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000525c  24000074  0800dd7c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240052d0  0800dd7c  000252d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fc19  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e6e  00000000  00000000  0004fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  00054b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001498  00000000  00000000  00056170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad0d  00000000  00000000  00057608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dd62  00000000  00000000  00092315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001674dc  00000000  00000000  000b0077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00217553  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006068  00000000  00000000  002175a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d754 	.word	0x0800d754

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800d754 	.word	0x0800d754

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f001 faae 	bl	8001be8 <HAL_FDCAN_RegisterRxFifo0Callback>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 8000692:	f000 fba9 	bl	8000de8 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 fad6 	bl	8001c48 <HAL_FDCAN_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80006a2:	f000 fba1 	bl	8000de8 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f001 fc66 	bl	8001f7c <HAL_FDCAN_ActivateNotification>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 80006b6:	f000 fb97 	bl	8000de8 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006cc:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <init_CAN+0x10>)
 80006fa:	f000 f921 	bl	8000940 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	240030c8 	.word	0x240030c8

08000708 <SD_Create_File>:
int count = 0;
uint8_t _datalog_flag = 0;


FRESULT SD_Create_File(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	FRESULT fresult;
	uint8_t contFile = 0;	/*enumerate the file*/
 800070e:	2300      	movs	r3, #0
 8000710:	71fb      	strb	r3, [r7, #7]
	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 8000712:	2200      	movs	r2, #0
 8000714:	491a      	ldr	r1, [pc, #104]	; (8000780 <SD_Create_File+0x78>)
 8000716:	481b      	ldr	r0, [pc, #108]	; (8000784 <SD_Create_File+0x7c>)
 8000718:	f00b fbee 	bl	800bef8 <f_mount>
 800071c:	4603      	mov	r3, r0
 800071e:	71bb      	strb	r3, [r7, #6]
	do
	{
		sprintf(bufferFile, "ARQ%02d.txt", contFile);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	461a      	mov	r2, r3
 8000724:	4918      	ldr	r1, [pc, #96]	; (8000788 <SD_Create_File+0x80>)
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <SD_Create_File+0x84>)
 8000728:	f00c fbf4 	bl	800cf14 <siprintf>
		fresult = f_stat(bufferFile, &file);
 800072c:	4918      	ldr	r1, [pc, #96]	; (8000790 <SD_Create_File+0x88>)
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <SD_Create_File+0x84>)
 8000730:	f00c fa54 	bl	800cbdc <f_stat>
 8000734:	4603      	mov	r3, r0
 8000736:	71bb      	strb	r3, [r7, #6]
		contFile++;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	3301      	adds	r3, #1
 800073c:	71fb      	strb	r3, [r7, #7]
	} while(fresult != FR_NO_FILE);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b04      	cmp	r3, #4
 8000742:	d1ed      	bne.n	8000720 <SD_Create_File+0x18>
	contFile = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	71fb      	strb	r3, [r7, #7]
	fresult = f_open(&file, bufferFile, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 8000748:	2208      	movs	r2, #8
 800074a:	4910      	ldr	r1, [pc, #64]	; (800078c <SD_Create_File+0x84>)
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <SD_Create_File+0x88>)
 800074e:	f00b fc19 	bl	800bf84 <f_open>
 8000752:	4603      	mov	r3, r0
 8000754:	71bb      	strb	r3, [r7, #6]
	fresult = f_close(&file);
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <SD_Create_File+0x88>)
 8000758:	f00b fff2 	bl	800c740 <f_close>
 800075c:	4603      	mov	r3, r0
 800075e:	71bb      	strb	r3, [r7, #6]
	if(fresult == FR_OK){
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d103      	bne.n	800076e <SD_Create_File+0x66>
		//HAL_GPIO_TogglePin(DATALOG_LED_GPIO_Port, DATALOG_LED_Pin); //Blinks the led to indicate that there was no erros
		_datalog_flag  = 1;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <SD_Create_File+0x8c>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e002      	b.n	8000774 <SD_Create_File+0x6c>
	}
	else _datalog_flag = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <SD_Create_File+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	return fresult;
 8000774:	79bb      	ldrb	r3, [r7, #6]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800d76c 	.word	0x0800d76c
 8000784:	24000090 	.word	0x24000090
 8000788:	0800d770 	.word	0x0800d770
 800078c:	24002378 	.word	0x24002378
 8000790:	24001344 	.word	0x24001344
 8000794:	240010c8 	.word	0x240010c8

08000798 <writeSD>:
void writeSD(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0c6      	sub	sp, #280	; 0x118
 800079c:	af02      	add	r7, sp, #8
	UINT bytes_written; //(ver live expression)
	FRESULT fresult;
	char buffer_log[256]; //(ver live expression)
	uint32_t time = HAL_GetTick();
 800079e:	f000 fe81 	bl	80014a4 <HAL_GetTick>
 80007a2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	int len = sprintf(buffer_log, "\r %u %u %u\n,",time,can_vector[1].word_1,can_vector[1].word_2,
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <writeSD+0xc4>)
 80007a8:	895b      	ldrh	r3, [r3, #10]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <writeSD+0xc4>)
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	461a      	mov	r2, r3
	can_vector[1].word_3);
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <writeSD+0xc4>)
 80007b4:	89db      	ldrh	r3, [r3, #14]
	int len = sprintf(buffer_log, "\r %u %u %u\n,",time,can_vector[1].word_1,can_vector[1].word_2,
 80007b6:	4638      	mov	r0, r7
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	9200      	str	r2, [sp, #0]
 80007bc:	460b      	mov	r3, r1
 80007be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80007c2:	4927      	ldr	r1, [pc, #156]	; (8000860 <writeSD+0xc8>)
 80007c4:	f00c fba6 	bl	800cf14 <siprintf>
 80007c8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write
 80007cc:	2212      	movs	r2, #18
 80007ce:	4925      	ldr	r1, [pc, #148]	; (8000864 <writeSD+0xcc>)
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <writeSD+0xd0>)
 80007d2:	f00b fbd7 	bl	800bf84 <f_open>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <writeSD+0xd0>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4821      	ldr	r0, [pc, #132]	; (8000868 <writeSD+0xd0>)
 80007e4:	f00b ffd6 	bl	800c794 <f_lseek>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	fresult = f_write(&file, buffer_log, len, &bytes_written);     //write data to the file
 80007ee:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80007f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80007f6:	4639      	mov	r1, r7
 80007f8:	481b      	ldr	r0, [pc, #108]	; (8000868 <writeSD+0xd0>)
 80007fa:	f00b fd8f 	bl	800c31c <f_write>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	len = sprintf(buffer_log, "\r%u\n",HAL_GetTick());
 8000804:	f000 fe4e 	bl	80014a4 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	463b      	mov	r3, r7
 800080c:	4917      	ldr	r1, [pc, #92]	; (800086c <writeSD+0xd4>)
 800080e:	4618      	mov	r0, r3
 8000810:	f00c fb80 	bl	800cf14 <siprintf>
 8000814:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	fresult = f_write(&file, buffer_log, len, &bytes_written);     //write data to the file
 8000818:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800081c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000820:	4639      	mov	r1, r7
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <writeSD+0xd0>)
 8000824:	f00b fd7a 	bl	800c31c <f_write>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	fresult = f_close(&file);//closes the file
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <writeSD+0xd0>)
 8000830:	f00b ff86 	bl	800c740 <f_close>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if(fresult == FR_OK){
 800083a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800083e:	2b00      	cmp	r3, #0
 8000840:	d103      	bne.n	800084a <writeSD+0xb2>
		//HAL_GPIO_TogglePin(DATALOG_LED_GPIO_Port, DATALOG_LED_Pin); //Blinks the led to indicate that there was no erros
		_datalog_flag  = 1;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <writeSD+0xd8>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
	}
	else _datalog_flag = 0;
}
 8000848:	e002      	b.n	8000850 <writeSD+0xb8>
	else _datalog_flag = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <writeSD+0xd8>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24002390 	.word	0x24002390
 8000860:	0800d77c 	.word	0x0800d77c
 8000864:	24002378 	.word	0x24002378
 8000868:	24001344 	.word	0x24001344
 800086c:	0800d78c 	.word	0x0800d78c
 8000870:	240010c8 	.word	0x240010c8

08000874 <Clean_CAN_Struct>:

CanIdData_t can_vector[CAN_IDS_NUMBER];



void Clean_CAN_Struct(void) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	80fb      	strh	r3, [r7, #6]
 800087e:	e019      	b.n	80008b4 <Clean_CAN_Struct+0x40>
		can_vector[i].word_0 = 0;
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <Clean_CAN_Struct+0x58>)
 8000884:	2100      	movs	r1, #0
 8000886:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <Clean_CAN_Struct+0x58>)
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	2200      	movs	r2, #0
 8000894:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <Clean_CAN_Struct+0x58>)
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <Clean_CAN_Struct+0x58>)
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4413      	add	r3, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	3301      	adds	r3, #1
 80008b2:	80fb      	strh	r3, [r7, #6]
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008ba:	d3e1      	bcc.n	8000880 <Clean_CAN_Struct+0xc>
	}
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	24002390 	.word	0x24002390

080008d0 <canMessageReceived>:

void canMessageReceived(uint16_t id, uint8_t *data) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	80fb      	strh	r3, [r7, #6]
	if (id > CAN_IDS_NUMBER - 1)
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008e2:	d224      	bcs.n	800092e <canMessageReceived+0x5e>
		return;
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <canMessageReceived+0x68>)
 80008e8:	f002 fa5f 	bl	8002daa <HAL_GPIO_TogglePin>
	uint16_t *data_word = (uint16_t*) data;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	60fb      	str	r3, [r7, #12]
	can_vector[id].word_0 = data_word[0];
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	8811      	ldrh	r1, [r2, #0]
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <canMessageReceived+0x6c>)
 80008f8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[id].word_1 = data_word[1];
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	8851      	ldrh	r1, [r2, #2]
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <canMessageReceived+0x6c>)
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	4413      	add	r3, r2
 8000908:	460a      	mov	r2, r1
 800090a:	805a      	strh	r2, [r3, #2]
	can_vector[id].word_2 = data_word[2];
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	8891      	ldrh	r1, [r2, #4]
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <canMessageReceived+0x6c>)
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4413      	add	r3, r2
 8000918:	460a      	mov	r2, r1
 800091a:	809a      	strh	r2, [r3, #4]
	can_vector[id].word_3 = data_word[3];
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	88d1      	ldrh	r1, [r2, #6]
 8000922:	4a06      	ldr	r2, [pc, #24]	; (800093c <canMessageReceived+0x6c>)
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	4413      	add	r3, r2
 8000928:	460a      	mov	r2, r1
 800092a:	80da      	strh	r2, [r3, #6]
 800092c:	e000      	b.n	8000930 <canMessageReceived+0x60>
		return;
 800092e:	bf00      	nop
}
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	58020c00 	.word	0x58020c00
 800093c:	24002390 	.word	0x24002390

08000940 <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <initialize_general_CAN+0x24>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <initialize_general_CAN+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <initialize_general_CAN+0x28>)
 8000954:	4905      	ldr	r1, [pc, #20]	; (800096c <initialize_general_CAN+0x2c>)
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fe8e 	bl	8000678 <initialize_CAN>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240010cc 	.word	0x240010cc
 8000968:	240010d0 	.word	0x240010d0
 800096c:	08000971 	.word	0x08000971

08000970 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d03f      	beq.n	8000a04 <CAN_general_receive_callback+0x94>

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <CAN_general_receive_callback+0x9c>)
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <CAN_general_receive_callback+0xa0>)
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f001 f988 	bl	8001ca0 <HAL_FDCAN_GetRxMessage>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 8000996:	f000 fa27 	bl	8000de8 <Error_Handler>
		}

		idgeneral = RxHeader.Identifier;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <CAN_general_receive_callback+0xa0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <CAN_general_receive_callback+0xa4>)
 80009a0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e019      	b.n	80009dc <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <CAN_general_receive_callback+0x9c>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b219      	sxth	r1, r3
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <CAN_general_receive_callback+0x9c>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b21a      	sxth	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da00      	bge.n	80009c6 <CAN_general_receive_callback+0x56>
 80009c4:	3301      	adds	r3, #1
 80009c6:	105b      	asrs	r3, r3, #1
 80009c8:	4618      	mov	r0, r3
 80009ca:	ea41 0302 	orr.w	r3, r1, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <CAN_general_receive_callback+0xa8>)
 80009d2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3302      	adds	r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	dde2      	ble.n	80009a8 <CAN_general_receive_callback+0x38>
		}
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas
		canMessageReceived(idgeneral, datageneral);
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <CAN_general_receive_callback+0xa4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	490b      	ldr	r1, [pc, #44]	; (8000a18 <CAN_general_receive_callback+0xa8>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff70 	bl	80008d0 <canMessageReceived>

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f001 fac1 	bl	8001f7c <HAL_FDCAN_ActivateNotification>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <CAN_general_receive_callback+0x94>
			/* Notification Error */
			Error_Handler();
 8000a00:	f000 f9f2 	bl	8000de8 <Error_Handler>
		}
	}
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2400301c 	.word	0x2400301c
 8000a10:	24003024 	.word	0x24003024
 8000a14:	24003010 	.word	0x24003010
 8000a18:	24003014 	.word	0x24003014

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fcb9 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f819 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f000 f95f 	bl	8000cec <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a2e:	f000 f88f 	bl	8000b50 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000a32:	f000 f90f 	bl	8000c54 <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 8000a36:	f000 f8ef 	bl	8000c18 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a3a:	f008 fd51 	bl	80094e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 8000a3e:	f7ff fe59 	bl	80006f4 <init_CAN>
  SD_Create_File();
 8000a42:	f7ff fe61 	bl	8000708 <SD_Create_File>
  Clean_CAN_Struct();
 8000a46:	f7ff ff15 	bl	8000874 <Clean_CAN_Struct>
  uint16_t vet_tx[4]={0,0,0,0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
  uint16_t id = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	81fb      	strh	r3, [r7, #14]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  writeSD();
 8000a56:	f7ff fe9f 	bl	8000798 <writeSD>
 8000a5a:	e7fc      	b.n	8000a56 <main+0x3a>

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09c      	sub	sp, #112	; 0x70
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	224c      	movs	r2, #76	; 0x4c
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00c fa4a 	bl	800cf04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c fa44 	bl	800cf04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f002 f9af 	bl	8002de0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <SystemClock_Config+0xec>)
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	4a2f      	ldr	r2, [pc, #188]	; (8000b48 <SystemClock_Config+0xec>)
 8000a8c:	f023 0301 	bic.w	r3, r3, #1
 8000a90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <SystemClock_Config+0xec>)
 8000a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <SystemClock_Config+0xf0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <SystemClock_Config+0xf0>)
 8000aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <SystemClock_Config+0xf0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab4:	bf00      	nop
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <SystemClock_Config+0xf0>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac2:	d1f8      	bne.n	8000ab6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ada:	2364      	movs	r3, #100	; 0x64
 8000adc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aea:	230c      	movs	r3, #12
 8000aec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f9aa 	bl	8002e54 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b06:	f000 f96f 	bl	8000de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	233f      	movs	r3, #63	; 0x3f
 8000b0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b16:	2308      	movs	r3, #8
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b1a:	2340      	movs	r3, #64	; 0x40
 8000b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b1e:	2340      	movs	r3, #64	; 0x40
 8000b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f002 fd9f 	bl	8003674 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b3c:	f000 f954 	bl	8000de8 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3770      	adds	r7, #112	; 0x70
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000400 	.word	0x58000400
 8000b4c:	58024800 	.word	0x58024800

08000b50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b56:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <MX_FDCAN1_Init+0xc4>)
 8000b58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b86:	220d      	movs	r2, #13
 8000b88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000b9e:	220d      	movs	r2, #13
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bc8:	2220      	movs	r2, #32
 8000bca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000be0:	2220      	movs	r2, #32
 8000be2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000be6:	2220      	movs	r2, #32
 8000be8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bec:	2220      	movs	r2, #32
 8000bee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_FDCAN1_Init+0xc0>)
 8000bfe:	f000 fd9d 	bl	800173c <HAL_FDCAN_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c08:	f000 f8ee 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240030c8 	.word	0x240030c8
 8000c14:	4000a000 	.word	0x4000a000

08000c18 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_SDMMC1_SD_Init+0x34>)
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <MX_SDMMC1_SD_Init+0x38>)
 8000c20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_SDMMC1_SD_Init+0x34>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_SDMMC1_SD_Init+0x34>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_SDMMC1_SD_Init+0x34>)
 8000c30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c34:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <MX_SDMMC1_SD_Init+0x34>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <MX_SDMMC1_SD_Init+0x34>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	2400304c 	.word	0x2400304c
 8000c50:	52007000 	.word	0x52007000

08000c54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_UART4_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c9e:	f006 fe35 	bl	800790c <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f89e 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cb0:	f007 fd82 	bl	80087b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 f895 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cc2:	f007 fdb7 	bl	8008834 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f000 f88c 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cd2:	f007 fd38 	bl	8008746 <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f884 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240031bc 	.word	0x240031bc
 8000ce8:	40004c00 	.word	0x40004c00

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	4a35      	ldr	r2, [pc, #212]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a1f      	ldr	r2, [pc, #124]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xf4>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_GPIO_Init+0xf8>)
 8000d9e:	f001 ffeb 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <MX_GPIO_Init+0xf8>)
 8000db6:	f001 fe17 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_GPIO_Init+0xf8>)
 8000dd2:	f001 fe09 	bl	80029e8 <HAL_GPIO_Init>

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020c00 	.word	0x58020c00

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_MspInit+0x30>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x30>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58024400 	.word	0x58024400

08000e28 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b8      	sub	sp, #224	; 0xe0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	22bc      	movs	r2, #188	; 0xbc
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f00c f85b 	bl	800cf04 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <HAL_FDCAN_MspInit+0xe0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d152      	bne.n	8000efe <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 ff90 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8000e72:	f7ff ffb9 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_FDCAN_MspInit+0xe4>)
 8000e78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_FDCAN_MspInit+0xe4>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_FDCAN_MspInit+0xe4>)
 8000e88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_FDCAN_MspInit+0xe4>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <HAL_FDCAN_MspInit+0xe4>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_FDCAN_MspInit+0xe4>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ecc:	2309      	movs	r3, #9
 8000ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <HAL_FDCAN_MspInit+0xe8>)
 8000eda:	f001 fd85 	bl	80029e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2013      	movs	r0, #19
 8000ee4:	f000 fbf5 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ee8:	2013      	movs	r0, #19
 8000eea:	f000 fc0c 	bl	8001706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2015      	movs	r0, #21
 8000ef4:	f000 fbed 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000ef8:	2015      	movs	r0, #21
 8000efa:	f000 fc04 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	37e0      	adds	r7, #224	; 0xe0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	4000a000 	.word	0x4000a000
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58020400 	.word	0x58020400

08000f14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ba      	sub	sp, #232	; 0xe8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22bc      	movs	r2, #188	; 0xbc
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00b ffe5 	bl	800cf04 <memset>
  if(hsd->Instance==SDMMC1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_SD_MspInit+0x144>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	f040 8085 	bne.w	8001050 <HAL_SD_MspInit+0x13c>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	f107 0318 	add.w	r3, r7, #24
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 ff19 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000f60:	f7ff ff42 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f64:	4b3d      	ldr	r3, [pc, #244]	; (800105c <HAL_SD_MspInit+0x148>)
 8000f66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f6a:	4a3c      	ldr	r2, [pc, #240]	; (800105c <HAL_SD_MspInit+0x148>)
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f70:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f74:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_SD_MspInit+0x148>)
 8000f76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <HAL_SD_MspInit+0x148>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a34      	ldr	r2, [pc, #208]	; (800105c <HAL_SD_MspInit+0x148>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <HAL_SD_MspInit+0x148>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_SD_MspInit+0x148>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	; (800105c <HAL_SD_MspInit+0x148>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_SD_MspInit+0x148>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000fbe:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fd8:	230c      	movs	r3, #12
 8000fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <HAL_SD_MspInit+0x14c>)
 8000fe6:	f001 fcff 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001004:	230c      	movs	r3, #12
 8001006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100e:	4619      	mov	r1, r3
 8001010:	4813      	ldr	r0, [pc, #76]	; (8001060 <HAL_SD_MspInit+0x14c>)
 8001012:	f001 fce9 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001016:	2304      	movs	r3, #4
 8001018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800102e:	230c      	movs	r3, #12
 8001030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001034:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001038:	4619      	mov	r1, r3
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <HAL_SD_MspInit+0x150>)
 800103c:	f001 fcd4 	bl	80029e8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2031      	movs	r0, #49	; 0x31
 8001046:	f000 fb44 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800104a:	2031      	movs	r0, #49	; 0x31
 800104c:	f000 fb5b 	bl	8001706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	37e8      	adds	r7, #232	; 0xe8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	52007000 	.word	0x52007000
 800105c:	58024400 	.word	0x58024400
 8001060:	58020800 	.word	0x58020800
 8001064:	58020c00 	.word	0x58020c00

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b0b8      	sub	sp, #224	; 0xe0
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	22bc      	movs	r2, #188	; 0xbc
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00b ff3b 	bl	800cf04 <memset>
  if(huart->Instance==UART4)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <HAL_UART_MspInit+0xbc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d141      	bne.n	800111c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001098:	2302      	movs	r3, #2
 800109a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fe70 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010b2:	f7ff fe99 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_UART_MspInit+0xc0>)
 80010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_UART_MspInit+0xc0>)
 80010be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_UART_MspInit+0xc0>)
 80010c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_UART_MspInit+0xc0>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <HAL_UART_MspInit+0xc0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_UART_MspInit+0xc0>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800110a:	2308      	movs	r3, #8
 800110c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_UART_MspInit+0xc4>)
 8001118:	f001 fc66 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	37e0      	adds	r7, #224	; 0xe0
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40004c00 	.word	0x40004c00
 8001128:	58024400 	.word	0x58024400
 800112c:	58020000 	.word	0x58020000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f97e 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <FDCAN1_IT0_IRQHandler+0x10>)
 800118a:	f000 ff71 	bl	8002070 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	240030c8 	.word	0x240030c8

08001198 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <FDCAN1_IT1_IRQHandler+0x10>)
 800119e:	f000 ff67 	bl	8002070 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	240030c8 	.word	0x240030c8

080011ac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <SDMMC1_IRQHandler+0x10>)
 80011b2:	f005 f9d9 	bl	8006568 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400304c 	.word	0x2400304c

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f00b fe50 	bl	800ce94 <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24080000 	.word	0x24080000
 8001220:	00000800 	.word	0x00000800
 8001224:	240010f4 	.word	0x240010f4
 8001228:	240052d0 	.word	0x240052d0

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <SystemInit+0xec>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a38      	ldr	r2, [pc, #224]	; (8001318 <SystemInit+0xec>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <SystemInit+0xf0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	2b06      	cmp	r3, #6
 800124a:	d807      	bhi.n	800125c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <SystemInit+0xf0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 030f 	bic.w	r3, r3, #15
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <SystemInit+0xf0>)
 8001256:	f043 0307 	orr.w	r3, r3, #7
 800125a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <SystemInit+0xf4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <SystemInit+0xf4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <SystemInit+0xf4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <SystemInit+0xf4>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	492b      	ldr	r1, [pc, #172]	; (8001320 <SystemInit+0xf4>)
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <SystemInit+0xf8>)
 8001276:	4013      	ands	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <SystemInit+0xf0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemInit+0xf0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <SystemInit+0xf0>)
 8001290:	f043 0307 	orr.w	r3, r3, #7
 8001294:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <SystemInit+0xf4>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <SystemInit+0xf4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <SystemInit+0xf4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <SystemInit+0xf4>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <SystemInit+0xfc>)
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <SystemInit+0xf4>)
 80012b0:	4a1e      	ldr	r2, [pc, #120]	; (800132c <SystemInit+0x100>)
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <SystemInit+0xf4>)
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <SystemInit+0x104>)
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <SystemInit+0xf4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <SystemInit+0xf4>)
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <SystemInit+0x104>)
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <SystemInit+0xf4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <SystemInit+0xf4>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <SystemInit+0x104>)
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <SystemInit+0xf4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <SystemInit+0xf4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a10      	ldr	r2, [pc, #64]	; (8001320 <SystemInit+0xf4>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <SystemInit+0xf4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <SystemInit+0x108>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <SystemInit+0x10c>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f6:	d202      	bcs.n	80012fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <SystemInit+0x110>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <SystemInit+0x114>)
 8001300:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001304:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SystemInit+0xec>)
 8001308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	52002000 	.word	0x52002000
 8001320:	58024400 	.word	0x58024400
 8001324:	eaf6ed7f 	.word	0xeaf6ed7f
 8001328:	02020200 	.word	0x02020200
 800132c:	01ff0000 	.word	0x01ff0000
 8001330:	01010280 	.word	0x01010280
 8001334:	5c001000 	.word	0x5c001000
 8001338:	ffff0000 	.word	0xffff0000
 800133c:	51008108 	.word	0x51008108
 8001340:	52004000 	.word	0x52004000

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff ff70 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f00b fd95 	bl	800cea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fb51 	bl	8000a1c <main>
  bx  lr
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001380:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001384:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001388:	0800dd08 	.word	0x0800dd08
  ldr r2, =_sbss
 800138c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001390:	240052d0 	.word	0x240052d0

08001394 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC3_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139e:	2003      	movs	r0, #3
 80013a0:	f000 f98c 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a4:	f002 fb1c 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_Init+0x68>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <HAL_Init+0x6c>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_Init+0x6c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_Init+0x70>)
 80013da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_Init+0x74>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f814 	bl	8001410 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e002      	b.n	80013f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f2:	f7ff fcff 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	58024400 	.word	0x58024400
 8001404:	0800d828 	.word	0x0800d828
 8001408:	24000004 	.word	0x24000004
 800140c:	24000000 	.word	0x24000000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_InitTick+0x60>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e021      	b.n	8001468 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_InitTick+0x64>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_InitTick+0x60>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f971 	bl	8001722 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f93b 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x68>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2400000c 	.word	0x2400000c
 8001474:	24000000 	.word	0x24000000
 8001478:	24000008 	.word	0x24000008

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2400000c 	.word	0x2400000c
 80014a0:	2400324c 	.word	0x2400324c

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2400324c 	.word	0x2400324c

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2400000c 	.word	0x2400000c

08001504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetREVID+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0c1b      	lsrs	r3, r3, #16
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	5c001000 	.word	0x5c001000

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	4313      	orrs	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	05fa0000 	.word	0x05fa0000

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff40 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff90 	bl	8001610 <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5f 	bl	80015bc <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff33 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa4 	bl	8001678 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b098      	sub	sp, #96	; 0x60
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001744:	4a99      	ldr	r2, [pc, #612]	; (80019ac <HAL_FDCAN_Init+0x270>)
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4611      	mov	r1, r2
 800174c:	224c      	movs	r2, #76	; 0x4c
 800174e:	4618      	mov	r0, r3
 8001750:	f00b fbca 	bl	800cee8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e23d      	b.n	8001bda <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a93      	ldr	r2, [pc, #588]	; (80019b0 <HAL_FDCAN_Init+0x274>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d106      	bne.n	8001776 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d155      	bne.n	800182e <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a89      	ldr	r2, [pc, #548]	; (80019b4 <HAL_FDCAN_Init+0x278>)
 800178e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a88      	ldr	r2, [pc, #544]	; (80019b8 <HAL_FDCAN_Init+0x27c>)
 8001796:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a87      	ldr	r2, [pc, #540]	; (80019bc <HAL_FDCAN_Init+0x280>)
 800179e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a86      	ldr	r2, [pc, #536]	; (80019c0 <HAL_FDCAN_Init+0x284>)
 80017a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a85      	ldr	r2, [pc, #532]	; (80019c4 <HAL_FDCAN_Init+0x288>)
 80017ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a84      	ldr	r2, [pc, #528]	; (80019c8 <HAL_FDCAN_Init+0x28c>)
 80017b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a83      	ldr	r2, [pc, #524]	; (80019cc <HAL_FDCAN_Init+0x290>)
 80017be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <HAL_FDCAN_Init+0x294>)
 80017c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a81      	ldr	r2, [pc, #516]	; (80019d4 <HAL_FDCAN_Init+0x298>)
 80017ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a80      	ldr	r2, [pc, #512]	; (80019d8 <HAL_FDCAN_Init+0x29c>)
 80017d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a7f      	ldr	r2, [pc, #508]	; (80019dc <HAL_FDCAN_Init+0x2a0>)
 80017de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a7e      	ldr	r2, [pc, #504]	; (80019e0 <HAL_FDCAN_Init+0x2a4>)
 80017e6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a7d      	ldr	r2, [pc, #500]	; (80019e4 <HAL_FDCAN_Init+0x2a8>)
 80017ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <HAL_FDCAN_Init+0x2ac>)
 80017f6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a7b      	ldr	r2, [pc, #492]	; (80019ec <HAL_FDCAN_Init+0x2b0>)
 80017fe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <HAL_FDCAN_Init+0x2b4>)
 8001806:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a79      	ldr	r2, [pc, #484]	; (80019f4 <HAL_FDCAN_Init+0x2b8>)
 800180e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a76      	ldr	r2, [pc, #472]	; (80019f8 <HAL_FDCAN_Init+0x2bc>)
 8001820:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0210 	bic.w	r2, r2, #16
 800183c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800183e:	f7ff fe31 	bl	80014a4 <HAL_GetTick>
 8001842:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001844:	e014      	b.n	8001870 <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001846:	f7ff fe2d 	bl	80014a4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b0a      	cmp	r3, #10
 8001852:	d90d      	bls.n	8001870 <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2203      	movs	r2, #3
 8001868:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e1b4      	b.n	8001bda <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b08      	cmp	r3, #8
 800187c:	d0e3      	beq.n	8001846 <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188e:	f7ff fe09 	bl	80014a4 <HAL_GetTick>
 8001892:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001894:	e014      	b.n	80018c0 <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001896:	f7ff fe05 	bl	80014a4 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b0a      	cmp	r3, #10
 80018a2:	d90d      	bls.n	80018c0 <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e18c      	b.n	8001bda <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0e3      	beq.n	8001896 <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0202 	orr.w	r2, r2, #2
 80018dc:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7c1b      	ldrb	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d108      	bne.n	80018f8 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f4:	619a      	str	r2, [r3, #24]
 80018f6:	e007      	b.n	8001908 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001906:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7c5b      	ldrb	r3, [r3, #17]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800191e:	619a      	str	r2, [r3, #24]
 8001920:	e007      	b.n	8001932 <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699a      	ldr	r2, [r3, #24]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001930:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7c9b      	ldrb	r3, [r3, #18]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001948:	619a      	str	r2, [r3, #24]
 800194a:	e007      	b.n	800195c <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800195a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001980:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0210 	bic.w	r2, r2, #16
 8001990:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d130      	bne.n	80019fc <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0204 	orr.w	r2, r2, #4
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	e054      	b.n	8001a56 <HAL_FDCAN_Init+0x31a>
 80019ac:	0800d794 	.word	0x0800d794
 80019b0:	4000a000 	.word	0x4000a000
 80019b4:	08002571 	.word	0x08002571
 80019b8:	08002587 	.word	0x08002587
 80019bc:	0800259d 	.word	0x0800259d
 80019c0:	080025b3 	.word	0x080025b3
 80019c4:	080025c9 	.word	0x080025c9
 80019c8:	080025dd 	.word	0x080025dd
 80019cc:	080025f3 	.word	0x080025f3
 80019d0:	08002609 	.word	0x08002609
 80019d4:	08002645 	.word	0x08002645
 80019d8:	0800261d 	.word	0x0800261d
 80019dc:	08002631 	.word	0x08002631
 80019e0:	08002659 	.word	0x08002659
 80019e4:	0800266d 	.word	0x0800266d
 80019e8:	08002683 	.word	0x08002683
 80019ec:	08002699 	.word	0x08002699
 80019f0:	080026af 	.word	0x080026af
 80019f4:	080026c7 	.word	0x080026c7
 80019f8:	08000e29 	.word	0x08000e29
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d028      	beq.n	8001a56 <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d01c      	beq.n	8001a46 <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a1a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0210 	orr.w	r2, r2, #16
 8001a2a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d110      	bne.n	8001a56 <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	619a      	str	r2, [r3, #24]
 8001a44:	e007      	b.n	8001a56 <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a66:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001a6e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001a7e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001a80:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a8a:	d115      	bne.n	8001ab8 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	3b01      	subs	r3, #1
 8001a98:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001a9a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	3b01      	subs	r3, #1
 8001aae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001ab4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001ab6:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4413      	add	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001aec:	f023 0107 	bic.w	r1, r3, #7
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001afa:	4413      	add	r3, r2
 8001afc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b1a:	f023 0107 	bic.w	r1, r3, #7
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b28:	4413      	add	r3, r2
 8001b2a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b48:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b56:	4413      	add	r3, r2
 8001b58:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b5c:	011a      	lsls	r2, r3, #4
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b78:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b86:	4413      	add	r3, r2
 8001b88:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_FDCAN_Init+0x4a8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f022 0203 	bic.w	r2, r2, #3
 8001bb0:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fd86 	bl	80026dc <FDCAN_CalcultateRamBlockAddresses>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001bd6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3760      	adds	r7, #96	; 0x60
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	4000a000 	.word	0x4000a000

08001be8 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e015      	b.n	8001c3c <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d104      	bne.n	8001c26 <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001c24:	e009      	b.n	8001c3a <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d111      	bne.n	8001c80 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e008      	b.n	8001c92 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c86:	f043 0204 	orr.w	r2, r3, #4
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
  }
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cb8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	f040 814b 	bne.w	8001f58 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b40      	cmp	r3, #64	; 0x40
 8001cc6:	d14d      	bne.n	8001d64 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cde:	f043 0220 	orr.w	r2, r3, #32
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e13e      	b.n	8001f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e12c      	b.n	8001f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d18:	0e1b      	lsrs	r3, r3, #24
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10b      	bne.n	8001d3a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d2a:	0fdb      	lsrs	r3, r3, #31
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d34:	d101      	bne.n	8001d3a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	69f9      	ldr	r1, [r7, #28]
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e069      	b.n	8001e38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b41      	cmp	r3, #65	; 0x41
 8001d68:	d14d      	bne.n	8001e06 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0ed      	b.n	8001f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0db      	b.n	8001f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001dba:	0e1b      	lsrs	r3, r3, #24
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10b      	bne.n	8001ddc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dcc:	0fdb      	lsrs	r3, r3, #31
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dd6:	d101      	bne.n	8001ddc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	69f9      	ldr	r1, [r7, #28]
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	e018      	b.n	8001e38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d309      	bcc.n	8001e24 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e16:	f043 0220 	orr.w	r2, r3, #32
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0a2      	b.n	8001f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0c9b      	lsrs	r3, r3, #18
 8001e52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e005      	b.n	8001e68 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	3304      	adds	r3, #4
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0e1b      	lsrs	r3, r3, #24
 8001eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0fda      	lsrs	r2, r3, #31
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	3304      	adds	r3, #4
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	e00a      	b.n	8001ef2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	441a      	add	r2, r3
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	0c1b      	lsrs	r3, r3, #16
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	461a      	mov	r2, r3
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d3eb      	bcc.n	8001edc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d105      	bne.n	8001f16 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001f14:	e01e      	b.n	8001f54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b41      	cmp	r3, #65	; 0x41
 8001f1a:	d105      	bne.n	8001f28 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001f26:	e015      	b.n	8001f54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b1f      	cmp	r3, #31
 8001f2c:	d808      	bhi.n	8001f40 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001f3e:	e009      	b.n	8001f54 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 021f 	and.w	r2, r3, #31
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e008      	b.n	8001f6a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f5e:	f043 0208 	orr.w	r2, r3, #8
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	372c      	adds	r7, #44	; 0x2c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	0800d838 	.word	0x0800d838

08001f7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f8e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d002      	beq.n	8001f9c <HAL_FDCAN_ActivateNotification+0x20>
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d155      	bne.n	8002048 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d108      	bne.n	8001fbc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fba:	e014      	b.n	8001fe6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d108      	bne.n	8001fde <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0202 	orr.w	r2, r2, #2
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fdc:	e003      	b.n	8001fe6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	430a      	orrs	r2, r1
 800201e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_FDCAN_ActivateNotification+0xec>)
 800202c:	4013      	ands	r3, r2
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	430b      	orrs	r3, r1
 8002034:	6553      	str	r3, [r2, #84]	; 0x54
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_FDCAN_ActivateNotification+0xf0>)
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0f9b      	lsrs	r3, r3, #30
 800203e:	490b      	ldr	r1, [pc, #44]	; (800206c <HAL_FDCAN_ActivateNotification+0xf0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e008      	b.n	800205a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	3fcfffff 	.word	0x3fcfffff
 800206c:	4000a800 	.word	0x4000a800

08002070 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002078:	4b98      	ldr	r3, [pc, #608]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	079b      	lsls	r3, r3, #30
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002080:	4b96      	ldr	r3, [pc, #600]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	079b      	lsls	r3, r3, #30
 8002086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002088:	4013      	ands	r3, r2
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002092:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020a0:	4013      	ands	r3, r2
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b8:	4013      	ands	r3, r2
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d0:	4013      	ands	r3, r2
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020e8:	4013      	ands	r3, r2
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002100:	4013      	ands	r3, r2
 8002102:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d013      	beq.n	800213a <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00c      	beq.n	800213a <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002128:	651a      	str	r2, [r3, #80]	; 0x50
 800212a:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	4013      	ands	r3, r2
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002176:	651a      	str	r2, [r3, #80]	; 0x50
 8002178:	4b58      	ldr	r3, [pc, #352]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00f      	beq.n	80021b0 <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002196:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <HAL_FDCAN_IRQHandler+0x270>)
 8002198:	400b      	ands	r3, r1
 800219a:	6513      	str	r3, [r2, #80]	; 0x50
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 800219e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a0:	0f9b      	lsrs	r3, r3, #30
 80021a2:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80021b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00f      	beq.n	80021d6 <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021bc:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <HAL_FDCAN_IRQHandler+0x270>)
 80021be:	400b      	ands	r3, r1
 80021c0:	6513      	str	r3, [r2, #80]	; 0x50
 80021c2:	4a46      	ldr	r2, [pc, #280]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 80021c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c6:	0f9b      	lsrs	r3, r3, #30
 80021c8:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80021d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00f      	beq.n	80021fc <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_FDCAN_IRQHandler+0x270>)
 80021e4:	400b      	ands	r3, r1
 80021e6:	6513      	str	r3, [r2, #80]	; 0x50
 80021e8:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	0f9b      	lsrs	r3, r3, #30
 80021ee:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00f      	beq.n	8002222 <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002208:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_FDCAN_IRQHandler+0x270>)
 800220a:	400b      	ands	r3, r1
 800220c:	6513      	str	r3, [r2, #80]	; 0x50
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	0f9b      	lsrs	r3, r3, #30
 8002214:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800221c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002246:	651a      	str	r2, [r3, #80]	; 0x50
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d020      	beq.n	80022a8 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002270:	2b00      	cmp	r3, #0
 8002272:	d019      	beq.n	80022a8 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002288:	4013      	ands	r3, r2
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002294:	651a      	str	r2, [r3, #80]	; 0x50
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80022a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d018      	beq.n	80022e8 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d011      	beq.n	80022e8 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022cc:	651a      	str	r2, [r3, #80]	; 0x50
 80022ce:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_FDCAN_IRQHandler+0x26c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80022da:	e003      	b.n	80022e4 <HAL_FDCAN_IRQHandler+0x274>
 80022dc:	4000a800 	.word	0x4000a800
 80022e0:	3fcfffff 	.word	0x3fcfffff
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d013      	beq.n	800231e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00c      	beq.n	800231e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800230c:	651a      	str	r2, [r3, #80]	; 0x50
 800230e:	4b95      	ldr	r3, [pc, #596]	; (8002564 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002342:	651a      	str	r2, [r3, #80]	; 0x50
 8002344:	4b87      	ldr	r3, [pc, #540]	; (8002564 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00f      	beq.n	8002390 <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
 800237a:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <HAL_FDCAN_IRQHandler+0x4f4>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002386:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00f      	beq.n	80023b6 <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800239c:	4b72      	ldr	r3, [pc, #456]	; (8002568 <HAL_FDCAN_IRQHandler+0x4f8>)
 800239e:	400b      	ands	r3, r1
 80023a0:	6513      	str	r3, [r2, #80]	; 0x50
 80023a2:	4a70      	ldr	r2, [pc, #448]	; (8002564 <HAL_FDCAN_IRQHandler+0x4f4>)
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	0f9b      	lsrs	r3, r3, #30
 80023a8:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80023b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80023b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d011      	beq.n	80023e0 <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023c2:	4b69      	ldr	r3, [pc, #420]	; (8002568 <HAL_FDCAN_IRQHandler+0x4f8>)
 80023c4:	400b      	ands	r3, r1
 80023c6:	6513      	str	r3, [r2, #80]	; 0x50
 80023c8:	4a66      	ldr	r2, [pc, #408]	; (8002564 <HAL_FDCAN_IRQHandler+0x4f4>)
 80023ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023cc:	0f9b      	lsrs	r3, r3, #30
 80023ce:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a61      	ldr	r2, [pc, #388]	; (800256c <HAL_FDCAN_IRQHandler+0x4fc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f040 80ae 	bne.w	8002548 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80a6 	beq.w	8002548 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002410:	4013      	ands	r3, r2
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800241e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	6a3a      	ldr	r2, [r7, #32]
 8002428:	4013      	ands	r3, r2
 800242a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002436:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	4013      	ands	r3, r2
 8002442:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800244e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002466:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	6a3a      	ldr	r2, [r7, #32]
 800249a:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01d      	beq.n	80024f2 <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024da:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	6939      	ldr	r1, [r7, #16]
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800255c:	bf00      	nop
 800255e:	3748      	adds	r7, #72	; 0x48
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	4000a800 	.word	0x4000a800
 8002568:	3fcfffff 	.word	0x3fcfffff
 800256c:	4000a000 	.word	0x4000a000

08002570 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026f2:	4ba7      	ldr	r3, [pc, #668]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	0091      	lsls	r1, r2, #2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	430b      	orrs	r3, r1
 8002700:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	041a      	lsls	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4413      	add	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002732:	4b97      	ldr	r3, [pc, #604]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002734:	4013      	ands	r3, r2
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	0091      	lsls	r1, r2, #2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	430b      	orrs	r3, r1
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002774:	4b86      	ldr	r3, [pc, #536]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002776:	4013      	ands	r3, r2
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	0091      	lsls	r1, r2, #2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800278e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	041a      	lsls	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027bc:	4b74      	ldr	r3, [pc, #464]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027be:	4013      	ands	r3, r2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	0091      	lsls	r1, r2, #2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027de:	041a      	lsls	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	4413      	add	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002804:	4b62      	ldr	r3, [pc, #392]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002806:	4013      	ands	r3, r2
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	0091      	lsls	r1, r2, #2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4413      	add	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002830:	4b57      	ldr	r3, [pc, #348]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002832:	4013      	ands	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	0091      	lsls	r1, r2, #2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	430b      	orrs	r3, r1
 800283e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800284a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	041a      	lsls	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	4413      	add	r3, r2
 8002868:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002874:	4013      	ands	r3, r2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	0091      	lsls	r1, r2, #2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	430b      	orrs	r3, r1
 8002880:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800288c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028a8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b0:	061a      	lsls	r2, r3, #24
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80028c2:	4413      	add	r3, r2
 80028c4:	009a      	lsls	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	441a      	add	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d915      	bls.n	80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800298c:	e006      	b.n	800299c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800298e:	bf00      	nop
 8002990:	ffff0003 	.word	0xffff0003
 8002994:	10002b00 	.word	0x10002b00
 8002998:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2203      	movs	r2, #3
 80029b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e010      	b.n	80029da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e005      	b.n	80029cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3f3      	bcc.n	80029c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029f6:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_GPIO_Init+0x234>)
 80029f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029fa:	e194      	b.n	8002d26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8186 	beq.w	8002d20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d00b      	beq.n	8002a34 <HAL_GPIO_Init+0x4c>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a28:	2b11      	cmp	r3, #17
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	d130      	bne.n	8002a96 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0201 	and.w	r2, r3, #1
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0xee>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b12      	cmp	r3, #18
 8002ad4:	d123      	bne.n	8002b1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0203 	and.w	r2, r3, #3
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80e0 	beq.w	8002d20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b60:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <HAL_GPIO_Init+0x238>)
 8002b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b66:	4a2e      	ldr	r2, [pc, #184]	; (8002c20 <HAL_GPIO_Init+0x238>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_GPIO_Init+0x238>)
 8002b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b7e:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_GPIO_Init+0x23c>)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_GPIO_Init+0x240>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d052      	beq.n	8002c50 <HAL_GPIO_Init+0x268>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <HAL_GPIO_Init+0x244>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d031      	beq.n	8002c16 <HAL_GPIO_Init+0x22e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_GPIO_Init+0x248>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_GPIO_Init+0x22a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_GPIO_Init+0x24c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_Init+0x226>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_GPIO_Init+0x250>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x222>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_GPIO_Init+0x254>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x21e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <HAL_GPIO_Init+0x258>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x21a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <HAL_GPIO_Init+0x25c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x216>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_GPIO_Init+0x260>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x212>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_GPIO_Init+0x264>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x20e>
 8002bf2:	2309      	movs	r3, #9
 8002bf4:	e02d      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	e02b      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	e029      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002bfe:	2307      	movs	r3, #7
 8002c00:	e027      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e025      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c06:	2305      	movs	r3, #5
 8002c08:	e023      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e021      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e01f      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e01d      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e01b      	b.n	8002c52 <HAL_GPIO_Init+0x26a>
 8002c1a:	bf00      	nop
 8002c1c:	58000080 	.word	0x58000080
 8002c20:	58024400 	.word	0x58024400
 8002c24:	58000400 	.word	0x58000400
 8002c28:	58020000 	.word	0x58020000
 8002c2c:	58020400 	.word	0x58020400
 8002c30:	58020800 	.word	0x58020800
 8002c34:	58020c00 	.word	0x58020c00
 8002c38:	58021000 	.word	0x58021000
 8002c3c:	58021400 	.word	0x58021400
 8002c40:	58021800 	.word	0x58021800
 8002c44:	58021c00 	.word	0x58021c00
 8002c48:	58022000 	.word	0x58022000
 8002c4c:	58022400 	.word	0x58022400
 8002c50:	2300      	movs	r3, #0
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	f002 0203 	and.w	r2, r2, #3
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	4093      	lsls	r3, r2
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c62:	4938      	ldr	r1, [pc, #224]	; (8002d44 <HAL_GPIO_Init+0x35c>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	3301      	adds	r3, #1
 8002d24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f47f ae63 	bne.w	80029fc <HAL_GPIO_Init+0x14>
  }
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	3724      	adds	r7, #36	; 0x24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	58000400 	.word	0x58000400

08002d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e001      	b.n	8002d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
 8002d84:	4613      	mov	r3, r2
 8002d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	041a      	lsls	r2, r3, #16
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	400b      	ands	r3, r1
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_PWREx_ConfigSupply+0x70>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d00a      	beq.n	8002e0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_PWREx_ConfigSupply+0x70>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e01f      	b.n	8002e46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e01d      	b.n	8002e46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_PWREx_ConfigSupply+0x70>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	490f      	ldr	r1, [pc, #60]	; (8002e50 <HAL_PWREx_ConfigSupply+0x70>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e1a:	f7fe fb43 	bl	80014a4 <HAL_GetTick>
 8002e1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e20:	e009      	b.n	8002e36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e22:	f7fe fb3f 	bl	80014a4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e30:	d901      	bls.n	8002e36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_PWREx_ConfigSupply+0x70>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e42:	d1ee      	bne.n	8002e22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	58024800 	.word	0x58024800

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e3ff      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8087 	beq.w	8002f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e74:	4b99      	ldr	r3, [pc, #612]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e7e:	4b97      	ldr	r3, [pc, #604]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d007      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46>
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b18      	cmp	r3, #24
 8002e8e:	d110      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5e>
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10b      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9a:	4b90      	ldr	r3, [pc, #576]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d06c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x12c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d168      	bne.n	8002f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e3d9      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x76>
 8002ebc:	4b87      	ldr	r3, [pc, #540]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a86      	ldr	r2, [pc, #536]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e02e      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a81      	ldr	r2, [pc, #516]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e01d      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0xbc>
 8002ef6:	4b79      	ldr	r3, [pc, #484]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a78      	ldr	r2, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a75      	ldr	r2, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002f10:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fab8 	bl	80014a4 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe fab4 	bl	80014a4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e38d      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f4a:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xe4>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe faa4 	bl	80014a4 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe faa0 	bl	80014a4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e379      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f72:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x10c>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80ae 	beq.w	80030ec <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f90:	4b52      	ldr	r3, [pc, #328]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x162>
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	2b18      	cmp	r3, #24
 8002faa:	d13a      	bne.n	8003022 <HAL_RCC_OscConfig+0x1ce>
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d135      	bne.n	8003022 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x17a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e34b      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	f7fe fa99 	bl	8001504 <HAL_GetREVID>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d817      	bhi.n	800300c <HAL_RCC_OscConfig+0x1b8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d108      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x1a2>
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fec:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff4:	e07a      	b.n	80030ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	031b      	lsls	r3, r3, #12
 8003004:	4935      	ldr	r1, [pc, #212]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300a:	e06f      	b.n	80030ec <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	4930      	ldr	r1, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	e064      	b.n	80030ec <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d045      	beq.n	80030b6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0219 	bic.w	r2, r3, #25
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4929      	ldr	r1, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fa32 	bl	80014a4 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fa2e 	bl	80014a4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e307      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	f7fe fa4f 	bl	8001504 <HAL_GetREVID>
 8003066:	4603      	mov	r3, r0
 8003068:	f241 0203 	movw	r2, #4099	; 0x1003
 800306c:	4293      	cmp	r3, r2
 800306e:	d817      	bhi.n	80030a0 <HAL_RCC_OscConfig+0x24c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d108      	bne.n	800308a <HAL_RCC_OscConfig+0x236>
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 8003082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003086:	6053      	str	r3, [r2, #4]
 8003088:	e030      	b.n	80030ec <HAL_RCC_OscConfig+0x298>
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	4910      	ldr	r1, [pc, #64]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	e025      	b.n	80030ec <HAL_RCC_OscConfig+0x298>
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	490b      	ldr	r1, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
 80030b4:	e01a      	b.n	80030ec <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_RCC_OscConfig+0x288>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7fe f9ef 	bl	80014a4 <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe f9eb 	bl	80014a4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d903      	bls.n	80030e0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e2c4      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
 80030dc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030e0:	4ba4      	ldr	r3, [pc, #656]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a9 	beq.w	800324c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	4b9e      	ldr	r3, [pc, #632]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003102:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003104:	4b9b      	ldr	r3, [pc, #620]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d007      	beq.n	8003120 <HAL_RCC_OscConfig+0x2cc>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b18      	cmp	r3, #24
 8003114:	d13a      	bne.n	800318c <HAL_RCC_OscConfig+0x338>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d135      	bne.n	800318c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003120:	4b94      	ldr	r3, [pc, #592]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x2e4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d001      	beq.n	8003138 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e296      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003138:	f7fe f9e4 	bl	8001504 <HAL_GetREVID>
 800313c:	4603      	mov	r3, r0
 800313e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003142:	4293      	cmp	r3, r2
 8003144:	d817      	bhi.n	8003176 <HAL_RCC_OscConfig+0x322>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2b20      	cmp	r3, #32
 800314c:	d108      	bne.n	8003160 <HAL_RCC_OscConfig+0x30c>
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003156:	4a87      	ldr	r2, [pc, #540]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800315c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800315e:	e075      	b.n	800324c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003160:	4b84      	ldr	r3, [pc, #528]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	4981      	ldr	r1, [pc, #516]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003174:	e06a      	b.n	800324c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003176:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	061b      	lsls	r3, r3, #24
 8003184:	497b      	ldr	r1, [pc, #492]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003186:	4313      	orrs	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800318a:	e05f      	b.n	800324c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d042      	beq.n	800321a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003194:	4b77      	ldr	r3, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a76      	ldr	r2, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 800319a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f980 	bl	80014a4 <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031a8:	f7fe f97c 	bl	80014a4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e255      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031ba:	4b6e      	ldr	r3, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031c6:	f7fe f99d 	bl	8001504 <HAL_GetREVID>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d817      	bhi.n	8003204 <HAL_RCC_OscConfig+0x3b0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d108      	bne.n	80031ee <HAL_RCC_OscConfig+0x39a>
 80031dc:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031e4:	4a63      	ldr	r2, [pc, #396]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80031e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ea:	6053      	str	r3, [r2, #4]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0x3f8>
 80031ee:	4b61      	ldr	r3, [pc, #388]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	069b      	lsls	r3, r3, #26
 80031fc:	495d      	ldr	r1, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
 8003202:	e023      	b.n	800324c <HAL_RCC_OscConfig+0x3f8>
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	4958      	ldr	r1, [pc, #352]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
 8003218:	e018      	b.n	800324c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a55      	ldr	r2, [pc, #340]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe f93d 	bl	80014a4 <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800322e:	f7fe f939 	bl	80014a4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e212      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003240:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d036      	beq.n	80032c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d019      	beq.n	8003294 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003260:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	4a43      	ldr	r2, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe f91a 	bl	80014a4 <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003274:	f7fe f916 	bl	80014a4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ef      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003286:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x420>
 8003292:	e018      	b.n	80032c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003294:	4b37      	ldr	r3, [pc, #220]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	4a36      	ldr	r2, [pc, #216]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe f900 	bl	80014a4 <HAL_GetTick>
 80032a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fe f8fc 	bl	80014a4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1d5      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d036      	beq.n	8003340 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d019      	beq.n	800330e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032da:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 80032e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e6:	f7fe f8dd 	bl	80014a4 <HAL_GetTick>
 80032ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032ee:	f7fe f8d9 	bl	80014a4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1b2      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003300:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x49a>
 800330c:	e018      	b.n	8003340 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800331a:	f7fe f8c3 	bl	80014a4 <HAL_GetTick>
 800331e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003322:	f7fe f8bf 	bl	80014a4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e198      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_RCC_OscConfig+0x520>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8085 	beq.w	8003458 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_RCC_OscConfig+0x524>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <HAL_RCC_OscConfig+0x524>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335a:	f7fe f8a3 	bl	80014a4 <HAL_GetTick>
 800335e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003360:	e00c      	b.n	800337c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fe f89f 	bl	80014a4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d905      	bls.n	800337c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e178      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
 8003374:	58024400 	.word	0x58024400
 8003378:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337c:	4b96      	ldr	r3, [pc, #600]	; (80035d8 <HAL_RCC_OscConfig+0x784>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ec      	beq.n	8003362 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x54a>
 8003390:	4b92      	ldr	r3, [pc, #584]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a91      	ldr	r2, [pc, #580]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e02d      	b.n	80033fa <HAL_RCC_OscConfig+0x5a6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x56c>
 80033a6:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a8c      	ldr	r2, [pc, #560]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b8a      	ldr	r3, [pc, #552]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a89      	ldr	r2, [pc, #548]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033b8:	f023 0304 	bic.w	r3, r3, #4
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e01c      	b.n	80033fa <HAL_RCC_OscConfig+0x5a6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x58e>
 80033c8:	4b84      	ldr	r3, [pc, #528]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a83      	ldr	r2, [pc, #524]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b81      	ldr	r3, [pc, #516]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x5a6>
 80033e2:	4b7e      	ldr	r3, [pc, #504]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a7d      	ldr	r2, [pc, #500]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b7b      	ldr	r3, [pc, #492]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a7a      	ldr	r2, [pc, #488]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe f84f 	bl	80014a4 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe f84b 	bl	80014a4 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e122      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003420:	4b6e      	ldr	r3, [pc, #440]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x5b6>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe f839 	bl	80014a4 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fe f835 	bl	80014a4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e10c      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800344c:	4b63      	ldr	r3, [pc, #396]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8101 	beq.w	8003664 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003462:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346a:	2b18      	cmp	r3, #24
 800346c:	f000 80bc 	beq.w	80035e8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b02      	cmp	r3, #2
 8003476:	f040 8095 	bne.w	80035a4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b58      	ldr	r3, [pc, #352]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a57      	ldr	r2, [pc, #348]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe f80d 	bl	80014a4 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe f809 	bl	80014a4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0e2      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a0:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ac:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80034ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCC_OscConfig+0x78c>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	430a      	orrs	r2, r1
 80034c0:	4946      	ldr	r1, [pc, #280]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	628b      	str	r3, [r1, #40]	; 0x28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	3b01      	subs	r3, #1
 80034d6:	025b      	lsls	r3, r3, #9
 80034d8:	b29b      	uxth	r3, r3
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	3b01      	subs	r3, #1
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034f6:	4939      	ldr	r1, [pc, #228]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034fc:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a36      	ldr	r2, [pc, #216]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800350a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <HAL_RCC_OscConfig+0x790>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003514:	00d2      	lsls	r2, r2, #3
 8003516:	4931      	ldr	r1, [pc, #196]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003518:	4313      	orrs	r3, r2
 800351a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800351c:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f023 020c 	bic.w	r2, r3, #12
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	492c      	ldr	r1, [pc, #176]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800352a:	4313      	orrs	r3, r2
 800352c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f023 0202 	bic.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4928      	ldr	r1, [pc, #160]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800353c:	4313      	orrs	r3, r2
 800353e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003540:	4b26      	ldr	r3, [pc, #152]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003558:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fd ff92 	bl	80014a4 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd ff8e 	bl	80014a4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e067      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x730>
 80035a2:	e05f      	b.n	8003664 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd ff78 	bl	80014a4 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd ff74 	bl	80014a4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e04d      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_RCC_OscConfig+0x788>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x764>
 80035d6:	e045      	b.n	8003664 <HAL_RCC_OscConfig+0x810>
 80035d8:	58024800 	.word	0x58024800
 80035dc:	58024400 	.word	0x58024400
 80035e0:	fffffc0c 	.word	0xfffffc0c
 80035e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x81c>)
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_OscConfig+0x81c>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d031      	beq.n	8003660 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d12a      	bne.n	8003660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d122      	bne.n	8003660 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0a5b      	lsrs	r3, r3, #9
 800362e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d111      	bne.n	8003660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	0c1b      	lsrs	r3, r3, #16
 8003640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d108      	bne.n	8003660 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3730      	adds	r7, #48	; 0x30
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	58024400 	.word	0x58024400

08003674 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e19c      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b8a      	ldr	r3, [pc, #552]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b87      	ldr	r3, [pc, #540]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	4985      	ldr	r1, [pc, #532]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b83      	ldr	r3, [pc, #524]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e184      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d908      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036d4:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4975      	ldr	r1, [pc, #468]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fe:	429a      	cmp	r2, r3
 8003700:	d908      	bls.n	8003714 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003702:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	496a      	ldr	r1, [pc, #424]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003710:	4313      	orrs	r3, r2
 8003712:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372c:	429a      	cmp	r2, r3
 800372e:	d908      	bls.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003730:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	495e      	ldr	r1, [pc, #376]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800373e:	4313      	orrs	r3, r2
 8003740:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375a:	429a      	cmp	r2, r3
 800375c:	d908      	bls.n	8003770 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800375e:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4953      	ldr	r1, [pc, #332]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800376c:	4313      	orrs	r3, r2
 800376e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	429a      	cmp	r2, r3
 800378a:	d908      	bls.n	800379e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f023 020f 	bic.w	r2, r3, #15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4947      	ldr	r1, [pc, #284]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800379a:	4313      	orrs	r3, r2
 800379c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d055      	beq.n	8003856 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4940      	ldr	r1, [pc, #256]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d121      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0f6      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d107      	bne.n	80037ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d115      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0ea      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037f4:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0de      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0d6      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4925      	ldr	r1, [pc, #148]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003822:	4313      	orrs	r3, r2
 8003824:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fd fe3d 	bl	80014a4 <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382c:	e00a      	b.n	8003844 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382e:	f7fd fe39 	bl	80014a4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0be      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	429a      	cmp	r2, r3
 8003854:	d1eb      	bne.n	800382e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	429a      	cmp	r2, r3
 8003870:	d208      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f023 020f 	bic.w	r2, r3, #15
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	490e      	ldr	r1, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003880:	4313      	orrs	r3, r2
 8003882:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d214      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 020f 	bic.w	r2, r3, #15
 800389a:	4906      	ldr	r1, [pc, #24]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e086      	b.n	80039c2 <HAL_RCC_ClockConfig+0x34e>
 80038b4:	52002000 	.word	0x52002000
 80038b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	4b3f      	ldr	r3, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d208      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038d8:	4b3c      	ldr	r3, [pc, #240]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4939      	ldr	r1, [pc, #228]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d010      	beq.n	8003918 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003902:	429a      	cmp	r2, r3
 8003904:	d208      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	492e      	ldr	r1, [pc, #184]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003930:	429a      	cmp	r2, r3
 8003932:	d208      	bcs.n	8003946 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	4922      	ldr	r1, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003942:	4313      	orrs	r3, r2
 8003944:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800395e:	429a      	cmp	r2, r3
 8003960:	d208      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4917      	ldr	r1, [pc, #92]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003970:	4313      	orrs	r3, r2
 8003972:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003974:	f000 f834 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	4912      	ldr	r1, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x35c>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_RCC_ClockConfig+0x358>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <HAL_RCC_ClockConfig+0x35c>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x360>)
 80039aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039ac:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x364>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x368>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fd2a 	bl	8001410 <HAL_InitTick>
 80039bc:	4603      	mov	r3, r0
 80039be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	0800d828 	.word	0x0800d828
 80039d4:	24000004 	.word	0x24000004
 80039d8:	24000000 	.word	0x24000000
 80039dc:	24000008 	.word	0x24000008

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e6:	4bb3      	ldr	r3, [pc, #716]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	2b18      	cmp	r3, #24
 80039f0:	f200 8155 	bhi.w	8003c9e <HAL_RCC_GetSysClockFreq+0x2be>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a61 	.word	0x08003a61
 8003a00:	08003c9f 	.word	0x08003c9f
 8003a04:	08003c9f 	.word	0x08003c9f
 8003a08:	08003c9f 	.word	0x08003c9f
 8003a0c:	08003c9f 	.word	0x08003c9f
 8003a10:	08003c9f 	.word	0x08003c9f
 8003a14:	08003c9f 	.word	0x08003c9f
 8003a18:	08003c9f 	.word	0x08003c9f
 8003a1c:	08003a87 	.word	0x08003a87
 8003a20:	08003c9f 	.word	0x08003c9f
 8003a24:	08003c9f 	.word	0x08003c9f
 8003a28:	08003c9f 	.word	0x08003c9f
 8003a2c:	08003c9f 	.word	0x08003c9f
 8003a30:	08003c9f 	.word	0x08003c9f
 8003a34:	08003c9f 	.word	0x08003c9f
 8003a38:	08003c9f 	.word	0x08003c9f
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003c9f 	.word	0x08003c9f
 8003a44:	08003c9f 	.word	0x08003c9f
 8003a48:	08003c9f 	.word	0x08003c9f
 8003a4c:	08003c9f 	.word	0x08003c9f
 8003a50:	08003c9f 	.word	0x08003c9f
 8003a54:	08003c9f 	.word	0x08003c9f
 8003a58:	08003c9f 	.word	0x08003c9f
 8003a5c:	08003a93 	.word	0x08003a93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a60:	4b94      	ldr	r3, [pc, #592]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a6c:	4b91      	ldr	r3, [pc, #580]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	08db      	lsrs	r3, r3, #3
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	4a90      	ldr	r2, [pc, #576]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a7e:	e111      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a80:	4b8d      	ldr	r3, [pc, #564]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a82:	61bb      	str	r3, [r7, #24]
    break;
 8003a84:	e10e      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a86:	4b8d      	ldr	r3, [pc, #564]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a88:	61bb      	str	r3, [r7, #24]
    break;
 8003a8a:	e10b      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a8c:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a8e:	61bb      	str	r3, [r7, #24]
    break;
 8003a90:	e108      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a92:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a9c:	4b85      	ldr	r3, [pc, #532]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003aa8:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ab2:	4b80      	ldr	r3, [pc, #512]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	08db      	lsrs	r3, r3, #3
 8003ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80e1 	beq.w	8003c98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	f000 8083 	beq.w	8003be4 <HAL_RCC_GetSysClockFreq+0x204>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f200 80a1 	bhi.w	8003c28 <HAL_RCC_GetSysClockFreq+0x248>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x114>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d056      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003af2:	e099      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af4:	4b6f      	ldr	r3, [pc, #444]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02d      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b00:	4b6c      	ldr	r3, [pc, #432]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	4a6b      	ldr	r2, [pc, #428]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b62      	ldr	r3, [pc, #392]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b5a:	e087      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003cc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6e:	4b51      	ldr	r3, [pc, #324]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b9e:	e065      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb2:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003be2:	e043      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003cd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c26:	e021      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	0a5b      	lsrs	r3, r3, #9
 8003c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c76:	3301      	adds	r3, #1
 8003c78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c90:	ee17 3a90 	vmov	r3, s15
 8003c94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ca0:	61bb      	str	r3, [r7, #24]
    break;
 8003ca2:	bf00      	nop
  }

  return sysclockfreq;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	58024400 	.word	0x58024400
 8003cb8:	03d09000 	.word	0x03d09000
 8003cbc:	003d0900 	.word	0x003d0900
 8003cc0:	007a1200 	.word	0x007a1200
 8003cc4:	46000000 	.word	0x46000000
 8003cc8:	4c742400 	.word	0x4c742400
 8003ccc:	4a742400 	.word	0x4a742400
 8003cd0:	4af42400 	.word	0x4af42400

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cda:	f7ff fe81 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490f      	ldr	r1, [pc, #60]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	58024400 	.word	0x58024400
 8003d28:	0800d828 	.word	0x0800d828
 8003d2c:	24000004 	.word	0x24000004
 8003d30:	24000000 	.word	0x24000000

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d38:	f7ff ffcc 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4904      	ldr	r1, [pc, #16]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	58024400 	.word	0x58024400
 8003d5c:	0800d828 	.word	0x0800d828

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d64:	f7ff ffb6 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	58024400 	.word	0x58024400
 8003d88:	0800d828 	.word	0x0800d828

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d94:	2300      	movs	r3, #0
 8003d96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d98:	2300      	movs	r3, #0
 8003d9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d03f      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003db0:	d02a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003db6:	d824      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dbc:	d018      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc2:	d81e      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dcc:	d007      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003dce:	e018      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4bab      	ldr	r3, [pc, #684]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4aaa      	ldr	r2, [pc, #680]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003ddc:	e015      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 fff3 	bl	8005dd0 <RCCEx_PLL2_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dee:	e00c      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3324      	adds	r3, #36	; 0x24
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 f89c 	bl	8005f34 <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
      break;
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e10:	4b9b      	ldr	r3, [pc, #620]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1c:	4998      	ldr	r1, [pc, #608]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	650b      	str	r3, [r1, #80]	; 0x50
 8003e22:	e001      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03d      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d826      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e59 	.word	0x08003e59
 8003e48:	08003e67 	.word	0x08003e67
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e91 	.word	0x08003e91
 8003e54:	08003e91 	.word	0x08003e91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e58:	4b89      	ldr	r3, [pc, #548]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a88      	ldr	r2, [pc, #544]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e64:	e015      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 ffaf 	bl	8005dd0 <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e76:	e00c      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3324      	adds	r3, #36	; 0x24
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f002 f858 	bl	8005f34 <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e98:	4b79      	ldr	r3, [pc, #484]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	4976      	ldr	r1, [pc, #472]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	650b      	str	r3, [r1, #80]	; 0x50
 8003eaa:	e001      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d042      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	d02b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eca:	d825      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8003ece:	d028      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8003ed2:	d821      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d016      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d81d      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d007      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ee4:	e018      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee6:	4b66      	ldr	r3, [pc, #408]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	4a65      	ldr	r2, [pc, #404]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ef2:	e017      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 ff68 	bl	8005dd0 <RCCEx_PLL2_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f04:	e00e      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 f811 	bl	8005f34 <RCCEx_PLL3_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1c:	e002      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f2a:	4b55      	ldr	r3, [pc, #340]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	4952      	ldr	r1, [pc, #328]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	650b      	str	r3, [r1, #80]	; 0x50
 8003f3c:	e001      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d049      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f58:	d030      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f5e:	d82a      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f64:	d02c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003f66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f6a:	d824      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d018      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f76:	d81e      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f80:	d007      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003f82:	e018      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f84:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f90:	e017      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 ff19 	bl	8005dd0 <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003fa2:	e00e      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 ffc2 	bl	8005f34 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fb4:	e005      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fba:	e002      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd6:	492a      	ldr	r1, [pc, #168]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	658b      	str	r3, [r1, #88]	; 0x58
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04c      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff8:	d030      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ffe:	d82a      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004004:	d02c      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800400a:	d824      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800400c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004010:	d018      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004016:	d81e      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004020:	d007      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004022:	e018      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004030:	e017      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fec9 	bl	8005dd0 <RCCEx_PLL2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004042:	e00e      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3324      	adds	r3, #36	; 0x24
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f001 ff72 	bl	8005f34 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004054:	e005      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
      break;
 800405a:	e002      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004076:	4902      	ldr	r1, [pc, #8]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	658b      	str	r3, [r1, #88]	; 0x58
 800407c:	e004      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d032      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004098:	2b30      	cmp	r3, #48	; 0x30
 800409a:	d01c      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800409c:	2b30      	cmp	r3, #48	; 0x30
 800409e:	d817      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d00c      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d813      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d10f      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b0:	4baf      	ldr	r3, [pc, #700]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4aae      	ldr	r2, [pc, #696]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80040bc:	e00e      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2102      	movs	r1, #2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fe83 	bl	8005dd0 <RCCEx_PLL2_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80040ce:	e005      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	75fb      	strb	r3, [r7, #23]
      break;
 80040d4:	e002      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80040da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040e2:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	49a0      	ldr	r1, [pc, #640]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040f4:	e001      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d047      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410e:	d030      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004114:	d82a      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800411a:	d02c      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800411c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004120:	d824      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	d018      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412c:	d81e      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d007      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004138:	e018      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413a:	4b8d      	ldr	r3, [pc, #564]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	4a8c      	ldr	r2, [pc, #560]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004146:	e017      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fe3e 	bl	8005dd0 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004158:	e00e      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3324      	adds	r3, #36	; 0x24
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fee7 	bl	8005f34 <RCCEx_PLL3_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800416a:	e005      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	75fb      	strb	r3, [r7, #23]
      break;
 8004170:	e002      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800417e:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	4979      	ldr	r1, [pc, #484]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	650b      	str	r3, [r1, #80]	; 0x50
 8004190:	e001      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d049      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041aa:	d02e      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80041ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b0:	d828      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80041b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041b6:	d02a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80041b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041bc:	d822      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80041be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041c2:	d026      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80041c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041c8:	d81c      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80041ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ce:	d010      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80041d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d4:	d816      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01d      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d111      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2101      	movs	r1, #1
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fdf2 	bl	8005dd0 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041f0:	e012      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2101      	movs	r1, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fe9b 	bl	8005f34 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800421e:	4b54      	ldr	r3, [pc, #336]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004222:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	4951      	ldr	r1, [pc, #324]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800422c:	4313      	orrs	r3, r2
 800422e:	650b      	str	r3, [r1, #80]	; 0x50
 8004230:	e001      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800424c:	d02e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 800424e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004252:	d828      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d02a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425e:	d822      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004264:	d026      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800426a:	d81c      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800426c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004270:	d010      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004276:	d816      	bhi.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01d      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800427c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004280:	d111      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	2101      	movs	r1, #1
 8004288:	4618      	mov	r0, r3
 800428a:	f001 fda1 	bl	8005dd0 <RCCEx_PLL2_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004292:	e012      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f001 fe4a 	bl	8005f34 <RCCEx_PLL3_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80042a4:	e009      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	e006      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80042ac:	bf00      	nop
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80042b0:	bf00      	nop
 80042b2:	e002      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80042b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042c0:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042ce:	4928      	ldr	r1, [pc, #160]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	658b      	str	r3, [r1, #88]	; 0x58
 80042d4:	e001      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d02f      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ee:	d00e      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f4:	d814      	bhi.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d015      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fe:	d10f      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a1a      	ldr	r2, [pc, #104]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800430c:	e00c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fd5b 	bl	8005dd0 <RCCEx_PLL2_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004332:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	490d      	ldr	r1, [pc, #52]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	650b      	str	r3, [r1, #80]	; 0x50
 8004340:	e001      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d033      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	2b03      	cmp	r3, #3
 8004358:	d81c      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	0800439b 	.word	0x0800439b
 8004364:	08004375 	.word	0x08004375
 8004368:	08004383 	.word	0x08004383
 800436c:	0800439b 	.word	0x0800439b
 8004370:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004374:	4bb8      	ldr	r3, [pc, #736]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4ab7      	ldr	r2, [pc, #732]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004380:	e00c      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fd21 	bl	8005dd0 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004392:	e003      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	75fb      	strb	r3, [r7, #23]
      break;
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800439a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043a2:	4bad      	ldr	r3, [pc, #692]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	f023 0203 	bic.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	49aa      	ldr	r1, [pc, #680]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043b4:	e001      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8086 	beq.w	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c8:	4ba4      	ldr	r3, [pc, #656]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4aa3      	ldr	r2, [pc, #652]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d4:	f7fd f866 	bl	80014a4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043da:	e009      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043dc:	f7fd f862 	bl	80014a4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d902      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	75fb      	strb	r3, [r7, #23]
        break;
 80043ee:	e005      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f0:	4b9a      	ldr	r3, [pc, #616]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ef      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d166      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004402:	4b95      	ldr	r3, [pc, #596]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800440c:	4053      	eors	r3, r2
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d013      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004416:	4b90      	ldr	r3, [pc, #576]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004420:	4b8d      	ldr	r3, [pc, #564]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a8c      	ldr	r2, [pc, #560]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800442c:	4b8a      	ldr	r3, [pc, #552]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4a89      	ldr	r2, [pc, #548]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004438:	4a87      	ldr	r2, [pc, #540]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004448:	d115      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fd f82b 	bl	80014a4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004450:	e00b      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fd f827 	bl	80014a4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d902      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	75fb      	strb	r3, [r7, #23]
            break;
 8004468:	e005      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800446a:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ed      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d126      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448a:	d10d      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800448c:	4b72      	ldr	r3, [pc, #456]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800449a:	0919      	lsrs	r1, r3, #4
 800449c:	4b70      	ldr	r3, [pc, #448]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800449e:	400b      	ands	r3, r1
 80044a0:	496d      	ldr	r1, [pc, #436]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80044a8:	4b6b      	ldr	r3, [pc, #428]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	4a6a      	ldr	r2, [pc, #424]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044b2:	6113      	str	r3, [r2, #16]
 80044b4:	4b68      	ldr	r3, [pc, #416]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c2:	4965      	ldr	r1, [pc, #404]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	670b      	str	r3, [r1, #112]	; 0x70
 80044c8:	e004      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	75bb      	strb	r3, [r7, #22]
 80044ce:	e001      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d07e      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e4:	2b28      	cmp	r3, #40	; 0x28
 80044e6:	d867      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	080045bf 	.word	0x080045bf
 80044f4:	080045b9 	.word	0x080045b9
 80044f8:	080045b9 	.word	0x080045b9
 80044fc:	080045b9 	.word	0x080045b9
 8004500:	080045b9 	.word	0x080045b9
 8004504:	080045b9 	.word	0x080045b9
 8004508:	080045b9 	.word	0x080045b9
 800450c:	080045b9 	.word	0x080045b9
 8004510:	08004595 	.word	0x08004595
 8004514:	080045b9 	.word	0x080045b9
 8004518:	080045b9 	.word	0x080045b9
 800451c:	080045b9 	.word	0x080045b9
 8004520:	080045b9 	.word	0x080045b9
 8004524:	080045b9 	.word	0x080045b9
 8004528:	080045b9 	.word	0x080045b9
 800452c:	080045b9 	.word	0x080045b9
 8004530:	080045a7 	.word	0x080045a7
 8004534:	080045b9 	.word	0x080045b9
 8004538:	080045b9 	.word	0x080045b9
 800453c:	080045b9 	.word	0x080045b9
 8004540:	080045b9 	.word	0x080045b9
 8004544:	080045b9 	.word	0x080045b9
 8004548:	080045b9 	.word	0x080045b9
 800454c:	080045b9 	.word	0x080045b9
 8004550:	080045bf 	.word	0x080045bf
 8004554:	080045b9 	.word	0x080045b9
 8004558:	080045b9 	.word	0x080045b9
 800455c:	080045b9 	.word	0x080045b9
 8004560:	080045b9 	.word	0x080045b9
 8004564:	080045b9 	.word	0x080045b9
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045b9 	.word	0x080045b9
 8004570:	080045bf 	.word	0x080045bf
 8004574:	080045b9 	.word	0x080045b9
 8004578:	080045b9 	.word	0x080045b9
 800457c:	080045b9 	.word	0x080045b9
 8004580:	080045b9 	.word	0x080045b9
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045b9 	.word	0x080045b9
 800458c:	080045b9 	.word	0x080045b9
 8004590:	080045bf 	.word	0x080045bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fc18 	bl	8005dd0 <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80045a4:	e00c      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3324      	adds	r3, #36	; 0x24
 80045aa:	2101      	movs	r1, #1
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 fcc1 	bl	8005f34 <RCCEx_PLL3_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80045b6:	e003      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
      break;
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80045be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d2:	4921      	ldr	r1, [pc, #132]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	654b      	str	r3, [r1, #84]	; 0x54
 80045d8:	e001      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03e      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d820      	bhi.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	0800463b 	.word	0x0800463b
 80045fc:	08004611 	.word	0x08004611
 8004600:	08004623 	.word	0x08004623
 8004604:	0800463b 	.word	0x0800463b
 8004608:	0800463b 	.word	0x0800463b
 800460c:	0800463b 	.word	0x0800463b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	2101      	movs	r1, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fbda 	bl	8005dd0 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004620:	e00c      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3324      	adds	r3, #36	; 0x24
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f001 fc83 	bl	8005f34 <RCCEx_PLL3_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004632:	e003      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
      break;
 8004638:	e000      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800463a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d110      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	4902      	ldr	r1, [pc, #8]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004650:	4313      	orrs	r3, r2
 8004652:	654b      	str	r3, [r1, #84]	; 0x54
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400
 800465c:	58024800 	.word	0x58024800
 8004660:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d039      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	2b05      	cmp	r3, #5
 800467c:	d820      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046c7 	.word	0x080046c7
 8004688:	0800469d 	.word	0x0800469d
 800468c:	080046af 	.word	0x080046af
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046c7 	.word	0x080046c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fb94 	bl	8005dd0 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046ac:	e00c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 fc3d 	bl	8005f34 <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
      break;
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80046c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ce:	4bb7      	ldr	r3, [pc, #732]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	f023 0207 	bic.w	r2, r3, #7
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	49b3      	ldr	r1, [pc, #716]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	658b      	str	r3, [r1, #88]	; 0x58
 80046e2:	e001      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d04b      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046fe:	d02e      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004704:	d828      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d02a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d822      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004716:	d026      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800471c:	d81c      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800471e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004722:	d010      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004728:	d816      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01d      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800472e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004732:	d111      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f001 fb48 	bl	8005dd0 <RCCEx_PLL2_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004744:	e012      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3324      	adds	r3, #36	; 0x24
 800474a:	2102      	movs	r1, #2
 800474c:	4618      	mov	r0, r3
 800474e:	f001 fbf1 	bl	8005f34 <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004756:	e009      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
      break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800476a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004772:	4b8e      	ldr	r3, [pc, #568]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004780:	498a      	ldr	r1, [pc, #552]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004782:	4313      	orrs	r3, r2
 8004784:	654b      	str	r3, [r1, #84]	; 0x54
 8004786:	e001      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d04b      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800479e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047a2:	d02e      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80047a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047a8:	d828      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d02a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d822      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80047b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ba:	d026      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80047bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c0:	d81c      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80047c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c6:	d010      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d816      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01d      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d6:	d111      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 faf6 	bl	8005dd0 <RCCEx_PLL2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047e8:	e012      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3324      	adds	r3, #36	; 0x24
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 fb9f 	bl	8005f34 <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80047fa:	e009      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800480e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004816:	4b65      	ldr	r3, [pc, #404]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004824:	4961      	ldr	r1, [pc, #388]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004826:	4313      	orrs	r3, r2
 8004828:	658b      	str	r3, [r1, #88]	; 0x58
 800482a:	e001      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
 800482e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d04b      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004842:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004846:	d02e      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004848:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800484c:	d828      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800484e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004852:	d02a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004858:	d822      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800485a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800485e:	d026      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004860:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004864:	d81c      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486a:	d010      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800486c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004870:	d816      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01d      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487a:	d111      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2100      	movs	r1, #0
 8004882:	4618      	mov	r0, r3
 8004884:	f001 faa4 	bl	8005dd0 <RCCEx_PLL2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800488c:	e012      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3324      	adds	r3, #36	; 0x24
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f001 fb4d 	bl	8005f34 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800489e:	e009      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
      break;
 80048a4:	e006      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80048a6:	bf00      	nop
 80048a8:	e004      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80048aa:	bf00      	nop
 80048ac:	e002      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80048b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048ba:	4b3c      	ldr	r3, [pc, #240]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048c8:	4938      	ldr	r1, [pc, #224]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	658b      	str	r3, [r1, #88]	; 0x58
 80048ce:	e001      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ea:	d10a      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	2102      	movs	r1, #2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 fb1e 	bl	8005f34 <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004910:	4926      	ldr	r1, [pc, #152]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004912:	4313      	orrs	r3, r2
 8004914:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492c:	d10a      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3324      	adds	r3, #36	; 0x24
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fafd 	bl	8005f34 <RCCEx_PLL3_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004952:	4916      	ldr	r1, [pc, #88]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004954:	4313      	orrs	r3, r2
 8004956:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d036      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800496a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496e:	d01f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004974:	d817      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d009      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004980:	e011      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f001 fa21 	bl	8005dd0 <RCCEx_PLL2_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004992:	e00e      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3324      	adds	r3, #36	; 0x24
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f001 faca 	bl	8005f34 <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80049a4:	e005      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80049ac:	58024400 	.word	0x58024400
      break;
 80049b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b8:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049c6:	4990      	ldr	r1, [pc, #576]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	658b      	str	r3, [r1, #88]	; 0x58
 80049cc:	e001      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d033      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049e8:	d01c      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80049ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049ee:	d816      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80049f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f4:	d003      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80049f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049fa:	d007      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80049fc:	e00f      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fe:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4a81      	ldr	r2, [pc, #516]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a0a:	e00c      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	2101      	movs	r1, #1
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 fa8e 	bl	8005f34 <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]
      break;
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a2c:	4b76      	ldr	r3, [pc, #472]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3a:	4973      	ldr	r1, [pc, #460]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a40:	e001      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d029      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004a60:	e00f      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a62:	4b69      	ldr	r3, [pc, #420]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	4a68      	ldr	r2, [pc, #416]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a6e:	e00b      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f9aa 	bl	8005dd0 <RCCEx_PLL2_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004a80:	e002      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
      break;
 8004a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a8e:	4b5e      	ldr	r3, [pc, #376]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	495b      	ldr	r1, [pc, #364]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004aa0:	e001      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
 8004aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3324      	adds	r3, #36	; 0x24
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fa3b 	bl	8005f34 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d030      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004adc:	d017      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae2:	d811      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae8:	d013      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aee:	d80b      	bhi.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af8:	d106      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afa:	4b43      	ldr	r3, [pc, #268]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	4a42      	ldr	r2, [pc, #264]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004b06:	e007      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0c:	e004      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e002      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004b12:	bf00      	nop
 8004b14:	e000      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b1e:	4b3a      	ldr	r3, [pc, #232]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2a:	4937      	ldr	r1, [pc, #220]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b30:	e001      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	492e      	ldr	r1, [pc, #184]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b60:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b6e:	4926      	ldr	r1, [pc, #152]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b80:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8c:	491e      	ldr	r1, [pc, #120]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ba8:	6113      	str	r3, [r2, #16]
 8004baa:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004bb4:	4914      	ldr	r1, [pc, #80]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	da08      	bge.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	490e      	ldr	r1, [pc, #56]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	4906      	ldr	r1, [pc, #24]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004bf4:	7dbb      	ldrb	r3, [r7, #22]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	58024400 	.word	0x58024400

08004c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b090      	sub	sp, #64	; 0x40
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	f040 8095 	bne.w	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004c1e:	4bae      	ldr	r3, [pc, #696]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	f200 8088 	bhi.w	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c4d 	.word	0x08004c4d
 8004c3c:	08004c75 	.word	0x08004c75
 8004c40:	08004c9d 	.word	0x08004c9d
 8004c44:	08004d39 	.word	0x08004d39
 8004c48:	08004cc5 	.word	0x08004cc5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c4c:	4ba2      	ldr	r3, [pc, #648]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c58:	d108      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ff64 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c68:	f000 bc95 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c70:	f000 bc91 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c74:	4b98      	ldr	r3, [pc, #608]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c80:	d108      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c82:	f107 0318 	add.w	r3, r7, #24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fca8 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c90:	f000 bc81 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c98:	f000 bc7d 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca8:	d108      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fde8 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cb8:	f000 bc6d 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cc0:	f000 bc69 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cc4:	4b84      	ldr	r3, [pc, #528]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cce:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ce0:	4b7d      	ldr	r3, [pc, #500]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	08db      	lsrs	r3, r3, #3
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	4a7c      	ldr	r2, [pc, #496]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf2:	e01f      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cf4:	4b78      	ldr	r3, [pc, #480]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d00:	d106      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d08:	d102      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d0a:	4b75      	ldr	r3, [pc, #468]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0e:	e011      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d10:	4b71      	ldr	r3, [pc, #452]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d24:	d102      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d26:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d2a:	e003      	b.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d30:	f000 bc31 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004d34:	f000 bc2f 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d38:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d3c:	f000 bc2b 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d44:	f000 bc27 	b.w	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	f040 8095 	bne.w	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004d52:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d62:	d04d      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6a:	f200 8084 	bhi.w	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2bc0      	cmp	r3, #192	; 0xc0
 8004d72:	d07d      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2bc0      	cmp	r3, #192	; 0xc0
 8004d78:	d87d      	bhi.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d02d      	beq.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	2b80      	cmp	r3, #128	; 0x80
 8004d84:	d877      	bhi.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d012      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004d92:	e070      	b.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d94:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da0:	d107      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fec0 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004db0:	e3f1      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004db6:	e3ee      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004db8:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc6:	f107 0318 	add.w	r3, r7, #24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fc06 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dd4:	e3df      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dda:	e3dc      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ddc:	4b3e      	ldr	r3, [pc, #248]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de8:	d107      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fd48 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004df8:	e3cd      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dfe:	e3ca      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e0a:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d109      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2e:	e01e      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e30:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e44:	d102      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4a:	e010      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e58:	d106      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e60:	d102      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e66:	e002      	b.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e6c:	e393      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e6e:	e392      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e74:	e38f      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e7a:	e38c      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e82:	f040 80a7 	bne.w	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004e8e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e96:	d05f      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e9e:	f200 8096 	bhi.w	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ea8:	f000 808e 	beq.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004eb2:	f200 808c 	bhi.w	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ebc:	d03a      	beq.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec4:	f200 8083 	bhi.w	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed4:	d01c      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004ed6:	e07a      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	03d09000 	.word	0x03d09000
 8004ee0:	003d0900 	.word	0x003d0900
 8004ee4:	007a1200 	.word	0x007a1200
 8004ee8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eec:	4baa      	ldr	r3, [pc, #680]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fe14 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f08:	e345      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0e:	e342      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f10:	4ba1      	ldr	r3, [pc, #644]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1e:	f107 0318 	add.w	r3, r7, #24
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fb5a 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f2c:	e333      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f32:	e330      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f34:	4b98      	ldr	r3, [pc, #608]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f40:	d107      	bne.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f42:	f107 030c 	add.w	r3, r7, #12
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fc9c 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f50:	e321      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f56:	e31e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f58:	4b8f      	ldr	r3, [pc, #572]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f62:	4b8d      	ldr	r3, [pc, #564]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f74:	4b88      	ldr	r3, [pc, #544]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	08db      	lsrs	r3, r3, #3
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	4a87      	ldr	r2, [pc, #540]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f86:	e01e      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f88:	4b83      	ldr	r3, [pc, #524]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f9c:	d102      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f9e:	4b80      	ldr	r3, [pc, #512]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa2:	e010      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa4:	4b7c      	ldr	r3, [pc, #496]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb8:	d102      	bne.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fba:	4b7a      	ldr	r3, [pc, #488]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fc4:	e2e7      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004fc6:	e2e6      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fc8:	4b77      	ldr	r3, [pc, #476]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fcc:	e2e3      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd2:	e2e0      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	f040 809c 	bne.w	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004fde:	4b6e      	ldr	r3, [pc, #440]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fee:	d054      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff6:	f200 808b 	bhi.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005000:	f000 8083 	beq.w	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800500a:	f200 8081 	bhi.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005014:	d02f      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800501c:	d878      	bhi.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800502a:	d012      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800502c:	e070      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800502e:	4b5a      	ldr	r3, [pc, #360]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800503a:	d107      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800503c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fd73 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800504a:	e2a4      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005050:	e2a1      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005052:	4b51      	ldr	r3, [pc, #324]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800505e:	d107      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fab9 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800506e:	e292      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005074:	e28f      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005076:	4b48      	ldr	r3, [pc, #288]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800507e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005082:	d107      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fbfb 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005092:	e280      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005098:	e27d      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800509a:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050a4:	4b3c      	ldr	r3, [pc, #240]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d10c      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	08db      	lsrs	r3, r3, #3
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	4a36      	ldr	r2, [pc, #216]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80050c2:	fa22 f303 	lsr.w	r3, r2, r3
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c8:	e01e      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050ca:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d106      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050de:	d102      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050e0:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e4:	e010      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050e6:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f2:	d106      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d102      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050fc:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	e002      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005106:	e246      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005108:	e245      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510e:	e242      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005114:	e23f      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	f040 80a8 	bne.w	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005124:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005130:	d060      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005138:	f200 8097 	bhi.w	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005142:	f000 808f 	beq.w	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800514c:	f200 808d 	bhi.w	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005156:	d03b      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	f200 8084 	bhi.w	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d01d      	beq.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005170:	e07b      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800517e:	d107      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fcd1 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800518e:	e202      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005194:	e1ff      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	003d0900 	.word	0x003d0900
 80051a4:	007a1200 	.word	0x007a1200
 80051a8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051ac:	4ba3      	ldr	r3, [pc, #652]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d107      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ba:	f107 0318 	add.w	r3, r7, #24
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa0c 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051c8:	e1e5      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ce:	e1e2      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051d0:	4b9a      	ldr	r3, [pc, #616]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051dc:	d107      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fb4e 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051ec:	e1d3      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f2:	e1d0      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051f4:	4b91      	ldr	r3, [pc, #580]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051fe:	4b8f      	ldr	r3, [pc, #572]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b04      	cmp	r3, #4
 8005208:	d10c      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005210:	4b8a      	ldr	r3, [pc, #552]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	08db      	lsrs	r3, r3, #3
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	4a89      	ldr	r2, [pc, #548]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005222:	e01e      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005224:	4b85      	ldr	r3, [pc, #532]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005230:	d106      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005238:	d102      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800523a:	4b82      	ldr	r3, [pc, #520]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523e:	e010      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005240:	4b7e      	ldr	r3, [pc, #504]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524c:	d106      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005254:	d102      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005256:	4b7c      	ldr	r3, [pc, #496]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525a:	e002      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005260:	e199      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005262:	e198      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005264:	4b79      	ldr	r3, [pc, #484]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005268:	e195      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800526e:	e192      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005276:	d173      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005278:	4b70      	ldr	r3, [pc, #448]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005288:	d02f      	beq.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005290:	d863      	bhi.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529e:	d012      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80052a0:	e05b      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052a2:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ae:	d107      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b0:	f107 0318 	add.w	r3, r7, #24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f991 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052be:	e16a      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c4:	e167      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052c6:	4b5d      	ldr	r3, [pc, #372]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d2:	d107      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052d4:	f107 030c 	add.w	r3, r7, #12
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fad3 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052e2:	e158      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052e8:	e155      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052ea:	4b54      	ldr	r3, [pc, #336]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052f4:	4b51      	ldr	r3, [pc, #324]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d10c      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005306:	4b4d      	ldr	r3, [pc, #308]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	08db      	lsrs	r3, r3, #3
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	4a4b      	ldr	r2, [pc, #300]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005312:	fa22 f303 	lsr.w	r3, r2, r3
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005318:	e01e      	b.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800531a:	4b48      	ldr	r3, [pc, #288]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d106      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532e:	d102      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005330:	4b44      	ldr	r3, [pc, #272]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005334:	e010      	b.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005336:	4b41      	ldr	r3, [pc, #260]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005342:	d106      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534a:	d102      	bne.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800534c:	4b3e      	ldr	r3, [pc, #248]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005350:	e002      	b.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005356:	e11e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005358:	e11d      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800535e:	e11a      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005366:	d133      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005368:	4b34      	ldr	r3, [pc, #208]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005370:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537e:	d012      	beq.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005380:	e023      	b.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005382:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800538e:	d107      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fbc9 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800539e:	e0fa      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053a4:	e0f7      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053a6:	4b25      	ldr	r3, [pc, #148]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b2:	d107      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b4:	f107 0318 	add.w	r3, r7, #24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f90f 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053c2:	e0e8      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053c8:	e0e5      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ce:	e0e2      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d6:	f040 808f 	bne.w	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80053da:	4b18      	ldr	r3, [pc, #96]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80053e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ea:	d075      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053f2:	d87e      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fa:	d060      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d876      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800540a:	d045      	beq.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005412:	d86e      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541a:	d02b      	beq.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005422:	d866      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005430:	d00e      	beq.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005432:	e05e      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005434:	f000 f8bc 	bl	80055b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005438:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800543a:	e0ac      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800543c:	58024400 	.word	0x58024400
 8005440:	03d09000 	.word	0x03d09000
 8005444:	003d0900 	.word	0x003d0900
 8005448:	007a1200 	.word	0x007a1200
 800544c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005450:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800545c:	d107      	bne.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800545e:	f107 0318 	add.w	r3, r7, #24
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f8ba 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800546c:	e093      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005472:	e090      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005474:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005480:	d107      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005482:	f107 030c 	add.w	r3, r7, #12
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f9fc 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005490:	e081      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005496:	e07e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005498:	4b41      	ldr	r3, [pc, #260]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d109      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054a4:	4b3e      	ldr	r3, [pc, #248]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	4a3d      	ldr	r2, [pc, #244]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054b6:	e06e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054bc:	e06b      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80054be:	4b38      	ldr	r3, [pc, #224]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ca:	d102      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054d0:	e061      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054d6:	e05e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054d8:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e4:	d102      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80054e6:	4b31      	ldr	r3, [pc, #196]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054ea:	e054      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f0:	e051      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f6:	e04e      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fe:	d148      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005500:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005508:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005510:	d02a      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005518:	d838      	bhi.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005526:	d00d      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005528:	e030      	b.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005536:	d102      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005538:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800553c:	e02b      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005542:	e028      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005544:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005550:	d107      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fae8 	bl	8005b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005560:	e019      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005566:	e016      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005574:	d107      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005576:	f107 0318 	add.w	r3, r7, #24
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f82e 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005584:	e007      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558a:	e004      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005590:	e001      	b.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005598:	4618      	mov	r0, r3
 800559a:	3740      	adds	r7, #64	; 0x40
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	58024400 	.word	0x58024400
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	003d0900 	.word	0x003d0900
 80055ac:	007a1200 	.word	0x007a1200

080055b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80055b4:	f7fe fb8e 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4904      	ldr	r1, [pc, #16]	; (80055d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	58024400 	.word	0x58024400
 80055d8:	0800d828 	.word	0x0800d828

080055dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055e4:	4ba1      	ldr	r3, [pc, #644]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80055ee:	4b9f      	ldr	r3, [pc, #636]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	0b1b      	lsrs	r3, r3, #12
 80055f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055fa:	4b9c      	ldr	r3, [pc, #624]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	091b      	lsrs	r3, r3, #4
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005606:	4b99      	ldr	r3, [pc, #612]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	08db      	lsrs	r3, r3, #3
 800560c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8111 	beq.w	800584c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b02      	cmp	r3, #2
 800562e:	f000 8083 	beq.w	8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b02      	cmp	r3, #2
 8005636:	f200 80a1 	bhi.w	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d056      	beq.n	80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005646:	e099      	b.n	800577c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005648:	4b88      	ldr	r3, [pc, #544]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d02d      	beq.n	80056b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005654:	4b85      	ldr	r3, [pc, #532]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	08db      	lsrs	r3, r3, #3
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	4a84      	ldr	r2, [pc, #528]	; (8005870 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567e:	4b7b      	ldr	r3, [pc, #492]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005692:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056ae:	e087      	b.n	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005878 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	4b6a      	ldr	r3, [pc, #424]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056f2:	e065      	b.n	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800587c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005706:	4b59      	ldr	r3, [pc, #356]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a03 	vldr	s12, [r7, #12]
 800571a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005736:	e043      	b.n	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b48      	ldr	r3, [pc, #288]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800575a:	ed97 6a03 	vldr	s12, [r7, #12]
 800575e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800576a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800577a:	e021      	b.n	80057c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800587c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800578a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a03 	vldr	s12, [r7, #12]
 80057a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80057c0:	4b2a      	ldr	r3, [pc, #168]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	0a5b      	lsrs	r3, r3, #9
 80057c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057da:	edd7 6a07 	vldr	s13, [r7, #28]
 80057de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e6:	ee17 2a90 	vmov	r2, s15
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80057ee:	4b1f      	ldr	r3, [pc, #124]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	0c1b      	lsrs	r3, r3, #16
 80057f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f8:	ee07 3a90 	vmov	s15, r3
 80057fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005808:	edd7 6a07 	vldr	s13, [r7, #28]
 800580c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005814:	ee17 2a90 	vmov	r2, s15
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800581c:	4b13      	ldr	r3, [pc, #76]	; (800586c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	0e1b      	lsrs	r3, r3, #24
 8005822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005836:	edd7 6a07 	vldr	s13, [r7, #28]
 800583a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005842:	ee17 2a90 	vmov	r2, s15
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800584a:	e008      	b.n	800585e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	609a      	str	r2, [r3, #8]
}
 800585e:	bf00      	nop
 8005860:	3724      	adds	r7, #36	; 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	58024400 	.word	0x58024400
 8005870:	03d09000 	.word	0x03d09000
 8005874:	46000000 	.word	0x46000000
 8005878:	4c742400 	.word	0x4c742400
 800587c:	4a742400 	.word	0x4a742400
 8005880:	4af42400 	.word	0x4af42400

08005884 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800588c:	4ba1      	ldr	r3, [pc, #644]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005896:	4b9f      	ldr	r3, [pc, #636]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	0d1b      	lsrs	r3, r3, #20
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058a2:	4b9c      	ldr	r3, [pc, #624]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80058ae:	4b99      	ldr	r3, [pc, #612]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8111 	beq.w	8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	f000 8083 	beq.w	80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f200 80a1 	bhi.w	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d056      	beq.n	800599c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80058ee:	e099      	b.n	8005a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f0:	4b88      	ldr	r3, [pc, #544]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02d      	beq.n	8005958 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058fc:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	4a84      	ldr	r2, [pc, #528]	; (8005b18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b7b      	ldr	r3, [pc, #492]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005956:	e087      	b.n	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599a:	e065      	b.n	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059de:	e043      	b.n	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b48      	ldr	r3, [pc, #288]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a22:	e021      	b.n	8005a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005a68:	4b2a      	ldr	r3, [pc, #168]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	0a5b      	lsrs	r3, r3, #9
 8005a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8e:	ee17 2a90 	vmov	r2, s15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a96:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005abc:	ee17 2a90 	vmov	r2, s15
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005ac4:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	0e1b      	lsrs	r3, r3, #24
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	ee07 3a90 	vmov	s15, r3
 8005ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aea:	ee17 2a90 	vmov	r2, s15
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
}
 8005b06:	bf00      	nop
 8005b08:	3724      	adds	r7, #36	; 0x24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	58024400 	.word	0x58024400
 8005b18:	03d09000 	.word	0x03d09000
 8005b1c:	46000000 	.word	0x46000000
 8005b20:	4c742400 	.word	0x4c742400
 8005b24:	4a742400 	.word	0x4a742400
 8005b28:	4af42400 	.word	0x4af42400

08005b2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b089      	sub	sp, #36	; 0x24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b34:	4ba0      	ldr	r3, [pc, #640]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005b3e:	4b9e      	ldr	r3, [pc, #632]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b48:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005b4a:	4b9b      	ldr	r3, [pc, #620]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005b54:	4b98      	ldr	r3, [pc, #608]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b58:	08db      	lsrs	r3, r3, #3
 8005b5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	fb02 f303 	mul.w	r3, r2, r3
 8005b64:	ee07 3a90 	vmov	s15, r3
 8005b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8111 	beq.w	8005d9a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	f000 8083 	beq.w	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	f200 80a1 	bhi.w	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d056      	beq.n	8005c42 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005b94:	e099      	b.n	8005cca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b96:	4b88      	ldr	r3, [pc, #544]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02d      	beq.n	8005bfe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ba2:	4b85      	ldr	r3, [pc, #532]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	08db      	lsrs	r3, r3, #3
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	4a83      	ldr	r2, [pc, #524]	; (8005dbc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bcc:	4b7a      	ldr	r3, [pc, #488]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005bfc:	e087      	b.n	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c08:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c10:	4b69      	ldr	r3, [pc, #420]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c24:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c40:	e065      	b.n	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c54:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c68:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c84:	e043      	b.n	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005dcc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c98:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc8:	e021      	b.n	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	ee07 3a90 	vmov	s15, r3
 8005ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d0c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	0a5b      	lsrs	r3, r3, #9
 8005d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d34:	ee17 2a90 	vmov	r2, s15
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d62:	ee17 2a90 	vmov	r2, s15
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	0e1b      	lsrs	r3, r3, #24
 8005d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d90:	ee17 2a90 	vmov	r2, s15
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	609a      	str	r2, [r3, #8]
}
 8005dac:	bf00      	nop
 8005dae:	3724      	adds	r7, #36	; 0x24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	03d09000 	.word	0x03d09000
 8005dc0:	46000000 	.word	0x46000000
 8005dc4:	4c742400 	.word	0x4c742400
 8005dc8:	4a742400 	.word	0x4a742400
 8005dcc:	4af42400 	.word	0x4af42400

08005dd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dde:	4b53      	ldr	r3, [pc, #332]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d101      	bne.n	8005dee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e099      	b.n	8005f22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dee:	4b4f      	ldr	r3, [pc, #316]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a4e      	ldr	r2, [pc, #312]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfa:	f7fb fb53 	bl	80014a4 <HAL_GetTick>
 8005dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e00:	e008      	b.n	8005e14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e02:	f7fb fb4f 	bl	80014a4 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e086      	b.n	8005f22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e14:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f0      	bne.n	8005e02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e20:	4b42      	ldr	r3, [pc, #264]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	493f      	ldr	r1, [pc, #252]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	628b      	str	r3, [r1, #40]	; 0x28
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	025b      	lsls	r3, r3, #9
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e64:	4931      	ldr	r1, [pc, #196]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e6a:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	492d      	ldr	r1, [pc, #180]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e7c:	4b2b      	ldr	r3, [pc, #172]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	f023 0220 	bic.w	r2, r3, #32
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	4928      	ldr	r1, [pc, #160]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e8e:	4b27      	ldr	r3, [pc, #156]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	4a26      	ldr	r2, [pc, #152]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e94:	f023 0310 	bic.w	r3, r3, #16
 8005e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <RCCEx_PLL2_Config+0x160>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	69d2      	ldr	r2, [r2, #28]
 8005ea6:	00d2      	lsls	r2, r2, #3
 8005ea8:	4920      	ldr	r1, [pc, #128]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eae:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	f043 0310 	orr.w	r3, r3, #16
 8005eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ecc:	e00f      	b.n	8005eee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d106      	bne.n	8005ee2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ed4:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee0:	e005      	b.n	8005eee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a0e      	ldr	r2, [pc, #56]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efa:	f7fb fad3 	bl	80014a4 <HAL_GetTick>
 8005efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f00:	e008      	b.n	8005f14 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f02:	f7fb facf 	bl	80014a4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e006      	b.n	8005f22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <RCCEx_PLL2_Config+0x15c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	ffff0007 	.word	0xffff0007

08005f34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f42:	4b53      	ldr	r3, [pc, #332]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d101      	bne.n	8005f52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e099      	b.n	8006086 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f52:	4b4f      	ldr	r3, [pc, #316]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a4e      	ldr	r2, [pc, #312]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f5e:	f7fb faa1 	bl	80014a4 <HAL_GetTick>
 8005f62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f64:	e008      	b.n	8005f78 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f66:	f7fb fa9d 	bl	80014a4 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e086      	b.n	8006086 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f78:	4b45      	ldr	r3, [pc, #276]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f0      	bne.n	8005f66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f84:	4b42      	ldr	r3, [pc, #264]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	051b      	lsls	r3, r3, #20
 8005f92:	493f      	ldr	r1, [pc, #252]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	628b      	str	r3, [r1, #40]	; 0x28
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	025b      	lsls	r3, r3, #9
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fc8:	4931      	ldr	r1, [pc, #196]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fce:	4b30      	ldr	r3, [pc, #192]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	492d      	ldr	r1, [pc, #180]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fe0:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	4928      	ldr	r1, [pc, #160]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ff2:	4b27      	ldr	r3, [pc, #156]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a26      	ldr	r2, [pc, #152]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ffe:	4b24      	ldr	r3, [pc, #144]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006002:	4b24      	ldr	r3, [pc, #144]	; (8006094 <RCCEx_PLL3_Config+0x160>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	69d2      	ldr	r2, [r2, #28]
 800600a:	00d2      	lsls	r2, r2, #3
 800600c:	4920      	ldr	r1, [pc, #128]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006012:	4b1f      	ldr	r3, [pc, #124]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	4a1e      	ldr	r2, [pc, #120]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006024:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4a19      	ldr	r2, [pc, #100]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 800602a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800602e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006030:	e00f      	b.n	8006052 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d106      	bne.n	8006046 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006038:	4b15      	ldr	r3, [pc, #84]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	4a14      	ldr	r2, [pc, #80]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 800603e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006042:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006044:	e005      	b.n	8006052 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006046:	4b12      	ldr	r3, [pc, #72]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	4a11      	ldr	r2, [pc, #68]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 800604c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006050:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006052:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a0e      	ldr	r2, [pc, #56]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605e:	f7fb fa21 	bl	80014a4 <HAL_GetTick>
 8006062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006064:	e008      	b.n	8006078 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006066:	f7fb fa1d 	bl	80014a4 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e006      	b.n	8006086 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <RCCEx_PLL3_Config+0x15c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f0      	beq.n	8006066 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
 8006094:	ffff0007 	.word	0xffff0007

08006098 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e075      	b.n	8006196 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fa ff29 	bl	8000f14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f868 	bl	80061a0 <HAL_SD_InitCard>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e05d      	b.n	8006196 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fda5 	bl	8006c30 <HAL_SD_GetCardStatus>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e052      	b.n	8006196 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80060f0:	7e3b      	ldrb	r3, [r7, #24]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80060f6:	7e7b      	ldrb	r3, [r7, #25]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	2b01      	cmp	r3, #1
 8006102:	d10a      	bne.n	800611a <HAL_SD_Init+0x82>
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <HAL_SD_Init+0x78>
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006116:	659a      	str	r2, [r3, #88]	; 0x58
 8006118:	e00b      	b.n	8006132 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	2b01      	cmp	r3, #1
 8006120:	d104      	bne.n	800612c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006128:	659a      	str	r2, [r3, #88]	; 0x58
 800612a:	e002      	b.n	8006132 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fe5b 	bl	8006df4 <HAL_SD_ConfigWideBusOperation>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e026      	b.n	8006196 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006148:	f7fb f9ac 	bl	80014a4 <HAL_GetTick>
 800614c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800614e:	e011      	b.n	8006174 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006150:	f7fb f9a8 	bl	80014a4 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d109      	bne.n	8006174 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006166:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e010      	b.n	8006196 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 ff4d 	bl	8007014 <HAL_SD_GetCardState>
 800617a:	4603      	mov	r3, r0
 800617c:	2b04      	cmp	r3, #4
 800617e:	d1e7      	bne.n	8006150 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3728      	adds	r7, #40	; 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b08d      	sub	sp, #52	; 0x34
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80061b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80061bc:	f7fe fd26 	bl	8004c0c <HAL_RCCEx_GetPeriphCLKFreq>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e06a      	b.n	80062b2 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	4a36      	ldr	r2, [pc, #216]	; (80062bc <HAL_SD_InitCard+0x11c>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681c      	ldr	r4, [r3, #0]
 80061ee:	466a      	mov	r2, sp
 80061f0:	f107 0318 	add.w	r3, r7, #24
 80061f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061f8:	e882 0003 	stmia.w	r2, {r0, r1}
 80061fc:	f107 030c 	add.w	r3, r7, #12
 8006200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006202:	4620      	mov	r0, r4
 8006204:	f002 fba2 	bl	800894c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f002 fbe5 	bl	80089dc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800621e:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <HAL_SD_InitCard+0x120>)
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	fbb2 f3f3 	udiv	r3, r2, r3
 8006226:	3301      	adds	r3, #1
 8006228:	4618      	mov	r0, r3
 800622a:	f7fb f947 	bl	80014bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 ffcc 	bl	80071cc <SD_PowerON>
 8006234:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e02e      	b.n	80062b2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fefd 	bl	8007054 <SD_InitCard>
 800625a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e01b      	b.n	80062b2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006282:	4618      	mov	r0, r3
 8006284:	f002 fc40 	bl	8008b08 <SDMMC_CmdBlockLength>
 8006288:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00f      	beq.n	80062b0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0b      	ldr	r2, [pc, #44]	; (80062c4 <HAL_SD_InitCard+0x124>)
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	372c      	adds	r7, #44	; 0x2c
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd90      	pop	{r4, r7, pc}
 80062ba:	bf00      	nop
 80062bc:	014f8b59 	.word	0x014f8b59
 80062c0:	00012110 	.word	0x00012110
 80062c4:	1fe00fff 	.word	0x1fe00fff

080062c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08c      	sub	sp, #48	; 0x30
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e08d      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	f040 8086 	bne.w	800640a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	429a      	cmp	r2, r3
 8006310:	d907      	bls.n	8006322 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e074      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2203      	movs	r2, #3
 8006326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2200      	movs	r2, #0
 8006330:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	025a      	lsls	r2, r3, #9
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	2b01      	cmp	r3, #1
 8006346:	d002      	beq.n	800634e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	025b      	lsls	r3, r3, #9
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	025b      	lsls	r3, r3, #9
 8006358:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800635a:	2390      	movs	r3, #144	; 0x90
 800635c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800635e:	2302      	movs	r3, #2
 8006360:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f107 0210 	add.w	r2, r7, #16
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f002 fb9b 	bl	8008ab0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006388:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2201      	movs	r2, #1
 8006398:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d90a      	bls.n	80063b6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2282      	movs	r2, #130	; 0x82
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ac:	4618      	mov	r0, r3
 80063ae:	f002 fbf1 	bl	8008b94 <SDMMC_CmdReadMultiBlock>
 80063b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063b4:	e009      	b.n	80063ca <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2281      	movs	r2, #129	; 0x81
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063c2:	4618      	mov	r0, r3
 80063c4:	f002 fbc3 	bl	8008b4e <SDMMC_CmdReadSingleBlock>
 80063c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0f      	ldr	r2, [pc, #60]	; (8006414 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e00a      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	; 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	1fe00fff 	.word	0x1fe00fff

08006418 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	; 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e08d      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 8086 	bne.w	800655a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	441a      	add	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	429a      	cmp	r2, r3
 8006460:	d907      	bls.n	8006472 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e074      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2203      	movs	r2, #3
 8006476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	025a      	lsls	r2, r3, #9
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	2b01      	cmp	r3, #1
 8006496:	d002      	beq.n	800649e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	025b      	lsls	r3, r3, #9
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	025b      	lsls	r3, r3, #9
 80064a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064aa:	2390      	movs	r3, #144	; 0x90
 80064ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f107 0210 	add.w	r2, r7, #16
 80064c2:	4611      	mov	r1, r2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f002 faf3 	bl	8008ab0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d90a      	bls.n	8006506 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	22a0      	movs	r2, #160	; 0xa0
 80064f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064fc:	4618      	mov	r0, r3
 80064fe:	f002 fb8f 	bl	8008c20 <SDMMC_CmdWriteMultiBlock>
 8006502:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006504:	e009      	b.n	800651a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2290      	movs	r2, #144	; 0x90
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006512:	4618      	mov	r0, r3
 8006514:	f002 fb61 	bl	8008bda <SDMMC_CmdWriteSingleBlock>
 8006518:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a0f      	ldr	r2, [pc, #60]	; (8006564 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	431a      	orrs	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e00a      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	; 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	1fe00fff 	.word	0x1fe00fff

08006568 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_SD_IRQHandler+0x2e>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 f904 	bl	800779c <SD_Read_IT>
 8006594:	e19a      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80ac 	beq.w	80066fe <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b9d      	ldr	r3, [pc, #628]	; (8006830 <HAL_SD_IRQHandler+0x2c8>)
 80065bc:	400b      	ands	r3, r1
 80065be:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80065ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065de:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d038      	beq.n	800665c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_SD_IRQHandler+0x96>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f002 fb30 	bl	8008c68 <SDMMC_CmdStopTransfer>
 8006608:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f959 	bl	80068d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a83      	ldr	r2, [pc, #524]	; (8006834 <HAL_SD_IRQHandler+0x2cc>)
 8006628:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <HAL_SD_IRQHandler+0xe4>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f002 ffe3 	bl	8009618 <HAL_SD_RxCpltCallback>
 8006652:	e13b      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 ffd5 	bl	8009604 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800665a:	e137      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8132 	beq.w	80068cc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2200      	movs	r2, #0
 800666e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2200      	movs	r2, #0
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_SD_IRQHandler+0x12c>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d011      	beq.n	80066b8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f002 fae5 	bl	8008c68 <SDMMC_CmdStopTransfer>
 800669e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f90e 	bl	80068d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <HAL_SD_IRQHandler+0x172>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f002 ff92 	bl	8009604 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <HAL_SD_IRQHandler+0x18e>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80eb 	beq.w	80068cc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f002 ff8e 	bl	8009618 <HAL_SD_RxCpltCallback>
}
 80066fc:	e0e6      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_SD_IRQHandler+0x1b6>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f886 	bl	8007828 <SD_Write_IT>
 800671c:	e0d6      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80a2 	beq.w	8006872 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	f043 0202 	orr.w	r2, r3, #2
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	f043 0220 	orr.w	r2, r3, #32
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	f043 0210 	orr.w	r2, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a26      	ldr	r2, [pc, #152]	; (8006834 <HAL_SD_IRQHandler+0x2cc>)
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80067ac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067bc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067dc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 fa40 	bl	8008c68 <SDMMC_CmdStopTransfer>
 80067e8:	4602      	mov	r2, r0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006802:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00f      	beq.n	8006838 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f854 	bl	80068d4 <HAL_SD_ErrorCallback>
}
 800682c:	e04e      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
 800682e:	bf00      	nop
 8006830:	ffff3ec5 	.word	0xffff3ec5
 8006834:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b00      	cmp	r3, #0
 8006840:	d044      	beq.n	80068cc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006846:	2b00      	cmp	r3, #0
 8006848:	d040      	beq.n	80068cc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006858:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f832 	bl	80068d4 <HAL_SD_ErrorCallback>
}
 8006870:	e02c      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d025      	beq.n	80068cc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10c      	bne.n	80068b2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f828 	bl	80078f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80068a8:	e010      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 f810 	bl	80078d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80068b0:	e00c      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f811 	bl	80078e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80068c2:	e003      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fff9 	bl	80078bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80068ca:	e7ff      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f6:	0f9b      	lsrs	r3, r3, #30
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	0e9b      	lsrs	r3, r3, #26
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	0e1b      	lsrs	r3, r3, #24
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	b2da      	uxtb	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	b2da      	uxtb	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b2da      	uxtb	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006948:	0d1b      	lsrs	r3, r3, #20
 800694a:	b29a      	uxth	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	b2da      	uxtb	r2, r3
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006966:	0bdb      	lsrs	r3, r3, #15
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	0b9b      	lsrs	r3, r3, #14
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698a:	0b5b      	lsrs	r3, r3, #13
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699c:	0b1b      	lsrs	r3, r3, #12
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2200      	movs	r2, #0
 80069ae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d163      	bne.n	8006a80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069bc:	009a      	lsls	r2, r3, #2
 80069be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069c2:	4013      	ands	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80069c8:	0f92      	lsrs	r2, r2, #30
 80069ca:	431a      	orrs	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d4:	0edb      	lsrs	r3, r3, #27
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e6:	0e1b      	lsrs	r3, r3, #24
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f8:	0d5b      	lsrs	r3, r3, #21
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0a:	0c9b      	lsrs	r3, r3, #18
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a1c:	0bdb      	lsrs	r3, r3, #15
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	7e1b      	ldrb	r3, [r3, #24]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	3302      	adds	r3, #2
 8006a40:	2201      	movs	r2, #1
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a4a:	fb02 f203 	mul.w	r2, r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	7a1b      	ldrb	r3, [r3, #8]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a6c:	0a52      	lsrs	r2, r2, #9
 8006a6e:	fb02 f203 	mul.w	r2, r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
 8006a7e:	e031      	b.n	8006ae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d11d      	bne.n	8006ac4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	041b      	lsls	r3, r3, #16
 8006a8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a96:	0c1b      	lsrs	r3, r3, #16
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	029a      	lsls	r2, r3, #10
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
 8006ac2:	e00f      	b.n	8006ae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a58      	ldr	r2, [pc, #352]	; (8006c2c <HAL_SD_GetCardCSD+0x344>)
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e09d      	b.n	8006c20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae8:	0b9b      	lsrs	r3, r3, #14
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afa:	09db      	lsrs	r3, r3, #7
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b1c:	0fdb      	lsrs	r3, r3, #31
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b28:	0f5b      	lsrs	r3, r3, #29
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3a:	0e9b      	lsrs	r3, r3, #26
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b4c:	0d9b      	lsrs	r3, r3, #22
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b5e:	0d5b      	lsrs	r3, r3, #21
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8e:	0bdb      	lsrs	r3, r3, #15
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ba2:	0b9b      	lsrs	r3, r3, #14
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bb6:	0b5b      	lsrs	r3, r3, #13
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bca:	0b1b      	lsrs	r3, r3, #12
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bde:	0a9b      	lsrs	r3, r3, #10
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf2:	0a1b      	lsrs	r3, r3, #8
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	1fe00fff 	.word	0x1fe00fff

08006c30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b094      	sub	sp, #80	; 0x50
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006c40:	f107 0308 	add.w	r3, r7, #8
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb4a 	bl	80072e0 <SD_SendSDStatus>
 8006c4c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d011      	beq.n	8006c78 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a4f      	ldr	r2, [pc, #316]	; (8006d98 <HAL_SD_GetCardStatus+0x168>)
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006c76:	e070      	b.n	8006d5a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	099b      	lsrs	r3, r3, #6
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	0e1b      	lsrs	r3, r3, #24
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	061a      	lsls	r2, r3, #24
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	0a1b      	lsrs	r3, r3, #8
 8006cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006cc8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	0e1b      	lsrs	r3, r3, #24
 8006cce:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	0d1b      	lsrs	r3, r3, #20
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	0a9b      	lsrs	r3, r3, #10
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	0e1b      	lsrs	r3, r3, #24
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 fed0 	bl	8008b08 <SDMMC_CmdBlockLength>
 8006d68:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a08      	ldr	r2, [pc, #32]	; (8006d98 <HAL_SD_GetCardStatus+0x168>)
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d7c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006d8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3750      	adds	r7, #80	; 0x50
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	1fe00fff 	.word	0x1fe00fff

08006d9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b08d      	sub	sp, #52	; 0x34
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2203      	movs	r2, #3
 8006e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d02e      	beq.n	8006e72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e1a:	d106      	bne.n	8006e2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	635a      	str	r2, [r3, #52]	; 0x34
 8006e28:	e029      	b.n	8006e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	d10a      	bne.n	8006e48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fb4c 	bl	80074d0 <SD_WideBus_Enable>
 8006e38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	635a      	str	r2, [r3, #52]	; 0x34
 8006e46:	e01a      	b.n	8006e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fb89 	bl	8007566 <SD_WideBus_Disable>
 8006e54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	635a      	str	r2, [r3, #52]	; 0x34
 8006e62:	e00c      	b.n	8006e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	635a      	str	r2, [r3, #52]	; 0x34
 8006e70:	e005      	b.n	8006e7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a5e      	ldr	r2, [pc, #376]	; (8007004 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e94:	e094      	b.n	8006fc0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006e96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006e9a:	f7fd feb7 	bl	8004c0c <HAL_RCCEx_GetPeriphCLKFreq>
 8006e9e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8083 	beq.w	8006fae <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695a      	ldr	r2, [r3, #20]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4950      	ldr	r1, [pc, #320]	; (8007008 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006ec6:	fba1 1303 	umull	r1, r3, r1, r3
 8006eca:	0e1b      	lsrs	r3, r3, #24
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d303      	bcc.n	8006ed8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	e05a      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee0:	d103      	bne.n	8006eea <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	e051      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef2:	d126      	bne.n	8006f42 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10e      	bne.n	8006f1a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4a43      	ldr	r2, [pc, #268]	; (800700c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d906      	bls.n	8006f12 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4a40      	ldr	r2, [pc, #256]	; (8007008 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	0e5b      	lsrs	r3, r3, #25
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	e03d      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	e039      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	4a39      	ldr	r2, [pc, #228]	; (800700c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d906      	bls.n	8006f3a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4a36      	ldr	r2, [pc, #216]	; (8007008 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	0e5b      	lsrs	r3, r3, #25
 8006f36:	61bb      	str	r3, [r7, #24]
 8006f38:	e029      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	e025      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10e      	bne.n	8006f68 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4a30      	ldr	r2, [pc, #192]	; (8007010 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d906      	bls.n	8006f60 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	0e1b      	lsrs	r3, r3, #24
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	e016      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e012      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d906      	bls.n	8006f88 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4a22      	ldr	r2, [pc, #136]	; (8007008 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	0e1b      	lsrs	r3, r3, #24
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	e002      	b.n	8006f8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681c      	ldr	r4, [r3, #0]
 8006f92:	466a      	mov	r2, sp
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006fa0:	f107 0308 	add.w	r3, r7, #8
 8006fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f001 fcd0 	bl	800894c <SDMMC_Init>
 8006fac:	e008      	b.n	8006fc0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fd9d 	bl	8008b08 <SDMMC_CmdBlockLength>
 8006fce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	372c      	adds	r7, #44	; 0x2c
 8007000:	46bd      	mov	sp, r7
 8007002:	bd90      	pop	{r4, r7, pc}
 8007004:	1fe00fff 	.word	0x1fe00fff
 8007008:	55e63b89 	.word	0x55e63b89
 800700c:	02faf080 	.word	0x02faf080
 8007010:	017d7840 	.word	0x017d7840

08007014 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa2a 	bl	8007480 <SD_SendStatus>
 800702c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	0a5b      	lsrs	r3, r3, #9
 8007044:	f003 030f 	and.w	r3, r3, #15
 8007048:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800704a:	693b      	ldr	r3, [r7, #16]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b090      	sub	sp, #64	; 0x40
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800705c:	2301      	movs	r3, #1
 800705e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fcca 	bl	80089fe <SDMMC_GetPowerState>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007070:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007074:	e0a5      	b.n	80071c2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	2b03      	cmp	r3, #3
 800707c:	d02e      	beq.n	80070dc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f001 ff15 	bl	8008eb2 <SDMMC_CmdSendCID>
 8007088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <SD_InitCard+0x40>
    {
      return errorstate;
 8007090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007092:	e096      	b.n	80071c2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fcf5 	bl	8008a8a <SDMMC_GetResponse>
 80070a0:	4602      	mov	r2, r0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2104      	movs	r1, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f001 fcec 	bl	8008a8a <SDMMC_GetResponse>
 80070b2:	4602      	mov	r2, r0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2108      	movs	r1, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 fce3 	bl	8008a8a <SDMMC_GetResponse>
 80070c4:	4602      	mov	r2, r0
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	210c      	movs	r1, #12
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fcda 	bl	8008a8a <SDMMC_GetResponse>
 80070d6:	4602      	mov	r2, r0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d00d      	beq.n	8007100 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f107 020e 	add.w	r2, r7, #14
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 ff1e 	bl	8008f30 <SDMMC_CmdSetRelAdd>
 80070f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <SD_InitCard+0xac>
    {
      return errorstate;
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	e060      	b.n	80071c2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	2b03      	cmp	r3, #3
 8007106:	d036      	beq.n	8007176 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007108:	89fb      	ldrh	r3, [r7, #14]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f001 fee7 	bl	8008ef0 <SDMMC_CmdSendCSD>
 8007122:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <SD_InitCard+0xda>
    {
      return errorstate;
 800712a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712c:	e049      	b.n	80071c2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2100      	movs	r1, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fca8 	bl	8008a8a <SDMMC_GetResponse>
 800713a:	4602      	mov	r2, r0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2104      	movs	r1, #4
 8007146:	4618      	mov	r0, r3
 8007148:	f001 fc9f 	bl	8008a8a <SDMMC_GetResponse>
 800714c:	4602      	mov	r2, r0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2108      	movs	r1, #8
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fc96 	bl	8008a8a <SDMMC_GetResponse>
 800715e:	4602      	mov	r2, r0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	210c      	movs	r1, #12
 800716a:	4618      	mov	r0, r3
 800716c:	f001 fc8d 	bl	8008a8a <SDMMC_GetResponse>
 8007170:	4602      	mov	r2, r0
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2104      	movs	r1, #4
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fc84 	bl	8008a8a <SDMMC_GetResponse>
 8007182:	4603      	mov	r3, r0
 8007184:	0d1a      	lsrs	r2, r3, #20
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800718a:	f107 0310 	add.w	r3, r7, #16
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fba9 	bl	80068e8 <HAL_SD_GetCardCSD>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800719c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071a0:	e00f      	b.n	80071c2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f001 fd96 	bl	8008ce0 <SDMMC_CmdSelDesel>
 80071b4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <SD_InitCard+0x16c>
  {
    return errorstate;
 80071bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071be:	e000      	b.n	80071c2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3740      	adds	r7, #64	; 0x40
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 fd9e 	bl	8008d26 <SDMMC_CmdGoIdleState>
 80071ea:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	e06e      	b.n	80072d4 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 fdb1 	bl	8008d62 <SDMMC_CmdOperCond>
 8007200:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00d      	beq.n	8007224 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fd87 	bl	8008d26 <SDMMC_CmdGoIdleState>
 8007218:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	e057      	b.n	80072d4 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d137      	bne.n	80072a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fdb2 	bl	8008da2 <SDMMC_CmdAppCommand>
 800723e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02d      	beq.n	80072a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800724a:	e043      	b.n	80072d4 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f001 fda5 	bl	8008da2 <SDMMC_CmdAppCommand>
 8007258:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <SD_PowerON+0x98>
    {
      return errorstate;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	e037      	b.n	80072d4 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	491c      	ldr	r1, [pc, #112]	; (80072dc <SD_PowerON+0x110>)
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fdbc 	bl	8008de8 <SDMMC_CmdAppOperCommand>
 8007270:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007278:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800727c:	e02a      	b.n	80072d4 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f001 fc00 	bl	8008a8a <SDMMC_GetResponse>
 800728a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	0fdb      	lsrs	r3, r3, #31
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <SD_PowerON+0xcc>
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <SD_PowerON+0xce>
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]

    count++;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3301      	adds	r3, #1
 80072a0:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d802      	bhi.n	80072b2 <SD_PowerON+0xe6>
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0cc      	beq.n	800724c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d902      	bls.n	80072c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80072bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072c0:	e008      	b.n	80072d4 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	c1100000 	.word	0xc1100000

080072e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	; 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072ea:	f7fa f8db 	bl	80014a4 <HAL_GetTick>
 80072ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 fbc5 	bl	8008a8a <SDMMC_GetResponse>
 8007300:	4603      	mov	r3, r0
 8007302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800730a:	d102      	bne.n	8007312 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800730c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007310:	e0b0      	b.n	8007474 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2140      	movs	r1, #64	; 0x40
 8007318:	4618      	mov	r0, r3
 800731a:	f001 fbf5 	bl	8008b08 <SDMMC_CmdBlockLength>
 800731e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	e0a0      	b.n	8007474 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f001 fd2f 	bl	8008da2 <SDMMC_CmdAppCommand>
 8007344:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	e08d      	b.n	8007474 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007358:	f04f 33ff 	mov.w	r3, #4294967295
 800735c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007362:	2360      	movs	r3, #96	; 0x60
 8007364:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007366:	2302      	movs	r3, #2
 8007368:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800736e:	2301      	movs	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fb97 	bl	8008ab0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f001 fe17 	bl	8008fba <SDMMC_CmdStatusRegister>
 800738c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02b      	beq.n	80073ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	e069      	b.n	8007474 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d013      	beq.n	80073d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b2:	e00d      	b.n	80073d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 faf1 	bl	80089a0 <SDMMC_ReadFIFO>
 80073be:	4602      	mov	r2, r0
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	601a      	str	r2, [r3, #0]
        pData++;
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	3304      	adds	r3, #4
 80073c8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	3301      	adds	r3, #1
 80073ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	2b07      	cmp	r3, #7
 80073d4:	d9ee      	bls.n	80073b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073d6:	f7fa f865 	bl	80014a4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d102      	bne.n	80073ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073ea:	e043      	b.n	8007474 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0d2      	beq.n	80073a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007408:	2308      	movs	r3, #8
 800740a:	e033      	b.n	8007474 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800741a:	2302      	movs	r3, #2
 800741c:	e02a      	b.n	8007474 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d017      	beq.n	800745c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800742c:	2320      	movs	r3, #32
 800742e:	e021      	b.n	8007474 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f001 fab3 	bl	80089a0 <SDMMC_ReadFIFO>
 800743a:	4602      	mov	r2, r0
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	601a      	str	r2, [r3, #0]
    pData++;
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	3304      	adds	r3, #4
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007446:	f7fa f82d 	bl	80014a4 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d102      	bne.n	800745c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007456:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800745a:	e00b      	b.n	8007474 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e2      	bne.n	8007430 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a03      	ldr	r2, [pc, #12]	; (800747c <SD_SendSDStatus+0x19c>)
 8007470:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3730      	adds	r7, #48	; 0x30
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	18000f3a 	.word	0x18000f3a

08007480 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007494:	e018      	b.n	80074c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f001 fd66 	bl	8008f74 <SDMMC_CmdSendStatus>
 80074a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	e009      	b.n	80074c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fae5 	bl	8008a8a <SDMMC_GetResponse>
 80074c0:	4602      	mov	r2, r0
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	2300      	movs	r3, #0
 80074de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 facf 	bl	8008a8a <SDMMC_GetResponse>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074f6:	d102      	bne.n	80074fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80074f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074fc:	e02f      	b.n	800755e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f879 	bl	80075fc <SD_FindSCR>
 800750a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	e023      	b.n	800755e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01c      	beq.n	800755a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f001 fc38 	bl	8008da2 <SDMMC_CmdAppCommand>
 8007532:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	e00f      	b.n	800755e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2102      	movs	r1, #2
 8007544:	4618      	mov	r0, r3
 8007546:	f001 fc6f 	bl	8008e28 <SDMMC_CmdBusWidth>
 800754a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	e003      	b.n	800755e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007556:	2300      	movs	r3, #0
 8007558:	e001      	b.n	800755e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800755a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2100      	movs	r1, #0
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fa84 	bl	8008a8a <SDMMC_GetResponse>
 8007582:	4603      	mov	r3, r0
 8007584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800758c:	d102      	bne.n	8007594 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800758e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007592:	e02f      	b.n	80075f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007594:	f107 030c 	add.w	r3, r7, #12
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f82e 	bl	80075fc <SD_FindSCR>
 80075a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	e023      	b.n	80075f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d01c      	beq.n	80075f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f001 fbed 	bl	8008da2 <SDMMC_CmdAppCommand>
 80075c8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	e00f      	b.n	80075f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 fc24 	bl	8008e28 <SDMMC_CmdBusWidth>
 80075e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	e003      	b.n	80075f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e001      	b.n	80075f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08e      	sub	sp, #56	; 0x38
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007606:	f7f9 ff4d 	bl	80014a4 <HAL_GetTick>
 800760a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007610:	2300      	movs	r3, #0
 8007612:	60bb      	str	r3, [r7, #8]
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2108      	movs	r1, #8
 8007622:	4618      	mov	r0, r3
 8007624:	f001 fa70 	bl	8008b08 <SDMMC_CmdBlockLength>
 8007628:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	e0ad      	b.n	8007790 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f001 fbae 	bl	8008da2 <SDMMC_CmdAppCommand>
 8007646:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <SD_FindSCR+0x56>
  {
    return errorstate;
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	e09e      	b.n	8007790 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007652:	f04f 33ff 	mov.w	r3, #4294967295
 8007656:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007658:	2308      	movs	r3, #8
 800765a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800765c:	2330      	movs	r3, #48	; 0x30
 800765e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007660:	2302      	movs	r3, #2
 8007662:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007664:	2300      	movs	r3, #0
 8007666:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007668:	2301      	movs	r3, #1
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f107 0210 	add.w	r2, r7, #16
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f001 fa1a 	bl	8008ab0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f001 fbf4 	bl	8008e6e <SDMMC_CmdSendSCR>
 8007686:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d027      	beq.n	80076de <SD_FindSCR+0xe2>
  {
    return errorstate;
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	e07e      	b.n	8007790 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d113      	bne.n	80076c8 <SD_FindSCR+0xcc>
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d110      	bne.n	80076c8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 f978 	bl	80089a0 <SDMMC_ReadFIFO>
 80076b0:	4603      	mov	r3, r0
 80076b2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 f971 	bl	80089a0 <SDMMC_ReadFIFO>
 80076be:	4603      	mov	r3, r0
 80076c0:	60fb      	str	r3, [r7, #12]
      index++;
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	3301      	adds	r3, #1
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076c8:	f7f9 feec 	bl	80014a4 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d102      	bne.n	80076de <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076dc:	e058      	b.n	8007790 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e4:	f240 532a 	movw	r3, #1322	; 0x52a
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0d1      	beq.n	8007692 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2208      	movs	r2, #8
 8007702:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007704:	2308      	movs	r3, #8
 8007706:	e043      	b.n	8007790 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2202      	movs	r2, #2
 800771c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800771e:	2302      	movs	r3, #2
 8007720:	e036      	b.n	8007790 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2220      	movs	r2, #32
 8007736:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007738:	2320      	movs	r3, #32
 800773a:	e029      	b.n	8007790 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a15      	ldr	r2, [pc, #84]	; (8007798 <SD_FindSCR+0x19c>)
 8007742:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	061a      	lsls	r2, r3, #24
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007750:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800775a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	0e1b      	lsrs	r3, r3, #24
 8007760:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	601a      	str	r2, [r3, #0]
    scr++;
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	3304      	adds	r3, #4
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	061a      	lsls	r2, r3, #24
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007778:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007782:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	0e1b      	lsrs	r3, r3, #24
 8007788:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3738      	adds	r7, #56	; 0x38
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	18000f3a 	.word	0x18000f3a

0800779c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	2b1f      	cmp	r3, #31
 80077b0:	d936      	bls.n	8007820 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e027      	b.n	8007808 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 f8ef 	bl	80089a0 <SDMMC_ReadFIFO>
 80077c2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3301      	adds	r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0a1b      	lsrs	r3, r3, #8
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	3301      	adds	r3, #1
 80077e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	3301      	adds	r3, #1
 80077f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	0e1b      	lsrs	r3, r3, #24
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	3301      	adds	r3, #1
 8007800:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3301      	adds	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b07      	cmp	r3, #7
 800780c:	d9d4      	bls.n	80077b8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	f1a3 0220 	sub.w	r2, r3, #32
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007820:	bf00      	nop
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	2b1f      	cmp	r3, #31
 800783c:	d93a      	bls.n	80078b4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e02b      	b.n	800789c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	60fb      	str	r3, [r7, #12]
      tmp++;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3301      	adds	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	021a      	lsls	r2, r3, #8
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3301      	adds	r3, #1
 8007860:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	041a      	lsls	r2, r3, #16
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	3301      	adds	r3, #1
 8007872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	061a      	lsls	r2, r3, #24
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3301      	adds	r3, #1
 8007884:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f107 020c 	add.w	r2, r7, #12
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f892 	bl	80089ba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	3301      	adds	r3, #1
 800789a:	617b      	str	r3, [r7, #20]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2b07      	cmp	r3, #7
 80078a0:	d9d0      	bls.n	8007844 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f1a3 0220 	sub.w	r2, r3, #32
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	621a      	str	r2, [r3, #32]
  }
}
 80078b4:	bf00      	nop
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e042      	b.n	80079a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7f9 fb99 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2224      	movs	r2, #36	; 0x24
 800793a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f82c 	bl	80079ac <UART_SetConfig>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e022      	b.n	80079a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fd80 	bl	800846c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800797a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800798a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fe07 	bl	80085b0 <UART_CheckIdleState>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079ac:	b5b0      	push	{r4, r5, r7, lr}
 80079ae:	b08e      	sub	sp, #56	; 0x38
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4bbf      	ldr	r3, [pc, #764]	; (8007cd8 <UART_SetConfig+0x32c>)
 80079da:	4013      	ands	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079e2:	430b      	orrs	r3, r1
 80079e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4ab5      	ldr	r2, [pc, #724]	; (8007cdc <UART_SetConfig+0x330>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a12:	4313      	orrs	r3, r2
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	4bb0      	ldr	r3, [pc, #704]	; (8007ce0 <UART_SetConfig+0x334>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a26:	430b      	orrs	r3, r1
 8007a28:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	f023 010f 	bic.w	r1, r3, #15
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4aa7      	ldr	r2, [pc, #668]	; (8007ce4 <UART_SetConfig+0x338>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d176      	bne.n	8007b38 <UART_SetConfig+0x18c>
 8007a4a:	4ba7      	ldr	r3, [pc, #668]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a52:	2b28      	cmp	r3, #40	; 0x28
 8007a54:	d86c      	bhi.n	8007b30 <UART_SetConfig+0x184>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0xb0>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007b01 	.word	0x08007b01
 8007a60:	08007b31 	.word	0x08007b31
 8007a64:	08007b31 	.word	0x08007b31
 8007a68:	08007b31 	.word	0x08007b31
 8007a6c:	08007b31 	.word	0x08007b31
 8007a70:	08007b31 	.word	0x08007b31
 8007a74:	08007b31 	.word	0x08007b31
 8007a78:	08007b31 	.word	0x08007b31
 8007a7c:	08007b09 	.word	0x08007b09
 8007a80:	08007b31 	.word	0x08007b31
 8007a84:	08007b31 	.word	0x08007b31
 8007a88:	08007b31 	.word	0x08007b31
 8007a8c:	08007b31 	.word	0x08007b31
 8007a90:	08007b31 	.word	0x08007b31
 8007a94:	08007b31 	.word	0x08007b31
 8007a98:	08007b31 	.word	0x08007b31
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b31 	.word	0x08007b31
 8007aa4:	08007b31 	.word	0x08007b31
 8007aa8:	08007b31 	.word	0x08007b31
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b31 	.word	0x08007b31
 8007ab4:	08007b31 	.word	0x08007b31
 8007ab8:	08007b31 	.word	0x08007b31
 8007abc:	08007b19 	.word	0x08007b19
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b31 	.word	0x08007b31
 8007ac8:	08007b31 	.word	0x08007b31
 8007acc:	08007b31 	.word	0x08007b31
 8007ad0:	08007b31 	.word	0x08007b31
 8007ad4:	08007b31 	.word	0x08007b31
 8007ad8:	08007b31 	.word	0x08007b31
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b31 	.word	0x08007b31
 8007ae4:	08007b31 	.word	0x08007b31
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b31 	.word	0x08007b31
 8007af0:	08007b31 	.word	0x08007b31
 8007af4:	08007b31 	.word	0x08007b31
 8007af8:	08007b31 	.word	0x08007b31
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b06:	e222      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b0e:	e21e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b16:	e21a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1e:	e216      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b20:	2320      	movs	r3, #32
 8007b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b26:	e212      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b28:	2340      	movs	r3, #64	; 0x40
 8007b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b2e:	e20e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b36:	e20a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a6b      	ldr	r2, [pc, #428]	; (8007cec <UART_SetConfig+0x340>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d130      	bne.n	8007ba4 <UART_SetConfig+0x1f8>
 8007b42:	4b69      	ldr	r3, [pc, #420]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d826      	bhi.n	8007b9c <UART_SetConfig+0x1f0>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <UART_SetConfig+0x1a8>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b6d 	.word	0x08007b6d
 8007b58:	08007b75 	.word	0x08007b75
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b8d 	.word	0x08007b8d
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b72:	e1ec      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b7a:	e1e8      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b82:	e1e4      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b8a:	e1e0      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b92:	e1dc      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b9a:	e1d8      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007b9c:	2380      	movs	r3, #128	; 0x80
 8007b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ba2:	e1d4      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a51      	ldr	r2, [pc, #324]	; (8007cf0 <UART_SetConfig+0x344>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d130      	bne.n	8007c10 <UART_SetConfig+0x264>
 8007bae:	4b4e      	ldr	r3, [pc, #312]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d826      	bhi.n	8007c08 <UART_SetConfig+0x25c>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <UART_SetConfig+0x214>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bd9 	.word	0x08007bd9
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	08007be9 	.word	0x08007be9
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007bf9 	.word	0x08007bf9
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bde:	e1b6      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007be6:	e1b2      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bee:	e1ae      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf6:	e1aa      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007bf8:	2320      	movs	r3, #32
 8007bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfe:	e1a6      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c06:	e1a2      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c08:	2380      	movs	r3, #128	; 0x80
 8007c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0e:	e19e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a37      	ldr	r2, [pc, #220]	; (8007cf4 <UART_SetConfig+0x348>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d130      	bne.n	8007c7c <UART_SetConfig+0x2d0>
 8007c1a:	4b33      	ldr	r3, [pc, #204]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	d826      	bhi.n	8007c74 <UART_SetConfig+0x2c8>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x280>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c45 	.word	0x08007c45
 8007c30:	08007c4d 	.word	0x08007c4d
 8007c34:	08007c55 	.word	0x08007c55
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c4a:	e180      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c52:	e17c      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5a:	e178      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c62:	e174      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c64:	2320      	movs	r3, #32
 8007c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6a:	e170      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c72:	e16c      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c74:	2380      	movs	r3, #128	; 0x80
 8007c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7a:	e168      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <UART_SetConfig+0x34c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d142      	bne.n	8007d0c <UART_SetConfig+0x360>
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <UART_SetConfig+0x33c>)
 8007c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d838      	bhi.n	8007d04 <UART_SetConfig+0x358>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x2ec>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb1 	.word	0x08007cb1
 8007c9c:	08007cb9 	.word	0x08007cb9
 8007ca0:	08007cc1 	.word	0x08007cc1
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cd1 	.word	0x08007cd1
 8007cac:	08007cfd 	.word	0x08007cfd
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cb6:	e14a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cbe:	e146      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc6:	e142      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cce:	e13e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd6:	e13a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007cd8:	cfff69f3 	.word	0xcfff69f3
 8007cdc:	58000c00 	.word	0x58000c00
 8007ce0:	11fff4ff 	.word	0x11fff4ff
 8007ce4:	40011000 	.word	0x40011000
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	40004400 	.word	0x40004400
 8007cf0:	40004800 	.word	0x40004800
 8007cf4:	40004c00 	.word	0x40004c00
 8007cf8:	40005000 	.word	0x40005000
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d02:	e124      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d0a:	e120      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4acc      	ldr	r2, [pc, #816]	; (8008044 <UART_SetConfig+0x698>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d176      	bne.n	8007e04 <UART_SetConfig+0x458>
 8007d16:	4bcc      	ldr	r3, [pc, #816]	; (8008048 <UART_SetConfig+0x69c>)
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d1e:	2b28      	cmp	r3, #40	; 0x28
 8007d20:	d86c      	bhi.n	8007dfc <UART_SetConfig+0x450>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x37c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007dcd 	.word	0x08007dcd
 8007d2c:	08007dfd 	.word	0x08007dfd
 8007d30:	08007dfd 	.word	0x08007dfd
 8007d34:	08007dfd 	.word	0x08007dfd
 8007d38:	08007dfd 	.word	0x08007dfd
 8007d3c:	08007dfd 	.word	0x08007dfd
 8007d40:	08007dfd 	.word	0x08007dfd
 8007d44:	08007dfd 	.word	0x08007dfd
 8007d48:	08007dd5 	.word	0x08007dd5
 8007d4c:	08007dfd 	.word	0x08007dfd
 8007d50:	08007dfd 	.word	0x08007dfd
 8007d54:	08007dfd 	.word	0x08007dfd
 8007d58:	08007dfd 	.word	0x08007dfd
 8007d5c:	08007dfd 	.word	0x08007dfd
 8007d60:	08007dfd 	.word	0x08007dfd
 8007d64:	08007dfd 	.word	0x08007dfd
 8007d68:	08007ddd 	.word	0x08007ddd
 8007d6c:	08007dfd 	.word	0x08007dfd
 8007d70:	08007dfd 	.word	0x08007dfd
 8007d74:	08007dfd 	.word	0x08007dfd
 8007d78:	08007dfd 	.word	0x08007dfd
 8007d7c:	08007dfd 	.word	0x08007dfd
 8007d80:	08007dfd 	.word	0x08007dfd
 8007d84:	08007dfd 	.word	0x08007dfd
 8007d88:	08007de5 	.word	0x08007de5
 8007d8c:	08007dfd 	.word	0x08007dfd
 8007d90:	08007dfd 	.word	0x08007dfd
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007dfd 	.word	0x08007dfd
 8007d9c:	08007dfd 	.word	0x08007dfd
 8007da0:	08007dfd 	.word	0x08007dfd
 8007da4:	08007dfd 	.word	0x08007dfd
 8007da8:	08007ded 	.word	0x08007ded
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007dfd 	.word	0x08007dfd
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007df5 	.word	0x08007df5
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd2:	e0bc      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dda:	e0b8      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de2:	e0b4      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dea:	e0b0      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007dec:	2320      	movs	r3, #32
 8007dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df2:	e0ac      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dfa:	e0a8      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e02:	e0a4      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a90      	ldr	r2, [pc, #576]	; (800804c <UART_SetConfig+0x6a0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d130      	bne.n	8007e70 <UART_SetConfig+0x4c4>
 8007e0e:	4b8e      	ldr	r3, [pc, #568]	; (8008048 <UART_SetConfig+0x69c>)
 8007e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	d826      	bhi.n	8007e68 <UART_SetConfig+0x4bc>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <UART_SetConfig+0x474>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e39 	.word	0x08007e39
 8007e24:	08007e41 	.word	0x08007e41
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e59 	.word	0x08007e59
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e086      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e082      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e07e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e07a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e58:	2320      	movs	r3, #32
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	e076      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e60:	2340      	movs	r3, #64	; 0x40
 8007e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e66:	e072      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e68:	2380      	movs	r3, #128	; 0x80
 8007e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e6e:	e06e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a76      	ldr	r2, [pc, #472]	; (8008050 <UART_SetConfig+0x6a4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d130      	bne.n	8007edc <UART_SetConfig+0x530>
 8007e7a:	4b73      	ldr	r3, [pc, #460]	; (8008048 <UART_SetConfig+0x69c>)
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d826      	bhi.n	8007ed4 <UART_SetConfig+0x528>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0x4e0>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ea5 	.word	0x08007ea5
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007eb5 	.word	0x08007eb5
 8007e98:	08007ebd 	.word	0x08007ebd
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e050      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007eac:	2304      	movs	r3, #4
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e04c      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e048      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e044      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eca:	e040      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007ecc:	2340      	movs	r3, #64	; 0x40
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed2:	e03c      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eda:	e038      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a5c      	ldr	r2, [pc, #368]	; (8008054 <UART_SetConfig+0x6a8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d130      	bne.n	8007f48 <UART_SetConfig+0x59c>
 8007ee6:	4b58      	ldr	r3, [pc, #352]	; (8008048 <UART_SetConfig+0x69c>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d826      	bhi.n	8007f40 <UART_SetConfig+0x594>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <UART_SetConfig+0x54c>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f11 	.word	0x08007f11
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	2302      	movs	r3, #2
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e01a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1e:	e016      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f26:	e012      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2e:	e00e      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f30:	2320      	movs	r3, #32
 8007f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f36:	e00a      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3e:	e006      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f46:	e002      	b.n	8007f4e <UART_SetConfig+0x5a2>
 8007f48:	2380      	movs	r3, #128	; 0x80
 8007f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a40      	ldr	r2, [pc, #256]	; (8008054 <UART_SetConfig+0x6a8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	f040 80ef 	bne.w	8008138 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	dc46      	bgt.n	8007ff0 <UART_SetConfig+0x644>
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	f2c0 8081 	blt.w	800806a <UART_SetConfig+0x6be>
 8007f68:	3b02      	subs	r3, #2
 8007f6a:	2b1e      	cmp	r3, #30
 8007f6c:	d87d      	bhi.n	800806a <UART_SetConfig+0x6be>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x5c8>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007ff7 	.word	0x08007ff7
 8007f78:	0800806b 	.word	0x0800806b
 8007f7c:	08007fff 	.word	0x08007fff
 8007f80:	0800806b 	.word	0x0800806b
 8007f84:	0800806b 	.word	0x0800806b
 8007f88:	0800806b 	.word	0x0800806b
 8007f8c:	0800800f 	.word	0x0800800f
 8007f90:	0800806b 	.word	0x0800806b
 8007f94:	0800806b 	.word	0x0800806b
 8007f98:	0800806b 	.word	0x0800806b
 8007f9c:	0800806b 	.word	0x0800806b
 8007fa0:	0800806b 	.word	0x0800806b
 8007fa4:	0800806b 	.word	0x0800806b
 8007fa8:	0800806b 	.word	0x0800806b
 8007fac:	0800801f 	.word	0x0800801f
 8007fb0:	0800806b 	.word	0x0800806b
 8007fb4:	0800806b 	.word	0x0800806b
 8007fb8:	0800806b 	.word	0x0800806b
 8007fbc:	0800806b 	.word	0x0800806b
 8007fc0:	0800806b 	.word	0x0800806b
 8007fc4:	0800806b 	.word	0x0800806b
 8007fc8:	0800806b 	.word	0x0800806b
 8007fcc:	0800806b 	.word	0x0800806b
 8007fd0:	0800806b 	.word	0x0800806b
 8007fd4:	0800806b 	.word	0x0800806b
 8007fd8:	0800806b 	.word	0x0800806b
 8007fdc:	0800806b 	.word	0x0800806b
 8007fe0:	0800806b 	.word	0x0800806b
 8007fe4:	0800806b 	.word	0x0800806b
 8007fe8:	0800806b 	.word	0x0800806b
 8007fec:	0800805d 	.word	0x0800805d
 8007ff0:	2b40      	cmp	r3, #64	; 0x40
 8007ff2:	d036      	beq.n	8008062 <UART_SetConfig+0x6b6>
 8007ff4:	e039      	b.n	800806a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ff6:	f7fd fadb 	bl	80055b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ffa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ffc:	e03b      	b.n	8008076 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffe:	f107 0314 	add.w	r3, r7, #20
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd faea 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800800c:	e033      	b.n	8008076 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	4618      	mov	r0, r3
 8008014:	f7fd fc36 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800801c:	e02b      	b.n	8008076 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800801e:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <UART_SetConfig+0x69c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800802a:	4b07      	ldr	r3, [pc, #28]	; (8008048 <UART_SetConfig+0x69c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	4a08      	ldr	r2, [pc, #32]	; (8008058 <UART_SetConfig+0x6ac>)
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800803c:	e01b      	b.n	8008076 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <UART_SetConfig+0x6ac>)
 8008040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008042:	e018      	b.n	8008076 <UART_SetConfig+0x6ca>
 8008044:	40011400 	.word	0x40011400
 8008048:	58024400 	.word	0x58024400
 800804c:	40007800 	.word	0x40007800
 8008050:	40007c00 	.word	0x40007c00
 8008054:	58000c00 	.word	0x58000c00
 8008058:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800805c:	4bc4      	ldr	r3, [pc, #784]	; (8008370 <UART_SetConfig+0x9c4>)
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008060:	e009      	b.n	8008076 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008068:	e005      	b.n	8008076 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 81da 	beq.w	8008432 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	4abc      	ldr	r2, [pc, #752]	; (8008374 <UART_SetConfig+0x9c8>)
 8008084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008088:	461a      	mov	r2, r3
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008090:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	4413      	add	r3, r2
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d305      	bcc.n	80080ae <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d903      	bls.n	80080b6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080b4:	e1bd      	b.n	8008432 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	4618      	mov	r0, r3
 80080ba:	f04f 0100 	mov.w	r1, #0
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	4aac      	ldr	r2, [pc, #688]	; (8008374 <UART_SetConfig+0x9c8>)
 80080c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	f7f8 f957 	bl	8000380 <__aeabi_uldivmod>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4610      	mov	r0, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	020b      	lsls	r3, r1, #8
 80080e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080e8:	0202      	lsls	r2, r0, #8
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	6849      	ldr	r1, [r1, #4]
 80080ee:	0849      	lsrs	r1, r1, #1
 80080f0:	4608      	mov	r0, r1
 80080f2:	f04f 0100 	mov.w	r1, #0
 80080f6:	1814      	adds	r4, r2, r0
 80080f8:	eb43 0501 	adc.w	r5, r3, r1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	461a      	mov	r2, r3
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 f939 	bl	8000380 <__aeabi_uldivmod>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4613      	mov	r3, r2
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800811c:	d308      	bcc.n	8008130 <UART_SetConfig+0x784>
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008124:	d204      	bcs.n	8008130 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800812c:	60da      	str	r2, [r3, #12]
 800812e:	e180      	b.n	8008432 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008136:	e17c      	b.n	8008432 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008140:	f040 80bf 	bne.w	80082c2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008144:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008148:	2b20      	cmp	r3, #32
 800814a:	dc49      	bgt.n	80081e0 <UART_SetConfig+0x834>
 800814c:	2b00      	cmp	r3, #0
 800814e:	db7c      	blt.n	800824a <UART_SetConfig+0x89e>
 8008150:	2b20      	cmp	r3, #32
 8008152:	d87a      	bhi.n	800824a <UART_SetConfig+0x89e>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x7b0>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	080081e7 	.word	0x080081e7
 8008160:	080081ef 	.word	0x080081ef
 8008164:	0800824b 	.word	0x0800824b
 8008168:	0800824b 	.word	0x0800824b
 800816c:	080081f7 	.word	0x080081f7
 8008170:	0800824b 	.word	0x0800824b
 8008174:	0800824b 	.word	0x0800824b
 8008178:	0800824b 	.word	0x0800824b
 800817c:	08008207 	.word	0x08008207
 8008180:	0800824b 	.word	0x0800824b
 8008184:	0800824b 	.word	0x0800824b
 8008188:	0800824b 	.word	0x0800824b
 800818c:	0800824b 	.word	0x0800824b
 8008190:	0800824b 	.word	0x0800824b
 8008194:	0800824b 	.word	0x0800824b
 8008198:	0800824b 	.word	0x0800824b
 800819c:	08008217 	.word	0x08008217
 80081a0:	0800824b 	.word	0x0800824b
 80081a4:	0800824b 	.word	0x0800824b
 80081a8:	0800824b 	.word	0x0800824b
 80081ac:	0800824b 	.word	0x0800824b
 80081b0:	0800824b 	.word	0x0800824b
 80081b4:	0800824b 	.word	0x0800824b
 80081b8:	0800824b 	.word	0x0800824b
 80081bc:	0800824b 	.word	0x0800824b
 80081c0:	0800824b 	.word	0x0800824b
 80081c4:	0800824b 	.word	0x0800824b
 80081c8:	0800824b 	.word	0x0800824b
 80081cc:	0800824b 	.word	0x0800824b
 80081d0:	0800824b 	.word	0x0800824b
 80081d4:	0800824b 	.word	0x0800824b
 80081d8:	0800824b 	.word	0x0800824b
 80081dc:	0800823d 	.word	0x0800823d
 80081e0:	2b40      	cmp	r3, #64	; 0x40
 80081e2:	d02e      	beq.n	8008242 <UART_SetConfig+0x896>
 80081e4:	e031      	b.n	800824a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e6:	f7fb fda5 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 80081ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081ec:	e033      	b.n	8008256 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ee:	f7fb fdb7 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 80081f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80081f4:	e02f      	b.n	8008256 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fd f9ee 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008204:	e027      	b.n	8008256 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	4618      	mov	r0, r3
 800820c:	f7fd fb3a 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008214:	e01f      	b.n	8008256 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008216:	4b58      	ldr	r3, [pc, #352]	; (8008378 <UART_SetConfig+0x9cc>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008222:	4b55      	ldr	r3, [pc, #340]	; (8008378 <UART_SetConfig+0x9cc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	08db      	lsrs	r3, r3, #3
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	4a53      	ldr	r2, [pc, #332]	; (800837c <UART_SetConfig+0x9d0>)
 800822e:	fa22 f303 	lsr.w	r3, r2, r3
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008234:	e00f      	b.n	8008256 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008236:	4b51      	ldr	r3, [pc, #324]	; (800837c <UART_SetConfig+0x9d0>)
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800823a:	e00c      	b.n	8008256 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800823c:	4b4c      	ldr	r3, [pc, #304]	; (8008370 <UART_SetConfig+0x9c4>)
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008240:	e009      	b.n	8008256 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008248:	e005      	b.n	8008256 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80ea 	beq.w	8008432 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	4a44      	ldr	r2, [pc, #272]	; (8008374 <UART_SetConfig+0x9c8>)
 8008264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008268:	461a      	mov	r2, r3
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008270:	005a      	lsls	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	441a      	add	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	b29b      	uxth	r3, r3
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	2b0f      	cmp	r3, #15
 800828a:	d916      	bls.n	80082ba <UART_SetConfig+0x90e>
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008292:	d212      	bcs.n	80082ba <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	b29b      	uxth	r3, r3
 8008298:	f023 030f 	bic.w	r3, r3, #15
 800829c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082ac:	4313      	orrs	r3, r2
 80082ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082b6:	60da      	str	r2, [r3, #12]
 80082b8:	e0bb      	b.n	8008432 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80082c0:	e0b7      	b.n	8008432 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	dc4a      	bgt.n	8008360 <UART_SetConfig+0x9b4>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f2c0 8086 	blt.w	80083dc <UART_SetConfig+0xa30>
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	f200 8083 	bhi.w	80083dc <UART_SetConfig+0xa30>
 80082d6:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <UART_SetConfig+0x930>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	08008367 	.word	0x08008367
 80082e0:	08008381 	.word	0x08008381
 80082e4:	080083dd 	.word	0x080083dd
 80082e8:	080083dd 	.word	0x080083dd
 80082ec:	08008389 	.word	0x08008389
 80082f0:	080083dd 	.word	0x080083dd
 80082f4:	080083dd 	.word	0x080083dd
 80082f8:	080083dd 	.word	0x080083dd
 80082fc:	08008399 	.word	0x08008399
 8008300:	080083dd 	.word	0x080083dd
 8008304:	080083dd 	.word	0x080083dd
 8008308:	080083dd 	.word	0x080083dd
 800830c:	080083dd 	.word	0x080083dd
 8008310:	080083dd 	.word	0x080083dd
 8008314:	080083dd 	.word	0x080083dd
 8008318:	080083dd 	.word	0x080083dd
 800831c:	080083a9 	.word	0x080083a9
 8008320:	080083dd 	.word	0x080083dd
 8008324:	080083dd 	.word	0x080083dd
 8008328:	080083dd 	.word	0x080083dd
 800832c:	080083dd 	.word	0x080083dd
 8008330:	080083dd 	.word	0x080083dd
 8008334:	080083dd 	.word	0x080083dd
 8008338:	080083dd 	.word	0x080083dd
 800833c:	080083dd 	.word	0x080083dd
 8008340:	080083dd 	.word	0x080083dd
 8008344:	080083dd 	.word	0x080083dd
 8008348:	080083dd 	.word	0x080083dd
 800834c:	080083dd 	.word	0x080083dd
 8008350:	080083dd 	.word	0x080083dd
 8008354:	080083dd 	.word	0x080083dd
 8008358:	080083dd 	.word	0x080083dd
 800835c:	080083cf 	.word	0x080083cf
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	d037      	beq.n	80083d4 <UART_SetConfig+0xa28>
 8008364:	e03a      	b.n	80083dc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008366:	f7fb fce5 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 800836a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800836c:	e03c      	b.n	80083e8 <UART_SetConfig+0xa3c>
 800836e:	bf00      	nop
 8008370:	003d0900 	.word	0x003d0900
 8008374:	0800d848 	.word	0x0800d848
 8008378:	58024400 	.word	0x58024400
 800837c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008380:	f7fb fcee 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8008384:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008386:	e02f      	b.n	80083e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008388:	f107 0314 	add.w	r3, r7, #20
 800838c:	4618      	mov	r0, r3
 800838e:	f7fd f925 	bl	80055dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008396:	e027      	b.n	80083e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008398:	f107 0308 	add.w	r3, r7, #8
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd fa71 	bl	8005884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083a6:	e01f      	b.n	80083e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a8:	4b2c      	ldr	r3, [pc, #176]	; (800845c <UART_SetConfig+0xab0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d009      	beq.n	80083c8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083b4:	4b29      	ldr	r3, [pc, #164]	; (800845c <UART_SetConfig+0xab0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	08db      	lsrs	r3, r3, #3
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	4a28      	ldr	r2, [pc, #160]	; (8008460 <UART_SetConfig+0xab4>)
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083c6:	e00f      	b.n	80083e8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80083c8:	4b25      	ldr	r3, [pc, #148]	; (8008460 <UART_SetConfig+0xab4>)
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083cc:	e00c      	b.n	80083e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083ce:	4b25      	ldr	r3, [pc, #148]	; (8008464 <UART_SetConfig+0xab8>)
 80083d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083d2:	e009      	b.n	80083e8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80083da:	e005      	b.n	80083e8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083e6:	bf00      	nop
    }

    if (pclk != 0U)
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d021      	beq.n	8008432 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <UART_SetConfig+0xabc>)
 80083f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	441a      	add	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008410:	b29b      	uxth	r3, r3
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d908      	bls.n	800842c <UART_SetConfig+0xa80>
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008420:	d204      	bcs.n	800842c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008428:	60da      	str	r2, [r3, #12]
 800842a:	e002      	b.n	8008432 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800844e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008452:	4618      	mov	r0, r3
 8008454:	3738      	adds	r7, #56	; 0x38
 8008456:	46bd      	mov	sp, r7
 8008458:	bdb0      	pop	{r4, r5, r7, pc}
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
 8008460:	03d09000 	.word	0x03d09000
 8008464:	003d0900 	.word	0x003d0900
 8008468:	0800d848 	.word	0x0800d848

0800846c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01a      	beq.n	8008582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800856a:	d10a      	bne.n	8008582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	605a      	str	r2, [r3, #4]
  }
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085c0:	f7f8 ff70 	bl	80014a4 <HAL_GetTick>
 80085c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0308 	and.w	r3, r3, #8
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d10e      	bne.n	80085f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f82f 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e025      	b.n	800863e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d10e      	bne.n	800861e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f819 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e00f      	b.n	800863e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	4613      	mov	r3, r2
 8008654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008656:	e062      	b.n	800871e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d05e      	beq.n	800871e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008660:	f7f8 ff20 	bl	80014a4 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	429a      	cmp	r2, r3
 800866e:	d302      	bcc.n	8008676 <UART_WaitOnFlagUntilTimeout+0x30>
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11d      	bne.n	80086b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008684:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0201 	bic.w	r2, r2, #1
 8008694:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e045      	b.n	800873e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d02e      	beq.n	800871e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ce:	d126      	bne.n	800871e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0201 	bic.w	r2, r2, #1
 80086f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2220      	movs	r2, #32
 800870e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e00f      	b.n	800873e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69da      	ldr	r2, [r3, #28]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4013      	ands	r3, r2
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	429a      	cmp	r2, r3
 800872c:	bf0c      	ite	eq
 800872e:	2301      	moveq	r3, #1
 8008730:	2300      	movne	r3, #0
 8008732:	b2db      	uxtb	r3, r3
 8008734:	461a      	mov	r2, r3
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	429a      	cmp	r2, r3
 800873a:	d08d      	beq.n	8008658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008754:	2b01      	cmp	r3, #1
 8008756:	d101      	bne.n	800875c <HAL_UARTEx_DisableFifoMode+0x16>
 8008758:	2302      	movs	r3, #2
 800875a:	e027      	b.n	80087ac <HAL_UARTEx_DisableFifoMode+0x66>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2224      	movs	r2, #36	; 0x24
 8008768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0201 	bic.w	r2, r2, #1
 8008782:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800878a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e02d      	b.n	800882c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2224      	movs	r2, #36	; 0x24
 80087dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f84f 	bl	80088b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008848:	2302      	movs	r3, #2
 800884a:	e02d      	b.n	80088a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2224      	movs	r2, #36	; 0x24
 8008858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f811 	bl	80088b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d108      	bne.n	80088d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088d0:	e031      	b.n	8008936 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088d2:	2310      	movs	r3, #16
 80088d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088d6:	2310      	movs	r3, #16
 80088d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	0e5b      	lsrs	r3, r3, #25
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0307 	and.w	r3, r3, #7
 80088e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	0f5b      	lsrs	r3, r3, #29
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	7b3a      	ldrb	r2, [r7, #12]
 80088fe:	4911      	ldr	r1, [pc, #68]	; (8008944 <UARTEx_SetNbDataToProcess+0x94>)
 8008900:	5c8a      	ldrb	r2, [r1, r2]
 8008902:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008906:	7b3a      	ldrb	r2, [r7, #12]
 8008908:	490f      	ldr	r1, [pc, #60]	; (8008948 <UARTEx_SetNbDataToProcess+0x98>)
 800890a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800890c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008910:	b29a      	uxth	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	7b7a      	ldrb	r2, [r7, #13]
 800891c:	4909      	ldr	r1, [pc, #36]	; (8008944 <UARTEx_SetNbDataToProcess+0x94>)
 800891e:	5c8a      	ldrb	r2, [r1, r2]
 8008920:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008924:	7b7a      	ldrb	r2, [r7, #13]
 8008926:	4908      	ldr	r1, [pc, #32]	; (8008948 <UARTEx_SetNbDataToProcess+0x98>)
 8008928:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800892a:	fb93 f3f2 	sdiv	r3, r3, r2
 800892e:	b29a      	uxth	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008936:	bf00      	nop
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	0800d860 	.word	0x0800d860
 8008948:	0800d868 	.word	0x0800d868

0800894c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800894c:	b084      	sub	sp, #16
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	f107 001c 	add.w	r0, r7, #28
 800895a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008962:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008964:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008966:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800896a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800896e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008972:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	4b07      	ldr	r3, [pc, #28]	; (800899c <SDMMC_Init+0x50>)
 8008980:	4013      	ands	r3, r2
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	b004      	add	sp, #16
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	ffc02c00 	.word	0xffc02c00

080089a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f043 0203 	orr.w	r2, r3, #3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
	...

08008a1c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008a3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008a40:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008a46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <SDMMC_SendCommand+0x50>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	fffee0c0 	.word	0xfffee0c0

08008a70 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	b2db      	uxtb	r3, r3
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3314      	adds	r3, #20
 8008a98:	461a      	mov	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008ad6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008adc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008ae2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0

}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b16:	2310      	movs	r3, #16
 8008b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff ff73 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3a:	2110      	movs	r1, #16
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa5f 	bl	8009000 <SDMMC_GetCmdResp1>
 8008b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b44:	69fb      	ldr	r3, [r7, #28]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b088      	sub	sp, #32
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b5c:	2311      	movs	r3, #17
 8008b5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b66:	2300      	movs	r3, #0
 8008b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b70:	f107 0308 	add.w	r3, r7, #8
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff ff50 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b80:	2111      	movs	r1, #17
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa3c 	bl	8009000 <SDMMC_GetCmdResp1>
 8008b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ba2:	2312      	movs	r3, #18
 8008ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008baa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bb6:	f107 0308 	add.w	r3, r7, #8
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff ff2d 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc6:	2112      	movs	r1, #18
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa19 	bl	8009000 <SDMMC_GetCmdResp1>
 8008bce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bd0:	69fb      	ldr	r3, [r7, #28]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3720      	adds	r7, #32
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b088      	sub	sp, #32
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008be8:	2318      	movs	r3, #24
 8008bea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bfc:	f107 0308 	add.w	r3, r7, #8
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ff0a 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c0c:	2118      	movs	r1, #24
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9f6 	bl	8009000 <SDMMC_GetCmdResp1>
 8008c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c16:	69fb      	ldr	r3, [r7, #28]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3720      	adds	r7, #32
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008c2e:	2319      	movs	r3, #25
 8008c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fee7 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	2119      	movs	r1, #25
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f9d3 	bl	8009000 <SDMMC_GetCmdResp1>
 8008c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3720      	adds	r7, #32
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c74:	230c      	movs	r3, #12
 8008c76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c86:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ca0:	f107 0308 	add.w	r3, r7, #8
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff feb8 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008cac:	4a0b      	ldr	r2, [pc, #44]	; (8008cdc <SDMMC_CmdStopTransfer+0x74>)
 8008cae:	210c      	movs	r1, #12
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f9a5 	bl	8009000 <SDMMC_GetCmdResp1>
 8008cb6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cca:	d101      	bne.n	8008cd0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3720      	adds	r7, #32
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	05f5e100 	.word	0x05f5e100

08008ce0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008cee:	2307      	movs	r3, #7
 8008cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d02:	f107 0308 	add.w	r3, r7, #8
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fe87 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d12:	2107      	movs	r1, #7
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f973 	bl	8009000 <SDMMC_GetCmdResp1>
 8008d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3720      	adds	r7, #32
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b088      	sub	sp, #32
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008d36:	2300      	movs	r3, #0
 8008d38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d44:	f107 0308 	add.w	r3, r7, #8
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fe66 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fb97 	bl	8009484 <SDMMC_GetCmdError>
 8008d56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d58:	69fb      	ldr	r3, [r7, #28]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3720      	adds	r7, #32
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b088      	sub	sp, #32
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008d6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d70:	2308      	movs	r3, #8
 8008d72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fe46 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb29 	bl	80093e8 <SDMMC_GetCmdResp7>
 8008d96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d98:	69fb      	ldr	r3, [r7, #28]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b088      	sub	sp, #32
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008db0:	2337      	movs	r3, #55	; 0x37
 8008db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff fe26 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd4:	2137      	movs	r1, #55	; 0x37
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f912 	bl	8009000 <SDMMC_GetCmdResp1>
 8008ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dde:	69fb      	ldr	r3, [r7, #28]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008df6:	2329      	movs	r3, #41	; 0x29
 8008df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff fe03 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa2e 	bl	8009278 <SDMMC_GetCmdResp3>
 8008e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e36:	2306      	movs	r3, #6
 8008e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff fde3 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e5a:	2106      	movs	r1, #6
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f8cf 	bl	8009000 <SDMMC_GetCmdResp1>
 8008e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e64:	69fb      	ldr	r3, [r7, #28]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b088      	sub	sp, #32
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e7a:	2333      	movs	r3, #51	; 0x33
 8008e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e8e:	f107 0308 	add.w	r3, r7, #8
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7ff fdc1 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9e:	2133      	movs	r1, #51	; 0x33
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f8ad 	bl	8009000 <SDMMC_GetCmdResp1>
 8008ea6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b088      	sub	sp, #32
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff fd9f 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f980 	bl	80091e4 <SDMMC_GetCmdResp2>
 8008ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3720      	adds	r7, #32
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008efe:	2309      	movs	r3, #9
 8008f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f12:	f107 0308 	add.w	r3, r7, #8
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff fd7f 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f960 	bl	80091e4 <SDMMC_GetCmdResp2>
 8008f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f26:	69fb      	ldr	r3, [r7, #28]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff fd5f 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	2103      	movs	r1, #3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f9c8 	bl	80092f8 <SDMMC_GetCmdResp6>
 8008f68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3720      	adds	r7, #32
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f82:	230d      	movs	r3, #13
 8008f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fd3d 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa6:	210d      	movs	r1, #13
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f829 	bl	8009000 <SDMMC_GetCmdResp1>
 8008fae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3720      	adds	r7, #32
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b088      	sub	sp, #32
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008fc6:	230d      	movs	r3, #13
 8008fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff fd1b 	bl	8008a1c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fea:	210d      	movs	r1, #13
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f807 	bl	8009000 <SDMMC_GetCmdResp1>
 8008ff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3720      	adds	r7, #32
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	460b      	mov	r3, r1
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800900e:	4b70      	ldr	r3, [pc, #448]	; (80091d0 <SDMMC_GetCmdResp1+0x1d0>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a70      	ldr	r2, [pc, #448]	; (80091d4 <SDMMC_GetCmdResp1+0x1d4>)
 8009014:	fba2 2303 	umull	r2, r3, r2, r3
 8009018:	0a5a      	lsrs	r2, r3, #9
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	1e5a      	subs	r2, r3, #1
 8009026:	61fa      	str	r2, [r7, #28]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800902c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009030:	e0c9      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009036:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	4b67      	ldr	r3, [pc, #412]	; (80091d8 <SDMMC_GetCmdResp1+0x1d8>)
 800903c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0ef      	beq.n	8009022 <SDMMC_GetCmdResp1+0x22>
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1ea      	bne.n	8009022 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d004      	beq.n	8009062 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2204      	movs	r2, #4
 800905c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800905e:	2304      	movs	r3, #4
 8009060:	e0b1      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009074:	2301      	movs	r3, #1
 8009076:	e0a6      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a58      	ldr	r2, [pc, #352]	; (80091dc <SDMMC_GetCmdResp1+0x1dc>)
 800907c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fcf6 	bl	8008a70 <SDMMC_GetCommandResponse>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	4293      	cmp	r3, r2
 800908c:	d001      	beq.n	8009092 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800908e:	2301      	movs	r3, #1
 8009090:	e099      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009092:	2100      	movs	r1, #0
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7ff fcf8 	bl	8008a8a <SDMMC_GetResponse>
 800909a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4b50      	ldr	r3, [pc, #320]	; (80091e0 <SDMMC_GetCmdResp1+0x1e0>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80090a6:	2300      	movs	r3, #0
 80090a8:	e08d      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	da02      	bge.n	80090b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090b4:	e087      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090c0:	2340      	movs	r3, #64	; 0x40
 80090c2:	e080      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090ce:	2380      	movs	r3, #128	; 0x80
 80090d0:	e079      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e0:	e071      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f0:	e069      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009100:	e061      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800910c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009110:	e059      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800911c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009120:	e051      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800912c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009130:	e049      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800913c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009140:	e041      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800914c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009150:	e039      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800915c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009160:	e031      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800916c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009170:	e029      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800917c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009180:	e021      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800918c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009190:	e019      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800919c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091a0:	e011      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80091ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091b0:	e009      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f003 0308 	and.w	r3, r3, #8
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80091c0:	e001      	b.n	80091c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	24000000 	.word	0x24000000
 80091d4:	10624dd3 	.word	0x10624dd3
 80091d8:	00200045 	.word	0x00200045
 80091dc:	002000c5 	.word	0x002000c5
 80091e0:	fdffe008 	.word	0xfdffe008

080091e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80091ec:	4b1f      	ldr	r3, [pc, #124]	; (800926c <SDMMC_GetCmdResp2+0x88>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a1f      	ldr	r2, [pc, #124]	; (8009270 <SDMMC_GetCmdResp2+0x8c>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	0a5b      	lsrs	r3, r3, #9
 80091f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1e5a      	subs	r2, r3, #1
 8009206:	60fa      	str	r2, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d102      	bne.n	8009212 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800920c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009210:	e026      	b.n	8009260 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009216:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0ef      	beq.n	8009202 <SDMMC_GetCmdResp2+0x1e>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1ea      	bne.n	8009202 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2204      	movs	r2, #4
 800923c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800923e:	2304      	movs	r3, #4
 8009240:	e00e      	b.n	8009260 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009254:	2301      	movs	r3, #1
 8009256:	e003      	b.n	8009260 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a06      	ldr	r2, [pc, #24]	; (8009274 <SDMMC_GetCmdResp2+0x90>)
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	24000000 	.word	0x24000000
 8009270:	10624dd3 	.word	0x10624dd3
 8009274:	002000c5 	.word	0x002000c5

08009278 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009280:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <SDMMC_GetCmdResp3+0x74>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a1a      	ldr	r2, [pc, #104]	; (80092f0 <SDMMC_GetCmdResp3+0x78>)
 8009286:	fba2 2303 	umull	r2, r3, r2, r3
 800928a:	0a5b      	lsrs	r3, r3, #9
 800928c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009290:	fb02 f303 	mul.w	r3, r2, r3
 8009294:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1e5a      	subs	r2, r3, #1
 800929a:	60fa      	str	r2, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a4:	e01b      	b.n	80092de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0ef      	beq.n	8009296 <SDMMC_GetCmdResp3+0x1e>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1ea      	bne.n	8009296 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2204      	movs	r2, #4
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092d2:	2304      	movs	r3, #4
 80092d4:	e003      	b.n	80092de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a06      	ldr	r2, [pc, #24]	; (80092f4 <SDMMC_GetCmdResp3+0x7c>)
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	24000000 	.word	0x24000000
 80092f0:	10624dd3 	.word	0x10624dd3
 80092f4:	002000c5 	.word	0x002000c5

080092f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	460b      	mov	r3, r1
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009306:	4b35      	ldr	r3, [pc, #212]	; (80093dc <SDMMC_GetCmdResp6+0xe4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a35      	ldr	r2, [pc, #212]	; (80093e0 <SDMMC_GetCmdResp6+0xe8>)
 800930c:	fba2 2303 	umull	r2, r3, r2, r3
 8009310:	0a5b      	lsrs	r3, r3, #9
 8009312:	f241 3288 	movw	r2, #5000	; 0x1388
 8009316:	fb02 f303 	mul.w	r3, r2, r3
 800931a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	1e5a      	subs	r2, r3, #1
 8009320:	61fa      	str	r2, [r7, #28]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800932a:	e052      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009330:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0ef      	beq.n	800931c <SDMMC_GetCmdResp6+0x24>
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1ea      	bne.n	800931c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2204      	movs	r2, #4
 8009356:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009358:	2304      	movs	r3, #4
 800935a:	e03a      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2201      	movs	r2, #1
 800936c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800936e:	2301      	movs	r3, #1
 8009370:	e02f      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff fb7c 	bl	8008a70 <SDMMC_GetCommandResponse>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	4293      	cmp	r3, r2
 8009380:	d001      	beq.n	8009386 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009382:	2301      	movs	r3, #1
 8009384:	e025      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4a16      	ldr	r2, [pc, #88]	; (80093e4 <SDMMC_GetCmdResp6+0xec>)
 800938a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800938c:	2100      	movs	r1, #0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff fb7b 	bl	8008a8a <SDMMC_GetResponse>
 8009394:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	0c1b      	lsrs	r3, r3, #16
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	e011      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093bc:	e009      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093cc:	e001      	b.n	80093d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3720      	adds	r7, #32
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	24000000 	.word	0x24000000
 80093e0:	10624dd3 	.word	0x10624dd3
 80093e4:	002000c5 	.word	0x002000c5

080093e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093f0:	4b22      	ldr	r3, [pc, #136]	; (800947c <SDMMC_GetCmdResp7+0x94>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a22      	ldr	r2, [pc, #136]	; (8009480 <SDMMC_GetCmdResp7+0x98>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	0a5b      	lsrs	r3, r3, #9
 80093fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1e5a      	subs	r2, r3, #1
 800940a:	60fa      	str	r2, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009414:	e02c      	b.n	8009470 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0ef      	beq.n	8009406 <SDMMC_GetCmdResp7+0x1e>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1ea      	bne.n	8009406 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2204      	movs	r2, #4
 8009440:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009442:	2304      	movs	r3, #4
 8009444:	e014      	b.n	8009470 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009458:	2301      	movs	r3, #1
 800945a:	e009      	b.n	8009470 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2240      	movs	r2, #64	; 0x40
 800946c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800946e:	2300      	movs	r3, #0

}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	24000000 	.word	0x24000000
 8009480:	10624dd3 	.word	0x10624dd3

08009484 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800948c:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <SDMMC_GetCmdError+0x50>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a11      	ldr	r2, [pc, #68]	; (80094d8 <SDMMC_GetCmdError+0x54>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	0a5b      	lsrs	r3, r3, #9
 8009498:	f241 3288 	movw	r2, #5000	; 0x1388
 800949c:	fb02 f303 	mul.w	r3, r2, r3
 80094a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	60fa      	str	r2, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094b0:	e009      	b.n	80094c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0f1      	beq.n	80094a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a06      	ldr	r2, [pc, #24]	; (80094dc <SDMMC_GetCmdError+0x58>)
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	24000000 	.word	0x24000000
 80094d8:	10624dd3 	.word	0x10624dd3
 80094dc:	002000c5 	.word	0x002000c5

080094e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80094e4:	4904      	ldr	r1, [pc, #16]	; (80094f8 <MX_FATFS_Init+0x18>)
 80094e6:	4805      	ldr	r0, [pc, #20]	; (80094fc <MX_FATFS_Init+0x1c>)
 80094e8:	f003 fbfe 	bl	800cce8 <FATFS_LinkDriver>
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	4b03      	ldr	r3, [pc, #12]	; (8009500 <MX_FATFS_Init+0x20>)
 80094f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80094f4:	bf00      	nop
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	24003254 	.word	0x24003254
 80094fc:	0800d870 	.word	0x0800d870
 8009500:	24003250 	.word	0x24003250

08009504 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009508:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800950a:	4618      	mov	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800951e:	f000 f885 	bl	800962c <BSP_SD_IsDetected>
 8009522:	4603      	mov	r3, r0
 8009524:	2b01      	cmp	r3, #1
 8009526:	d001      	beq.n	800952c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009528:	2302      	movs	r3, #2
 800952a:	e012      	b.n	8009552 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800952c:	480b      	ldr	r0, [pc, #44]	; (800955c <BSP_SD_Init+0x48>)
 800952e:	f7fc fdb3 	bl	8006098 <HAL_SD_Init>
 8009532:	4603      	mov	r3, r0
 8009534:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800953c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009540:	4806      	ldr	r0, [pc, #24]	; (800955c <BSP_SD_Init+0x48>)
 8009542:	f7fd fc57 	bl	8006df4 <HAL_SD_ConfigWideBusOperation>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009550:	79fb      	ldrb	r3, [r7, #7]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	2400304c 	.word	0x2400304c

08009560 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	68f9      	ldr	r1, [r7, #12]
 8009576:	4806      	ldr	r0, [pc, #24]	; (8009590 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009578:	f7fc fea6 	bl	80062c8 <HAL_SD_ReadBlocks_DMA>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009586:	7dfb      	ldrb	r3, [r7, #23]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	2400304c 	.word	0x2400304c

08009594 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	68f9      	ldr	r1, [r7, #12]
 80095aa:	4806      	ldr	r0, [pc, #24]	; (80095c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80095ac:	f7fc ff34 	bl	8006418 <HAL_SD_WriteBlocks_DMA>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	2400304c 	.word	0x2400304c

080095c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80095cc:	4805      	ldr	r0, [pc, #20]	; (80095e4 <BSP_SD_GetCardState+0x1c>)
 80095ce:	f7fd fd21 	bl	8007014 <HAL_SD_GetCardState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	bf14      	ite	ne
 80095d8:	2301      	movne	r3, #1
 80095da:	2300      	moveq	r3, #0
 80095dc:	b2db      	uxtb	r3, r3
}
 80095de:	4618      	mov	r0, r3
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	2400304c 	.word	0x2400304c

080095e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4803      	ldr	r0, [pc, #12]	; (8009600 <BSP_SD_GetCardInfo+0x18>)
 80095f4:	f7fd fbd2 	bl	8006d9c <HAL_SD_GetCardInfo>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	2400304c 	.word	0x2400304c

08009604 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800960c:	f000 f9a0 	bl	8009950 <BSP_SD_WriteCpltCallback>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009620:	f000 f9a2 	bl	8009968 <BSP_SD_ReadCpltCallback>
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009632:	2301      	movs	r3, #1
 8009634:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009636:	f000 f80b 	bl	8009650 <BSP_PlatformIsDetected>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009640:	2300      	movs	r3, #0
 8009642:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	b2db      	uxtb	r3, r3
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009656:	2301      	movs	r3, #1
 8009658:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800965a:	2101      	movs	r1, #1
 800965c:	4806      	ldr	r0, [pc, #24]	; (8009678 <BSP_PlatformIsDetected+0x28>)
 800965e:	f7f9 fb73 	bl	8002d48 <HAL_GPIO_ReadPin>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009668:	2300      	movs	r3, #0
 800966a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800966c:	79fb      	ldrb	r3, [r7, #7]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	58020c00 	.word	0x58020c00

0800967c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009684:	f7f7 ff0e 	bl	80014a4 <HAL_GetTick>
 8009688:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800968a:	e006      	b.n	800969a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800968c:	f7ff ff9c 	bl	80095c8 <BSP_SD_GetCardState>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009696:	2300      	movs	r3, #0
 8009698:	e009      	b.n	80096ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800969a:	f7f7 ff03 	bl	80014a4 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d8f0      	bhi.n	800968c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80096c2:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <SD_CheckStatus+0x38>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80096c8:	f7ff ff7e 	bl	80095c8 <BSP_SD_GetCardState>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d107      	bne.n	80096e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80096d2:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <SD_CheckStatus+0x38>)
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f023 0301 	bic.w	r3, r3, #1
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <SD_CheckStatus+0x38>)
 80096e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80096e2:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <SD_CheckStatus+0x38>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	2400000d 	.word	0x2400000d

080096f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80096fe:	f7ff ff09 	bl	8009514 <BSP_SD_Init>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d107      	bne.n	8009718 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff ffd4 	bl	80096b8 <SD_CheckStatus>
 8009710:	4603      	mov	r3, r0
 8009712:	461a      	mov	r2, r3
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <SD_initialize+0x34>)
 8009716:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009718:	4b03      	ldr	r3, [pc, #12]	; (8009728 <SD_initialize+0x34>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	b2db      	uxtb	r3, r3
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	2400000d 	.word	0x2400000d

0800972c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff ffbd 	bl	80096b8 <SD_CheckStatus>
 800973e:	4603      	mov	r3, r0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800975c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009760:	f7ff ff8c 	bl	800967c <SD_CheckStatusWithTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	da01      	bge.n	800976e <SD_read+0x26>
  {
    return res;
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	e03b      	b.n	80097e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	68b8      	ldr	r0, [r7, #8]
 8009774:	f7ff fef4 	bl	8009560 <BSP_SD_ReadBlocks_DMA>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d132      	bne.n	80097e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800977e:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <SD_read+0xa8>)
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009784:	f7f7 fe8e 	bl	80014a4 <HAL_GetTick>
 8009788:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800978a:	bf00      	nop
 800978c:	4b18      	ldr	r3, [pc, #96]	; (80097f0 <SD_read+0xa8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d108      	bne.n	80097a6 <SD_read+0x5e>
 8009794:	f7f7 fe86 	bl	80014a4 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	f247 522f 	movw	r2, #29999	; 0x752f
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d9f2      	bls.n	800978c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80097a6:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <SD_read+0xa8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
 80097b2:	e017      	b.n	80097e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80097b4:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <SD_read+0xa8>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80097ba:	f7f7 fe73 	bl	80014a4 <HAL_GetTick>
 80097be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097c0:	e007      	b.n	80097d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097c2:	f7ff ff01 	bl	80095c8 <BSP_SD_GetCardState>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80097d0:	e008      	b.n	80097e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097d2:	f7f7 fe67 	bl	80014a4 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d9ee      	bls.n	80097c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	240010fc 	.word	0x240010fc

080097f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009808:	4b24      	ldr	r3, [pc, #144]	; (800989c <SD_write+0xa8>)
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800980e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009812:	f7ff ff33 	bl	800967c <SD_CheckStatusWithTimeout>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	da01      	bge.n	8009820 <SD_write+0x2c>
  {
    return res;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	e038      	b.n	8009892 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	68b8      	ldr	r0, [r7, #8]
 8009826:	f7ff feb5 	bl	8009594 <BSP_SD_WriteBlocks_DMA>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d12f      	bne.n	8009890 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009830:	f7f7 fe38 	bl	80014a4 <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009836:	bf00      	nop
 8009838:	4b18      	ldr	r3, [pc, #96]	; (800989c <SD_write+0xa8>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d108      	bne.n	8009852 <SD_write+0x5e>
 8009840:	f7f7 fe30 	bl	80014a4 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	f247 522f 	movw	r2, #29999	; 0x752f
 800984e:	4293      	cmp	r3, r2
 8009850:	d9f2      	bls.n	8009838 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <SD_write+0xa8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	75fb      	strb	r3, [r7, #23]
 800985e:	e017      	b.n	8009890 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <SD_write+0xa8>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009866:	f7f7 fe1d 	bl	80014a4 <HAL_GetTick>
 800986a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800986c:	e007      	b.n	800987e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800986e:	f7ff feab 	bl	80095c8 <BSP_SD_GetCardState>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d102      	bne.n	800987e <SD_write+0x8a>
          {
            res = RES_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]
            break;
 800987c:	e008      	b.n	8009890 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800987e:	f7f7 fe11 	bl	80014a4 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	f247 522f 	movw	r2, #29999	; 0x752f
 800988c:	4293      	cmp	r3, r2
 800988e:	d9ee      	bls.n	800986e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	240010f8 	.word	0x240010f8

080098a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08c      	sub	sp, #48	; 0x30
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	603a      	str	r2, [r7, #0]
 80098aa:	71fb      	strb	r3, [r7, #7]
 80098ac:	460b      	mov	r3, r1
 80098ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098b6:	4b25      	ldr	r3, [pc, #148]	; (800994c <SD_ioctl+0xac>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <SD_ioctl+0x28>
 80098c4:	2303      	movs	r3, #3
 80098c6:	e03c      	b.n	8009942 <SD_ioctl+0xa2>

  switch (cmd)
 80098c8:	79bb      	ldrb	r3, [r7, #6]
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d834      	bhi.n	8009938 <SD_ioctl+0x98>
 80098ce:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <SD_ioctl+0x34>)
 80098d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d4:	080098e5 	.word	0x080098e5
 80098d8:	080098ed 	.word	0x080098ed
 80098dc:	08009905 	.word	0x08009905
 80098e0:	0800991f 	.word	0x0800991f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ea:	e028      	b.n	800993e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fe79 	bl	80095e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098f6:	6a3a      	ldr	r2, [r7, #32]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009902:	e01c      	b.n	800993e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009904:	f107 0308 	add.w	r3, r7, #8
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fe6d 	bl	80095e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	b29a      	uxth	r2, r3
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800991c:	e00f      	b.n	800993e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	4618      	mov	r0, r3
 8009924:	f7ff fe60 	bl	80095e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	0a5a      	lsrs	r2, r3, #9
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009936:	e002      	b.n	800993e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009938:	2304      	movs	r3, #4
 800993a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800993e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009942:	4618      	mov	r0, r3
 8009944:	3730      	adds	r7, #48	; 0x30
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	2400000d 	.word	0x2400000d

08009950 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009950:	b480      	push	{r7}
 8009952:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009954:	4b03      	ldr	r3, [pc, #12]	; (8009964 <BSP_SD_WriteCpltCallback+0x14>)
 8009956:	2201      	movs	r2, #1
 8009958:	601a      	str	r2, [r3, #0]
}
 800995a:	bf00      	nop
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	240010f8 	.word	0x240010f8

08009968 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009968:	b480      	push	{r7}
 800996a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800996c:	4b03      	ldr	r3, [pc, #12]	; (800997c <BSP_SD_ReadCpltCallback+0x14>)
 800996e:	2201      	movs	r2, #1
 8009970:	601a      	str	r2, [r3, #0]
}
 8009972:	bf00      	nop
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	240010fc 	.word	0x240010fc

08009980 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	4a08      	ldr	r2, [pc, #32]	; (80099b0 <disk_status+0x30>)
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	79fa      	ldrb	r2, [r7, #7]
 8009998:	4905      	ldr	r1, [pc, #20]	; (80099b0 <disk_status+0x30>)
 800999a:	440a      	add	r2, r1
 800999c:	7a12      	ldrb	r2, [r2, #8]
 800999e:	4610      	mov	r0, r2
 80099a0:	4798      	blx	r3
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	24001328 	.word	0x24001328

080099b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	4a0d      	ldr	r2, [pc, #52]	; (80099fc <disk_initialize+0x48>)
 80099c6:	5cd3      	ldrb	r3, [r2, r3]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d111      	bne.n	80099f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	4a0b      	ldr	r2, [pc, #44]	; (80099fc <disk_initialize+0x48>)
 80099d0:	2101      	movs	r1, #1
 80099d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	4a09      	ldr	r2, [pc, #36]	; (80099fc <disk_initialize+0x48>)
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	79fa      	ldrb	r2, [r7, #7]
 80099e2:	4906      	ldr	r1, [pc, #24]	; (80099fc <disk_initialize+0x48>)
 80099e4:	440a      	add	r2, r1
 80099e6:	7a12      	ldrb	r2, [r2, #8]
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	24001328 	.word	0x24001328

08009a00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <disk_read+0x3c>)
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	689c      	ldr	r4, [r3, #8]
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4a07      	ldr	r2, [pc, #28]	; (8009a3c <disk_read+0x3c>)
 8009a20:	4413      	add	r3, r2
 8009a22:	7a18      	ldrb	r0, [r3, #8]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	47a0      	blx	r4
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd90      	pop	{r4, r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	24001328 	.word	0x24001328

08009a40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a40:	b590      	push	{r4, r7, lr}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <disk_write+0x3c>)
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	68dc      	ldr	r4, [r3, #12]
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	4a07      	ldr	r2, [pc, #28]	; (8009a7c <disk_write+0x3c>)
 8009a60:	4413      	add	r3, r2
 8009a62:	7a18      	ldrb	r0, [r3, #8]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	68b9      	ldr	r1, [r7, #8]
 8009a6a:	47a0      	blx	r4
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd90      	pop	{r4, r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	24001328 	.word	0x24001328

08009a80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	603a      	str	r2, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	4a09      	ldr	r2, [pc, #36]	; (8009ab8 <disk_ioctl+0x38>)
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	79fa      	ldrb	r2, [r7, #7]
 8009a9e:	4906      	ldr	r1, [pc, #24]	; (8009ab8 <disk_ioctl+0x38>)
 8009aa0:	440a      	add	r2, r1
 8009aa2:	7a10      	ldrb	r0, [r2, #8]
 8009aa4:	79b9      	ldrb	r1, [r7, #6]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4798      	blx	r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73fb      	strb	r3, [r7, #15]
  return res;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	24001328 	.word	0x24001328

08009abc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009acc:	89fb      	ldrh	r3, [r7, #14]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	b21a      	sxth	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b21b      	sxth	r3, r3
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	b21b      	sxth	r3, r3
 8009adc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ade:	89fb      	ldrh	r3, [r7, #14]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3303      	adds	r3, #3
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	3202      	adds	r2, #2
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	3201      	adds	r2, #1
 8009b12:	7812      	ldrb	r2, [r2, #0]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	021b      	lsls	r3, r3, #8
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	887a      	ldrh	r2, [r7, #2]
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	887b      	ldrh	r3, [r7, #2]
 8009b4c:	0a1b      	lsrs	r3, r3, #8
 8009b4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	607a      	str	r2, [r7, #4]
 8009b56:	887a      	ldrh	r2, [r7, #2]
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	701a      	strb	r2, [r3, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	607a      	str	r2, [r7, #4]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	0a1b      	lsrs	r3, r3, #8
 8009ba6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	607a      	str	r2, [r7, #4]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00d      	beq.n	8009bf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	1c53      	adds	r3, r2, #1
 8009bde:	613b      	str	r3, [r7, #16]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	1c59      	adds	r1, r3, #1
 8009be4:	6179      	str	r1, [r7, #20]
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	607b      	str	r3, [r7, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1f1      	bne.n	8009bda <mem_cpy+0x1a>
	}
}
 8009bf6:	bf00      	nop
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c02:	b480      	push	{r7}
 8009c04:	b087      	sub	sp, #28
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	617a      	str	r2, [r7, #20]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	b2d2      	uxtb	r2, r2
 8009c1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	607b      	str	r3, [r7, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f3      	bne.n	8009c12 <mem_set+0x10>
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c38:	b480      	push	{r7}
 8009c3a:	b089      	sub	sp, #36	; 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	61fa      	str	r2, [r7, #28]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	61ba      	str	r2, [r7, #24]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	1acb      	subs	r3, r1, r3
 8009c64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <mem_cmp+0x40>
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0eb      	beq.n	8009c50 <mem_cmp+0x18>

	return r;
 8009c78:	697b      	ldr	r3, [r7, #20]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3724      	adds	r7, #36	; 0x24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c90:	e002      	b.n	8009c98 <chk_chr+0x12>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3301      	adds	r3, #1
 8009c96:	607b      	str	r3, [r7, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <chk_chr+0x26>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d1f2      	bne.n	8009c92 <chk_chr+0xc>
	return *str;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	781b      	ldrb	r3, [r3, #0]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60bb      	str	r3, [r7, #8]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	e029      	b.n	8009d24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009cd0:	4a27      	ldr	r2, [pc, #156]	; (8009d70 <chk_lock+0xb4>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	4413      	add	r3, r2
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01d      	beq.n	8009d1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cde:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <chk_lock+0xb4>)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	4413      	add	r3, r2
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d116      	bne.n	8009d1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009cf0:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <chk_lock+0xb4>)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	4413      	add	r3, r2
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d10c      	bne.n	8009d1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d04:	4a1a      	ldr	r2, [pc, #104]	; (8009d70 <chk_lock+0xb4>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d102      	bne.n	8009d1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d18:	e007      	b.n	8009d2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d9d2      	bls.n	8009cd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d109      	bne.n	8009d44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <chk_lock+0x80>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d101      	bne.n	8009d40 <chk_lock+0x84>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e010      	b.n	8009d62 <chk_lock+0xa6>
 8009d40:	2312      	movs	r3, #18
 8009d42:	e00e      	b.n	8009d62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d108      	bne.n	8009d5c <chk_lock+0xa0>
 8009d4a:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <chk_lock+0xb4>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	4413      	add	r3, r2
 8009d52:	330c      	adds	r3, #12
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d5a:	d101      	bne.n	8009d60 <chk_lock+0xa4>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	e000      	b.n	8009d62 <chk_lock+0xa6>
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	24001108 	.word	0x24001108

08009d74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	e002      	b.n	8009d86 <enq_lock+0x12>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3301      	adds	r3, #1
 8009d84:	607b      	str	r3, [r7, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d806      	bhi.n	8009d9a <enq_lock+0x26>
 8009d8c:	4a09      	ldr	r2, [pc, #36]	; (8009db4 <enq_lock+0x40>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	4413      	add	r3, r2
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1f2      	bne.n	8009d80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	bf14      	ite	ne
 8009da0:	2301      	movne	r3, #1
 8009da2:	2300      	moveq	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	24001108 	.word	0x24001108

08009db8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e01f      	b.n	8009e08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009dc8:	4a41      	ldr	r2, [pc, #260]	; (8009ed0 <inc_lock+0x118>)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	011b      	lsls	r3, r3, #4
 8009dce:	4413      	add	r3, r2
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d113      	bne.n	8009e02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009dda:	4a3d      	ldr	r2, [pc, #244]	; (8009ed0 <inc_lock+0x118>)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	4413      	add	r3, r2
 8009de2:	3304      	adds	r3, #4
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d109      	bne.n	8009e02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009dee:	4a38      	ldr	r2, [pc, #224]	; (8009ed0 <inc_lock+0x118>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4413      	add	r3, r2
 8009df6:	3308      	adds	r3, #8
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d006      	beq.n	8009e10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d9dc      	bls.n	8009dc8 <inc_lock+0x10>
 8009e0e:	e000      	b.n	8009e12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009e10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d132      	bne.n	8009e7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	e002      	b.n	8009e24 <inc_lock+0x6c>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3301      	adds	r3, #1
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d806      	bhi.n	8009e38 <inc_lock+0x80>
 8009e2a:	4a29      	ldr	r2, [pc, #164]	; (8009ed0 <inc_lock+0x118>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	4413      	add	r3, r2
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1f2      	bne.n	8009e1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d101      	bne.n	8009e42 <inc_lock+0x8a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e040      	b.n	8009ec4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4922      	ldr	r1, [pc, #136]	; (8009ed0 <inc_lock+0x118>)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	440b      	add	r3, r1
 8009e4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	491e      	ldr	r1, [pc, #120]	; (8009ed0 <inc_lock+0x118>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	695a      	ldr	r2, [r3, #20]
 8009e64:	491a      	ldr	r1, [pc, #104]	; (8009ed0 <inc_lock+0x118>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e70:	4a17      	ldr	r2, [pc, #92]	; (8009ed0 <inc_lock+0x118>)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	4413      	add	r3, r2
 8009e78:	330c      	adds	r3, #12
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d009      	beq.n	8009e98 <inc_lock+0xe0>
 8009e84:	4a12      	ldr	r2, [pc, #72]	; (8009ed0 <inc_lock+0x118>)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	4413      	add	r3, r2
 8009e8c:	330c      	adds	r3, #12
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <inc_lock+0xe0>
 8009e94:	2300      	movs	r3, #0
 8009e96:	e015      	b.n	8009ec4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d108      	bne.n	8009eb0 <inc_lock+0xf8>
 8009e9e:	4a0c      	ldr	r2, [pc, #48]	; (8009ed0 <inc_lock+0x118>)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	011b      	lsls	r3, r3, #4
 8009ea4:	4413      	add	r3, r2
 8009ea6:	330c      	adds	r3, #12
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	e001      	b.n	8009eb4 <inc_lock+0xfc>
 8009eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009eb4:	4906      	ldr	r1, [pc, #24]	; (8009ed0 <inc_lock+0x118>)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	440b      	add	r3, r1
 8009ebc:	330c      	adds	r3, #12
 8009ebe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3301      	adds	r3, #1
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	24001108 	.word	0x24001108

08009ed4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	607b      	str	r3, [r7, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d825      	bhi.n	8009f34 <dec_lock+0x60>
		n = Files[i].ctr;
 8009ee8:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <dec_lock+0x74>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	4413      	add	r3, r2
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ef6:	89fb      	ldrh	r3, [r7, #14]
 8009ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009efc:	d101      	bne.n	8009f02 <dec_lock+0x2e>
 8009efe:	2300      	movs	r3, #0
 8009f00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009f02:	89fb      	ldrh	r3, [r7, #14]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <dec_lock+0x3a>
 8009f08:	89fb      	ldrh	r3, [r7, #14]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009f0e:	4a0e      	ldr	r2, [pc, #56]	; (8009f48 <dec_lock+0x74>)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	4413      	add	r3, r2
 8009f16:	330c      	adds	r3, #12
 8009f18:	89fa      	ldrh	r2, [r7, #14]
 8009f1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f1c:	89fb      	ldrh	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d105      	bne.n	8009f2e <dec_lock+0x5a>
 8009f22:	4a09      	ldr	r2, [pc, #36]	; (8009f48 <dec_lock+0x74>)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	011b      	lsls	r3, r3, #4
 8009f28:	4413      	add	r3, r2
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	737b      	strb	r3, [r7, #13]
 8009f32:	e001      	b.n	8009f38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f34:	2302      	movs	r3, #2
 8009f36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f38:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	24001108 	.word	0x24001108

08009f4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e010      	b.n	8009f7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f5a:	4a0d      	ldr	r2, [pc, #52]	; (8009f90 <clear_lock+0x44>)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	4413      	add	r3, r2
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d105      	bne.n	8009f76 <clear_lock+0x2a>
 8009f6a:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <clear_lock+0x44>)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	4413      	add	r3, r2
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d9eb      	bls.n	8009f5a <clear_lock+0xe>
	}
}
 8009f82:	bf00      	nop
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	24001108 	.word	0x24001108

08009f94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	78db      	ldrb	r3, [r3, #3]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d034      	beq.n	800a012 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7858      	ldrb	r0, [r3, #1]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009fb8:	2301      	movs	r3, #1
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	f7ff fd40 	bl	8009a40 <disk_write>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <sync_window+0x38>
			res = FR_DISK_ERR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	73fb      	strb	r3, [r7, #15]
 8009fca:	e022      	b.n	800a012 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d217      	bcs.n	800a012 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	789b      	ldrb	r3, [r3, #2]
 8009fe6:	613b      	str	r3, [r7, #16]
 8009fe8:	e010      	b.n	800a00c <sync_window+0x78>
					wsect += fs->fsize;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7858      	ldrb	r0, [r3, #1]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ffe:	2301      	movs	r3, #1
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	f7ff fd1d 	bl	8009a40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3b01      	subs	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d8eb      	bhi.n	8009fea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a012:	7bfb      	ldrb	r3, [r7, #15]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	429a      	cmp	r2, r3
 800a032:	d01b      	beq.n	800a06c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff ffad 	bl	8009f94 <sync_window>
 800a03a:	4603      	mov	r3, r0
 800a03c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d113      	bne.n	800a06c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	7858      	ldrb	r0, [r3, #1]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a04e:	2301      	movs	r3, #1
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	f7ff fcd5 	bl	8009a00 <disk_read>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a05c:	f04f 33ff 	mov.w	r3, #4294967295
 800a060:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a062:	2301      	movs	r3, #1
 800a064:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ff87 	bl	8009f94 <sync_window>
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d159      	bne.n	800a144 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d149      	bne.n	800a12c <sync_fs+0xb4>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	791b      	ldrb	r3, [r3, #4]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d145      	bne.n	800a12c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	899b      	ldrh	r3, [r3, #12]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	f7ff fda8 	bl	8009c02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3338      	adds	r3, #56	; 0x38
 800a0b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff fd37 	bl	8009b32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3338      	adds	r3, #56	; 0x38
 800a0c8:	4921      	ldr	r1, [pc, #132]	; (800a150 <sync_fs+0xd8>)
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fd4c 	bl	8009b68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3338      	adds	r3, #56	; 0x38
 800a0d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0d8:	491e      	ldr	r1, [pc, #120]	; (800a154 <sync_fs+0xdc>)
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7ff fd44 	bl	8009b68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3338      	adds	r3, #56	; 0x38
 800a0e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7ff fd3a 	bl	8009b68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3338      	adds	r3, #56	; 0x38
 800a0f8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	695b      	ldr	r3, [r3, #20]
 800a100:	4619      	mov	r1, r3
 800a102:	4610      	mov	r0, r2
 800a104:	f7ff fd30 	bl	8009b68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	7858      	ldrb	r0, [r3, #1]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a120:	2301      	movs	r3, #1
 800a122:	f7ff fc8d 	bl	8009a40 <disk_write>
			fs->fsi_flag = 0;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	785b      	ldrb	r3, [r3, #1]
 800a130:	2200      	movs	r2, #0
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fca3 	bl	8009a80 <disk_ioctl>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <sync_fs+0xcc>
 800a140:	2301      	movs	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	41615252 	.word	0x41615252
 800a154:	61417272 	.word	0x61417272

0800a158 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3b02      	subs	r3, #2
 800a166:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	3b02      	subs	r3, #2
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d301      	bcc.n	800a178 <clust2sect+0x20>
 800a174:	2300      	movs	r3, #0
 800a176:	e008      	b.n	800a18a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	895b      	ldrh	r3, [r3, #10]
 800a17c:	461a      	mov	r2, r3
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	fb03 f202 	mul.w	r2, r3, r2
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a188:	4413      	add	r3, r2
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b086      	sub	sp, #24
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d904      	bls.n	800a1b6 <get_fat+0x20>
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d302      	bcc.n	800a1bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	e0bb      	b.n	800a334 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	f000 8083 	beq.w	800a2d2 <get_fat+0x13c>
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	f300 80a7 	bgt.w	800a320 <get_fat+0x18a>
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d002      	beq.n	800a1dc <get_fat+0x46>
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d056      	beq.n	800a288 <get_fat+0xf2>
 800a1da:	e0a1      	b.n	800a320 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	085b      	lsrs	r3, r3, #1
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	899b      	ldrh	r3, [r3, #12]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6938      	ldr	r0, [r7, #16]
 800a200:	f7ff ff0c 	bl	800a01c <move_window>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	f040 808d 	bne.w	800a326 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	60fa      	str	r2, [r7, #12]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	8992      	ldrh	r2, [r2, #12]
 800a216:	fbb3 f1f2 	udiv	r1, r3, r2
 800a21a:	fb02 f201 	mul.w	r2, r2, r1
 800a21e:	1a9b      	subs	r3, r3, r2
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	4413      	add	r3, r2
 800a224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a228:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	899b      	ldrh	r3, [r3, #12]
 800a232:	4619      	mov	r1, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	fbb3 f3f1 	udiv	r3, r3, r1
 800a23a:	4413      	add	r3, r2
 800a23c:	4619      	mov	r1, r3
 800a23e:	6938      	ldr	r0, [r7, #16]
 800a240:	f7ff feec 	bl	800a01c <move_window>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d16f      	bne.n	800a32a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	899b      	ldrh	r3, [r3, #12]
 800a24e:	461a      	mov	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	fbb3 f1f2 	udiv	r1, r3, r2
 800a256:	fb02 f201 	mul.w	r2, r2, r1
 800a25a:	1a9b      	subs	r3, r3, r2
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a264:	021b      	lsls	r3, r3, #8
 800a266:	461a      	mov	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <get_fat+0xe8>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	091b      	lsrs	r3, r3, #4
 800a27c:	e002      	b.n	800a284 <get_fat+0xee>
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a284:	617b      	str	r3, [r7, #20]
			break;
 800a286:	e055      	b.n	800a334 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	899b      	ldrh	r3, [r3, #12]
 800a290:	085b      	lsrs	r3, r3, #1
 800a292:	b29b      	uxth	r3, r3
 800a294:	4619      	mov	r1, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	fbb3 f3f1 	udiv	r3, r3, r1
 800a29c:	4413      	add	r3, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6938      	ldr	r0, [r7, #16]
 800a2a2:	f7ff febb 	bl	800a01c <move_window>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d140      	bne.n	800a32e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	8992      	ldrh	r2, [r2, #12]
 800a2ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2be:	fb02 f200 	mul.w	r2, r2, r0
 800a2c2:	1a9b      	subs	r3, r3, r2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff fbf8 	bl	8009abc <ld_word>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	617b      	str	r3, [r7, #20]
			break;
 800a2d0:	e030      	b.n	800a334 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	899b      	ldrh	r3, [r3, #12]
 800a2da:	089b      	lsrs	r3, r3, #2
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	4619      	mov	r1, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2e6:	4413      	add	r3, r2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6938      	ldr	r0, [r7, #16]
 800a2ec:	f7ff fe96 	bl	800a01c <move_window>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d11d      	bne.n	800a332 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	8992      	ldrh	r2, [r2, #12]
 800a304:	fbb3 f0f2 	udiv	r0, r3, r2
 800a308:	fb02 f200 	mul.w	r2, r2, r0
 800a30c:	1a9b      	subs	r3, r3, r2
 800a30e:	440b      	add	r3, r1
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff fbeb 	bl	8009aec <ld_dword>
 800a316:	4603      	mov	r3, r0
 800a318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a31c:	617b      	str	r3, [r7, #20]
			break;
 800a31e:	e009      	b.n	800a334 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a320:	2301      	movs	r3, #1
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	e006      	b.n	800a334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a326:	bf00      	nop
 800a328:	e004      	b.n	800a334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a32a:	bf00      	nop
 800a32c:	e002      	b.n	800a334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a332:	bf00      	nop
		}
	}

	return val;
 800a334:	697b      	ldr	r3, [r7, #20]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a33e:	b590      	push	{r4, r7, lr}
 800a340:	b089      	sub	sp, #36	; 0x24
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a34a:	2302      	movs	r3, #2
 800a34c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b01      	cmp	r3, #1
 800a352:	f240 8102 	bls.w	800a55a <put_fat+0x21c>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	f080 80fc 	bcs.w	800a55a <put_fat+0x21c>
		switch (fs->fs_type) {
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b03      	cmp	r3, #3
 800a368:	f000 80b6 	beq.w	800a4d8 <put_fat+0x19a>
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	f300 80fd 	bgt.w	800a56c <put_fat+0x22e>
 800a372:	2b01      	cmp	r3, #1
 800a374:	d003      	beq.n	800a37e <put_fat+0x40>
 800a376:	2b02      	cmp	r3, #2
 800a378:	f000 8083 	beq.w	800a482 <put_fat+0x144>
 800a37c:	e0f6      	b.n	800a56c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	085b      	lsrs	r3, r3, #1
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	4413      	add	r3, r2
 800a38a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	899b      	ldrh	r3, [r3, #12]
 800a394:	4619      	mov	r1, r3
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	fbb3 f3f1 	udiv	r3, r3, r1
 800a39c:	4413      	add	r3, r2
 800a39e:	4619      	mov	r1, r3
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f7ff fe3b 	bl	800a01c <move_window>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3aa:	7ffb      	ldrb	r3, [r7, #31]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 80d6 	bne.w	800a55e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	61ba      	str	r2, [r7, #24]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	8992      	ldrh	r2, [r2, #12]
 800a3c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3c6:	fb02 f200 	mul.w	r2, r2, r0
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00d      	beq.n	800a3f6 <put_fat+0xb8>
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	b25b      	sxtb	r3, r3
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	b25a      	sxtb	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	011b      	lsls	r3, r3, #4
 800a3ec:	b25b      	sxtb	r3, r3
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	b25b      	sxtb	r3, r3
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	e001      	b.n	800a3fa <put_fat+0xbc>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	697a      	ldr	r2, [r7, #20]
 800a3fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	899b      	ldrh	r3, [r3, #12]
 800a40c:	4619      	mov	r1, r3
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	fbb3 f3f1 	udiv	r3, r3, r1
 800a414:	4413      	add	r3, r2
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff fdff 	bl	800a01c <move_window>
 800a41e:	4603      	mov	r3, r0
 800a420:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a422:	7ffb      	ldrb	r3, [r7, #31]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 809c 	bne.w	800a562 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	899b      	ldrh	r3, [r3, #12]
 800a434:	461a      	mov	r2, r3
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	fbb3 f0f2 	udiv	r0, r3, r2
 800a43c:	fb02 f200 	mul.w	r2, r2, r0
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	440b      	add	r3, r1
 800a444:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d003      	beq.n	800a458 <put_fat+0x11a>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	091b      	lsrs	r3, r3, #4
 800a454:	b2db      	uxtb	r3, r3
 800a456:	e00e      	b.n	800a476 <put_fat+0x138>
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b25b      	sxtb	r3, r3
 800a45e:	f023 030f 	bic.w	r3, r3, #15
 800a462:	b25a      	sxtb	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	0a1b      	lsrs	r3, r3, #8
 800a468:	b25b      	sxtb	r3, r3
 800a46a:	f003 030f 	and.w	r3, r3, #15
 800a46e:	b25b      	sxtb	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b25b      	sxtb	r3, r3
 800a474:	b2db      	uxtb	r3, r3
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2201      	movs	r2, #1
 800a47e:	70da      	strb	r2, [r3, #3]
			break;
 800a480:	e074      	b.n	800a56c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	899b      	ldrh	r3, [r3, #12]
 800a48a:	085b      	lsrs	r3, r3, #1
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	4619      	mov	r1, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	fbb3 f3f1 	udiv	r3, r3, r1
 800a496:	4413      	add	r3, r2
 800a498:	4619      	mov	r1, r3
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f7ff fdbe 	bl	800a01c <move_window>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4a4:	7ffb      	ldrb	r3, [r7, #31]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d15d      	bne.n	800a566 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	005b      	lsls	r3, r3, #1
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	8992      	ldrh	r2, [r2, #12]
 800a4b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4bc:	fb02 f200 	mul.w	r2, r2, r0
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	440b      	add	r3, r1
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	b292      	uxth	r2, r2
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff fb31 	bl	8009b32 <st_word>
			fs->wflag = 1;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	70da      	strb	r2, [r3, #3]
			break;
 800a4d6:	e049      	b.n	800a56c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	899b      	ldrh	r3, [r3, #12]
 800a4e0:	089b      	lsrs	r3, r3, #2
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4ec:	4413      	add	r3, r2
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f7ff fd93 	bl	800a01c <move_window>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4fa:	7ffb      	ldrb	r3, [r7, #31]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d134      	bne.n	800a56a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	8992      	ldrh	r2, [r2, #12]
 800a514:	fbb3 f0f2 	udiv	r0, r3, r2
 800a518:	fb02 f200 	mul.w	r2, r2, r0
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	440b      	add	r3, r1
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fae3 	bl	8009aec <ld_dword>
 800a526:	4603      	mov	r3, r0
 800a528:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a52c:	4323      	orrs	r3, r4
 800a52e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	8992      	ldrh	r2, [r2, #12]
 800a53e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a542:	fb02 f200 	mul.w	r2, r2, r0
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	440b      	add	r3, r1
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fb0b 	bl	8009b68 <st_dword>
			fs->wflag = 1;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	70da      	strb	r2, [r3, #3]
			break;
 800a558:	e008      	b.n	800a56c <put_fat+0x22e>
		}
	}
 800a55a:	bf00      	nop
 800a55c:	e006      	b.n	800a56c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a55e:	bf00      	nop
 800a560:	e004      	b.n	800a56c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a562:	bf00      	nop
 800a564:	e002      	b.n	800a56c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a566:	bf00      	nop
 800a568:	e000      	b.n	800a56c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a56a:	bf00      	nop
	return res;
 800a56c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3724      	adds	r7, #36	; 0x24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd90      	pop	{r4, r7, pc}

0800a576 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b088      	sub	sp, #32
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d904      	bls.n	800a59c <remove_chain+0x26>
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d301      	bcc.n	800a5a0 <remove_chain+0x2a>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e04b      	b.n	800a638 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00c      	beq.n	800a5c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	69b8      	ldr	r0, [r7, #24]
 800a5ae:	f7ff fec6 	bl	800a33e <put_fat>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a5b6:	7ffb      	ldrb	r3, [r7, #31]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <remove_chain+0x4a>
 800a5bc:	7ffb      	ldrb	r3, [r7, #31]
 800a5be:	e03b      	b.n	800a638 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a5c0:	68b9      	ldr	r1, [r7, #8]
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f7ff fde7 	bl	800a196 <get_fat>
 800a5c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d031      	beq.n	800a634 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d101      	bne.n	800a5da <remove_chain+0x64>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e02e      	b.n	800a638 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d101      	bne.n	800a5e6 <remove_chain+0x70>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e028      	b.n	800a638 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	68b9      	ldr	r1, [r7, #8]
 800a5ea:	69b8      	ldr	r0, [r7, #24]
 800a5ec:	f7ff fea7 	bl	800a33e <put_fat>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5f4:	7ffb      	ldrb	r3, [r7, #31]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <remove_chain+0x88>
 800a5fa:	7ffb      	ldrb	r3, [r7, #31]
 800a5fc:	e01c      	b.n	800a638 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	3b02      	subs	r3, #2
 800a608:	429a      	cmp	r2, r3
 800a60a:	d20b      	bcs.n	800a624 <remove_chain+0xae>
			fs->free_clst++;
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	791b      	ldrb	r3, [r3, #4]
 800a61a:	f043 0301 	orr.w	r3, r3, #1
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d3c6      	bcc.n	800a5c0 <remove_chain+0x4a>
 800a632:	e000      	b.n	800a636 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a634:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10d      	bne.n	800a672 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d004      	beq.n	800a66c <create_chain+0x2c>
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d31b      	bcc.n	800a6a4 <create_chain+0x64>
 800a66c:	2301      	movs	r3, #1
 800a66e:	61bb      	str	r3, [r7, #24]
 800a670:	e018      	b.n	800a6a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff fd8e 	bl	800a196 <get_fat>
 800a67a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d801      	bhi.n	800a686 <create_chain+0x46>
 800a682:	2301      	movs	r3, #1
 800a684:	e070      	b.n	800a768 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d101      	bne.n	800a692 <create_chain+0x52>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	e06a      	b.n	800a768 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d201      	bcs.n	800a6a0 <create_chain+0x60>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	e063      	b.n	800a768 <create_chain+0x128>
		scl = clst;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d307      	bcc.n	800a6c8 <create_chain+0x88>
				ncl = 2;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d901      	bls.n	800a6c8 <create_chain+0x88>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e04f      	b.n	800a768 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff fd63 	bl	800a196 <get_fat>
 800a6d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d003      	beq.n	800a6e6 <create_chain+0xa6>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d101      	bne.n	800a6ea <create_chain+0xaa>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	e03e      	b.n	800a768 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d1da      	bne.n	800a6a8 <create_chain+0x68>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e038      	b.n	800a768 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a6f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fc:	69f9      	ldr	r1, [r7, #28]
 800a6fe:	6938      	ldr	r0, [r7, #16]
 800a700:	f7ff fe1d 	bl	800a33e <put_fat>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <create_chain+0xe2>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d006      	beq.n	800a722 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6938      	ldr	r0, [r7, #16]
 800a71a:	f7ff fe10 	bl	800a33e <put_fat>
 800a71e:	4603      	mov	r3, r0
 800a720:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d116      	bne.n	800a756 <create_chain+0x116>
		fs->last_clst = ncl;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	69fa      	ldr	r2, [r7, #28]
 800a72c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	3b02      	subs	r3, #2
 800a738:	429a      	cmp	r2, r3
 800a73a:	d804      	bhi.n	800a746 <create_chain+0x106>
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	1e5a      	subs	r2, r3, #1
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	791b      	ldrb	r3, [r3, #4]
 800a74a:	f043 0301 	orr.w	r3, r3, #1
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	711a      	strb	r2, [r3, #4]
 800a754:	e007      	b.n	800a766 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d102      	bne.n	800a762 <create_chain+0x122>
 800a75c:	f04f 33ff 	mov.w	r3, #4294967295
 800a760:	e000      	b.n	800a764 <create_chain+0x124>
 800a762:	2301      	movs	r3, #1
 800a764:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a766:	69fb      	ldr	r3, [r7, #28]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a770:	b480      	push	{r7}
 800a772:	b087      	sub	sp, #28
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	3304      	adds	r3, #4
 800a786:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	899b      	ldrh	r3, [r3, #12]
 800a78c:	461a      	mov	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	fbb3 f3f2 	udiv	r3, r3, r2
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	8952      	ldrh	r2, [r2, #10]
 800a798:	fbb3 f3f2 	udiv	r3, r3, r2
 800a79c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	1d1a      	adds	r2, r3, #4
 800a7a2:	613a      	str	r2, [r7, #16]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <clmt_clust+0x42>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e010      	b.n	800a7d4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d307      	bcc.n	800a7ca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7c8:	e7e9      	b.n	800a79e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a7ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	4413      	add	r3, r2
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f6:	d204      	bcs.n	800a802 <dir_sdi+0x22>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f003 031f 	and.w	r3, r3, #31
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a802:	2302      	movs	r3, #2
 800a804:	e071      	b.n	800a8ea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d106      	bne.n	800a826 <dir_sdi+0x46>
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d902      	bls.n	800a826 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10c      	bne.n	800a846 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	095b      	lsrs	r3, r3, #5
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	8912      	ldrh	r2, [r2, #8]
 800a834:	4293      	cmp	r3, r2
 800a836:	d301      	bcc.n	800a83c <dir_sdi+0x5c>
 800a838:	2302      	movs	r3, #2
 800a83a:	e056      	b.n	800a8ea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	61da      	str	r2, [r3, #28]
 800a844:	e02d      	b.n	800a8a2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	895b      	ldrh	r3, [r3, #10]
 800a84a:	461a      	mov	r2, r3
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	899b      	ldrh	r3, [r3, #12]
 800a850:	fb03 f302 	mul.w	r3, r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a856:	e019      	b.n	800a88c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6979      	ldr	r1, [r7, #20]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff fc9a 	bl	800a196 <get_fat>
 800a862:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d101      	bne.n	800a870 <dir_sdi+0x90>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e03c      	b.n	800a8ea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d904      	bls.n	800a880 <dir_sdi+0xa0>
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d301      	bcc.n	800a884 <dir_sdi+0xa4>
 800a880:	2302      	movs	r3, #2
 800a882:	e032      	b.n	800a8ea <dir_sdi+0x10a>
			ofs -= csz;
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	429a      	cmp	r2, r3
 800a892:	d2e1      	bcs.n	800a858 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a894:	6979      	ldr	r1, [r7, #20]
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f7ff fc5e 	bl	800a158 <clust2sect>
 800a89c:	4602      	mov	r2, r0
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <dir_sdi+0xd4>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e01a      	b.n	800a8ea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	899b      	ldrh	r3, [r3, #12]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8c4:	441a      	add	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	899b      	ldrh	r3, [r3, #12]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8dc:	fb02 f200 	mul.w	r2, r2, r0
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	18ca      	adds	r2, r1, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	3320      	adds	r3, #32
 800a908:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <dir_next+0x28>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a918:	d301      	bcc.n	800a91e <dir_next+0x2c>
 800a91a:	2304      	movs	r3, #4
 800a91c:	e0bb      	b.n	800aa96 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	899b      	ldrh	r3, [r3, #12]
 800a922:	461a      	mov	r2, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	fbb3 f1f2 	udiv	r1, r3, r2
 800a92a:	fb02 f201 	mul.w	r2, r2, r1
 800a92e:	1a9b      	subs	r3, r3, r2
 800a930:	2b00      	cmp	r3, #0
 800a932:	f040 809d 	bne.w	800aa70 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10b      	bne.n	800a960 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	8912      	ldrh	r2, [r2, #8]
 800a950:	4293      	cmp	r3, r2
 800a952:	f0c0 808d 	bcc.w	800aa70 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	61da      	str	r2, [r3, #28]
 800a95c:	2304      	movs	r3, #4
 800a95e:	e09a      	b.n	800aa96 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	899b      	ldrh	r3, [r3, #12]
 800a964:	461a      	mov	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	fbb3 f3f2 	udiv	r3, r3, r2
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	8952      	ldrh	r2, [r2, #10]
 800a970:	3a01      	subs	r2, #1
 800a972:	4013      	ands	r3, r2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d17b      	bne.n	800aa70 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7ff fc08 	bl	800a196 <get_fat>
 800a986:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d801      	bhi.n	800a992 <dir_next+0xa0>
 800a98e:	2302      	movs	r3, #2
 800a990:	e081      	b.n	800aa96 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a998:	d101      	bne.n	800a99e <dir_next+0xac>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e07b      	b.n	800aa96 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d359      	bcc.n	800aa5c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d104      	bne.n	800a9b8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	61da      	str	r2, [r3, #28]
 800a9b4:	2304      	movs	r3, #4
 800a9b6:	e06e      	b.n	800aa96 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f7ff fe3d 	bl	800a640 <create_chain>
 800a9c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <dir_next+0xe0>
 800a9ce:	2307      	movs	r3, #7
 800a9d0:	e061      	b.n	800aa96 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <dir_next+0xea>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e05c      	b.n	800aa96 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d101      	bne.n	800a9e8 <dir_next+0xf6>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e056      	b.n	800aa96 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff fad3 	bl	8009f94 <sync_window>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <dir_next+0x106>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e04e      	b.n	800aa96 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	899b      	ldrh	r3, [r3, #12]
 800aa02:	461a      	mov	r2, r3
 800aa04:	2100      	movs	r1, #0
 800aa06:	f7ff f8fc 	bl	8009c02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	6979      	ldr	r1, [r7, #20]
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff fba1 	bl	800a158 <clust2sect>
 800aa16:	4602      	mov	r2, r0
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	635a      	str	r2, [r3, #52]	; 0x34
 800aa1c:	e012      	b.n	800aa44 <dir_next+0x152>
						fs->wflag = 1;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2201      	movs	r2, #1
 800aa22:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff fab5 	bl	8009f94 <sync_window>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <dir_next+0x142>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e030      	b.n	800aa96 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	3301      	adds	r3, #1
 800aa38:	613b      	str	r3, [r7, #16]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	635a      	str	r2, [r3, #52]	; 0x34
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	895b      	ldrh	r3, [r3, #10]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d3e6      	bcc.n	800aa1e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	1ad2      	subs	r2, r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa62:	6979      	ldr	r1, [r7, #20]
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f7ff fb77 	bl	800a158 <clust2sect>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	899b      	ldrh	r3, [r3, #12]
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa88:	fb02 f200 	mul.w	r2, r2, r0
 800aa8c:	1a9b      	subs	r3, r3, r2
 800aa8e:	18ca      	adds	r2, r1, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b086      	sub	sp, #24
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aaae:	2100      	movs	r1, #0
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fe95 	bl	800a7e0 <dir_sdi>
 800aab6:	4603      	mov	r3, r0
 800aab8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d12b      	bne.n	800ab18 <dir_alloc+0x7a>
		n = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	4619      	mov	r1, r3
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff faa6 	bl	800a01c <move_window>
 800aad0:	4603      	mov	r3, r0
 800aad2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d11d      	bne.n	800ab16 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2be5      	cmp	r3, #229	; 0xe5
 800aae2:	d004      	beq.n	800aaee <dir_alloc+0x50>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d107      	bne.n	800aafe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d102      	bne.n	800ab02 <dir_alloc+0x64>
 800aafc:	e00c      	b.n	800ab18 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aafe:	2300      	movs	r3, #0
 800ab00:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab02:	2101      	movs	r1, #1
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fef4 	bl	800a8f2 <dir_next>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d0d7      	beq.n	800aac4 <dir_alloc+0x26>
 800ab14:	e000      	b.n	800ab18 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab16:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	d101      	bne.n	800ab22 <dir_alloc+0x84>
 800ab1e:	2307      	movs	r3, #7
 800ab20:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	331a      	adds	r3, #26
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe ffbe 	bl	8009abc <ld_word>
 800ab40:	4603      	mov	r3, r0
 800ab42:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d109      	bne.n	800ab60 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	3314      	adds	r3, #20
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe ffb3 	bl	8009abc <ld_word>
 800ab56:	4603      	mov	r3, r0
 800ab58:	041b      	lsls	r3, r3, #16
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab60:	68fb      	ldr	r3, [r7, #12]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	60f8      	str	r0, [r7, #12]
 800ab72:	60b9      	str	r1, [r7, #8]
 800ab74:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	331a      	adds	r3, #26
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	b292      	uxth	r2, r2
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fe ffd6 	bl	8009b32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d109      	bne.n	800aba2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f103 0214 	add.w	r2, r3, #20
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	0c1b      	lsrs	r3, r3, #16
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7fe ffc8 	bl	8009b32 <st_word>
	}
}
 800aba2:	bf00      	nop
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	331a      	adds	r3, #26
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe ff7e 	bl	8009abc <ld_word>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <cmp_lfn+0x1e>
 800abc6:	2300      	movs	r3, #0
 800abc8:	e059      	b.n	800ac7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abd2:	1e5a      	subs	r2, r3, #1
 800abd4:	4613      	mov	r3, r2
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abe0:	2301      	movs	r3, #1
 800abe2:	81fb      	strh	r3, [r7, #14]
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
 800abe8:	e033      	b.n	800ac52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800abea:	4a27      	ldr	r2, [pc, #156]	; (800ac88 <cmp_lfn+0xdc>)
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	4413      	add	r3, r2
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	4413      	add	r3, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fe ff5f 	bl	8009abc <ld_word>
 800abfe:	4603      	mov	r3, r0
 800ac00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ac02:	89fb      	ldrh	r3, [r7, #14]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01a      	beq.n	800ac3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	2bfe      	cmp	r3, #254	; 0xfe
 800ac0c:	d812      	bhi.n	800ac34 <cmp_lfn+0x88>
 800ac0e:	89bb      	ldrh	r3, [r7, #12]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f002 f8b5 	bl	800cd80 <ff_wtoupper>
 800ac16:	4603      	mov	r3, r0
 800ac18:	461c      	mov	r4, r3
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	617a      	str	r2, [r7, #20]
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	4413      	add	r3, r2
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f002 f8a9 	bl	800cd80 <ff_wtoupper>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	429c      	cmp	r4, r3
 800ac32:	d001      	beq.n	800ac38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ac34:	2300      	movs	r3, #0
 800ac36:	e022      	b.n	800ac7e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ac38:	89bb      	ldrh	r3, [r7, #12]
 800ac3a:	81fb      	strh	r3, [r7, #14]
 800ac3c:	e006      	b.n	800ac4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ac3e:	89bb      	ldrh	r3, [r7, #12]
 800ac40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d001      	beq.n	800ac4c <cmp_lfn+0xa0>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	e018      	b.n	800ac7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	2b0c      	cmp	r3, #12
 800ac56:	d9c8      	bls.n	800abea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00b      	beq.n	800ac7c <cmp_lfn+0xd0>
 800ac64:	89fb      	ldrh	r3, [r7, #14]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d008      	beq.n	800ac7c <cmp_lfn+0xd0>
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4413      	add	r3, r2
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d001      	beq.n	800ac7c <cmp_lfn+0xd0>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e000      	b.n	800ac7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ac7c:	2301      	movs	r3, #1
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	371c      	adds	r7, #28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd90      	pop	{r4, r7, pc}
 800ac86:	bf00      	nop
 800ac88:	0800d904 	.word	0x0800d904

0800ac8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b088      	sub	sp, #32
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	4611      	mov	r1, r2
 800ac98:	461a      	mov	r2, r3
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	71fb      	strb	r3, [r7, #7]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	330d      	adds	r3, #13
 800aca6:	79ba      	ldrb	r2, [r7, #6]
 800aca8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	330b      	adds	r3, #11
 800acae:	220f      	movs	r2, #15
 800acb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	330c      	adds	r3, #12
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	331a      	adds	r3, #26
 800acbe:	2100      	movs	r1, #0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe ff36 	bl	8009b32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	1e5a      	subs	r2, r3, #1
 800acca:	4613      	mov	r3, r2
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	82fb      	strh	r3, [r7, #22]
 800acda:	2300      	movs	r3, #0
 800acdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800acde:	8afb      	ldrh	r3, [r7, #22]
 800ace0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d007      	beq.n	800acf8 <put_lfn+0x6c>
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	61fa      	str	r2, [r7, #28]
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800acf8:	4a17      	ldr	r2, [pc, #92]	; (800ad58 <put_lfn+0xcc>)
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	4413      	add	r3, r2
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	461a      	mov	r2, r3
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	4413      	add	r3, r2
 800ad06:	8afa      	ldrh	r2, [r7, #22]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe ff11 	bl	8009b32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ad10:	8afb      	ldrh	r3, [r7, #22]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d102      	bne.n	800ad1c <put_lfn+0x90>
 800ad16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad1a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	61bb      	str	r3, [r7, #24]
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2b0c      	cmp	r3, #12
 800ad26:	d9da      	bls.n	800acde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ad28:	8afb      	ldrh	r3, [r7, #22]
 800ad2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d006      	beq.n	800ad40 <put_lfn+0xb4>
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <put_lfn+0xbc>
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad46:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	79fa      	ldrb	r2, [r7, #7]
 800ad4c:	701a      	strb	r2, [r3, #0]
}
 800ad4e:	bf00      	nop
 800ad50:	3720      	adds	r7, #32
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	0800d904 	.word	0x0800d904

0800ad5c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08c      	sub	sp, #48	; 0x30
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ad6a:	220b      	movs	r2, #11
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f7fe ff26 	bl	8009bc0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	2b05      	cmp	r3, #5
 800ad78:	d929      	bls.n	800adce <gen_numname+0x72>
		sr = seq;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ad7e:	e020      	b.n	800adc2 <gen_numname+0x66>
			wc = *lfn++;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	1c9a      	adds	r2, r3, #2
 800ad84:	607a      	str	r2, [r7, #4]
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad8e:	e015      	b.n	800adbc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	005a      	lsls	r2, r3, #1
 800ad94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	4413      	add	r3, r2
 800ad9c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ad9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ada0:	085b      	lsrs	r3, r3, #1
 800ada2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <gen_numname+0x5a>
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	4b31      	ldr	r3, [pc, #196]	; (800ae78 <gen_numname+0x11c>)
 800adb2:	4053      	eors	r3, r2
 800adb4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	3301      	adds	r3, #1
 800adba:	62bb      	str	r3, [r7, #40]	; 0x28
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	2b0f      	cmp	r3, #15
 800adc0:	d9e6      	bls.n	800ad90 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1da      	bne.n	800ad80 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800adce:	2307      	movs	r3, #7
 800add0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f003 030f 	and.w	r3, r3, #15
 800adda:	b2db      	uxtb	r3, r3
 800addc:	3330      	adds	r3, #48	; 0x30
 800adde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ade2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ade6:	2b39      	cmp	r3, #57	; 0x39
 800ade8:	d904      	bls.n	800adf4 <gen_numname+0x98>
 800adea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adee:	3307      	adds	r3, #7
 800adf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	1e5a      	subs	r2, r3, #1
 800adf8:	62ba      	str	r2, [r7, #40]	; 0x28
 800adfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800adfe:	4413      	add	r3, r2
 800ae00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ae04:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	091b      	lsrs	r3, r3, #4
 800ae0c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1de      	bne.n	800add2 <gen_numname+0x76>
	ns[i] = '~';
 800ae14:	f107 0214 	add.w	r2, r7, #20
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	4413      	add	r3, r2
 800ae1c:	227e      	movs	r2, #126	; 0x7e
 800ae1e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ae20:	2300      	movs	r3, #0
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24
 800ae24:	e002      	b.n	800ae2c <gen_numname+0xd0>
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	3301      	adds	r3, #1
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d205      	bcs.n	800ae40 <gen_numname+0xe4>
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	4413      	add	r3, r2
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d1f2      	bne.n	800ae26 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	2b07      	cmp	r3, #7
 800ae44:	d808      	bhi.n	800ae58 <gen_numname+0xfc>
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ae50:	4413      	add	r3, r2
 800ae52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ae56:	e000      	b.n	800ae5a <gen_numname+0xfe>
 800ae58:	2120      	movs	r1, #32
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	627a      	str	r2, [r7, #36]	; 0x24
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	460a      	mov	r2, r1
 800ae66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	2b07      	cmp	r3, #7
 800ae6c:	d9e8      	bls.n	800ae40 <gen_numname+0xe4>
}
 800ae6e:	bf00      	nop
 800ae70:	bf00      	nop
 800ae72:	3730      	adds	r7, #48	; 0x30
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	00011021 	.word	0x00011021

0800ae7c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ae88:	230b      	movs	r3, #11
 800ae8a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	0852      	lsrs	r2, r2, #1
 800ae92:	01db      	lsls	r3, r3, #7
 800ae94:	4313      	orrs	r3, r2
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	6079      	str	r1, [r7, #4]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	4413      	add	r3, r2
 800aea2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	60bb      	str	r3, [r7, #8]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1ed      	bne.n	800ae8c <sum_sfn+0x10>
	return sum;
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff fc86 	bl	800a7e0 <dir_sdi>
 800aed4:	4603      	mov	r3, r0
 800aed6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <dir_find+0x24>
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	e0a9      	b.n	800b036 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800aee2:	23ff      	movs	r3, #255	; 0xff
 800aee4:	753b      	strb	r3, [r7, #20]
 800aee6:	7d3b      	ldrb	r3, [r7, #20]
 800aee8:	757b      	strb	r3, [r7, #21]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6938      	ldr	r0, [r7, #16]
 800aefa:	f7ff f88f 	bl	800a01c <move_window>
 800aefe:	4603      	mov	r3, r0
 800af00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af02:	7dfb      	ldrb	r3, [r7, #23]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f040 8090 	bne.w	800b02a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af12:	7dbb      	ldrb	r3, [r7, #22]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <dir_find+0x60>
 800af18:	2304      	movs	r3, #4
 800af1a:	75fb      	strb	r3, [r7, #23]
 800af1c:	e08a      	b.n	800b034 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	330b      	adds	r3, #11
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af2a:	73fb      	strb	r3, [r7, #15]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	7bfa      	ldrb	r2, [r7, #15]
 800af30:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800af32:	7dbb      	ldrb	r3, [r7, #22]
 800af34:	2be5      	cmp	r3, #229	; 0xe5
 800af36:	d007      	beq.n	800af48 <dir_find+0x8a>
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	f003 0308 	and.w	r3, r3, #8
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <dir_find+0x98>
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b0f      	cmp	r3, #15
 800af46:	d006      	beq.n	800af56 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af48:	23ff      	movs	r3, #255	; 0xff
 800af4a:	757b      	strb	r3, [r7, #21]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295
 800af52:	631a      	str	r2, [r3, #48]	; 0x30
 800af54:	e05e      	b.n	800b014 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	2b0f      	cmp	r3, #15
 800af5a:	d136      	bne.n	800afca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d154      	bne.n	800b014 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800af6a:	7dbb      	ldrb	r3, [r7, #22]
 800af6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00d      	beq.n	800af90 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	7b5b      	ldrb	r3, [r3, #13]
 800af7a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800af7c:	7dbb      	ldrb	r3, [r7, #22]
 800af7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af82:	75bb      	strb	r3, [r7, #22]
 800af84:	7dbb      	ldrb	r3, [r7, #22]
 800af86:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	695a      	ldr	r2, [r3, #20]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af90:	7dba      	ldrb	r2, [r7, #22]
 800af92:	7d7b      	ldrb	r3, [r7, #21]
 800af94:	429a      	cmp	r2, r3
 800af96:	d115      	bne.n	800afc4 <dir_find+0x106>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	330d      	adds	r3, #13
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	7d3a      	ldrb	r2, [r7, #20]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d10e      	bne.n	800afc4 <dir_find+0x106>
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	691a      	ldr	r2, [r3, #16]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	4619      	mov	r1, r3
 800afb0:	4610      	mov	r0, r2
 800afb2:	f7ff fdfb 	bl	800abac <cmp_lfn>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <dir_find+0x106>
 800afbc:	7d7b      	ldrb	r3, [r7, #21]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	e000      	b.n	800afc6 <dir_find+0x108>
 800afc4:	23ff      	movs	r3, #255	; 0xff
 800afc6:	757b      	strb	r3, [r7, #21]
 800afc8:	e024      	b.n	800b014 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800afca:	7d7b      	ldrb	r3, [r7, #21]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d109      	bne.n	800afe4 <dir_find+0x126>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff ff51 	bl	800ae7c <sum_sfn>
 800afda:	4603      	mov	r3, r0
 800afdc:	461a      	mov	r2, r3
 800afde:	7d3b      	ldrb	r3, [r7, #20]
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d024      	beq.n	800b02e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <dir_find+0x14a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a18      	ldr	r0, [r3, #32]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3324      	adds	r3, #36	; 0x24
 800affa:	220b      	movs	r2, #11
 800affc:	4619      	mov	r1, r3
 800affe:	f7fe fe1b 	bl	8009c38 <mem_cmp>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d014      	beq.n	800b032 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b008:	23ff      	movs	r3, #255	; 0xff
 800b00a:	757b      	strb	r3, [r7, #21]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295
 800b012:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b014:	2100      	movs	r1, #0
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff fc6b 	bl	800a8f2 <dir_next>
 800b01c:	4603      	mov	r3, r0
 800b01e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f43f af65 	beq.w	800aef2 <dir_find+0x34>
 800b028:	e004      	b.n	800b034 <dir_find+0x176>
		if (res != FR_OK) break;
 800b02a:	bf00      	nop
 800b02c:	e002      	b.n	800b034 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b02e:	bf00      	nop
 800b030:	e000      	b.n	800b034 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b032:	bf00      	nop

	return res;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08c      	sub	sp, #48	; 0x30
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b054:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <dir_register+0x20>
 800b05c:	2306      	movs	r3, #6
 800b05e:	e0e0      	b.n	800b222 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b060:	2300      	movs	r3, #0
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
 800b064:	e002      	b.n	800b06c <dir_register+0x2c>
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b068:	3301      	adds	r3, #1
 800b06a:	627b      	str	r3, [r7, #36]	; 0x24
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	691a      	ldr	r2, [r3, #16]
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	4413      	add	r3, r2
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f4      	bne.n	800b066 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b082:	f107 030c 	add.w	r3, r7, #12
 800b086:	220c      	movs	r2, #12
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fd99 	bl	8009bc0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d032      	beq.n	800b0fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2240      	movs	r2, #64	; 0x40
 800b09c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0a4:	e016      	b.n	800b0d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	f107 010c 	add.w	r1, r7, #12
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	f7ff fe51 	bl	800ad5c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff feff 	bl	800aebe <dir_find>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	2b63      	cmp	r3, #99	; 0x63
 800b0d8:	d9e5      	bls.n	800b0a6 <dir_register+0x66>
 800b0da:	e000      	b.n	800b0de <dir_register+0x9e>
			if (res != FR_OK) break;
 800b0dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	2b64      	cmp	r3, #100	; 0x64
 800b0e2:	d101      	bne.n	800b0e8 <dir_register+0xa8>
 800b0e4:	2307      	movs	r3, #7
 800b0e6:	e09c      	b.n	800b222 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b0e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d002      	beq.n	800b0f6 <dir_register+0xb6>
 800b0f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0f4:	e095      	b.n	800b222 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b0f6:	7dfa      	ldrb	r2, [r7, #23]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d007      	beq.n	800b118 <dir_register+0xd8>
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	330c      	adds	r3, #12
 800b10c:	4a47      	ldr	r2, [pc, #284]	; (800b22c <dir_register+0x1ec>)
 800b10e:	fba2 2303 	umull	r2, r3, r2, r3
 800b112:	089b      	lsrs	r3, r3, #2
 800b114:	3301      	adds	r3, #1
 800b116:	e000      	b.n	800b11a <dir_register+0xda>
 800b118:	2301      	movs	r3, #1
 800b11a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b11c:	6a39      	ldr	r1, [r7, #32]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fcbd 	bl	800aa9e <dir_alloc>
 800b124:	4603      	mov	r3, r0
 800b126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b12a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d148      	bne.n	800b1c4 <dir_register+0x184>
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	3b01      	subs	r3, #1
 800b136:	623b      	str	r3, [r7, #32]
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d042      	beq.n	800b1c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695a      	ldr	r2, [r3, #20]
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	015b      	lsls	r3, r3, #5
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff fb48 	bl	800a7e0 <dir_sdi>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d132      	bne.n	800b1c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3324      	adds	r3, #36	; 0x24
 800b162:	4618      	mov	r0, r3
 800b164:	f7ff fe8a 	bl	800ae7c <sum_sfn>
 800b168:	4603      	mov	r3, r0
 800b16a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	4619      	mov	r1, r3
 800b172:	69f8      	ldr	r0, [r7, #28]
 800b174:	f7fe ff52 	bl	800a01c <move_window>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b182:	2b00      	cmp	r3, #0
 800b184:	d11d      	bne.n	800b1c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	6918      	ldr	r0, [r3, #16]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a19      	ldr	r1, [r3, #32]
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	b2da      	uxtb	r2, r3
 800b192:	7efb      	ldrb	r3, [r7, #27]
 800b194:	f7ff fd7a 	bl	800ac8c <put_lfn>
				fs->wflag = 1;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2201      	movs	r2, #1
 800b19c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7ff fba6 	bl	800a8f2 <dir_next>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b1ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d107      	bne.n	800b1c4 <dir_register+0x184>
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	623b      	str	r3, [r7, #32]
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1d5      	bne.n	800b16c <dir_register+0x12c>
 800b1c0:	e000      	b.n	800b1c4 <dir_register+0x184>
				if (res != FR_OK) break;
 800b1c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b1c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d128      	bne.n	800b21e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	69db      	ldr	r3, [r3, #28]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	69f8      	ldr	r0, [r7, #28]
 800b1d4:	f7fe ff22 	bl	800a01c <move_window>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d11b      	bne.n	800b21e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	2220      	movs	r2, #32
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fd07 	bl	8009c02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a18      	ldr	r0, [r3, #32]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3324      	adds	r3, #36	; 0x24
 800b1fc:	220b      	movs	r2, #11
 800b1fe:	4619      	mov	r1, r3
 800b200:	f7fe fcde 	bl	8009bc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	330c      	adds	r3, #12
 800b210:	f002 0218 	and.w	r2, r2, #24
 800b214:	b2d2      	uxtb	r2, r2
 800b216:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2201      	movs	r2, #1
 800b21c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b21e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b222:	4618      	mov	r0, r3
 800b224:	3730      	adds	r7, #48	; 0x30
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b230 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 80c9 	beq.w	800b3e2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b258:	d032      	beq.n	800b2c0 <get_fileinfo+0x90>
			i = j = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61bb      	str	r3, [r7, #24]
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b262:	e01b      	b.n	800b29c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b264:	89fb      	ldrh	r3, [r7, #14]
 800b266:	2100      	movs	r1, #0
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 fd4d 	bl	800cd08 <ff_convert>
 800b26e:	4603      	mov	r3, r0
 800b270:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b272:	89fb      	ldrh	r3, [r7, #14]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d102      	bne.n	800b27e <get_fileinfo+0x4e>
 800b278:	2300      	movs	r3, #0
 800b27a:	61fb      	str	r3, [r7, #28]
 800b27c:	e01a      	b.n	800b2b4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	2bfe      	cmp	r3, #254	; 0xfe
 800b282:	d902      	bls.n	800b28a <get_fileinfo+0x5a>
 800b284:	2300      	movs	r3, #0
 800b286:	61fb      	str	r3, [r7, #28]
 800b288:	e014      	b.n	800b2b4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	61fa      	str	r2, [r7, #28]
 800b290:	89fa      	ldrh	r2, [r7, #14]
 800b292:	b2d1      	uxtb	r1, r2
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	4413      	add	r3, r2
 800b298:	460a      	mov	r2, r1
 800b29a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	691a      	ldr	r2, [r3, #16]
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	1c59      	adds	r1, r3, #1
 800b2a4:	61b9      	str	r1, [r7, #24]
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	4413      	add	r3, r2
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	81fb      	strh	r3, [r7, #14]
 800b2ae:	89fb      	ldrh	r3, [r7, #14]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1d7      	bne.n	800b264 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	3316      	adds	r3, #22
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61bb      	str	r3, [r7, #24]
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3316      	adds	r3, #22
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b2d4:	e04c      	b.n	800b370 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a1a      	ldr	r2, [r3, #32]
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	1c59      	adds	r1, r3, #1
 800b2de:	61f9      	str	r1, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	2b20      	cmp	r3, #32
 800b2ea:	d100      	bne.n	800b2ee <get_fileinfo+0xbe>
 800b2ec:	e040      	b.n	800b370 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	2b05      	cmp	r3, #5
 800b2f2:	d101      	bne.n	800b2f8 <get_fileinfo+0xc8>
 800b2f4:	23e5      	movs	r3, #229	; 0xe5
 800b2f6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d10f      	bne.n	800b31e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b2fe:	89bb      	ldrh	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d105      	bne.n	800b310 <get_fileinfo+0xe0>
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	4413      	add	r3, r2
 800b30a:	3316      	adds	r3, #22
 800b30c:	222e      	movs	r2, #46	; 0x2e
 800b30e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	61ba      	str	r2, [r7, #24]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	4413      	add	r3, r2
 800b31a:	222e      	movs	r2, #46	; 0x2e
 800b31c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	4413      	add	r3, r2
 800b324:	3309      	adds	r3, #9
 800b326:	7dfa      	ldrb	r2, [r7, #23]
 800b328:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b32a:	89bb      	ldrh	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d11c      	bne.n	800b36a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	2b40      	cmp	r3, #64	; 0x40
 800b334:	d913      	bls.n	800b35e <get_fileinfo+0x12e>
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	2b5a      	cmp	r3, #90	; 0x5a
 800b33a:	d810      	bhi.n	800b35e <get_fileinfo+0x12e>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	330c      	adds	r3, #12
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d901      	bls.n	800b350 <get_fileinfo+0x120>
 800b34c:	2310      	movs	r3, #16
 800b34e:	e000      	b.n	800b352 <get_fileinfo+0x122>
 800b350:	2308      	movs	r3, #8
 800b352:	4013      	ands	r3, r2
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b358:	7dfb      	ldrb	r3, [r7, #23]
 800b35a:	3320      	adds	r3, #32
 800b35c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	4413      	add	r3, r2
 800b364:	3316      	adds	r3, #22
 800b366:	7dfa      	ldrb	r2, [r7, #23]
 800b368:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	3301      	adds	r3, #1
 800b36e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	2b0a      	cmp	r3, #10
 800b374:	d9af      	bls.n	800b2d6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b376:	89bb      	ldrh	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10d      	bne.n	800b398 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	4413      	add	r3, r2
 800b382:	3316      	adds	r3, #22
 800b384:	2200      	movs	r2, #0
 800b386:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	330c      	adds	r3, #12
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <get_fileinfo+0x168>
 800b394:	2300      	movs	r3, #0
 800b396:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	4413      	add	r3, r2
 800b39e:	3309      	adds	r3, #9
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	7ada      	ldrb	r2, [r3, #11]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	331c      	adds	r3, #28
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe fb99 	bl	8009aec <ld_dword>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	3316      	adds	r3, #22
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fb90 	bl	8009aec <ld_dword>
 800b3cc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	80da      	strh	r2, [r3, #6]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	0c1b      	lsrs	r3, r3, #16
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	809a      	strh	r2, [r3, #4]
 800b3e0:	e000      	b.n	800b3e4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b3e2:	bf00      	nop
}
 800b3e4:	3720      	adds	r7, #32
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08a      	sub	sp, #40	; 0x28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	2300      	movs	r3, #0
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	61ba      	str	r2, [r7, #24]
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4413      	add	r3, r2
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b41c:	2b1f      	cmp	r3, #31
 800b41e:	d940      	bls.n	800b4a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b422:	2b2f      	cmp	r3, #47	; 0x2f
 800b424:	d006      	beq.n	800b434 <create_name+0x48>
 800b426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b428:	2b5c      	cmp	r3, #92	; 0x5c
 800b42a:	d110      	bne.n	800b44e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b42c:	e002      	b.n	800b434 <create_name+0x48>
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	3301      	adds	r3, #1
 800b432:	61bb      	str	r3, [r7, #24]
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	4413      	add	r3, r2
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b2f      	cmp	r3, #47	; 0x2f
 800b43e:	d0f6      	beq.n	800b42e <create_name+0x42>
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	4413      	add	r3, r2
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b5c      	cmp	r3, #92	; 0x5c
 800b44a:	d0f0      	beq.n	800b42e <create_name+0x42>
			break;
 800b44c:	e02a      	b.n	800b4a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2bfe      	cmp	r3, #254	; 0xfe
 800b452:	d901      	bls.n	800b458 <create_name+0x6c>
 800b454:	2306      	movs	r3, #6
 800b456:	e177      	b.n	800b748 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b460:	2101      	movs	r1, #1
 800b462:	4618      	mov	r0, r3
 800b464:	f001 fc50 	bl	800cd08 <ff_convert>
 800b468:	4603      	mov	r3, r0
 800b46a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <create_name+0x8a>
 800b472:	2306      	movs	r3, #6
 800b474:	e168      	b.n	800b748 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b478:	2b7f      	cmp	r3, #127	; 0x7f
 800b47a:	d809      	bhi.n	800b490 <create_name+0xa4>
 800b47c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b47e:	4619      	mov	r1, r3
 800b480:	48b3      	ldr	r0, [pc, #716]	; (800b750 <create_name+0x364>)
 800b482:	f7fe fc00 	bl	8009c86 <chk_chr>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <create_name+0xa4>
 800b48c:	2306      	movs	r3, #6
 800b48e:	e15b      	b.n	800b748 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	617a      	str	r2, [r7, #20]
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	4413      	add	r3, r2
 800b49c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b49e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b4a0:	e7b4      	b.n	800b40c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b4a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	441a      	add	r2, r3
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b4ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4b0:	2b1f      	cmp	r3, #31
 800b4b2:	d801      	bhi.n	800b4b8 <create_name+0xcc>
 800b4b4:	2304      	movs	r3, #4
 800b4b6:	e000      	b.n	800b4ba <create_name+0xce>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b4be:	e011      	b.n	800b4e4 <create_name+0xf8>
		w = lfn[di - 1];
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b4c6:	4413      	add	r3, r2
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b4d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d002      	beq.n	800b4de <create_name+0xf2>
 800b4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4da:	2b2e      	cmp	r3, #46	; 0x2e
 800b4dc:	d106      	bne.n	800b4ec <create_name+0x100>
		di--;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1ea      	bne.n	800b4c0 <create_name+0xd4>
 800b4ea:	e000      	b.n	800b4ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b4ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <create_name+0x118>
 800b500:	2306      	movs	r3, #6
 800b502:	e121      	b.n	800b748 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3324      	adds	r3, #36	; 0x24
 800b508:	220b      	movs	r2, #11
 800b50a:	2120      	movs	r1, #32
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe fb78 	bl	8009c02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b512:	2300      	movs	r3, #0
 800b514:	61bb      	str	r3, [r7, #24]
 800b516:	e002      	b.n	800b51e <create_name+0x132>
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	3301      	adds	r3, #1
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	005b      	lsls	r3, r3, #1
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	2b20      	cmp	r3, #32
 800b52a:	d0f5      	beq.n	800b518 <create_name+0x12c>
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	2b2e      	cmp	r3, #46	; 0x2e
 800b538:	d0ee      	beq.n	800b518 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d009      	beq.n	800b554 <create_name+0x168>
 800b540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b544:	f043 0303 	orr.w	r3, r3, #3
 800b548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b54c:	e002      	b.n	800b554 <create_name+0x168>
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	3b01      	subs	r3, #1
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <create_name+0x182>
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b560:	4413      	add	r3, r2
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	2b2e      	cmp	r3, #46	; 0x2e
 800b56c:	d1ef      	bne.n	800b54e <create_name+0x162>

	i = b = 0; ni = 8;
 800b56e:	2300      	movs	r3, #0
 800b570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b574:	2300      	movs	r3, #0
 800b576:	623b      	str	r3, [r7, #32]
 800b578:	2308      	movs	r3, #8
 800b57a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	61ba      	str	r2, [r7, #24]
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	4413      	add	r3, r2
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 8090 	beq.w	800b6b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b596:	2b20      	cmp	r3, #32
 800b598:	d006      	beq.n	800b5a8 <create_name+0x1bc>
 800b59a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b59c:	2b2e      	cmp	r3, #46	; 0x2e
 800b59e:	d10a      	bne.n	800b5b6 <create_name+0x1ca>
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d006      	beq.n	800b5b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5ac:	f043 0303 	orr.w	r3, r3, #3
 800b5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5b4:	e07d      	b.n	800b6b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b5b6:	6a3a      	ldr	r2, [r7, #32]
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d203      	bcs.n	800b5c6 <create_name+0x1da>
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d123      	bne.n	800b60e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	2b0b      	cmp	r3, #11
 800b5ca:	d106      	bne.n	800b5da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d0:	f043 0303 	orr.w	r3, r3, #3
 800b5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5d8:	e06f      	b.n	800b6ba <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d005      	beq.n	800b5ee <create_name+0x202>
 800b5e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e6:	f043 0303 	orr.w	r3, r3, #3
 800b5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b5ee:	69ba      	ldr	r2, [r7, #24]
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d860      	bhi.n	800b6b8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	61bb      	str	r3, [r7, #24]
 800b5fa:	2308      	movs	r3, #8
 800b5fc:	623b      	str	r3, [r7, #32]
 800b5fe:	230b      	movs	r3, #11
 800b600:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b60c:	e051      	b.n	800b6b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b610:	2b7f      	cmp	r3, #127	; 0x7f
 800b612:	d914      	bls.n	800b63e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b616:	2100      	movs	r1, #0
 800b618:	4618      	mov	r0, r3
 800b61a:	f001 fb75 	bl	800cd08 <ff_convert>
 800b61e:	4603      	mov	r3, r0
 800b620:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b624:	2b00      	cmp	r3, #0
 800b626:	d004      	beq.n	800b632 <create_name+0x246>
 800b628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b62a:	3b80      	subs	r3, #128	; 0x80
 800b62c:	4a49      	ldr	r2, [pc, #292]	; (800b754 <create_name+0x368>)
 800b62e:	5cd3      	ldrb	r3, [r2, r3]
 800b630:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b636:	f043 0302 	orr.w	r3, r3, #2
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b640:	2b00      	cmp	r3, #0
 800b642:	d007      	beq.n	800b654 <create_name+0x268>
 800b644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b646:	4619      	mov	r1, r3
 800b648:	4843      	ldr	r0, [pc, #268]	; (800b758 <create_name+0x36c>)
 800b64a:	f7fe fb1c 	bl	8009c86 <chk_chr>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d008      	beq.n	800b666 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b654:	235f      	movs	r3, #95	; 0x5f
 800b656:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b65c:	f043 0303 	orr.w	r3, r3, #3
 800b660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b664:	e01b      	b.n	800b69e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b668:	2b40      	cmp	r3, #64	; 0x40
 800b66a:	d909      	bls.n	800b680 <create_name+0x294>
 800b66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b66e:	2b5a      	cmp	r3, #90	; 0x5a
 800b670:	d806      	bhi.n	800b680 <create_name+0x294>
					b |= 2;
 800b672:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b676:	f043 0302 	orr.w	r3, r3, #2
 800b67a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b67e:	e00e      	b.n	800b69e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b682:	2b60      	cmp	r3, #96	; 0x60
 800b684:	d90b      	bls.n	800b69e <create_name+0x2b2>
 800b686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b688:	2b7a      	cmp	r3, #122	; 0x7a
 800b68a:	d808      	bhi.n	800b69e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b68c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b690:	f043 0301 	orr.w	r3, r3, #1
 800b694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b69a:	3b20      	subs	r3, #32
 800b69c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	623a      	str	r2, [r7, #32]
 800b6a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6a6:	b2d1      	uxtb	r1, r2
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	460a      	mov	r2, r1
 800b6ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b6b2:	e763      	b.n	800b57c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b6b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b6c0:	2be5      	cmp	r3, #229	; 0xe5
 800b6c2:	d103      	bne.n	800b6cc <create_name+0x2e0>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	2b08      	cmp	r3, #8
 800b6d0:	d104      	bne.n	800b6dc <create_name+0x2f0>
 800b6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b6dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6e0:	f003 030c 	and.w	r3, r3, #12
 800b6e4:	2b0c      	cmp	r3, #12
 800b6e6:	d005      	beq.n	800b6f4 <create_name+0x308>
 800b6e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6ec:	f003 0303 	and.w	r3, r3, #3
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d105      	bne.n	800b700 <create_name+0x314>
 800b6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f8:	f043 0302 	orr.w	r3, r3, #2
 800b6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d117      	bne.n	800b73c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b70c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	2b01      	cmp	r3, #1
 800b716:	d105      	bne.n	800b724 <create_name+0x338>
 800b718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b71c:	f043 0310 	orr.w	r3, r3, #16
 800b720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b728:	f003 030c 	and.w	r3, r3, #12
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d105      	bne.n	800b73c <create_name+0x350>
 800b730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b734:	f043 0308 	orr.w	r3, r3, #8
 800b738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b742:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b746:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3728      	adds	r7, #40	; 0x28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	0800d7e0 	.word	0x0800d7e0
 800b754:	0800d884 	.word	0x0800d884
 800b758:	0800d7ec 	.word	0x0800d7ec

0800b75c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b770:	e002      	b.n	800b778 <follow_path+0x1c>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	3301      	adds	r3, #1
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	2b2f      	cmp	r3, #47	; 0x2f
 800b77e:	d0f8      	beq.n	800b772 <follow_path+0x16>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b5c      	cmp	r3, #92	; 0x5c
 800b786:	d0f4      	beq.n	800b772 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2200      	movs	r2, #0
 800b78c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b1f      	cmp	r3, #31
 800b794:	d80a      	bhi.n	800b7ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2280      	movs	r2, #128	; 0x80
 800b79a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b79e:	2100      	movs	r1, #0
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff f81d 	bl	800a7e0 <dir_sdi>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75fb      	strb	r3, [r7, #23]
 800b7aa:	e048      	b.n	800b83e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7ac:	463b      	mov	r3, r7
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fe1b 	bl	800b3ec <create_name>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d139      	bne.n	800b834 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff fb7c 	bl	800aebe <dir_find>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b7d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00a      	beq.n	800b7ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d12c      	bne.n	800b838 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b7de:	7afb      	ldrb	r3, [r7, #11]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d127      	bne.n	800b838 <follow_path+0xdc>
 800b7e8:	2305      	movs	r3, #5
 800b7ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b7ec:	e024      	b.n	800b838 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7ee:	7afb      	ldrb	r3, [r7, #11]
 800b7f0:	f003 0304 	and.w	r3, r3, #4
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d121      	bne.n	800b83c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	799b      	ldrb	r3, [r3, #6]
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b804:	2305      	movs	r3, #5
 800b806:	75fb      	strb	r3, [r7, #23]
 800b808:	e019      	b.n	800b83e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	695b      	ldr	r3, [r3, #20]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	8992      	ldrh	r2, [r2, #12]
 800b818:	fbb3 f0f2 	udiv	r0, r3, r2
 800b81c:	fb02 f200 	mul.w	r2, r2, r0
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	440b      	add	r3, r1
 800b824:	4619      	mov	r1, r3
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff f980 	bl	800ab2c <ld_clust>
 800b82c:	4602      	mov	r2, r0
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b832:	e7bb      	b.n	800b7ac <follow_path+0x50>
			if (res != FR_OK) break;
 800b834:	bf00      	nop
 800b836:	e002      	b.n	800b83e <follow_path+0xe2>
				break;
 800b838:	bf00      	nop
 800b83a:	e000      	b.n	800b83e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b83c:	bf00      	nop
			}
		}
	}

	return res;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d031      	beq.n	800b8c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e002      	b.n	800b86c <get_ldnumber+0x24>
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	3301      	adds	r3, #1
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b1f      	cmp	r3, #31
 800b872:	d903      	bls.n	800b87c <get_ldnumber+0x34>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b3a      	cmp	r3, #58	; 0x3a
 800b87a:	d1f4      	bne.n	800b866 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b3a      	cmp	r3, #58	; 0x3a
 800b882:	d11c      	bne.n	800b8be <get_ldnumber+0x76>
			tp = *path;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	60fa      	str	r2, [r7, #12]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	3b30      	subs	r3, #48	; 0x30
 800b894:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	2b09      	cmp	r3, #9
 800b89a:	d80e      	bhi.n	800b8ba <get_ldnumber+0x72>
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d10a      	bne.n	800b8ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d107      	bne.n	800b8ba <get_ldnumber+0x72>
					vol = (int)i;
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	e002      	b.n	800b8c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b8be:	2300      	movs	r3, #0
 800b8c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b8c2:	693b      	ldr	r3, [r7, #16]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	371c      	adds	r7, #28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	70da      	strb	r2, [r3, #3]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7fe fb96 	bl	800a01c <move_window>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <check_fs+0x2a>
 800b8f6:	2304      	movs	r3, #4
 800b8f8:	e038      	b.n	800b96c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3338      	adds	r3, #56	; 0x38
 800b8fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b902:	4618      	mov	r0, r3
 800b904:	f7fe f8da 	bl	8009abc <ld_word>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b910:	429a      	cmp	r2, r3
 800b912:	d001      	beq.n	800b918 <check_fs+0x48>
 800b914:	2303      	movs	r3, #3
 800b916:	e029      	b.n	800b96c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b91e:	2be9      	cmp	r3, #233	; 0xe9
 800b920:	d009      	beq.n	800b936 <check_fs+0x66>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b928:	2beb      	cmp	r3, #235	; 0xeb
 800b92a:	d11e      	bne.n	800b96a <check_fs+0x9a>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b932:	2b90      	cmp	r3, #144	; 0x90
 800b934:	d119      	bne.n	800b96a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3338      	adds	r3, #56	; 0x38
 800b93a:	3336      	adds	r3, #54	; 0x36
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe f8d5 	bl	8009aec <ld_dword>
 800b942:	4603      	mov	r3, r0
 800b944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b948:	4a0a      	ldr	r2, [pc, #40]	; (800b974 <check_fs+0xa4>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d101      	bne.n	800b952 <check_fs+0x82>
 800b94e:	2300      	movs	r3, #0
 800b950:	e00c      	b.n	800b96c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3338      	adds	r3, #56	; 0x38
 800b956:	3352      	adds	r3, #82	; 0x52
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe f8c7 	bl	8009aec <ld_dword>
 800b95e:	4603      	mov	r3, r0
 800b960:	4a05      	ldr	r2, [pc, #20]	; (800b978 <check_fs+0xa8>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d101      	bne.n	800b96a <check_fs+0x9a>
 800b966:	2300      	movs	r3, #0
 800b968:	e000      	b.n	800b96c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b96a:	2302      	movs	r3, #2
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	00544146 	.word	0x00544146
 800b978:	33544146 	.word	0x33544146

0800b97c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b096      	sub	sp, #88	; 0x58
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff ff59 	bl	800b848 <get_ldnumber>
 800b996:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	da01      	bge.n	800b9a2 <find_volume+0x26>
 800b99e:	230b      	movs	r3, #11
 800b9a0:	e268      	b.n	800be74 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b9a2:	4ab0      	ldr	r2, [pc, #704]	; (800bc64 <find_volume+0x2e8>)
 800b9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <find_volume+0x3a>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	e25e      	b.n	800be74 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	f023 0301 	bic.w	r3, r3, #1
 800b9c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d01a      	beq.n	800ba02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	785b      	ldrb	r3, [r3, #1]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fd ffd5 	bl	8009980 <disk_status>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10c      	bne.n	800ba02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b9e8:	79fb      	ldrb	r3, [r7, #7]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d007      	beq.n	800b9fe <find_volume+0x82>
 800b9ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9f2:	f003 0304 	and.w	r3, r3, #4
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b9fa:	230a      	movs	r3, #10
 800b9fc:	e23a      	b.n	800be74 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e238      	b.n	800be74 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	2200      	movs	r2, #0
 800ba06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ba08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	785b      	ldrb	r3, [r3, #1]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fd ffcd 	bl	80099b4 <disk_initialize>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ba20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e221      	b.n	800be74 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <find_volume+0xca>
 800ba36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ba42:	230a      	movs	r3, #10
 800ba44:	e216      	b.n	800be74 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ba46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba48:	7858      	ldrb	r0, [r3, #1]
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	330c      	adds	r3, #12
 800ba4e:	461a      	mov	r2, r3
 800ba50:	2102      	movs	r1, #2
 800ba52:	f7fe f815 	bl	8009a80 <disk_ioctl>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <find_volume+0xe4>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e209      	b.n	800be74 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ba60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba62:	899b      	ldrh	r3, [r3, #12]
 800ba64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba68:	d80d      	bhi.n	800ba86 <find_volume+0x10a>
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6c:	899b      	ldrh	r3, [r3, #12]
 800ba6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba72:	d308      	bcc.n	800ba86 <find_volume+0x10a>
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	899b      	ldrh	r3, [r3, #12]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	899b      	ldrh	r3, [r3, #12]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	4013      	ands	r3, r2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <find_volume+0x10e>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e1f4      	b.n	800be74 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba92:	f7ff ff1d 	bl	800b8d0 <check_fs>
 800ba96:	4603      	mov	r3, r0
 800ba98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d14b      	bne.n	800bb3c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800baa4:	2300      	movs	r3, #0
 800baa6:	643b      	str	r3, [r7, #64]	; 0x40
 800baa8:	e01f      	b.n	800baea <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800baaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	011b      	lsls	r3, r3, #4
 800bab4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bab8:	4413      	add	r3, r2
 800baba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	3304      	adds	r3, #4
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d006      	beq.n	800bad4 <find_volume+0x158>
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	3308      	adds	r3, #8
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe f80e 	bl	8009aec <ld_dword>
 800bad0:	4602      	mov	r2, r0
 800bad2:	e000      	b.n	800bad6 <find_volume+0x15a>
 800bad4:	2200      	movs	r2, #0
 800bad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bade:	440b      	add	r3, r1
 800bae0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae6:	3301      	adds	r3, #1
 800bae8:	643b      	str	r3, [r7, #64]	; 0x40
 800baea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baec:	2b03      	cmp	r3, #3
 800baee:	d9dc      	bls.n	800baaa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800baf0:	2300      	movs	r3, #0
 800baf2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800baf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <find_volume+0x184>
 800bafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bafc:	3b01      	subs	r3, #1
 800bafe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bb00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bb08:	4413      	add	r3, r2
 800bb0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bb0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <find_volume+0x1a6>
 800bb16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb1a:	f7ff fed9 	bl	800b8d0 <check_fs>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	e000      	b.n	800bb24 <find_volume+0x1a8>
 800bb22:	2303      	movs	r3, #3
 800bb24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bb28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d905      	bls.n	800bb3c <find_volume+0x1c0>
 800bb30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb32:	3301      	adds	r3, #1
 800bb34:	643b      	str	r3, [r7, #64]	; 0x40
 800bb36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d9e1      	bls.n	800bb00 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bb3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	d101      	bne.n	800bb48 <find_volume+0x1cc>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e195      	b.n	800be74 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bb48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d901      	bls.n	800bb54 <find_volume+0x1d8>
 800bb50:	230d      	movs	r3, #13
 800bb52:	e18f      	b.n	800be74 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	3338      	adds	r3, #56	; 0x38
 800bb58:	330b      	adds	r3, #11
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fd ffae 	bl	8009abc <ld_word>
 800bb60:	4603      	mov	r3, r0
 800bb62:	461a      	mov	r2, r3
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	899b      	ldrh	r3, [r3, #12]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d001      	beq.n	800bb70 <find_volume+0x1f4>
 800bb6c:	230d      	movs	r3, #13
 800bb6e:	e181      	b.n	800be74 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	3338      	adds	r3, #56	; 0x38
 800bb74:	3316      	adds	r3, #22
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd ffa0 	bl	8009abc <ld_word>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bb80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d106      	bne.n	800bb94 <find_volume+0x218>
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	3338      	adds	r3, #56	; 0x38
 800bb8a:	3324      	adds	r3, #36	; 0x24
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fd ffad 	bl	8009aec <ld_dword>
 800bb92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb98:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba6:	789b      	ldrb	r3, [r3, #2]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d005      	beq.n	800bbb8 <find_volume+0x23c>
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	789b      	ldrb	r3, [r3, #2]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d001      	beq.n	800bbb8 <find_volume+0x23c>
 800bbb4:	230d      	movs	r3, #13
 800bbb6:	e15d      	b.n	800be74 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	789b      	ldrb	r3, [r3, #2]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc0:	fb02 f303 	mul.w	r3, r2, r3
 800bbc4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	895b      	ldrh	r3, [r3, #10]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d008      	beq.n	800bbec <find_volume+0x270>
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	895b      	ldrh	r3, [r3, #10]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	895b      	ldrh	r3, [r3, #10]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <find_volume+0x274>
 800bbec:	230d      	movs	r3, #13
 800bbee:	e141      	b.n	800be74 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	3338      	adds	r3, #56	; 0x38
 800bbf4:	3311      	adds	r3, #17
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fd ff60 	bl	8009abc <ld_word>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	461a      	mov	r2, r3
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	891b      	ldrh	r3, [r3, #8]
 800bc08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc0a:	8992      	ldrh	r2, [r2, #12]
 800bc0c:	0952      	lsrs	r2, r2, #5
 800bc0e:	b292      	uxth	r2, r2
 800bc10:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc14:	fb02 f201 	mul.w	r2, r2, r1
 800bc18:	1a9b      	subs	r3, r3, r2
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <find_volume+0x2a8>
 800bc20:	230d      	movs	r3, #13
 800bc22:	e127      	b.n	800be74 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	3338      	adds	r3, #56	; 0x38
 800bc28:	3313      	adds	r3, #19
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd ff46 	bl	8009abc <ld_word>
 800bc30:	4603      	mov	r3, r0
 800bc32:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bc34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <find_volume+0x2cc>
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3c:	3338      	adds	r3, #56	; 0x38
 800bc3e:	3320      	adds	r3, #32
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fd ff53 	bl	8009aec <ld_dword>
 800bc46:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	3338      	adds	r3, #56	; 0x38
 800bc4c:	330e      	adds	r3, #14
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fd ff34 	bl	8009abc <ld_word>
 800bc54:	4603      	mov	r3, r0
 800bc56:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bc58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d104      	bne.n	800bc68 <find_volume+0x2ec>
 800bc5e:	230d      	movs	r3, #13
 800bc60:	e108      	b.n	800be74 <find_volume+0x4f8>
 800bc62:	bf00      	nop
 800bc64:	24001100 	.word	0x24001100

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bc68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc6c:	4413      	add	r3, r2
 800bc6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc70:	8911      	ldrh	r1, [r2, #8]
 800bc72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc74:	8992      	ldrh	r2, [r2, #12]
 800bc76:	0952      	lsrs	r2, r2, #5
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	fbb1 f2f2 	udiv	r2, r1, r2
 800bc7e:	b292      	uxth	r2, r2
 800bc80:	4413      	add	r3, r2
 800bc82:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bc84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d201      	bcs.n	800bc90 <find_volume+0x314>
 800bc8c:	230d      	movs	r3, #13
 800bc8e:	e0f1      	b.n	800be74 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc98:	8952      	ldrh	r2, [r2, #10]
 800bc9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <find_volume+0x32e>
 800bca6:	230d      	movs	r3, #13
 800bca8:	e0e4      	b.n	800be74 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d802      	bhi.n	800bcc0 <find_volume+0x344>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d802      	bhi.n	800bcd0 <find_volume+0x354>
 800bcca:	2301      	movs	r3, #1
 800bccc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd2:	1c9a      	adds	r2, r3, #2
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcdc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bcde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce2:	441a      	add	r2, r3
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bce8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcec:	441a      	add	r2, r3
 800bcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bcf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d11e      	bne.n	800bd38 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	3338      	adds	r3, #56	; 0x38
 800bcfe:	332a      	adds	r3, #42	; 0x2a
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd fedb 	bl	8009abc <ld_word>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <find_volume+0x394>
 800bd0c:	230d      	movs	r3, #13
 800bd0e:	e0b1      	b.n	800be74 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd12:	891b      	ldrh	r3, [r3, #8]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d001      	beq.n	800bd1c <find_volume+0x3a0>
 800bd18:	230d      	movs	r3, #13
 800bd1a:	e0ab      	b.n	800be74 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	3338      	adds	r3, #56	; 0x38
 800bd20:	332c      	adds	r3, #44	; 0x2c
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fd fee2 	bl	8009aec <ld_dword>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	647b      	str	r3, [r7, #68]	; 0x44
 800bd36:	e01f      	b.n	800bd78 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	891b      	ldrh	r3, [r3, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <find_volume+0x3c8>
 800bd40:	230d      	movs	r3, #13
 800bd42:	e097      	b.n	800be74 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4a:	441a      	add	r2, r3
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bd50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d103      	bne.n	800bd60 <find_volume+0x3e4>
 800bd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5a:	69db      	ldr	r3, [r3, #28]
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	e00a      	b.n	800bd76 <find_volume+0x3fa>
 800bd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd62:	69da      	ldr	r2, [r3, #28]
 800bd64:	4613      	mov	r3, r2
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	4413      	add	r3, r2
 800bd6a:	085a      	lsrs	r2, r3, #1
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	69db      	ldr	r3, [r3, #28]
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bd76:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7a:	6a1a      	ldr	r2, [r3, #32]
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	899b      	ldrh	r3, [r3, #12]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd84:	440b      	add	r3, r1
 800bd86:	3b01      	subs	r3, #1
 800bd88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd8a:	8989      	ldrh	r1, [r1, #12]
 800bd8c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d201      	bcs.n	800bd98 <find_volume+0x41c>
 800bd94:	230d      	movs	r3, #13
 800bd96:	e06d      	b.n	800be74 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9e:	619a      	str	r2, [r3, #24]
 800bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdaa:	2280      	movs	r2, #128	; 0x80
 800bdac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bdae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d149      	bne.n	800be4a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	3338      	adds	r3, #56	; 0x38
 800bdba:	3330      	adds	r3, #48	; 0x30
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fd fe7d 	bl	8009abc <ld_word>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d140      	bne.n	800be4a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdca:	3301      	adds	r3, #1
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdd0:	f7fe f924 	bl	800a01c <move_window>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d137      	bne.n	800be4a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	2200      	movs	r2, #0
 800bdde:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	3338      	adds	r3, #56	; 0x38
 800bde4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fd fe67 	bl	8009abc <ld_word>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d127      	bne.n	800be4a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	3338      	adds	r3, #56	; 0x38
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fd fe74 	bl	8009aec <ld_dword>
 800be04:	4603      	mov	r3, r0
 800be06:	4a1d      	ldr	r2, [pc, #116]	; (800be7c <find_volume+0x500>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d11e      	bne.n	800be4a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	3338      	adds	r3, #56	; 0x38
 800be10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800be14:	4618      	mov	r0, r3
 800be16:	f7fd fe69 	bl	8009aec <ld_dword>
 800be1a:	4603      	mov	r3, r0
 800be1c:	4a18      	ldr	r2, [pc, #96]	; (800be80 <find_volume+0x504>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d113      	bne.n	800be4a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	3338      	adds	r3, #56	; 0x38
 800be26:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fd fe5e 	bl	8009aec <ld_dword>
 800be30:	4602      	mov	r2, r0
 800be32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be34:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be38:	3338      	adds	r3, #56	; 0x38
 800be3a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fd fe54 	bl	8009aec <ld_dword>
 800be44:	4602      	mov	r2, r0
 800be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be48:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800be4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800be50:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800be52:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <find_volume+0x508>)
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	b29a      	uxth	r2, r3
 800be5a:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <find_volume+0x508>)
 800be5c:	801a      	strh	r2, [r3, #0]
 800be5e:	4b09      	ldr	r3, [pc, #36]	; (800be84 <find_volume+0x508>)
 800be60:	881a      	ldrh	r2, [r3, #0]
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	4a07      	ldr	r2, [pc, #28]	; (800be88 <find_volume+0x50c>)
 800be6a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800be6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be6e:	f7fe f86d 	bl	8009f4c <clear_lock>
#endif
	return FR_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3758      	adds	r7, #88	; 0x58
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	41615252 	.word	0x41615252
 800be80:	61417272 	.word	0x61417272
 800be84:	24001104 	.word	0x24001104
 800be88:	24001128 	.word	0x24001128

0800be8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800be96:	2309      	movs	r3, #9
 800be98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01c      	beq.n	800beda <validate+0x4e>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d018      	beq.n	800beda <validate+0x4e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d013      	beq.n	800beda <validate+0x4e>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	889a      	ldrh	r2, [r3, #4]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	88db      	ldrh	r3, [r3, #6]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d10c      	bne.n	800beda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	785b      	ldrb	r3, [r3, #1]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fd fd5a 	bl	8009980 <disk_status>
 800becc:	4603      	mov	r3, r0
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <validate+0x4e>
			res = FR_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <validate+0x5a>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	e000      	b.n	800bee8 <validate+0x5c>
 800bee6:	2300      	movs	r3, #0
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	6013      	str	r3, [r2, #0]
	return res;
 800beec:	7bfb      	ldrb	r3, [r7, #15]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
	...

0800bef8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	4613      	mov	r3, r2
 800bf04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bf0a:	f107 0310 	add.w	r3, r7, #16
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fc9a 	bl	800b848 <get_ldnumber>
 800bf14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	da01      	bge.n	800bf20 <f_mount+0x28>
 800bf1c:	230b      	movs	r3, #11
 800bf1e:	e02b      	b.n	800bf78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bf20:	4a17      	ldr	r2, [pc, #92]	; (800bf80 <f_mount+0x88>)
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d005      	beq.n	800bf3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bf30:	69b8      	ldr	r0, [r7, #24]
 800bf32:	f7fe f80b 	bl	8009f4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	490d      	ldr	r1, [pc, #52]	; (800bf80 <f_mount+0x88>)
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <f_mount+0x66>
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d001      	beq.n	800bf62 <f_mount+0x6a>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e00a      	b.n	800bf78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bf62:	f107 010c 	add.w	r1, r7, #12
 800bf66:	f107 0308 	add.w	r3, r7, #8
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fd05 	bl	800b97c <find_volume>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	24001100 	.word	0x24001100

0800bf84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b09a      	sub	sp, #104	; 0x68
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <f_open+0x18>
 800bf98:	2309      	movs	r3, #9
 800bf9a:	e1bb      	b.n	800c314 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bf9c:	79fb      	ldrb	r3, [r7, #7]
 800bf9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bfa2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bfa4:	79fa      	ldrb	r2, [r7, #7]
 800bfa6:	f107 0114 	add.w	r1, r7, #20
 800bfaa:	f107 0308 	add.w	r3, r7, #8
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fce4 	bl	800b97c <find_volume>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bfba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f040 819f 	bne.w	800c302 <f_open+0x37e>
		dj.obj.fs = fs;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	f107 0318 	add.w	r3, r7, #24
 800bfce:	4611      	mov	r1, r2
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff fbc3 	bl	800b75c <follow_path>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bfdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d11a      	bne.n	800c01a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bfe4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bfe8:	b25b      	sxtb	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	da03      	bge.n	800bff6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bfee:	2306      	movs	r3, #6
 800bff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bff4:	e011      	b.n	800c01a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	f023 0301 	bic.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bf14      	ite	ne
 800c000:	2301      	movne	r3, #1
 800c002:	2300      	moveq	r3, #0
 800c004:	b2db      	uxtb	r3, r3
 800c006:	461a      	mov	r2, r3
 800c008:	f107 0318 	add.w	r3, r7, #24
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fd fe54 	bl	8009cbc <chk_lock>
 800c014:	4603      	mov	r3, r0
 800c016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	f003 031c 	and.w	r3, r3, #28
 800c020:	2b00      	cmp	r3, #0
 800c022:	d07f      	beq.n	800c124 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c024:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d017      	beq.n	800c05c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c02c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c030:	2b04      	cmp	r3, #4
 800c032:	d10e      	bne.n	800c052 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c034:	f7fd fe9e 	bl	8009d74 <enq_lock>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d006      	beq.n	800c04c <f_open+0xc8>
 800c03e:	f107 0318 	add.w	r3, r7, #24
 800c042:	4618      	mov	r0, r3
 800c044:	f7fe fffc 	bl	800b040 <dir_register>
 800c048:	4603      	mov	r3, r0
 800c04a:	e000      	b.n	800c04e <f_open+0xca>
 800c04c:	2312      	movs	r3, #18
 800c04e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c052:	79fb      	ldrb	r3, [r7, #7]
 800c054:	f043 0308 	orr.w	r3, r3, #8
 800c058:	71fb      	strb	r3, [r7, #7]
 800c05a:	e010      	b.n	800c07e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c05c:	7fbb      	ldrb	r3, [r7, #30]
 800c05e:	f003 0311 	and.w	r3, r3, #17
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <f_open+0xea>
					res = FR_DENIED;
 800c066:	2307      	movs	r3, #7
 800c068:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c06c:	e007      	b.n	800c07e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c06e:	79fb      	ldrb	r3, [r7, #7]
 800c070:	f003 0304 	and.w	r3, r3, #4
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <f_open+0xfa>
 800c078:	2308      	movs	r3, #8
 800c07a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c07e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c082:	2b00      	cmp	r3, #0
 800c084:	d168      	bne.n	800c158 <f_open+0x1d4>
 800c086:	79fb      	ldrb	r3, [r7, #7]
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d063      	beq.n	800c158 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c090:	f7fd fa38 	bl	8009504 <get_fattime>
 800c094:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	330e      	adds	r3, #14
 800c09a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fd fd63 	bl	8009b68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	3316      	adds	r3, #22
 800c0a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fd fd5d 	bl	8009b68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	330b      	adds	r3, #11
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fd35 	bl	800ab2c <ld_clust>
 800c0c2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fd4d 	bl	800ab6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	331c      	adds	r3, #28
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fd46 	bl	8009b68 <st_dword>
					fs->wflag = 1;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d037      	beq.n	800c158 <f_open+0x1d4>
						dw = fs->winsect;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ec:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c0ee:	f107 0318 	add.w	r3, r7, #24
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe fa3d 	bl	800a576 <remove_chain>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c106:	2b00      	cmp	r3, #0
 800c108:	d126      	bne.n	800c158 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fd ff84 	bl	800a01c <move_window>
 800c114:	4603      	mov	r3, r0
 800c116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c11e:	3a01      	subs	r2, #1
 800c120:	615a      	str	r2, [r3, #20]
 800c122:	e019      	b.n	800c158 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d115      	bne.n	800c158 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c12c:	7fbb      	ldrb	r3, [r7, #30]
 800c12e:	f003 0310 	and.w	r3, r3, #16
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <f_open+0x1ba>
					res = FR_NO_FILE;
 800c136:	2304      	movs	r3, #4
 800c138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c13c:	e00c      	b.n	800c158 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d007      	beq.n	800c158 <f_open+0x1d4>
 800c148:	7fbb      	ldrb	r3, [r7, #30]
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d002      	beq.n	800c158 <f_open+0x1d4>
						res = FR_DENIED;
 800c152:	2307      	movs	r3, #7
 800c154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c158:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d128      	bne.n	800c1b2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	f003 0308 	and.w	r3, r3, #8
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c170:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c17a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c180:	79fb      	ldrb	r3, [r7, #7]
 800c182:	f023 0301 	bic.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	bf14      	ite	ne
 800c18a:	2301      	movne	r3, #1
 800c18c:	2300      	moveq	r3, #0
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	f107 0318 	add.w	r3, r7, #24
 800c196:	4611      	mov	r1, r2
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fd fe0d 	bl	8009db8 <inc_lock>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <f_open+0x22e>
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c1b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f040 80a3 	bne.w	800c302 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fe fcb2 	bl	800ab2c <ld_clust>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	331c      	adds	r3, #28
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd fc8a 	bl	8009aec <ld_dword>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	88da      	ldrh	r2, [r3, #6]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	79fa      	ldrb	r2, [r7, #7]
 800c1f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3330      	adds	r3, #48	; 0x30
 800c20e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c212:	2100      	movs	r1, #0
 800c214:	4618      	mov	r0, r3
 800c216:	f7fd fcf4 	bl	8009c02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	f003 0320 	and.w	r3, r3, #32
 800c220:	2b00      	cmp	r3, #0
 800c222:	d06e      	beq.n	800c302 <f_open+0x37e>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d06a      	beq.n	800c302 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	68da      	ldr	r2, [r3, #12]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	895b      	ldrh	r3, [r3, #10]
 800c238:	461a      	mov	r2, r3
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	899b      	ldrh	r3, [r3, #12]
 800c23e:	fb03 f302 	mul.w	r3, r3, r2
 800c242:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c250:	e016      	b.n	800c280 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c256:	4618      	mov	r0, r3
 800c258:	f7fd ff9d 	bl	800a196 <get_fat>
 800c25c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c25e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c260:	2b01      	cmp	r3, #1
 800c262:	d802      	bhi.n	800c26a <f_open+0x2e6>
 800c264:	2302      	movs	r3, #2
 800c266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c26a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c270:	d102      	bne.n	800c278 <f_open+0x2f4>
 800c272:	2301      	movs	r3, #1
 800c274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c284:	2b00      	cmp	r3, #0
 800c286:	d103      	bne.n	800c290 <f_open+0x30c>
 800c288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d8e0      	bhi.n	800c252 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c294:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d131      	bne.n	800c302 <f_open+0x37e>
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	899b      	ldrh	r3, [r3, #12]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2aa:	fb02 f201 	mul.w	r2, r2, r1
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d026      	beq.n	800c302 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fd ff4d 	bl	800a158 <clust2sect>
 800c2be:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d103      	bne.n	800c2ce <f_open+0x34a>
						res = FR_INT_ERR;
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c2cc:	e019      	b.n	800c302 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	899b      	ldrh	r3, [r3, #12]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2dc:	441a      	add	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	7858      	ldrb	r0, [r3, #1]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6a1a      	ldr	r2, [r3, #32]
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	f7fd fb85 	bl	8009a00 <disk_read>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <f_open+0x37e>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c302:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <f_open+0x38c>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c310:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c314:	4618      	mov	r0, r3
 800c316:	3768      	adds	r7, #104	; 0x68
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08c      	sub	sp, #48	; 0x30
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2200      	movs	r2, #0
 800c332:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f107 0210 	add.w	r2, r7, #16
 800c33a:	4611      	mov	r1, r2
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff fda5 	bl	800be8c <validate>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d107      	bne.n	800c360 <f_write+0x44>
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	7d5b      	ldrb	r3, [r3, #21]
 800c354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <f_write+0x4a>
 800c360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c364:	e16a      	b.n	800c63c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	7d1b      	ldrb	r3, [r3, #20]
 800c36a:	f003 0302 	and.w	r3, r3, #2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <f_write+0x5a>
 800c372:	2307      	movs	r3, #7
 800c374:	e162      	b.n	800c63c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	699a      	ldr	r2, [r3, #24]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	441a      	add	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	429a      	cmp	r2, r3
 800c384:	f080 814c 	bcs.w	800c620 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	43db      	mvns	r3, r3
 800c38e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c390:	e146      	b.n	800c620 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	8992      	ldrh	r2, [r2, #12]
 800c39a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c39e:	fb02 f201 	mul.w	r2, r2, r1
 800c3a2:	1a9b      	subs	r3, r3, r2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f040 80f1 	bne.w	800c58c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	8992      	ldrh	r2, [r2, #12]
 800c3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	8952      	ldrh	r2, [r2, #10]
 800c3ba:	3a01      	subs	r2, #1
 800c3bc:	4013      	ands	r3, r2
 800c3be:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d143      	bne.n	800c44e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10c      	bne.n	800c3e8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d11a      	bne.n	800c410 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe f92e 	bl	800a640 <create_chain>
 800c3e4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3e6:	e013      	b.n	800c410 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7fe f9ba 	bl	800a770 <clmt_clust>
 800c3fc:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3fe:	e007      	b.n	800c410 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	69db      	ldr	r3, [r3, #28]
 800c406:	4619      	mov	r1, r3
 800c408:	4610      	mov	r0, r2
 800c40a:	f7fe f919 	bl	800a640 <create_chain>
 800c40e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	2b00      	cmp	r3, #0
 800c414:	f000 8109 	beq.w	800c62a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d104      	bne.n	800c428 <f_write+0x10c>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2202      	movs	r2, #2
 800c422:	755a      	strb	r2, [r3, #21]
 800c424:	2302      	movs	r3, #2
 800c426:	e109      	b.n	800c63c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42e:	d104      	bne.n	800c43a <f_write+0x11e>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2201      	movs	r2, #1
 800c434:	755a      	strb	r2, [r3, #21]
 800c436:	2301      	movs	r3, #1
 800c438:	e100      	b.n	800c63c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c43e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d102      	bne.n	800c44e <f_write+0x132>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	7d1b      	ldrb	r3, [r3, #20]
 800c452:	b25b      	sxtb	r3, r3
 800c454:	2b00      	cmp	r3, #0
 800c456:	da18      	bge.n	800c48a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	7858      	ldrb	r0, [r3, #1]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6a1a      	ldr	r2, [r3, #32]
 800c466:	2301      	movs	r3, #1
 800c468:	f7fd faea 	bl	8009a40 <disk_write>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d004      	beq.n	800c47c <f_write+0x160>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	755a      	strb	r2, [r3, #21]
 800c478:	2301      	movs	r3, #1
 800c47a:	e0df      	b.n	800c63c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	7d1b      	ldrb	r3, [r3, #20]
 800c480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c484:	b2da      	uxtb	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	4619      	mov	r1, r3
 800c492:	4610      	mov	r0, r2
 800c494:	f7fd fe60 	bl	800a158 <clust2sect>
 800c498:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d104      	bne.n	800c4aa <f_write+0x18e>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	755a      	strb	r2, [r3, #21]
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	e0c8      	b.n	800c63c <f_write+0x320>
			sect += csect;
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	899b      	ldrh	r3, [r3, #12]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d043      	beq.n	800c54e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4c6:	69ba      	ldr	r2, [r7, #24]
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	8952      	ldrh	r2, [r2, #10]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d905      	bls.n	800c4e0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	895b      	ldrh	r3, [r3, #10]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	7858      	ldrb	r0, [r3, #1]
 800c4e4:	6a3b      	ldr	r3, [r7, #32]
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	69f9      	ldr	r1, [r7, #28]
 800c4ea:	f7fd faa9 	bl	8009a40 <disk_write>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <f_write+0x1e2>
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	755a      	strb	r2, [r3, #21]
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e09e      	b.n	800c63c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a1a      	ldr	r2, [r3, #32]
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	6a3a      	ldr	r2, [r7, #32]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d918      	bls.n	800c53e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	8992      	ldrh	r2, [r2, #12]
 800c51e:	fb02 f303 	mul.w	r3, r2, r3
 800c522:	69fa      	ldr	r2, [r7, #28]
 800c524:	18d1      	adds	r1, r2, r3
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	899b      	ldrh	r3, [r3, #12]
 800c52a:	461a      	mov	r2, r3
 800c52c:	f7fd fb48 	bl	8009bc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	7d1b      	ldrb	r3, [r3, #20]
 800c534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	899b      	ldrh	r3, [r3, #12]
 800c542:	461a      	mov	r2, r3
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	fb02 f303 	mul.w	r3, r2, r3
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c54c:	e04b      	b.n	800c5e6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	429a      	cmp	r2, r3
 800c556:	d016      	beq.n	800c586 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699a      	ldr	r2, [r3, #24]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c560:	429a      	cmp	r2, r3
 800c562:	d210      	bcs.n	800c586 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	7858      	ldrb	r0, [r3, #1]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c56e:	2301      	movs	r3, #1
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	f7fd fa45 	bl	8009a00 <disk_read>
 800c576:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2201      	movs	r2, #1
 800c580:	755a      	strb	r2, [r3, #21]
 800c582:	2301      	movs	r3, #1
 800c584:	e05a      	b.n	800c63c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	899b      	ldrh	r3, [r3, #12]
 800c590:	4618      	mov	r0, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	8992      	ldrh	r2, [r2, #12]
 800c59a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c59e:	fb02 f201 	mul.w	r2, r2, r1
 800c5a2:	1a9b      	subs	r3, r3, r2
 800c5a4:	1ac3      	subs	r3, r0, r3
 800c5a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d901      	bls.n	800c5b4 <f_write+0x298>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	8992      	ldrh	r2, [r2, #12]
 800c5c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5c6:	fb02 f200 	mul.w	r2, r2, r0
 800c5ca:	1a9b      	subs	r3, r3, r2
 800c5cc:	440b      	add	r3, r1
 800c5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5d0:	69f9      	ldr	r1, [r7, #28]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fd faf4 	bl	8009bc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	7d1b      	ldrb	r3, [r3, #20]
 800c5dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	4413      	add	r3, r2
 800c5ec:	61fb      	str	r3, [r7, #28]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	699a      	ldr	r2, [r3, #24]
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	441a      	add	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	619a      	str	r2, [r3, #24]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	429a      	cmp	r2, r3
 800c604:	bf38      	it	cc
 800c606:	461a      	movcc	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	60da      	str	r2, [r3, #12]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	441a      	add	r2, r3
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	f47f aeb5 	bne.w	800c392 <f_write+0x76>
 800c628:	e000      	b.n	800c62c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c62a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c634:	b2da      	uxtb	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3730      	adds	r7, #48	; 0x30
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f107 0208 	add.w	r2, r7, #8
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff fc19 	bl	800be8c <validate>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d168      	bne.n	800c736 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7d1b      	ldrb	r3, [r3, #20]
 800c668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d062      	beq.n	800c736 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	7d1b      	ldrb	r3, [r3, #20]
 800c674:	b25b      	sxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	da15      	bge.n	800c6a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	7858      	ldrb	r0, [r3, #1]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a1a      	ldr	r2, [r3, #32]
 800c688:	2301      	movs	r3, #1
 800c68a:	f7fd f9d9 	bl	8009a40 <disk_write>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <f_sync+0x54>
 800c694:	2301      	movs	r3, #1
 800c696:	e04f      	b.n	800c738 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7d1b      	ldrb	r3, [r3, #20]
 800c69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c6a6:	f7fc ff2d 	bl	8009504 <get_fattime>
 800c6aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	f7fd fcb1 	bl	800a01c <move_window>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d138      	bne.n	800c736 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	330b      	adds	r3, #11
 800c6ce:	781a      	ldrb	r2, [r3, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	330b      	adds	r3, #11
 800c6d4:	f042 0220 	orr.w	r2, r2, #32
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6818      	ldr	r0, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	68f9      	ldr	r1, [r7, #12]
 800c6e8:	f7fe fa3f 	bl	800ab6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f103 021c 	add.w	r2, r3, #28
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f7fd fa35 	bl	8009b68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3316      	adds	r3, #22
 800c702:	6939      	ldr	r1, [r7, #16]
 800c704:	4618      	mov	r0, r3
 800c706:	f7fd fa2f 	bl	8009b68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3312      	adds	r3, #18
 800c70e:	2100      	movs	r1, #0
 800c710:	4618      	mov	r0, r3
 800c712:	f7fd fa0e 	bl	8009b32 <st_word>
					fs->wflag = 1;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2201      	movs	r2, #1
 800c71a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fd fcaa 	bl	800a078 <sync_fs>
 800c724:	4603      	mov	r3, r0
 800c726:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	7d1b      	ldrb	r3, [r3, #20]
 800c72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c730:	b2da      	uxtb	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c736:	7dfb      	ldrb	r3, [r7, #23]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7ff ff7b 	bl	800c644 <f_sync>
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c752:	7bfb      	ldrb	r3, [r7, #15]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d118      	bne.n	800c78a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f107 0208 	add.w	r2, r7, #8
 800c75e:	4611      	mov	r1, r2
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff fb93 	bl	800be8c <validate>
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10c      	bne.n	800c78a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	4618      	mov	r0, r3
 800c776:	f7fd fbad 	bl	8009ed4 <dec_lock>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b090      	sub	sp, #64	; 0x40
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f107 0208 	add.w	r2, r7, #8
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fb70 	bl	800be8c <validate>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c7b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d103      	bne.n	800c7c2 <f_lseek+0x2e>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7d5b      	ldrb	r3, [r3, #21]
 800c7be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c7c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <f_lseek+0x3c>
 800c7ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c7ce:	e201      	b.n	800cbd4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 80d9 	beq.w	800c98c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e0:	d15a      	bne.n	800c898 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	1d1a      	adds	r2, r3, #4
 800c7ec:	627a      	str	r2, [r7, #36]	; 0x24
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	617b      	str	r3, [r7, #20]
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d03a      	beq.n	800c878 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	613b      	str	r3, [r7, #16]
 800c806:	2300      	movs	r3, #0
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	3302      	adds	r3, #2
 800c80e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	3301      	adds	r3, #1
 800c818:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fd fcb9 	bl	800a196 <get_fat>
 800c824:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d804      	bhi.n	800c836 <f_lseek+0xa2>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2202      	movs	r2, #2
 800c830:	755a      	strb	r2, [r3, #21]
 800c832:	2302      	movs	r3, #2
 800c834:	e1ce      	b.n	800cbd4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83c:	d104      	bne.n	800c848 <f_lseek+0xb4>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	755a      	strb	r2, [r3, #21]
 800c844:	2301      	movs	r3, #1
 800c846:	e1c5      	b.n	800cbd4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3301      	adds	r3, #1
 800c84c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c84e:	429a      	cmp	r2, r3
 800c850:	d0de      	beq.n	800c810 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	429a      	cmp	r2, r3
 800c858:	d809      	bhi.n	800c86e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	1d1a      	adds	r2, r3, #4
 800c85e:	627a      	str	r2, [r7, #36]	; 0x24
 800c860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	1d1a      	adds	r2, r3, #4
 800c868:	627a      	str	r2, [r7, #36]	; 0x24
 800c86a:	693a      	ldr	r2, [r7, #16]
 800c86c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c874:	429a      	cmp	r2, r3
 800c876:	d3c4      	bcc.n	800c802 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c87e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	429a      	cmp	r2, r3
 800c886:	d803      	bhi.n	800c890 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	2200      	movs	r2, #0
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e19f      	b.n	800cbd0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c890:	2311      	movs	r3, #17
 800c892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c896:	e19b      	b.n	800cbd0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d902      	bls.n	800c8a8 <f_lseek+0x114>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 818d 	beq.w	800cbd0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7fd ff57 	bl	800a770 <clmt_clust>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	69db      	ldr	r3, [r3, #28]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	f7fd fc41 	bl	800a158 <clust2sect>
 800c8d6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d104      	bne.n	800c8e8 <f_lseek+0x154>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	755a      	strb	r2, [r3, #21]
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e175      	b.n	800cbd4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	8992      	ldrh	r2, [r2, #12]
 800c8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	8952      	ldrh	r2, [r2, #10]
 800c8f8:	3a01      	subs	r2, #1
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	69ba      	ldr	r2, [r7, #24]
 800c8fe:	4413      	add	r3, r2
 800c900:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	8992      	ldrh	r2, [r2, #12]
 800c90a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c90e:	fb02 f201 	mul.w	r2, r2, r1
 800c912:	1a9b      	subs	r3, r3, r2
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 815b 	beq.w	800cbd0 <f_lseek+0x43c>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	429a      	cmp	r2, r3
 800c922:	f000 8155 	beq.w	800cbd0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	7d1b      	ldrb	r3, [r3, #20]
 800c92a:	b25b      	sxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	da18      	bge.n	800c962 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	7858      	ldrb	r0, [r3, #1]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1a      	ldr	r2, [r3, #32]
 800c93e:	2301      	movs	r3, #1
 800c940:	f7fd f87e 	bl	8009a40 <disk_write>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d004      	beq.n	800c954 <f_lseek+0x1c0>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	755a      	strb	r2, [r3, #21]
 800c950:	2301      	movs	r3, #1
 800c952:	e13f      	b.n	800cbd4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	7d1b      	ldrb	r3, [r3, #20]
 800c958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	7858      	ldrb	r0, [r3, #1]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c96c:	2301      	movs	r3, #1
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	f7fd f846 	bl	8009a00 <disk_read>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d004      	beq.n	800c984 <f_lseek+0x1f0>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	755a      	strb	r2, [r3, #21]
 800c980:	2301      	movs	r3, #1
 800c982:	e127      	b.n	800cbd4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	69ba      	ldr	r2, [r7, #24]
 800c988:	621a      	str	r2, [r3, #32]
 800c98a:	e121      	b.n	800cbd0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	683a      	ldr	r2, [r7, #0]
 800c992:	429a      	cmp	r2, r3
 800c994:	d908      	bls.n	800c9a8 <f_lseek+0x214>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7d1b      	ldrb	r3, [r3, #20]
 800c99a:	f003 0302 	and.w	r3, r3, #2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9b6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80b5 	beq.w	800cb2a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	895b      	ldrh	r3, [r3, #10]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	899b      	ldrh	r3, [r3, #12]
 800c9ca:	fb03 f302 	mul.w	r3, r3, r2
 800c9ce:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d01b      	beq.n	800ca0e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	1e5a      	subs	r2, r3, #1
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	1e59      	subs	r1, r3, #1
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d30f      	bcc.n	800ca0e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	1e5a      	subs	r2, r3, #1
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	425b      	negs	r3, r3
 800c9f6:	401a      	ands	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca0c:	e022      	b.n	800ca54 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d119      	bne.n	800ca4e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fd fe0e 	bl	800a640 <create_chain>
 800ca24:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d104      	bne.n	800ca36 <f_lseek+0x2a2>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	755a      	strb	r2, [r3, #21]
 800ca32:	2302      	movs	r3, #2
 800ca34:	e0ce      	b.n	800cbd4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3c:	d104      	bne.n	800ca48 <f_lseek+0x2b4>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	755a      	strb	r2, [r3, #21]
 800ca44:	2301      	movs	r3, #1
 800ca46:	e0c5      	b.n	800cbd4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca4c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca52:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d067      	beq.n	800cb2a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ca5a:	e03a      	b.n	800cad2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	699a      	ldr	r2, [r3, #24]
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	441a      	add	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7d1b      	ldrb	r3, [r3, #20]
 800ca74:	f003 0302 	and.w	r3, r3, #2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00b      	beq.n	800ca94 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fd fddd 	bl	800a640 <create_chain>
 800ca86:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d108      	bne.n	800caa0 <f_lseek+0x30c>
							ofs = 0; break;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	603b      	str	r3, [r7, #0]
 800ca92:	e022      	b.n	800cada <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fd fb7c 	bl	800a196 <get_fat>
 800ca9e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d104      	bne.n	800cab2 <f_lseek+0x31e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	755a      	strb	r2, [r3, #21]
 800caae:	2301      	movs	r3, #1
 800cab0:	e090      	b.n	800cbd4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d904      	bls.n	800cac2 <f_lseek+0x32e>
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	69db      	ldr	r3, [r3, #28]
 800cabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d304      	bcc.n	800cacc <f_lseek+0x338>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2202      	movs	r2, #2
 800cac6:	755a      	strb	r2, [r3, #21]
 800cac8:	2302      	movs	r3, #2
 800caca:	e083      	b.n	800cbd4 <f_lseek+0x440>
					fp->clust = clst;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cad0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cad2:	683a      	ldr	r2, [r7, #0]
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d8c0      	bhi.n	800ca5c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	699a      	ldr	r2, [r3, #24]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	441a      	add	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	899b      	ldrh	r3, [r3, #12]
 800caea:	461a      	mov	r2, r3
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	fbb3 f1f2 	udiv	r1, r3, r2
 800caf2:	fb02 f201 	mul.w	r2, r2, r1
 800caf6:	1a9b      	subs	r3, r3, r2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d016      	beq.n	800cb2a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fd fb29 	bl	800a158 <clust2sect>
 800cb06:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d104      	bne.n	800cb18 <f_lseek+0x384>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2202      	movs	r2, #2
 800cb12:	755a      	strb	r2, [r3, #21]
 800cb14:	2302      	movs	r3, #2
 800cb16:	e05d      	b.n	800cbd4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	899b      	ldrh	r3, [r3, #12]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb26:	4413      	add	r3, r2
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699a      	ldr	r2, [r3, #24]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d90a      	bls.n	800cb4c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	699a      	ldr	r2, [r3, #24]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	7d1b      	ldrb	r3, [r3, #20]
 800cb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	699b      	ldr	r3, [r3, #24]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	8992      	ldrh	r2, [r2, #12]
 800cb54:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb58:	fb02 f201 	mul.w	r2, r2, r1
 800cb5c:	1a9b      	subs	r3, r3, r2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d036      	beq.n	800cbd0 <f_lseek+0x43c>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d031      	beq.n	800cbd0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	7d1b      	ldrb	r3, [r3, #20]
 800cb70:	b25b      	sxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	da18      	bge.n	800cba8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	7858      	ldrb	r0, [r3, #1]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a1a      	ldr	r2, [r3, #32]
 800cb84:	2301      	movs	r3, #1
 800cb86:	f7fc ff5b 	bl	8009a40 <disk_write>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d004      	beq.n	800cb9a <f_lseek+0x406>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	755a      	strb	r2, [r3, #21]
 800cb96:	2301      	movs	r3, #1
 800cb98:	e01c      	b.n	800cbd4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	7d1b      	ldrb	r3, [r3, #20]
 800cb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	7858      	ldrb	r0, [r3, #1]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbb6:	f7fc ff23 	bl	8009a00 <disk_read>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d004      	beq.n	800cbca <f_lseek+0x436>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	755a      	strb	r2, [r3, #21]
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e004      	b.n	800cbd4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbce:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cbd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3740      	adds	r7, #64	; 0x40
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b090      	sub	sp, #64	; 0x40
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800cbe6:	f107 0108 	add.w	r1, r7, #8
 800cbea:	1d3b      	adds	r3, r7, #4
 800cbec:	2200      	movs	r2, #0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe fec4 	bl	800b97c <find_volume>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800cbfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d11f      	bne.n	800cc42 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	f107 0308 	add.w	r3, r7, #8
 800cc08:	4611      	mov	r1, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe fda6 	bl	800b75c <follow_path>
 800cc10:	4603      	mov	r3, r0
 800cc12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800cc16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d111      	bne.n	800cc42 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800cc1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cc22:	b25b      	sxtb	r3, r3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	da03      	bge.n	800cc30 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800cc28:	2306      	movs	r3, #6
 800cc2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cc2e:	e008      	b.n	800cc42 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d005      	beq.n	800cc42 <f_stat+0x66>
 800cc36:	f107 0308 	add.w	r3, r7, #8
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fe faf7 	bl	800b230 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800cc42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3740      	adds	r7, #64	; 0x40
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b087      	sub	sp, #28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc66:	4b1f      	ldr	r3, [pc, #124]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc68:	7a5b      	ldrb	r3, [r3, #9]
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d131      	bne.n	800ccd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc70:	4b1c      	ldr	r3, [pc, #112]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc72:	7a5b      	ldrb	r3, [r3, #9]
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	461a      	mov	r2, r3
 800cc78:	4b1a      	ldr	r3, [pc, #104]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc7e:	4b19      	ldr	r3, [pc, #100]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc80:	7a5b      	ldrb	r3, [r3, #9]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	4a17      	ldr	r2, [pc, #92]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4413      	add	r3, r2
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc8e:	4b15      	ldr	r3, [pc, #84]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc90:	7a5b      	ldrb	r3, [r3, #9]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	461a      	mov	r2, r3
 800cc96:	4b13      	ldr	r3, [pc, #76]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cc98:	4413      	add	r3, r2
 800cc9a:	79fa      	ldrb	r2, [r7, #7]
 800cc9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc9e:	4b11      	ldr	r3, [pc, #68]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800cca0:	7a5b      	ldrb	r3, [r3, #9]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	b2d1      	uxtb	r1, r2
 800cca8:	4a0e      	ldr	r2, [pc, #56]	; (800cce4 <FATFS_LinkDriverEx+0x94>)
 800ccaa:	7251      	strb	r1, [r2, #9]
 800ccac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ccae:	7dbb      	ldrb	r3, [r7, #22]
 800ccb0:	3330      	adds	r3, #48	; 0x30
 800ccb2:	b2da      	uxtb	r2, r3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	223a      	movs	r2, #58	; 0x3a
 800ccbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	222f      	movs	r2, #47	; 0x2f
 800ccc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	3303      	adds	r3, #3
 800cccc:	2200      	movs	r2, #0
 800ccce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	24001328 	.word	0x24001328

0800cce8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff ffaa 	bl	800cc50 <FATFS_LinkDriverEx>
 800ccfc:	4603      	mov	r3, r0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	6039      	str	r1, [r7, #0]
 800cd12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cd14:	88fb      	ldrh	r3, [r7, #6]
 800cd16:	2b7f      	cmp	r3, #127	; 0x7f
 800cd18:	d802      	bhi.n	800cd20 <ff_convert+0x18>
		c = chr;
 800cd1a:	88fb      	ldrh	r3, [r7, #6]
 800cd1c:	81fb      	strh	r3, [r7, #14]
 800cd1e:	e025      	b.n	800cd6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00b      	beq.n	800cd3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cd26:	88fb      	ldrh	r3, [r7, #6]
 800cd28:	2bff      	cmp	r3, #255	; 0xff
 800cd2a:	d805      	bhi.n	800cd38 <ff_convert+0x30>
 800cd2c:	88fb      	ldrh	r3, [r7, #6]
 800cd2e:	3b80      	subs	r3, #128	; 0x80
 800cd30:	4a12      	ldr	r2, [pc, #72]	; (800cd7c <ff_convert+0x74>)
 800cd32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd36:	e000      	b.n	800cd3a <ff_convert+0x32>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	81fb      	strh	r3, [r7, #14]
 800cd3c:	e016      	b.n	800cd6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cd3e:	2300      	movs	r3, #0
 800cd40:	81fb      	strh	r3, [r7, #14]
 800cd42:	e009      	b.n	800cd58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cd44:	89fb      	ldrh	r3, [r7, #14]
 800cd46:	4a0d      	ldr	r2, [pc, #52]	; (800cd7c <ff_convert+0x74>)
 800cd48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd4c:	88fa      	ldrh	r2, [r7, #6]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d006      	beq.n	800cd60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cd52:	89fb      	ldrh	r3, [r7, #14]
 800cd54:	3301      	adds	r3, #1
 800cd56:	81fb      	strh	r3, [r7, #14]
 800cd58:	89fb      	ldrh	r3, [r7, #14]
 800cd5a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd5c:	d9f2      	bls.n	800cd44 <ff_convert+0x3c>
 800cd5e:	e000      	b.n	800cd62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cd60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cd62:	89fb      	ldrh	r3, [r7, #14]
 800cd64:	3380      	adds	r3, #128	; 0x80
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd6c:	89fb      	ldrh	r3, [r7, #14]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	0800d914 	.word	0x0800d914

0800cd80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b087      	sub	sp, #28
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd8a:	88fb      	ldrh	r3, [r7, #6]
 800cd8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd90:	d201      	bcs.n	800cd96 <ff_wtoupper+0x16>
 800cd92:	4b3e      	ldr	r3, [pc, #248]	; (800ce8c <ff_wtoupper+0x10c>)
 800cd94:	e000      	b.n	800cd98 <ff_wtoupper+0x18>
 800cd96:	4b3e      	ldr	r3, [pc, #248]	; (800ce90 <ff_wtoupper+0x110>)
 800cd98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	1c9a      	adds	r2, r3, #2
 800cd9e:	617a      	str	r2, [r7, #20]
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cda4:	8a7b      	ldrh	r3, [r7, #18]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d068      	beq.n	800ce7c <ff_wtoupper+0xfc>
 800cdaa:	88fa      	ldrh	r2, [r7, #6]
 800cdac:	8a7b      	ldrh	r3, [r7, #18]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d364      	bcc.n	800ce7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	1c9a      	adds	r2, r3, #2
 800cdb6:	617a      	str	r2, [r7, #20]
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	823b      	strh	r3, [r7, #16]
 800cdbc:	8a3b      	ldrh	r3, [r7, #16]
 800cdbe:	0a1b      	lsrs	r3, r3, #8
 800cdc0:	81fb      	strh	r3, [r7, #14]
 800cdc2:	8a3b      	ldrh	r3, [r7, #16]
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cdc8:	88fa      	ldrh	r2, [r7, #6]
 800cdca:	8a79      	ldrh	r1, [r7, #18]
 800cdcc:	8a3b      	ldrh	r3, [r7, #16]
 800cdce:	440b      	add	r3, r1
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	da49      	bge.n	800ce68 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cdd4:	89fb      	ldrh	r3, [r7, #14]
 800cdd6:	2b08      	cmp	r3, #8
 800cdd8:	d84f      	bhi.n	800ce7a <ff_wtoupper+0xfa>
 800cdda:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <ff_wtoupper+0x60>)
 800cddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde0:	0800ce05 	.word	0x0800ce05
 800cde4:	0800ce17 	.word	0x0800ce17
 800cde8:	0800ce2d 	.word	0x0800ce2d
 800cdec:	0800ce35 	.word	0x0800ce35
 800cdf0:	0800ce3d 	.word	0x0800ce3d
 800cdf4:	0800ce45 	.word	0x0800ce45
 800cdf8:	0800ce4d 	.word	0x0800ce4d
 800cdfc:	0800ce55 	.word	0x0800ce55
 800ce00:	0800ce5d 	.word	0x0800ce5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ce04:	88fa      	ldrh	r2, [r7, #6]
 800ce06:	8a7b      	ldrh	r3, [r7, #18]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	697a      	ldr	r2, [r7, #20]
 800ce0e:	4413      	add	r3, r2
 800ce10:	881b      	ldrh	r3, [r3, #0]
 800ce12:	80fb      	strh	r3, [r7, #6]
 800ce14:	e027      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ce16:	88fa      	ldrh	r2, [r7, #6]
 800ce18:	8a7b      	ldrh	r3, [r7, #18]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	88fa      	ldrh	r2, [r7, #6]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	80fb      	strh	r3, [r7, #6]
 800ce2a:	e01c      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ce2c:	88fb      	ldrh	r3, [r7, #6]
 800ce2e:	3b10      	subs	r3, #16
 800ce30:	80fb      	strh	r3, [r7, #6]
 800ce32:	e018      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	3b20      	subs	r3, #32
 800ce38:	80fb      	strh	r3, [r7, #6]
 800ce3a:	e014      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ce3c:	88fb      	ldrh	r3, [r7, #6]
 800ce3e:	3b30      	subs	r3, #48	; 0x30
 800ce40:	80fb      	strh	r3, [r7, #6]
 800ce42:	e010      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ce44:	88fb      	ldrh	r3, [r7, #6]
 800ce46:	3b1a      	subs	r3, #26
 800ce48:	80fb      	strh	r3, [r7, #6]
 800ce4a:	e00c      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ce4c:	88fb      	ldrh	r3, [r7, #6]
 800ce4e:	3308      	adds	r3, #8
 800ce50:	80fb      	strh	r3, [r7, #6]
 800ce52:	e008      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ce54:	88fb      	ldrh	r3, [r7, #6]
 800ce56:	3b50      	subs	r3, #80	; 0x50
 800ce58:	80fb      	strh	r3, [r7, #6]
 800ce5a:	e004      	b.n	800ce66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ce62:	80fb      	strh	r3, [r7, #6]
 800ce64:	bf00      	nop
			}
			break;
 800ce66:	e008      	b.n	800ce7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce68:	89fb      	ldrh	r3, [r7, #14]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d195      	bne.n	800cd9a <ff_wtoupper+0x1a>
 800ce6e:	8a3b      	ldrh	r3, [r7, #16]
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	4413      	add	r3, r2
 800ce76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce78:	e78f      	b.n	800cd9a <ff_wtoupper+0x1a>
			break;
 800ce7a:	bf00      	nop
	}

	return chr;
 800ce7c:	88fb      	ldrh	r3, [r7, #6]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	0800da14 	.word	0x0800da14
 800ce90:	0800dc08 	.word	0x0800dc08

0800ce94 <__errno>:
 800ce94:	4b01      	ldr	r3, [pc, #4]	; (800ce9c <__errno+0x8>)
 800ce96:	6818      	ldr	r0, [r3, #0]
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	24000010 	.word	0x24000010

0800cea0 <__libc_init_array>:
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	4d0d      	ldr	r5, [pc, #52]	; (800ced8 <__libc_init_array+0x38>)
 800cea4:	4c0d      	ldr	r4, [pc, #52]	; (800cedc <__libc_init_array+0x3c>)
 800cea6:	1b64      	subs	r4, r4, r5
 800cea8:	10a4      	asrs	r4, r4, #2
 800ceaa:	2600      	movs	r6, #0
 800ceac:	42a6      	cmp	r6, r4
 800ceae:	d109      	bne.n	800cec4 <__libc_init_array+0x24>
 800ceb0:	4d0b      	ldr	r5, [pc, #44]	; (800cee0 <__libc_init_array+0x40>)
 800ceb2:	4c0c      	ldr	r4, [pc, #48]	; (800cee4 <__libc_init_array+0x44>)
 800ceb4:	f000 fc4e 	bl	800d754 <_init>
 800ceb8:	1b64      	subs	r4, r4, r5
 800ceba:	10a4      	asrs	r4, r4, #2
 800cebc:	2600      	movs	r6, #0
 800cebe:	42a6      	cmp	r6, r4
 800cec0:	d105      	bne.n	800cece <__libc_init_array+0x2e>
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec8:	4798      	blx	r3
 800ceca:	3601      	adds	r6, #1
 800cecc:	e7ee      	b.n	800ceac <__libc_init_array+0xc>
 800cece:	f855 3b04 	ldr.w	r3, [r5], #4
 800ced2:	4798      	blx	r3
 800ced4:	3601      	adds	r6, #1
 800ced6:	e7f2      	b.n	800cebe <__libc_init_array+0x1e>
 800ced8:	0800dd00 	.word	0x0800dd00
 800cedc:	0800dd00 	.word	0x0800dd00
 800cee0:	0800dd00 	.word	0x0800dd00
 800cee4:	0800dd04 	.word	0x0800dd04

0800cee8 <memcpy>:
 800cee8:	440a      	add	r2, r1
 800ceea:	4291      	cmp	r1, r2
 800ceec:	f100 33ff 	add.w	r3, r0, #4294967295
 800cef0:	d100      	bne.n	800cef4 <memcpy+0xc>
 800cef2:	4770      	bx	lr
 800cef4:	b510      	push	{r4, lr}
 800cef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cefa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cefe:	4291      	cmp	r1, r2
 800cf00:	d1f9      	bne.n	800cef6 <memcpy+0xe>
 800cf02:	bd10      	pop	{r4, pc}

0800cf04 <memset>:
 800cf04:	4402      	add	r2, r0
 800cf06:	4603      	mov	r3, r0
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d100      	bne.n	800cf0e <memset+0xa>
 800cf0c:	4770      	bx	lr
 800cf0e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf12:	e7f9      	b.n	800cf08 <memset+0x4>

0800cf14 <siprintf>:
 800cf14:	b40e      	push	{r1, r2, r3}
 800cf16:	b500      	push	{lr}
 800cf18:	b09c      	sub	sp, #112	; 0x70
 800cf1a:	ab1d      	add	r3, sp, #116	; 0x74
 800cf1c:	9002      	str	r0, [sp, #8]
 800cf1e:	9006      	str	r0, [sp, #24]
 800cf20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf24:	4809      	ldr	r0, [pc, #36]	; (800cf4c <siprintf+0x38>)
 800cf26:	9107      	str	r1, [sp, #28]
 800cf28:	9104      	str	r1, [sp, #16]
 800cf2a:	4909      	ldr	r1, [pc, #36]	; (800cf50 <siprintf+0x3c>)
 800cf2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf30:	9105      	str	r1, [sp, #20]
 800cf32:	6800      	ldr	r0, [r0, #0]
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	a902      	add	r1, sp, #8
 800cf38:	f000 f868 	bl	800d00c <_svfiprintf_r>
 800cf3c:	9b02      	ldr	r3, [sp, #8]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	701a      	strb	r2, [r3, #0]
 800cf42:	b01c      	add	sp, #112	; 0x70
 800cf44:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf48:	b003      	add	sp, #12
 800cf4a:	4770      	bx	lr
 800cf4c:	24000010 	.word	0x24000010
 800cf50:	ffff0208 	.word	0xffff0208

0800cf54 <__ssputs_r>:
 800cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	688e      	ldr	r6, [r1, #8]
 800cf5a:	429e      	cmp	r6, r3
 800cf5c:	4682      	mov	sl, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	4690      	mov	r8, r2
 800cf62:	461f      	mov	r7, r3
 800cf64:	d838      	bhi.n	800cfd8 <__ssputs_r+0x84>
 800cf66:	898a      	ldrh	r2, [r1, #12]
 800cf68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf6c:	d032      	beq.n	800cfd4 <__ssputs_r+0x80>
 800cf6e:	6825      	ldr	r5, [r4, #0]
 800cf70:	6909      	ldr	r1, [r1, #16]
 800cf72:	eba5 0901 	sub.w	r9, r5, r1
 800cf76:	6965      	ldr	r5, [r4, #20]
 800cf78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf80:	3301      	adds	r3, #1
 800cf82:	444b      	add	r3, r9
 800cf84:	106d      	asrs	r5, r5, #1
 800cf86:	429d      	cmp	r5, r3
 800cf88:	bf38      	it	cc
 800cf8a:	461d      	movcc	r5, r3
 800cf8c:	0553      	lsls	r3, r2, #21
 800cf8e:	d531      	bpl.n	800cff4 <__ssputs_r+0xa0>
 800cf90:	4629      	mov	r1, r5
 800cf92:	f000 fb39 	bl	800d608 <_malloc_r>
 800cf96:	4606      	mov	r6, r0
 800cf98:	b950      	cbnz	r0, 800cfb0 <__ssputs_r+0x5c>
 800cf9a:	230c      	movs	r3, #12
 800cf9c:	f8ca 3000 	str.w	r3, [sl]
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa6:	81a3      	strh	r3, [r4, #12]
 800cfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb0:	6921      	ldr	r1, [r4, #16]
 800cfb2:	464a      	mov	r2, r9
 800cfb4:	f7ff ff98 	bl	800cee8 <memcpy>
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	6126      	str	r6, [r4, #16]
 800cfc6:	6165      	str	r5, [r4, #20]
 800cfc8:	444e      	add	r6, r9
 800cfca:	eba5 0509 	sub.w	r5, r5, r9
 800cfce:	6026      	str	r6, [r4, #0]
 800cfd0:	60a5      	str	r5, [r4, #8]
 800cfd2:	463e      	mov	r6, r7
 800cfd4:	42be      	cmp	r6, r7
 800cfd6:	d900      	bls.n	800cfda <__ssputs_r+0x86>
 800cfd8:	463e      	mov	r6, r7
 800cfda:	4632      	mov	r2, r6
 800cfdc:	6820      	ldr	r0, [r4, #0]
 800cfde:	4641      	mov	r1, r8
 800cfe0:	f000 faa8 	bl	800d534 <memmove>
 800cfe4:	68a3      	ldr	r3, [r4, #8]
 800cfe6:	6822      	ldr	r2, [r4, #0]
 800cfe8:	1b9b      	subs	r3, r3, r6
 800cfea:	4432      	add	r2, r6
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	6022      	str	r2, [r4, #0]
 800cff0:	2000      	movs	r0, #0
 800cff2:	e7db      	b.n	800cfac <__ssputs_r+0x58>
 800cff4:	462a      	mov	r2, r5
 800cff6:	f000 fb61 	bl	800d6bc <_realloc_r>
 800cffa:	4606      	mov	r6, r0
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d1e1      	bne.n	800cfc4 <__ssputs_r+0x70>
 800d000:	6921      	ldr	r1, [r4, #16]
 800d002:	4650      	mov	r0, sl
 800d004:	f000 fab0 	bl	800d568 <_free_r>
 800d008:	e7c7      	b.n	800cf9a <__ssputs_r+0x46>
	...

0800d00c <_svfiprintf_r>:
 800d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d010:	4698      	mov	r8, r3
 800d012:	898b      	ldrh	r3, [r1, #12]
 800d014:	061b      	lsls	r3, r3, #24
 800d016:	b09d      	sub	sp, #116	; 0x74
 800d018:	4607      	mov	r7, r0
 800d01a:	460d      	mov	r5, r1
 800d01c:	4614      	mov	r4, r2
 800d01e:	d50e      	bpl.n	800d03e <_svfiprintf_r+0x32>
 800d020:	690b      	ldr	r3, [r1, #16]
 800d022:	b963      	cbnz	r3, 800d03e <_svfiprintf_r+0x32>
 800d024:	2140      	movs	r1, #64	; 0x40
 800d026:	f000 faef 	bl	800d608 <_malloc_r>
 800d02a:	6028      	str	r0, [r5, #0]
 800d02c:	6128      	str	r0, [r5, #16]
 800d02e:	b920      	cbnz	r0, 800d03a <_svfiprintf_r+0x2e>
 800d030:	230c      	movs	r3, #12
 800d032:	603b      	str	r3, [r7, #0]
 800d034:	f04f 30ff 	mov.w	r0, #4294967295
 800d038:	e0d1      	b.n	800d1de <_svfiprintf_r+0x1d2>
 800d03a:	2340      	movs	r3, #64	; 0x40
 800d03c:	616b      	str	r3, [r5, #20]
 800d03e:	2300      	movs	r3, #0
 800d040:	9309      	str	r3, [sp, #36]	; 0x24
 800d042:	2320      	movs	r3, #32
 800d044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d048:	f8cd 800c 	str.w	r8, [sp, #12]
 800d04c:	2330      	movs	r3, #48	; 0x30
 800d04e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1f8 <_svfiprintf_r+0x1ec>
 800d052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d056:	f04f 0901 	mov.w	r9, #1
 800d05a:	4623      	mov	r3, r4
 800d05c:	469a      	mov	sl, r3
 800d05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d062:	b10a      	cbz	r2, 800d068 <_svfiprintf_r+0x5c>
 800d064:	2a25      	cmp	r2, #37	; 0x25
 800d066:	d1f9      	bne.n	800d05c <_svfiprintf_r+0x50>
 800d068:	ebba 0b04 	subs.w	fp, sl, r4
 800d06c:	d00b      	beq.n	800d086 <_svfiprintf_r+0x7a>
 800d06e:	465b      	mov	r3, fp
 800d070:	4622      	mov	r2, r4
 800d072:	4629      	mov	r1, r5
 800d074:	4638      	mov	r0, r7
 800d076:	f7ff ff6d 	bl	800cf54 <__ssputs_r>
 800d07a:	3001      	adds	r0, #1
 800d07c:	f000 80aa 	beq.w	800d1d4 <_svfiprintf_r+0x1c8>
 800d080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d082:	445a      	add	r2, fp
 800d084:	9209      	str	r2, [sp, #36]	; 0x24
 800d086:	f89a 3000 	ldrb.w	r3, [sl]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 80a2 	beq.w	800d1d4 <_svfiprintf_r+0x1c8>
 800d090:	2300      	movs	r3, #0
 800d092:	f04f 32ff 	mov.w	r2, #4294967295
 800d096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d09a:	f10a 0a01 	add.w	sl, sl, #1
 800d09e:	9304      	str	r3, [sp, #16]
 800d0a0:	9307      	str	r3, [sp, #28]
 800d0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a8:	4654      	mov	r4, sl
 800d0aa:	2205      	movs	r2, #5
 800d0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b0:	4851      	ldr	r0, [pc, #324]	; (800d1f8 <_svfiprintf_r+0x1ec>)
 800d0b2:	f7f3 f915 	bl	80002e0 <memchr>
 800d0b6:	9a04      	ldr	r2, [sp, #16]
 800d0b8:	b9d8      	cbnz	r0, 800d0f2 <_svfiprintf_r+0xe6>
 800d0ba:	06d0      	lsls	r0, r2, #27
 800d0bc:	bf44      	itt	mi
 800d0be:	2320      	movmi	r3, #32
 800d0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c4:	0711      	lsls	r1, r2, #28
 800d0c6:	bf44      	itt	mi
 800d0c8:	232b      	movmi	r3, #43	; 0x2b
 800d0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d4:	d015      	beq.n	800d102 <_svfiprintf_r+0xf6>
 800d0d6:	9a07      	ldr	r2, [sp, #28]
 800d0d8:	4654      	mov	r4, sl
 800d0da:	2000      	movs	r0, #0
 800d0dc:	f04f 0c0a 	mov.w	ip, #10
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0e6:	3b30      	subs	r3, #48	; 0x30
 800d0e8:	2b09      	cmp	r3, #9
 800d0ea:	d94e      	bls.n	800d18a <_svfiprintf_r+0x17e>
 800d0ec:	b1b0      	cbz	r0, 800d11c <_svfiprintf_r+0x110>
 800d0ee:	9207      	str	r2, [sp, #28]
 800d0f0:	e014      	b.n	800d11c <_svfiprintf_r+0x110>
 800d0f2:	eba0 0308 	sub.w	r3, r0, r8
 800d0f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	46a2      	mov	sl, r4
 800d100:	e7d2      	b.n	800d0a8 <_svfiprintf_r+0x9c>
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	1d19      	adds	r1, r3, #4
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	9103      	str	r1, [sp, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	bfbb      	ittet	lt
 800d10e:	425b      	neglt	r3, r3
 800d110:	f042 0202 	orrlt.w	r2, r2, #2
 800d114:	9307      	strge	r3, [sp, #28]
 800d116:	9307      	strlt	r3, [sp, #28]
 800d118:	bfb8      	it	lt
 800d11a:	9204      	strlt	r2, [sp, #16]
 800d11c:	7823      	ldrb	r3, [r4, #0]
 800d11e:	2b2e      	cmp	r3, #46	; 0x2e
 800d120:	d10c      	bne.n	800d13c <_svfiprintf_r+0x130>
 800d122:	7863      	ldrb	r3, [r4, #1]
 800d124:	2b2a      	cmp	r3, #42	; 0x2a
 800d126:	d135      	bne.n	800d194 <_svfiprintf_r+0x188>
 800d128:	9b03      	ldr	r3, [sp, #12]
 800d12a:	1d1a      	adds	r2, r3, #4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	9203      	str	r2, [sp, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	bfb8      	it	lt
 800d134:	f04f 33ff 	movlt.w	r3, #4294967295
 800d138:	3402      	adds	r4, #2
 800d13a:	9305      	str	r3, [sp, #20]
 800d13c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d208 <_svfiprintf_r+0x1fc>
 800d140:	7821      	ldrb	r1, [r4, #0]
 800d142:	2203      	movs	r2, #3
 800d144:	4650      	mov	r0, sl
 800d146:	f7f3 f8cb 	bl	80002e0 <memchr>
 800d14a:	b140      	cbz	r0, 800d15e <_svfiprintf_r+0x152>
 800d14c:	2340      	movs	r3, #64	; 0x40
 800d14e:	eba0 000a 	sub.w	r0, r0, sl
 800d152:	fa03 f000 	lsl.w	r0, r3, r0
 800d156:	9b04      	ldr	r3, [sp, #16]
 800d158:	4303      	orrs	r3, r0
 800d15a:	3401      	adds	r4, #1
 800d15c:	9304      	str	r3, [sp, #16]
 800d15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d162:	4826      	ldr	r0, [pc, #152]	; (800d1fc <_svfiprintf_r+0x1f0>)
 800d164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d168:	2206      	movs	r2, #6
 800d16a:	f7f3 f8b9 	bl	80002e0 <memchr>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d038      	beq.n	800d1e4 <_svfiprintf_r+0x1d8>
 800d172:	4b23      	ldr	r3, [pc, #140]	; (800d200 <_svfiprintf_r+0x1f4>)
 800d174:	bb1b      	cbnz	r3, 800d1be <_svfiprintf_r+0x1b2>
 800d176:	9b03      	ldr	r3, [sp, #12]
 800d178:	3307      	adds	r3, #7
 800d17a:	f023 0307 	bic.w	r3, r3, #7
 800d17e:	3308      	adds	r3, #8
 800d180:	9303      	str	r3, [sp, #12]
 800d182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d184:	4433      	add	r3, r6
 800d186:	9309      	str	r3, [sp, #36]	; 0x24
 800d188:	e767      	b.n	800d05a <_svfiprintf_r+0x4e>
 800d18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d18e:	460c      	mov	r4, r1
 800d190:	2001      	movs	r0, #1
 800d192:	e7a5      	b.n	800d0e0 <_svfiprintf_r+0xd4>
 800d194:	2300      	movs	r3, #0
 800d196:	3401      	adds	r4, #1
 800d198:	9305      	str	r3, [sp, #20]
 800d19a:	4619      	mov	r1, r3
 800d19c:	f04f 0c0a 	mov.w	ip, #10
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a6:	3a30      	subs	r2, #48	; 0x30
 800d1a8:	2a09      	cmp	r2, #9
 800d1aa:	d903      	bls.n	800d1b4 <_svfiprintf_r+0x1a8>
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0c5      	beq.n	800d13c <_svfiprintf_r+0x130>
 800d1b0:	9105      	str	r1, [sp, #20]
 800d1b2:	e7c3      	b.n	800d13c <_svfiprintf_r+0x130>
 800d1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e7f0      	b.n	800d1a0 <_svfiprintf_r+0x194>
 800d1be:	ab03      	add	r3, sp, #12
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	462a      	mov	r2, r5
 800d1c4:	4b0f      	ldr	r3, [pc, #60]	; (800d204 <_svfiprintf_r+0x1f8>)
 800d1c6:	a904      	add	r1, sp, #16
 800d1c8:	4638      	mov	r0, r7
 800d1ca:	f3af 8000 	nop.w
 800d1ce:	1c42      	adds	r2, r0, #1
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	d1d6      	bne.n	800d182 <_svfiprintf_r+0x176>
 800d1d4:	89ab      	ldrh	r3, [r5, #12]
 800d1d6:	065b      	lsls	r3, r3, #25
 800d1d8:	f53f af2c 	bmi.w	800d034 <_svfiprintf_r+0x28>
 800d1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1de:	b01d      	add	sp, #116	; 0x74
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	ab03      	add	r3, sp, #12
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	4b06      	ldr	r3, [pc, #24]	; (800d204 <_svfiprintf_r+0x1f8>)
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	f000 f87a 	bl	800d2e8 <_printf_i>
 800d1f4:	e7eb      	b.n	800d1ce <_svfiprintf_r+0x1c2>
 800d1f6:	bf00      	nop
 800d1f8:	0800dcc4 	.word	0x0800dcc4
 800d1fc:	0800dcce 	.word	0x0800dcce
 800d200:	00000000 	.word	0x00000000
 800d204:	0800cf55 	.word	0x0800cf55
 800d208:	0800dcca 	.word	0x0800dcca

0800d20c <_printf_common>:
 800d20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d210:	4616      	mov	r6, r2
 800d212:	4699      	mov	r9, r3
 800d214:	688a      	ldr	r2, [r1, #8]
 800d216:	690b      	ldr	r3, [r1, #16]
 800d218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d21c:	4293      	cmp	r3, r2
 800d21e:	bfb8      	it	lt
 800d220:	4613      	movlt	r3, r2
 800d222:	6033      	str	r3, [r6, #0]
 800d224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d228:	4607      	mov	r7, r0
 800d22a:	460c      	mov	r4, r1
 800d22c:	b10a      	cbz	r2, 800d232 <_printf_common+0x26>
 800d22e:	3301      	adds	r3, #1
 800d230:	6033      	str	r3, [r6, #0]
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	0699      	lsls	r1, r3, #26
 800d236:	bf42      	ittt	mi
 800d238:	6833      	ldrmi	r3, [r6, #0]
 800d23a:	3302      	addmi	r3, #2
 800d23c:	6033      	strmi	r3, [r6, #0]
 800d23e:	6825      	ldr	r5, [r4, #0]
 800d240:	f015 0506 	ands.w	r5, r5, #6
 800d244:	d106      	bne.n	800d254 <_printf_common+0x48>
 800d246:	f104 0a19 	add.w	sl, r4, #25
 800d24a:	68e3      	ldr	r3, [r4, #12]
 800d24c:	6832      	ldr	r2, [r6, #0]
 800d24e:	1a9b      	subs	r3, r3, r2
 800d250:	42ab      	cmp	r3, r5
 800d252:	dc26      	bgt.n	800d2a2 <_printf_common+0x96>
 800d254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d258:	1e13      	subs	r3, r2, #0
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	bf18      	it	ne
 800d25e:	2301      	movne	r3, #1
 800d260:	0692      	lsls	r2, r2, #26
 800d262:	d42b      	bmi.n	800d2bc <_printf_common+0xb0>
 800d264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d268:	4649      	mov	r1, r9
 800d26a:	4638      	mov	r0, r7
 800d26c:	47c0      	blx	r8
 800d26e:	3001      	adds	r0, #1
 800d270:	d01e      	beq.n	800d2b0 <_printf_common+0xa4>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	68e5      	ldr	r5, [r4, #12]
 800d276:	6832      	ldr	r2, [r6, #0]
 800d278:	f003 0306 	and.w	r3, r3, #6
 800d27c:	2b04      	cmp	r3, #4
 800d27e:	bf08      	it	eq
 800d280:	1aad      	subeq	r5, r5, r2
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	6922      	ldr	r2, [r4, #16]
 800d286:	bf0c      	ite	eq
 800d288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d28c:	2500      	movne	r5, #0
 800d28e:	4293      	cmp	r3, r2
 800d290:	bfc4      	itt	gt
 800d292:	1a9b      	subgt	r3, r3, r2
 800d294:	18ed      	addgt	r5, r5, r3
 800d296:	2600      	movs	r6, #0
 800d298:	341a      	adds	r4, #26
 800d29a:	42b5      	cmp	r5, r6
 800d29c:	d11a      	bne.n	800d2d4 <_printf_common+0xc8>
 800d29e:	2000      	movs	r0, #0
 800d2a0:	e008      	b.n	800d2b4 <_printf_common+0xa8>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	4652      	mov	r2, sl
 800d2a6:	4649      	mov	r1, r9
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	47c0      	blx	r8
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d103      	bne.n	800d2b8 <_printf_common+0xac>
 800d2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b8:	3501      	adds	r5, #1
 800d2ba:	e7c6      	b.n	800d24a <_printf_common+0x3e>
 800d2bc:	18e1      	adds	r1, r4, r3
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	2030      	movs	r0, #48	; 0x30
 800d2c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2c6:	4422      	add	r2, r4
 800d2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2d0:	3302      	adds	r3, #2
 800d2d2:	e7c7      	b.n	800d264 <_printf_common+0x58>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	4622      	mov	r2, r4
 800d2d8:	4649      	mov	r1, r9
 800d2da:	4638      	mov	r0, r7
 800d2dc:	47c0      	blx	r8
 800d2de:	3001      	adds	r0, #1
 800d2e0:	d0e6      	beq.n	800d2b0 <_printf_common+0xa4>
 800d2e2:	3601      	adds	r6, #1
 800d2e4:	e7d9      	b.n	800d29a <_printf_common+0x8e>
	...

0800d2e8 <_printf_i>:
 800d2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	4691      	mov	r9, r2
 800d2f0:	7e27      	ldrb	r7, [r4, #24]
 800d2f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d2f4:	2f78      	cmp	r7, #120	; 0x78
 800d2f6:	4680      	mov	r8, r0
 800d2f8:	469a      	mov	sl, r3
 800d2fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2fe:	d807      	bhi.n	800d310 <_printf_i+0x28>
 800d300:	2f62      	cmp	r7, #98	; 0x62
 800d302:	d80a      	bhi.n	800d31a <_printf_i+0x32>
 800d304:	2f00      	cmp	r7, #0
 800d306:	f000 80d8 	beq.w	800d4ba <_printf_i+0x1d2>
 800d30a:	2f58      	cmp	r7, #88	; 0x58
 800d30c:	f000 80a3 	beq.w	800d456 <_printf_i+0x16e>
 800d310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d318:	e03a      	b.n	800d390 <_printf_i+0xa8>
 800d31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d31e:	2b15      	cmp	r3, #21
 800d320:	d8f6      	bhi.n	800d310 <_printf_i+0x28>
 800d322:	a001      	add	r0, pc, #4	; (adr r0, 800d328 <_printf_i+0x40>)
 800d324:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d328:	0800d381 	.word	0x0800d381
 800d32c:	0800d395 	.word	0x0800d395
 800d330:	0800d311 	.word	0x0800d311
 800d334:	0800d311 	.word	0x0800d311
 800d338:	0800d311 	.word	0x0800d311
 800d33c:	0800d311 	.word	0x0800d311
 800d340:	0800d395 	.word	0x0800d395
 800d344:	0800d311 	.word	0x0800d311
 800d348:	0800d311 	.word	0x0800d311
 800d34c:	0800d311 	.word	0x0800d311
 800d350:	0800d311 	.word	0x0800d311
 800d354:	0800d4a1 	.word	0x0800d4a1
 800d358:	0800d3c5 	.word	0x0800d3c5
 800d35c:	0800d483 	.word	0x0800d483
 800d360:	0800d311 	.word	0x0800d311
 800d364:	0800d311 	.word	0x0800d311
 800d368:	0800d4c3 	.word	0x0800d4c3
 800d36c:	0800d311 	.word	0x0800d311
 800d370:	0800d3c5 	.word	0x0800d3c5
 800d374:	0800d311 	.word	0x0800d311
 800d378:	0800d311 	.word	0x0800d311
 800d37c:	0800d48b 	.word	0x0800d48b
 800d380:	680b      	ldr	r3, [r1, #0]
 800d382:	1d1a      	adds	r2, r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	600a      	str	r2, [r1, #0]
 800d388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d390:	2301      	movs	r3, #1
 800d392:	e0a3      	b.n	800d4dc <_printf_i+0x1f4>
 800d394:	6825      	ldr	r5, [r4, #0]
 800d396:	6808      	ldr	r0, [r1, #0]
 800d398:	062e      	lsls	r6, r5, #24
 800d39a:	f100 0304 	add.w	r3, r0, #4
 800d39e:	d50a      	bpl.n	800d3b6 <_printf_i+0xce>
 800d3a0:	6805      	ldr	r5, [r0, #0]
 800d3a2:	600b      	str	r3, [r1, #0]
 800d3a4:	2d00      	cmp	r5, #0
 800d3a6:	da03      	bge.n	800d3b0 <_printf_i+0xc8>
 800d3a8:	232d      	movs	r3, #45	; 0x2d
 800d3aa:	426d      	negs	r5, r5
 800d3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3b0:	485e      	ldr	r0, [pc, #376]	; (800d52c <_printf_i+0x244>)
 800d3b2:	230a      	movs	r3, #10
 800d3b4:	e019      	b.n	800d3ea <_printf_i+0x102>
 800d3b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d3ba:	6805      	ldr	r5, [r0, #0]
 800d3bc:	600b      	str	r3, [r1, #0]
 800d3be:	bf18      	it	ne
 800d3c0:	b22d      	sxthne	r5, r5
 800d3c2:	e7ef      	b.n	800d3a4 <_printf_i+0xbc>
 800d3c4:	680b      	ldr	r3, [r1, #0]
 800d3c6:	6825      	ldr	r5, [r4, #0]
 800d3c8:	1d18      	adds	r0, r3, #4
 800d3ca:	6008      	str	r0, [r1, #0]
 800d3cc:	0628      	lsls	r0, r5, #24
 800d3ce:	d501      	bpl.n	800d3d4 <_printf_i+0xec>
 800d3d0:	681d      	ldr	r5, [r3, #0]
 800d3d2:	e002      	b.n	800d3da <_printf_i+0xf2>
 800d3d4:	0669      	lsls	r1, r5, #25
 800d3d6:	d5fb      	bpl.n	800d3d0 <_printf_i+0xe8>
 800d3d8:	881d      	ldrh	r5, [r3, #0]
 800d3da:	4854      	ldr	r0, [pc, #336]	; (800d52c <_printf_i+0x244>)
 800d3dc:	2f6f      	cmp	r7, #111	; 0x6f
 800d3de:	bf0c      	ite	eq
 800d3e0:	2308      	moveq	r3, #8
 800d3e2:	230a      	movne	r3, #10
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3ea:	6866      	ldr	r6, [r4, #4]
 800d3ec:	60a6      	str	r6, [r4, #8]
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	bfa2      	ittt	ge
 800d3f2:	6821      	ldrge	r1, [r4, #0]
 800d3f4:	f021 0104 	bicge.w	r1, r1, #4
 800d3f8:	6021      	strge	r1, [r4, #0]
 800d3fa:	b90d      	cbnz	r5, 800d400 <_printf_i+0x118>
 800d3fc:	2e00      	cmp	r6, #0
 800d3fe:	d04d      	beq.n	800d49c <_printf_i+0x1b4>
 800d400:	4616      	mov	r6, r2
 800d402:	fbb5 f1f3 	udiv	r1, r5, r3
 800d406:	fb03 5711 	mls	r7, r3, r1, r5
 800d40a:	5dc7      	ldrb	r7, [r0, r7]
 800d40c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d410:	462f      	mov	r7, r5
 800d412:	42bb      	cmp	r3, r7
 800d414:	460d      	mov	r5, r1
 800d416:	d9f4      	bls.n	800d402 <_printf_i+0x11a>
 800d418:	2b08      	cmp	r3, #8
 800d41a:	d10b      	bne.n	800d434 <_printf_i+0x14c>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	07df      	lsls	r7, r3, #31
 800d420:	d508      	bpl.n	800d434 <_printf_i+0x14c>
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	6861      	ldr	r1, [r4, #4]
 800d426:	4299      	cmp	r1, r3
 800d428:	bfde      	ittt	le
 800d42a:	2330      	movle	r3, #48	; 0x30
 800d42c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d430:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d434:	1b92      	subs	r2, r2, r6
 800d436:	6122      	str	r2, [r4, #16]
 800d438:	f8cd a000 	str.w	sl, [sp]
 800d43c:	464b      	mov	r3, r9
 800d43e:	aa03      	add	r2, sp, #12
 800d440:	4621      	mov	r1, r4
 800d442:	4640      	mov	r0, r8
 800d444:	f7ff fee2 	bl	800d20c <_printf_common>
 800d448:	3001      	adds	r0, #1
 800d44a:	d14c      	bne.n	800d4e6 <_printf_i+0x1fe>
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	b004      	add	sp, #16
 800d452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d456:	4835      	ldr	r0, [pc, #212]	; (800d52c <_printf_i+0x244>)
 800d458:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	680e      	ldr	r6, [r1, #0]
 800d460:	061f      	lsls	r7, r3, #24
 800d462:	f856 5b04 	ldr.w	r5, [r6], #4
 800d466:	600e      	str	r6, [r1, #0]
 800d468:	d514      	bpl.n	800d494 <_printf_i+0x1ac>
 800d46a:	07d9      	lsls	r1, r3, #31
 800d46c:	bf44      	itt	mi
 800d46e:	f043 0320 	orrmi.w	r3, r3, #32
 800d472:	6023      	strmi	r3, [r4, #0]
 800d474:	b91d      	cbnz	r5, 800d47e <_printf_i+0x196>
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	f023 0320 	bic.w	r3, r3, #32
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	2310      	movs	r3, #16
 800d480:	e7b0      	b.n	800d3e4 <_printf_i+0xfc>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	f043 0320 	orr.w	r3, r3, #32
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	2378      	movs	r3, #120	; 0x78
 800d48c:	4828      	ldr	r0, [pc, #160]	; (800d530 <_printf_i+0x248>)
 800d48e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d492:	e7e3      	b.n	800d45c <_printf_i+0x174>
 800d494:	065e      	lsls	r6, r3, #25
 800d496:	bf48      	it	mi
 800d498:	b2ad      	uxthmi	r5, r5
 800d49a:	e7e6      	b.n	800d46a <_printf_i+0x182>
 800d49c:	4616      	mov	r6, r2
 800d49e:	e7bb      	b.n	800d418 <_printf_i+0x130>
 800d4a0:	680b      	ldr	r3, [r1, #0]
 800d4a2:	6826      	ldr	r6, [r4, #0]
 800d4a4:	6960      	ldr	r0, [r4, #20]
 800d4a6:	1d1d      	adds	r5, r3, #4
 800d4a8:	600d      	str	r5, [r1, #0]
 800d4aa:	0635      	lsls	r5, r6, #24
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	d501      	bpl.n	800d4b4 <_printf_i+0x1cc>
 800d4b0:	6018      	str	r0, [r3, #0]
 800d4b2:	e002      	b.n	800d4ba <_printf_i+0x1d2>
 800d4b4:	0671      	lsls	r1, r6, #25
 800d4b6:	d5fb      	bpl.n	800d4b0 <_printf_i+0x1c8>
 800d4b8:	8018      	strh	r0, [r3, #0]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	6123      	str	r3, [r4, #16]
 800d4be:	4616      	mov	r6, r2
 800d4c0:	e7ba      	b.n	800d438 <_printf_i+0x150>
 800d4c2:	680b      	ldr	r3, [r1, #0]
 800d4c4:	1d1a      	adds	r2, r3, #4
 800d4c6:	600a      	str	r2, [r1, #0]
 800d4c8:	681e      	ldr	r6, [r3, #0]
 800d4ca:	6862      	ldr	r2, [r4, #4]
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7f2 ff06 	bl	80002e0 <memchr>
 800d4d4:	b108      	cbz	r0, 800d4da <_printf_i+0x1f2>
 800d4d6:	1b80      	subs	r0, r0, r6
 800d4d8:	6060      	str	r0, [r4, #4]
 800d4da:	6863      	ldr	r3, [r4, #4]
 800d4dc:	6123      	str	r3, [r4, #16]
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4e4:	e7a8      	b.n	800d438 <_printf_i+0x150>
 800d4e6:	6923      	ldr	r3, [r4, #16]
 800d4e8:	4632      	mov	r2, r6
 800d4ea:	4649      	mov	r1, r9
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	47d0      	blx	sl
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	d0ab      	beq.n	800d44c <_printf_i+0x164>
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	079b      	lsls	r3, r3, #30
 800d4f8:	d413      	bmi.n	800d522 <_printf_i+0x23a>
 800d4fa:	68e0      	ldr	r0, [r4, #12]
 800d4fc:	9b03      	ldr	r3, [sp, #12]
 800d4fe:	4298      	cmp	r0, r3
 800d500:	bfb8      	it	lt
 800d502:	4618      	movlt	r0, r3
 800d504:	e7a4      	b.n	800d450 <_printf_i+0x168>
 800d506:	2301      	movs	r3, #1
 800d508:	4632      	mov	r2, r6
 800d50a:	4649      	mov	r1, r9
 800d50c:	4640      	mov	r0, r8
 800d50e:	47d0      	blx	sl
 800d510:	3001      	adds	r0, #1
 800d512:	d09b      	beq.n	800d44c <_printf_i+0x164>
 800d514:	3501      	adds	r5, #1
 800d516:	68e3      	ldr	r3, [r4, #12]
 800d518:	9903      	ldr	r1, [sp, #12]
 800d51a:	1a5b      	subs	r3, r3, r1
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	dcf2      	bgt.n	800d506 <_printf_i+0x21e>
 800d520:	e7eb      	b.n	800d4fa <_printf_i+0x212>
 800d522:	2500      	movs	r5, #0
 800d524:	f104 0619 	add.w	r6, r4, #25
 800d528:	e7f5      	b.n	800d516 <_printf_i+0x22e>
 800d52a:	bf00      	nop
 800d52c:	0800dcd5 	.word	0x0800dcd5
 800d530:	0800dce6 	.word	0x0800dce6

0800d534 <memmove>:
 800d534:	4288      	cmp	r0, r1
 800d536:	b510      	push	{r4, lr}
 800d538:	eb01 0402 	add.w	r4, r1, r2
 800d53c:	d902      	bls.n	800d544 <memmove+0x10>
 800d53e:	4284      	cmp	r4, r0
 800d540:	4623      	mov	r3, r4
 800d542:	d807      	bhi.n	800d554 <memmove+0x20>
 800d544:	1e43      	subs	r3, r0, #1
 800d546:	42a1      	cmp	r1, r4
 800d548:	d008      	beq.n	800d55c <memmove+0x28>
 800d54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d552:	e7f8      	b.n	800d546 <memmove+0x12>
 800d554:	4402      	add	r2, r0
 800d556:	4601      	mov	r1, r0
 800d558:	428a      	cmp	r2, r1
 800d55a:	d100      	bne.n	800d55e <memmove+0x2a>
 800d55c:	bd10      	pop	{r4, pc}
 800d55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d566:	e7f7      	b.n	800d558 <memmove+0x24>

0800d568 <_free_r>:
 800d568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d56a:	2900      	cmp	r1, #0
 800d56c:	d048      	beq.n	800d600 <_free_r+0x98>
 800d56e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d572:	9001      	str	r0, [sp, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	f1a1 0404 	sub.w	r4, r1, #4
 800d57a:	bfb8      	it	lt
 800d57c:	18e4      	addlt	r4, r4, r3
 800d57e:	f000 f8d3 	bl	800d728 <__malloc_lock>
 800d582:	4a20      	ldr	r2, [pc, #128]	; (800d604 <_free_r+0x9c>)
 800d584:	9801      	ldr	r0, [sp, #4]
 800d586:	6813      	ldr	r3, [r2, #0]
 800d588:	4615      	mov	r5, r2
 800d58a:	b933      	cbnz	r3, 800d59a <_free_r+0x32>
 800d58c:	6063      	str	r3, [r4, #4]
 800d58e:	6014      	str	r4, [r2, #0]
 800d590:	b003      	add	sp, #12
 800d592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d596:	f000 b8cd 	b.w	800d734 <__malloc_unlock>
 800d59a:	42a3      	cmp	r3, r4
 800d59c:	d90b      	bls.n	800d5b6 <_free_r+0x4e>
 800d59e:	6821      	ldr	r1, [r4, #0]
 800d5a0:	1862      	adds	r2, r4, r1
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	bf04      	itt	eq
 800d5a6:	681a      	ldreq	r2, [r3, #0]
 800d5a8:	685b      	ldreq	r3, [r3, #4]
 800d5aa:	6063      	str	r3, [r4, #4]
 800d5ac:	bf04      	itt	eq
 800d5ae:	1852      	addeq	r2, r2, r1
 800d5b0:	6022      	streq	r2, [r4, #0]
 800d5b2:	602c      	str	r4, [r5, #0]
 800d5b4:	e7ec      	b.n	800d590 <_free_r+0x28>
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	b10b      	cbz	r3, 800d5c0 <_free_r+0x58>
 800d5bc:	42a3      	cmp	r3, r4
 800d5be:	d9fa      	bls.n	800d5b6 <_free_r+0x4e>
 800d5c0:	6811      	ldr	r1, [r2, #0]
 800d5c2:	1855      	adds	r5, r2, r1
 800d5c4:	42a5      	cmp	r5, r4
 800d5c6:	d10b      	bne.n	800d5e0 <_free_r+0x78>
 800d5c8:	6824      	ldr	r4, [r4, #0]
 800d5ca:	4421      	add	r1, r4
 800d5cc:	1854      	adds	r4, r2, r1
 800d5ce:	42a3      	cmp	r3, r4
 800d5d0:	6011      	str	r1, [r2, #0]
 800d5d2:	d1dd      	bne.n	800d590 <_free_r+0x28>
 800d5d4:	681c      	ldr	r4, [r3, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	6053      	str	r3, [r2, #4]
 800d5da:	4421      	add	r1, r4
 800d5dc:	6011      	str	r1, [r2, #0]
 800d5de:	e7d7      	b.n	800d590 <_free_r+0x28>
 800d5e0:	d902      	bls.n	800d5e8 <_free_r+0x80>
 800d5e2:	230c      	movs	r3, #12
 800d5e4:	6003      	str	r3, [r0, #0]
 800d5e6:	e7d3      	b.n	800d590 <_free_r+0x28>
 800d5e8:	6825      	ldr	r5, [r4, #0]
 800d5ea:	1961      	adds	r1, r4, r5
 800d5ec:	428b      	cmp	r3, r1
 800d5ee:	bf04      	itt	eq
 800d5f0:	6819      	ldreq	r1, [r3, #0]
 800d5f2:	685b      	ldreq	r3, [r3, #4]
 800d5f4:	6063      	str	r3, [r4, #4]
 800d5f6:	bf04      	itt	eq
 800d5f8:	1949      	addeq	r1, r1, r5
 800d5fa:	6021      	streq	r1, [r4, #0]
 800d5fc:	6054      	str	r4, [r2, #4]
 800d5fe:	e7c7      	b.n	800d590 <_free_r+0x28>
 800d600:	b003      	add	sp, #12
 800d602:	bd30      	pop	{r4, r5, pc}
 800d604:	24001334 	.word	0x24001334

0800d608 <_malloc_r>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	1ccd      	adds	r5, r1, #3
 800d60c:	f025 0503 	bic.w	r5, r5, #3
 800d610:	3508      	adds	r5, #8
 800d612:	2d0c      	cmp	r5, #12
 800d614:	bf38      	it	cc
 800d616:	250c      	movcc	r5, #12
 800d618:	2d00      	cmp	r5, #0
 800d61a:	4606      	mov	r6, r0
 800d61c:	db01      	blt.n	800d622 <_malloc_r+0x1a>
 800d61e:	42a9      	cmp	r1, r5
 800d620:	d903      	bls.n	800d62a <_malloc_r+0x22>
 800d622:	230c      	movs	r3, #12
 800d624:	6033      	str	r3, [r6, #0]
 800d626:	2000      	movs	r0, #0
 800d628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d62a:	f000 f87d 	bl	800d728 <__malloc_lock>
 800d62e:	4921      	ldr	r1, [pc, #132]	; (800d6b4 <_malloc_r+0xac>)
 800d630:	680a      	ldr	r2, [r1, #0]
 800d632:	4614      	mov	r4, r2
 800d634:	b99c      	cbnz	r4, 800d65e <_malloc_r+0x56>
 800d636:	4f20      	ldr	r7, [pc, #128]	; (800d6b8 <_malloc_r+0xb0>)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	b923      	cbnz	r3, 800d646 <_malloc_r+0x3e>
 800d63c:	4621      	mov	r1, r4
 800d63e:	4630      	mov	r0, r6
 800d640:	f000 f862 	bl	800d708 <_sbrk_r>
 800d644:	6038      	str	r0, [r7, #0]
 800d646:	4629      	mov	r1, r5
 800d648:	4630      	mov	r0, r6
 800d64a:	f000 f85d 	bl	800d708 <_sbrk_r>
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	d123      	bne.n	800d69a <_malloc_r+0x92>
 800d652:	230c      	movs	r3, #12
 800d654:	6033      	str	r3, [r6, #0]
 800d656:	4630      	mov	r0, r6
 800d658:	f000 f86c 	bl	800d734 <__malloc_unlock>
 800d65c:	e7e3      	b.n	800d626 <_malloc_r+0x1e>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	1b5b      	subs	r3, r3, r5
 800d662:	d417      	bmi.n	800d694 <_malloc_r+0x8c>
 800d664:	2b0b      	cmp	r3, #11
 800d666:	d903      	bls.n	800d670 <_malloc_r+0x68>
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	441c      	add	r4, r3
 800d66c:	6025      	str	r5, [r4, #0]
 800d66e:	e004      	b.n	800d67a <_malloc_r+0x72>
 800d670:	6863      	ldr	r3, [r4, #4]
 800d672:	42a2      	cmp	r2, r4
 800d674:	bf0c      	ite	eq
 800d676:	600b      	streq	r3, [r1, #0]
 800d678:	6053      	strne	r3, [r2, #4]
 800d67a:	4630      	mov	r0, r6
 800d67c:	f000 f85a 	bl	800d734 <__malloc_unlock>
 800d680:	f104 000b 	add.w	r0, r4, #11
 800d684:	1d23      	adds	r3, r4, #4
 800d686:	f020 0007 	bic.w	r0, r0, #7
 800d68a:	1ac2      	subs	r2, r0, r3
 800d68c:	d0cc      	beq.n	800d628 <_malloc_r+0x20>
 800d68e:	1a1b      	subs	r3, r3, r0
 800d690:	50a3      	str	r3, [r4, r2]
 800d692:	e7c9      	b.n	800d628 <_malloc_r+0x20>
 800d694:	4622      	mov	r2, r4
 800d696:	6864      	ldr	r4, [r4, #4]
 800d698:	e7cc      	b.n	800d634 <_malloc_r+0x2c>
 800d69a:	1cc4      	adds	r4, r0, #3
 800d69c:	f024 0403 	bic.w	r4, r4, #3
 800d6a0:	42a0      	cmp	r0, r4
 800d6a2:	d0e3      	beq.n	800d66c <_malloc_r+0x64>
 800d6a4:	1a21      	subs	r1, r4, r0
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f000 f82e 	bl	800d708 <_sbrk_r>
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d1dd      	bne.n	800d66c <_malloc_r+0x64>
 800d6b0:	e7cf      	b.n	800d652 <_malloc_r+0x4a>
 800d6b2:	bf00      	nop
 800d6b4:	24001334 	.word	0x24001334
 800d6b8:	24001338 	.word	0x24001338

0800d6bc <_realloc_r>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	4607      	mov	r7, r0
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	460e      	mov	r6, r1
 800d6c4:	b921      	cbnz	r1, 800d6d0 <_realloc_r+0x14>
 800d6c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	f7ff bf9c 	b.w	800d608 <_malloc_r>
 800d6d0:	b922      	cbnz	r2, 800d6dc <_realloc_r+0x20>
 800d6d2:	f7ff ff49 	bl	800d568 <_free_r>
 800d6d6:	4625      	mov	r5, r4
 800d6d8:	4628      	mov	r0, r5
 800d6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6dc:	f000 f830 	bl	800d740 <_malloc_usable_size_r>
 800d6e0:	42a0      	cmp	r0, r4
 800d6e2:	d20f      	bcs.n	800d704 <_realloc_r+0x48>
 800d6e4:	4621      	mov	r1, r4
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	f7ff ff8e 	bl	800d608 <_malloc_r>
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d0f2      	beq.n	800d6d8 <_realloc_r+0x1c>
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	f7ff fbf7 	bl	800cee8 <memcpy>
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f7ff ff33 	bl	800d568 <_free_r>
 800d702:	e7e9      	b.n	800d6d8 <_realloc_r+0x1c>
 800d704:	4635      	mov	r5, r6
 800d706:	e7e7      	b.n	800d6d8 <_realloc_r+0x1c>

0800d708 <_sbrk_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d06      	ldr	r5, [pc, #24]	; (800d724 <_sbrk_r+0x1c>)
 800d70c:	2300      	movs	r3, #0
 800d70e:	4604      	mov	r4, r0
 800d710:	4608      	mov	r0, r1
 800d712:	602b      	str	r3, [r5, #0]
 800d714:	f7f3 fd54 	bl	80011c0 <_sbrk>
 800d718:	1c43      	adds	r3, r0, #1
 800d71a:	d102      	bne.n	800d722 <_sbrk_r+0x1a>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	b103      	cbz	r3, 800d722 <_sbrk_r+0x1a>
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	240052c0 	.word	0x240052c0

0800d728 <__malloc_lock>:
 800d728:	4801      	ldr	r0, [pc, #4]	; (800d730 <__malloc_lock+0x8>)
 800d72a:	f000 b811 	b.w	800d750 <__retarget_lock_acquire_recursive>
 800d72e:	bf00      	nop
 800d730:	240052c8 	.word	0x240052c8

0800d734 <__malloc_unlock>:
 800d734:	4801      	ldr	r0, [pc, #4]	; (800d73c <__malloc_unlock+0x8>)
 800d736:	f000 b80c 	b.w	800d752 <__retarget_lock_release_recursive>
 800d73a:	bf00      	nop
 800d73c:	240052c8 	.word	0x240052c8

0800d740 <_malloc_usable_size_r>:
 800d740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d744:	1f18      	subs	r0, r3, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	bfbc      	itt	lt
 800d74a:	580b      	ldrlt	r3, [r1, r0]
 800d74c:	18c0      	addlt	r0, r0, r3
 800d74e:	4770      	bx	lr

0800d750 <__retarget_lock_acquire_recursive>:
 800d750:	4770      	bx	lr

0800d752 <__retarget_lock_release_recursive>:
 800d752:	4770      	bx	lr

0800d754 <_init>:
 800d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d756:	bf00      	nop
 800d758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75a:	bc08      	pop	{r3}
 800d75c:	469e      	mov	lr, r3
 800d75e:	4770      	bx	lr

0800d760 <_fini>:
 800d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d762:	bf00      	nop
 800d764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d766:	bc08      	pop	{r3}
 800d768:	469e      	mov	lr, r3
 800d76a:	4770      	bx	lr
