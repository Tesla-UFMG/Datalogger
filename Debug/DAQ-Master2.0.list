
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  080101b8  080101b8  000201b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010eac  08010eac  00020eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010eb4  08010eb4  00020eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010eb8  08010eb8  00020eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08010ebc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000189c  240001e0  0801109c  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24001a7c  0801109c  00031a7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020c5b  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e39  00000000  00000000  00050e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001730  00000000  00000000  00054ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001568  00000000  00000000  000563d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c535  00000000  00000000  00057940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020cec  00000000  00000000  00093e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c2fd  00000000  00000000  000b4b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00220e5e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007054  00000000  00000000  00220eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801019c 	.word	0x0801019c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801019c 	.word	0x0801019c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f001 fd96 	bl	80021d4 <HAL_FDCAN_RegisterRxFifo0Callback>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80006ae:	f000 fe05 	bl	80012bc <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f001 fdbe 	bl	8002234 <HAL_FDCAN_Start>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80006be:	f000 fdfd 	bl	80012bc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f001 ff4e 	bl	8002568 <HAL_FDCAN_ActivateNotification>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 80006d2:	f000 fdf3 	bl	80012bc <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006e8:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <init_CAN+0x10>)
 8000716:	f000 fb3f 	bl	8000d98 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	24001618 	.word	0x24001618

08000724 <SD_Create_File>:
extern IWDG_HandleTypeDef hiwdg1;

char block[700];

FRESULT SD_Create_File(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	FRESULT fresult;
	uint8_t contFile = 0;	/*enumerate the file*/
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]

	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 800072e:	2200      	movs	r2, #0
 8000730:	491f      	ldr	r1, [pc, #124]	; (80007b0 <SD_Create_File+0x8c>)
 8000732:	4820      	ldr	r0, [pc, #128]	; (80007b4 <SD_Create_File+0x90>)
 8000734:	f00b ff0a 	bl	800c54c <f_mount>
 8000738:	4603      	mov	r3, r0
 800073a:	71bb      	strb	r3, [r7, #6]
	do
	{
		sprintf(bufferFile, "ARQ%02d.txt", contFile);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	461a      	mov	r2, r3
 8000740:	491d      	ldr	r1, [pc, #116]	; (80007b8 <SD_Create_File+0x94>)
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <SD_Create_File+0x98>)
 8000744:	f00d fb3e 	bl	800ddc4 <siprintf>
		fresult = f_stat(bufferFile, &file);
 8000748:	491d      	ldr	r1, [pc, #116]	; (80007c0 <SD_Create_File+0x9c>)
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <SD_Create_File+0x98>)
 800074c:	f00c fd28 	bl	800d1a0 <f_stat>
 8000750:	4603      	mov	r3, r0
 8000752:	71bb      	strb	r3, [r7, #6]
		contFile++;
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	3301      	adds	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
		HAL_IWDG_Refresh(&hiwdg1);
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <SD_Create_File+0xa0>)
 800075c:	f002 fe82 	bl	8003464 <HAL_IWDG_Refresh>
	} while(fresult != FR_NO_FILE);
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d1ea      	bne.n	800073c <SD_Create_File+0x18>
	contFile = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
	fresult = f_open(&file, bufferFile, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 800076a:	2208      	movs	r2, #8
 800076c:	4913      	ldr	r1, [pc, #76]	; (80007bc <SD_Create_File+0x98>)
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <SD_Create_File+0x9c>)
 8000770:	f00b ff32 	bl	800c5d8 <f_open>
 8000774:	4603      	mov	r3, r0
 8000776:	71bb      	strb	r3, [r7, #6]
	fresult = f_close(&file);
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <SD_Create_File+0x9c>)
 800077a:	f00c fade 	bl	800cd3a <f_close>
 800077e:	4603      	mov	r3, r0
 8000780:	71bb      	strb	r3, [r7, #6]
	HAL_IWDG_Refresh(&hiwdg1);
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <SD_Create_File+0xa0>)
 8000784:	f002 fe6e 	bl	8003464 <HAL_IWDG_Refresh>
	if(fresult == FR_OK){
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d107      	bne.n	800079e <SD_Create_File+0x7a>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5); //Blinks the led to indicate that there was no erros
 800078e:	2120      	movs	r1, #32
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <SD_Create_File+0xa4>)
 8000792:	f002 fdfe 	bl	8003392 <HAL_GPIO_TogglePin>
		_datalog_flag  = 1;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <SD_Create_File+0xa8>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e002      	b.n	80007a4 <SD_Create_File+0x80>
	}
	else _datalog_flag = 0;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <SD_Create_File+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]

	return fresult;
 80007a4:	79bb      	ldrb	r3, [r7, #6]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	080101b8 	.word	0x080101b8
 80007b4:	240001fc 	.word	0x240001fc
 80007b8:	080101bc 	.word	0x080101bc
 80007bc:	24000660 	.word	0x24000660
 80007c0:	24000430 	.word	0x24000430
 80007c4:	24001704 	.word	0x24001704
 80007c8:	58020c00 	.word	0x58020c00
 80007cc:	24000674 	.word	0x24000674

080007d0 <Cabecalho>:
		general_can_transmit(102, controle);
	}
}

void Cabecalho(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80007d6:	af00      	add	r7, sp, #0
	UINT bytes_written;
	FRESULT fresult;

	char cabecalho[1000];
	strcpy(cabecalho,   "TIMER\tVOL\tACELERADOR\tFREIO\tMODO\tHODOMETRO_P\tHODOMETRO_"
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <Cabecalho+0x64>)
 80007dc:	4618      	mov	r0, r3
 80007de:	4611      	mov	r1, r2
 80007e0:	f240 23fa 	movw	r3, #762	; 0x2fa
 80007e4:	461a      	mov	r2, r3
 80007e6:	f00c fe61 	bl	800d4ac <memcpy>
	           "ALTA\tTemp101\tTemp102\tTemp103\tTemp104\tTem"
	           "p105\tV_TOT_1\tV_REF_1\tTemp201\tTemp202\tTemp203\tTemp204\tTemp205\tV_TOT_"
	           "2\tV_REF_2\tTemp301\tTemp302\tTemp303\tTemp304\tTemp305\tV_TOT_"
	           "3\tV_REF_3\tTemp401\tTemp402\tTemp403\tTemp404\tTemp405"
	           "\tV_TOT_4\tV_REF_4\n");
	int tamanho = strlen(cabecalho);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd77 	bl	80002e0 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4


	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write
 80007f8:	2212      	movs	r2, #18
 80007fa:	490f      	ldr	r1, [pc, #60]	; (8000838 <Cabecalho+0x68>)
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <Cabecalho+0x6c>)
 80007fe:	f00b feeb 	bl	800c5d8 <f_open>
 8000802:	4603      	mov	r3, r0
 8000804:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
	fresult = f_write(&file, cabecalho, tamanho, &bytes_written); //write data to the file
 8000808:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 800080c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <Cabecalho+0x6c>)
 8000814:	f00c f89e 	bl	800c954 <f_write>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
	fresult = f_close(&file);
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <Cabecalho+0x6c>)
 8000820:	f00c fa8b 	bl	800cd3a <f_close>
 8000824:	4603      	mov	r3, r0
 8000826:	f887 33f3 	strb.w	r3, [r7, #1011]	; 0x3f3
}
 800082a:	bf00      	nop
 800082c:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	080101c8 	.word	0x080101c8
 8000838:	24000660 	.word	0x24000660
 800083c:	24000430 	.word	0x24000430

08000840 <writeSD>:

void writeSD(void)
{
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8000846:	af4a      	add	r7, sp, #296	; 0x128
	UINT bytes_written;
	FRESULT fresult;
	//uint16_t block[310];
	int len;
	uint32_t time = HAL_GetTick();
 8000848:	f001 f926 	bl	8001a98 <HAL_GetTick>
 800084c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
//			"%u\t%u\t%u\t%u\t"		//Id 272
//			"%u\t%u\t%u\t%u\t"		//Id 273
			"%u\t%u\t%u\t%u\t"		//Id 274
			"%u\t%u\t%u\n",		//Id 275

/*Id 101 */	time, VOLANTE, ACELERADOR, FREIO,
 8000850:	4bb6      	ldr	r3, [pc, #728]	; (8000b2c <writeSD+0x2ec>)
 8000852:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
	len = snprintf((char*) block, sizeof(block),
 8000856:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
/*Id 101 */	time, VOLANTE, ACELERADOR, FREIO,
 800085a:	4bb4      	ldr	r3, [pc, #720]	; (8000b2c <writeSD+0x2ec>)
 800085c:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
	len = snprintf((char*) block, sizeof(block),
 8000860:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
/*Id 101 */	time, VOLANTE, ACELERADOR, FREIO,
 8000864:	4bb1      	ldr	r3, [pc, #708]	; (8000b2c <writeSD+0x2ec>)
 8000866:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
	len = snprintf((char*) block, sizeof(block),
 800086a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
/*Id 102 */ MODO, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 800086e:	4baf      	ldr	r3, [pc, #700]	; (8000b2c <writeSD+0x2ec>)
 8000870:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
	len = snprintf((char*) block, sizeof(block),
 8000874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
/*Id 102 */ MODO, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 8000878:	4bac      	ldr	r3, [pc, #688]	; (8000b2c <writeSD+0x2ec>)
 800087a:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	len = snprintf((char*) block, sizeof(block),
 800087e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
/*Id 102 */ MODO, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 8000882:	4baa      	ldr	r3, [pc, #680]	; (8000b2c <writeSD+0x2ec>)
 8000884:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
	len = snprintf((char*) block, sizeof(block),
 8000888:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 800088c:	4ba7      	ldr	r3, [pc, #668]	; (8000b2c <writeSD+0x2ec>)
 800088e:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
	len = snprintf((char*) block, sizeof(block),
 8000892:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 8000896:	4ba5      	ldr	r3, [pc, #660]	; (8000b2c <writeSD+0x2ec>)
 8000898:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
	len = snprintf((char*) block, sizeof(block),
 800089c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 80008a0:	4ba2      	ldr	r3, [pc, #648]	; (8000b2c <writeSD+0x2ec>)
 80008a2:	f8b3 333c 	ldrh.w	r3, [r3, #828]	; 0x33c
	len = snprintf((char*) block, sizeof(block),
 80008a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 80008aa:	4ba0      	ldr	r3, [pc, #640]	; (8000b2c <writeSD+0x2ec>)
 80008ac:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	len = snprintf((char*) block, sizeof(block),
 80008b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID1, ECU_CONTROL_ID2,
 80008b4:	4b9d      	ldr	r3, [pc, #628]	; (8000b2c <writeSD+0x2ec>)
 80008b6:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	len = snprintf((char*) block, sizeof(block),
 80008ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID1, ECU_CONTROL_ID2,
 80008be:	4b9b      	ldr	r3, [pc, #620]	; (8000b2c <writeSD+0x2ec>)
 80008c0:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
	len = snprintf((char*) block, sizeof(block),
 80008c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID1, ECU_CONTROL_ID2,
 80008c8:	4b98      	ldr	r3, [pc, #608]	; (8000b2c <writeSD+0x2ec>)
 80008ca:	f8b3 3344 	ldrh.w	r3, [r3, #836]	; 0x344
	len = snprintf((char*) block, sizeof(block),
 80008ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID1, ECU_CONTROL_ID2,
 80008d2:	4b96      	ldr	r3, [pc, #600]	; (8000b2c <writeSD+0x2ec>)
 80008d4:	f8b3 3346 	ldrh.w	r3, [r3, #838]	; 0x346
	len = snprintf((char*) block, sizeof(block),
 80008d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008dc:	4b93      	ldr	r3, [pc, #588]	; (8000b2c <writeSD+0x2ec>)
 80008de:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
	len = snprintf((char*) block, sizeof(block),
 80008e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008e6:	4b91      	ldr	r3, [pc, #580]	; (8000b2c <writeSD+0x2ec>)
 80008e8:	f8b3 334a 	ldrh.w	r3, [r3, #842]	; 0x34a
	len = snprintf((char*) block, sizeof(block),
 80008ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008f0:	4b8e      	ldr	r3, [pc, #568]	; (8000b2c <writeSD+0x2ec>)
 80008f2:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
	len = snprintf((char*) block, sizeof(block),
 80008f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008fa:	4b8c      	ldr	r3, [pc, #560]	; (8000b2c <writeSD+0x2ec>)
 80008fc:	f8b3 334e 	ldrh.w	r3, [r3, #846]	; 0x34e
	len = snprintf((char*) block, sizeof(block),
 8000900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 8000904:	4b89      	ldr	r3, [pc, #548]	; (8000b2c <writeSD+0x2ec>)
 8000906:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
	len = snprintf((char*) block, sizeof(block),
 800090a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 800090e:	4b87      	ldr	r3, [pc, #540]	; (8000b2c <writeSD+0x2ec>)
 8000910:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
	len = snprintf((char*) block, sizeof(block),
 8000914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 8000918:	4b84      	ldr	r3, [pc, #528]	; (8000b2c <writeSD+0x2ec>)
 800091a:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
	len = snprintf((char*) block, sizeof(block),
 800091e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 8000922:	4b82      	ldr	r3, [pc, #520]	; (8000b2c <writeSD+0x2ec>)
 8000924:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
	len = snprintf((char*) block, sizeof(block),
 8000928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 800092c:	4b7f      	ldr	r3, [pc, #508]	; (8000b2c <writeSD+0x2ec>)
 800092e:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
	len = snprintf((char*) block, sizeof(block),
 8000932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 8000936:	4b7d      	ldr	r3, [pc, #500]	; (8000b2c <writeSD+0x2ec>)
 8000938:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
	len = snprintf((char*) block, sizeof(block),
 800093c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 8000940:	4b7a      	ldr	r3, [pc, #488]	; (8000b2c <writeSD+0x2ec>)
 8000942:	f8b3 336c 	ldrh.w	r3, [r3, #876]	; 0x36c
	len = snprintf((char*) block, sizeof(block),
 8000946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 800094a:	4b78      	ldr	r3, [pc, #480]	; (8000b2c <writeSD+0x2ec>)
 800094c:	f8b3 336e 	ldrh.w	r3, [r3, #878]	; 0x36e
	len = snprintf((char*) block, sizeof(block),
 8000950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z,
 8000954:	4b75      	ldr	r3, [pc, #468]	; (8000b2c <writeSD+0x2ec>)
 8000956:	f8b3 3918 	ldrh.w	r3, [r3, #2328]	; 0x918
	len = snprintf((char*) block, sizeof(block),
 800095a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z,
 800095e:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <writeSD+0x2ec>)
 8000960:	f8b3 391a 	ldrh.w	r3, [r3, #2330]	; 0x91a
	len = snprintf((char*) block, sizeof(block),
 8000964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z,
 8000968:	4b70      	ldr	r3, [pc, #448]	; (8000b2c <writeSD+0x2ec>)
 800096a:	f8b3 391c 	ldrh.w	r3, [r3, #2332]	; 0x91c
	len = snprintf((char*) block, sizeof(block),
 800096e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z,
 8000972:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <writeSD+0x2ec>)
 8000974:	f8b3 3920 	ldrh.w	r3, [r3, #2336]	; 0x920
	len = snprintf((char*) block, sizeof(block),
 8000978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z,
 800097c:	4b6b      	ldr	r3, [pc, #428]	; (8000b2c <writeSD+0x2ec>)
 800097e:	f8b3 3922 	ldrh.w	r3, [r3, #2338]	; 0x922
	len = snprintf((char*) block, sizeof(block),
 8000982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z,
 8000986:	4b69      	ldr	r3, [pc, #420]	; (8000b2c <writeSD+0x2ec>)
 8000988:	f8b3 3924 	ldrh.w	r3, [r3, #2340]	; 0x924
	len = snprintf((char*) block, sizeof(block),
 800098c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 8000990:	4b66      	ldr	r3, [pc, #408]	; (8000b2c <writeSD+0x2ec>)
 8000992:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
	len = snprintf((char*) block, sizeof(block),
 8000996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 800099a:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <writeSD+0x2ec>)
 800099c:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
	len = snprintf((char*) block, sizeof(block),
 80009a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 80009a4:	4b61      	ldr	r3, [pc, #388]	; (8000b2c <writeSD+0x2ec>)
 80009a6:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
	len = snprintf((char*) block, sizeof(block),
 80009aa:	67fb      	str	r3, [r7, #124]	; 0x7c
/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 80009ac:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <writeSD+0x2ec>)
 80009ae:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
	len = snprintf((char*) block, sizeof(block),
 80009b2:	67bb      	str	r3, [r7, #120]	; 0x78
/*Id 51 */	CONTATORES_STATUS, V_TS,
 80009b4:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <writeSD+0x2ec>)
 80009b6:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
	len = snprintf((char*) block, sizeof(block),
 80009ba:	677b      	str	r3, [r7, #116]	; 0x74
/*Id 51 */	CONTATORES_STATUS, V_TS,
 80009bc:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <writeSD+0x2ec>)
 80009be:	f8b3 319e 	ldrh.w	r3, [r3, #414]	; 0x19e
	len = snprintf((char*) block, sizeof(block),
 80009c2:	673b      	str	r3, [r7, #112]	; 0x70
/*Id 54 */	/*CURRENT_SENSOR_1_BAIXA*/ CURRENT_SENSOR_1_ALTA, CURRENT_SENSOR_2_BAIXA, CURRENT_SENSOR_2_ALTA,
 80009c4:	4b59      	ldr	r3, [pc, #356]	; (8000b2c <writeSD+0x2ec>)
 80009c6:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	; 0x1b2
	len = snprintf((char*) block, sizeof(block),
 80009ca:	66fb      	str	r3, [r7, #108]	; 0x6c
/*Id 54 */	/*CURRENT_SENSOR_1_BAIXA*/ CURRENT_SENSOR_1_ALTA, CURRENT_SENSOR_2_BAIXA, CURRENT_SENSOR_2_ALTA,
 80009cc:	4b57      	ldr	r3, [pc, #348]	; (8000b2c <writeSD+0x2ec>)
 80009ce:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	; 0x1b4
	len = snprintf((char*) block, sizeof(block),
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
/*Id 54 */	/*CURRENT_SENSOR_1_BAIXA*/ CURRENT_SENSOR_1_ALTA, CURRENT_SENSOR_2_BAIXA, CURRENT_SENSOR_2_ALTA,
 80009d4:	4b55      	ldr	r3, [pc, #340]	; (8000b2c <writeSD+0x2ec>)
 80009d6:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	; 0x1b6
	len = snprintf((char*) block, sizeof(block),
 80009da:	667b      	str	r3, [r7, #100]	; 0x64
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 80009dc:	4b53      	ldr	r3, [pc, #332]	; (8000b2c <writeSD+0x2ec>)
 80009de:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
	len = snprintf((char*) block, sizeof(block),
 80009e2:	663b      	str	r3, [r7, #96]	; 0x60
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 80009e4:	4b51      	ldr	r3, [pc, #324]	; (8000b2c <writeSD+0x2ec>)
 80009e6:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
	len = snprintf((char*) block, sizeof(block),
 80009ea:	65fb      	str	r3, [r7, #92]	; 0x5c
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 80009ec:	4b4f      	ldr	r3, [pc, #316]	; (8000b2c <writeSD+0x2ec>)
 80009ee:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
	len = snprintf((char*) block, sizeof(block),
 80009f2:	65bb      	str	r3, [r7, #88]	; 0x58
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <writeSD+0x2ec>)
 80009f6:	f8b3 31be 	ldrh.w	r3, [r3, #446]	; 0x1be
	len = snprintf((char*) block, sizeof(block),
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54

///*Id 260 */  V_CELL_PACK1_1, V_CELL_PACK1_2,V_CELL_PACK1_3,V_CELL_PACK1_4,
///*Id 261 */	V_CELL_PACK1_5, V_CELL_PACK1_6,V_CELL_PACK1_7,V_CELL_PACK1_8,
///*Id 262 */	V_CELL_PACK1_9, V_CELL_PACK1_10,V_CELL_PACK1_11,V_CELL_PACK1_12,
/*Id 263 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 80009fc:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <writeSD+0x2ec>)
 80009fe:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
	len = snprintf((char*) block, sizeof(block),
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
/*Id 263 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000a04:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <writeSD+0x2ec>)
 8000a06:	f8b3 383a 	ldrh.w	r3, [r3, #2106]	; 0x83a
	len = snprintf((char*) block, sizeof(block),
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
/*Id 263 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000a0c:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <writeSD+0x2ec>)
 8000a0e:	f8b3 383c 	ldrh.w	r3, [r3, #2108]	; 0x83c
	len = snprintf((char*) block, sizeof(block),
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
/*Id 263 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <writeSD+0x2ec>)
 8000a16:	f8b3 383e 	ldrh.w	r3, [r3, #2110]	; 0x83e
	len = snprintf((char*) block, sizeof(block),
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
/*Id 264 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1,
 8000a1c:	4b43      	ldr	r3, [pc, #268]	; (8000b2c <writeSD+0x2ec>)
 8000a1e:	f8b3 3840 	ldrh.w	r3, [r3, #2112]	; 0x840
	len = snprintf((char*) block, sizeof(block),
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
/*Id 264 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1,
 8000a24:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <writeSD+0x2ec>)
 8000a26:	f8b3 3842 	ldrh.w	r3, [r3, #2114]	; 0x842
	len = snprintf((char*) block, sizeof(block),
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
/*Id 264 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1,
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <writeSD+0x2ec>)
 8000a2e:	f8b3 3844 	ldrh.w	r3, [r3, #2116]	; 0x844
	len = snprintf((char*) block, sizeof(block),
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38

///*Id 265 */  V_CELL_PACK2_1, V_CELL_PACK2_2,V_CELL_PACK2_3,V_CELL_PACK2_4,
///*Id 266 */	V_CELL_PACK2_5, V_CELL_PACK2_6,V_CELL_PACK2_7,V_CELL_PACK2_8,
///*Id 267 */	V_CELL_PACK2_9, V_CELL_PACK2_10,V_CELL_PACK2_11,V_CELL_PACK2_12,
/*Id 268 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000a34:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <writeSD+0x2ec>)
 8000a36:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
	len = snprintf((char*) block, sizeof(block),
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
/*Id 268 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000a3c:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <writeSD+0x2ec>)
 8000a3e:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
	len = snprintf((char*) block, sizeof(block),
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
/*Id 268 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000a44:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <writeSD+0x2ec>)
 8000a46:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
	len = snprintf((char*) block, sizeof(block),
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
/*Id 268 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <writeSD+0x2ec>)
 8000a4e:	f8b3 3866 	ldrh.w	r3, [r3, #2150]	; 0x866
	len = snprintf((char*) block, sizeof(block),
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
/*Id 269 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2,
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <writeSD+0x2ec>)
 8000a56:	f8b3 3868 	ldrh.w	r3, [r3, #2152]	; 0x868
	len = snprintf((char*) block, sizeof(block),
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
/*Id 269 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2,
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <writeSD+0x2ec>)
 8000a5e:	f8b3 386a 	ldrh.w	r3, [r3, #2154]	; 0x86a
	len = snprintf((char*) block, sizeof(block),
 8000a62:	623b      	str	r3, [r7, #32]
/*Id 269 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2,
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <writeSD+0x2ec>)
 8000a66:	f8b3 386c 	ldrh.w	r3, [r3, #2156]	; 0x86c
	len = snprintf((char*) block, sizeof(block),
 8000a6a:	61fb      	str	r3, [r7, #28]

///*Id 270 */  V_CELL_PACK3_1, V_CELL_PACK3_2,V_CELL_PACK3_3,V_CELL_PACK3_4,
///*Id 271 */	V_CELL_PACK3_5, V_CELL_PACK3_6,V_CELL_PACK3_7,V_CELL_PACK3_8,
///*Id 272 */	V_CELL_PACK3_9, V_CELL_PACK3_10,V_CELL_PACK3_11,V_CELL_PACK3_12,
/*Id 273 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <writeSD+0x2ec>)
 8000a6e:	f8b3 3888 	ldrh.w	r3, [r3, #2184]	; 0x888
	len = snprintf((char*) block, sizeof(block),
 8000a72:	61bb      	str	r3, [r7, #24]
/*Id 273 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <writeSD+0x2ec>)
 8000a76:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
	len = snprintf((char*) block, sizeof(block),
 8000a7a:	617b      	str	r3, [r7, #20]
/*Id 273 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <writeSD+0x2ec>)
 8000a7e:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
	len = snprintf((char*) block, sizeof(block),
 8000a82:	613b      	str	r3, [r7, #16]
/*Id 273 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <writeSD+0x2ec>)
 8000a86:	f8b3 388e 	ldrh.w	r3, [r3, #2190]	; 0x88e
	len = snprintf((char*) block, sizeof(block),
 8000a8a:	60fb      	str	r3, [r7, #12]
/*Id 274 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3,
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <writeSD+0x2ec>)
 8000a8e:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
	len = snprintf((char*) block, sizeof(block),
 8000a92:	60bb      	str	r3, [r7, #8]
/*Id 274 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3,
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <writeSD+0x2ec>)
 8000a96:	f8b3 3892 	ldrh.w	r3, [r3, #2194]	; 0x892
	len = snprintf((char*) block, sizeof(block),
 8000a9a:	607b      	str	r3, [r7, #4]
/*Id 274 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3,
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <writeSD+0x2ec>)
 8000a9e:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
	len = snprintf((char*) block, sizeof(block),
 8000aa2:	603b      	str	r3, [r7, #0]

///*Id 275 */  V_CELL_PACK4_1, V_CELL_PACK4_2,V_CELL_PACK4_3,V_CELL_PACK4_4,
///*Id 276 */	V_CELL_PACK4_5, V_CELL_PACK4_6,V_CELL_PACK4_7,V_CELL_PACK4_8,
///*Id 277 */	V_CELL_PACK4_9, V_CELL_PACK4_10,V_CELL_PACK4_11,V_CELL_PACK4_12,
/*Id 278 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <writeSD+0x2ec>)
 8000aa6:	f8b3 38b0 	ldrh.w	r3, [r3, #2224]	; 0x8b0
	len = snprintf((char*) block, sizeof(block),
 8000aaa:	461e      	mov	r6, r3
/*Id 278 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <writeSD+0x2ec>)
 8000aae:	f8b3 38b2 	ldrh.w	r3, [r3, #2226]	; 0x8b2
	len = snprintf((char*) block, sizeof(block),
 8000ab2:	461d      	mov	r5, r3
/*Id 278 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <writeSD+0x2ec>)
 8000ab6:	f8b3 38b4 	ldrh.w	r3, [r3, #2228]	; 0x8b4
	len = snprintf((char*) block, sizeof(block),
 8000aba:	461c      	mov	r4, r3
/*Id 278 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <writeSD+0x2ec>)
 8000abe:	f8b3 38b6 	ldrh.w	r3, [r3, #2230]	; 0x8b6
	len = snprintf((char*) block, sizeof(block),
 8000ac2:	4618      	mov	r0, r3
/*Id 279 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <writeSD+0x2ec>)
 8000ac6:	f8b3 38b8 	ldrh.w	r3, [r3, #2232]	; 0x8b8
	len = snprintf((char*) block, sizeof(block),
 8000aca:	4619      	mov	r1, r3
/*Id 279 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <writeSD+0x2ec>)
 8000ace:	f8b3 38ba 	ldrh.w	r3, [r3, #2234]	; 0x8ba
	len = snprintf((char*) block, sizeof(block),
 8000ad2:	461a      	mov	r2, r3
/*Id 279 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4);
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <writeSD+0x2ec>)
 8000ad6:	f8b3 38bc 	ldrh.w	r3, [r3, #2236]	; 0x8bc
	len = snprintf((char*) block, sizeof(block),
 8000ada:	9348      	str	r3, [sp, #288]	; 0x120
 8000adc:	9247      	str	r2, [sp, #284]	; 0x11c
 8000ade:	9146      	str	r1, [sp, #280]	; 0x118
 8000ae0:	9045      	str	r0, [sp, #276]	; 0x114
 8000ae2:	9444      	str	r4, [sp, #272]	; 0x110
 8000ae4:	9543      	str	r5, [sp, #268]	; 0x10c
 8000ae6:	9642      	str	r6, [sp, #264]	; 0x108
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	9241      	str	r2, [sp, #260]	; 0x104
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	9240      	str	r2, [sp, #256]	; 0x100
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	923f      	str	r2, [sp, #252]	; 0xfc
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	923e      	str	r2, [sp, #248]	; 0xf8
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	923d      	str	r2, [sp, #244]	; 0xf4
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	923c      	str	r2, [sp, #240]	; 0xf0
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	923b      	str	r2, [sp, #236]	; 0xec
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	923a      	str	r2, [sp, #232]	; 0xe8
 8000b08:	6a3a      	ldr	r2, [r7, #32]
 8000b0a:	9239      	str	r2, [sp, #228]	; 0xe4
 8000b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0e:	9238      	str	r2, [sp, #224]	; 0xe0
 8000b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b12:	9237      	str	r2, [sp, #220]	; 0xdc
 8000b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b16:	9236      	str	r2, [sp, #216]	; 0xd8
 8000b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b1a:	9235      	str	r2, [sp, #212]	; 0xd4
 8000b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b1e:	9234      	str	r2, [sp, #208]	; 0xd0
 8000b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b22:	9233      	str	r2, [sp, #204]	; 0xcc
 8000b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b26:	9232      	str	r2, [sp, #200]	; 0xc8
 8000b28:	e002      	b.n	8000b30 <writeSD+0x2f0>
 8000b2a:	bf00      	nop
 8000b2c:	24000934 	.word	0x24000934
 8000b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b32:	9231      	str	r2, [sp, #196]	; 0xc4
 8000b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b36:	9230      	str	r2, [sp, #192]	; 0xc0
 8000b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b3a:	922f      	str	r2, [sp, #188]	; 0xbc
 8000b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b3e:	922e      	str	r2, [sp, #184]	; 0xb8
 8000b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b42:	922d      	str	r2, [sp, #180]	; 0xb4
 8000b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b46:	922c      	str	r2, [sp, #176]	; 0xb0
 8000b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b4a:	922b      	str	r2, [sp, #172]	; 0xac
 8000b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b4e:	922a      	str	r2, [sp, #168]	; 0xa8
 8000b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b52:	9229      	str	r2, [sp, #164]	; 0xa4
 8000b54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b56:	9228      	str	r2, [sp, #160]	; 0xa0
 8000b58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b5a:	9227      	str	r2, [sp, #156]	; 0x9c
 8000b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b5e:	9226      	str	r2, [sp, #152]	; 0x98
 8000b60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b62:	9225      	str	r2, [sp, #148]	; 0x94
 8000b64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000b66:	9224      	str	r2, [sp, #144]	; 0x90
 8000b68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000b6a:	9223      	str	r2, [sp, #140]	; 0x8c
 8000b6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b6e:	9222      	str	r2, [sp, #136]	; 0x88
 8000b70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b74:	9221      	str	r2, [sp, #132]	; 0x84
 8000b76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000b7a:	9220      	str	r2, [sp, #128]	; 0x80
 8000b7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000b80:	921f      	str	r2, [sp, #124]	; 0x7c
 8000b82:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000b86:	921e      	str	r2, [sp, #120]	; 0x78
 8000b88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b8c:	921d      	str	r2, [sp, #116]	; 0x74
 8000b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000b92:	921c      	str	r2, [sp, #112]	; 0x70
 8000b94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8000b9a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000b9e:	921a      	str	r2, [sp, #104]	; 0x68
 8000ba0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000ba4:	9219      	str	r2, [sp, #100]	; 0x64
 8000ba6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000baa:	9218      	str	r2, [sp, #96]	; 0x60
 8000bac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000bb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8000bb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000bb6:	9216      	str	r2, [sp, #88]	; 0x58
 8000bb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000bbc:	9215      	str	r2, [sp, #84]	; 0x54
 8000bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000bc2:	9214      	str	r2, [sp, #80]	; 0x50
 8000bc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000bc8:	9213      	str	r2, [sp, #76]	; 0x4c
 8000bca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bce:	9212      	str	r2, [sp, #72]	; 0x48
 8000bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000bd4:	9211      	str	r2, [sp, #68]	; 0x44
 8000bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000bda:	9210      	str	r2, [sp, #64]	; 0x40
 8000bdc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000be0:	920f      	str	r2, [sp, #60]	; 0x3c
 8000be2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000be6:	920e      	str	r2, [sp, #56]	; 0x38
 8000be8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000bec:	920d      	str	r2, [sp, #52]	; 0x34
 8000bee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000bf2:	920c      	str	r2, [sp, #48]	; 0x30
 8000bf4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000bf8:	920b      	str	r2, [sp, #44]	; 0x2c
 8000bfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000bfe:	920a      	str	r2, [sp, #40]	; 0x28
 8000c00:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000c04:	9209      	str	r2, [sp, #36]	; 0x24
 8000c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000c0a:	9208      	str	r2, [sp, #32]
 8000c0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c10:	9207      	str	r2, [sp, #28]
 8000c12:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000c16:	9206      	str	r2, [sp, #24]
 8000c18:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000c1c:	9205      	str	r2, [sp, #20]
 8000c1e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c22:	9204      	str	r2, [sp, #16]
 8000c24:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000c28:	9203      	str	r2, [sp, #12]
 8000c2a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000c2e:	9202      	str	r2, [sp, #8]
 8000c30:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <writeSD+0x47c>)
 8000c42:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <writeSD+0x480>)
 8000c48:	f00d f888 	bl	800dd5c <sniprintf>
 8000c4c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write*/
 8000c50:	2212      	movs	r2, #18
 8000c52:	491c      	ldr	r1, [pc, #112]	; (8000cc4 <writeSD+0x484>)
 8000c54:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <writeSD+0x488>)
 8000c56:	f00b fcbf 	bl	800c5d8 <f_open>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <writeSD+0x488>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <writeSD+0x488>)
 8000c68:	f00c f891 	bl	800cd8e <f_lseek>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	fresult = f_write(&file, block, len, &bytes_written);//write data to the file
 8000c72:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c7a:	4911      	ldr	r1, [pc, #68]	; (8000cc0 <writeSD+0x480>)
 8000c7c:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <writeSD+0x488>)
 8000c7e:	f00b fe69 	bl	800c954 <f_write>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	fresult = f_close(&file);//closes the file
 8000c88:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <writeSD+0x488>)
 8000c8a:	f00c f856 	bl	800cd3a <f_close>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if(fresult == FR_OK){
 8000c94:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d103      	bne.n	8000ca4 <writeSD+0x464>
		_datalog_flag  = 1;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <writeSD+0x48c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e002      	b.n	8000caa <writeSD+0x46a>
	}
	else _datalog_flag = 0;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <writeSD+0x48c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8000caa:	2120      	movs	r1, #32
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <writeSD+0x490>)
 8000cae:	f002 fb70 	bl	8003392 <HAL_GPIO_TogglePin>
}
 8000cb2:	bf00      	nop
 8000cb4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cbc:	080104c4 	.word	0x080104c4
 8000cc0:	24000678 	.word	0x24000678
 8000cc4:	24000660 	.word	0x24000660
 8000cc8:	24000430 	.word	0x24000430
 8000ccc:	24000674 	.word	0x24000674
 8000cd0:	58020c00 	.word	0x58020c00

08000cd4 <Clean_CAN_Struct>:

CanIdData_t can_vector[CAN_IDS_NUMBER];



void Clean_CAN_Struct(void) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	80fb      	strh	r3, [r7, #6]
 8000cde:	e019      	b.n	8000d14 <Clean_CAN_Struct+0x40>
		can_vector[i].word_0 = 0;
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <Clean_CAN_Struct+0x58>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <Clean_CAN_Struct+0x58>)
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <Clean_CAN_Struct+0x58>)
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	2200      	movs	r2, #0
 8000d00:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <Clean_CAN_Struct+0x58>)
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4413      	add	r3, r2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	3301      	adds	r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d1a:	d3e1      	bcc.n	8000ce0 <Clean_CAN_Struct+0xc>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	24000934 	.word	0x24000934

08000d30 <canMessageReceived>:

void canMessageReceived(uint16_t id, uint8_t *data) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	80fb      	strh	r3, [r7, #6]
	if (id > CAN_IDS_NUMBER - 1)
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d42:	d220      	bcs.n	8000d86 <canMessageReceived+0x56>
		return;

	uint16_t *data_word = (uint16_t*) data;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	60fb      	str	r3, [r7, #12]
	can_vector[id].word_0 = data_word[0];
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	8811      	ldrh	r1, [r2, #0]
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <canMessageReceived+0x64>)
 8000d50:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[id].word_1 = data_word[1];
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	8851      	ldrh	r1, [r2, #2]
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <canMessageReceived+0x64>)
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4413      	add	r3, r2
 8000d60:	460a      	mov	r2, r1
 8000d62:	805a      	strh	r2, [r3, #2]
	can_vector[id].word_2 = data_word[2];
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	8891      	ldrh	r1, [r2, #4]
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <canMessageReceived+0x64>)
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4413      	add	r3, r2
 8000d70:	460a      	mov	r2, r1
 8000d72:	809a      	strh	r2, [r3, #4]
	can_vector[id].word_3 = data_word[3];
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	88d1      	ldrh	r1, [r2, #6]
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <canMessageReceived+0x64>)
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4413      	add	r3, r2
 8000d80:	460a      	mov	r2, r1
 8000d82:	80da      	strh	r2, [r3, #6]
 8000d84:	e000      	b.n	8000d88 <canMessageReceived+0x58>
		return;
 8000d86:	bf00      	nop
}
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	24000934 	.word	0x24000934

08000d98 <initialize_general_CAN>:
uint16_t datageneral[4];
uint32_t idgeneral;


//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <initialize_general_CAN+0x24>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <initialize_general_CAN+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <initialize_general_CAN+0x28>)
 8000dac:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <initialize_general_CAN+0x2c>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc70 	bl	8000694 <initialize_CAN>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	240015b4 	.word	0x240015b4
 8000dc0:	240015b8 	.word	0x240015b8
 8000dc4:	08000dc9 	.word	0x08000dc9

08000dc8 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d043      	beq.n	8000e64 <CAN_general_receive_callback+0x9c>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <CAN_general_receive_callback+0xa4>)
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <CAN_general_receive_callback+0xa8>)
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f001 fa52 	bl	800228c <HAL_FDCAN_GetRxMessage>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 8000dee:	f000 fa65 	bl	80012bc <Error_Handler>
		}

		idgeneral = RxHeader.Identifier;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <CAN_general_receive_callback+0xa8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <CAN_general_receive_callback+0xac>)
 8000df8:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e019      	b.n	8000e34 <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (uint16_t)((RxData[i+1] << 8) | RxData[i]);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <CAN_general_receive_callback+0xa4>)
 8000e06:	5cd3      	ldrb	r3, [r2, r3]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4917      	ldr	r1, [pc, #92]	; (8000e6c <CAN_general_receive_callback+0xa4>)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	440b      	add	r3, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b219      	sxth	r1, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da00      	bge.n	8000e22 <CAN_general_receive_callback+0x5a>
 8000e20:	3301      	adds	r3, #1
 8000e22:	105b      	asrs	r3, r3, #1
 8000e24:	461a      	mov	r2, r3
 8000e26:	b289      	uxth	r1, r1
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <CAN_general_receive_callback+0xb0>)
 8000e2a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i = 0; i < 8; i += 2){
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3302      	adds	r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	dde2      	ble.n	8000e00 <CAN_general_receive_callback+0x38>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6); //A LED DA CAN (PIN 3, TÁ QUEIMADA)
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	480f      	ldr	r0, [pc, #60]	; (8000e7c <CAN_general_receive_callback+0xb4>)
 8000e3e:	f002 faa8 	bl	8003392 <HAL_GPIO_TogglePin>

		canMessageReceived(idgeneral, datageneral);
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <CAN_general_receive_callback+0xac>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	490b      	ldr	r1, [pc, #44]	; (8000e78 <CAN_general_receive_callback+0xb0>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff70 	bl	8000d30 <canMessageReceived>

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f001 fb87 	bl	8002568 <HAL_FDCAN_ActivateNotification>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <CAN_general_receive_callback+0x9c>
			/* Notification Error */
			Error_Handler();
 8000e60:	f000 fa2c 	bl	80012bc <Error_Handler>
		}
	}
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	240015dc 	.word	0x240015dc
 8000e70:	240015e4 	.word	0x240015e4
 8000e74:	24001614 	.word	0x24001614
 8000e78:	2400160c 	.word	0x2400160c
 8000e7c:	58020c00 	.word	0x58020c00

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fd82 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f820 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 f986 	bl	800119c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000e90:	f000 f898 	bl	8000fc4 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000e94:	f000 f936 	bl	8001104 <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 8000e98:	f000 f916 	bl	80010c8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000e9c:	f008 ff0a 	bl	8009cb4 <MX_FATFS_Init>
  MX_IWDG1_Init();
 8000ea0:	f000 f8f4 	bl	800108c <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 8000ea4:	f7ff fc34 	bl	8000710 <init_CAN>
  SD_Create_File();
 8000ea8:	f7ff fc3c 	bl	8000724 <SD_Create_File>
  Cabecalho();
 8000eac:	f7ff fc90 	bl	80007d0 <Cabecalho>
  Clean_CAN_Struct();
 8000eb0:	f7ff ff10 	bl	8000cd4 <Clean_CAN_Struct>


  HAL_IWDG_Refresh(&hiwdg1);
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <main+0x48>)
 8000eb6:	f002 fad5 	bl	8003464 <HAL_IWDG_Refresh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg1);
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <main+0x48>)
 8000ebc:	f002 fad2 	bl	8003464 <HAL_IWDG_Refresh>
    //Condicoes_Teste();
	  writeSD();
 8000ec0:	f7ff fcbe 	bl	8000840 <writeSD>
	  HAL_IWDG_Refresh(&hiwdg1);
 8000ec4:	e7f9      	b.n	8000eba <main+0x3a>
 8000ec6:	bf00      	nop
 8000ec8:	24001704 	.word	0x24001704

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09c      	sub	sp, #112	; 0x70
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	224c      	movs	r2, #76	; 0x4c
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00c faf4 	bl	800d4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f00c faee 	bl	800d4c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000eec:	2002      	movs	r0, #2
 8000eee:	f002 fac9 	bl	8003484 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <SystemClock_Config+0xf0>)
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <SystemClock_Config+0xf0>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <SystemClock_Config+0xf0>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <SystemClock_Config+0xf4>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a2b      	ldr	r2, [pc, #172]	; (8000fc0 <SystemClock_Config+0xf4>)
 8000f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <SystemClock_Config+0xf4>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f24:	bf00      	nop
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <SystemClock_Config+0xf4>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f32:	d1f8      	bne.n	8000f26 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f34:	2309      	movs	r3, #9
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	2302      	movs	r3, #2
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f56:	2304      	movs	r3, #4
 8000f58:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fac2 	bl	80034f8 <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f7a:	f000 f99f 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7e:	233f      	movs	r3, #63	; 0x3f
 8000f80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	2303      	movs	r3, #3
 8000f84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f8e:	2340      	movs	r3, #64	; 0x40
 8000f90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fed5 	bl	8003d54 <HAL_RCC_ClockConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000fb0:	f000 f984 	bl	80012bc <Error_Handler>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3770      	adds	r7, #112	; 0x70
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58000400 	.word	0x58000400
 8000fc0:	58024800 	.word	0x58024800

08000fc4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <MX_FDCAN1_Init+0xc4>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8000ffa:	220d      	movs	r2, #13
 8000ffc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001000:	2202      	movs	r2, #2
 8001002:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001006:	2201      	movs	r2, #1
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800100c:	2202      	movs	r2, #2
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001012:	220d      	movs	r2, #13
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001018:	2202      	movs	r2, #2
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001030:	2220      	movs	r2, #32
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001036:	2204      	movs	r2, #4
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800103c:	2220      	movs	r2, #32
 800103e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001042:	2204      	movs	r2, #4
 8001044:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001048:	2220      	movs	r2, #32
 800104a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800104e:	2204      	movs	r2, #4
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001054:	2220      	movs	r2, #32
 8001056:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800105a:	2220      	movs	r2, #32
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001060:	2220      	movs	r2, #32
 8001062:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 800106c:	2204      	movs	r2, #4
 800106e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_FDCAN1_Init+0xc0>)
 8001072:	f000 fe5d 	bl	8001d30 <HAL_FDCAN_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800107c:	f000 f91e 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24001618 	.word	0x24001618
 8001088:	4000a000 	.word	0x4000a000

0800108c <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_IWDG1_Init+0x34>)
 8001092:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <MX_IWDG1_Init+0x38>)
 8001094:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_IWDG1_Init+0x34>)
 8001098:	2202      	movs	r2, #2
 800109a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_IWDG1_Init+0x34>)
 800109e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010a2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 400;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_IWDG1_Init+0x34>)
 80010a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80010aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_IWDG1_Init+0x34>)
 80010ae:	f002 f98a 	bl	80033c6 <HAL_IWDG_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80010b8:	f000 f900 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	24001704 	.word	0x24001704
 80010c4:	58004800 	.word	0x58004800

080010c8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_SDMMC1_SD_Init+0x34>)
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <MX_SDMMC1_SD_Init+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SDMMC1_SD_Init+0x34>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_SDMMC1_SD_Init+0x34>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_SDMMC1_SD_Init+0x34>)
 80010e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <MX_SDMMC1_SD_Init+0x34>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <MX_SDMMC1_SD_Init+0x34>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	24001714 	.word	0x24001714
 8001100:	52007000 	.word	0x52007000

08001104 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_UART4_Init+0x90>)
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <MX_UART4_Init+0x94>)
 800110c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_UART4_Init+0x90>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_UART4_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_UART4_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_UART4_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_UART4_Init+0x90>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_UART4_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_UART4_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_UART4_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_UART4_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_UART4_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_UART4_Init+0x90>)
 800114e:	f006 ff77 	bl	8008040 <HAL_UART_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001158:	f000 f8b0 	bl	80012bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115c:	2100      	movs	r1, #0
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_UART4_Init+0x90>)
 8001160:	f007 ff14 	bl	8008f8c <HAL_UARTEx_SetTxFifoThreshold>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800116a:	f000 f8a7 	bl	80012bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4808      	ldr	r0, [pc, #32]	; (8001194 <MX_UART4_Init+0x90>)
 8001172:	f007 ff49 	bl	8009008 <HAL_UARTEx_SetRxFifoThreshold>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800117c:	f000 f89e 	bl	80012bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_UART4_Init+0x90>)
 8001182:	f007 feca 	bl	8008f1a <HAL_UARTEx_DisableFifoMode>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f896 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24001790 	.word	0x24001790
 8001198:	40004c00 	.word	0x40004c00

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a3d      	ldr	r2, [pc, #244]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a36      	ldr	r2, [pc, #216]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <MX_GPIO_Init+0x114>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_GPIO_Init+0x114>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <MX_GPIO_Init+0x114>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001212:	4a27      	ldr	r2, [pc, #156]	; (80012b0 <MX_GPIO_Init+0x114>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <MX_GPIO_Init+0x114>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_GPIO_Init+0x114>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <MX_GPIO_Init+0x114>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_GPIO_Init+0x114>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAN_LED_Pin|GNSS_LED_Pin|DATALOG_LED_Pin|ACCEL_LED_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2178      	movs	r1, #120	; 0x78
 800124c:	4819      	ldr	r0, [pc, #100]	; (80012b4 <MX_GPIO_Init+0x118>)
 800124e:	f002 f887 	bl	8003360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001258:	2312      	movs	r3, #18
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001264:	2304      	movs	r3, #4
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4812      	ldr	r0, [pc, #72]	; (80012b8 <MX_GPIO_Init+0x11c>)
 8001270:	f001 feae 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8001274:	2301      	movs	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <MX_GPIO_Init+0x118>)
 8001288:	f001 fea2 	bl	8002fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_LED_Pin GNSS_LED_Pin DATALOG_LED_Pin ACCEL_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin|GNSS_LED_Pin|DATALOG_LED_Pin|ACCEL_LED_Pin;
 800128c:	2378      	movs	r3, #120	; 0x78
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_GPIO_Init+0x118>)
 80012a4:	f001 fe94 	bl	8002fd0 <HAL_GPIO_Init>

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020c00 	.word	0x58020c00
 80012b8:	58020400 	.word	0x58020400

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_MspInit+0x30>)
 80012d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d4:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x30>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x30>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	58024400 	.word	0x58024400

080012fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0b8      	sub	sp, #224	; 0xe0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	22bc      	movs	r2, #188	; 0xbc
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00c f8d3 	bl	800d4c8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_FDCAN_MspInit+0xe0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d152      	bne.n	80013d2 <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001332:	2300      	movs	r3, #0
 8001334:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f003 f896 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8001346:	f7ff ffb9 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_FDCAN_MspInit+0xe4>)
 800134c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001350:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_FDCAN_MspInit+0xe4>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001356:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_FDCAN_MspInit+0xe4>)
 800135c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_FDCAN_MspInit+0xe4>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_FDCAN_MspInit+0xe4>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_FDCAN_MspInit+0xe4>)
 800137a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80013a0:	2309      	movs	r3, #9
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013aa:	4619      	mov	r1, r3
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <HAL_FDCAN_MspInit+0xe8>)
 80013ae:	f001 fe0f 	bl	8002fd0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2013      	movs	r0, #19
 80013b8:	f000 fc85 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80013bc:	2013      	movs	r0, #19
 80013be:	f000 fc9c 	bl	8001cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2015      	movs	r0, #21
 80013c8:	f000 fc7d 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80013cc:	2015      	movs	r0, #21
 80013ce:	f000 fc94 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	37e0      	adds	r7, #224	; 0xe0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	4000a000 	.word	0x4000a000
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020400 	.word	0x58020400

080013e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ba      	sub	sp, #232	; 0xe8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	22bc      	movs	r2, #188	; 0xbc
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00c f85d 	bl	800d4c8 <memset>
  if(hsd->Instance==SDMMC1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_SD_MspInit+0x144>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f040 8085 	bne.w	8001524 <HAL_SD_MspInit+0x13c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800141a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001420:	2300      	movs	r3, #0
 8001422:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f81f 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001434:	f7ff ff42 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_SD_MspInit+0x148>)
 800143a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800143e:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <HAL_SD_MspInit+0x148>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_SD_MspInit+0x148>)
 800144a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <HAL_SD_MspInit+0x148>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_SD_MspInit+0x148>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_SD_MspInit+0x148>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_SD_MspInit+0x148>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_SD_MspInit+0x148>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_SD_MspInit+0x148>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001492:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ac:	230c      	movs	r3, #12
 80014ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014b6:	4619      	mov	r1, r3
 80014b8:	481e      	ldr	r0, [pc, #120]	; (8001534 <HAL_SD_MspInit+0x14c>)
 80014ba:	f001 fd89 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014d8:	230c      	movs	r3, #12
 80014da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <HAL_SD_MspInit+0x14c>)
 80014e6:	f001 fd73 	bl	8002fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ea:	2304      	movs	r3, #4
 80014ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001502:	230c      	movs	r3, #12
 8001504:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800150c:	4619      	mov	r1, r3
 800150e:	480a      	ldr	r0, [pc, #40]	; (8001538 <HAL_SD_MspInit+0x150>)
 8001510:	f001 fd5e 	bl	8002fd0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2031      	movs	r0, #49	; 0x31
 800151a:	f000 fbd4 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800151e:	2031      	movs	r0, #49	; 0x31
 8001520:	f000 fbeb 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	37e8      	adds	r7, #232	; 0xe8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	52007000 	.word	0x52007000
 8001530:	58024400 	.word	0x58024400
 8001534:	58020800 	.word	0x58020800
 8001538:	58020c00 	.word	0x58020c00

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0b8      	sub	sp, #224	; 0xe0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	22bc      	movs	r2, #188	; 0xbc
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00b ffb3 	bl	800d4c8 <memset>
  if(huart->Instance==UART4)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_UART_MspInit+0xbc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d141      	bne.n	80015f0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800156c:	2302      	movs	r3, #2
 800156e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f002 ff76 	bl	800446c <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f7ff fe99 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_UART_MspInit+0xc0>)
 800158c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_UART_MspInit+0xc0>)
 8001592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001596:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_UART_MspInit+0xc0>)
 800159c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0xc0>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_UART_MspInit+0xc0>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_UART_MspInit+0xc0>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015de:	2308      	movs	r3, #8
 80015e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015e8:	4619      	mov	r1, r3
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_UART_MspInit+0xc4>)
 80015ec:	f001 fcf0 	bl	8002fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	37e0      	adds	r7, #224	; 0xe0
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40004c00 	.word	0x40004c00
 80015fc:	58024400 	.word	0x58024400
 8001600:	58020000 	.word	0x58020000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 fa0e 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <FDCAN1_IT0_IRQHandler+0x10>)
 800165e:	f000 fffd 	bl	800265c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24001618 	.word	0x24001618

0800166c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <FDCAN1_IT1_IRQHandler+0x10>)
 8001672:	f000 fff3 	bl	800265c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	24001618 	.word	0x24001618

08001680 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <SDMMC1_IRQHandler+0x10>)
 8001686:	f005 fae7 	bl	8006c58 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	24001714 	.word	0x24001714

08001694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
	return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_kill>:

int _kill(int pid, int sig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ae:	f00b fed3 	bl	800d458 <__errno>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2216      	movs	r2, #22
 80016b6:	601a      	str	r2, [r3, #0]
	return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_exit>:

void _exit (int status)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffe7 	bl	80016a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016d6:	e7fe      	b.n	80016d6 <_exit+0x12>

080016d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e00a      	b.n	8001700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ea:	f3af 8000 	nop.w
 80016ee:	4601      	mov	r1, r0
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf0      	blt.n	80016ea <_read+0x12>
	}

return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e009      	b.n	8001738 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf1      	blt.n	8001724 <_write+0x12>
	}
	return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_close>:

int _close(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001772:	605a      	str	r2, [r3, #4]
	return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_isatty>:

int _isatty(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f00b fe38 	bl	800d458 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	24080000 	.word	0x24080000
 8001814:	00000800 	.word	0x00000800
 8001818:	24001820 	.word	0x24001820
 800181c:	24001a80 	.word	0x24001a80

08001820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <SystemInit+0xec>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <SystemInit+0xec>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <SystemInit+0xf0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	2b06      	cmp	r3, #6
 800183e:	d807      	bhi.n	8001850 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <SystemInit+0xf0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 030f 	bic.w	r3, r3, #15
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <SystemInit+0xf0>)
 800184a:	f043 0307 	orr.w	r3, r3, #7
 800184e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <SystemInit+0xf4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <SystemInit+0xf4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <SystemInit+0xf4>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <SystemInit+0xf4>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	492b      	ldr	r1, [pc, #172]	; (8001914 <SystemInit+0xf4>)
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <SystemInit+0xf8>)
 800186a:	4013      	ands	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <SystemInit+0xf0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <SystemInit+0xf0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 030f 	bic.w	r3, r3, #15
 8001882:	4a23      	ldr	r2, [pc, #140]	; (8001910 <SystemInit+0xf0>)
 8001884:	f043 0307 	orr.w	r3, r3, #7
 8001888:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <SystemInit+0xf4>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <SystemInit+0xf4>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <SystemInit+0xf4>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <SystemInit+0xf4>)
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <SystemInit+0xfc>)
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <SystemInit+0xf4>)
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <SystemInit+0x100>)
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <SystemInit+0xf4>)
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <SystemInit+0x104>)
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <SystemInit+0xf4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <SystemInit+0xf4>)
 80018b6:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <SystemInit+0x104>)
 80018b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <SystemInit+0xf4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <SystemInit+0xf4>)
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <SystemInit+0x104>)
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <SystemInit+0xf4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <SystemInit+0xf4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <SystemInit+0xf4>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <SystemInit+0xf4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <SystemInit+0x108>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <SystemInit+0x10c>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018ea:	d202      	bcs.n	80018f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <SystemInit+0x110>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <SystemInit+0x114>)
 80018f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018f8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SystemInit+0xec>)
 80018fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001900:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00
 8001910:	52002000 	.word	0x52002000
 8001914:	58024400 	.word	0x58024400
 8001918:	eaf6ed7f 	.word	0xeaf6ed7f
 800191c:	02020200 	.word	0x02020200
 8001920:	01ff0000 	.word	0x01ff0000
 8001924:	01010280 	.word	0x01010280
 8001928:	5c001000 	.word	0x5c001000
 800192c:	ffff0000 	.word	0xffff0000
 8001930:	51008108 	.word	0x51008108
 8001934:	52004000 	.word	0x52004000

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800193c:	f7ff ff70 	bl	8001820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f00b fd7d 	bl	800d464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff fa89 	bl	8000e80 <main>
  bx  lr
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001974:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001978:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800197c:	08010ebc 	.word	0x08010ebc
  ldr r2, =_sbss
 8001980:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001984:	24001a7c 	.word	0x24001a7c

08001988 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC3_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 f98c 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001998:	f002 fb92 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_Init+0x68>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	4913      	ldr	r1, [pc, #76]	; (80019f8 <HAL_Init+0x6c>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_Init+0x68>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_Init+0x6c>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_Init+0x70>)
 80019ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_Init+0x74>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f814 	bl	8001a04 <HAL_InitTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e002      	b.n	80019ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019e6:	f7ff fc6f 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58024400 	.word	0x58024400
 80019f8:	08010638 	.word	0x08010638
 80019fc:	24000004 	.word	0x24000004
 8001a00:	24000000 	.word	0x24000000

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_InitTick+0x60>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e021      	b.n	8001a5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_InitTick+0x64>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_InitTick+0x60>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f971 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f93b 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x68>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2400000c 	.word	0x2400000c
 8001a68:	24000000 	.word	0x24000000
 8001a6c:	24000008 	.word	0x24000008

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	2400000c 	.word	0x2400000c
 8001a94:	24001824 	.word	0x24001824

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	24001824 	.word	0x24001824

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2400000c 	.word	0x2400000c

08001af8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetREVID+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0c1b      	lsrs	r3, r3, #16
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	5c001000 	.word	0x5c001000

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	05fa0000 	.word	0x05fa0000

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff40 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff90 	bl	8001c04 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5f 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff33 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa4 	bl	8001c6c <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b098      	sub	sp, #96	; 0x60
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001d38:	4a99      	ldr	r2, [pc, #612]	; (8001fa0 <HAL_FDCAN_Init+0x270>)
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4611      	mov	r1, r2
 8001d40:	224c      	movs	r2, #76	; 0x4c
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00b fbb2 	bl	800d4ac <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e239      	b.n	80021c6 <HAL_FDCAN_Init+0x496>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a93      	ldr	r2, [pc, #588]	; (8001fa4 <HAL_FDCAN_Init+0x274>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d106      	bne.n	8001d6a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d155      	bne.n	8001e22 <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a89      	ldr	r2, [pc, #548]	; (8001fa8 <HAL_FDCAN_Init+0x278>)
 8001d82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a88      	ldr	r2, [pc, #544]	; (8001fac <HAL_FDCAN_Init+0x27c>)
 8001d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a87      	ldr	r2, [pc, #540]	; (8001fb0 <HAL_FDCAN_Init+0x280>)
 8001d92:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a86      	ldr	r2, [pc, #536]	; (8001fb4 <HAL_FDCAN_Init+0x284>)
 8001d9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a85      	ldr	r2, [pc, #532]	; (8001fb8 <HAL_FDCAN_Init+0x288>)
 8001da2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a84      	ldr	r2, [pc, #528]	; (8001fbc <HAL_FDCAN_Init+0x28c>)
 8001daa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a83      	ldr	r2, [pc, #524]	; (8001fc0 <HAL_FDCAN_Init+0x290>)
 8001db2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a82      	ldr	r2, [pc, #520]	; (8001fc4 <HAL_FDCAN_Init+0x294>)
 8001dba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a81      	ldr	r2, [pc, #516]	; (8001fc8 <HAL_FDCAN_Init+0x298>)
 8001dc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a80      	ldr	r2, [pc, #512]	; (8001fcc <HAL_FDCAN_Init+0x29c>)
 8001dca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a7f      	ldr	r2, [pc, #508]	; (8001fd0 <HAL_FDCAN_Init+0x2a0>)
 8001dd2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a7e      	ldr	r2, [pc, #504]	; (8001fd4 <HAL_FDCAN_Init+0x2a4>)
 8001dda:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a7d      	ldr	r2, [pc, #500]	; (8001fd8 <HAL_FDCAN_Init+0x2a8>)
 8001de2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <HAL_FDCAN_Init+0x2ac>)
 8001dea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a7b      	ldr	r2, [pc, #492]	; (8001fe0 <HAL_FDCAN_Init+0x2b0>)
 8001df2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_FDCAN_Init+0x2b4>)
 8001dfa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <HAL_FDCAN_Init+0x2b8>)
 8001e02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a76      	ldr	r2, [pc, #472]	; (8001fec <HAL_FDCAN_Init+0x2bc>)
 8001e14:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0210 	bic.w	r2, r2, #16
 8001e30:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e32:	f7ff fe31 	bl	8001a98 <HAL_GetTick>
 8001e36:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e38:	e014      	b.n	8001e64 <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e3a:	f7ff fe2d 	bl	8001a98 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d90d      	bls.n	8001e64 <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e1b0      	b.n	80021c6 <HAL_FDCAN_Init+0x496>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d0e3      	beq.n	8001e3a <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e82:	f7ff fe09 	bl	8001a98 <HAL_GetTick>
 8001e86:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e88:	e014      	b.n	8001eb4 <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e8a:	f7ff fe05 	bl	8001a98 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b0a      	cmp	r3, #10
 8001e96:	d90d      	bls.n	8001eb4 <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e188      	b.n	80021c6 <HAL_FDCAN_Init+0x496>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0e3      	beq.n	8001e8a <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0202 	orr.w	r2, r2, #2
 8001ed0:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7c1b      	ldrb	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d108      	bne.n	8001eec <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee8:	619a      	str	r2, [r3, #24]
 8001eea:	e007      	b.n	8001efc <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001efa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7c5b      	ldrb	r3, [r3, #17]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d108      	bne.n	8001f16 <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	e007      	b.n	8001f26 <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f24:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7c9b      	ldrb	r3, [r3, #18]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	e007      	b.n	8001f50 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f4e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001f74:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0210 	bic.w	r2, r2, #16
 8001f84:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d130      	bne.n	8001ff0 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0204 	orr.w	r2, r2, #4
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	e054      	b.n	800204a <HAL_FDCAN_Init+0x31a>
 8001fa0:	080105a4 	.word	0x080105a4
 8001fa4:	4000a000 	.word	0x4000a000
 8001fa8:	08002b59 	.word	0x08002b59
 8001fac:	08002b6f 	.word	0x08002b6f
 8001fb0:	08002b85 	.word	0x08002b85
 8001fb4:	08002b9b 	.word	0x08002b9b
 8001fb8:	08002bb1 	.word	0x08002bb1
 8001fbc:	08002bc5 	.word	0x08002bc5
 8001fc0:	08002bdb 	.word	0x08002bdb
 8001fc4:	08002bf1 	.word	0x08002bf1
 8001fc8:	08002c2d 	.word	0x08002c2d
 8001fcc:	08002c05 	.word	0x08002c05
 8001fd0:	08002c19 	.word	0x08002c19
 8001fd4:	08002c41 	.word	0x08002c41
 8001fd8:	08002c55 	.word	0x08002c55
 8001fdc:	08002c6b 	.word	0x08002c6b
 8001fe0:	08002c81 	.word	0x08002c81
 8001fe4:	08002c97 	.word	0x08002c97
 8001fe8:	08002caf 	.word	0x08002caf
 8001fec:	080012fd 	.word	0x080012fd
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d028      	beq.n	800204a <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d01c      	beq.n	800203a <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0210 	orr.w	r2, r2, #16
 800201e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d110      	bne.n	800204a <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	619a      	str	r2, [r3, #24]
 8002038:	e007      	b.n	800204a <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	3b01      	subs	r3, #1
 8002050:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	3b01      	subs	r3, #1
 8002058:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800205a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002062:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	3b01      	subs	r3, #1
 800206c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002072:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002074:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800207e:	d115      	bne.n	80020ac <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	3b01      	subs	r3, #1
 800208c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800208e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	3b01      	subs	r3, #1
 8002096:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002098:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	3b01      	subs	r3, #1
 80020a2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80020a8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80020aa:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	4413      	add	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d011      	beq.n	80020fc <HAL_FDCAN_Init+0x3cc>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80020e0:	f023 0107 	bic.w	r1, r3, #7
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3360      	adds	r3, #96	; 0x60
 80020ec:	443b      	add	r3, r7
 80020ee:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <HAL_FDCAN_Init+0x3f8>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800210c:	f023 0107 	bic.w	r1, r3, #7
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3360      	adds	r3, #96	; 0x60
 8002118:	443b      	add	r3, r7
 800211a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_FDCAN_Init+0x426>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002138:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	443b      	add	r3, r7
 8002146:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800214a:	011a      	lsls	r2, r3, #4
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <HAL_FDCAN_Init+0x454>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002166:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	3360      	adds	r3, #96	; 0x60
 8002172:	443b      	add	r3, r7
 8002174:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002178:	021a      	lsls	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_FDCAN_Init+0x4a0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d107      	bne.n	800219e <HAL_FDCAN_Init+0x46e>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f022 0203 	bic.w	r2, r2, #3
 800219c:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fd84 	bl	8002cc4 <FDCAN_CalcultateRamBlockAddresses>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80021c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3760      	adds	r7, #96	; 0x60
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	4000a000 	.word	0x4000a000

080021d4 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e015      	b.n	8002228 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d104      	bne.n	8002212 <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002210:	e009      	b.n	8002226 <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d111      	bne.n	800226c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e008      	b.n	800227e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800228c:	b480      	push	{r7}
 800228e:	b08b      	sub	sp, #44	; 0x2c
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022a4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80022a6:	7efb      	ldrb	r3, [r7, #27]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f040 814b 	bne.w	8002544 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d14d      	bne.n	8002350 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e13e      	b.n	8002556 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e12c      	b.n	8002556 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002304:	0e1b      	lsrs	r3, r3, #24
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10b      	bne.n	8002326 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002316:	0fdb      	lsrs	r3, r3, #31
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002320:	d101      	bne.n	8002326 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002322:	2301      	movs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	69f9      	ldr	r1, [r7, #28]
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	e069      	b.n	8002424 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b41      	cmp	r3, #65	; 0x41
 8002354:	d14d      	bne.n	80023f2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800235e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0ed      	b.n	8002556 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002390:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0db      	b.n	8002556 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80023a6:	0e1b      	lsrs	r3, r3, #24
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10b      	bne.n	80023c8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023b8:	0fdb      	lsrs	r3, r3, #31
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023c2:	d101      	bne.n	80023c8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	69f9      	ldr	r1, [r7, #28]
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	e018      	b.n	8002424 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d309      	bcc.n	8002410 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0a2      	b.n	8002556 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e005      	b.n	8002454 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3304      	adds	r3, #4
 8002470:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e1b      	lsrs	r3, r3, #24
 80024a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0fda      	lsrs	r2, r3, #31
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3304      	adds	r3, #4
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	e00a      	b.n	80024de <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	441a      	add	r2, r3
 80024ce:	6839      	ldr	r1, [r7, #0]
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	440b      	add	r3, r1
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	3301      	adds	r3, #1
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80024e6:	5cd3      	ldrb	r3, [r2, r3]
 80024e8:	461a      	mov	r2, r3
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d3eb      	bcc.n	80024c8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d105      	bne.n	8002502 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002500:	e01e      	b.n	8002540 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b41      	cmp	r3, #65	; 0x41
 8002506:	d105      	bne.n	8002514 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002512:	e015      	b.n	8002540 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b1f      	cmp	r3, #31
 8002518:	d808      	bhi.n	800252c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	fa01 f202 	lsl.w	r2, r1, r2
 8002526:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800252a:	e009      	b.n	8002540 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 021f 	and.w	r2, r3, #31
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e008      	b.n	8002556 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800254a:	f043 0208 	orr.w	r2, r3, #8
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	372c      	adds	r7, #44	; 0x2c
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	08010648 	.word	0x08010648

08002568 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800257a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d002      	beq.n	8002588 <HAL_FDCAN_ActivateNotification+0x20>
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d155      	bne.n	8002634 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80025a6:	e014      	b.n	80025d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d108      	bne.n	80025ca <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0202 	orr.w	r2, r2, #2
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025c8:	e003      	b.n	80025d2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2203      	movs	r2, #3
 80025d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d009      	beq.n	80025f0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	430a      	orrs	r2, r1
 800260a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_FDCAN_ActivateNotification+0xec>)
 8002618:	4013      	ands	r3, r2
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	430b      	orrs	r3, r1
 8002620:	6553      	str	r3, [r2, #84]	; 0x54
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0f9b      	lsrs	r3, r3, #30
 800262a:	490b      	ldr	r1, [pc, #44]	; (8002658 <HAL_FDCAN_ActivateNotification+0xf0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e008      	b.n	8002646 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	3fcfffff 	.word	0x3fcfffff
 8002658:	4000a800 	.word	0x4000a800

0800265c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b096      	sub	sp, #88	; 0x58
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002664:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	079b      	lsls	r3, r3, #30
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800266c:	4b95      	ldr	r3, [pc, #596]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	079b      	lsls	r3, r3, #30
 8002672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002674:	4013      	ands	r3, r2
 8002676:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800268c:	4013      	ands	r3, r2
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026a4:	4013      	ands	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026bc:	4013      	ands	r3, r2
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026d4:	4013      	ands	r3, r2
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026ec:	4013      	ands	r3, r2
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_FDCAN_IRQHandler+0xd6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_FDCAN_IRQHandler+0xd6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002720:	651a      	str	r2, [r3, #80]	; 0x50
 8002722:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002734:	0a9b      	lsrs	r3, r3, #10
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01f      	beq.n	800277e <HAL_FDCAN_IRQHandler+0x122>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	0a9b      	lsrs	r3, r3, #10
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d019      	beq.n	800277e <HAL_FDCAN_IRQHandler+0x122>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800275c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800275e:	4013      	ands	r3, r2
 8002760:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276a:	651a      	str	r2, [r3, #80]	; 0x50
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <HAL_FDCAN_IRQHandler+0x148>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800278a:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_FDCAN_IRQHandler+0x26c>)
 800278c:	400b      	ands	r3, r1
 800278e:	6513      	str	r3, [r2, #80]	; 0x50
 8002790:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	0f9b      	lsrs	r3, r3, #30
 8002796:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800279e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80027a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <HAL_FDCAN_IRQHandler+0x16e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80027b0:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_FDCAN_IRQHandler+0x26c>)
 80027b2:	400b      	ands	r3, r1
 80027b4:	6513      	str	r3, [r2, #80]	; 0x50
 80027b6:	4a43      	ldr	r2, [pc, #268]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 80027b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ba:	0f9b      	lsrs	r3, r3, #30
 80027bc:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00f      	beq.n	80027f0 <HAL_FDCAN_IRQHandler+0x194>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027d6:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_FDCAN_IRQHandler+0x26c>)
 80027d8:	400b      	ands	r3, r1
 80027da:	6513      	str	r3, [r2, #80]	; 0x50
 80027dc:	4a39      	ldr	r2, [pc, #228]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 80027de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e0:	0f9b      	lsrs	r3, r3, #30
 80027e2:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80027f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00f      	beq.n	8002816 <HAL_FDCAN_IRQHandler+0x1ba>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_FDCAN_IRQHandler+0x26c>)
 80027fe:	400b      	ands	r3, r1
 8002800:	6513      	str	r3, [r2, #80]	; 0x50
 8002802:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 8002804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002806:	0f9b      	lsrs	r3, r3, #30
 8002808:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002810:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002818:	0adb      	lsrs	r3, r3, #11
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <HAL_FDCAN_IRQHandler+0x1ec>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	0adb      	lsrs	r3, r3, #11
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00c      	beq.n	8002848 <HAL_FDCAN_IRQHandler+0x1ec>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002836:	651a      	str	r2, [r3, #80]	; 0x50
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	0a5b      	lsrs	r3, r3, #9
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01f      	beq.n	8002894 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d019      	beq.n	8002894 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002874:	4013      	ands	r3, r2
 8002876:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002880:	651a      	str	r2, [r3, #80]	; 0x50
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800288e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002896:	0cdb      	lsrs	r3, r3, #19
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	0cdb      	lsrs	r3, r3, #19
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028b4:	651a      	str	r2, [r3, #80]	; 0x50
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_FDCAN_IRQHandler+0x268>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80028c2:	e003      	b.n	80028cc <HAL_FDCAN_IRQHandler+0x270>
 80028c4:	4000a800 	.word	0x4000a800
 80028c8:	3fcfffff 	.word	0x3fcfffff
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_FDCAN_IRQHandler+0x2a6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00c      	beq.n	8002902 <HAL_FDCAN_IRQHandler+0x2a6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028f0:	651a      	str	r2, [r3, #80]	; 0x50
 80028f2:	4b96      	ldr	r3, [pc, #600]	; (8002b4c <HAL_FDCAN_IRQHandler+0x4f0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002904:	0c9b      	lsrs	r3, r3, #18
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_FDCAN_IRQHandler+0x2d8>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	0c9b      	lsrs	r3, r3, #18
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_FDCAN_IRQHandler+0x2d8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002922:	651a      	str	r2, [r3, #80]	; 0x50
 8002924:	4b89      	ldr	r3, [pc, #548]	; (8002b4c <HAL_FDCAN_IRQHandler+0x4f0>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002936:	0c5b      	lsrs	r3, r3, #17
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d015      	beq.n	800296c <HAL_FDCAN_IRQHandler+0x310>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <HAL_FDCAN_IRQHandler+0x310>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002954:	651a      	str	r2, [r3, #80]	; 0x50
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_FDCAN_IRQHandler+0x4f0>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002962:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800296c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00f      	beq.n	8002992 <HAL_FDCAN_IRQHandler+0x336>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002978:	4b75      	ldr	r3, [pc, #468]	; (8002b50 <HAL_FDCAN_IRQHandler+0x4f4>)
 800297a:	400b      	ands	r3, r1
 800297c:	6513      	str	r3, [r2, #80]	; 0x50
 800297e:	4a73      	ldr	r2, [pc, #460]	; (8002b4c <HAL_FDCAN_IRQHandler+0x4f0>)
 8002980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002982:	0f9b      	lsrs	r3, r3, #30
 8002984:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800298c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002994:	2b00      	cmp	r3, #0
 8002996:	d011      	beq.n	80029bc <HAL_FDCAN_IRQHandler+0x360>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800299e:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_FDCAN_IRQHandler+0x4f4>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	6513      	str	r3, [r2, #80]	; 0x50
 80029a4:	4a69      	ldr	r2, [pc, #420]	; (8002b4c <HAL_FDCAN_IRQHandler+0x4f0>)
 80029a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a8:	0f9b      	lsrs	r3, r3, #30
 80029aa:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80029b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a64      	ldr	r2, [pc, #400]	; (8002b54 <HAL_FDCAN_IRQHandler+0x4f8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	f040 80b4 	bne.w	8002b30 <HAL_FDCAN_IRQHandler+0x4d4>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80ac 	beq.w	8002b30 <HAL_FDCAN_IRQHandler+0x4d4>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ec:	4013      	ands	r3, r2
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a04:	4013      	ands	r3, r2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002a2a:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	6a3a      	ldr	r2, [r7, #32]
 8002a34:	4013      	ands	r3, r2
 8002a36:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002a42:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6c:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a86:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01c      	beq.n	8002ada <HAL_FDCAN_IRQHandler+0x47e>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d016      	beq.n	8002ada <HAL_FDCAN_IRQHandler+0x47e>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	0c1b      	lsrs	r3, r3, #16
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2240      	movs	r2, #64	; 0x40
 8002aca:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae6:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_FDCAN_IRQHandler+0x4b6>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_FDCAN_IRQHandler+0x4d4>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_FDCAN_IRQHandler+0x4e8>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002b44:	bf00      	nop
 8002b46:	3758      	adds	r7, #88	; 0x58
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	4000a800 	.word	0x4000a800
 8002b50:	3fcfffff 	.word	0x3fcfffff
 8002b54:	4000a000 	.word	0x4000a000

08002b58 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002cda:	4ba7      	ldr	r3, [pc, #668]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	0091      	lsls	r1, r2, #2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d1a:	4b97      	ldr	r3, [pc, #604]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	0091      	lsls	r1, r2, #2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	041a      	lsls	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4413      	add	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002d5c:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	0091      	lsls	r1, r2, #2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	041a      	lsls	r2, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	0091      	lsls	r1, r2, #2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dbe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002dec:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	0091      	lsls	r1, r2, #2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002e18:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	0091      	lsls	r1, r2, #2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	041a      	lsls	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	4413      	add	r3, r2
 8002e50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	0091      	lsls	r1, r2, #2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	430b      	orrs	r3, r1
 8002e68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	061a      	lsls	r2, r3, #24
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea8:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d915      	bls.n	8002fa0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002f74:	e006      	b.n	8002f84 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002f76:	bf00      	nop
 8002f78:	ffff0003 	.word	0xffff0003
 8002f7c:	10002b00 	.word	0x10002b00
 8002f80:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2203      	movs	r2, #3
 8002f98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e010      	b.n	8002fc2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e005      	b.n	8002fb4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3f3      	bcc.n	8002fa8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_GPIO_Init+0x234>)
 8002fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fe2:	e194      	b.n	800330e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8186 	beq.w	8003308 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d005      	beq.n	8003014 <HAL_GPIO_Init+0x44>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d130      	bne.n	8003076 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800304a:	2201      	movs	r2, #1
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	f003 0201 	and.w	r2, r3, #1
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b03      	cmp	r3, #3
 8003080:	d017      	beq.n	80030b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d123      	bne.n	8003106 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	08da      	lsrs	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3208      	adds	r2, #8
 80030c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0203 	and.w	r2, r3, #3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80e0 	beq.w	8003308 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_GPIO_Init+0x238>)
 800314a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800314e:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <HAL_GPIO_Init+0x238>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_GPIO_Init+0x238>)
 800315a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_GPIO_Init+0x23c>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <HAL_GPIO_Init+0x240>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d052      	beq.n	8003238 <HAL_GPIO_Init+0x268>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_GPIO_Init+0x244>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_GPIO_Init+0x22e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <HAL_GPIO_Init+0x248>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <HAL_GPIO_Init+0x22a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_GPIO_Init+0x24c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d025      	beq.n	80031f6 <HAL_GPIO_Init+0x226>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_GPIO_Init+0x250>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01f      	beq.n	80031f2 <HAL_GPIO_Init+0x222>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_GPIO_Init+0x254>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x21e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <HAL_GPIO_Init+0x258>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x21a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_GPIO_Init+0x25c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x216>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_GPIO_Init+0x260>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x212>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_GPIO_Init+0x264>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x20e>
 80031da:	2309      	movs	r3, #9
 80031dc:	e02d      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031de:	230a      	movs	r3, #10
 80031e0:	e02b      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031e2:	2308      	movs	r3, #8
 80031e4:	e029      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031e6:	2307      	movs	r3, #7
 80031e8:	e027      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e025      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e023      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e021      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e01f      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e01d      	b.n	800323a <HAL_GPIO_Init+0x26a>
 80031fe:	2301      	movs	r3, #1
 8003200:	e01b      	b.n	800323a <HAL_GPIO_Init+0x26a>
 8003202:	bf00      	nop
 8003204:	58000080 	.word	0x58000080
 8003208:	58024400 	.word	0x58024400
 800320c:	58000400 	.word	0x58000400
 8003210:	58020000 	.word	0x58020000
 8003214:	58020400 	.word	0x58020400
 8003218:	58020800 	.word	0x58020800
 800321c:	58020c00 	.word	0x58020c00
 8003220:	58021000 	.word	0x58021000
 8003224:	58021400 	.word	0x58021400
 8003228:	58021800 	.word	0x58021800
 800322c:	58021c00 	.word	0x58021c00
 8003230:	58022000 	.word	0x58022000
 8003234:	58022400 	.word	0x58022400
 8003238:	2300      	movs	r3, #0
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324a:	4938      	ldr	r1, [pc, #224]	; (800332c <HAL_GPIO_Init+0x35c>)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800327e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f ae63 	bne.w	8002fe4 <HAL_GPIO_Init+0x14>
  }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3724      	adds	r7, #36	; 0x24
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	58000400 	.word	0x58000400

08003330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e001      	b.n	8003352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800337c:	e003      	b.n	8003386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a4:	887a      	ldrh	r2, [r7, #2]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	041a      	lsls	r2, r3, #16
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	400b      	ands	r3, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	619a      	str	r2, [r3, #24]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e041      	b.n	800345c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80033e0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f245 5255 	movw	r2, #21845	; 0x5555
 80033ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6852      	ldr	r2, [r2, #4]
 80033f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6892      	ldr	r2, [r2, #8]
 80033fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003400:	f7fe fb4a 	bl	8001a98 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003406:	e00f      	b.n	8003428 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003408:	f7fe fb46 	bl	8001a98 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b31      	cmp	r3, #49	; 0x31
 8003414:	d908      	bls.n	8003428 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e019      	b.n	800345c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e8      	bne.n	8003408 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d005      	beq.n	8003450 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68d2      	ldr	r2, [r2, #12]
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	e004      	b.n	800345a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003474:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_PWREx_ConfigSupply+0x70>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d00a      	beq.n	80034ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_PWREx_ConfigSupply+0x70>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01f      	b.n	80034ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e01d      	b.n	80034ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_PWREx_ConfigSupply+0x70>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	490f      	ldr	r1, [pc, #60]	; (80034f4 <HAL_PWREx_ConfigSupply+0x70>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034be:	f7fe faeb 	bl	8001a98 <HAL_GetTick>
 80034c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034c4:	e009      	b.n	80034da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034c6:	f7fe fae7 	bl	8001a98 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034d4:	d901      	bls.n	80034da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e007      	b.n	80034ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_PWREx_ConfigSupply+0x70>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e6:	d1ee      	bne.n	80034c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	58024800 	.word	0x58024800

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f000 bc1d 	b.w	8003d46 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8087 	beq.w	8003628 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351a:	4b99      	ldr	r3, [pc, #612]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003524:	4b96      	ldr	r3, [pc, #600]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b10      	cmp	r3, #16
 800352e:	d007      	beq.n	8003540 <HAL_RCC_OscConfig+0x48>
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	2b18      	cmp	r3, #24
 8003534:	d110      	bne.n	8003558 <HAL_RCC_OscConfig+0x60>
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d10b      	bne.n	8003558 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4b8f      	ldr	r3, [pc, #572]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d06c      	beq.n	8003626 <HAL_RCC_OscConfig+0x12e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d168      	bne.n	8003626 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e3f6      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d106      	bne.n	8003570 <HAL_RCC_OscConfig+0x78>
 8003562:	4b87      	ldr	r3, [pc, #540]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a86      	ldr	r2, [pc, #536]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e02e      	b.n	80035ce <HAL_RCC_OscConfig+0xd6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10c      	bne.n	8003592 <HAL_RCC_OscConfig+0x9a>
 8003578:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a80      	ldr	r2, [pc, #512]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b7e      	ldr	r3, [pc, #504]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7d      	ldr	r2, [pc, #500]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	e01d      	b.n	80035ce <HAL_RCC_OscConfig+0xd6>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800359a:	d10c      	bne.n	80035b6 <HAL_RCC_OscConfig+0xbe>
 800359c:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b75      	ldr	r3, [pc, #468]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a74      	ldr	r2, [pc, #464]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	e00b      	b.n	80035ce <HAL_RCC_OscConfig+0xd6>
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a71      	ldr	r2, [pc, #452]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6e      	ldr	r2, [pc, #440]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fe fa5f 	bl	8001a98 <HAL_GetTick>
 80035da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035de:	f7fe fa5b 	bl	8001a98 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b64      	cmp	r3, #100	; 0x64
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e3aa      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035f0:	4b63      	ldr	r3, [pc, #396]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0xe6>
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fa4b 	bl	8001a98 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003606:	f7fe fa47 	bl	8001a98 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e396      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003618:	4b59      	ldr	r3, [pc, #356]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x10e>
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80cb 	beq.w	80037cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003636:	4b52      	ldr	r3, [pc, #328]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_RCC_OscConfig+0x164>
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b18      	cmp	r3, #24
 8003650:	d156      	bne.n	8003700 <HAL_RCC_OscConfig+0x208>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d151      	bne.n	8003700 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365c:	4b48      	ldr	r3, [pc, #288]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_OscConfig+0x17c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e368      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 0219 	bic.w	r2, r3, #25
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	493f      	ldr	r1, [pc, #252]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003686:	f7fe fa07 	bl	8001a98 <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368e:	f7fe fa03 	bl	8001a98 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e352      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	f7fe fa24 	bl	8001af8 <HAL_GetREVID>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d817      	bhi.n	80036ea <HAL_RCC_OscConfig+0x1f2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1dc>
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036ca:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d2:	e07b      	b.n	80037cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	031b      	lsls	r3, r3, #12
 80036e2:	4927      	ldr	r1, [pc, #156]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e8:	e070      	b.n	80037cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	4921      	ldr	r1, [pc, #132]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036fe:	e065      	b.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d048      	beq.n	800379a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 0219 	bic.w	r2, r3, #25
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	491a      	ldr	r1, [pc, #104]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fe f9bd 	bl	8001a98 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003722:	f7fe f9b9 	bl	8001a98 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e308      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	f7fe f9da 	bl	8001af8 <HAL_GetREVID>
 8003744:	4603      	mov	r3, r0
 8003746:	f241 0203 	movw	r2, #4099	; 0x1003
 800374a:	4293      	cmp	r3, r2
 800374c:	d81a      	bhi.n	8003784 <HAL_RCC_OscConfig+0x28c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d108      	bne.n	8003768 <HAL_RCC_OscConfig+0x270>
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800375e:	4a08      	ldr	r2, [pc, #32]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003764:	6053      	str	r3, [r2, #4]
 8003766:	e031      	b.n	80037cc <HAL_RCC_OscConfig+0x2d4>
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	4902      	ldr	r1, [pc, #8]	; (8003780 <HAL_RCC_OscConfig+0x288>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
 800377c:	e026      	b.n	80037cc <HAL_RCC_OscConfig+0x2d4>
 800377e:	bf00      	nop
 8003780:	58024400 	.word	0x58024400
 8003784:	4b9a      	ldr	r3, [pc, #616]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	4997      	ldr	r1, [pc, #604]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
 8003798:	e018      	b.n	80037cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b95      	ldr	r3, [pc, #596]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a94      	ldr	r2, [pc, #592]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe f977 	bl	8001a98 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fe f973 	bl	8001a98 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e2c2      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c0:	4b8b      	ldr	r3, [pc, #556]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a9 	beq.w	800392c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037da:	4b85      	ldr	r3, [pc, #532]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037e4:	4b82      	ldr	r3, [pc, #520]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d007      	beq.n	8003800 <HAL_RCC_OscConfig+0x308>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	d13a      	bne.n	800386c <HAL_RCC_OscConfig+0x374>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d135      	bne.n	800386c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003800:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x320>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e296      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003818:	f7fe f96e 	bl	8001af8 <HAL_GetREVID>
 800381c:	4603      	mov	r3, r0
 800381e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003822:	4293      	cmp	r3, r2
 8003824:	d817      	bhi.n	8003856 <HAL_RCC_OscConfig+0x35e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	2b20      	cmp	r3, #32
 800382c:	d108      	bne.n	8003840 <HAL_RCC_OscConfig+0x348>
 800382e:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003836:	4a6e      	ldr	r2, [pc, #440]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800383c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800383e:	e075      	b.n	800392c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	069b      	lsls	r3, r3, #26
 800384e:	4968      	ldr	r1, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003854:	e06a      	b.n	800392c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003856:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	4962      	ldr	r1, [pc, #392]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800386a:	e05f      	b.n	800392c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d042      	beq.n	80038fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 800387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe f90a 	bl	8001a98 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003888:	f7fe f906 	bl	8001a98 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e255      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800389a:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a6:	f7fe f927 	bl	8001af8 <HAL_GetREVID>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d817      	bhi.n	80038e4 <HAL_RCC_OscConfig+0x3ec>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d108      	bne.n	80038ce <HAL_RCC_OscConfig+0x3d6>
 80038bc:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038c4:	4a4a      	ldr	r2, [pc, #296]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038ca:	6053      	str	r3, [r2, #4]
 80038cc:	e02e      	b.n	800392c <HAL_RCC_OscConfig+0x434>
 80038ce:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	4944      	ldr	r1, [pc, #272]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
 80038e2:	e023      	b.n	800392c <HAL_RCC_OscConfig+0x434>
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	493f      	ldr	r1, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
 80038f8:	e018      	b.n	800392c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80038fa:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a3c      	ldr	r2, [pc, #240]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fe f8c7 	bl	8001a98 <HAL_GetTick>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800390e:	f7fe f8c3 	bl	8001a98 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e212      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f0      	bne.n	800390e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d036      	beq.n	80039a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d019      	beq.n	8003974 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003940:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003944:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe f8a4 	bl	8001a98 <HAL_GetTick>
 8003950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003954:	f7fe f8a0 	bl	8001a98 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e1ef      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x45c>
 8003972:	e018      	b.n	80039a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fe f88a 	bl	8001a98 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe f886 	bl	8001a98 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e1d5      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d039      	beq.n	8003a26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039c6:	f7fe f867 	bl	8001a98 <HAL_GetTick>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039ce:	f7fe f863 	bl	8001a98 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e1b2      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x4d6>
 80039ec:	e01b      	b.n	8003a26 <HAL_RCC_OscConfig+0x52e>
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039f4:	4b9b      	ldr	r3, [pc, #620]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a9a      	ldr	r2, [pc, #616]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 80039fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a00:	f7fe f84a 	bl	8001a98 <HAL_GetTick>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a08:	f7fe f846 	bl	8001a98 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e195      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a1a:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8081 	beq.w	8003b36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a34:	4b8c      	ldr	r3, [pc, #560]	; (8003c68 <HAL_RCC_OscConfig+0x770>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a8b      	ldr	r2, [pc, #556]	; (8003c68 <HAL_RCC_OscConfig+0x770>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a40:	f7fe f82a 	bl	8001a98 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fe f826 	bl	8001a98 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e175      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5a:	4b83      	ldr	r3, [pc, #524]	; (8003c68 <HAL_RCC_OscConfig+0x770>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d106      	bne.n	8003a7c <HAL_RCC_OscConfig+0x584>
 8003a6e:	4b7d      	ldr	r3, [pc, #500]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a7c      	ldr	r2, [pc, #496]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	e02d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x5e0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10c      	bne.n	8003a9e <HAL_RCC_OscConfig+0x5a6>
 8003a84:	4b77      	ldr	r3, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a76      	ldr	r2, [pc, #472]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003a96:	f023 0304 	bic.w	r3, r3, #4
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9c:	e01c      	b.n	8003ad8 <HAL_RCC_OscConfig+0x5e0>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d10c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c8>
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	4b6c      	ldr	r3, [pc, #432]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a6b      	ldr	r2, [pc, #428]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	e00b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x5e0>
 8003ac0:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a67      	ldr	r2, [pc, #412]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
 8003acc:	4b65      	ldr	r3, [pc, #404]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a64      	ldr	r2, [pc, #400]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ad2:	f023 0304 	bic.w	r3, r3, #4
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d015      	beq.n	8003b0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7fd ffda 	bl	8001a98 <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fd ffd6 	bl	8001a98 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e123      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afe:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ee      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x5f0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd ffc4 	bl	8001a98 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fd ffc0 	bl	8001a98 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e10d      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ee      	bne.n	8003b14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8102 	beq.w	8003d44 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b40:	4b48      	ldr	r3, [pc, #288]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b48:	2b18      	cmp	r3, #24
 8003b4a:	f000 80bd 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	f040 809e 	bne.w	8003c94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b58:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a41      	ldr	r2, [pc, #260]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd ff98 	bl	8001a98 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd ff94 	bl	8001a98 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0e3      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x774>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	4931      	ldr	r1, [pc, #196]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	025b      	lsls	r3, r3, #9
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bd4:	4923      	ldr	r1, [pc, #140]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003be6:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_OscConfig+0x778>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003bf2:	00d2      	lsls	r2, r2, #3
 8003bf4:	491b      	ldr	r1, [pc, #108]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f023 020c 	bic.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4917      	ldr	r1, [pc, #92]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c0c:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f023 0202 	bic.w	r2, r3, #2
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	4912      	ldr	r1, [pc, #72]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	4a0d      	ldr	r2, [pc, #52]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd ff1d 	bl	8001a98 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c60:	e011      	b.n	8003c86 <HAL_RCC_OscConfig+0x78e>
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400
 8003c68:	58024800 	.word	0x58024800
 8003c6c:	fffffc0c 	.word	0xfffffc0c
 8003c70:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd ff10 	bl	8001a98 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e05f      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <HAL_RCC_OscConfig+0x858>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x77c>
 8003c92:	e057      	b.n	8003d44 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b2e      	ldr	r3, [pc, #184]	; (8003d50 <HAL_RCC_OscConfig+0x858>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_RCC_OscConfig+0x858>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fefa 	bl	8001a98 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fef6 	bl	8001a98 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e045      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x858>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x7b0>
 8003cc6:	e03d      	b.n	8003d44 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x858>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_OscConfig+0x858>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d031      	beq.n	8003d40 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f003 0203 	and.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d12a      	bne.n	8003d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d122      	bne.n	8003d40 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d11a      	bne.n	8003d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	0a5b      	lsrs	r3, r3, #9
 8003d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d111      	bne.n	8003d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	0e1b      	lsrs	r3, r3, #24
 8003d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3730      	adds	r7, #48	; 0x30
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	58024400 	.word	0x58024400

08003d54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e19c      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b8a      	ldr	r3, [pc, #552]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d910      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b87      	ldr	r3, [pc, #540]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 020f 	bic.w	r2, r3, #15
 8003d7e:	4985      	ldr	r1, [pc, #532]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b83      	ldr	r3, [pc, #524]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e184      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d010      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d908      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003db4:	4b78      	ldr	r3, [pc, #480]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	4975      	ldr	r1, [pc, #468]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d010      	beq.n	8003df4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d908      	bls.n	8003df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003de2:	4b6d      	ldr	r3, [pc, #436]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	496a      	ldr	r1, [pc, #424]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d908      	bls.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	495e      	ldr	r1, [pc, #376]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d908      	bls.n	8003e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e3e:	4b56      	ldr	r3, [pc, #344]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4953      	ldr	r1, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d908      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f023 020f 	bic.w	r2, r3, #15
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4947      	ldr	r1, [pc, #284]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d055      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e8a:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4940      	ldr	r1, [pc, #256]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d121      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0f6      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d115      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0ea      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0de      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ee4:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0d6      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f023 0207 	bic.w	r2, r3, #7
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4925      	ldr	r1, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fd fdc7 	bl	8001a98 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0e:	f7fd fdc3 	bl	8001a98 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0be      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d1eb      	bne.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d208      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f023 020f 	bic.w	r2, r3, #15
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d214      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 020f 	bic.w	r2, r3, #15
 8003f7a:	4906      	ldr	r1, [pc, #24]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <HAL_RCC_ClockConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e086      	b.n	80040a2 <HAL_RCC_ClockConfig+0x34e>
 8003f94:	52002000 	.word	0x52002000
 8003f98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d208      	bcs.n	8003fca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fb8:	4b3c      	ldr	r3, [pc, #240]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4939      	ldr	r1, [pc, #228]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	4b34      	ldr	r3, [pc, #208]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d208      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	492e      	ldr	r1, [pc, #184]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	4b28      	ldr	r3, [pc, #160]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004010:	429a      	cmp	r2, r3
 8004012:	d208      	bcs.n	8004026 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	4922      	ldr	r1, [pc, #136]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8004022:	4313      	orrs	r3, r2
 8004024:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800403e:	429a      	cmp	r2, r3
 8004040:	d208      	bcs.n	8004054 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4917      	ldr	r1, [pc, #92]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8004050:	4313      	orrs	r3, r2
 8004052:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004054:	f000 f834 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	4912      	ldr	r1, [pc, #72]	; (80040b0 <HAL_RCC_ClockConfig+0x35c>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_RCC_ClockConfig+0x358>)
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <HAL_RCC_ClockConfig+0x35c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_RCC_ClockConfig+0x360>)
 800408a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <HAL_RCC_ClockConfig+0x364>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_RCC_ClockConfig+0x368>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd fcb4 	bl	8001a04 <HAL_InitTick>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
 80040b0:	08010638 	.word	0x08010638
 80040b4:	24000004 	.word	0x24000004
 80040b8:	24000000 	.word	0x24000000
 80040bc:	24000008 	.word	0x24000008

080040c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c6:	4bb3      	ldr	r3, [pc, #716]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ce:	2b18      	cmp	r3, #24
 80040d0:	f200 8155 	bhi.w	800437e <HAL_RCC_GetSysClockFreq+0x2be>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004141 	.word	0x08004141
 80040e0:	0800437f 	.word	0x0800437f
 80040e4:	0800437f 	.word	0x0800437f
 80040e8:	0800437f 	.word	0x0800437f
 80040ec:	0800437f 	.word	0x0800437f
 80040f0:	0800437f 	.word	0x0800437f
 80040f4:	0800437f 	.word	0x0800437f
 80040f8:	0800437f 	.word	0x0800437f
 80040fc:	08004167 	.word	0x08004167
 8004100:	0800437f 	.word	0x0800437f
 8004104:	0800437f 	.word	0x0800437f
 8004108:	0800437f 	.word	0x0800437f
 800410c:	0800437f 	.word	0x0800437f
 8004110:	0800437f 	.word	0x0800437f
 8004114:	0800437f 	.word	0x0800437f
 8004118:	0800437f 	.word	0x0800437f
 800411c:	0800416d 	.word	0x0800416d
 8004120:	0800437f 	.word	0x0800437f
 8004124:	0800437f 	.word	0x0800437f
 8004128:	0800437f 	.word	0x0800437f
 800412c:	0800437f 	.word	0x0800437f
 8004130:	0800437f 	.word	0x0800437f
 8004134:	0800437f 	.word	0x0800437f
 8004138:	0800437f 	.word	0x0800437f
 800413c:	08004173 	.word	0x08004173
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004140:	4b94      	ldr	r3, [pc, #592]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800414c:	4b91      	ldr	r3, [pc, #580]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	4a90      	ldr	r2, [pc, #576]	; (8004398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800415e:	e111      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004160:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004162:	61bb      	str	r3, [r7, #24]
    break;
 8004164:	e10e      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004166:	4b8d      	ldr	r3, [pc, #564]	; (800439c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004168:	61bb      	str	r3, [r7, #24]
    break;
 800416a:	e10b      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800416c:	4b8c      	ldr	r3, [pc, #560]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800416e:	61bb      	str	r3, [r7, #24]
    break;
 8004170:	e108      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004172:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800417c:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004186:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004188:	4b82      	ldr	r3, [pc, #520]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004192:	4b80      	ldr	r3, [pc, #512]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	08db      	lsrs	r3, r3, #3
 8004198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80e1 	beq.w	8004378 <HAL_RCC_GetSysClockFreq+0x2b8>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	f000 8083 	beq.w	80042c4 <HAL_RCC_GetSysClockFreq+0x204>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	f200 80a1 	bhi.w	8004308 <HAL_RCC_GetSysClockFreq+0x248>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x114>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d056      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x1c0>
 80041d2:	e099      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041d4:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02d      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041e0:	4b6c      	ldr	r3, [pc, #432]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	08db      	lsrs	r3, r3, #3
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	4a6b      	ldr	r2, [pc, #428]	; (8004398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420a:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421a:	ed97 6a02 	vldr	s12, [r7, #8]
 800421e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800422e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004236:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800423a:	e087      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004246:	eddf 6a58 	vldr	s13, [pc, #352]	; 80043a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800424a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424e:	4b51      	ldr	r3, [pc, #324]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004262:	eddf 5a50 	vldr	s11, [pc, #320]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800427e:	e065      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	4b40      	ldr	r3, [pc, #256]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042c2:	e043      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80043b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004306:	e021      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a26 	vldr	s13, [pc, #152]	; 80043ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a02 	vldr	s12, [r7, #8]
 800432e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80043a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800434a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004356:	3301      	adds	r3, #1
 8004358:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004364:	edd7 6a07 	vldr	s13, [r7, #28]
 8004368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004370:	ee17 3a90 	vmov	r3, s15
 8004374:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004376:	e005      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    break;
 800437c:	e002      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004380:	61bb      	str	r3, [r7, #24]
    break;
 8004382:	bf00      	nop
  }

  return sysclockfreq;
 8004384:	69bb      	ldr	r3, [r7, #24]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3724      	adds	r7, #36	; 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	58024400 	.word	0x58024400
 8004398:	03d09000 	.word	0x03d09000
 800439c:	003d0900 	.word	0x003d0900
 80043a0:	007a1200 	.word	0x007a1200
 80043a4:	46000000 	.word	0x46000000
 80043a8:	4c742400 	.word	0x4c742400
 80043ac:	4a742400 	.word	0x4a742400
 80043b0:	4af42400 	.word	0x4af42400

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043ba:	f7ff fe81 	bl	80040c0 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_RCC_GetHCLKFreq+0x50>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490f      	ldr	r1, [pc, #60]	; (8004408 <HAL_RCC_GetHCLKFreq+0x54>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_RCC_GetHCLKFreq+0x50>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_GetHCLKFreq+0x54>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	4a07      	ldr	r2, [pc, #28]	; (800440c <HAL_RCC_GetHCLKFreq+0x58>)
 80043f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043f2:	4a07      	ldr	r2, [pc, #28]	; (8004410 <HAL_RCC_GetHCLKFreq+0x5c>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <HAL_RCC_GetHCLKFreq+0x58>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	58024400 	.word	0x58024400
 8004408:	08010638 	.word	0x08010638
 800440c:	24000004 	.word	0x24000004
 8004410:	24000000 	.word	0x24000000

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004418:	f7ff ffcc 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4904      	ldr	r1, [pc, #16]	; (800443c <HAL_RCC_GetPCLK1Freq+0x28>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	58024400 	.word	0x58024400
 800443c:	08010638 	.word	0x08010638

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004444:	f7ff ffb6 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4904      	ldr	r1, [pc, #16]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	58024400 	.word	0x58024400
 8004468:	08010638 	.word	0x08010638

0800446c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004474:	2300      	movs	r3, #0
 8004476:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004478:	2300      	movs	r3, #0
 800447a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d03f      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004490:	d02a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004496:	d824      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d018      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800449e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a2:	d81e      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ac:	d007      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044ae:	e018      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b0:	4ba3      	ldr	r3, [pc, #652]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4aa2      	ldr	r2, [pc, #648]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044bc:	e015      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2102      	movs	r1, #2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 fff9 	bl	80064bc <RCCEx_PLL2_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044ce:	e00c      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f002 f8a2 	bl	8006620 <RCCEx_PLL3_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
      break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80044f0:	4b93      	ldr	r3, [pc, #588]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fc:	4990      	ldr	r1, [pc, #576]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	650b      	str	r3, [r1, #80]	; 0x50
 8004502:	e001      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d03d      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	2b04      	cmp	r3, #4
 800451a:	d826      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004539 	.word	0x08004539
 8004528:	08004547 	.word	0x08004547
 800452c:	08004559 	.word	0x08004559
 8004530:	08004571 	.word	0x08004571
 8004534:	08004571 	.word	0x08004571
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004538:	4b81      	ldr	r3, [pc, #516]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	4a80      	ldr	r2, [pc, #512]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800453e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004544:	e015      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	2100      	movs	r1, #0
 800454c:	4618      	mov	r0, r3
 800454e:	f001 ffb5 	bl	80064bc <RCCEx_PLL2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3324      	adds	r3, #36	; 0x24
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f002 f85e 	bl	8006620 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004578:	4b71      	ldr	r3, [pc, #452]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	f023 0207 	bic.w	r2, r3, #7
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	496e      	ldr	r1, [pc, #440]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004586:	4313      	orrs	r3, r2
 8004588:	650b      	str	r3, [r1, #80]	; 0x50
 800458a:	e001      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004598:	2b00      	cmp	r3, #0
 800459a:	d042      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a4:	d02b      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045aa:	d825      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045ac:	2bc0      	cmp	r3, #192	; 0xc0
 80045ae:	d028      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045b0:	2bc0      	cmp	r3, #192	; 0xc0
 80045b2:	d821      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d016      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d81d      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d007      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80045c4:	e018      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c6:	4b5e      	ldr	r3, [pc, #376]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	4a5d      	ldr	r2, [pc, #372]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045d2:	e017      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 ff6e 	bl	80064bc <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045e4:	e00e      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f002 f817 	bl	8006620 <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	e002      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80045fe:	bf00      	nop
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800460a:	4b4d      	ldr	r3, [pc, #308]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	494a      	ldr	r1, [pc, #296]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	650b      	str	r3, [r1, #80]	; 0x50
 800461c:	e001      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d049      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004638:	d030      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800463a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800463e:	d82a      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004640:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004644:	d02c      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004646:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800464a:	d824      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004650:	d018      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004656:	d81e      	bhi.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800465c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004660:	d007      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004662:	e018      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004664:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4a35      	ldr	r2, [pc, #212]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800466a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004670:	e017      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f001 ff1f 	bl	80064bc <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004682:	e00e      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3324      	adds	r3, #36	; 0x24
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f001 ffc8 	bl	8006620 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004694:	e005      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80046a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046b6:	4922      	ldr	r1, [pc, #136]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	658b      	str	r3, [r1, #88]	; 0x58
 80046bc:	e001      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	7dfb      	ldrb	r3, [r7, #23]
 80046c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d8:	d030      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80046da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046de:	d82a      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046e4:	d02e      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80046e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046ea:	d824      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f0:	d018      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80046f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f6:	d81e      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80046fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004700:	d007      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004702:	e018      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800470a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004710:	e019      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fecf 	bl	80064bc <RCCEx_PLL2_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004722:	e010      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3324      	adds	r3, #36	; 0x24
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f001 ff78 	bl	8006620 <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004734:	e007      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
      break;
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800473c:	bf00      	nop
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004740:	58024400 	.word	0x58024400
      break;
 8004744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800474c:	4b99      	ldr	r3, [pc, #612]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800475a:	4996      	ldr	r1, [pc, #600]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800475c:	4313      	orrs	r3, r2
 800475e:	658b      	str	r3, [r1, #88]	; 0x58
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d032      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004776:	2b30      	cmp	r3, #48	; 0x30
 8004778:	d01c      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d817      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800477e:	2b20      	cmp	r3, #32
 8004780:	d00c      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004782:	2b20      	cmp	r3, #32
 8004784:	d813      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800478a:	2b10      	cmp	r3, #16
 800478c:	d10f      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478e:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	4a88      	ldr	r2, [pc, #544]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004798:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800479a:	e00e      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2102      	movs	r1, #2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fe8a 	bl	80064bc <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80047ac:	e005      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047b4:	bf00      	nop
 80047b6:	e000      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80047b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047c0:	4b7c      	ldr	r3, [pc, #496]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047cc:	4979      	ldr	r1, [pc, #484]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047d2:	e001      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d047      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ec:	d030      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f2:	d82a      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80047f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047f8:	d02c      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80047fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047fe:	d824      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d018      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480a:	d81e      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d007      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004818:	4b66      	ldr	r3, [pc, #408]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	4a65      	ldr	r2, [pc, #404]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004824:	e017      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f001 fe45 	bl	80064bc <RCCEx_PLL2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004836:	e00e      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 feee 	bl	8006620 <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004848:	e005      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	e002      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	4952      	ldr	r1, [pc, #328]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800486a:	4313      	orrs	r3, r2
 800486c:	650b      	str	r3, [r1, #80]	; 0x50
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d049      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004888:	d02e      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800488a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800488e:	d828      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004894:	d02a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489a:	d822      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800489c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a0:	d026      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80048a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a6:	d81c      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ac:	d010      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80048ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b2:	d816      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01d      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d111      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2101      	movs	r1, #1
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fdf9 	bl	80064bc <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048ce:	e012      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	2101      	movs	r1, #1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 fea2 	bl	8006620 <RCCEx_PLL3_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80048e0:	e009      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
      break;
 80048e6:	e006      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048e8:	bf00      	nop
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048ec:	bf00      	nop
 80048ee:	e002      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80048f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048fc:	4b2d      	ldr	r3, [pc, #180]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	492a      	ldr	r1, [pc, #168]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800490a:	4313      	orrs	r3, r2
 800490c:	650b      	str	r3, [r1, #80]	; 0x50
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d04d      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800492a:	d02e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004930:	d828      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d02a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d822      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800493e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004942:	d026      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004944:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004948:	d81c      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800494a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494e:	d010      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004954:	d816      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01d      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800495a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800495e:	d111      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fda8 	bl	80064bc <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004970:	e012      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f001 fe51 	bl	8006620 <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004982:	e009      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
      break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800498a:	bf00      	nop
 800498c:	e004      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049ac:	4901      	ldr	r1, [pc, #4]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	658b      	str	r3, [r1, #88]	; 0x58
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80049b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d0:	d00e      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80049d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d6:	d814      	bhi.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d015      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80049dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e0:	d10f      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e2:	4baf      	ldr	r3, [pc, #700]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4aae      	ldr	r2, [pc, #696]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80049ee:	e00c      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 fd60 	bl	80064bc <RCCEx_PLL2_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a00:	e003      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
      break;
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a10:	4ba3      	ldr	r3, [pc, #652]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1c:	49a0      	ldr	r1, [pc, #640]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	650b      	str	r3, [r1, #80]	; 0x50
 8004a22:	e001      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d032      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d81b      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a55 	.word	0x08004a55
 8004a4c:	08004a63 	.word	0x08004a63
 8004a50:	08004a7b 	.word	0x08004a7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b92      	ldr	r3, [pc, #584]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4a91      	ldr	r2, [pc, #580]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a60:	e00c      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fd27 	bl	80064bc <RCCEx_PLL2_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	e000      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004a82:	4b87      	ldr	r3, [pc, #540]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	f023 0203 	bic.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	4984      	ldr	r1, [pc, #528]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a94:	e001      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8086 	beq.w	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aa8:	4b7e      	ldr	r3, [pc, #504]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a7d      	ldr	r2, [pc, #500]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab4:	f7fc fff0 	bl	8001a98 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aba:	e009      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abc:	f7fc ffec 	bl	8001a98 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d902      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	75fb      	strb	r3, [r7, #23]
        break;
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad0:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ef      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d166      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ae2:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004aec:	4053      	eors	r3, r2
 8004aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af6:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b00:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a66      	ldr	r2, [pc, #408]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0c:	4b64      	ldr	r3, [pc, #400]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a63      	ldr	r2, [pc, #396]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b18:	4a61      	ldr	r2, [pc, #388]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b28:	d115      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fc ffb5 	bl	8001a98 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b30:	e00b      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fc ffb1 	bl	8001a98 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d902      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	75fb      	strb	r3, [r7, #23]
            break;
 8004b48:	e005      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b4a:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ed      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d126      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004b6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b7a:	0919      	lsrs	r1, r3, #4
 8004b7c:	4b4a      	ldr	r3, [pc, #296]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004b7e:	400b      	ands	r3, r1
 8004b80:	4947      	ldr	r1, [pc, #284]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	610b      	str	r3, [r1, #16]
 8004b86:	e005      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004b88:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	4a44      	ldr	r2, [pc, #272]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b92:	6113      	str	r3, [r2, #16]
 8004b94:	4b42      	ldr	r3, [pc, #264]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba2:	493f      	ldr	r1, [pc, #252]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	670b      	str	r3, [r1, #112]	; 0x70
 8004ba8:	e004      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	75bb      	strb	r3, [r7, #22]
 8004bae:	e001      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8085 	beq.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc6:	2b28      	cmp	r3, #40	; 0x28
 8004bc8:	d866      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004cad 	.word	0x08004cad
 8004bd4:	08004c99 	.word	0x08004c99
 8004bd8:	08004c99 	.word	0x08004c99
 8004bdc:	08004c99 	.word	0x08004c99
 8004be0:	08004c99 	.word	0x08004c99
 8004be4:	08004c99 	.word	0x08004c99
 8004be8:	08004c99 	.word	0x08004c99
 8004bec:	08004c99 	.word	0x08004c99
 8004bf0:	08004c75 	.word	0x08004c75
 8004bf4:	08004c99 	.word	0x08004c99
 8004bf8:	08004c99 	.word	0x08004c99
 8004bfc:	08004c99 	.word	0x08004c99
 8004c00:	08004c99 	.word	0x08004c99
 8004c04:	08004c99 	.word	0x08004c99
 8004c08:	08004c99 	.word	0x08004c99
 8004c0c:	08004c99 	.word	0x08004c99
 8004c10:	08004c87 	.word	0x08004c87
 8004c14:	08004c99 	.word	0x08004c99
 8004c18:	08004c99 	.word	0x08004c99
 8004c1c:	08004c99 	.word	0x08004c99
 8004c20:	08004c99 	.word	0x08004c99
 8004c24:	08004c99 	.word	0x08004c99
 8004c28:	08004c99 	.word	0x08004c99
 8004c2c:	08004c99 	.word	0x08004c99
 8004c30:	08004cad 	.word	0x08004cad
 8004c34:	08004c99 	.word	0x08004c99
 8004c38:	08004c99 	.word	0x08004c99
 8004c3c:	08004c99 	.word	0x08004c99
 8004c40:	08004c99 	.word	0x08004c99
 8004c44:	08004c99 	.word	0x08004c99
 8004c48:	08004c99 	.word	0x08004c99
 8004c4c:	08004c99 	.word	0x08004c99
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004c99 	.word	0x08004c99
 8004c58:	08004c99 	.word	0x08004c99
 8004c5c:	08004c99 	.word	0x08004c99
 8004c60:	08004c99 	.word	0x08004c99
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	08004cad 	.word	0x08004cad
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	2101      	movs	r1, #1
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fc1e 	bl	80064bc <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c84:	e013      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3324      	adds	r3, #36	; 0x24
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fcc7 	bl	8006620 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004c96:	e00a      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	e007      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	58024800 	.word	0x58024800
 8004ca8:	00ffffcf 	.word	0x00ffffcf
      break;
 8004cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004cb4:	4b96      	ldr	r3, [pc, #600]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc0:	4993      	ldr	r1, [pc, #588]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8004cc6:	e001      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d038      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d821      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d2b 	.word	0x08004d2b
 8004cec:	08004d01 	.word	0x08004d01
 8004cf0:	08004d13 	.word	0x08004d13
 8004cf4:	08004d2b 	.word	0x08004d2b
 8004cf8:	08004d2b 	.word	0x08004d2b
 8004cfc:	08004d2b 	.word	0x08004d2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 fbd8 	bl	80064bc <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d10:	e00c      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3324      	adds	r3, #36	; 0x24
 8004d16:	2101      	movs	r1, #1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fc81 	bl	8006620 <RCCEx_PLL3_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d22:	e003      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
      break;
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004d32:	4b77      	ldr	r3, [pc, #476]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	4974      	ldr	r1, [pc, #464]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	654b      	str	r3, [r1, #84]	; 0x54
 8004d44:	e001      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	2b05      	cmp	r3, #5
 8004d5e:	d821      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004dab 	.word	0x08004dab
 8004d6c:	08004d81 	.word	0x08004d81
 8004d70:	08004d93 	.word	0x08004d93
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fb98 	bl	80064bc <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3324      	adds	r3, #36	; 0x24
 8004d96:	2101      	movs	r1, #1
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 fc41 	bl	8006620 <RCCEx_PLL3_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004db2:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	f023 0207 	bic.w	r2, r3, #7
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	4953      	ldr	r1, [pc, #332]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	658b      	str	r3, [r1, #88]	; 0x58
 8004dc6:	e001      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d04b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de2:	d02e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de8:	d828      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d02a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d822      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dfa:	d026      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004dfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e00:	d81c      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e06:	d010      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0c:	d816      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01d      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e16:	d111      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fb4c 	bl	80064bc <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e28:	e012      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3324      	adds	r3, #36	; 0x24
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 fbf5 	bl	8006620 <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004e3a:	e009      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e42:	bf00      	nop
 8004e44:	e004      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e56:	4b2e      	ldr	r3, [pc, #184]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	492a      	ldr	r1, [pc, #168]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	654b      	str	r3, [r1, #84]	; 0x54
 8004e6a:	e001      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d04d      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e86:	d02e      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004e88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e8c:	d828      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e92:	d02a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d822      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e9e:	d026      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea4:	d81c      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d010      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb0:	d816      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fafa 	bl	80064bc <RCCEx_PLL2_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ecc:	e012      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3324      	adds	r3, #36	; 0x24
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fba3 	bl	8006620 <RCCEx_PLL3_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ede:	e009      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee4:	e006      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f08:	4901      	ldr	r1, [pc, #4]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f0e:	e003      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d04b      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f2e:	d02e      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004f30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f34:	d828      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3a:	d02a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d822      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f46:	d026      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004f48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f4c:	d81c      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f52:	d010      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f58:	d816      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01d      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	d111      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 faa6 	bl	80064bc <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f74:	e012      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 fb4f 	bl	8006620 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004f86:	e009      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fa2:	4b9d      	ldr	r3, [pc, #628]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fb0:	4999      	ldr	r1, [pc, #612]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	658b      	str	r3, [r1, #88]	; 0x58
 8004fb6:	e001      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd2:	d10a      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3324      	adds	r3, #36	; 0x24
 8004fd8:	2102      	movs	r1, #2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 fb20 	bl	8006620 <RCCEx_PLL3_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004fea:	4b8b      	ldr	r3, [pc, #556]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff8:	4987      	ldr	r1, [pc, #540]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005014:	d10a      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3324      	adds	r3, #36	; 0x24
 800501a:	2102      	movs	r1, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f001 faff 	bl	8006620 <RCCEx_PLL3_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800502c:	4b7a      	ldr	r3, [pc, #488]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503a:	4977      	ldr	r1, [pc, #476]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800503c:	4313      	orrs	r3, r2
 800503e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d034      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005056:	d01d      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800505c:	d817      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005066:	d009      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005068:	e011      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fa23 	bl	80064bc <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800507a:	e00c      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 facc 	bl	8006620 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800508c:	e003      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
      break;
 8005092:	e000      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800509c:	4b5e      	ldr	r3, [pc, #376]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050aa:	495b      	ldr	r1, [pc, #364]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	658b      	str	r3, [r1, #88]	; 0x58
 80050b0:	e001      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d033      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050cc:	d01c      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80050ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050d2:	d816      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80050d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d8:	d003      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80050da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050de:	d007      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80050e0:	e00f      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e2:	4b4d      	ldr	r3, [pc, #308]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4a4c      	ldr	r2, [pc, #304]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80050ee:	e00c      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3324      	adds	r3, #36	; 0x24
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 fa92 	bl	8006620 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005100:	e003      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
      break;
 8005106:	e000      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	493e      	ldr	r1, [pc, #248]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005120:	4313      	orrs	r3, r2
 8005122:	654b      	str	r3, [r1, #84]	; 0x54
 8005124:	e001      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d029      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800513e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005142:	d007      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005144:	e00f      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	4a33      	ldr	r2, [pc, #204]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800514c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005152:	e00b      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f9ae 	bl	80064bc <RCCEx_PLL2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005164:	e002      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005172:	4b29      	ldr	r3, [pc, #164]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	4926      	ldr	r1, [pc, #152]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005180:	4313      	orrs	r3, r2
 8005182:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005184:	e001      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3324      	adds	r3, #36	; 0x24
 800519a:	2102      	movs	r1, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fa3f 	bl	8006620 <RCCEx_PLL3_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d033      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c0:	d017      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80051c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c6:	d811      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051cc:	d013      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80051ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d2:	d80b      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d106      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80051ea:	e007      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      break;
 80051f0:	e004      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80051fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	4902      	ldr	r1, [pc, #8]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005210:	4313      	orrs	r3, r2
 8005212:	654b      	str	r3, [r1, #84]	; 0x54
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800522c:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	492e      	ldr	r1, [pc, #184]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800523a:	4313      	orrs	r3, r2
 800523c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800524a:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005258:	4926      	ldr	r1, [pc, #152]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800525a:	4313      	orrs	r3, r2
 800525c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005276:	491f      	ldr	r1, [pc, #124]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005278:	4313      	orrs	r3, r2
 800527a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005288:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800528e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005292:	6113      	str	r3, [r2, #16]
 8005294:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800529e:	4915      	ldr	r1, [pc, #84]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	da08      	bge.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	4906      	ldr	r1, [pc, #24]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80052de:	7dbb      	ldrb	r3, [r7, #22]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	58024400 	.word	0x58024400

080052f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b090      	sub	sp, #64	; 0x40
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005306:	f040 8095 	bne.w	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800530a:	4b97      	ldr	r3, [pc, #604]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	2b04      	cmp	r3, #4
 8005318:	f200 8088 	bhi.w	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005339 	.word	0x08005339
 8005328:	08005361 	.word	0x08005361
 800532c:	08005389 	.word	0x08005389
 8005330:	08005425 	.word	0x08005425
 8005334:	080053b1 	.word	0x080053b1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005338:	4b8b      	ldr	r3, [pc, #556]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005344:	d108      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800534a:	4618      	mov	r0, r3
 800534c:	f000 ff64 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005354:	f000 bc94 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800535c:	f000 bc90 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005360:	4b81      	ldr	r3, [pc, #516]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536c:	d108      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800536e:	f107 0318 	add.w	r3, r7, #24
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fca8 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800537c:	f000 bc80 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005384:	f000 bc7c 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005388:	4b77      	ldr	r3, [pc, #476]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005394:	d108      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005396:	f107 030c 	add.w	r3, r7, #12
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fde8 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053a4:	f000 bc6c 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ac:	f000 bc68 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053b0:	4b6d      	ldr	r3, [pc, #436]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053ba:	4b6b      	ldr	r3, [pc, #428]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053cc:	4b66      	ldr	r3, [pc, #408]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	4a65      	ldr	r2, [pc, #404]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053de:	e01f      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053e0:	4b61      	ldr	r3, [pc, #388]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ec:	d106      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f4:	d102      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80053f6:	4b5e      	ldr	r3, [pc, #376]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fa:	e011      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053fc:	4b5a      	ldr	r3, [pc, #360]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005408:	d106      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005410:	d102      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005412:	4b58      	ldr	r3, [pc, #352]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005416:	e003      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800541c:	f000 bc30 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005420:	f000 bc2e 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005424:	4b54      	ldr	r3, [pc, #336]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005428:	f000 bc2a 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005430:	f000 bc26 	b.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543a:	f040 809f 	bne.w	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800543e:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005442:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005446:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d04d      	beq.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005456:	f200 8084 	bhi.w	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	2bc0      	cmp	r3, #192	; 0xc0
 800545e:	d07d      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2bc0      	cmp	r3, #192	; 0xc0
 8005464:	d87d      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d02d      	beq.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d877      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d012      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800547e:	e070      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005480:	4b39      	ldr	r3, [pc, #228]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800548c:	d107      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800548e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fec0 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800549c:	e3f0      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a2:	e3ed      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054a4:	4b30      	ldr	r3, [pc, #192]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b0:	d107      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054b2:	f107 0318 	add.w	r3, r7, #24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fc06 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054c0:	e3de      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054c6:	e3db      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d4:	d107      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054d6:	f107 030c 	add.w	r3, r7, #12
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd48 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054e4:	e3cc      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ea:	e3c9      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054f6:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d10c      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005508:	4b17      	ldr	r3, [pc, #92]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	08db      	lsrs	r3, r3, #3
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	4a16      	ldr	r2, [pc, #88]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551a:	e01e      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005528:	d106      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800552a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005530:	d102      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005536:	e010      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005544:	d106      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554c:	d102      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005552:	e002      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005558:	e392      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800555a:	e391      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005560:	e38e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005566:	e38b      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005568:	58024400 	.word	0x58024400
 800556c:	03d09000 	.word	0x03d09000
 8005570:	003d0900 	.word	0x003d0900
 8005574:	007a1200 	.word	0x007a1200
 8005578:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005582:	f040 809c 	bne.w	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005586:	4b9d      	ldr	r3, [pc, #628]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800558e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005596:	d054      	beq.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800559e:	f200 808b 	bhi.w	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055a8:	f000 8083 	beq.w	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055b2:	f200 8081 	bhi.w	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055bc:	d02f      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c4:	d878      	bhi.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055d2:	d012      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80055d4:	e070      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055d6:	4b89      	ldr	r3, [pc, #548]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e2:	d107      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fe15 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055f2:	e345      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f8:	e342      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055fa:	4b80      	ldr	r3, [pc, #512]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005606:	d107      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005608:	f107 0318 	add.w	r3, r7, #24
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fb5b 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005616:	e333      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800561c:	e330      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800561e:	4b77      	ldr	r3, [pc, #476]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562a:	d107      	bne.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fc9d 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800563a:	e321      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005640:	e31e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005642:	4b6e      	ldr	r3, [pc, #440]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800564a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800564c:	4b6b      	ldr	r3, [pc, #428]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d10c      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800565e:	4b67      	ldr	r3, [pc, #412]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	08db      	lsrs	r3, r3, #3
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	4a65      	ldr	r2, [pc, #404]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	e01e      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005672:	4b62      	ldr	r3, [pc, #392]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d106      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005686:	d102      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005688:	4b5e      	ldr	r3, [pc, #376]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	e010      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800568e:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800569a:	d106      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a2:	d102      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056a4:	4b58      	ldr	r3, [pc, #352]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80056ae:	e2e7      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80056b0:	e2e6      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056b2:	4b56      	ldr	r3, [pc, #344]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b6:	e2e3      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056bc:	e2e0      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c4:	f040 80a7 	bne.w	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80056c8:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056d8:	d055      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056e0:	f200 8096 	bhi.w	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056ea:	f000 8084 	beq.w	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80056f4:	f200 808c 	bhi.w	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056fe:	d030      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005706:	f200 8083 	bhi.w	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005716:	d012      	beq.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005718:	e07a      	b.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800571a:	4b38      	ldr	r3, [pc, #224]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005726:	d107      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd73 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005736:	e2a3      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800573c:	e2a0      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800573e:	4b2f      	ldr	r3, [pc, #188]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574a:	d107      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574c:	f107 0318 	add.w	r3, r7, #24
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fab9 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800575a:	e291      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005760:	e28e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800576e:	d107      	bne.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fbfb 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800577e:	e27f      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005784:	e27c      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800578e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b04      	cmp	r3, #4
 800579a:	d10c      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	08db      	lsrs	r3, r3, #3
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	4a14      	ldr	r2, [pc, #80]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80057ae:	fa22 f303 	lsr.w	r3, r2, r3
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	e01e      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	d106      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ca:	d102      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d0:	e010      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057de:	d106      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e6:	d102      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	e002      	b.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80057f2:	e245      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80057f4:	e244      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057fa:	e241      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80057fc:	58024400 	.word	0x58024400
 8005800:	03d09000 	.word	0x03d09000
 8005804:	003d0900 	.word	0x003d0900
 8005808:	007a1200 	.word	0x007a1200
 800580c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005814:	e234      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581c:	f040 809c 	bne.w	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005820:	4b9b      	ldr	r3, [pc, #620]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005824:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005830:	d054      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005838:	f200 808b 	bhi.w	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005842:	f000 8083 	beq.w	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800584c:	f200 8081 	bhi.w	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005856:	d02f      	beq.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585e:	d878      	bhi.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d012      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800586e:	e070      	b.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005870:	4b87      	ldr	r3, [pc, #540]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800587c:	d107      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800587e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fcc8 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800588c:	e1f8      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005892:	e1f5      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005894:	4b7e      	ldr	r3, [pc, #504]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800589c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a0:	d107      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058a2:	f107 0318 	add.w	r3, r7, #24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fa0e 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058b0:	e1e6      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b6:	e1e3      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058b8:	4b75      	ldr	r3, [pc, #468]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c4:	d107      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fb50 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058d4:	e1d4      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058da:	e1d1      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058dc:	4b6c      	ldr	r3, [pc, #432]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058e6:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d10c      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80058f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058f8:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	08db      	lsrs	r3, r3, #3
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	4a64      	ldr	r2, [pc, #400]	; (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590a:	e01e      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800590c:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005918:	d106      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005920:	d102      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005922:	4b5d      	ldr	r3, [pc, #372]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005926:	e010      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005934:	d106      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593c:	d102      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800593e:	4b57      	ldr	r3, [pc, #348]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005942:	e002      	b.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005948:	e19a      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800594a:	e199      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800594c:	4b54      	ldr	r3, [pc, #336]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005950:	e196      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005956:	e193      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800595e:	d173      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005960:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005968:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005970:	d02f      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005978:	d863      	bhi.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d012      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005988:	e05b      	b.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800598a:	4b41      	ldr	r3, [pc, #260]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005996:	d107      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f993 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059a6:	e16b      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ac:	e168      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ae:	4b38      	ldr	r3, [pc, #224]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d107      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059bc:	f107 030c 	add.w	r3, r7, #12
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fad5 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059ca:	e159      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d0:	e156      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059dc:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059ee:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	08db      	lsrs	r3, r3, #3
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a00:	e01e      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a16:	d102      	bne.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a18:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1c:	e010      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2a:	d106      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a32:	d102      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a38:	e002      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a3e:	e11f      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a40:	e11e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a46:	e11b      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4e:	d13e      	bne.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d01d      	beq.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005a68:	e02e      	b.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a76:	d107      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fbcb 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a86:	e0fb      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a8c:	e0f8      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	03d09000 	.word	0x03d09000
 8005a98:	003d0900 	.word	0x003d0900
 8005a9c:	007a1200 	.word	0x007a1200
 8005aa0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aa4:	4b79      	ldr	r3, [pc, #484]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab2:	f107 0318 	add.w	r3, r7, #24
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f906 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ac0:	e0de      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ac6:	e0db      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005acc:	e0d8      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad4:	f040 8085 	bne.w	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005ad8:	4b6c      	ldr	r3, [pc, #432]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005adc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ae0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ae8:	d06b      	beq.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af0:	d874      	bhi.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d056      	beq.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d86c      	bhi.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b08:	d03b      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b10:	d864      	bhi.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b18:	d021      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b20:	d85c      	bhi.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2e:	d004      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005b30:	e054      	b.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b32:	f000 f8b3 	bl	8005c9c <HAL_RCCEx_GetD3PCLK1Freq>
 8005b36:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005b38:	e0a2      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b3a:	4b54      	ldr	r3, [pc, #336]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b46:	d107      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b48:	f107 0318 	add.w	r3, r7, #24
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f8bb 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b56:	e093      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b5c:	e090      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b5e:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f9fd 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b7a:	e081      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b80:	e07e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b82:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d109      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b8e:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	08db      	lsrs	r3, r3, #3
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	4a3d      	ldr	r2, [pc, #244]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ba0:	e06e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba6:	e06b      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ba8:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb4:	d102      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005bb6:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bba:	e061      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc0:	e05e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bc2:	4b32      	ldr	r3, [pc, #200]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005bd0:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bd4:	e054      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bda:	e051      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005be0:	e04e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be8:	d148      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005bea:	4b28      	ldr	r3, [pc, #160]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bf2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfa:	d02a      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c02:	d838      	bhi.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c10:	d00d      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005c12:	e030      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c20:	d102      	bne.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005c22:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c26:	e02b      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2c:	e028      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c2e:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fae9 	bl	8006218 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c4a:	e019      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c50:	e016      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5e:	d107      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c60:	f107 0318 	add.w	r3, r7, #24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f82f 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c6e:	e007      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c7a:	e001      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3740      	adds	r7, #64	; 0x40
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	03d09000 	.word	0x03d09000
 8005c94:	003d0900 	.word	0x003d0900
 8005c98:	007a1200 	.word	0x007a1200

08005c9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ca0:	f7fe fb88 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4904      	ldr	r1, [pc, #16]	; (8005cc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	08010638 	.word	0x08010638

08005cc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b089      	sub	sp, #36	; 0x24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cd0:	4ba1      	ldr	r3, [pc, #644]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005cda:	4b9f      	ldr	r3, [pc, #636]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	0b1b      	lsrs	r3, r3, #12
 8005ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ce6:	4b9c      	ldr	r3, [pc, #624]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005cf2:	4b99      	ldr	r3, [pc, #612]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	08db      	lsrs	r3, r3, #3
 8005cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8111 	beq.w	8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	f000 8083 	beq.w	8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	f200 80a1 	bhi.w	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d056      	beq.n	8005de0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d32:	e099      	b.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d34:	4b88      	ldr	r3, [pc, #544]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02d      	beq.n	8005d9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d40:	4b85      	ldr	r3, [pc, #532]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	4a84      	ldr	r2, [pc, #528]	; (8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d9a:	e087      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dae:	4b6a      	ldr	r3, [pc, #424]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dde:	e065      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e22:	e043      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b48      	ldr	r3, [pc, #288]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e66:	e021      	b.n	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005eac:	4b2a      	ldr	r3, [pc, #168]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	0a5b      	lsrs	r3, r3, #9
 8005eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed2:	ee17 2a90 	vmov	r2, s15
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	0c1b      	lsrs	r3, r3, #16
 8005ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee4:	ee07 3a90 	vmov	s15, r3
 8005ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f00:	ee17 2a90 	vmov	r2, s15
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005f08:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	0e1b      	lsrs	r3, r3, #24
 8005f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2e:	ee17 2a90 	vmov	r2, s15
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f36:	e008      	b.n	8005f4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	609a      	str	r2, [r3, #8]
}
 8005f4a:	bf00      	nop
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	03d09000 	.word	0x03d09000
 8005f60:	46000000 	.word	0x46000000
 8005f64:	4c742400 	.word	0x4c742400
 8005f68:	4a742400 	.word	0x4a742400
 8005f6c:	4af42400 	.word	0x4af42400

08005f70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f78:	4ba1      	ldr	r3, [pc, #644]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005f82:	4b9f      	ldr	r3, [pc, #636]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	0d1b      	lsrs	r3, r3, #20
 8005f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f8e:	4b9c      	ldr	r3, [pc, #624]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005f9a:	4b99      	ldr	r3, [pc, #612]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8111 	beq.w	80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	f000 8083 	beq.w	80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	f200 80a1 	bhi.w	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d056      	beq.n	8006088 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fda:	e099      	b.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fdc:	4b88      	ldr	r3, [pc, #544]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02d      	beq.n	8006044 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fe8:	4b85      	ldr	r3, [pc, #532]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	08db      	lsrs	r3, r3, #3
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	4a84      	ldr	r2, [pc, #528]	; (8006204 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006012:	4b7b      	ldr	r3, [pc, #492]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	ed97 6a03 	vldr	s12, [r7, #12]
 8006026:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800602a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006042:	e087      	b.n	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800620c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006056:	4b6a      	ldr	r3, [pc, #424]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006066:	ed97 6a03 	vldr	s12, [r7, #12]
 800606a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800606e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006086:	e065      	b.n	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006092:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b59      	ldr	r3, [pc, #356]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060ca:	e043      	b.n	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006214 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b48      	ldr	r3, [pc, #288]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800610e:	e021      	b.n	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800611e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006122:	4b37      	ldr	r3, [pc, #220]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a03 	vldr	s12, [r7, #12]
 8006136:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006208 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006152:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006154:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	0a5b      	lsrs	r3, r3, #9
 800615a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800617a:	ee17 2a90 	vmov	r2, s15
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006182:	4b1f      	ldr	r3, [pc, #124]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006194:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619c:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a8:	ee17 2a90 	vmov	r2, s15
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	0e1b      	lsrs	r3, r3, #24
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d6:	ee17 2a90 	vmov	r2, s15
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061de:	e008      	b.n	80061f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	609a      	str	r2, [r3, #8]
}
 80061f2:	bf00      	nop
 80061f4:	3724      	adds	r7, #36	; 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400
 8006204:	03d09000 	.word	0x03d09000
 8006208:	46000000 	.word	0x46000000
 800620c:	4c742400 	.word	0x4c742400
 8006210:	4a742400 	.word	0x4a742400
 8006214:	4af42400 	.word	0x4af42400

08006218 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006220:	4ba0      	ldr	r3, [pc, #640]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800622a:	4b9e      	ldr	r3, [pc, #632]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006234:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006236:	4b9b      	ldr	r3, [pc, #620]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006240:	4b98      	ldr	r3, [pc, #608]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	08db      	lsrs	r3, r3, #3
 8006246:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	fb02 f303 	mul.w	r3, r2, r3
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006258:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8111 	beq.w	8006486 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b02      	cmp	r3, #2
 8006268:	f000 8083 	beq.w	8006372 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b02      	cmp	r3, #2
 8006270:	f200 80a1 	bhi.w	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d056      	beq.n	800632e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006280:	e099      	b.n	80063b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006282:	4b88      	ldr	r3, [pc, #544]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d02d      	beq.n	80062ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800628e:	4b85      	ldr	r3, [pc, #532]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	4a83      	ldr	r2, [pc, #524]	; (80064a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b8:	4b7a      	ldr	r3, [pc, #488]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062e8:	e087      	b.n	80063fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fc:	4b69      	ldr	r3, [pc, #420]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006310:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006328:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800632c:	e065      	b.n	80063fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006338:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800633c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006340:	4b58      	ldr	r3, [pc, #352]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006350:	ed97 6a03 	vldr	s12, [r7, #12]
 8006354:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006370:	e043      	b.n	80063fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006384:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006394:	ed97 6a03 	vldr	s12, [r7, #12]
 8006398:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800639c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b4:	e021      	b.n	80063fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80064b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c8:	4b36      	ldr	r3, [pc, #216]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80063dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80063fa:	4b2a      	ldr	r3, [pc, #168]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	0a5b      	lsrs	r3, r3, #9
 8006400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006414:	edd7 6a07 	vldr	s13, [r7, #28]
 8006418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006420:	ee17 2a90 	vmov	r2, s15
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800643e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006442:	edd7 6a07 	vldr	s13, [r7, #28]
 8006446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644e:	ee17 2a90 	vmov	r2, s15
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006456:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	0e1b      	lsrs	r3, r3, #24
 800645c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800646c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006470:	edd7 6a07 	vldr	s13, [r7, #28]
 8006474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647c:	ee17 2a90 	vmov	r2, s15
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006484:	e008      	b.n	8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	609a      	str	r2, [r3, #8]
}
 8006498:	bf00      	nop
 800649a:	3724      	adds	r7, #36	; 0x24
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	58024400 	.word	0x58024400
 80064a8:	03d09000 	.word	0x03d09000
 80064ac:	46000000 	.word	0x46000000
 80064b0:	4c742400 	.word	0x4c742400
 80064b4:	4a742400 	.word	0x4a742400
 80064b8:	4af42400 	.word	0x4af42400

080064bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064ca:	4b53      	ldr	r3, [pc, #332]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d101      	bne.n	80064da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e099      	b.n	800660e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064da:	4b4f      	ldr	r3, [pc, #316]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a4e      	ldr	r2, [pc, #312]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80064e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e6:	f7fb fad7 	bl	8001a98 <HAL_GetTick>
 80064ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064ec:	e008      	b.n	8006500 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064ee:	f7fb fad3 	bl	8001a98 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e086      	b.n	800660e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006500:	4b45      	ldr	r3, [pc, #276]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f0      	bne.n	80064ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800650c:	4b42      	ldr	r3, [pc, #264]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	493f      	ldr	r1, [pc, #252]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 800651c:	4313      	orrs	r3, r2
 800651e:	628b      	str	r3, [r1, #40]	; 0x28
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	3b01      	subs	r3, #1
 8006526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	3b01      	subs	r3, #1
 8006530:	025b      	lsls	r3, r3, #9
 8006532:	b29b      	uxth	r3, r3
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	3b01      	subs	r3, #1
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	3b01      	subs	r3, #1
 800654a:	061b      	lsls	r3, r3, #24
 800654c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006550:	4931      	ldr	r1, [pc, #196]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006556:	4b30      	ldr	r3, [pc, #192]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	492d      	ldr	r1, [pc, #180]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006564:	4313      	orrs	r3, r2
 8006566:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006568:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	f023 0220 	bic.w	r2, r3, #32
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	4928      	ldr	r1, [pc, #160]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	4a26      	ldr	r2, [pc, #152]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006580:	f023 0310 	bic.w	r3, r3, #16
 8006584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <RCCEx_PLL2_Config+0x160>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	69d2      	ldr	r2, [r2, #28]
 8006592:	00d2      	lsls	r2, r2, #3
 8006594:	4920      	ldr	r1, [pc, #128]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800659a:	4b1f      	ldr	r3, [pc, #124]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065a0:	f043 0310 	orr.w	r3, r3, #16
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a19      	ldr	r2, [pc, #100]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065b8:	e00f      	b.n	80065da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d106      	bne.n	80065ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065c0:	4b15      	ldr	r3, [pc, #84]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a14      	ldr	r2, [pc, #80]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065cc:	e005      	b.n	80065da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	4a11      	ldr	r2, [pc, #68]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 80065e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e6:	f7fb fa57 	bl	8001a98 <HAL_GetTick>
 80065ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065ec:	e008      	b.n	8006600 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065ee:	f7fb fa53 	bl	8001a98 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e006      	b.n	800660e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <RCCEx_PLL2_Config+0x15c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0f0      	beq.n	80065ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	58024400 	.word	0x58024400
 800661c:	ffff0007 	.word	0xffff0007

08006620 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800662e:	4b53      	ldr	r3, [pc, #332]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b03      	cmp	r3, #3
 8006638:	d101      	bne.n	800663e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e099      	b.n	8006772 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800663e:	4b4f      	ldr	r3, [pc, #316]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a4e      	ldr	r2, [pc, #312]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800664a:	f7fb fa25 	bl	8001a98 <HAL_GetTick>
 800664e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006650:	e008      	b.n	8006664 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006652:	f7fb fa21 	bl	8001a98 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e086      	b.n	8006772 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006664:	4b45      	ldr	r3, [pc, #276]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f0      	bne.n	8006652 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006670:	4b42      	ldr	r3, [pc, #264]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	051b      	lsls	r3, r3, #20
 800667e:	493f      	ldr	r1, [pc, #252]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006680:	4313      	orrs	r3, r2
 8006682:	628b      	str	r3, [r1, #40]	; 0x28
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	3b01      	subs	r3, #1
 800668a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	3b01      	subs	r3, #1
 8006694:	025b      	lsls	r3, r3, #9
 8006696:	b29b      	uxth	r3, r3
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	3b01      	subs	r3, #1
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	061b      	lsls	r3, r3, #24
 80066b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066b4:	4931      	ldr	r1, [pc, #196]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066ba:	4b30      	ldr	r3, [pc, #192]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	492d      	ldr	r1, [pc, #180]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066cc:	4b2b      	ldr	r3, [pc, #172]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	4928      	ldr	r1, [pc, #160]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066de:	4b27      	ldr	r3, [pc, #156]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	4a26      	ldr	r2, [pc, #152]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066ea:	4b24      	ldr	r3, [pc, #144]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	4b24      	ldr	r3, [pc, #144]	; (8006780 <RCCEx_PLL3_Config+0x160>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	69d2      	ldr	r2, [r2, #28]
 80066f6:	00d2      	lsls	r2, r2, #3
 80066f8:	4920      	ldr	r1, [pc, #128]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	4a1e      	ldr	r2, [pc, #120]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006710:	4b1a      	ldr	r3, [pc, #104]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800671a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800671c:	e00f      	b.n	800673e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d106      	bne.n	8006732 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006724:	4b15      	ldr	r3, [pc, #84]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a14      	ldr	r2, [pc, #80]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 800672a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006730:	e005      	b.n	800673e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a0e      	ldr	r2, [pc, #56]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674a:	f7fb f9a5 	bl	8001a98 <HAL_GetTick>
 800674e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006750:	e008      	b.n	8006764 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006752:	f7fb f9a1 	bl	8001a98 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e006      	b.n	8006772 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <RCCEx_PLL3_Config+0x15c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
 8006780:	ffff0007 	.word	0xffff0007

08006784 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e075      	b.n	8006882 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d105      	bne.n	80067ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fa fe1d 	bl	80013e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f868 	bl	800688c <HAL_SD_InitCard>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e05d      	b.n	8006882 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fda9 	bl	8007324 <HAL_SD_GetCardStatus>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e052      	b.n	8006882 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80067dc:	7e3b      	ldrb	r3, [r7, #24]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80067e2:	7e7b      	ldrb	r3, [r7, #25]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d10a      	bne.n	8006806 <HAL_SD_Init+0x82>
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <HAL_SD_Init+0x78>
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006802:	659a      	str	r2, [r3, #88]	; 0x58
 8006804:	e00b      	b.n	800681e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	2b01      	cmp	r3, #1
 800680c:	d104      	bne.n	8006818 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006814:	659a      	str	r2, [r3, #88]	; 0x58
 8006816:	e002      	b.n	800681e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fe67 	bl	80074f8 <HAL_SD_ConfigWideBusOperation>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e026      	b.n	8006882 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006834:	f7fb f930 	bl	8001a98 <HAL_GetTick>
 8006838:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800683a:	e011      	b.n	8006860 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800683c:	f7fb f92c 	bl	8001a98 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684a:	d109      	bne.n	8006860 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006852:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e010      	b.n	8006882 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 ff5b 	bl	800771c <HAL_SD_GetCardState>
 8006866:	4603      	mov	r3, r0
 8006868:	2b04      	cmp	r3, #4
 800686a:	d1e7      	bne.n	800683c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3728      	adds	r7, #40	; 0x28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b08d      	sub	sp, #52	; 0x34
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80068a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80068ac:	f7fe fd24 	bl	80052f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80068b0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d109      	bne.n	80068cc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e06a      	b.n	80069a2 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	4a36      	ldr	r2, [pc, #216]	; (80069ac <HAL_SD_InitCard+0x120>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681c      	ldr	r4, [r3, #0]
 80068de:	466a      	mov	r2, sp
 80068e0:	f107 0318 	add.w	r3, r7, #24
 80068e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80068e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80068ec:	f107 030c 	add.w	r3, r7, #12
 80068f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068f2:	4620      	mov	r0, r4
 80068f4:	f002 fc14 	bl	8009120 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f002 fc57 	bl	80091b0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800690e:	4a28      	ldr	r2, [pc, #160]	; (80069b0 <HAL_SD_InitCard+0x124>)
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	fbb2 f3f3 	udiv	r3, r2, r3
 8006916:	3301      	adds	r3, #1
 8006918:	4618      	mov	r0, r3
 800691a:	f7fb f8c9 	bl	8001ab0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 ffea 	bl	80078f8 <SD_PowerON>
 8006924:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e02e      	b.n	80069a2 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 ff09 	bl	800775c <SD_InitCard>
 800694a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e01b      	b.n	80069a2 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006972:	4618      	mov	r0, r3
 8006974:	f002 fcb2 	bl	80092dc <SDMMC_CmdBlockLength>
 8006978:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00f      	beq.n	80069a0 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a0b      	ldr	r2, [pc, #44]	; (80069b4 <HAL_SD_InitCard+0x128>)
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	372c      	adds	r7, #44	; 0x2c
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd90      	pop	{r4, r7, pc}
 80069aa:	bf00      	nop
 80069ac:	014f8b59 	.word	0x014f8b59
 80069b0:	00012110 	.word	0x00012110
 80069b4:	1fe00fff 	.word	0x1fe00fff

080069b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08c      	sub	sp, #48	; 0x30
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d107      	bne.n	80069e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e08d      	b.n	8006afc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f040 8086 	bne.w	8006afa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	441a      	add	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d907      	bls.n	8006a12 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e074      	b.n	8006afc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2203      	movs	r2, #3
 8006a16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	025a      	lsls	r2, r3, #9
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d002      	beq.n	8006a3e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	025b      	lsls	r3, r3, #9
 8006a48:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a4a:	2390      	movs	r3, #144	; 0x90
 8006a4c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f107 0210 	add.w	r2, r7, #16
 8006a62:	4611      	mov	r1, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f002 fc0d 	bl	8009284 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a78:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2201      	movs	r2, #1
 8006a88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d90a      	bls.n	8006aa6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2282      	movs	r2, #130	; 0x82
 8006a94:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f002 fc63 	bl	8009368 <SDMMC_CmdReadMultiBlock>
 8006aa2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006aa4:	e009      	b.n	8006aba <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2281      	movs	r2, #129	; 0x81
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 fc35 	bl	8009322 <SDMMC_CmdReadSingleBlock>
 8006ab8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d012      	beq.n	8006ae6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a0f      	ldr	r2, [pc, #60]	; (8006b04 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e00a      	b.n	8006afc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006af4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e000      	b.n	8006afc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
  }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3730      	adds	r7, #48	; 0x30
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	1fe00fff 	.word	0x1fe00fff

08006b08 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	; 0x30
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d107      	bne.n	8006b30 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e08d      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 8086 	bne.w	8006c4a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d907      	bls.n	8006b62 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e074      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	025a      	lsls	r2, r3, #9
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d002      	beq.n	8006b8e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	025b      	lsls	r3, r3, #9
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	025b      	lsls	r3, r3, #9
 8006b98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b9a:	2390      	movs	r3, #144	; 0x90
 8006b9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f107 0210 	add.w	r2, r7, #16
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f002 fb65 	bl	8009284 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d90a      	bls.n	8006bf6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	22a0      	movs	r2, #160	; 0xa0
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 fc01 	bl	80093f4 <SDMMC_CmdWriteMultiBlock>
 8006bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bf4:	e009      	b.n	8006c0a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2290      	movs	r2, #144	; 0x90
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 fbd3 	bl	80093ae <SDMMC_CmdWriteSingleBlock>
 8006c08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d012      	beq.n	8006c36 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e00a      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3730      	adds	r7, #48	; 0x30
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	1fe00fff 	.word	0x1fe00fff

08006c58 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_SD_IRQHandler+0x2e>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f926 	bl	8007ed0 <SD_Read_IT>
 8006c84:	e19a      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80ac 	beq.w	8006dee <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b59      	ldr	r3, [pc, #356]	; (8006e10 <HAL_SD_IRQHandler+0x1b8>)
 8006cac:	400b      	ands	r3, r1
 8006cae:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cce:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d038      	beq.n	8006d4c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_SD_IRQHandler+0x96>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d011      	beq.n	8006d12 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f002 fba2 	bl	800943c <SDMMC_CmdStopTransfer>
 8006cf8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f95b 	bl	8006fc8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a3f      	ldr	r2, [pc, #252]	; (8006e14 <HAL_SD_IRQHandler+0x1bc>)
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_SD_IRQHandler+0xe4>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f003 f855 	bl	8009dec <HAL_SD_RxCpltCallback>
 8006d42:	e13b      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f003 f847 	bl	8009dd8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d4a:	e137      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8132 	beq.w	8006fbc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2200      	movs	r2, #0
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d104      	bne.n	8006d84 <HAL_SD_IRQHandler+0x12c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f002 fb57 	bl	800943c <SDMMC_CmdStopTransfer>
 8006d8e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f910 	bl	8006fc8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <HAL_SD_IRQHandler+0x172>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f003 f804 	bl	8009dd8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <HAL_SD_IRQHandler+0x18e>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80eb 	beq.w	8006fbc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f003 f800 	bl	8009dec <HAL_SD_RxCpltCallback>
}
 8006dec:	e0e6      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <HAL_SD_IRQHandler+0x1c0>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f8a8 	bl	8007f5c <SD_Write_IT>
 8006e0c:	e0d6      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
 8006e0e:	bf00      	nop
 8006e10:	ffff3ec5 	.word	0xffff3ec5
 8006e14:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 809d 	beq.w	8006f62 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	f043 0202 	orr.w	r2, r3, #2
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	f043 0208 	orr.w	r2, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	f043 0210 	orr.w	r2, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a4b      	ldr	r2, [pc, #300]	; (8006fc4 <HAL_SD_IRQHandler+0x36c>)
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ed6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 faad 	bl	800943c <SDMMC_CmdStopTransfer>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f851 	bl	8006fc8 <HAL_SD_ErrorCallback>
}
 8006f26:	e049      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d044      	beq.n	8006fbc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d040      	beq.n	8006fbc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f48:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f834 	bl	8006fc8 <HAL_SD_ErrorCallback>
}
 8006f60:	e02c      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d025      	beq.n	8006fbc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10c      	bne.n	8006fa2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f84a 	bl	800802c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006f98:	e010      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f832 	bl	8008004 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006fa0:	e00c      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f833 	bl	8008018 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006fb2:	e003      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 f81b 	bl	8007ff0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006fba:	e7ff      	b.n	8006fbc <HAL_SD_IRQHandler+0x364>
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	18000f3a 	.word	0x18000f3a

08006fc8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fea:	0f9b      	lsrs	r3, r3, #30
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff6:	0e9b      	lsrs	r3, r3, #26
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007008:	0e1b      	lsrs	r3, r3, #24
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	b2da      	uxtb	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	b2da      	uxtb	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	b2da      	uxtb	r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007032:	b2da      	uxtb	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703c:	0d1b      	lsrs	r3, r3, #20
 800703e:	b29a      	uxth	r2, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	b2da      	uxtb	r2, r3
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705a:	0bdb      	lsrs	r3, r3, #15
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706c:	0b9b      	lsrs	r3, r3, #14
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707e:	0b5b      	lsrs	r3, r3, #13
 8007080:	b2db      	uxtb	r3, r3
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007090:	0b1b      	lsrs	r3, r3, #12
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	b2da      	uxtb	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2200      	movs	r2, #0
 80070a2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d163      	bne.n	8007174 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	009a      	lsls	r2, r3, #2
 80070b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070b6:	4013      	ands	r3, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80070bc:	0f92      	lsrs	r2, r2, #30
 80070be:	431a      	orrs	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070c8:	0edb      	lsrs	r3, r3, #27
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ec:	0d5b      	lsrs	r3, r3, #21
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070fe:	0c9b      	lsrs	r3, r3, #18
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	b2da      	uxtb	r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007110:	0bdb      	lsrs	r3, r3, #15
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	b2da      	uxtb	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	7e1b      	ldrb	r3, [r3, #24]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	3302      	adds	r3, #2
 8007134:	2201      	movs	r2, #1
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800713e:	fb03 f202 	mul.w	r2, r3, r2
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	7a1b      	ldrb	r3, [r3, #8]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2201      	movs	r2, #1
 8007152:	409a      	lsls	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007160:	0a52      	lsrs	r2, r2, #9
 8007162:	fb03 f202 	mul.w	r2, r3, r2
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007170:	655a      	str	r2, [r3, #84]	; 0x54
 8007172:	e031      	b.n	80071d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	2b01      	cmp	r3, #1
 800717a:	d11d      	bne.n	80071b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	431a      	orrs	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	3301      	adds	r3, #1
 8007198:	029a      	lsls	r2, r3, #10
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54
 80071b6:	e00f      	b.n	80071d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a58      	ldr	r2, [pc, #352]	; (8007320 <HAL_SD_GetCardCSD+0x344>)
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e09d      	b.n	8007314 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071dc:	0b9b      	lsrs	r3, r3, #14
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ee:	09db      	lsrs	r3, r3, #7
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007206:	b2da      	uxtb	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007210:	0fdb      	lsrs	r3, r3, #31
 8007212:	b2da      	uxtb	r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721c:	0f5b      	lsrs	r3, r3, #29
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	b2da      	uxtb	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800722e:	0e9b      	lsrs	r3, r3, #26
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	b2da      	uxtb	r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007240:	0d9b      	lsrs	r3, r3, #22
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	b2da      	uxtb	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007252:	0d5b      	lsrs	r3, r3, #21
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	b2db      	uxtb	r3, r3
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	b2da      	uxtb	r2, r3
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007282:	0bdb      	lsrs	r3, r3, #15
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	b2da      	uxtb	r2, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007296:	0b9b      	lsrs	r3, r3, #14
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072aa:	0b5b      	lsrs	r3, r3, #13
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072be:	0b1b      	lsrs	r3, r3, #12
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d2:	0a9b      	lsrs	r3, r3, #10
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007302:	b2da      	uxtb	r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	1fe00fff 	.word	0x1fe00fff

08007324 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b094      	sub	sp, #80	; 0x50
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b03      	cmp	r3, #3
 800733e:	d101      	bne.n	8007344 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0a7      	b.n	8007494 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fb62 	bl	8007a14 <SD_SendSDStatus>
 8007350:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007354:	2b00      	cmp	r3, #0
 8007356:	d011      	beq.n	800737c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a4f      	ldr	r2, [pc, #316]	; (800749c <HAL_SD_GetCardStatus+0x178>)
 800735e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800737a:	e070      	b.n	800745e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	099b      	lsrs	r3, r3, #6
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	0e1b      	lsrs	r3, r3, #24
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	061a      	lsls	r2, r3, #24
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073c2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80073cc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	0e1b      	lsrs	r3, r3, #24
 80073d2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	0a1b      	lsrs	r3, r3, #8
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	0d1b      	lsrs	r3, r3, #20
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	0c1b      	lsrs	r3, r3, #16
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007404:	b29a      	uxth	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	b29b      	uxth	r3, r3
 800740a:	b2db      	uxtb	r3, r3
 800740c:	b29b      	uxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	0a9b      	lsrs	r3, r3, #10
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007420:	b2da      	uxtb	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	b2db      	uxtb	r3, r3
 800742c:	f003 0303 	and.w	r3, r3, #3
 8007430:	b2da      	uxtb	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	b2da      	uxtb	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	b2da      	uxtb	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	0e1b      	lsrs	r3, r3, #24
 8007458:	b2da      	uxtb	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007466:	4618      	mov	r0, r3
 8007468:	f001 ff38 	bl	80092dc <SDMMC_CmdBlockLength>
 800746c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800746e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00d      	beq.n	8007490 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a08      	ldr	r2, [pc, #32]	; (800749c <HAL_SD_GetCardStatus+0x178>)
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007480:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007490:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007494:	4618      	mov	r0, r3
 8007496:	3750      	adds	r7, #80	; 0x50
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	1fe00fff 	.word	0x1fe00fff

080074a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b08d      	sub	sp, #52	; 0x34
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2203      	movs	r2, #3
 8007510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	2b03      	cmp	r3, #3
 800751a:	d02e      	beq.n	800757a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007522:	d106      	bne.n	8007532 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007528:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	635a      	str	r2, [r3, #52]	; 0x34
 8007530:	e029      	b.n	8007586 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007538:	d10a      	bne.n	8007550 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fb62 	bl	8007c04 <SD_WideBus_Enable>
 8007540:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	635a      	str	r2, [r3, #52]	; 0x34
 800754e:	e01a      	b.n	8007586 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb9f 	bl	8007c9a <SD_WideBus_Disable>
 800755c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	635a      	str	r2, [r3, #52]	; 0x34
 800756a:	e00c      	b.n	8007586 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	635a      	str	r2, [r3, #52]	; 0x34
 8007578:	e005      	b.n	8007586 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5e      	ldr	r2, [pc, #376]	; (800770c <HAL_SD_ConfigWideBusOperation+0x214>)
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800759c:	e094      	b.n	80076c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800759e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80075a2:	f7fd fea9 	bl	80052f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80075a6:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8083 	beq.w	80076b6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	4950      	ldr	r1, [pc, #320]	; (8007710 <HAL_SD_ConfigWideBusOperation+0x218>)
 80075ce:	fba1 1303 	umull	r1, r3, r1, r3
 80075d2:	0e1b      	lsrs	r3, r3, #24
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d303      	bcc.n	80075e0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	61bb      	str	r3, [r7, #24]
 80075de:	e05a      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e8:	d103      	bne.n	80075f2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	e051      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fa:	d126      	bne.n	800764a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10e      	bne.n	8007622 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	4a43      	ldr	r2, [pc, #268]	; (8007714 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d906      	bls.n	800761a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	4a40      	ldr	r2, [pc, #256]	; (8007710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	0e5b      	lsrs	r3, r3, #25
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e03d      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	e039      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	fbb2 f3f3 	udiv	r3, r2, r3
 800762e:	4a39      	ldr	r2, [pc, #228]	; (8007714 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d906      	bls.n	8007642 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	4a36      	ldr	r2, [pc, #216]	; (8007710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	0e5b      	lsrs	r3, r3, #25
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	e029      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	e025      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10e      	bne.n	8007670 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	4a30      	ldr	r2, [pc, #192]	; (8007718 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d906      	bls.n	8007668 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	4a2c      	ldr	r2, [pc, #176]	; (8007710 <HAL_SD_ConfigWideBusOperation+0x218>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	0e1b      	lsrs	r3, r3, #24
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	e016      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	e012      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	4a26      	ldr	r2, [pc, #152]	; (8007718 <HAL_SD_ConfigWideBusOperation+0x220>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d906      	bls.n	8007690 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	4a22      	ldr	r2, [pc, #136]	; (8007710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	0e1b      	lsrs	r3, r3, #24
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	e002      	b.n	8007696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681c      	ldr	r4, [r3, #0]
 800769a:	466a      	mov	r2, sp
 800769c:	f107 0314 	add.w	r3, r7, #20
 80076a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80076a4:	e882 0003 	stmia.w	r2, {r0, r1}
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ae:	4620      	mov	r0, r4
 80076b0:	f001 fd36 	bl	8009120 <SDMMC_Init>
 80076b4:	e008      	b.n	80076c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 fe03 	bl	80092dc <SDMMC_CmdBlockLength>
 80076d6:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00c      	beq.n	80076f8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a0a      	ldr	r2, [pc, #40]	; (800770c <HAL_SD_ConfigWideBusOperation+0x214>)
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007704:	4618      	mov	r0, r3
 8007706:	372c      	adds	r7, #44	; 0x2c
 8007708:	46bd      	mov	sp, r7
 800770a:	bd90      	pop	{r4, r7, pc}
 800770c:	1fe00fff 	.word	0x1fe00fff
 8007710:	55e63b89 	.word	0x55e63b89
 8007714:	02faf080 	.word	0x02faf080
 8007718:	017d7840 	.word	0x017d7840

0800771c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa40 	bl	8007bb4 <SD_SendStatus>
 8007734:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	0a5b      	lsrs	r3, r3, #9
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007752:	693b      	ldr	r3, [r7, #16]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b090      	sub	sp, #64	; 0x40
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007768:	f7fa f996 	bl	8001a98 <HAL_GetTick>
 800776c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fd2d 	bl	80091d2 <SDMMC_GetPowerState>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800777e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007782:	e0b5      	b.n	80078f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	2b03      	cmp	r3, #3
 800778a:	d02e      	beq.n	80077ea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f001 ff78 	bl	8009686 <SDMMC_CmdSendCID>
 8007796:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <SD_InitCard+0x46>
    {
      return errorstate;
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	e0a6      	b.n	80078f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fd58 	bl	800925e <SDMMC_GetResponse>
 80077ae:	4602      	mov	r2, r0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2104      	movs	r1, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 fd4f 	bl	800925e <SDMMC_GetResponse>
 80077c0:	4602      	mov	r2, r0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2108      	movs	r1, #8
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fd46 	bl	800925e <SDMMC_GetResponse>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	210c      	movs	r1, #12
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fd3d 	bl	800925e <SDMMC_GetResponse>
 80077e4:	4602      	mov	r2, r0
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d01d      	beq.n	800782e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80077f2:	e019      	b.n	8007828 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f107 020a 	add.w	r2, r7, #10
 80077fc:	4611      	mov	r1, r2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 ff80 	bl	8009704 <SDMMC_CmdSetRelAdd>
 8007804:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <SD_InitCard+0xb4>
      {
        return errorstate;
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	e06f      	b.n	80078f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007810:	f7fa f942 	bl	8001a98 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f241 3287 	movw	r2, #4999	; 0x1387
 800781e:	4293      	cmp	r3, r2
 8007820:	d902      	bls.n	8007828 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007822:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007826:	e063      	b.n	80078f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007828:	897b      	ldrh	r3, [r7, #10]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0e2      	beq.n	80077f4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	2b03      	cmp	r3, #3
 8007834:	d036      	beq.n	80078a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007836:	897b      	ldrh	r3, [r7, #10]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f001 ff3a 	bl	80096c4 <SDMMC_CmdSendCSD>
 8007850:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <SD_InitCard+0x100>
    {
      return errorstate;
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	e049      	b.n	80078f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fcfb 	bl	800925e <SDMMC_GetResponse>
 8007868:	4602      	mov	r2, r0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2104      	movs	r1, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fcf2 	bl	800925e <SDMMC_GetResponse>
 800787a:	4602      	mov	r2, r0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2108      	movs	r1, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fce9 	bl	800925e <SDMMC_GetResponse>
 800788c:	4602      	mov	r2, r0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	210c      	movs	r1, #12
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fce0 	bl	800925e <SDMMC_GetResponse>
 800789e:	4602      	mov	r2, r0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2104      	movs	r1, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fcd7 	bl	800925e <SDMMC_GetResponse>
 80078b0:	4603      	mov	r3, r0
 80078b2:	0d1a      	lsrs	r2, r3, #20
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fb8c 	bl	8006fdc <HAL_SD_GetCardCSD>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078ce:	e00f      	b.n	80078f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f001 fde9 	bl	80094b4 <SDMMC_CmdSelDesel>
 80078e2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <SD_InitCard+0x192>
  {
    return errorstate;
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	e000      	b.n	80078f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3740      	adds	r7, #64	; 0x40
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fdf2 	bl	80094fa <SDMMC_CmdGoIdleState>
 8007916:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <SD_PowerON+0x2a>
  {
    return errorstate;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	e072      	b.n	8007a08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f001 fe05 	bl	8009536 <SDMMC_CmdOperCond>
 800792c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007934:	d10d      	bne.n	8007952 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fdda 	bl	80094fa <SDMMC_CmdGoIdleState>
 8007946:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <SD_PowerON+0x60>
    {
      return errorstate;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	e05a      	b.n	8007a08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d137      	bne.n	80079d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f001 fe05 	bl	8009576 <SDMMC_CmdAppCommand>
 800796c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d02d      	beq.n	80079d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007978:	e046      	b.n	8007a08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f001 fdf8 	bl	8009576 <SDMMC_CmdAppCommand>
 8007986:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <SD_PowerON+0x9a>
    {
      return errorstate;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	e03a      	b.n	8007a08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	491e      	ldr	r1, [pc, #120]	; (8007a10 <SD_PowerON+0x118>)
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fe0f 	bl	80095bc <SDMMC_CmdAppOperCommand>
 800799e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079aa:	e02d      	b.n	8007a08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fc53 	bl	800925e <SDMMC_GetResponse>
 80079b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	0fdb      	lsrs	r3, r3, #31
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <SD_PowerON+0xce>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <SD_PowerON+0xd0>
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]

    count++;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d802      	bhi.n	80079e0 <SD_PowerON+0xe8>
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0cc      	beq.n	800797a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d902      	bls.n	80079f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80079ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079ee:	e00b      	b.n	8007a08 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	c1100000 	.word	0xc1100000

08007a14 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	; 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a1e:	f7fa f83b 	bl	8001a98 <HAL_GetTick>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fc15 	bl	800925e <SDMMC_GetResponse>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a3e:	d102      	bne.n	8007a46 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a44:	e0b0      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2140      	movs	r1, #64	; 0x40
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fc45 	bl	80092dc <SDMMC_CmdBlockLength>
 8007a52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	e0a0      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f001 fd7f 	bl	8009576 <SDMMC_CmdAppCommand>
 8007a78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	e08d      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007a92:	2340      	movs	r3, #64	; 0x40
 8007a94:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007a96:	2360      	movs	r3, #96	; 0x60
 8007a98:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f107 0208 	add.w	r2, r7, #8
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fbe7 	bl	8009284 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 fe67 	bl	800978e <SDMMC_CmdStatusRegister>
 8007ac0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d02b      	beq.n	8007b20 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	e069      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d013      	beq.n	8007b0a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ae6:	e00d      	b.n	8007b04 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 fb41 	bl	8009174 <SDMMC_ReadFIFO>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	601a      	str	r2, [r3, #0]
        pData++;
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	3304      	adds	r3, #4
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	3301      	adds	r3, #1
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	2b07      	cmp	r3, #7
 8007b08:	d9ee      	bls.n	8007ae8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b0a:	f7f9 ffc5 	bl	8001a98 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d102      	bne.n	8007b20 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007b1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b1e:	e043      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0d2      	beq.n	8007ad4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	e033      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e02a      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d017      	beq.n	8007b90 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007b60:	2320      	movs	r3, #32
 8007b62:	e021      	b.n	8007ba8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 fb03 	bl	8009174 <SDMMC_ReadFIFO>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	601a      	str	r2, [r3, #0]
    pData++;
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	3304      	adds	r3, #4
 8007b78:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b7a:	f7f9 ff8d 	bl	8001a98 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d102      	bne.n	8007b90 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007b8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b8e:	e00b      	b.n	8007ba8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e2      	bne.n	8007b64 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a03      	ldr	r2, [pc, #12]	; (8007bb0 <SD_SendSDStatus+0x19c>)
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3730      	adds	r7, #48	; 0x30
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	18000f3a 	.word	0x18000f3a

08007bb4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bc8:	e018      	b.n	8007bfc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f001 fdb6 	bl	8009748 <SDMMC_CmdSendStatus>
 8007bdc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	e009      	b.n	8007bfc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fb35 	bl	800925e <SDMMC_GetResponse>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	2300      	movs	r3, #0
 8007c12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fb1f 	bl	800925e <SDMMC_GetResponse>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c2a:	d102      	bne.n	8007c32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c30:	e02f      	b.n	8007c92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c32:	f107 030c 	add.w	r3, r7, #12
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f879 	bl	8007d30 <SD_FindSCR>
 8007c3e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	e023      	b.n	8007c92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01c      	beq.n	8007c8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f001 fc88 	bl	8009576 <SDMMC_CmdAppCommand>
 8007c66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	e00f      	b.n	8007c92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2102      	movs	r1, #2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fcbf 	bl	80095fc <SDMMC_CmdBusWidth>
 8007c7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	e003      	b.n	8007c92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e001      	b.n	8007c92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b086      	sub	sp, #24
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 fad4 	bl	800925e <SDMMC_GetResponse>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc0:	d102      	bne.n	8007cc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007cc6:	e02f      	b.n	8007d28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f82e 	bl	8007d30 <SD_FindSCR>
 8007cd4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	e023      	b.n	8007d28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01c      	beq.n	8007d24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	041b      	lsls	r3, r3, #16
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f001 fc3d 	bl	8009576 <SDMMC_CmdAppCommand>
 8007cfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	e00f      	b.n	8007d28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fc74 	bl	80095fc <SDMMC_CmdBusWidth>
 8007d14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	e003      	b.n	8007d28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e001      	b.n	8007d28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	; 0x38
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d3a:	f7f9 fead 	bl	8001a98 <HAL_GetTick>
 8007d3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2108      	movs	r1, #8
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 fac0 	bl	80092dc <SDMMC_CmdBlockLength>
 8007d5c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	e0ad      	b.n	8007ec4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d70:	041b      	lsls	r3, r3, #16
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f001 fbfe 	bl	8009576 <SDMMC_CmdAppCommand>
 8007d7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	e09e      	b.n	8007ec4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007d8c:	2308      	movs	r3, #8
 8007d8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007d90:	2330      	movs	r3, #48	; 0x30
 8007d92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d94:	2302      	movs	r3, #2
 8007d96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f107 0210 	add.w	r2, r7, #16
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 fa6a 	bl	8009284 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fc44 	bl	8009642 <SDMMC_CmdSendSCR>
 8007dba:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d027      	beq.n	8007e12 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	e07e      	b.n	8007ec4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d113      	bne.n	8007dfc <SD_FindSCR+0xcc>
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d110      	bne.n	8007dfc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 f9c8 	bl	8009174 <SDMMC_ReadFIFO>
 8007de4:	4603      	mov	r3, r0
 8007de6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 f9c1 	bl	8009174 <SDMMC_ReadFIFO>
 8007df2:	4603      	mov	r3, r0
 8007df4:	60fb      	str	r3, [r7, #12]
      index++;
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	3301      	adds	r3, #1
 8007dfa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dfc:	f7f9 fe4c 	bl	8001a98 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d102      	bne.n	8007e12 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e10:	e058      	b.n	8007ec4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e18:	f240 532a 	movw	r3, #1322	; 0x52a
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0d1      	beq.n	8007dc6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2208      	movs	r2, #8
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e38:	2308      	movs	r3, #8
 8007e3a:	e043      	b.n	8007ec4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e52:	2302      	movs	r3, #2
 8007e54:	e036      	b.n	8007ec4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	e029      	b.n	8007ec4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a15      	ldr	r2, [pc, #84]	; (8007ecc <SD_FindSCR+0x19c>)
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	061a      	lsls	r2, r3, #24
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007e8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	0e1b      	lsrs	r3, r3, #24
 8007e94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	601a      	str	r2, [r3, #0]
    scr++;
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	061a      	lsls	r2, r3, #24
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	021b      	lsls	r3, r3, #8
 8007ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007eac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007eb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	0e1b      	lsrs	r3, r3, #24
 8007ebc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3738      	adds	r7, #56	; 0x38
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	18000f3a 	.word	0x18000f3a

08007ed0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	2b1f      	cmp	r3, #31
 8007ee4:	d936      	bls.n	8007f54 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e027      	b.n	8007f3c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 f93f 	bl	8009174 <SDMMC_ReadFIFO>
 8007ef6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	3301      	adds	r3, #1
 8007f04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	3301      	adds	r3, #1
 8007f14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	3301      	adds	r3, #1
 8007f24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	0e1b      	lsrs	r3, r3, #24
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	3301      	adds	r3, #1
 8007f34:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b07      	cmp	r3, #7
 8007f40:	d9d4      	bls.n	8007eec <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	f1a3 0220 	sub.w	r2, r3, #32
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	2b1f      	cmp	r3, #31
 8007f70:	d93a      	bls.n	8007fe8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e02b      	b.n	8007fd0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	3301      	adds	r3, #1
 8007f82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	021a      	lsls	r2, r3, #8
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3301      	adds	r3, #1
 8007f94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	041a      	lsls	r2, r3, #16
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	061a      	lsls	r2, r3, #24
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f107 020c 	add.w	r2, r7, #12
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 f8e2 	bl	800918e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b07      	cmp	r3, #7
 8007fd4:	d9d0      	bls.n	8007f78 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f1a3 0220 	sub.w	r2, r3, #32
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	621a      	str	r2, [r3, #32]
  }
}
 8007fe8:	bf00      	nop
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e042      	b.n	80080d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7f9 fa69 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2224      	movs	r2, #36	; 0x24
 800806e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f82c 	bl	80080e0 <UART_SetConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e022      	b.n	80080d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fd88 	bl	8008bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fe0f 	bl	8008cf4 <UART_CheckIdleState>
 80080d6:	4603      	mov	r3, r0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080e4:	b092      	sub	sp, #72	; 0x48
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	4313      	orrs	r3, r2
 8008106:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	4bbe      	ldr	r3, [pc, #760]	; (8008408 <UART_SetConfig+0x328>)
 8008110:	4013      	ands	r3, r2
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008118:	430b      	orrs	r3, r1
 800811a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4ab3      	ldr	r2, [pc, #716]	; (800840c <UART_SetConfig+0x32c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008148:	4313      	orrs	r3, r2
 800814a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	4baf      	ldr	r3, [pc, #700]	; (8008410 <UART_SetConfig+0x330>)
 8008154:	4013      	ands	r3, r2
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	6812      	ldr	r2, [r2, #0]
 800815a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800815c:	430b      	orrs	r3, r1
 800815e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008166:	f023 010f 	bic.w	r1, r3, #15
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4aa6      	ldr	r2, [pc, #664]	; (8008414 <UART_SetConfig+0x334>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d177      	bne.n	8008270 <UART_SetConfig+0x190>
 8008180:	4ba5      	ldr	r3, [pc, #660]	; (8008418 <UART_SetConfig+0x338>)
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008188:	2b28      	cmp	r3, #40	; 0x28
 800818a:	d86d      	bhi.n	8008268 <UART_SetConfig+0x188>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0xb4>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	08008239 	.word	0x08008239
 8008198:	08008269 	.word	0x08008269
 800819c:	08008269 	.word	0x08008269
 80081a0:	08008269 	.word	0x08008269
 80081a4:	08008269 	.word	0x08008269
 80081a8:	08008269 	.word	0x08008269
 80081ac:	08008269 	.word	0x08008269
 80081b0:	08008269 	.word	0x08008269
 80081b4:	08008241 	.word	0x08008241
 80081b8:	08008269 	.word	0x08008269
 80081bc:	08008269 	.word	0x08008269
 80081c0:	08008269 	.word	0x08008269
 80081c4:	08008269 	.word	0x08008269
 80081c8:	08008269 	.word	0x08008269
 80081cc:	08008269 	.word	0x08008269
 80081d0:	08008269 	.word	0x08008269
 80081d4:	08008249 	.word	0x08008249
 80081d8:	08008269 	.word	0x08008269
 80081dc:	08008269 	.word	0x08008269
 80081e0:	08008269 	.word	0x08008269
 80081e4:	08008269 	.word	0x08008269
 80081e8:	08008269 	.word	0x08008269
 80081ec:	08008269 	.word	0x08008269
 80081f0:	08008269 	.word	0x08008269
 80081f4:	08008251 	.word	0x08008251
 80081f8:	08008269 	.word	0x08008269
 80081fc:	08008269 	.word	0x08008269
 8008200:	08008269 	.word	0x08008269
 8008204:	08008269 	.word	0x08008269
 8008208:	08008269 	.word	0x08008269
 800820c:	08008269 	.word	0x08008269
 8008210:	08008269 	.word	0x08008269
 8008214:	08008259 	.word	0x08008259
 8008218:	08008269 	.word	0x08008269
 800821c:	08008269 	.word	0x08008269
 8008220:	08008269 	.word	0x08008269
 8008224:	08008269 	.word	0x08008269
 8008228:	08008269 	.word	0x08008269
 800822c:	08008269 	.word	0x08008269
 8008230:	08008269 	.word	0x08008269
 8008234:	08008261 	.word	0x08008261
 8008238:	2301      	movs	r3, #1
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e222      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e21e      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e21a      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008256:	e216      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008258:	2320      	movs	r3, #32
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825e:	e212      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008266:	e20e      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008268:	2380      	movs	r3, #128	; 0x80
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e20a      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a69      	ldr	r2, [pc, #420]	; (800841c <UART_SetConfig+0x33c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d130      	bne.n	80082dc <UART_SetConfig+0x1fc>
 800827a:	4b67      	ldr	r3, [pc, #412]	; (8008418 <UART_SetConfig+0x338>)
 800827c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	2b05      	cmp	r3, #5
 8008284:	d826      	bhi.n	80082d4 <UART_SetConfig+0x1f4>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <UART_SetConfig+0x1ac>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082a5 	.word	0x080082a5
 8008290:	080082ad 	.word	0x080082ad
 8008294:	080082b5 	.word	0x080082b5
 8008298:	080082bd 	.word	0x080082bd
 800829c:	080082c5 	.word	0x080082c5
 80082a0:	080082cd 	.word	0x080082cd
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e1ec      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082ac:	2304      	movs	r3, #4
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e1e8      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082b4:	2308      	movs	r3, #8
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e1e4      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082bc:	2310      	movs	r3, #16
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e1e0      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082c4:	2320      	movs	r3, #32
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ca:	e1dc      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082cc:	2340      	movs	r3, #64	; 0x40
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e1d8      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082d4:	2380      	movs	r3, #128	; 0x80
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e1d4      	b.n	8008686 <UART_SetConfig+0x5a6>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a4f      	ldr	r2, [pc, #316]	; (8008420 <UART_SetConfig+0x340>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d130      	bne.n	8008348 <UART_SetConfig+0x268>
 80082e6:	4b4c      	ldr	r3, [pc, #304]	; (8008418 <UART_SetConfig+0x338>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d826      	bhi.n	8008340 <UART_SetConfig+0x260>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <UART_SetConfig+0x218>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008319 	.word	0x08008319
 8008300:	08008321 	.word	0x08008321
 8008304:	08008329 	.word	0x08008329
 8008308:	08008331 	.word	0x08008331
 800830c:	08008339 	.word	0x08008339
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e1b6      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e1b2      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e1ae      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e1aa      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008330:	2320      	movs	r3, #32
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008336:	e1a6      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008338:	2340      	movs	r3, #64	; 0x40
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e1a2      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008340:	2380      	movs	r3, #128	; 0x80
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e19e      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a35      	ldr	r2, [pc, #212]	; (8008424 <UART_SetConfig+0x344>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d130      	bne.n	80083b4 <UART_SetConfig+0x2d4>
 8008352:	4b31      	ldr	r3, [pc, #196]	; (8008418 <UART_SetConfig+0x338>)
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b05      	cmp	r3, #5
 800835c:	d826      	bhi.n	80083ac <UART_SetConfig+0x2cc>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <UART_SetConfig+0x284>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	0800837d 	.word	0x0800837d
 8008368:	08008385 	.word	0x08008385
 800836c:	0800838d 	.word	0x0800838d
 8008370:	08008395 	.word	0x08008395
 8008374:	0800839d 	.word	0x0800839d
 8008378:	080083a5 	.word	0x080083a5
 800837c:	2300      	movs	r3, #0
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e180      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008384:	2304      	movs	r3, #4
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e17c      	b.n	8008686 <UART_SetConfig+0x5a6>
 800838c:	2308      	movs	r3, #8
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e178      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008394:	2310      	movs	r3, #16
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e174      	b.n	8008686 <UART_SetConfig+0x5a6>
 800839c:	2320      	movs	r3, #32
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e170      	b.n	8008686 <UART_SetConfig+0x5a6>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e16c      	b.n	8008686 <UART_SetConfig+0x5a6>
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e168      	b.n	8008686 <UART_SetConfig+0x5a6>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1b      	ldr	r2, [pc, #108]	; (8008428 <UART_SetConfig+0x348>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d142      	bne.n	8008444 <UART_SetConfig+0x364>
 80083be:	4b16      	ldr	r3, [pc, #88]	; (8008418 <UART_SetConfig+0x338>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d838      	bhi.n	800843c <UART_SetConfig+0x35c>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <UART_SetConfig+0x2f0>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080083f1 	.word	0x080083f1
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	08008401 	.word	0x08008401
 80083e0:	0800842d 	.word	0x0800842d
 80083e4:	08008435 	.word	0x08008435
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ee:	e14a      	b.n	8008686 <UART_SetConfig+0x5a6>
 80083f0:	2304      	movs	r3, #4
 80083f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f6:	e146      	b.n	8008686 <UART_SetConfig+0x5a6>
 80083f8:	2308      	movs	r3, #8
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fe:	e142      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008400:	2310      	movs	r3, #16
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e13e      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008408:	cfff69f3 	.word	0xcfff69f3
 800840c:	58000c00 	.word	0x58000c00
 8008410:	11fff4ff 	.word	0x11fff4ff
 8008414:	40011000 	.word	0x40011000
 8008418:	58024400 	.word	0x58024400
 800841c:	40004400 	.word	0x40004400
 8008420:	40004800 	.word	0x40004800
 8008424:	40004c00 	.word	0x40004c00
 8008428:	40005000 	.word	0x40005000
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e128      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e124      	b.n	8008686 <UART_SetConfig+0x5a6>
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e120      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4acb      	ldr	r2, [pc, #812]	; (8008778 <UART_SetConfig+0x698>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d176      	bne.n	800853c <UART_SetConfig+0x45c>
 800844e:	4bcb      	ldr	r3, [pc, #812]	; (800877c <UART_SetConfig+0x69c>)
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008456:	2b28      	cmp	r3, #40	; 0x28
 8008458:	d86c      	bhi.n	8008534 <UART_SetConfig+0x454>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <UART_SetConfig+0x380>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008505 	.word	0x08008505
 8008464:	08008535 	.word	0x08008535
 8008468:	08008535 	.word	0x08008535
 800846c:	08008535 	.word	0x08008535
 8008470:	08008535 	.word	0x08008535
 8008474:	08008535 	.word	0x08008535
 8008478:	08008535 	.word	0x08008535
 800847c:	08008535 	.word	0x08008535
 8008480:	0800850d 	.word	0x0800850d
 8008484:	08008535 	.word	0x08008535
 8008488:	08008535 	.word	0x08008535
 800848c:	08008535 	.word	0x08008535
 8008490:	08008535 	.word	0x08008535
 8008494:	08008535 	.word	0x08008535
 8008498:	08008535 	.word	0x08008535
 800849c:	08008535 	.word	0x08008535
 80084a0:	08008515 	.word	0x08008515
 80084a4:	08008535 	.word	0x08008535
 80084a8:	08008535 	.word	0x08008535
 80084ac:	08008535 	.word	0x08008535
 80084b0:	08008535 	.word	0x08008535
 80084b4:	08008535 	.word	0x08008535
 80084b8:	08008535 	.word	0x08008535
 80084bc:	08008535 	.word	0x08008535
 80084c0:	0800851d 	.word	0x0800851d
 80084c4:	08008535 	.word	0x08008535
 80084c8:	08008535 	.word	0x08008535
 80084cc:	08008535 	.word	0x08008535
 80084d0:	08008535 	.word	0x08008535
 80084d4:	08008535 	.word	0x08008535
 80084d8:	08008535 	.word	0x08008535
 80084dc:	08008535 	.word	0x08008535
 80084e0:	08008525 	.word	0x08008525
 80084e4:	08008535 	.word	0x08008535
 80084e8:	08008535 	.word	0x08008535
 80084ec:	08008535 	.word	0x08008535
 80084f0:	08008535 	.word	0x08008535
 80084f4:	08008535 	.word	0x08008535
 80084f8:	08008535 	.word	0x08008535
 80084fc:	08008535 	.word	0x08008535
 8008500:	0800852d 	.word	0x0800852d
 8008504:	2301      	movs	r3, #1
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e0bc      	b.n	8008686 <UART_SetConfig+0x5a6>
 800850c:	2304      	movs	r3, #4
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e0b8      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008514:	2308      	movs	r3, #8
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851a:	e0b4      	b.n	8008686 <UART_SetConfig+0x5a6>
 800851c:	2310      	movs	r3, #16
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e0b0      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008524:	2320      	movs	r3, #32
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852a:	e0ac      	b.n	8008686 <UART_SetConfig+0x5a6>
 800852c:	2340      	movs	r3, #64	; 0x40
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008532:	e0a8      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008534:	2380      	movs	r3, #128	; 0x80
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e0a4      	b.n	8008686 <UART_SetConfig+0x5a6>
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a8f      	ldr	r2, [pc, #572]	; (8008780 <UART_SetConfig+0x6a0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d130      	bne.n	80085a8 <UART_SetConfig+0x4c8>
 8008546:	4b8d      	ldr	r3, [pc, #564]	; (800877c <UART_SetConfig+0x69c>)
 8008548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854a:	f003 0307 	and.w	r3, r3, #7
 800854e:	2b05      	cmp	r3, #5
 8008550:	d826      	bhi.n	80085a0 <UART_SetConfig+0x4c0>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <UART_SetConfig+0x478>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	08008571 	.word	0x08008571
 800855c:	08008579 	.word	0x08008579
 8008560:	08008581 	.word	0x08008581
 8008564:	08008589 	.word	0x08008589
 8008568:	08008591 	.word	0x08008591
 800856c:	08008599 	.word	0x08008599
 8008570:	2300      	movs	r3, #0
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e086      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008578:	2304      	movs	r3, #4
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e082      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008580:	2308      	movs	r3, #8
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e07e      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008588:	2310      	movs	r3, #16
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e07a      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008590:	2320      	movs	r3, #32
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e076      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e072      	b.n	8008686 <UART_SetConfig+0x5a6>
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e06e      	b.n	8008686 <UART_SetConfig+0x5a6>
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a75      	ldr	r2, [pc, #468]	; (8008784 <UART_SetConfig+0x6a4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d130      	bne.n	8008614 <UART_SetConfig+0x534>
 80085b2:	4b72      	ldr	r3, [pc, #456]	; (800877c <UART_SetConfig+0x69c>)
 80085b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	d826      	bhi.n	800860c <UART_SetConfig+0x52c>
 80085be:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x4e4>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085dd 	.word	0x080085dd
 80085c8:	080085e5 	.word	0x080085e5
 80085cc:	080085ed 	.word	0x080085ed
 80085d0:	080085f5 	.word	0x080085f5
 80085d4:	080085fd 	.word	0x080085fd
 80085d8:	08008605 	.word	0x08008605
 80085dc:	2300      	movs	r3, #0
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085e2:	e050      	b.n	8008686 <UART_SetConfig+0x5a6>
 80085e4:	2304      	movs	r3, #4
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ea:	e04c      	b.n	8008686 <UART_SetConfig+0x5a6>
 80085ec:	2308      	movs	r3, #8
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085f2:	e048      	b.n	8008686 <UART_SetConfig+0x5a6>
 80085f4:	2310      	movs	r3, #16
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e044      	b.n	8008686 <UART_SetConfig+0x5a6>
 80085fc:	2320      	movs	r3, #32
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e040      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e03c      	b.n	8008686 <UART_SetConfig+0x5a6>
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e038      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a5b      	ldr	r2, [pc, #364]	; (8008788 <UART_SetConfig+0x6a8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d130      	bne.n	8008680 <UART_SetConfig+0x5a0>
 800861e:	4b57      	ldr	r3, [pc, #348]	; (800877c <UART_SetConfig+0x69c>)
 8008620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b05      	cmp	r3, #5
 8008628:	d826      	bhi.n	8008678 <UART_SetConfig+0x598>
 800862a:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <UART_SetConfig+0x550>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008649 	.word	0x08008649
 8008634:	08008651 	.word	0x08008651
 8008638:	08008659 	.word	0x08008659
 800863c:	08008661 	.word	0x08008661
 8008640:	08008669 	.word	0x08008669
 8008644:	08008671 	.word	0x08008671
 8008648:	2302      	movs	r3, #2
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864e:	e01a      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008650:	2304      	movs	r3, #4
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008656:	e016      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008658:	2308      	movs	r3, #8
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865e:	e012      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e00e      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008668:	2320      	movs	r3, #32
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e00a      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008670:	2340      	movs	r3, #64	; 0x40
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e006      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e002      	b.n	8008686 <UART_SetConfig+0x5a6>
 8008680:	2380      	movs	r3, #128	; 0x80
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a3f      	ldr	r2, [pc, #252]	; (8008788 <UART_SetConfig+0x6a8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	f040 80f8 	bne.w	8008882 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008692:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008696:	2b20      	cmp	r3, #32
 8008698:	dc46      	bgt.n	8008728 <UART_SetConfig+0x648>
 800869a:	2b02      	cmp	r3, #2
 800869c:	f2c0 8082 	blt.w	80087a4 <UART_SetConfig+0x6c4>
 80086a0:	3b02      	subs	r3, #2
 80086a2:	2b1e      	cmp	r3, #30
 80086a4:	d87e      	bhi.n	80087a4 <UART_SetConfig+0x6c4>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x5cc>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	0800872f 	.word	0x0800872f
 80086b0:	080087a5 	.word	0x080087a5
 80086b4:	08008737 	.word	0x08008737
 80086b8:	080087a5 	.word	0x080087a5
 80086bc:	080087a5 	.word	0x080087a5
 80086c0:	080087a5 	.word	0x080087a5
 80086c4:	08008747 	.word	0x08008747
 80086c8:	080087a5 	.word	0x080087a5
 80086cc:	080087a5 	.word	0x080087a5
 80086d0:	080087a5 	.word	0x080087a5
 80086d4:	080087a5 	.word	0x080087a5
 80086d8:	080087a5 	.word	0x080087a5
 80086dc:	080087a5 	.word	0x080087a5
 80086e0:	080087a5 	.word	0x080087a5
 80086e4:	08008757 	.word	0x08008757
 80086e8:	080087a5 	.word	0x080087a5
 80086ec:	080087a5 	.word	0x080087a5
 80086f0:	080087a5 	.word	0x080087a5
 80086f4:	080087a5 	.word	0x080087a5
 80086f8:	080087a5 	.word	0x080087a5
 80086fc:	080087a5 	.word	0x080087a5
 8008700:	080087a5 	.word	0x080087a5
 8008704:	080087a5 	.word	0x080087a5
 8008708:	080087a5 	.word	0x080087a5
 800870c:	080087a5 	.word	0x080087a5
 8008710:	080087a5 	.word	0x080087a5
 8008714:	080087a5 	.word	0x080087a5
 8008718:	080087a5 	.word	0x080087a5
 800871c:	080087a5 	.word	0x080087a5
 8008720:	080087a5 	.word	0x080087a5
 8008724:	08008797 	.word	0x08008797
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d037      	beq.n	800879c <UART_SetConfig+0x6bc>
 800872c:	e03a      	b.n	80087a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800872e:	f7fd fab5 	bl	8005c9c <HAL_RCCEx_GetD3PCLK1Freq>
 8008732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008734:	e03c      	b.n	80087b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7fd fac4 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008744:	e034      	b.n	80087b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008746:	f107 0318 	add.w	r3, r7, #24
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd fc10 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	e02c      	b.n	80087b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <UART_SetConfig+0x69c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d016      	beq.n	8008790 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008762:	4b06      	ldr	r3, [pc, #24]	; (800877c <UART_SetConfig+0x69c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	08db      	lsrs	r3, r3, #3
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	4a07      	ldr	r2, [pc, #28]	; (800878c <UART_SetConfig+0x6ac>)
 800876e:	fa22 f303 	lsr.w	r3, r2, r3
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008774:	e01c      	b.n	80087b0 <UART_SetConfig+0x6d0>
 8008776:	bf00      	nop
 8008778:	40011400 	.word	0x40011400
 800877c:	58024400 	.word	0x58024400
 8008780:	40007800 	.word	0x40007800
 8008784:	40007c00 	.word	0x40007c00
 8008788:	58000c00 	.word	0x58000c00
 800878c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008790:	4b9d      	ldr	r3, [pc, #628]	; (8008a08 <UART_SetConfig+0x928>)
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008794:	e00c      	b.n	80087b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008796:	4b9d      	ldr	r3, [pc, #628]	; (8008a0c <UART_SetConfig+0x92c>)
 8008798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879a:	e009      	b.n	80087b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a2:	e005      	b.n	80087b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80087ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 81de 	beq.w	8008b74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	4a94      	ldr	r2, [pc, #592]	; (8008a10 <UART_SetConfig+0x930>)
 80087be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	4413      	add	r3, r2
 80087d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d8:	429a      	cmp	r2, r3
 80087da:	d305      	bcc.n	80087e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d903      	bls.n	80087f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087ee:	e1c1      	b.n	8008b74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f2:	2200      	movs	r2, #0
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	60fa      	str	r2, [r7, #12]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	4a84      	ldr	r2, [pc, #528]	; (8008a10 <UART_SetConfig+0x930>)
 80087fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008802:	b29b      	uxth	r3, r3
 8008804:	2200      	movs	r2, #0
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008812:	f7f7 fdbd 	bl	8000390 <__aeabi_uldivmod>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	f04f 0200 	mov.w	r2, #0
 8008822:	f04f 0300 	mov.w	r3, #0
 8008826:	020b      	lsls	r3, r1, #8
 8008828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800882c:	0202      	lsls	r2, r0, #8
 800882e:	6979      	ldr	r1, [r7, #20]
 8008830:	6849      	ldr	r1, [r1, #4]
 8008832:	0849      	lsrs	r1, r1, #1
 8008834:	2000      	movs	r0, #0
 8008836:	460c      	mov	r4, r1
 8008838:	4605      	mov	r5, r0
 800883a:	eb12 0804 	adds.w	r8, r2, r4
 800883e:	eb43 0905 	adc.w	r9, r3, r5
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	469a      	mov	sl, r3
 800884a:	4693      	mov	fp, r2
 800884c:	4652      	mov	r2, sl
 800884e:	465b      	mov	r3, fp
 8008850:	4640      	mov	r0, r8
 8008852:	4649      	mov	r1, r9
 8008854:	f7f7 fd9c 	bl	8000390 <__aeabi_uldivmod>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4613      	mov	r3, r2
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008866:	d308      	bcc.n	800887a <UART_SetConfig+0x79a>
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800886e:	d204      	bcs.n	800887a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008876:	60da      	str	r2, [r3, #12]
 8008878:	e17c      	b.n	8008b74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008880:	e178      	b.n	8008b74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800888a:	f040 80c5 	bne.w	8008a18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800888e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008892:	2b20      	cmp	r3, #32
 8008894:	dc48      	bgt.n	8008928 <UART_SetConfig+0x848>
 8008896:	2b00      	cmp	r3, #0
 8008898:	db7b      	blt.n	8008992 <UART_SetConfig+0x8b2>
 800889a:	2b20      	cmp	r3, #32
 800889c:	d879      	bhi.n	8008992 <UART_SetConfig+0x8b2>
 800889e:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <UART_SetConfig+0x7c4>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	0800892f 	.word	0x0800892f
 80088a8:	08008937 	.word	0x08008937
 80088ac:	08008993 	.word	0x08008993
 80088b0:	08008993 	.word	0x08008993
 80088b4:	0800893f 	.word	0x0800893f
 80088b8:	08008993 	.word	0x08008993
 80088bc:	08008993 	.word	0x08008993
 80088c0:	08008993 	.word	0x08008993
 80088c4:	0800894f 	.word	0x0800894f
 80088c8:	08008993 	.word	0x08008993
 80088cc:	08008993 	.word	0x08008993
 80088d0:	08008993 	.word	0x08008993
 80088d4:	08008993 	.word	0x08008993
 80088d8:	08008993 	.word	0x08008993
 80088dc:	08008993 	.word	0x08008993
 80088e0:	08008993 	.word	0x08008993
 80088e4:	0800895f 	.word	0x0800895f
 80088e8:	08008993 	.word	0x08008993
 80088ec:	08008993 	.word	0x08008993
 80088f0:	08008993 	.word	0x08008993
 80088f4:	08008993 	.word	0x08008993
 80088f8:	08008993 	.word	0x08008993
 80088fc:	08008993 	.word	0x08008993
 8008900:	08008993 	.word	0x08008993
 8008904:	08008993 	.word	0x08008993
 8008908:	08008993 	.word	0x08008993
 800890c:	08008993 	.word	0x08008993
 8008910:	08008993 	.word	0x08008993
 8008914:	08008993 	.word	0x08008993
 8008918:	08008993 	.word	0x08008993
 800891c:	08008993 	.word	0x08008993
 8008920:	08008993 	.word	0x08008993
 8008924:	08008985 	.word	0x08008985
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d02e      	beq.n	800898a <UART_SetConfig+0x8aa>
 800892c:	e031      	b.n	8008992 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800892e:	f7fb fd71 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8008932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008934:	e033      	b.n	800899e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008936:	f7fb fd83 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 800893a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800893c:	e02f      	b.n	800899e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800893e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd f9c0 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800894c:	e027      	b.n	800899e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800894e:	f107 0318 	add.w	r3, r7, #24
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fb0c 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800895c:	e01f      	b.n	800899e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800895e:	4b2d      	ldr	r3, [pc, #180]	; (8008a14 <UART_SetConfig+0x934>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800896a:	4b2a      	ldr	r3, [pc, #168]	; (8008a14 <UART_SetConfig+0x934>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	08db      	lsrs	r3, r3, #3
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	4a24      	ldr	r2, [pc, #144]	; (8008a08 <UART_SetConfig+0x928>)
 8008976:	fa22 f303 	lsr.w	r3, r2, r3
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800897c:	e00f      	b.n	800899e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800897e:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <UART_SetConfig+0x928>)
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008982:	e00c      	b.n	800899e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008984:	4b21      	ldr	r3, [pc, #132]	; (8008a0c <UART_SetConfig+0x92c>)
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008988:	e009      	b.n	800899e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008990:	e005      	b.n	800899e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800899c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 80e7 	beq.w	8008b74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	4a19      	ldr	r2, [pc, #100]	; (8008a10 <UART_SetConfig+0x930>)
 80089ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b8:	005a      	lsls	r2, r3, #1
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	085b      	lsrs	r3, r3, #1
 80089c0:	441a      	add	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	2b0f      	cmp	r3, #15
 80089d0:	d916      	bls.n	8008a00 <UART_SetConfig+0x920>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d8:	d212      	bcs.n	8008a00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f023 030f 	bic.w	r3, r3, #15
 80089e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80089f2:	4313      	orrs	r3, r2
 80089f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80089fc:	60da      	str	r2, [r3, #12]
 80089fe:	e0b9      	b.n	8008b74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a06:	e0b5      	b.n	8008b74 <UART_SetConfig+0xa94>
 8008a08:	03d09000 	.word	0x03d09000
 8008a0c:	003d0900 	.word	0x003d0900
 8008a10:	08010658 	.word	0x08010658
 8008a14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	dc49      	bgt.n	8008ab4 <UART_SetConfig+0x9d4>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db7c      	blt.n	8008b1e <UART_SetConfig+0xa3e>
 8008a24:	2b20      	cmp	r3, #32
 8008a26:	d87a      	bhi.n	8008b1e <UART_SetConfig+0xa3e>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <UART_SetConfig+0x950>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008abb 	.word	0x08008abb
 8008a34:	08008ac3 	.word	0x08008ac3
 8008a38:	08008b1f 	.word	0x08008b1f
 8008a3c:	08008b1f 	.word	0x08008b1f
 8008a40:	08008acb 	.word	0x08008acb
 8008a44:	08008b1f 	.word	0x08008b1f
 8008a48:	08008b1f 	.word	0x08008b1f
 8008a4c:	08008b1f 	.word	0x08008b1f
 8008a50:	08008adb 	.word	0x08008adb
 8008a54:	08008b1f 	.word	0x08008b1f
 8008a58:	08008b1f 	.word	0x08008b1f
 8008a5c:	08008b1f 	.word	0x08008b1f
 8008a60:	08008b1f 	.word	0x08008b1f
 8008a64:	08008b1f 	.word	0x08008b1f
 8008a68:	08008b1f 	.word	0x08008b1f
 8008a6c:	08008b1f 	.word	0x08008b1f
 8008a70:	08008aeb 	.word	0x08008aeb
 8008a74:	08008b1f 	.word	0x08008b1f
 8008a78:	08008b1f 	.word	0x08008b1f
 8008a7c:	08008b1f 	.word	0x08008b1f
 8008a80:	08008b1f 	.word	0x08008b1f
 8008a84:	08008b1f 	.word	0x08008b1f
 8008a88:	08008b1f 	.word	0x08008b1f
 8008a8c:	08008b1f 	.word	0x08008b1f
 8008a90:	08008b1f 	.word	0x08008b1f
 8008a94:	08008b1f 	.word	0x08008b1f
 8008a98:	08008b1f 	.word	0x08008b1f
 8008a9c:	08008b1f 	.word	0x08008b1f
 8008aa0:	08008b1f 	.word	0x08008b1f
 8008aa4:	08008b1f 	.word	0x08008b1f
 8008aa8:	08008b1f 	.word	0x08008b1f
 8008aac:	08008b1f 	.word	0x08008b1f
 8008ab0:	08008b11 	.word	0x08008b11
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	d02e      	beq.n	8008b16 <UART_SetConfig+0xa36>
 8008ab8:	e031      	b.n	8008b1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aba:	f7fb fcab 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8008abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ac0:	e033      	b.n	8008b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ac2:	f7fb fcbd 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8008ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ac8:	e02f      	b.n	8008b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd f8fa 	bl	8005cc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad8:	e027      	b.n	8008b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ada:	f107 0318 	add.w	r3, r7, #24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fd fa46 	bl	8005f70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ae8:	e01f      	b.n	8008b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aea:	4b2d      	ldr	r3, [pc, #180]	; (8008ba0 <UART_SetConfig+0xac0>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008af6:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <UART_SetConfig+0xac0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	08db      	lsrs	r3, r3, #3
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <UART_SetConfig+0xac4>)
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b08:	e00f      	b.n	8008b2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b0a:	4b26      	ldr	r3, [pc, #152]	; (8008ba4 <UART_SetConfig+0xac4>)
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b0e:	e00c      	b.n	8008b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <UART_SetConfig+0xac8>)
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b14:	e009      	b.n	8008b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b1c:	e005      	b.n	8008b2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b28:	bf00      	nop
    }

    if (pclk != 0U)
 8008b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d021      	beq.n	8008b74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	4a1d      	ldr	r2, [pc, #116]	; (8008bac <UART_SetConfig+0xacc>)
 8008b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	441a      	add	r2, r3
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	2b0f      	cmp	r3, #15
 8008b58:	d909      	bls.n	8008b6e <UART_SetConfig+0xa8e>
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b60:	d205      	bcs.n	8008b6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60da      	str	r2, [r3, #12]
 8008b6c:	e002      	b.n	8008b74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2200      	movs	r2, #0
 8008b88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3748      	adds	r7, #72	; 0x48
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b9e:	bf00      	nop
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	03d09000 	.word	0x03d09000
 8008ba8:	003d0900 	.word	0x003d0900
 8008bac:	08010658 	.word	0x08010658

08008bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00a      	beq.n	8008c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d01a      	beq.n	8008cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cae:	d10a      	bne.n	8008cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d04:	f7f8 fec8 	bl	8001a98 <HAL_GetTick>
 8008d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d10e      	bne.n	8008d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f82f 	bl	8008d8a <UART_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e025      	b.n	8008d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d10e      	bne.n	8008d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f819 	bl	8008d8a <UART_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e00f      	b.n	8008d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b09c      	sub	sp, #112	; 0x70
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	603b      	str	r3, [r7, #0]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9a:	e0a9      	b.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	f000 80a5 	beq.w	8008ef0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da6:	f7f8 fe77 	bl	8001a98 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d302      	bcc.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8008db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d140      	bne.n	8008e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e6      	bne.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3308      	adds	r3, #8
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	663b      	str	r3, [r7, #96]	; 0x60
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3308      	adds	r3, #8
 8008e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e5      	bne.n	8008dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e069      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d051      	beq.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e5a:	d149      	bne.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e84:	637b      	str	r3, [r7, #52]	; 0x34
 8008e86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e6      	bne.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eb8:	623a      	str	r2, [r7, #32]
 8008eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	69f9      	ldr	r1, [r7, #28]
 8008ebe:	6a3a      	ldr	r2, [r7, #32]
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e5      	bne.n	8008e98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e010      	b.n	8008f12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f43f af46 	beq.w	8008d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3770      	adds	r7, #112	; 0x70
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e027      	b.n	8008f80 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2224      	movs	r2, #36	; 0x24
 8008f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e02d      	b.n	8009000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	; 0x24
 8008fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f84f 	bl	8009084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800901c:	2302      	movs	r3, #2
 800901e:	e02d      	b.n	800907c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2224      	movs	r2, #36	; 0x24
 800902c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f811 	bl	8009084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090a4:	e031      	b.n	800910a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090a6:	2310      	movs	r3, #16
 80090a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090aa:	2310      	movs	r3, #16
 80090ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	0e5b      	lsrs	r3, r3, #25
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	0f5b      	lsrs	r3, r3, #29
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	7b3a      	ldrb	r2, [r7, #12]
 80090d2:	4911      	ldr	r1, [pc, #68]	; (8009118 <UARTEx_SetNbDataToProcess+0x94>)
 80090d4:	5c8a      	ldrb	r2, [r1, r2]
 80090d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090da:	7b3a      	ldrb	r2, [r7, #12]
 80090dc:	490f      	ldr	r1, [pc, #60]	; (800911c <UARTEx_SetNbDataToProcess+0x98>)
 80090de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	7b7a      	ldrb	r2, [r7, #13]
 80090f0:	4909      	ldr	r1, [pc, #36]	; (8009118 <UARTEx_SetNbDataToProcess+0x94>)
 80090f2:	5c8a      	ldrb	r2, [r1, r2]
 80090f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090f8:	7b7a      	ldrb	r2, [r7, #13]
 80090fa:	4908      	ldr	r1, [pc, #32]	; (800911c <UARTEx_SetNbDataToProcess+0x98>)
 80090fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009102:	b29a      	uxth	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	08010670 	.word	0x08010670
 800911c:	08010678 	.word	0x08010678

08009120 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009120:	b084      	sub	sp, #16
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	f107 001c 	add.w	r0, r7, #28
 800912e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009136:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009138:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800913a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800913e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009142:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009146:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4313      	orrs	r3, r2
 800914c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	4b07      	ldr	r3, [pc, #28]	; (8009170 <SDMMC_Init+0x50>)
 8009154:	4013      	ands	r3, r2
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	b004      	add	sp, #16
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	ffc02c00 	.word	0xffc02c00

08009174 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f043 0203 	orr.w	r2, r3, #3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0303 	and.w	r3, r3, #3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800920e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009214:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800921a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <SDMMC_SendCommand+0x50>)
 8009228:	4013      	ands	r3, r2
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	fffee0c0 	.word	0xfffee0c0

08009244 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	b2db      	uxtb	r3, r3
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3314      	adds	r3, #20
 800926c:	461a      	mov	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	4413      	add	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80092aa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80092b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80092b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0

}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80092ea:	2310      	movs	r3, #16
 80092ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092fe:	f107 0308 	add.w	r3, r7, #8
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ff73 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800930a:	f241 3288 	movw	r2, #5000	; 0x1388
 800930e:	2110      	movs	r1, #16
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa5f 	bl	80097d4 <SDMMC_GetCmdResp1>
 8009316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009318:	69fb      	ldr	r3, [r7, #28]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b088      	sub	sp, #32
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009330:	2311      	movs	r3, #17
 8009332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800933e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009344:	f107 0308 	add.w	r3, r7, #8
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff ff50 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009350:	f241 3288 	movw	r2, #5000	; 0x1388
 8009354:	2111      	movs	r1, #17
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa3c 	bl	80097d4 <SDMMC_GetCmdResp1>
 800935c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800935e:	69fb      	ldr	r3, [r7, #28]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009376:	2312      	movs	r3, #18
 8009378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800937a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800937e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ff2d 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009396:	f241 3288 	movw	r2, #5000	; 0x1388
 800939a:	2112      	movs	r1, #18
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa19 	bl	80097d4 <SDMMC_GetCmdResp1>
 80093a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a4:	69fb      	ldr	r3, [r7, #28]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80093bc:	2318      	movs	r3, #24
 80093be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff ff0a 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80093dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e0:	2118      	movs	r1, #24
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9f6 	bl	80097d4 <SDMMC_GetCmdResp1>
 80093e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ea:	69fb      	ldr	r3, [r7, #28]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009402:	2319      	movs	r3, #25
 8009404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800940a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fee7 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009422:	f241 3288 	movw	r2, #5000	; 0x1388
 8009426:	2119      	movs	r1, #25
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f9d3 	bl	80097d4 <SDMMC_GetCmdResp1>
 800942e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009430:	69fb      	ldr	r3, [r7, #28]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009448:	230c      	movs	r3, #12
 800944a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800944c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800945a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff feb8 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009480:	4a0b      	ldr	r2, [pc, #44]	; (80094b0 <SDMMC_CmdStopTransfer+0x74>)
 8009482:	210c      	movs	r1, #12
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9a5 	bl	80097d4 <SDMMC_GetCmdResp1>
 800948a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800949e:	d101      	bne.n	80094a4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80094a4:	69fb      	ldr	r3, [r7, #28]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3720      	adds	r7, #32
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	05f5e100 	.word	0x05f5e100

080094b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80094c2:	2307      	movs	r3, #7
 80094c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fe87 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80094e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e6:	2107      	movs	r1, #7
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f973 	bl	80097d4 <SDMMC_GetCmdResp1>
 80094ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f0:	69fb      	ldr	r3, [r7, #28]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b088      	sub	sp, #32
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800950a:	2300      	movs	r3, #0
 800950c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009518:	f107 0308 	add.w	r3, r7, #8
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff fe66 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb97 	bl	8009c58 <SDMMC_GetCmdError>
 800952a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800952c:	69fb      	ldr	r3, [r7, #28]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b088      	sub	sp, #32
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800953e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009544:	2308      	movs	r3, #8
 8009546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800954c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009556:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009558:	f107 0308 	add.w	r3, r7, #8
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff fe46 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fb29 	bl	8009bbc <SDMMC_GetCmdResp7>
 800956a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800956c:	69fb      	ldr	r3, [r7, #28]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3720      	adds	r7, #32
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b088      	sub	sp, #32
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009584:	2337      	movs	r3, #55	; 0x37
 8009586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800958c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800958e:	2300      	movs	r3, #0
 8009590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009596:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7ff fe26 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80095a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a8:	2137      	movs	r1, #55	; 0x37
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f912 	bl	80097d4 <SDMMC_GetCmdResp1>
 80095b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095b2:	69fb      	ldr	r3, [r7, #28]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80095ca:	2329      	movs	r3, #41	; 0x29
 80095cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095de:	f107 0308 	add.w	r3, r7, #8
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff fe03 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa2e 	bl	8009a4c <SDMMC_GetCmdResp3>
 80095f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095f2:	69fb      	ldr	r3, [r7, #28]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800960a:	2306      	movs	r3, #6
 800960c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800960e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800961c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800961e:	f107 0308 	add.w	r3, r7, #8
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff fde3 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800962a:	f241 3288 	movw	r2, #5000	; 0x1388
 800962e:	2106      	movs	r1, #6
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f8cf 	bl	80097d4 <SDMMC_GetCmdResp1>
 8009636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009638:	69fb      	ldr	r3, [r7, #28]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800964e:	2333      	movs	r3, #51	; 0x33
 8009650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800965c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fdc1 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800966e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009672:	2133      	movs	r1, #51	; 0x33
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f8ad 	bl	80097d4 <SDMMC_GetCmdResp1>
 800967a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800967c:	69fb      	ldr	r3, [r7, #28]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3720      	adds	r7, #32
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b088      	sub	sp, #32
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009692:	2302      	movs	r3, #2
 8009694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800969a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800969c:	2300      	movs	r3, #0
 800969e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096a6:	f107 0308 	add.w	r3, r7, #8
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fd9f 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f980 	bl	80099b8 <SDMMC_GetCmdResp2>
 80096b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ba:	69fb      	ldr	r3, [r7, #28]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80096d2:	2309      	movs	r3, #9
 80096d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80096d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80096da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096dc:	2300      	movs	r3, #0
 80096de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096e6:	f107 0308 	add.w	r3, r7, #8
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff fd7f 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f960 	bl	80099b8 <SDMMC_GetCmdResp2>
 80096f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096fa:	69fb      	ldr	r3, [r7, #28]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3720      	adds	r7, #32
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009712:	2303      	movs	r3, #3
 8009714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800971a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800971c:	2300      	movs	r3, #0
 800971e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009726:	f107 0308 	add.w	r3, r7, #8
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fd5f 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	2103      	movs	r1, #3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f9c8 	bl	8009acc <SDMMC_GetCmdResp6>
 800973c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800973e:	69fb      	ldr	r3, [r7, #28]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009756:	230d      	movs	r3, #13
 8009758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800975a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009760:	2300      	movs	r3, #0
 8009762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800976a:	f107 0308 	add.w	r3, r7, #8
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff fd3d 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009776:	f241 3288 	movw	r2, #5000	; 0x1388
 800977a:	210d      	movs	r1, #13
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f829 	bl	80097d4 <SDMMC_GetCmdResp1>
 8009782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009784:	69fb      	ldr	r3, [r7, #28]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3720      	adds	r7, #32
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b088      	sub	sp, #32
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800979a:	230d      	movs	r3, #13
 800979c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800979e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ae:	f107 0308 	add.w	r3, r7, #8
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fd1b 	bl	80091f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80097ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80097be:	210d      	movs	r1, #13
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f807 	bl	80097d4 <SDMMC_GetCmdResp1>
 80097c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097c8:	69fb      	ldr	r3, [r7, #28]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3720      	adds	r7, #32
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	460b      	mov	r3, r1
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097e2:	4b70      	ldr	r3, [pc, #448]	; (80099a4 <SDMMC_GetCmdResp1+0x1d0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a70      	ldr	r2, [pc, #448]	; (80099a8 <SDMMC_GetCmdResp1+0x1d4>)
 80097e8:	fba2 2303 	umull	r2, r3, r2, r3
 80097ec:	0a5a      	lsrs	r2, r3, #9
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	fb02 f303 	mul.w	r3, r2, r3
 80097f4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	1e5a      	subs	r2, r3, #1
 80097fa:	61fa      	str	r2, [r7, #28]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009804:	e0c9      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	4b67      	ldr	r3, [pc, #412]	; (80099ac <SDMMC_GetCmdResp1+0x1d8>)
 8009810:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0ef      	beq.n	80097f6 <SDMMC_GetCmdResp1+0x22>
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1ea      	bne.n	80097f6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d004      	beq.n	8009836 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2204      	movs	r2, #4
 8009830:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009832:	2304      	movs	r3, #4
 8009834:	e0b1      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009848:	2301      	movs	r3, #1
 800984a:	e0a6      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4a58      	ldr	r2, [pc, #352]	; (80099b0 <SDMMC_GetCmdResp1+0x1dc>)
 8009850:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fcf6 	bl	8009244 <SDMMC_GetCommandResponse>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	4293      	cmp	r3, r2
 8009860:	d001      	beq.n	8009866 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009862:	2301      	movs	r3, #1
 8009864:	e099      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009866:	2100      	movs	r1, #0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff fcf8 	bl	800925e <SDMMC_GetResponse>
 800986e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4b50      	ldr	r3, [pc, #320]	; (80099b4 <SDMMC_GetCmdResp1+0x1e0>)
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800987a:	2300      	movs	r3, #0
 800987c:	e08d      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	da02      	bge.n	800988a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009888:	e087      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009894:	2340      	movs	r3, #64	; 0x40
 8009896:	e080      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80098a2:	2380      	movs	r3, #128	; 0x80
 80098a4:	e079      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80098b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098b4:	e071      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80098c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098c4:	e069      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80098d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098d4:	e061      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80098e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098e4:	e059      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f4:	e051      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009904:	e049      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009914:	e041      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009924:	e039      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009934:	e031      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009940:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009944:	e029      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009950:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009954:	e021      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009964:	e019      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009974:	e011      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009980:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009984:	e009      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009990:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009994:	e001      	b.n	800999a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	24000000 	.word	0x24000000
 80099a8:	10624dd3 	.word	0x10624dd3
 80099ac:	00200045 	.word	0x00200045
 80099b0:	002000c5 	.word	0x002000c5
 80099b4:	fdffe008 	.word	0xfdffe008

080099b8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80099c0:	4b1f      	ldr	r3, [pc, #124]	; (8009a40 <SDMMC_GetCmdResp2+0x88>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <SDMMC_GetCmdResp2+0x8c>)
 80099c6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ca:	0a5b      	lsrs	r3, r3, #9
 80099cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d0:	fb02 f303 	mul.w	r3, r2, r3
 80099d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	1e5a      	subs	r2, r3, #1
 80099da:	60fa      	str	r2, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d102      	bne.n	80099e6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099e4:	e026      	b.n	8009a34 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0ef      	beq.n	80099d6 <SDMMC_GetCmdResp2+0x1e>
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1ea      	bne.n	80099d6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2204      	movs	r2, #4
 8009a10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a12:	2304      	movs	r3, #4
 8009a14:	e00e      	b.n	8009a34 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d004      	beq.n	8009a2c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e003      	b.n	8009a34 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a06      	ldr	r2, [pc, #24]	; (8009a48 <SDMMC_GetCmdResp2+0x90>)
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	24000000 	.word	0x24000000
 8009a44:	10624dd3 	.word	0x10624dd3
 8009a48:	002000c5 	.word	0x002000c5

08009a4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009a54:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <SDMMC_GetCmdResp3+0x74>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1a      	ldr	r2, [pc, #104]	; (8009ac4 <SDMMC_GetCmdResp3+0x78>)
 8009a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5e:	0a5b      	lsrs	r3, r3, #9
 8009a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
 8009a68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	1e5a      	subs	r2, r3, #1
 8009a6e:	60fa      	str	r2, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a78:	e01b      	b.n	8009ab2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0ef      	beq.n	8009a6a <SDMMC_GetCmdResp3+0x1e>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1ea      	bne.n	8009a6a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d004      	beq.n	8009aaa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	e003      	b.n	8009ab2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a06      	ldr	r2, [pc, #24]	; (8009ac8 <SDMMC_GetCmdResp3+0x7c>)
 8009aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	24000000 	.word	0x24000000
 8009ac4:	10624dd3 	.word	0x10624dd3
 8009ac8:	002000c5 	.word	0x002000c5

08009acc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ada:	4b35      	ldr	r3, [pc, #212]	; (8009bb0 <SDMMC_GetCmdResp6+0xe4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a35      	ldr	r2, [pc, #212]	; (8009bb4 <SDMMC_GetCmdResp6+0xe8>)
 8009ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae4:	0a5b      	lsrs	r3, r3, #9
 8009ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aea:	fb02 f303 	mul.w	r3, r2, r3
 8009aee:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	1e5a      	subs	r2, r3, #1
 8009af4:	61fa      	str	r2, [r7, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009afe:	e052      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0ef      	beq.n	8009af0 <SDMMC_GetCmdResp6+0x24>
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1ea      	bne.n	8009af0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f003 0304 	and.w	r3, r3, #4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d004      	beq.n	8009b30 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	e03a      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e02f      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff fb7c 	bl	8009244 <SDMMC_GetCommandResponse>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d001      	beq.n	8009b5a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e025      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4a16      	ldr	r2, [pc, #88]	; (8009bb8 <SDMMC_GetCmdResp6+0xec>)
 8009b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b60:	2100      	movs	r1, #0
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff fb7b 	bl	800925e <SDMMC_GetResponse>
 8009b68:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e011      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b90:	e009      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ba0:	e001      	b.n	8009ba6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3720      	adds	r7, #32
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	24000000 	.word	0x24000000
 8009bb4:	10624dd3 	.word	0x10624dd3
 8009bb8:	002000c5 	.word	0x002000c5

08009bbc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009bc4:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <SDMMC_GetCmdResp7+0x94>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a22      	ldr	r2, [pc, #136]	; (8009c54 <SDMMC_GetCmdResp7+0x98>)
 8009bca:	fba2 2303 	umull	r2, r3, r2, r3
 8009bce:	0a5b      	lsrs	r3, r3, #9
 8009bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bd4:	fb02 f303 	mul.w	r3, r2, r3
 8009bd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	1e5a      	subs	r2, r3, #1
 8009bde:	60fa      	str	r2, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d102      	bne.n	8009bea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009be4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009be8:	e02c      	b.n	8009c44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0ef      	beq.n	8009bda <SDMMC_GetCmdResp7+0x1e>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1ea      	bne.n	8009bda <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d004      	beq.n	8009c1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2204      	movs	r2, #4
 8009c14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c16:	2304      	movs	r3, #4
 8009c18:	e014      	b.n	8009c44 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e009      	b.n	8009c44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2240      	movs	r2, #64	; 0x40
 8009c40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c42:	2300      	movs	r3, #0

}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	24000000 	.word	0x24000000
 8009c54:	10624dd3 	.word	0x10624dd3

08009c58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c60:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <SDMMC_GetCmdError+0x50>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a11      	ldr	r2, [pc, #68]	; (8009cac <SDMMC_GetCmdError+0x54>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	0a5b      	lsrs	r3, r3, #9
 8009c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	1e5a      	subs	r2, r3, #1
 8009c7a:	60fa      	str	r2, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d102      	bne.n	8009c86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c84:	e009      	b.n	8009c9a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f1      	beq.n	8009c76 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <SDMMC_GetCmdError+0x58>)
 8009c96:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	24000000 	.word	0x24000000
 8009cac:	10624dd3 	.word	0x10624dd3
 8009cb0:	002000c5 	.word	0x002000c5

08009cb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009cb8:	4904      	ldr	r1, [pc, #16]	; (8009ccc <MX_FATFS_Init+0x18>)
 8009cba:	4805      	ldr	r0, [pc, #20]	; (8009cd0 <MX_FATFS_Init+0x1c>)
 8009cbc:	f003 faf6 	bl	800d2ac <FATFS_LinkDriver>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	4b03      	ldr	r3, [pc, #12]	; (8009cd4 <MX_FATFS_Init+0x20>)
 8009cc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009cc8:	bf00      	nop
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	2400182c 	.word	0x2400182c
 8009cd0:	08010680 	.word	0x08010680
 8009cd4:	24001828 	.word	0x24001828

08009cd8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009cdc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009cf2:	f000 f885 	bl	8009e00 <BSP_SD_IsDetected>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d001      	beq.n	8009d00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e012      	b.n	8009d26 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009d00:	480b      	ldr	r0, [pc, #44]	; (8009d30 <BSP_SD_Init+0x48>)
 8009d02:	f7fc fd3f 	bl	8006784 <HAL_SD_Init>
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009d0a:	79fb      	ldrb	r3, [r7, #7]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d14:	4806      	ldr	r0, [pc, #24]	; (8009d30 <BSP_SD_Init+0x48>)
 8009d16:	f7fd fbef 	bl	80074f8 <HAL_SD_ConfigWideBusOperation>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009d24:	79fb      	ldrb	r3, [r7, #7]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	24001714 	.word	0x24001714

08009d34 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	4806      	ldr	r0, [pc, #24]	; (8009d64 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009d4c:	f7fc fe34 	bl	80069b8 <HAL_SD_ReadBlocks_DMA>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	24001714 	.word	0x24001714

08009d68 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	68f9      	ldr	r1, [r7, #12]
 8009d7e:	4806      	ldr	r0, [pc, #24]	; (8009d98 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009d80:	f7fc fec2 	bl	8006b08 <HAL_SD_WriteBlocks_DMA>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	24001714 	.word	0x24001714

08009d9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <BSP_SD_GetCardState+0x1c>)
 8009da2:	f7fd fcbb 	bl	800771c <HAL_SD_GetCardState>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	bf14      	ite	ne
 8009dac:	2301      	movne	r3, #1
 8009dae:	2300      	moveq	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	24001714 	.word	0x24001714

08009dbc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	4803      	ldr	r0, [pc, #12]	; (8009dd4 <BSP_SD_GetCardInfo+0x18>)
 8009dc8:	f7fd fb6a 	bl	80074a0 <HAL_SD_GetCardInfo>
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	24001714 	.word	0x24001714

08009dd8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009de0:	f000 f9a0 	bl	800a124 <BSP_SD_WriteCpltCallback>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009df4:	f000 f9a2 	bl	800a13c <BSP_SD_ReadCpltCallback>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009e06:	2301      	movs	r3, #1
 8009e08:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009e0a:	f000 f80b 	bl	8009e24 <BSP_PlatformIsDetected>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009e14:	2300      	movs	r3, #0
 8009e16:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	b2db      	uxtb	r3, r3
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009e2e:	2101      	movs	r1, #1
 8009e30:	4806      	ldr	r0, [pc, #24]	; (8009e4c <BSP_PlatformIsDetected+0x28>)
 8009e32:	f7f9 fa7d 	bl	8003330 <HAL_GPIO_ReadPin>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009e40:	79fb      	ldrb	r3, [r7, #7]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	58020c00 	.word	0x58020c00

08009e50 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009e58:	f7f7 fe1e 	bl	8001a98 <HAL_GetTick>
 8009e5c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009e5e:	e006      	b.n	8009e6e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e60:	f7ff ff9c 	bl	8009d9c <BSP_SD_GetCardState>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e009      	b.n	8009e82 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009e6e:	f7f7 fe13 	bl	8001a98 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d8f0      	bhi.n	8009e60 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009e96:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <SD_CheckStatus+0x38>)
 8009e98:	2201      	movs	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009e9c:	f7ff ff7e 	bl	8009d9c <BSP_SD_GetCardState>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d107      	bne.n	8009eb6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009ea6:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <SD_CheckStatus+0x38>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <SD_CheckStatus+0x38>)
 8009eb4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009eb6:	4b03      	ldr	r3, [pc, #12]	; (8009ec4 <SD_CheckStatus+0x38>)
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	b2db      	uxtb	r3, r3
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	2400000d 	.word	0x2400000d

08009ec8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009ed2:	f7ff ff09 	bl	8009ce8 <BSP_SD_Init>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d107      	bne.n	8009eec <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff ffd4 	bl	8009e8c <SD_CheckStatus>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4b04      	ldr	r3, [pc, #16]	; (8009efc <SD_initialize+0x34>)
 8009eea:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009eec:	4b03      	ldr	r3, [pc, #12]	; (8009efc <SD_initialize+0x34>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	b2db      	uxtb	r3, r3
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	2400000d 	.word	0x2400000d

08009f00 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009f0a:	79fb      	ldrb	r3, [r7, #7]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff ffbd 	bl	8009e8c <SD_CheckStatus>
 8009f12:	4603      	mov	r3, r0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	607a      	str	r2, [r7, #4]
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009f30:	f247 5030 	movw	r0, #30000	; 0x7530
 8009f34:	f7ff ff8c 	bl	8009e50 <SD_CheckStatusWithTimeout>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da01      	bge.n	8009f42 <SD_read+0x26>
  {
    return res;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	e03b      	b.n	8009fba <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	68b8      	ldr	r0, [r7, #8]
 8009f48:	f7ff fef4 	bl	8009d34 <BSP_SD_ReadBlocks_DMA>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d132      	bne.n	8009fb8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009f52:	4b1c      	ldr	r3, [pc, #112]	; (8009fc4 <SD_read+0xa8>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009f58:	f7f7 fd9e 	bl	8001a98 <HAL_GetTick>
 8009f5c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009f5e:	bf00      	nop
 8009f60:	4b18      	ldr	r3, [pc, #96]	; (8009fc4 <SD_read+0xa8>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d108      	bne.n	8009f7a <SD_read+0x5e>
 8009f68:	f7f7 fd96 	bl	8001a98 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	f247 522f 	movw	r2, #29999	; 0x752f
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d9f2      	bls.n	8009f60 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009f7a:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <SD_read+0xa8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	e017      	b.n	8009fb8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009f88:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <SD_read+0xa8>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009f8e:	f7f7 fd83 	bl	8001a98 <HAL_GetTick>
 8009f92:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009f94:	e007      	b.n	8009fa6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009f96:	f7ff ff01 	bl	8009d9c <BSP_SD_GetCardState>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <SD_read+0x8a>
          {
            res = RES_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009fa4:	e008      	b.n	8009fb8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009fa6:	f7f7 fd77 	bl	8001a98 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	f247 522f 	movw	r2, #29999	; 0x752f
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d9ee      	bls.n	8009f96 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	24001834 	.word	0x24001834

08009fc8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009fdc:	4b24      	ldr	r3, [pc, #144]	; (800a070 <SD_write+0xa8>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009fe2:	f247 5030 	movw	r0, #30000	; 0x7530
 8009fe6:	f7ff ff33 	bl	8009e50 <SD_CheckStatusWithTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	da01      	bge.n	8009ff4 <SD_write+0x2c>
  {
    return res;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	e038      	b.n	800a066 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	68b8      	ldr	r0, [r7, #8]
 8009ffa:	f7ff feb5 	bl	8009d68 <BSP_SD_WriteBlocks_DMA>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d12f      	bne.n	800a064 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a004:	f7f7 fd48 	bl	8001a98 <HAL_GetTick>
 800a008:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a00a:	bf00      	nop
 800a00c:	4b18      	ldr	r3, [pc, #96]	; (800a070 <SD_write+0xa8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d108      	bne.n	800a026 <SD_write+0x5e>
 800a014:	f7f7 fd40 	bl	8001a98 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	f247 522f 	movw	r2, #29999	; 0x752f
 800a022:	4293      	cmp	r3, r2
 800a024:	d9f2      	bls.n	800a00c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <SD_write+0xa8>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d102      	bne.n	800a034 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	75fb      	strb	r3, [r7, #23]
 800a032:	e017      	b.n	800a064 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a034:	4b0e      	ldr	r3, [pc, #56]	; (800a070 <SD_write+0xa8>)
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a03a:	f7f7 fd2d 	bl	8001a98 <HAL_GetTick>
 800a03e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a040:	e007      	b.n	800a052 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a042:	f7ff feab 	bl	8009d9c <BSP_SD_GetCardState>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <SD_write+0x8a>
          {
            res = RES_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	75fb      	strb	r3, [r7, #23]
            break;
 800a050:	e008      	b.n	800a064 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a052:	f7f7 fd21 	bl	8001a98 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a060:	4293      	cmp	r3, r2
 800a062:	d9ee      	bls.n	800a042 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	24001830 	.word	0x24001830

0800a074 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08c      	sub	sp, #48	; 0x30
 800a078:	af00      	add	r7, sp, #0
 800a07a:	4603      	mov	r3, r0
 800a07c:	603a      	str	r2, [r7, #0]
 800a07e:	71fb      	strb	r3, [r7, #7]
 800a080:	460b      	mov	r3, r1
 800a082:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a08a:	4b25      	ldr	r3, [pc, #148]	; (800a120 <SD_ioctl+0xac>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <SD_ioctl+0x28>
 800a098:	2303      	movs	r3, #3
 800a09a:	e03c      	b.n	800a116 <SD_ioctl+0xa2>

  switch (cmd)
 800a09c:	79bb      	ldrb	r3, [r7, #6]
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d834      	bhi.n	800a10c <SD_ioctl+0x98>
 800a0a2:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <SD_ioctl+0x34>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0c1 	.word	0x0800a0c1
 800a0b0:	0800a0d9 	.word	0x0800a0d9
 800a0b4:	0800a0f3 	.word	0x0800a0f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0be:	e028      	b.n	800a112 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0c0:	f107 0308 	add.w	r3, r7, #8
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7ff fe79 	bl	8009dbc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a0ca:	6a3a      	ldr	r2, [r7, #32]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0d6:	e01c      	b.n	800a112 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0d8:	f107 0308 	add.w	r3, r7, #8
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff fe6d 	bl	8009dbc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0f0:	e00f      	b.n	800a112 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0f2:	f107 0308 	add.w	r3, r7, #8
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fe60 	bl	8009dbc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	0a5a      	lsrs	r2, r3, #9
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a10a:	e002      	b.n	800a112 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a10c:	2304      	movs	r3, #4
 800a10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a116:	4618      	mov	r0, r3
 800a118:	3730      	adds	r7, #48	; 0x30
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	2400000d 	.word	0x2400000d

0800a124 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a128:	4b03      	ldr	r3, [pc, #12]	; (800a138 <BSP_SD_WriteCpltCallback+0x14>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	24001830 	.word	0x24001830

0800a13c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a140:	4b03      	ldr	r3, [pc, #12]	; (800a150 <BSP_SD_ReadCpltCallback+0x14>)
 800a142:	2201      	movs	r2, #1
 800a144:	601a      	str	r2, [r3, #0]
}
 800a146:	bf00      	nop
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	24001834 	.word	0x24001834

0800a154 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	4a08      	ldr	r2, [pc, #32]	; (800a184 <disk_status+0x30>)
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	79fa      	ldrb	r2, [r7, #7]
 800a16c:	4905      	ldr	r1, [pc, #20]	; (800a184 <disk_status+0x30>)
 800a16e:	440a      	add	r2, r1
 800a170:	7a12      	ldrb	r2, [r2, #8]
 800a172:	4610      	mov	r0, r2
 800a174:	4798      	blx	r3
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	24001a60 	.word	0x24001a60

0800a188 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	4a0d      	ldr	r2, [pc, #52]	; (800a1d0 <disk_initialize+0x48>)
 800a19a:	5cd3      	ldrb	r3, [r2, r3]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d111      	bne.n	800a1c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <disk_initialize+0x48>)
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <disk_initialize+0x48>)
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	79fa      	ldrb	r2, [r7, #7]
 800a1b6:	4906      	ldr	r1, [pc, #24]	; (800a1d0 <disk_initialize+0x48>)
 800a1b8:	440a      	add	r2, r1
 800a1ba:	7a12      	ldrb	r2, [r2, #8]
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4798      	blx	r3
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	24001a60 	.word	0x24001a60

0800a1d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a1d4:	b590      	push	{r4, r7, lr}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	4a0a      	ldr	r2, [pc, #40]	; (800a210 <disk_read+0x3c>)
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	689c      	ldr	r4, [r3, #8]
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	4a07      	ldr	r2, [pc, #28]	; (800a210 <disk_read+0x3c>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	7a18      	ldrb	r0, [r3, #8]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	47a0      	blx	r4
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]
  return res;
 800a204:	7dfb      	ldrb	r3, [r7, #23]
}
 800a206:	4618      	mov	r0, r3
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd90      	pop	{r4, r7, pc}
 800a20e:	bf00      	nop
 800a210:	24001a60 	.word	0x24001a60

0800a214 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4a0a      	ldr	r2, [pc, #40]	; (800a250 <disk_write+0x3c>)
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	68dc      	ldr	r4, [r3, #12]
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <disk_write+0x3c>)
 800a234:	4413      	add	r3, r2
 800a236:	7a18      	ldrb	r0, [r3, #8]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	47a0      	blx	r4
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]
  return res;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	371c      	adds	r7, #28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd90      	pop	{r4, r7, pc}
 800a24e:	bf00      	nop
 800a250:	24001a60 	.word	0x24001a60

0800a254 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	603a      	str	r2, [r7, #0]
 800a25e:	71fb      	strb	r3, [r7, #7]
 800a260:	460b      	mov	r3, r1
 800a262:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	4a09      	ldr	r2, [pc, #36]	; (800a28c <disk_ioctl+0x38>)
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	79fa      	ldrb	r2, [r7, #7]
 800a272:	4906      	ldr	r1, [pc, #24]	; (800a28c <disk_ioctl+0x38>)
 800a274:	440a      	add	r2, r1
 800a276:	7a10      	ldrb	r0, [r2, #8]
 800a278:	79b9      	ldrb	r1, [r7, #6]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4798      	blx	r3
 800a27e:	4603      	mov	r3, r0
 800a280:	73fb      	strb	r3, [r7, #15]
  return res;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	24001a60 	.word	0x24001a60

0800a290 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3301      	adds	r3, #1
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a2a0:	89fb      	ldrh	r3, [r7, #14]
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	b21a      	sxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b21b      	sxth	r3, r3
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	b21b      	sxth	r3, r3
 800a2b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a2b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3303      	adds	r3, #3
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	3202      	adds	r2, #2
 800a2d8:	7812      	ldrb	r2, [r2, #0]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	7812      	ldrb	r2, [r2, #0]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	021b      	lsls	r3, r3, #8
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	7812      	ldrb	r2, [r2, #0]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	887a      	ldrh	r2, [r7, #2]
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	887b      	ldrh	r3, [r7, #2]
 800a320:	0a1b      	lsrs	r3, r3, #8
 800a322:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	887a      	ldrh	r2, [r7, #2]
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	701a      	strb	r2, [r3, #0]
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	0a1b      	lsrs	r3, r3, #8
 800a356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	607a      	str	r2, [r7, #4]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	b2d2      	uxtb	r2, r2
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	0a1b      	lsrs	r3, r3, #8
 800a37a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	701a      	strb	r2, [r3, #0]
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00d      	beq.n	800a3ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	1c53      	adds	r3, r2, #1
 800a3b2:	613b      	str	r3, [r7, #16]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1c59      	adds	r1, r3, #1
 800a3b8:	6179      	str	r1, [r7, #20]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1f1      	bne.n	800a3ae <mem_cpy+0x1a>
	}
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a3d6:	b480      	push	{r7}
 800a3d8:	b087      	sub	sp, #28
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	617a      	str	r2, [r7, #20]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	607b      	str	r3, [r7, #4]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1f3      	bne.n	800a3e6 <mem_set+0x10>
}
 800a3fe:	bf00      	nop
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a40c:	b480      	push	{r7}
 800a40e:	b089      	sub	sp, #36	; 0x24
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	61fb      	str	r3, [r7, #28]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	61fa      	str	r2, [r7, #28]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	61ba      	str	r2, [r7, #24]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	1acb      	subs	r3, r1, r3
 800a438:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	607b      	str	r3, [r7, #4]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <mem_cmp+0x40>
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d0eb      	beq.n	800a424 <mem_cmp+0x18>

	return r;
 800a44c:	697b      	ldr	r3, [r7, #20]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3724      	adds	r7, #36	; 0x24
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a464:	e002      	b.n	800a46c <chk_chr+0x12>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3301      	adds	r3, #1
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <chk_chr+0x26>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d1f2      	bne.n	800a466 <chk_chr+0xc>
	return *str;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a49a:	2300      	movs	r3, #0
 800a49c:	60bb      	str	r3, [r7, #8]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e029      	b.n	800a4f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a4a4:	4a27      	ldr	r2, [pc, #156]	; (800a544 <chk_lock+0xb4>)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	011b      	lsls	r3, r3, #4
 800a4aa:	4413      	add	r3, r2
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01d      	beq.n	800a4ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a4b2:	4a24      	ldr	r2, [pc, #144]	; (800a544 <chk_lock+0xb4>)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	4413      	add	r3, r2
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d116      	bne.n	800a4f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a4c4:	4a1f      	ldr	r2, [pc, #124]	; (800a544 <chk_lock+0xb4>)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	4413      	add	r3, r2
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d10c      	bne.n	800a4f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a4d8:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <chk_lock+0xb4>)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	011b      	lsls	r3, r3, #4
 800a4de:	4413      	add	r3, r2
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d102      	bne.n	800a4f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a4ec:	e007      	b.n	800a4fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d9d2      	bls.n	800a4a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d109      	bne.n	800a518 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <chk_lock+0x80>
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d101      	bne.n	800a514 <chk_lock+0x84>
 800a510:	2300      	movs	r3, #0
 800a512:	e010      	b.n	800a536 <chk_lock+0xa6>
 800a514:	2312      	movs	r3, #18
 800a516:	e00e      	b.n	800a536 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d108      	bne.n	800a530 <chk_lock+0xa0>
 800a51e:	4a09      	ldr	r2, [pc, #36]	; (800a544 <chk_lock+0xb4>)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	4413      	add	r3, r2
 800a526:	330c      	adds	r3, #12
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52e:	d101      	bne.n	800a534 <chk_lock+0xa4>
 800a530:	2310      	movs	r3, #16
 800a532:	e000      	b.n	800a536 <chk_lock+0xa6>
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	24001840 	.word	0x24001840

0800a548 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a54e:	2300      	movs	r3, #0
 800a550:	607b      	str	r3, [r7, #4]
 800a552:	e002      	b.n	800a55a <enq_lock+0x12>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3301      	adds	r3, #1
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d806      	bhi.n	800a56e <enq_lock+0x26>
 800a560:	4a09      	ldr	r2, [pc, #36]	; (800a588 <enq_lock+0x40>)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	4413      	add	r3, r2
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1f2      	bne.n	800a554 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b02      	cmp	r3, #2
 800a572:	bf14      	ite	ne
 800a574:	2301      	movne	r3, #1
 800a576:	2300      	moveq	r3, #0
 800a578:	b2db      	uxtb	r3, r3
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	24001840 	.word	0x24001840

0800a58c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e01f      	b.n	800a5dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a59c:	4a41      	ldr	r2, [pc, #260]	; (800a6a4 <inc_lock+0x118>)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	011b      	lsls	r3, r3, #4
 800a5a2:	4413      	add	r3, r2
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d113      	bne.n	800a5d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a5ae:	4a3d      	ldr	r2, [pc, #244]	; (800a6a4 <inc_lock+0x118>)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	011b      	lsls	r3, r3, #4
 800a5b4:	4413      	add	r3, r2
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d109      	bne.n	800a5d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a5c2:	4a38      	ldr	r2, [pc, #224]	; (800a6a4 <inc_lock+0x118>)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	011b      	lsls	r3, r3, #4
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d006      	beq.n	800a5e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d9dc      	bls.n	800a59c <inc_lock+0x10>
 800a5e2:	e000      	b.n	800a5e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a5e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d132      	bne.n	800a652 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <inc_lock+0x6c>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d806      	bhi.n	800a60c <inc_lock+0x80>
 800a5fe:	4a29      	ldr	r2, [pc, #164]	; (800a6a4 <inc_lock+0x118>)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	4413      	add	r3, r2
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1f2      	bne.n	800a5f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d101      	bne.n	800a616 <inc_lock+0x8a>
 800a612:	2300      	movs	r3, #0
 800a614:	e040      	b.n	800a698 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4922      	ldr	r1, [pc, #136]	; (800a6a4 <inc_lock+0x118>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	440b      	add	r3, r1
 800a622:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	491e      	ldr	r1, [pc, #120]	; (800a6a4 <inc_lock+0x118>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	011b      	lsls	r3, r3, #4
 800a62e:	440b      	add	r3, r1
 800a630:	3304      	adds	r3, #4
 800a632:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	695a      	ldr	r2, [r3, #20]
 800a638:	491a      	ldr	r1, [pc, #104]	; (800a6a4 <inc_lock+0x118>)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	440b      	add	r3, r1
 800a640:	3308      	adds	r3, #8
 800a642:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a644:	4a17      	ldr	r2, [pc, #92]	; (800a6a4 <inc_lock+0x118>)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	011b      	lsls	r3, r3, #4
 800a64a:	4413      	add	r3, r2
 800a64c:	330c      	adds	r3, #12
 800a64e:	2200      	movs	r2, #0
 800a650:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d009      	beq.n	800a66c <inc_lock+0xe0>
 800a658:	4a12      	ldr	r2, [pc, #72]	; (800a6a4 <inc_lock+0x118>)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	011b      	lsls	r3, r3, #4
 800a65e:	4413      	add	r3, r2
 800a660:	330c      	adds	r3, #12
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <inc_lock+0xe0>
 800a668:	2300      	movs	r3, #0
 800a66a:	e015      	b.n	800a698 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d108      	bne.n	800a684 <inc_lock+0xf8>
 800a672:	4a0c      	ldr	r2, [pc, #48]	; (800a6a4 <inc_lock+0x118>)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	4413      	add	r3, r2
 800a67a:	330c      	adds	r3, #12
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	e001      	b.n	800a688 <inc_lock+0xfc>
 800a684:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a688:	4906      	ldr	r1, [pc, #24]	; (800a6a4 <inc_lock+0x118>)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	011b      	lsls	r3, r3, #4
 800a68e:	440b      	add	r3, r1
 800a690:	330c      	adds	r3, #12
 800a692:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3301      	adds	r3, #1
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	24001840 	.word	0x24001840

0800a6a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d825      	bhi.n	800a708 <dec_lock+0x60>
		n = Files[i].ctr;
 800a6bc:	4a17      	ldr	r2, [pc, #92]	; (800a71c <dec_lock+0x74>)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	4413      	add	r3, r2
 800a6c4:	330c      	adds	r3, #12
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a6ca:	89fb      	ldrh	r3, [r7, #14]
 800a6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6d0:	d101      	bne.n	800a6d6 <dec_lock+0x2e>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a6d6:	89fb      	ldrh	r3, [r7, #14]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <dec_lock+0x3a>
 800a6dc:	89fb      	ldrh	r3, [r7, #14]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a6e2:	4a0e      	ldr	r2, [pc, #56]	; (800a71c <dec_lock+0x74>)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	4413      	add	r3, r2
 800a6ea:	330c      	adds	r3, #12
 800a6ec:	89fa      	ldrh	r2, [r7, #14]
 800a6ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a6f0:	89fb      	ldrh	r3, [r7, #14]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <dec_lock+0x5a>
 800a6f6:	4a09      	ldr	r2, [pc, #36]	; (800a71c <dec_lock+0x74>)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	011b      	lsls	r3, r3, #4
 800a6fc:	4413      	add	r3, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	737b      	strb	r3, [r7, #13]
 800a706:	e001      	b.n	800a70c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a708:	2302      	movs	r3, #2
 800a70a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a70c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	24001840 	.word	0x24001840

0800a720 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	e010      	b.n	800a750 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a72e:	4a0d      	ldr	r2, [pc, #52]	; (800a764 <clear_lock+0x44>)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	4413      	add	r3, r2
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d105      	bne.n	800a74a <clear_lock+0x2a>
 800a73e:	4a09      	ldr	r2, [pc, #36]	; (800a764 <clear_lock+0x44>)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	011b      	lsls	r3, r3, #4
 800a744:	4413      	add	r3, r2
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	3301      	adds	r3, #1
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d9eb      	bls.n	800a72e <clear_lock+0xe>
	}
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	24001840 	.word	0x24001840

0800a768 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	78db      	ldrb	r3, [r3, #3]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d034      	beq.n	800a7e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a780:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	7858      	ldrb	r0, [r3, #1]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a78c:	2301      	movs	r3, #1
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	f7ff fd40 	bl	800a214 <disk_write>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	73fb      	strb	r3, [r7, #15]
 800a79e:	e022      	b.n	800a7e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	1ad2      	subs	r2, r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d217      	bcs.n	800a7e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	789b      	ldrb	r3, [r3, #2]
 800a7ba:	613b      	str	r3, [r7, #16]
 800a7bc:	e010      	b.n	800a7e0 <sync_window+0x78>
					wsect += fs->fsize;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	7858      	ldrb	r0, [r3, #1]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	f7ff fd1d 	bl	800a214 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d8eb      	bhi.n	800a7be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	429a      	cmp	r2, r3
 800a806:	d01b      	beq.n	800a840 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff ffad 	bl	800a768 <sync_window>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d113      	bne.n	800a840 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7858      	ldrb	r0, [r3, #1]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a822:	2301      	movs	r3, #1
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	f7ff fcd5 	bl	800a1d4 <disk_read>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a830:	f04f 33ff 	mov.w	r3, #4294967295
 800a834:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a836:	2301      	movs	r3, #1
 800a838:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7ff ff87 	bl	800a768 <sync_window>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d158      	bne.n	800a916 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d148      	bne.n	800a8fe <sync_fs+0xb2>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	791b      	ldrb	r3, [r3, #4]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d144      	bne.n	800a8fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3334      	adds	r3, #52	; 0x34
 800a878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fda9 	bl	800a3d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3334      	adds	r3, #52	; 0x34
 800a888:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a88c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fd38 	bl	800a306 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3334      	adds	r3, #52	; 0x34
 800a89a:	4921      	ldr	r1, [pc, #132]	; (800a920 <sync_fs+0xd4>)
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fd4d 	bl	800a33c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3334      	adds	r3, #52	; 0x34
 800a8a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a8aa:	491e      	ldr	r1, [pc, #120]	; (800a924 <sync_fs+0xd8>)
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fd45 	bl	800a33c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3334      	adds	r3, #52	; 0x34
 800a8b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	f7ff fd3b 	bl	800a33c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3334      	adds	r3, #52	; 0x34
 800a8ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	f7ff fd31 	bl	800a33c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7858      	ldrb	r0, [r3, #1]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f7ff fc8e 	bl	800a214 <disk_write>
			fs->fsi_flag = 0;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	785b      	ldrb	r3, [r3, #1]
 800a902:	2200      	movs	r2, #0
 800a904:	2100      	movs	r1, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fca4 	bl	800a254 <disk_ioctl>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <sync_fs+0xca>
 800a912:	2301      	movs	r3, #1
 800a914:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	41615252 	.word	0x41615252
 800a924:	61417272 	.word	0x61417272

0800a928 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	3b02      	subs	r3, #2
 800a936:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	3b02      	subs	r3, #2
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	429a      	cmp	r2, r3
 800a942:	d301      	bcc.n	800a948 <clust2sect+0x20>
 800a944:	2300      	movs	r3, #0
 800a946:	e008      	b.n	800a95a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	895b      	ldrh	r3, [r3, #10]
 800a94c:	461a      	mov	r2, r3
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	fb03 f202 	mul.w	r2, r3, r2
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	4413      	add	r3, r2
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d904      	bls.n	800a986 <get_fat+0x20>
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	429a      	cmp	r2, r3
 800a984:	d302      	bcc.n	800a98c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a986:	2301      	movs	r3, #1
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e08f      	b.n	800aaac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295
 800a990:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b03      	cmp	r3, #3
 800a998:	d062      	beq.n	800aa60 <get_fat+0xfa>
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	dc7c      	bgt.n	800aa98 <get_fat+0x132>
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d002      	beq.n	800a9a8 <get_fat+0x42>
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d042      	beq.n	800aa2c <get_fat+0xc6>
 800a9a6:	e077      	b.n	800aa98 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	085b      	lsrs	r3, r3, #1
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	0a5b      	lsrs	r3, r3, #9
 800a9be:	4413      	add	r3, r2
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6938      	ldr	r0, [r7, #16]
 800a9c4:	f7ff ff14 	bl	800a7f0 <move_window>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d167      	bne.n	800aa9e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	1c5a      	adds	r2, r3, #1
 800a9d2:	60fa      	str	r2, [r7, #12]
 800a9d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	0a5b      	lsrs	r3, r3, #9
 800a9ea:	4413      	add	r3, r2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6938      	ldr	r0, [r7, #16]
 800a9f0:	f7ff fefe 	bl	800a7f0 <move_window>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d153      	bne.n	800aaa2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4413      	add	r3, r2
 800aa04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa08:	021b      	lsls	r3, r3, #8
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <get_fat+0xbc>
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	091b      	lsrs	r3, r3, #4
 800aa20:	e002      	b.n	800aa28 <get_fat+0xc2>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa28:	617b      	str	r3, [r7, #20]
			break;
 800aa2a:	e03f      	b.n	800aaac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	4413      	add	r3, r2
 800aa36:	4619      	mov	r1, r3
 800aa38:	6938      	ldr	r0, [r7, #16]
 800aa3a:	f7ff fed9 	bl	800a7f0 <move_window>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d130      	bne.n	800aaa6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	005b      	lsls	r3, r3, #1
 800aa4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aa52:	4413      	add	r3, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff fc1b 	bl	800a290 <ld_word>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	617b      	str	r3, [r7, #20]
			break;
 800aa5e:	e025      	b.n	800aaac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	09db      	lsrs	r3, r3, #7
 800aa68:	4413      	add	r3, r2
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6938      	ldr	r0, [r7, #16]
 800aa6e:	f7ff febf 	bl	800a7f0 <move_window>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d118      	bne.n	800aaaa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aa86:	4413      	add	r3, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff fc19 	bl	800a2c0 <ld_dword>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aa94:	617b      	str	r3, [r7, #20]
			break;
 800aa96:	e009      	b.n	800aaac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aa98:	2301      	movs	r3, #1
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	e006      	b.n	800aaac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa9e:	bf00      	nop
 800aaa0:	e004      	b.n	800aaac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aaa2:	bf00      	nop
 800aaa4:	e002      	b.n	800aaac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aaa6:	bf00      	nop
 800aaa8:	e000      	b.n	800aaac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aaaa:	bf00      	nop
		}
	}

	return val;
 800aaac:	697b      	ldr	r3, [r7, #20]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aab6:	b590      	push	{r4, r7, lr}
 800aab8:	b089      	sub	sp, #36	; 0x24
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aac2:	2302      	movs	r3, #2
 800aac4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	f240 80d2 	bls.w	800ac72 <put_fat+0x1bc>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	f080 80cc 	bcs.w	800ac72 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b03      	cmp	r3, #3
 800aae0:	f000 8096 	beq.w	800ac10 <put_fat+0x15a>
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	f300 80cd 	bgt.w	800ac84 <put_fat+0x1ce>
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d002      	beq.n	800aaf4 <put_fat+0x3e>
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d06e      	beq.n	800abd0 <put_fat+0x11a>
 800aaf2:	e0c7      	b.n	800ac84 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	61bb      	str	r3, [r7, #24]
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	085b      	lsrs	r3, r3, #1
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	4413      	add	r3, r2
 800ab00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	0a5b      	lsrs	r3, r3, #9
 800ab0a:	4413      	add	r3, r2
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff fe6e 	bl	800a7f0 <move_window>
 800ab14:	4603      	mov	r3, r0
 800ab16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab18:	7ffb      	ldrb	r3, [r7, #31]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 80ab 	bne.w	800ac76 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	1c59      	adds	r1, r3, #1
 800ab2a:	61b9      	str	r1, [r7, #24]
 800ab2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab30:	4413      	add	r3, r2
 800ab32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00d      	beq.n	800ab5a <put_fat+0xa4>
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	b25b      	sxtb	r3, r3
 800ab44:	f003 030f 	and.w	r3, r3, #15
 800ab48:	b25a      	sxtb	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	b25b      	sxtb	r3, r3
 800ab52:	4313      	orrs	r3, r2
 800ab54:	b25b      	sxtb	r3, r3
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	e001      	b.n	800ab5e <put_fat+0xa8>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	0a5b      	lsrs	r3, r3, #9
 800ab70:	4413      	add	r3, r2
 800ab72:	4619      	mov	r1, r3
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff fe3b 	bl	800a7f0 <move_window>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab7e:	7ffb      	ldrb	r3, [r7, #31]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d17a      	bne.n	800ac7a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab90:	4413      	add	r3, r2
 800ab92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <put_fat+0xf0>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	091b      	lsrs	r3, r3, #4
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	e00e      	b.n	800abc4 <put_fat+0x10e>
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b25b      	sxtb	r3, r3
 800abac:	f023 030f 	bic.w	r3, r3, #15
 800abb0:	b25a      	sxtb	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	0a1b      	lsrs	r3, r3, #8
 800abb6:	b25b      	sxtb	r3, r3
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	b25b      	sxtb	r3, r3
 800abbe:	4313      	orrs	r3, r2
 800abc0:	b25b      	sxtb	r3, r3
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2201      	movs	r2, #1
 800abcc:	70da      	strb	r2, [r3, #3]
			break;
 800abce:	e059      	b.n	800ac84 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	4413      	add	r3, r2
 800abda:	4619      	mov	r1, r3
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fe07 	bl	800a7f0 <move_window>
 800abe2:	4603      	mov	r3, r0
 800abe4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d148      	bne.n	800ac7e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800abfa:	4413      	add	r3, r2
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	b292      	uxth	r2, r2
 800ac00:	4611      	mov	r1, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff fb7f 	bl	800a306 <st_word>
			fs->wflag = 1;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	70da      	strb	r2, [r3, #3]
			break;
 800ac0e:	e039      	b.n	800ac84 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	09db      	lsrs	r3, r3, #7
 800ac18:	4413      	add	r3, r2
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff fde7 	bl	800a7f0 <move_window>
 800ac22:	4603      	mov	r3, r0
 800ac24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac26:	7ffb      	ldrb	r3, [r7, #31]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d12a      	bne.n	800ac82 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ac40:	4413      	add	r3, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fb3c 	bl	800a2c0 <ld_dword>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac4e:	4323      	orrs	r3, r4
 800ac50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ac60:	4413      	add	r3, r2
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fb69 	bl	800a33c <st_dword>
			fs->wflag = 1;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	70da      	strb	r2, [r3, #3]
			break;
 800ac70:	e008      	b.n	800ac84 <put_fat+0x1ce>
		}
	}
 800ac72:	bf00      	nop
 800ac74:	e006      	b.n	800ac84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ac76:	bf00      	nop
 800ac78:	e004      	b.n	800ac84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ac7a:	bf00      	nop
 800ac7c:	e002      	b.n	800ac84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ac7e:	bf00      	nop
 800ac80:	e000      	b.n	800ac84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ac82:	bf00      	nop
	return res;
 800ac84:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3724      	adds	r7, #36	; 0x24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd90      	pop	{r4, r7, pc}

0800ac8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b088      	sub	sp, #32
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	60f8      	str	r0, [r7, #12]
 800ac96:	60b9      	str	r1, [r7, #8]
 800ac98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d904      	bls.n	800acb4 <remove_chain+0x26>
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d301      	bcc.n	800acb8 <remove_chain+0x2a>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e04b      	b.n	800ad50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00c      	beq.n	800acd8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800acbe:	f04f 32ff 	mov.w	r2, #4294967295
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	69b8      	ldr	r0, [r7, #24]
 800acc6:	f7ff fef6 	bl	800aab6 <put_fat>
 800acca:	4603      	mov	r3, r0
 800accc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800acce:	7ffb      	ldrb	r3, [r7, #31]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <remove_chain+0x4a>
 800acd4:	7ffb      	ldrb	r3, [r7, #31]
 800acd6:	e03b      	b.n	800ad50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f7ff fe43 	bl	800a966 <get_fat>
 800ace0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d031      	beq.n	800ad4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d101      	bne.n	800acf2 <remove_chain+0x64>
 800acee:	2302      	movs	r3, #2
 800acf0:	e02e      	b.n	800ad50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d101      	bne.n	800acfe <remove_chain+0x70>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e028      	b.n	800ad50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800acfe:	2200      	movs	r2, #0
 800ad00:	68b9      	ldr	r1, [r7, #8]
 800ad02:	69b8      	ldr	r0, [r7, #24]
 800ad04:	f7ff fed7 	bl	800aab6 <put_fat>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ad0c:	7ffb      	ldrb	r3, [r7, #31]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <remove_chain+0x88>
 800ad12:	7ffb      	ldrb	r3, [r7, #31]
 800ad14:	e01c      	b.n	800ad50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	695a      	ldr	r2, [r3, #20]
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	3b02      	subs	r3, #2
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d20b      	bcs.n	800ad3c <remove_chain+0xae>
			fs->free_clst++;
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	791b      	ldrb	r3, [r3, #4]
 800ad32:	f043 0301 	orr.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d3c6      	bcc.n	800acd8 <remove_chain+0x4a>
 800ad4a:	e000      	b.n	800ad4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ad4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3720      	adds	r7, #32
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10d      	bne.n	800ad8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <create_chain+0x2c>
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d31b      	bcc.n	800adbc <create_chain+0x64>
 800ad84:	2301      	movs	r3, #1
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	e018      	b.n	800adbc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff fdea 	bl	800a966 <get_fat>
 800ad92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d801      	bhi.n	800ad9e <create_chain+0x46>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e070      	b.n	800ae80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada4:	d101      	bne.n	800adaa <create_chain+0x52>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	e06a      	b.n	800ae80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d201      	bcs.n	800adb8 <create_chain+0x60>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	e063      	b.n	800ae80 <create_chain+0x128>
		scl = clst;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	3301      	adds	r3, #1
 800adc4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	69fa      	ldr	r2, [r7, #28]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d307      	bcc.n	800ade0 <create_chain+0x88>
				ncl = 2;
 800add0:	2302      	movs	r3, #2
 800add2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	429a      	cmp	r2, r3
 800adda:	d901      	bls.n	800ade0 <create_chain+0x88>
 800addc:	2300      	movs	r3, #0
 800adde:	e04f      	b.n	800ae80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ade0:	69f9      	ldr	r1, [r7, #28]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff fdbf 	bl	800a966 <get_fat>
 800ade8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00e      	beq.n	800ae0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d003      	beq.n	800adfe <create_chain+0xa6>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfc:	d101      	bne.n	800ae02 <create_chain+0xaa>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	e03e      	b.n	800ae80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d1da      	bne.n	800adc0 <create_chain+0x68>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e038      	b.n	800ae80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ae0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ae10:	f04f 32ff 	mov.w	r2, #4294967295
 800ae14:	69f9      	ldr	r1, [r7, #28]
 800ae16:	6938      	ldr	r0, [r7, #16]
 800ae18:	f7ff fe4d 	bl	800aab6 <put_fat>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d109      	bne.n	800ae3a <create_chain+0xe2>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d006      	beq.n	800ae3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ae2c:	69fa      	ldr	r2, [r7, #28]
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6938      	ldr	r0, [r7, #16]
 800ae32:	f7ff fe40 	bl	800aab6 <put_fat>
 800ae36:	4603      	mov	r3, r0
 800ae38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ae3a:	7dfb      	ldrb	r3, [r7, #23]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d116      	bne.n	800ae6e <create_chain+0x116>
		fs->last_clst = ncl;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	69fa      	ldr	r2, [r7, #28]
 800ae44:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	695a      	ldr	r2, [r3, #20]
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	3b02      	subs	r3, #2
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d804      	bhi.n	800ae5e <create_chain+0x106>
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	1e5a      	subs	r2, r3, #1
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	791b      	ldrb	r3, [r3, #4]
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	711a      	strb	r2, [r3, #4]
 800ae6c:	e007      	b.n	800ae7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae6e:	7dfb      	ldrb	r3, [r7, #23]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d102      	bne.n	800ae7a <create_chain+0x122>
 800ae74:	f04f 33ff 	mov.w	r3, #4294967295
 800ae78:	e000      	b.n	800ae7c <create_chain+0x124>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae7e:	69fb      	ldr	r3, [r7, #28]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3720      	adds	r7, #32
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	0a5b      	lsrs	r3, r3, #9
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	8952      	ldrh	r2, [r2, #10]
 800aea8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	1d1a      	adds	r2, r3, #4
 800aeb2:	613a      	str	r2, [r7, #16]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d101      	bne.n	800aec2 <clmt_clust+0x3a>
 800aebe:	2300      	movs	r3, #0
 800aec0:	e010      	b.n	800aee4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d307      	bcc.n	800aeda <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3304      	adds	r3, #4
 800aed6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aed8:	e7e9      	b.n	800aeae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aeda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	4413      	add	r3, r2
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	371c      	adds	r7, #28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af06:	d204      	bcs.n	800af12 <dir_sdi+0x22>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f003 031f 	and.w	r3, r3, #31
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <dir_sdi+0x26>
		return FR_INT_ERR;
 800af12:	2302      	movs	r3, #2
 800af14:	e063      	b.n	800afde <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <dir_sdi+0x46>
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d902      	bls.n	800af36 <dir_sdi+0x46>
		clst = fs->dirbase;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10c      	bne.n	800af56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	8912      	ldrh	r2, [r2, #8]
 800af44:	4293      	cmp	r3, r2
 800af46:	d301      	bcc.n	800af4c <dir_sdi+0x5c>
 800af48:	2302      	movs	r3, #2
 800af4a:	e048      	b.n	800afde <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	61da      	str	r2, [r3, #28]
 800af54:	e029      	b.n	800afaa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	895b      	ldrh	r3, [r3, #10]
 800af5a:	025b      	lsls	r3, r3, #9
 800af5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af5e:	e019      	b.n	800af94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6979      	ldr	r1, [r7, #20]
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fcfe 	bl	800a966 <get_fat>
 800af6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d101      	bne.n	800af78 <dir_sdi+0x88>
 800af74:	2301      	movs	r3, #1
 800af76:	e032      	b.n	800afde <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d904      	bls.n	800af88 <dir_sdi+0x98>
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	429a      	cmp	r2, r3
 800af86:	d301      	bcc.n	800af8c <dir_sdi+0x9c>
 800af88:	2302      	movs	r3, #2
 800af8a:	e028      	b.n	800afde <dir_sdi+0xee>
			ofs -= csz;
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d2e1      	bcs.n	800af60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800af9c:	6979      	ldr	r1, [r7, #20]
 800af9e:	6938      	ldr	r0, [r7, #16]
 800afa0:	f7ff fcc2 	bl	800a928 <clust2sect>
 800afa4:	4602      	mov	r2, r0
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	69db      	ldr	r3, [r3, #28]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <dir_sdi+0xcc>
 800afb8:	2302      	movs	r3, #2
 800afba:	e010      	b.n	800afde <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	69da      	ldr	r2, [r3, #28]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	0a5b      	lsrs	r3, r3, #9
 800afc4:	441a      	add	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd6:	441a      	add	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	3320      	adds	r3, #32
 800affc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <dir_next+0x28>
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b00c:	d301      	bcc.n	800b012 <dir_next+0x2c>
 800b00e:	2304      	movs	r3, #4
 800b010:	e0aa      	b.n	800b168 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 8098 	bne.w	800b14e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10b      	bne.n	800b048 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	095b      	lsrs	r3, r3, #5
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	8912      	ldrh	r2, [r2, #8]
 800b038:	4293      	cmp	r3, r2
 800b03a:	f0c0 8088 	bcc.w	800b14e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	61da      	str	r2, [r3, #28]
 800b044:	2304      	movs	r3, #4
 800b046:	e08f      	b.n	800b168 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	0a5b      	lsrs	r3, r3, #9
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	8952      	ldrh	r2, [r2, #10]
 800b050:	3a01      	subs	r2, #1
 800b052:	4013      	ands	r3, r2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d17a      	bne.n	800b14e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	4619      	mov	r1, r3
 800b060:	4610      	mov	r0, r2
 800b062:	f7ff fc80 	bl	800a966 <get_fat>
 800b066:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d801      	bhi.n	800b072 <dir_next+0x8c>
 800b06e:	2302      	movs	r3, #2
 800b070:	e07a      	b.n	800b168 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d101      	bne.n	800b07e <dir_next+0x98>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e074      	b.n	800b168 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	429a      	cmp	r2, r3
 800b086:	d358      	bcc.n	800b13a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d104      	bne.n	800b098 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	61da      	str	r2, [r3, #28]
 800b094:	2304      	movs	r3, #4
 800b096:	e067      	b.n	800b168 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	f7ff fe59 	bl	800ad58 <create_chain>
 800b0a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <dir_next+0xcc>
 800b0ae:	2307      	movs	r3, #7
 800b0b0:	e05a      	b.n	800b168 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d101      	bne.n	800b0bc <dir_next+0xd6>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	e055      	b.n	800b168 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c2:	d101      	bne.n	800b0c8 <dir_next+0xe2>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e04f      	b.n	800b168 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f7ff fb4d 	bl	800a768 <sync_window>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <dir_next+0xf2>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e047      	b.n	800b168 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3334      	adds	r3, #52	; 0x34
 800b0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff f977 	bl	800a3d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	613b      	str	r3, [r7, #16]
 800b0ec:	6979      	ldr	r1, [r7, #20]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fc1a 	bl	800a928 <clust2sect>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	631a      	str	r2, [r3, #48]	; 0x30
 800b0fa:	e012      	b.n	800b122 <dir_next+0x13c>
						fs->wflag = 1;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fb30 	bl	800a768 <sync_window>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <dir_next+0x12c>
 800b10e:	2301      	movs	r3, #1
 800b110:	e02a      	b.n	800b168 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	3301      	adds	r3, #1
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	631a      	str	r2, [r3, #48]	; 0x30
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	895b      	ldrh	r3, [r3, #10]
 800b126:	461a      	mov	r2, r3
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d3e6      	bcc.n	800b0fc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	1ad2      	subs	r2, r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f7ff fbf0 	bl	800a928 <clust2sect>
 800b148:	4602      	mov	r2, r0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b160:	441a      	add	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b180:	2100      	movs	r1, #0
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7ff feb4 	bl	800aef0 <dir_sdi>
 800b188:	4603      	mov	r3, r0
 800b18a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d12b      	bne.n	800b1ea <dir_alloc+0x7a>
		n = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	4619      	mov	r1, r3
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f7ff fb27 	bl	800a7f0 <move_window>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d11d      	bne.n	800b1e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	2be5      	cmp	r3, #229	; 0xe5
 800b1b4:	d004      	beq.n	800b1c0 <dir_alloc+0x50>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d107      	bne.n	800b1d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	613b      	str	r3, [r7, #16]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d102      	bne.n	800b1d4 <dir_alloc+0x64>
 800b1ce:	e00c      	b.n	800b1ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff ff05 	bl	800afe6 <dir_next>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0d7      	beq.n	800b196 <dir_alloc+0x26>
 800b1e6:	e000      	b.n	800b1ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b1e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d101      	bne.n	800b1f4 <dir_alloc+0x84>
 800b1f0:	2307      	movs	r3, #7
 800b1f2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	331a      	adds	r3, #26
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff f83f 	bl	800a290 <ld_word>
 800b212:	4603      	mov	r3, r0
 800b214:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d109      	bne.n	800b232 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	3314      	adds	r3, #20
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff f834 	bl	800a290 <ld_word>
 800b228:	4603      	mov	r3, r0
 800b22a:	041b      	lsls	r3, r3, #16
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b232:	68fb      	ldr	r3, [r7, #12]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	331a      	adds	r3, #26
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	b292      	uxth	r2, r2
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff f857 	bl	800a306 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d109      	bne.n	800b274 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f103 0214 	add.w	r2, r3, #20
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	0c1b      	lsrs	r3, r3, #16
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7ff f849 	bl	800a306 <st_word>
	}
}
 800b274:	bf00      	nop
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b27c:	b590      	push	{r4, r7, lr}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	331a      	adds	r3, #26
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff f800 	bl	800a290 <ld_word>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <cmp_lfn+0x1e>
 800b296:	2300      	movs	r3, #0
 800b298:	e059      	b.n	800b34e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2a2:	1e5a      	subs	r2, r3, #1
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	81fb      	strh	r3, [r7, #14]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	e033      	b.n	800b322 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b2ba:	4a27      	ldr	r2, [pc, #156]	; (800b358 <cmp_lfn+0xdc>)
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe ffe1 	bl	800a290 <ld_word>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b2d2:	89fb      	ldrh	r3, [r7, #14]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01a      	beq.n	800b30e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2bfe      	cmp	r3, #254	; 0xfe
 800b2dc:	d812      	bhi.n	800b304 <cmp_lfn+0x88>
 800b2de:	89bb      	ldrh	r3, [r7, #12]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 f82f 	bl	800d344 <ff_wtoupper>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	461c      	mov	r4, r3
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	617a      	str	r2, [r7, #20]
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	881b      	ldrh	r3, [r3, #0]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f002 f823 	bl	800d344 <ff_wtoupper>
 800b2fe:	4603      	mov	r3, r0
 800b300:	429c      	cmp	r4, r3
 800b302:	d001      	beq.n	800b308 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b304:	2300      	movs	r3, #0
 800b306:	e022      	b.n	800b34e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b308:	89bb      	ldrh	r3, [r7, #12]
 800b30a:	81fb      	strh	r3, [r7, #14]
 800b30c:	e006      	b.n	800b31c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b30e:	89bb      	ldrh	r3, [r7, #12]
 800b310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b314:	4293      	cmp	r3, r2
 800b316:	d001      	beq.n	800b31c <cmp_lfn+0xa0>
 800b318:	2300      	movs	r3, #0
 800b31a:	e018      	b.n	800b34e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	3301      	adds	r3, #1
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b0c      	cmp	r3, #12
 800b326:	d9c8      	bls.n	800b2ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <cmp_lfn+0xd0>
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d008      	beq.n	800b34c <cmp_lfn+0xd0>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	4413      	add	r3, r2
 800b342:	881b      	ldrh	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <cmp_lfn+0xd0>
 800b348:	2300      	movs	r3, #0
 800b34a:	e000      	b.n	800b34e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b34c:	2301      	movs	r3, #1
}
 800b34e:	4618      	mov	r0, r3
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	bd90      	pop	{r4, r7, pc}
 800b356:	bf00      	nop
 800b358:	08010714 	.word	0x08010714

0800b35c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4611      	mov	r1, r2
 800b368:	461a      	mov	r2, r3
 800b36a:	460b      	mov	r3, r1
 800b36c:	71fb      	strb	r3, [r7, #7]
 800b36e:	4613      	mov	r3, r2
 800b370:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	330d      	adds	r3, #13
 800b376:	79ba      	ldrb	r2, [r7, #6]
 800b378:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	330b      	adds	r3, #11
 800b37e:	220f      	movs	r2, #15
 800b380:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	330c      	adds	r3, #12
 800b386:	2200      	movs	r2, #0
 800b388:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	331a      	adds	r3, #26
 800b38e:	2100      	movs	r1, #0
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe ffb8 	bl	800a306 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b396:	79fb      	ldrb	r3, [r7, #7]
 800b398:	1e5a      	subs	r2, r3, #1
 800b39a:	4613      	mov	r3, r2
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	4413      	add	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	82fb      	strh	r3, [r7, #22]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b3ae:	8afb      	ldrh	r3, [r7, #22]
 800b3b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d007      	beq.n	800b3c8 <put_lfn+0x6c>
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	61fa      	str	r2, [r7, #28]
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b3c8:	4a17      	ldr	r2, [pc, #92]	; (800b428 <put_lfn+0xcc>)
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	8afa      	ldrh	r2, [r7, #22]
 800b3d8:	4611      	mov	r1, r2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe ff93 	bl	800a306 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b3e0:	8afb      	ldrh	r3, [r7, #22]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <put_lfn+0x90>
 800b3e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	61bb      	str	r3, [r7, #24]
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	2b0c      	cmp	r3, #12
 800b3f6:	d9da      	bls.n	800b3ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b3f8:	8afb      	ldrh	r3, [r7, #22]
 800b3fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d006      	beq.n	800b410 <put_lfn+0xb4>
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d103      	bne.n	800b418 <put_lfn+0xbc>
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b416:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	79fa      	ldrb	r2, [r7, #7]
 800b41c:	701a      	strb	r2, [r3, #0]
}
 800b41e:	bf00      	nop
 800b420:	3720      	adds	r7, #32
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	08010714 	.word	0x08010714

0800b42c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08c      	sub	sp, #48	; 0x30
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
 800b438:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b43a:	220b      	movs	r2, #11
 800b43c:	68b9      	ldr	r1, [r7, #8]
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7fe ffa8 	bl	800a394 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b05      	cmp	r3, #5
 800b448:	d929      	bls.n	800b49e <gen_numname+0x72>
		sr = seq;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b44e:	e020      	b.n	800b492 <gen_numname+0x66>
			wc = *lfn++;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	1c9a      	adds	r2, r3, #2
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b45a:	2300      	movs	r3, #0
 800b45c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b45e:	e015      	b.n	800b48c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	005a      	lsls	r2, r3, #1
 800b464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	4413      	add	r3, r2
 800b46c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b46e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b470:	085b      	lsrs	r3, r3, #1
 800b472:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <gen_numname+0x5a>
 800b47e:	69fa      	ldr	r2, [r7, #28]
 800b480:	4b30      	ldr	r3, [pc, #192]	; (800b544 <gen_numname+0x118>)
 800b482:	4053      	eors	r3, r2
 800b484:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b488:	3301      	adds	r3, #1
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	2b0f      	cmp	r3, #15
 800b490:	d9e6      	bls.n	800b460 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1da      	bne.n	800b450 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b49e:	2307      	movs	r3, #7
 800b4a0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	3330      	adds	r3, #48	; 0x30
 800b4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b4b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4b6:	2b39      	cmp	r3, #57	; 0x39
 800b4b8:	d904      	bls.n	800b4c4 <gen_numname+0x98>
 800b4ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4be:	3307      	adds	r3, #7
 800b4c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	1e5a      	subs	r2, r3, #1
 800b4c8:	62ba      	str	r2, [r7, #40]	; 0x28
 800b4ca:	3330      	adds	r3, #48	; 0x30
 800b4cc:	443b      	add	r3, r7
 800b4ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b4d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	091b      	lsrs	r3, r3, #4
 800b4da:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1df      	bne.n	800b4a2 <gen_numname+0x76>
	ns[i] = '~';
 800b4e2:	f107 0214 	add.w	r2, r7, #20
 800b4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e8:	4413      	add	r3, r2
 800b4ea:	227e      	movs	r2, #126	; 0x7e
 800b4ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4f2:	e002      	b.n	800b4fa <gen_numname+0xce>
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d205      	bcs.n	800b50e <gen_numname+0xe2>
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	4413      	add	r3, r2
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	d1f2      	bne.n	800b4f4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	2b07      	cmp	r3, #7
 800b512:	d807      	bhi.n	800b524 <gen_numname+0xf8>
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	62ba      	str	r2, [r7, #40]	; 0x28
 800b51a:	3330      	adds	r3, #48	; 0x30
 800b51c:	443b      	add	r3, r7
 800b51e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b522:	e000      	b.n	800b526 <gen_numname+0xfa>
 800b524:	2120      	movs	r1, #32
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	627a      	str	r2, [r7, #36]	; 0x24
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	4413      	add	r3, r2
 800b530:	460a      	mov	r2, r1
 800b532:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	2b07      	cmp	r3, #7
 800b538:	d9e9      	bls.n	800b50e <gen_numname+0xe2>
}
 800b53a:	bf00      	nop
 800b53c:	bf00      	nop
 800b53e:	3730      	adds	r7, #48	; 0x30
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	00011021 	.word	0x00011021

0800b548 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b554:	230b      	movs	r3, #11
 800b556:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	0852      	lsrs	r2, r2, #1
 800b55e:	01db      	lsls	r3, r3, #7
 800b560:	4313      	orrs	r3, r2
 800b562:	b2da      	uxtb	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	1c59      	adds	r1, r3, #1
 800b568:	6079      	str	r1, [r7, #4]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	4413      	add	r3, r2
 800b56e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	3b01      	subs	r3, #1
 800b574:	60bb      	str	r3, [r7, #8]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1ed      	bne.n	800b558 <sum_sfn+0x10>
	return sum;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b086      	sub	sp, #24
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b598:	2100      	movs	r1, #0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff fca8 	bl	800aef0 <dir_sdi>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <dir_find+0x24>
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	e0a9      	b.n	800b702 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5ae:	23ff      	movs	r3, #255	; 0xff
 800b5b0:	753b      	strb	r3, [r7, #20]
 800b5b2:	7d3b      	ldrb	r3, [r7, #20]
 800b5b4:	757b      	strb	r3, [r7, #21]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5bc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6938      	ldr	r0, [r7, #16]
 800b5c6:	f7ff f913 	bl	800a7f0 <move_window>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f040 8090 	bne.w	800b6f6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b5de:	7dbb      	ldrb	r3, [r7, #22]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <dir_find+0x60>
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	75fb      	strb	r3, [r7, #23]
 800b5e8:	e08a      	b.n	800b700 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	330b      	adds	r3, #11
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5f6:	73fb      	strb	r3, [r7, #15]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7bfa      	ldrb	r2, [r7, #15]
 800b5fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b5fe:	7dbb      	ldrb	r3, [r7, #22]
 800b600:	2be5      	cmp	r3, #229	; 0xe5
 800b602:	d007      	beq.n	800b614 <dir_find+0x8a>
 800b604:	7bfb      	ldrb	r3, [r7, #15]
 800b606:	f003 0308 	and.w	r3, r3, #8
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d009      	beq.n	800b622 <dir_find+0x98>
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2b0f      	cmp	r3, #15
 800b612:	d006      	beq.n	800b622 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b614:	23ff      	movs	r3, #255	; 0xff
 800b616:	757b      	strb	r3, [r7, #21]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295
 800b61e:	631a      	str	r2, [r3, #48]	; 0x30
 800b620:	e05e      	b.n	800b6e0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b622:	7bfb      	ldrb	r3, [r7, #15]
 800b624:	2b0f      	cmp	r3, #15
 800b626:	d136      	bne.n	800b696 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d154      	bne.n	800b6e0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b636:	7dbb      	ldrb	r3, [r7, #22]
 800b638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00d      	beq.n	800b65c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	7b5b      	ldrb	r3, [r3, #13]
 800b646:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b648:	7dbb      	ldrb	r3, [r7, #22]
 800b64a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b64e:	75bb      	strb	r3, [r7, #22]
 800b650:	7dbb      	ldrb	r3, [r7, #22]
 800b652:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	695a      	ldr	r2, [r3, #20]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b65c:	7dba      	ldrb	r2, [r7, #22]
 800b65e:	7d7b      	ldrb	r3, [r7, #21]
 800b660:	429a      	cmp	r2, r3
 800b662:	d115      	bne.n	800b690 <dir_find+0x106>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	330d      	adds	r3, #13
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	7d3a      	ldrb	r2, [r7, #20]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d10e      	bne.n	800b690 <dir_find+0x106>
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	4619      	mov	r1, r3
 800b67c:	4610      	mov	r0, r2
 800b67e:	f7ff fdfd 	bl	800b27c <cmp_lfn>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <dir_find+0x106>
 800b688:	7d7b      	ldrb	r3, [r7, #21]
 800b68a:	3b01      	subs	r3, #1
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	e000      	b.n	800b692 <dir_find+0x108>
 800b690:	23ff      	movs	r3, #255	; 0xff
 800b692:	757b      	strb	r3, [r7, #21]
 800b694:	e024      	b.n	800b6e0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b696:	7d7b      	ldrb	r3, [r7, #21]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d109      	bne.n	800b6b0 <dir_find+0x126>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff ff51 	bl	800b548 <sum_sfn>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	7d3b      	ldrb	r3, [r7, #20]
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d024      	beq.n	800b6fa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6b6:	f003 0301 	and.w	r3, r3, #1
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10a      	bne.n	800b6d4 <dir_find+0x14a>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a18      	ldr	r0, [r3, #32]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3324      	adds	r3, #36	; 0x24
 800b6c6:	220b      	movs	r2, #11
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	f7fe fe9f 	bl	800a40c <mem_cmp>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d014      	beq.n	800b6fe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b6d4:	23ff      	movs	r3, #255	; 0xff
 800b6d6:	757b      	strb	r3, [r7, #21]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f04f 32ff 	mov.w	r2, #4294967295
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fc7f 	bl	800afe6 <dir_next>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f43f af65 	beq.w	800b5be <dir_find+0x34>
 800b6f4:	e004      	b.n	800b700 <dir_find+0x176>
		if (res != FR_OK) break;
 800b6f6:	bf00      	nop
 800b6f8:	e002      	b.n	800b700 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b6fa:	bf00      	nop
 800b6fc:	e000      	b.n	800b700 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b6fe:	bf00      	nop

	return res;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08c      	sub	sp, #48	; 0x30
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b720:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d001      	beq.n	800b72c <dir_register+0x20>
 800b728:	2306      	movs	r3, #6
 800b72a:	e0e0      	b.n	800b8ee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b72c:	2300      	movs	r3, #0
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
 800b730:	e002      	b.n	800b738 <dir_register+0x2c>
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	3301      	adds	r3, #1
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	68da      	ldr	r2, [r3, #12]
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	4413      	add	r3, r2
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1f4      	bne.n	800b732 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b74e:	f107 030c 	add.w	r3, r7, #12
 800b752:	220c      	movs	r2, #12
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe fe1d 	bl	800a394 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d032      	beq.n	800b7ca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2240      	movs	r2, #64	; 0x40
 800b768:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b76c:	2301      	movs	r3, #1
 800b76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b770:	e016      	b.n	800b7a0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	68da      	ldr	r2, [r3, #12]
 800b77c:	f107 010c 	add.w	r1, r7, #12
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	f7ff fe53 	bl	800b42c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff feff 	bl	800b58a <dir_find>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b796:	2b00      	cmp	r3, #0
 800b798:	d106      	bne.n	800b7a8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	3301      	adds	r3, #1
 800b79e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	2b63      	cmp	r3, #99	; 0x63
 800b7a4:	d9e5      	bls.n	800b772 <dir_register+0x66>
 800b7a6:	e000      	b.n	800b7aa <dir_register+0x9e>
			if (res != FR_OK) break;
 800b7a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	2b64      	cmp	r3, #100	; 0x64
 800b7ae:	d101      	bne.n	800b7b4 <dir_register+0xa8>
 800b7b0:	2307      	movs	r3, #7
 800b7b2:	e09c      	b.n	800b8ee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b7b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d002      	beq.n	800b7c2 <dir_register+0xb6>
 800b7bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7c0:	e095      	b.n	800b8ee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b7c2:	7dfa      	ldrb	r2, [r7, #23]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <dir_register+0xd8>
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	330c      	adds	r3, #12
 800b7d8:	4a47      	ldr	r2, [pc, #284]	; (800b8f8 <dir_register+0x1ec>)
 800b7da:	fba2 2303 	umull	r2, r3, r2, r3
 800b7de:	089b      	lsrs	r3, r3, #2
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	e000      	b.n	800b7e6 <dir_register+0xda>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b7e8:	6a39      	ldr	r1, [r7, #32]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff fcc0 	bl	800b170 <dir_alloc>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d148      	bne.n	800b890 <dir_register+0x184>
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	3b01      	subs	r3, #1
 800b802:	623b      	str	r3, [r7, #32]
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d042      	beq.n	800b890 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	695a      	ldr	r2, [r3, #20]
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	015b      	lsls	r3, r3, #5
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fb6a 	bl	800aef0 <dir_sdi>
 800b81c:	4603      	mov	r3, r0
 800b81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b826:	2b00      	cmp	r3, #0
 800b828:	d132      	bne.n	800b890 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3324      	adds	r3, #36	; 0x24
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff fe8a 	bl	800b548 <sum_sfn>
 800b834:	4603      	mov	r3, r0
 800b836:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	69db      	ldr	r3, [r3, #28]
 800b83c:	4619      	mov	r1, r3
 800b83e:	69f8      	ldr	r0, [r7, #28]
 800b840:	f7fe ffd6 	bl	800a7f0 <move_window>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b84a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d11d      	bne.n	800b88e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	68d8      	ldr	r0, [r3, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a19      	ldr	r1, [r3, #32]
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	7efb      	ldrb	r3, [r7, #27]
 800b860:	f7ff fd7c 	bl	800b35c <put_lfn>
				fs->wflag = 1;
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	2201      	movs	r2, #1
 800b868:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b86a:	2100      	movs	r1, #0
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fbba 	bl	800afe6 <dir_next>
 800b872:	4603      	mov	r3, r0
 800b874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d107      	bne.n	800b890 <dir_register+0x184>
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	3b01      	subs	r3, #1
 800b884:	623b      	str	r3, [r7, #32]
 800b886:	6a3b      	ldr	r3, [r7, #32]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1d5      	bne.n	800b838 <dir_register+0x12c>
 800b88c:	e000      	b.n	800b890 <dir_register+0x184>
				if (res != FR_OK) break;
 800b88e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b894:	2b00      	cmp	r3, #0
 800b896:	d128      	bne.n	800b8ea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	4619      	mov	r1, r3
 800b89e:	69f8      	ldr	r0, [r7, #28]
 800b8a0:	f7fe ffa6 	bl	800a7f0 <move_window>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b8aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d11b      	bne.n	800b8ea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fd8b 	bl	800a3d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a18      	ldr	r0, [r3, #32]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3324      	adds	r3, #36	; 0x24
 800b8c8:	220b      	movs	r2, #11
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	f7fe fd62 	bl	800a394 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	f002 0218 	and.w	r2, r2, #24
 800b8e0:	b2d2      	uxtb	r2, r2
 800b8e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3730      	adds	r7, #48	; 0x30
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	4ec4ec4f 	.word	0x4ec4ec4f

0800b8fc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2200      	movs	r2, #0
 800b910:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 80c9 	beq.w	800baae <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d032      	beq.n	800b98c <get_fileinfo+0x90>
			i = j = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	61bb      	str	r3, [r7, #24]
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b92e:	e01b      	b.n	800b968 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b930:	89fb      	ldrh	r3, [r7, #14]
 800b932:	2100      	movs	r1, #0
 800b934:	4618      	mov	r0, r3
 800b936:	f001 fcc9 	bl	800d2cc <ff_convert>
 800b93a:	4603      	mov	r3, r0
 800b93c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b93e:	89fb      	ldrh	r3, [r7, #14]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <get_fileinfo+0x4e>
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e01a      	b.n	800b980 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	2bfe      	cmp	r3, #254	; 0xfe
 800b94e:	d902      	bls.n	800b956 <get_fileinfo+0x5a>
 800b950:	2300      	movs	r3, #0
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	e014      	b.n	800b980 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	1c5a      	adds	r2, r3, #1
 800b95a:	61fa      	str	r2, [r7, #28]
 800b95c:	89fa      	ldrh	r2, [r7, #14]
 800b95e:	b2d1      	uxtb	r1, r2
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	4413      	add	r3, r2
 800b964:	460a      	mov	r2, r1
 800b966:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	68da      	ldr	r2, [r3, #12]
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	1c59      	adds	r1, r3, #1
 800b970:	61b9      	str	r1, [r7, #24]
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	4413      	add	r3, r2
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	81fb      	strh	r3, [r7, #14]
 800b97a:	89fb      	ldrh	r3, [r7, #14]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1d7      	bne.n	800b930 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	4413      	add	r3, r2
 800b986:	3316      	adds	r3, #22
 800b988:	2200      	movs	r2, #0
 800b98a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61bb      	str	r3, [r7, #24]
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	4413      	add	r3, r2
 800b99a:	3316      	adds	r3, #22
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b9a0:	e04c      	b.n	800ba3c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a1a      	ldr	r2, [r3, #32]
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	1c59      	adds	r1, r3, #1
 800b9aa:	61f9      	str	r1, [r7, #28]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	2b20      	cmp	r3, #32
 800b9b6:	d100      	bne.n	800b9ba <get_fileinfo+0xbe>
 800b9b8:	e040      	b.n	800ba3c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	d101      	bne.n	800b9c4 <get_fileinfo+0xc8>
 800b9c0:	23e5      	movs	r3, #229	; 0xe5
 800b9c2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	d10f      	bne.n	800b9ea <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b9ca:	89bb      	ldrh	r3, [r7, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d105      	bne.n	800b9dc <get_fileinfo+0xe0>
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	3316      	adds	r3, #22
 800b9d8:	222e      	movs	r2, #46	; 0x2e
 800b9da:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	1c5a      	adds	r2, r3, #1
 800b9e0:	61ba      	str	r2, [r7, #24]
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	222e      	movs	r2, #46	; 0x2e
 800b9e8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3309      	adds	r3, #9
 800b9f2:	7dfa      	ldrb	r2, [r7, #23]
 800b9f4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b9f6:	89bb      	ldrh	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d11c      	bne.n	800ba36 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	2b40      	cmp	r3, #64	; 0x40
 800ba00:	d913      	bls.n	800ba2a <get_fileinfo+0x12e>
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
 800ba04:	2b5a      	cmp	r3, #90	; 0x5a
 800ba06:	d810      	bhi.n	800ba2a <get_fileinfo+0x12e>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	330c      	adds	r3, #12
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	d901      	bls.n	800ba1c <get_fileinfo+0x120>
 800ba18:	2310      	movs	r3, #16
 800ba1a:	e000      	b.n	800ba1e <get_fileinfo+0x122>
 800ba1c:	2308      	movs	r3, #8
 800ba1e:	4013      	ands	r3, r2
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	3320      	adds	r3, #32
 800ba28:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	4413      	add	r3, r2
 800ba30:	3316      	adds	r3, #22
 800ba32:	7dfa      	ldrb	r2, [r7, #23]
 800ba34:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	2b0a      	cmp	r3, #10
 800ba40:	d9af      	bls.n	800b9a2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ba42:	89bb      	ldrh	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10d      	bne.n	800ba64 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	3316      	adds	r3, #22
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <get_fileinfo+0x168>
 800ba60:	2300      	movs	r3, #0
 800ba62:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	4413      	add	r3, r2
 800ba6a:	3309      	adds	r3, #9
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	7ada      	ldrb	r2, [r3, #11]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	331c      	adds	r3, #28
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fc1d 	bl	800a2c0 <ld_dword>
 800ba86:	4602      	mov	r2, r0
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	3316      	adds	r3, #22
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fc14 	bl	800a2c0 <ld_dword>
 800ba98:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	80da      	strh	r2, [r3, #6]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	0c1b      	lsrs	r3, r3, #16
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	809a      	strh	r2, [r3, #4]
 800baac:	e000      	b.n	800bab0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800baae:	bf00      	nop
}
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b08a      	sub	sp, #40	; 0x28
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	61ba      	str	r2, [r7, #24]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	4413      	add	r3, r2
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bae8:	2b1f      	cmp	r3, #31
 800baea:	d940      	bls.n	800bb6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800baec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baee:	2b2f      	cmp	r3, #47	; 0x2f
 800baf0:	d006      	beq.n	800bb00 <create_name+0x48>
 800baf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baf4:	2b5c      	cmp	r3, #92	; 0x5c
 800baf6:	d110      	bne.n	800bb1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800baf8:	e002      	b.n	800bb00 <create_name+0x48>
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	3301      	adds	r3, #1
 800bafe:	61bb      	str	r3, [r7, #24]
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	4413      	add	r3, r2
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b2f      	cmp	r3, #47	; 0x2f
 800bb0a:	d0f6      	beq.n	800bafa <create_name+0x42>
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	4413      	add	r3, r2
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b5c      	cmp	r3, #92	; 0x5c
 800bb16:	d0f0      	beq.n	800bafa <create_name+0x42>
			break;
 800bb18:	e02a      	b.n	800bb70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	2bfe      	cmp	r3, #254	; 0xfe
 800bb1e:	d901      	bls.n	800bb24 <create_name+0x6c>
 800bb20:	2306      	movs	r3, #6
 800bb22:	e17d      	b.n	800be20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bb24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bb2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f001 fbcc 	bl	800d2cc <ff_convert>
 800bb34:	4603      	mov	r3, r0
 800bb36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bb38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <create_name+0x8a>
 800bb3e:	2306      	movs	r3, #6
 800bb40:	e16e      	b.n	800be20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bb42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb44:	2b7f      	cmp	r3, #127	; 0x7f
 800bb46:	d809      	bhi.n	800bb5c <create_name+0xa4>
 800bb48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	488d      	ldr	r0, [pc, #564]	; (800bd84 <create_name+0x2cc>)
 800bb4e:	f7fe fc84 	bl	800a45a <chk_chr>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <create_name+0xa4>
 800bb58:	2306      	movs	r3, #6
 800bb5a:	e161      	b.n	800be20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	617a      	str	r2, [r7, #20]
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	4413      	add	r3, r2
 800bb68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bb6c:	e7b4      	b.n	800bad8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bb6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	441a      	add	r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bb7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb7c:	2b1f      	cmp	r3, #31
 800bb7e:	d801      	bhi.n	800bb84 <create_name+0xcc>
 800bb80:	2304      	movs	r3, #4
 800bb82:	e000      	b.n	800bb86 <create_name+0xce>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bb8a:	e011      	b.n	800bbb0 <create_name+0xf8>
		w = lfn[di - 1];
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bb92:	4413      	add	r3, r2
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	4413      	add	r3, r2
 800bb9a:	881b      	ldrh	r3, [r3, #0]
 800bb9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bb9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d002      	beq.n	800bbaa <create_name+0xf2>
 800bba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bba6:	2b2e      	cmp	r3, #46	; 0x2e
 800bba8:	d106      	bne.n	800bbb8 <create_name+0x100>
		di--;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1ea      	bne.n	800bb8c <create_name+0xd4>
 800bbb6:	e000      	b.n	800bbba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bbb8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <create_name+0x118>
 800bbcc:	2306      	movs	r3, #6
 800bbce:	e127      	b.n	800be20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3324      	adds	r3, #36	; 0x24
 800bbd4:	220b      	movs	r2, #11
 800bbd6:	2120      	movs	r1, #32
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe fbfc 	bl	800a3d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bbde:	2300      	movs	r3, #0
 800bbe0:	61bb      	str	r3, [r7, #24]
 800bbe2:	e002      	b.n	800bbea <create_name+0x132>
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	61bb      	str	r3, [r7, #24]
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	2b20      	cmp	r3, #32
 800bbf6:	d0f5      	beq.n	800bbe4 <create_name+0x12c>
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	2b2e      	cmp	r3, #46	; 0x2e
 800bc04:	d0ee      	beq.n	800bbe4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d009      	beq.n	800bc20 <create_name+0x168>
 800bc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc10:	f043 0303 	orr.w	r3, r3, #3
 800bc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bc18:	e002      	b.n	800bc20 <create_name+0x168>
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d009      	beq.n	800bc3a <create_name+0x182>
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bc2c:	4413      	add	r3, r2
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	2b2e      	cmp	r3, #46	; 0x2e
 800bc38:	d1ef      	bne.n	800bc1a <create_name+0x162>

	i = b = 0; ni = 8;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bc40:	2300      	movs	r3, #0
 800bc42:	623b      	str	r3, [r7, #32]
 800bc44:	2308      	movs	r3, #8
 800bc46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	61ba      	str	r2, [r7, #24]
 800bc4e:	005b      	lsls	r3, r3, #1
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f000 8090 	beq.w	800bd80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	d006      	beq.n	800bc74 <create_name+0x1bc>
 800bc66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc68:	2b2e      	cmp	r3, #46	; 0x2e
 800bc6a:	d10a      	bne.n	800bc82 <create_name+0x1ca>
 800bc6c:	69ba      	ldr	r2, [r7, #24]
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d006      	beq.n	800bc82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc78:	f043 0303 	orr.w	r3, r3, #3
 800bc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc80:	e07d      	b.n	800bd7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bc82:	6a3a      	ldr	r2, [r7, #32]
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d203      	bcs.n	800bc92 <create_name+0x1da>
 800bc8a:	69ba      	ldr	r2, [r7, #24]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d123      	bne.n	800bcda <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	2b0b      	cmp	r3, #11
 800bc96:	d106      	bne.n	800bca6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc9c:	f043 0303 	orr.w	r3, r3, #3
 800bca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bca4:	e075      	b.n	800bd92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d005      	beq.n	800bcba <create_name+0x202>
 800bcae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb2:	f043 0303 	orr.w	r3, r3, #3
 800bcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d866      	bhi.n	800bd90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	61bb      	str	r3, [r7, #24]
 800bcc6:	2308      	movs	r3, #8
 800bcc8:	623b      	str	r3, [r7, #32]
 800bcca:	230b      	movs	r3, #11
 800bccc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bcce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bcd8:	e051      	b.n	800bd7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bcda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcdc:	2b7f      	cmp	r3, #127	; 0x7f
 800bcde:	d914      	bls.n	800bd0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bce2:	2100      	movs	r1, #0
 800bce4:	4618      	mov	r0, r3
 800bce6:	f001 faf1 	bl	800d2cc <ff_convert>
 800bcea:	4603      	mov	r3, r0
 800bcec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bcee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <create_name+0x246>
 800bcf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf6:	3b80      	subs	r3, #128	; 0x80
 800bcf8:	4a23      	ldr	r2, [pc, #140]	; (800bd88 <create_name+0x2d0>)
 800bcfa:	5cd3      	ldrb	r3, [r2, r3]
 800bcfc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bcfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd02:	f043 0302 	orr.w	r3, r3, #2
 800bd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bd0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d007      	beq.n	800bd20 <create_name+0x268>
 800bd10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd12:	4619      	mov	r1, r3
 800bd14:	481d      	ldr	r0, [pc, #116]	; (800bd8c <create_name+0x2d4>)
 800bd16:	f7fe fba0 	bl	800a45a <chk_chr>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d008      	beq.n	800bd32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bd20:	235f      	movs	r3, #95	; 0x5f
 800bd22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd28:	f043 0303 	orr.w	r3, r3, #3
 800bd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd30:	e01b      	b.n	800bd6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bd32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd34:	2b40      	cmp	r3, #64	; 0x40
 800bd36:	d909      	bls.n	800bd4c <create_name+0x294>
 800bd38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd3a:	2b5a      	cmp	r3, #90	; 0x5a
 800bd3c:	d806      	bhi.n	800bd4c <create_name+0x294>
					b |= 2;
 800bd3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd42:	f043 0302 	orr.w	r3, r3, #2
 800bd46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd4a:	e00e      	b.n	800bd6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bd4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd4e:	2b60      	cmp	r3, #96	; 0x60
 800bd50:	d90b      	bls.n	800bd6a <create_name+0x2b2>
 800bd52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd54:	2b7a      	cmp	r3, #122	; 0x7a
 800bd56:	d808      	bhi.n	800bd6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bd58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd5c:	f043 0301 	orr.w	r3, r3, #1
 800bd60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bd64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd66:	3b20      	subs	r3, #32
 800bd68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	623a      	str	r2, [r7, #32]
 800bd70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd72:	b2d1      	uxtb	r1, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	4413      	add	r3, r2
 800bd78:	460a      	mov	r2, r1
 800bd7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bd7e:	e763      	b.n	800bc48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bd80:	bf00      	nop
 800bd82:	e006      	b.n	800bd92 <create_name+0x2da>
 800bd84:	080105f0 	.word	0x080105f0
 800bd88:	08010694 	.word	0x08010694
 800bd8c:	080105fc 	.word	0x080105fc
			if (si > di) break;			/* No extension */
 800bd90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bd98:	2be5      	cmp	r3, #229	; 0xe5
 800bd9a:	d103      	bne.n	800bda4 <create_name+0x2ec>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2205      	movs	r2, #5
 800bda0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	2b08      	cmp	r3, #8
 800bda8:	d104      	bne.n	800bdb4 <create_name+0x2fc>
 800bdaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bdb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdb8:	f003 030c 	and.w	r3, r3, #12
 800bdbc:	2b0c      	cmp	r3, #12
 800bdbe:	d005      	beq.n	800bdcc <create_name+0x314>
 800bdc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	d105      	bne.n	800bdd8 <create_name+0x320>
 800bdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdd0:	f043 0302 	orr.w	r3, r3, #2
 800bdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bddc:	f003 0302 	and.w	r3, r3, #2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d117      	bne.n	800be14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bde4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bde8:	f003 0303 	and.w	r3, r3, #3
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d105      	bne.n	800bdfc <create_name+0x344>
 800bdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdf4:	f043 0310 	orr.w	r3, r3, #16
 800bdf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bdfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be00:	f003 030c 	and.w	r3, r3, #12
 800be04:	2b04      	cmp	r3, #4
 800be06:	d105      	bne.n	800be14 <create_name+0x35c>
 800be08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be0c:	f043 0308 	orr.w	r3, r3, #8
 800be10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800be1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800be20:	4618      	mov	r0, r3
 800be22:	3728      	adds	r7, #40	; 0x28
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800be3c:	e002      	b.n	800be44 <follow_path+0x1c>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	603b      	str	r3, [r7, #0]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	2b2f      	cmp	r3, #47	; 0x2f
 800be4a:	d0f8      	beq.n	800be3e <follow_path+0x16>
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b5c      	cmp	r3, #92	; 0x5c
 800be52:	d0f4      	beq.n	800be3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2200      	movs	r2, #0
 800be58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b1f      	cmp	r3, #31
 800be60:	d80a      	bhi.n	800be78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2280      	movs	r2, #128	; 0x80
 800be66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800be6a:	2100      	movs	r1, #0
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7ff f83f 	bl	800aef0 <dir_sdi>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]
 800be76:	e043      	b.n	800bf00 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be78:	463b      	mov	r3, r7
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff fe1b 	bl	800bab8 <create_name>
 800be82:	4603      	mov	r3, r0
 800be84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d134      	bne.n	800bef6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff fb7c 	bl	800b58a <dir_find>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800be9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00a      	beq.n	800beba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	d127      	bne.n	800befa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800beaa:	7afb      	ldrb	r3, [r7, #11]
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d122      	bne.n	800befa <follow_path+0xd2>
 800beb4:	2305      	movs	r3, #5
 800beb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800beb8:	e01f      	b.n	800befa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	f003 0304 	and.w	r3, r3, #4
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d11c      	bne.n	800befe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	799b      	ldrb	r3, [r3, #6]
 800bec8:	f003 0310 	and.w	r3, r3, #16
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bed0:	2305      	movs	r3, #5
 800bed2:	75fb      	strb	r3, [r7, #23]
 800bed4:	e014      	b.n	800bf00 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee4:	4413      	add	r3, r2
 800bee6:	4619      	mov	r1, r3
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff f988 	bl	800b1fe <ld_clust>
 800beee:	4602      	mov	r2, r0
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bef4:	e7c0      	b.n	800be78 <follow_path+0x50>
			if (res != FR_OK) break;
 800bef6:	bf00      	nop
 800bef8:	e002      	b.n	800bf00 <follow_path+0xd8>
				break;
 800befa:	bf00      	nop
 800befc:	e000      	b.n	800bf00 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800befe:	bf00      	nop
			}
		}
	}

	return res;
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b087      	sub	sp, #28
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf12:	f04f 33ff 	mov.w	r3, #4294967295
 800bf16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d031      	beq.n	800bf84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	e002      	b.n	800bf2e <get_ldnumber+0x24>
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	2b1f      	cmp	r3, #31
 800bf34:	d903      	bls.n	800bf3e <get_ldnumber+0x34>
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b3a      	cmp	r3, #58	; 0x3a
 800bf3c:	d1f4      	bne.n	800bf28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	2b3a      	cmp	r3, #58	; 0x3a
 800bf44:	d11c      	bne.n	800bf80 <get_ldnumber+0x76>
			tp = *path;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	60fa      	str	r2, [r7, #12]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	3b30      	subs	r3, #48	; 0x30
 800bf56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b09      	cmp	r3, #9
 800bf5c:	d80e      	bhi.n	800bf7c <get_ldnumber+0x72>
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d10a      	bne.n	800bf7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d107      	bne.n	800bf7c <get_ldnumber+0x72>
					vol = (int)i;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	3301      	adds	r3, #1
 800bf74:	617b      	str	r3, [r7, #20]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	e002      	b.n	800bf86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bf80:	2300      	movs	r3, #0
 800bf82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bf84:	693b      	ldr	r3, [r7, #16]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
	...

0800bf94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	70da      	strb	r2, [r3, #3]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7fe fc1e 	bl	800a7f0 <move_window>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <check_fs+0x2a>
 800bfba:	2304      	movs	r3, #4
 800bfbc:	e038      	b.n	800c030 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3334      	adds	r3, #52	; 0x34
 800bfc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe f962 	bl	800a290 <ld_word>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d001      	beq.n	800bfdc <check_fs+0x48>
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e029      	b.n	800c030 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfe2:	2be9      	cmp	r3, #233	; 0xe9
 800bfe4:	d009      	beq.n	800bffa <check_fs+0x66>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfec:	2beb      	cmp	r3, #235	; 0xeb
 800bfee:	d11e      	bne.n	800c02e <check_fs+0x9a>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bff6:	2b90      	cmp	r3, #144	; 0x90
 800bff8:	d119      	bne.n	800c02e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3334      	adds	r3, #52	; 0x34
 800bffe:	3336      	adds	r3, #54	; 0x36
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe f95d 	bl	800a2c0 <ld_dword>
 800c006:	4603      	mov	r3, r0
 800c008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c00c:	4a0a      	ldr	r2, [pc, #40]	; (800c038 <check_fs+0xa4>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d101      	bne.n	800c016 <check_fs+0x82>
 800c012:	2300      	movs	r3, #0
 800c014:	e00c      	b.n	800c030 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3334      	adds	r3, #52	; 0x34
 800c01a:	3352      	adds	r3, #82	; 0x52
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe f94f 	bl	800a2c0 <ld_dword>
 800c022:	4603      	mov	r3, r0
 800c024:	4a05      	ldr	r2, [pc, #20]	; (800c03c <check_fs+0xa8>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d101      	bne.n	800c02e <check_fs+0x9a>
 800c02a:	2300      	movs	r3, #0
 800c02c:	e000      	b.n	800c030 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c02e:	2302      	movs	r3, #2
}
 800c030:	4618      	mov	r0, r3
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	00544146 	.word	0x00544146
 800c03c:	33544146 	.word	0x33544146

0800c040 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b096      	sub	sp, #88	; 0x58
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	4613      	mov	r3, r2
 800c04c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7ff ff58 	bl	800bf0a <get_ldnumber>
 800c05a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	da01      	bge.n	800c066 <find_volume+0x26>
 800c062:	230b      	movs	r3, #11
 800c064:	e230      	b.n	800c4c8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c066:	4aa1      	ldr	r2, [pc, #644]	; (800c2ec <find_volume+0x2ac>)
 800c068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c06e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <find_volume+0x3a>
 800c076:	230c      	movs	r3, #12
 800c078:	e226      	b.n	800c4c8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c07e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	f023 0301 	bic.w	r3, r3, #1
 800c086:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d01a      	beq.n	800c0c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	785b      	ldrb	r3, [r3, #1]
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe f85d 	bl	800a154 <disk_status>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c0a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0a4:	f003 0301 	and.w	r3, r3, #1
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10c      	bne.n	800c0c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d007      	beq.n	800c0c2 <find_volume+0x82>
 800c0b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0b6:	f003 0304 	and.w	r3, r3, #4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c0be:	230a      	movs	r3, #10
 800c0c0:	e202      	b.n	800c4c8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e200      	b.n	800c4c8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe f855 	bl	800a188 <disk_initialize>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c0e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e1e9      	b.n	800c4c8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d007      	beq.n	800c10a <find_volume+0xca>
 800c0fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c106:	230a      	movs	r3, #10
 800c108:	e1de      	b.n	800c4c8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c10e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c112:	f7ff ff3f 	bl	800bf94 <check_fs>
 800c116:	4603      	mov	r3, r0
 800c118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c11c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c120:	2b02      	cmp	r3, #2
 800c122:	d149      	bne.n	800c1b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c124:	2300      	movs	r3, #0
 800c126:	643b      	str	r3, [r7, #64]	; 0x40
 800c128:	e01e      	b.n	800c168 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c132:	011b      	lsls	r3, r3, #4
 800c134:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c138:	4413      	add	r3, r2
 800c13a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	3304      	adds	r3, #4
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d006      	beq.n	800c154 <find_volume+0x114>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	3308      	adds	r3, #8
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe f8b8 	bl	800a2c0 <ld_dword>
 800c150:	4602      	mov	r2, r0
 800c152:	e000      	b.n	800c156 <find_volume+0x116>
 800c154:	2200      	movs	r2, #0
 800c156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	3358      	adds	r3, #88	; 0x58
 800c15c:	443b      	add	r3, r7
 800c15e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c164:	3301      	adds	r3, #1
 800c166:	643b      	str	r3, [r7, #64]	; 0x40
 800c168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d9dd      	bls.n	800c12a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c16e:	2300      	movs	r3, #0
 800c170:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <find_volume+0x13e>
 800c178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c17a:	3b01      	subs	r3, #1
 800c17c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	3358      	adds	r3, #88	; 0x58
 800c184:	443b      	add	r3, r7
 800c186:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c18a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <find_volume+0x15e>
 800c192:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c196:	f7ff fefd 	bl	800bf94 <check_fs>
 800c19a:	4603      	mov	r3, r0
 800c19c:	e000      	b.n	800c1a0 <find_volume+0x160>
 800c19e:	2303      	movs	r3, #3
 800c1a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c1a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d905      	bls.n	800c1b8 <find_volume+0x178>
 800c1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d9e2      	bls.n	800c17e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	d101      	bne.n	800c1c4 <find_volume+0x184>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e181      	b.n	800c4c8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c1c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d901      	bls.n	800c1d0 <find_volume+0x190>
 800c1cc:	230d      	movs	r3, #13
 800c1ce:	e17b      	b.n	800c4c8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	3334      	adds	r3, #52	; 0x34
 800c1d4:	330b      	adds	r3, #11
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe f85a 	bl	800a290 <ld_word>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1e2:	d001      	beq.n	800c1e8 <find_volume+0x1a8>
 800c1e4:	230d      	movs	r3, #13
 800c1e6:	e16f      	b.n	800c4c8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	3334      	adds	r3, #52	; 0x34
 800c1ec:	3316      	adds	r3, #22
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe f84e 	bl	800a290 <ld_word>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <find_volume+0x1cc>
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	3334      	adds	r3, #52	; 0x34
 800c202:	3324      	adds	r3, #36	; 0x24
 800c204:	4618      	mov	r0, r3
 800c206:	f7fe f85b 	bl	800a2c0 <ld_dword>
 800c20a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c210:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c214:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	789b      	ldrb	r3, [r3, #2]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d005      	beq.n	800c230 <find_volume+0x1f0>
 800c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c226:	789b      	ldrb	r3, [r3, #2]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d001      	beq.n	800c230 <find_volume+0x1f0>
 800c22c:	230d      	movs	r3, #13
 800c22e:	e14b      	b.n	800c4c8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c232:	789b      	ldrb	r3, [r3, #2]
 800c234:	461a      	mov	r2, r3
 800c236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c238:	fb02 f303 	mul.w	r3, r2, r3
 800c23c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c244:	b29a      	uxth	r2, r3
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	895b      	ldrh	r3, [r3, #10]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d008      	beq.n	800c264 <find_volume+0x224>
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	895b      	ldrh	r3, [r3, #10]
 800c256:	461a      	mov	r2, r3
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	895b      	ldrh	r3, [r3, #10]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4013      	ands	r3, r2
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <find_volume+0x228>
 800c264:	230d      	movs	r3, #13
 800c266:	e12f      	b.n	800c4c8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	3334      	adds	r3, #52	; 0x34
 800c26c:	3311      	adds	r3, #17
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe f80e 	bl	800a290 <ld_word>
 800c274:	4603      	mov	r3, r0
 800c276:	461a      	mov	r2, r3
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	891b      	ldrh	r3, [r3, #8]
 800c280:	f003 030f 	and.w	r3, r3, #15
 800c284:	b29b      	uxth	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <find_volume+0x24e>
 800c28a:	230d      	movs	r3, #13
 800c28c:	e11c      	b.n	800c4c8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c290:	3334      	adds	r3, #52	; 0x34
 800c292:	3313      	adds	r3, #19
 800c294:	4618      	mov	r0, r3
 800c296:	f7fd fffb 	bl	800a290 <ld_word>
 800c29a:	4603      	mov	r3, r0
 800c29c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <find_volume+0x272>
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	3334      	adds	r3, #52	; 0x34
 800c2a8:	3320      	adds	r3, #32
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe f808 	bl	800a2c0 <ld_dword>
 800c2b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	3334      	adds	r3, #52	; 0x34
 800c2b6:	330e      	adds	r3, #14
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fd ffe9 	bl	800a290 <ld_word>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c2c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <find_volume+0x28c>
 800c2c8:	230d      	movs	r3, #13
 800c2ca:	e0fd      	b.n	800c4c8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c2cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d0:	4413      	add	r3, r2
 800c2d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2d4:	8912      	ldrh	r2, [r2, #8]
 800c2d6:	0912      	lsrs	r2, r2, #4
 800c2d8:	b292      	uxth	r2, r2
 800c2da:	4413      	add	r3, r2
 800c2dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c2de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d204      	bcs.n	800c2f0 <find_volume+0x2b0>
 800c2e6:	230d      	movs	r3, #13
 800c2e8:	e0ee      	b.n	800c4c8 <find_volume+0x488>
 800c2ea:	bf00      	nop
 800c2ec:	24001838 	.word	0x24001838
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c2f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2f8:	8952      	ldrh	r2, [r2, #10]
 800c2fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <find_volume+0x2ca>
 800c306:	230d      	movs	r3, #13
 800c308:	e0de      	b.n	800c4c8 <find_volume+0x488>
		fmt = FS_FAT32;
 800c30a:	2303      	movs	r3, #3
 800c30c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c316:	4293      	cmp	r3, r2
 800c318:	d802      	bhi.n	800c320 <find_volume+0x2e0>
 800c31a:	2302      	movs	r3, #2
 800c31c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c326:	4293      	cmp	r3, r2
 800c328:	d802      	bhi.n	800c330 <find_volume+0x2f0>
 800c32a:	2301      	movs	r3, #1
 800c32c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	1c9a      	adds	r2, r3, #2
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c33c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c33e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c342:	441a      	add	r2, r3
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	441a      	add	r2, r3
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c356:	2b03      	cmp	r3, #3
 800c358:	d11e      	bne.n	800c398 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35c:	3334      	adds	r3, #52	; 0x34
 800c35e:	332a      	adds	r3, #42	; 0x2a
 800c360:	4618      	mov	r0, r3
 800c362:	f7fd ff95 	bl	800a290 <ld_word>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <find_volume+0x330>
 800c36c:	230d      	movs	r3, #13
 800c36e:	e0ab      	b.n	800c4c8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	891b      	ldrh	r3, [r3, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <find_volume+0x33c>
 800c378:	230d      	movs	r3, #13
 800c37a:	e0a5      	b.n	800c4c8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	3334      	adds	r3, #52	; 0x34
 800c380:	332c      	adds	r3, #44	; 0x2c
 800c382:	4618      	mov	r0, r3
 800c384:	f7fd ff9c 	bl	800a2c0 <ld_dword>
 800c388:	4602      	mov	r2, r0
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	647b      	str	r3, [r7, #68]	; 0x44
 800c396:	e01f      	b.n	800c3d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	891b      	ldrh	r3, [r3, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <find_volume+0x364>
 800c3a0:	230d      	movs	r3, #13
 800c3a2:	e091      	b.n	800c4c8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3aa:	441a      	add	r2, r3
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d103      	bne.n	800c3c0 <find_volume+0x380>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	e00a      	b.n	800c3d6 <find_volume+0x396>
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	699a      	ldr	r2, [r3, #24]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	4413      	add	r3, r2
 800c3ca:	085a      	lsrs	r2, r3, #1
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c3d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	69da      	ldr	r2, [r3, #28]
 800c3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c3e2:	0a5b      	lsrs	r3, r3, #9
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d201      	bcs.n	800c3ec <find_volume+0x3ac>
 800c3e8:	230d      	movs	r3, #13
 800c3ea:	e06d      	b.n	800c4c8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f2:	615a      	str	r2, [r3, #20]
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	695a      	ldr	r2, [r3, #20]
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	2280      	movs	r2, #128	; 0x80
 800c400:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c406:	2b03      	cmp	r3, #3
 800c408:	d149      	bne.n	800c49e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	3334      	adds	r3, #52	; 0x34
 800c40e:	3330      	adds	r3, #48	; 0x30
 800c410:	4618      	mov	r0, r3
 800c412:	f7fd ff3d 	bl	800a290 <ld_word>
 800c416:	4603      	mov	r3, r0
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d140      	bne.n	800c49e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c41e:	3301      	adds	r3, #1
 800c420:	4619      	mov	r1, r3
 800c422:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c424:	f7fe f9e4 	bl	800a7f0 <move_window>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d137      	bne.n	800c49e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	2200      	movs	r2, #0
 800c432:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	3334      	adds	r3, #52	; 0x34
 800c438:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fd ff27 	bl	800a290 <ld_word>
 800c442:	4603      	mov	r3, r0
 800c444:	461a      	mov	r2, r3
 800c446:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d127      	bne.n	800c49e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	3334      	adds	r3, #52	; 0x34
 800c452:	4618      	mov	r0, r3
 800c454:	f7fd ff34 	bl	800a2c0 <ld_dword>
 800c458:	4603      	mov	r3, r0
 800c45a:	4a1d      	ldr	r2, [pc, #116]	; (800c4d0 <find_volume+0x490>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d11e      	bne.n	800c49e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	3334      	adds	r3, #52	; 0x34
 800c464:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fd ff29 	bl	800a2c0 <ld_dword>
 800c46e:	4603      	mov	r3, r0
 800c470:	4a18      	ldr	r2, [pc, #96]	; (800c4d4 <find_volume+0x494>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d113      	bne.n	800c49e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	3334      	adds	r3, #52	; 0x34
 800c47a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fd ff1e 	bl	800a2c0 <ld_dword>
 800c484:	4602      	mov	r2, r0
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	3334      	adds	r3, #52	; 0x34
 800c48e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c492:	4618      	mov	r0, r3
 800c494:	f7fd ff14 	bl	800a2c0 <ld_dword>
 800c498:	4602      	mov	r2, r0
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c4a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c4a6:	4b0c      	ldr	r3, [pc, #48]	; (800c4d8 <find_volume+0x498>)
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <find_volume+0x498>)
 800c4b0:	801a      	strh	r2, [r3, #0]
 800c4b2:	4b09      	ldr	r3, [pc, #36]	; (800c4d8 <find_volume+0x498>)
 800c4b4:	881a      	ldrh	r2, [r3, #0]
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	4a07      	ldr	r2, [pc, #28]	; (800c4dc <find_volume+0x49c>)
 800c4be:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c4c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4c2:	f7fe f92d 	bl	800a720 <clear_lock>
#endif
	return FR_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3758      	adds	r7, #88	; 0x58
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	41615252 	.word	0x41615252
 800c4d4:	61417272 	.word	0x61417272
 800c4d8:	2400183c 	.word	0x2400183c
 800c4dc:	24001860 	.word	0x24001860

0800c4e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c4ea:	2309      	movs	r3, #9
 800c4ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01c      	beq.n	800c52e <validate+0x4e>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d018      	beq.n	800c52e <validate+0x4e>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d013      	beq.n	800c52e <validate+0x4e>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	889a      	ldrh	r2, [r3, #4]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	88db      	ldrh	r3, [r3, #6]
 800c510:	429a      	cmp	r2, r3
 800c512:	d10c      	bne.n	800c52e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	785b      	ldrb	r3, [r3, #1]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fd fe1a 	bl	800a154 <disk_status>
 800c520:	4603      	mov	r3, r0
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <validate+0x4e>
			res = FR_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d102      	bne.n	800c53a <validate+0x5a>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	e000      	b.n	800c53c <validate+0x5c>
 800c53a:	2300      	movs	r3, #0
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	6013      	str	r3, [r2, #0]
	return res;
 800c540:	7bfb      	ldrb	r3, [r7, #15]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c55e:	f107 0310 	add.w	r3, r7, #16
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fcd1 	bl	800bf0a <get_ldnumber>
 800c568:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	da01      	bge.n	800c574 <f_mount+0x28>
 800c570:	230b      	movs	r3, #11
 800c572:	e02b      	b.n	800c5cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c574:	4a17      	ldr	r2, [pc, #92]	; (800c5d4 <f_mount+0x88>)
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c57c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d005      	beq.n	800c590 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c584:	69b8      	ldr	r0, [r7, #24]
 800c586:	f7fe f8cb 	bl	800a720 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d002      	beq.n	800c59c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	490d      	ldr	r1, [pc, #52]	; (800c5d4 <f_mount+0x88>)
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <f_mount+0x66>
 800c5ac:	79fb      	ldrb	r3, [r7, #7]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d001      	beq.n	800c5b6 <f_mount+0x6a>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	e00a      	b.n	800c5cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c5b6:	f107 010c 	add.w	r1, r7, #12
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	2200      	movs	r2, #0
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff fd3d 	bl	800c040 <find_volume>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	24001838 	.word	0x24001838

0800c5d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b09a      	sub	sp, #104	; 0x68
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <f_open+0x18>
 800c5ec:	2309      	movs	r3, #9
 800c5ee:	e1ad      	b.n	800c94c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c5f8:	79fa      	ldrb	r2, [r7, #7]
 800c5fa:	f107 0114 	add.w	r1, r7, #20
 800c5fe:	f107 0308 	add.w	r3, r7, #8
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff fd1c 	bl	800c040 <find_volume>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c60e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c612:	2b00      	cmp	r3, #0
 800c614:	f040 8191 	bne.w	800c93a <f_open+0x362>
		dj.obj.fs = fs;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	f107 0318 	add.w	r3, r7, #24
 800c622:	4611      	mov	r1, r2
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff fbff 	bl	800be28 <follow_path>
 800c62a:	4603      	mov	r3, r0
 800c62c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c634:	2b00      	cmp	r3, #0
 800c636:	d11a      	bne.n	800c66e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c638:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c63c:	b25b      	sxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	da03      	bge.n	800c64a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c642:	2306      	movs	r3, #6
 800c644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c648:	e011      	b.n	800c66e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	f023 0301 	bic.w	r3, r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	bf14      	ite	ne
 800c654:	2301      	movne	r3, #1
 800c656:	2300      	moveq	r3, #0
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	461a      	mov	r2, r3
 800c65c:	f107 0318 	add.w	r3, r7, #24
 800c660:	4611      	mov	r1, r2
 800c662:	4618      	mov	r0, r3
 800c664:	f7fd ff14 	bl	800a490 <chk_lock>
 800c668:	4603      	mov	r3, r0
 800c66a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c66e:	79fb      	ldrb	r3, [r7, #7]
 800c670:	f003 031c 	and.w	r3, r3, #28
 800c674:	2b00      	cmp	r3, #0
 800c676:	d07f      	beq.n	800c778 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c678:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d017      	beq.n	800c6b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c684:	2b04      	cmp	r3, #4
 800c686:	d10e      	bne.n	800c6a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c688:	f7fd ff5e 	bl	800a548 <enq_lock>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d006      	beq.n	800c6a0 <f_open+0xc8>
 800c692:	f107 0318 	add.w	r3, r7, #24
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff f838 	bl	800b70c <dir_register>
 800c69c:	4603      	mov	r3, r0
 800c69e:	e000      	b.n	800c6a2 <f_open+0xca>
 800c6a0:	2312      	movs	r3, #18
 800c6a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c6a6:	79fb      	ldrb	r3, [r7, #7]
 800c6a8:	f043 0308 	orr.w	r3, r3, #8
 800c6ac:	71fb      	strb	r3, [r7, #7]
 800c6ae:	e010      	b.n	800c6d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c6b0:	7fbb      	ldrb	r3, [r7, #30]
 800c6b2:	f003 0311 	and.w	r3, r3, #17
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <f_open+0xea>
					res = FR_DENIED;
 800c6ba:	2307      	movs	r3, #7
 800c6bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c6c0:	e007      	b.n	800c6d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	f003 0304 	and.w	r3, r3, #4
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <f_open+0xfa>
 800c6cc:	2308      	movs	r3, #8
 800c6ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c6d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d168      	bne.n	800c7ac <f_open+0x1d4>
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	f003 0308 	and.w	r3, r3, #8
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d063      	beq.n	800c7ac <f_open+0x1d4>
				dw = GET_FATTIME();
 800c6e4:	f7fd faf8 	bl	8009cd8 <get_fattime>
 800c6e8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	330e      	adds	r3, #14
 800c6ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fd fe23 	bl	800a33c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	3316      	adds	r3, #22
 800c6fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd fe1d 	bl	800a33c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	330b      	adds	r3, #11
 800c706:	2220      	movs	r2, #32
 800c708:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c70e:	4611      	mov	r1, r2
 800c710:	4618      	mov	r0, r3
 800c712:	f7fe fd74 	bl	800b1fe <ld_clust>
 800c716:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c71c:	2200      	movs	r2, #0
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe fd8c 	bl	800b23c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	331c      	adds	r3, #28
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fd fe06 	bl	800a33c <st_dword>
					fs->wflag = 1;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2201      	movs	r2, #1
 800c734:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d037      	beq.n	800c7ac <f_open+0x1d4>
						dw = fs->winsect;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c740:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c742:	f107 0318 	add.w	r3, r7, #24
 800c746:	2200      	movs	r2, #0
 800c748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe fa9f 	bl	800ac8e <remove_chain>
 800c750:	4603      	mov	r3, r0
 800c752:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c756:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d126      	bne.n	800c7ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe f844 	bl	800a7f0 <move_window>
 800c768:	4603      	mov	r3, r0
 800c76a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c772:	3a01      	subs	r2, #1
 800c774:	611a      	str	r2, [r3, #16]
 800c776:	e019      	b.n	800c7ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d115      	bne.n	800c7ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c780:	7fbb      	ldrb	r3, [r7, #30]
 800c782:	f003 0310 	and.w	r3, r3, #16
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c78a:	2304      	movs	r3, #4
 800c78c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c790:	e00c      	b.n	800c7ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c792:	79fb      	ldrb	r3, [r7, #7]
 800c794:	f003 0302 	and.w	r3, r3, #2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d007      	beq.n	800c7ac <f_open+0x1d4>
 800c79c:	7fbb      	ldrb	r3, [r7, #30]
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <f_open+0x1d4>
						res = FR_DENIED;
 800c7a6:	2307      	movs	r3, #7
 800c7a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c7ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d128      	bne.n	800c806 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c7b4:	79fb      	ldrb	r3, [r7, #7]
 800c7b6:	f003 0308 	and.w	r3, r3, #8
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d003      	beq.n	800c7c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c7ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	f023 0301 	bic.w	r3, r3, #1
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	bf14      	ite	ne
 800c7de:	2301      	movne	r3, #1
 800c7e0:	2300      	moveq	r3, #0
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	f107 0318 	add.w	r3, r7, #24
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd fecd 	bl	800a58c <inc_lock>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <f_open+0x22e>
 800c800:	2302      	movs	r3, #2
 800c802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f040 8095 	bne.w	800c93a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c814:	4611      	mov	r1, r2
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe fcf1 	bl	800b1fe <ld_clust>
 800c81c:	4602      	mov	r2, r0
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	331c      	adds	r3, #28
 800c826:	4618      	mov	r0, r3
 800c828:	f7fd fd4a 	bl	800a2c0 <ld_dword>
 800c82c:	4602      	mov	r2, r0
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c838:	697a      	ldr	r2, [r7, #20]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	88da      	ldrh	r2, [r3, #6]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	79fa      	ldrb	r2, [r7, #7]
 800c84a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2200      	movs	r2, #0
 800c850:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3330      	adds	r3, #48	; 0x30
 800c862:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fd fdb4 	bl	800a3d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	f003 0320 	and.w	r3, r3, #32
 800c874:	2b00      	cmp	r3, #0
 800c876:	d060      	beq.n	800c93a <f_open+0x362>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d05c      	beq.n	800c93a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	895b      	ldrh	r3, [r3, #10]
 800c88c:	025b      	lsls	r3, r3, #9
 800c88e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c89c:	e016      	b.n	800c8cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fe f85f 	bl	800a966 <get_fat>
 800c8a8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c8aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d802      	bhi.n	800c8b6 <f_open+0x2de>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c8b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8bc:	d102      	bne.n	800c8c4 <f_open+0x2ec>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d103      	bne.n	800c8dc <f_open+0x304>
 800c8d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d8e0      	bhi.n	800c89e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c8e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d127      	bne.n	800c93a <f_open+0x362>
 800c8ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d022      	beq.n	800c93a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe f815 	bl	800a928 <clust2sect>
 800c8fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c902:	2b00      	cmp	r3, #0
 800c904:	d103      	bne.n	800c90e <f_open+0x336>
						res = FR_INT_ERR;
 800c906:	2302      	movs	r3, #2
 800c908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c90c:	e015      	b.n	800c93a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c90e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c910:	0a5a      	lsrs	r2, r3, #9
 800c912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c914:	441a      	add	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	7858      	ldrb	r0, [r3, #1]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6a1a      	ldr	r2, [r3, #32]
 800c928:	2301      	movs	r3, #1
 800c92a:	f7fd fc53 	bl	800a1d4 <disk_read>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <f_open+0x362>
 800c934:	2301      	movs	r3, #1
 800c936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c93a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d002      	beq.n	800c948 <f_open+0x370>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c948:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3768      	adds	r7, #104	; 0x68
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b08c      	sub	sp, #48	; 0x30
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f107 0210 	add.w	r2, r7, #16
 800c972:	4611      	mov	r1, r2
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fdb3 	bl	800c4e0 <validate>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c984:	2b00      	cmp	r3, #0
 800c986:	d107      	bne.n	800c998 <f_write+0x44>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	7d5b      	ldrb	r3, [r3, #21]
 800c98c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <f_write+0x4a>
 800c998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c99c:	e14b      	b.n	800cc36 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	7d1b      	ldrb	r3, [r3, #20]
 800c9a2:	f003 0302 	and.w	r3, r3, #2
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <f_write+0x5a>
 800c9aa:	2307      	movs	r3, #7
 800c9ac:	e143      	b.n	800cc36 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	699a      	ldr	r2, [r3, #24]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	441a      	add	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	f080 812d 	bcs.w	800cc1a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c9c8:	e127      	b.n	800cc1a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f040 80e3 	bne.w	800cb9e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	699b      	ldr	r3, [r3, #24]
 800c9dc:	0a5b      	lsrs	r3, r3, #9
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	8952      	ldrh	r2, [r2, #10]
 800c9e2:	3a01      	subs	r2, #1
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d143      	bne.n	800ca76 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10c      	bne.n	800ca10 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d11a      	bne.n	800ca38 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2100      	movs	r1, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe f9a6 	bl	800ad58 <create_chain>
 800ca0c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca0e:	e013      	b.n	800ca38 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d007      	beq.n	800ca28 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7fe fa32 	bl	800ae88 <clmt_clust>
 800ca24:	62b8      	str	r0, [r7, #40]	; 0x28
 800ca26:	e007      	b.n	800ca38 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	4610      	mov	r0, r2
 800ca32:	f7fe f991 	bl	800ad58 <create_chain>
 800ca36:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 80f2 	beq.w	800cc24 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d104      	bne.n	800ca50 <f_write+0xfc>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	755a      	strb	r2, [r3, #21]
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	e0f2      	b.n	800cc36 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca56:	d104      	bne.n	800ca62 <f_write+0x10e>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	755a      	strb	r2, [r3, #21]
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e0e9      	b.n	800cc36 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca66:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <f_write+0x122>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca74:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	7d1b      	ldrb	r3, [r3, #20]
 800ca7a:	b25b      	sxtb	r3, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da18      	bge.n	800cab2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	7858      	ldrb	r0, [r3, #1]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6a1a      	ldr	r2, [r3, #32]
 800ca8e:	2301      	movs	r3, #1
 800ca90:	f7fd fbc0 	bl	800a214 <disk_write>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d004      	beq.n	800caa4 <f_write+0x150>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	755a      	strb	r2, [r3, #21]
 800caa0:	2301      	movs	r3, #1
 800caa2:	e0c8      	b.n	800cc36 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	7d1b      	ldrb	r3, [r3, #20]
 800caa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caac:	b2da      	uxtb	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	4619      	mov	r1, r3
 800caba:	4610      	mov	r0, r2
 800cabc:	f7fd ff34 	bl	800a928 <clust2sect>
 800cac0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d104      	bne.n	800cad2 <f_write+0x17e>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2202      	movs	r2, #2
 800cacc:	755a      	strb	r2, [r3, #21]
 800cace:	2302      	movs	r3, #2
 800cad0:	e0b1      	b.n	800cc36 <f_write+0x2e2>
			sect += csect;
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	4413      	add	r3, r2
 800cad8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	0a5b      	lsrs	r3, r3, #9
 800cade:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d03c      	beq.n	800cb60 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	4413      	add	r3, r2
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	8952      	ldrh	r2, [r2, #10]
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d905      	bls.n	800cb00 <f_write+0x1ac>
					cc = fs->csize - csect;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	895b      	ldrh	r3, [r3, #10]
 800caf8:	461a      	mov	r2, r3
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	7858      	ldrb	r0, [r3, #1]
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	69f9      	ldr	r1, [r7, #28]
 800cb0a:	f7fd fb83 	bl	800a214 <disk_write>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d004      	beq.n	800cb1e <f_write+0x1ca>
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2201      	movs	r2, #1
 800cb18:	755a      	strb	r2, [r3, #21]
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e08b      	b.n	800cc36 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6a1a      	ldr	r2, [r3, #32]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	6a3a      	ldr	r2, [r7, #32]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d915      	bls.n	800cb58 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6a1a      	ldr	r2, [r3, #32]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	025b      	lsls	r3, r3, #9
 800cb3c:	69fa      	ldr	r2, [r7, #28]
 800cb3e:	4413      	add	r3, r2
 800cb40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb44:	4619      	mov	r1, r3
 800cb46:	f7fd fc25 	bl	800a394 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	7d1b      	ldrb	r3, [r3, #20]
 800cb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	025b      	lsls	r3, r3, #9
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cb5e:	e03f      	b.n	800cbe0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	697a      	ldr	r2, [r7, #20]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d016      	beq.n	800cb98 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	699a      	ldr	r2, [r3, #24]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d210      	bcs.n	800cb98 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	7858      	ldrb	r0, [r3, #1]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb80:	2301      	movs	r3, #1
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	f7fd fb26 	bl	800a1d4 <disk_read>
 800cb88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d004      	beq.n	800cb98 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2201      	movs	r2, #1
 800cb92:	755a      	strb	r2, [r3, #21]
 800cb94:	2301      	movs	r3, #1
 800cb96:	e04e      	b.n	800cc36 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	699b      	ldr	r3, [r3, #24]
 800cba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d901      	bls.n	800cbb8 <f_write+0x264>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	699b      	ldr	r3, [r3, #24]
 800cbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc6:	4413      	add	r3, r2
 800cbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbca:	69f9      	ldr	r1, [r7, #28]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fd fbe1 	bl	800a394 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	7d1b      	ldrb	r3, [r3, #20]
 800cbd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cbe0:	69fa      	ldr	r2, [r7, #28]
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	4413      	add	r3, r2
 800cbe6:	61fb      	str	r3, [r7, #28]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	699a      	ldr	r2, [r3, #24]
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	441a      	add	r2, r3
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	619a      	str	r2, [r3, #24]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	68da      	ldr	r2, [r3, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	699b      	ldr	r3, [r3, #24]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	bf38      	it	cc
 800cc00:	461a      	movcc	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	60da      	str	r2, [r3, #12]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	441a      	add	r2, r3
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	601a      	str	r2, [r3, #0]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f47f aed4 	bne.w	800c9ca <f_write+0x76>
 800cc22:	e000      	b.n	800cc26 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc24:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	7d1b      	ldrb	r3, [r3, #20]
 800cc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3730      	adds	r7, #48	; 0x30
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b086      	sub	sp, #24
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f107 0208 	add.w	r2, r7, #8
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff fc46 	bl	800c4e0 <validate>
 800cc54:	4603      	mov	r3, r0
 800cc56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d168      	bne.n	800cd30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	7d1b      	ldrb	r3, [r3, #20]
 800cc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d062      	beq.n	800cd30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7d1b      	ldrb	r3, [r3, #20]
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	da15      	bge.n	800cca0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	7858      	ldrb	r0, [r3, #1]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1a      	ldr	r2, [r3, #32]
 800cc82:	2301      	movs	r3, #1
 800cc84:	f7fd fac6 	bl	800a214 <disk_write>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <f_sync+0x54>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e04f      	b.n	800cd32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7d1b      	ldrb	r3, [r3, #20]
 800cc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cca0:	f7fd f81a 	bl	8009cd8 <get_fattime>
 800cca4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	4619      	mov	r1, r3
 800ccae:	4610      	mov	r0, r2
 800ccb0:	f7fd fd9e 	bl	800a7f0 <move_window>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ccb8:	7dfb      	ldrb	r3, [r7, #23]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d138      	bne.n	800cd30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	330b      	adds	r3, #11
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	330b      	adds	r3, #11
 800ccce:	f042 0220 	orr.w	r2, r2, #32
 800ccd2:	b2d2      	uxtb	r2, r2
 800ccd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	461a      	mov	r2, r3
 800cce0:	68f9      	ldr	r1, [r7, #12]
 800cce2:	f7fe faab 	bl	800b23c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f103 021c 	add.w	r2, r3, #28
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	f7fd fb22 	bl	800a33c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3316      	adds	r3, #22
 800ccfc:	6939      	ldr	r1, [r7, #16]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fd fb1c 	bl	800a33c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	3312      	adds	r3, #18
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fd fafb 	bl	800a306 <st_word>
					fs->wflag = 1;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2201      	movs	r2, #1
 800cd14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fd fd97 	bl	800a84c <sync_fs>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	7d1b      	ldrb	r3, [r3, #20]
 800cd26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff ff7b 	bl	800cc3e <f_sync>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d118      	bne.n	800cd84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f107 0208 	add.w	r2, r7, #8
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff fbc0 	bl	800c4e0 <validate>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10c      	bne.n	800cd84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	691b      	ldr	r3, [r3, #16]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fd fc9a 	bl	800a6a8 <dec_lock>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d102      	bne.n	800cd84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b090      	sub	sp, #64	; 0x40
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f107 0208 	add.w	r2, r7, #8
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fb9d 	bl	800c4e0 <validate>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cdac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d103      	bne.n	800cdbc <f_lseek+0x2e>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7d5b      	ldrb	r3, [r3, #21]
 800cdb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cdbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <f_lseek+0x3c>
 800cdc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdc8:	e1e6      	b.n	800d198 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 80d1 	beq.w	800cf76 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdda:	d15a      	bne.n	800ce92 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	1d1a      	adds	r2, r3, #4
 800cde6:	627a      	str	r2, [r7, #36]	; 0x24
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	617b      	str	r3, [r7, #20]
 800cdec:	2302      	movs	r3, #2
 800cdee:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d03a      	beq.n	800ce72 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfe:	613b      	str	r3, [r7, #16]
 800ce00:	2300      	movs	r3, #0
 800ce02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce06:	3302      	adds	r3, #2
 800ce08:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	3301      	adds	r3, #1
 800ce12:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fd fda4 	bl	800a966 <get_fat>
 800ce1e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d804      	bhi.n	800ce30 <f_lseek+0xa2>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2202      	movs	r2, #2
 800ce2a:	755a      	strb	r2, [r3, #21]
 800ce2c:	2302      	movs	r3, #2
 800ce2e:	e1b3      	b.n	800d198 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce36:	d104      	bne.n	800ce42 <f_lseek+0xb4>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	755a      	strb	r2, [r3, #21]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e1aa      	b.n	800d198 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d0de      	beq.n	800ce0a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d809      	bhi.n	800ce68 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	627a      	str	r2, [r7, #36]	; 0x24
 800ce5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	1d1a      	adds	r2, r3, #4
 800ce62:	627a      	str	r2, [r7, #36]	; 0x24
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d3c4      	bcc.n	800cdfc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce78:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ce7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d803      	bhi.n	800ce8a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	e184      	b.n	800d194 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ce8a:	2311      	movs	r3, #17
 800ce8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce90:	e180      	b.n	800d194 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d902      	bls.n	800cea2 <f_lseek+0x114>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f000 8172 	beq.w	800d194 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7fd ffe6 	bl	800ae88 <clmt_clust>
 800cebc:	4602      	mov	r2, r0
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	69db      	ldr	r3, [r3, #28]
 800cec8:	4619      	mov	r1, r3
 800ceca:	4610      	mov	r0, r2
 800cecc:	f7fd fd2c 	bl	800a928 <clust2sect>
 800ced0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d104      	bne.n	800cee2 <f_lseek+0x154>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	755a      	strb	r2, [r3, #21]
 800cede:	2302      	movs	r3, #2
 800cee0:	e15a      	b.n	800d198 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	0a5b      	lsrs	r3, r3, #9
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	8952      	ldrh	r2, [r2, #10]
 800ceec:	3a01      	subs	r2, #1
 800ceee:	4013      	ands	r3, r2
 800cef0:	69ba      	ldr	r2, [r7, #24]
 800cef2:	4413      	add	r3, r2
 800cef4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 8148 	beq.w	800d194 <f_lseek+0x406>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a1b      	ldr	r3, [r3, #32]
 800cf08:	69ba      	ldr	r2, [r7, #24]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	f000 8142 	beq.w	800d194 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	7d1b      	ldrb	r3, [r3, #20]
 800cf14:	b25b      	sxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	da18      	bge.n	800cf4c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	7858      	ldrb	r0, [r3, #1]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a1a      	ldr	r2, [r3, #32]
 800cf28:	2301      	movs	r3, #1
 800cf2a:	f7fd f973 	bl	800a214 <disk_write>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d004      	beq.n	800cf3e <f_lseek+0x1b0>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	755a      	strb	r2, [r3, #21]
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e12c      	b.n	800d198 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	7d1b      	ldrb	r3, [r3, #20]
 800cf42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	7858      	ldrb	r0, [r3, #1]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf56:	2301      	movs	r3, #1
 800cf58:	69ba      	ldr	r2, [r7, #24]
 800cf5a:	f7fd f93b 	bl	800a1d4 <disk_read>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d004      	beq.n	800cf6e <f_lseek+0x1e0>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	755a      	strb	r2, [r3, #21]
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e114      	b.n	800d198 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	69ba      	ldr	r2, [r7, #24]
 800cf72:	621a      	str	r2, [r3, #32]
 800cf74:	e10e      	b.n	800d194 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d908      	bls.n	800cf92 <f_lseek+0x204>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	7d1b      	ldrb	r3, [r3, #20]
 800cf84:	f003 0302 	and.w	r3, r3, #2
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d102      	bne.n	800cf92 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfa0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 80a7 	beq.w	800d0f8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	895b      	ldrh	r3, [r3, #10]
 800cfae:	025b      	lsls	r3, r3, #9
 800cfb0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d01b      	beq.n	800cff0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	1e5a      	subs	r2, r3, #1
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	1e59      	subs	r1, r3, #1
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d30f      	bcc.n	800cff0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	1e5a      	subs	r2, r3, #1
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	425b      	negs	r3, r3
 800cfd8:	401a      	ands	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfee:	e022      	b.n	800d036 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d119      	bne.n	800d030 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2100      	movs	r1, #0
 800d000:	4618      	mov	r0, r3
 800d002:	f7fd fea9 	bl	800ad58 <create_chain>
 800d006:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d104      	bne.n	800d018 <f_lseek+0x28a>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2202      	movs	r2, #2
 800d012:	755a      	strb	r2, [r3, #21]
 800d014:	2302      	movs	r3, #2
 800d016:	e0bf      	b.n	800d198 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01e:	d104      	bne.n	800d02a <f_lseek+0x29c>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	755a      	strb	r2, [r3, #21]
 800d026:	2301      	movs	r3, #1
 800d028:	e0b6      	b.n	800d198 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d02e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d034:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d05d      	beq.n	800d0f8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d03c:	e03a      	b.n	800d0b4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d03e:	683a      	ldr	r2, [r7, #0]
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	603b      	str	r3, [r7, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	699a      	ldr	r2, [r3, #24]
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	441a      	add	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7d1b      	ldrb	r3, [r3, #20]
 800d056:	f003 0302 	and.w	r3, r3, #2
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00b      	beq.n	800d076 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d062:	4618      	mov	r0, r3
 800d064:	f7fd fe78 	bl	800ad58 <create_chain>
 800d068:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d108      	bne.n	800d082 <f_lseek+0x2f4>
							ofs = 0; break;
 800d070:	2300      	movs	r3, #0
 800d072:	603b      	str	r3, [r7, #0]
 800d074:	e022      	b.n	800d0bc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fd fc73 	bl	800a966 <get_fat>
 800d080:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d104      	bne.n	800d094 <f_lseek+0x306>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	755a      	strb	r2, [r3, #21]
 800d090:	2301      	movs	r3, #1
 800d092:	e081      	b.n	800d198 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d096:	2b01      	cmp	r3, #1
 800d098:	d904      	bls.n	800d0a4 <f_lseek+0x316>
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d304      	bcc.n	800d0ae <f_lseek+0x320>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	755a      	strb	r2, [r3, #21]
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	e074      	b.n	800d198 <f_lseek+0x40a>
					fp->clust = clst;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0b2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d8c0      	bhi.n	800d03e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	699a      	ldr	r2, [r3, #24]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	441a      	add	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d012      	beq.n	800d0f8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fd fc26 	bl	800a928 <clust2sect>
 800d0dc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d104      	bne.n	800d0ee <f_lseek+0x360>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	755a      	strb	r2, [r3, #21]
 800d0ea:	2302      	movs	r3, #2
 800d0ec:	e054      	b.n	800d198 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	0a5b      	lsrs	r3, r3, #9
 800d0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0f4:	4413      	add	r3, r2
 800d0f6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	699a      	ldr	r2, [r3, #24]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	429a      	cmp	r2, r3
 800d102:	d90a      	bls.n	800d11a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	699a      	ldr	r2, [r3, #24]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7d1b      	ldrb	r3, [r3, #20]
 800d110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d114:	b2da      	uxtb	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d122:	2b00      	cmp	r3, #0
 800d124:	d036      	beq.n	800d194 <f_lseek+0x406>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d031      	beq.n	800d194 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7d1b      	ldrb	r3, [r3, #20]
 800d134:	b25b      	sxtb	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	da18      	bge.n	800d16c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	7858      	ldrb	r0, [r3, #1]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6a1a      	ldr	r2, [r3, #32]
 800d148:	2301      	movs	r3, #1
 800d14a:	f7fd f863 	bl	800a214 <disk_write>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d004      	beq.n	800d15e <f_lseek+0x3d0>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	755a      	strb	r2, [r3, #21]
 800d15a:	2301      	movs	r3, #1
 800d15c:	e01c      	b.n	800d198 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7d1b      	ldrb	r3, [r3, #20]
 800d162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	7858      	ldrb	r0, [r3, #1]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d176:	2301      	movs	r3, #1
 800d178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d17a:	f7fd f82b 	bl	800a1d4 <disk_read>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d004      	beq.n	800d18e <f_lseek+0x400>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	755a      	strb	r2, [r3, #21]
 800d18a:	2301      	movs	r3, #1
 800d18c:	e004      	b.n	800d198 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d192:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d194:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3740      	adds	r7, #64	; 0x40
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b090      	sub	sp, #64	; 0x40
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d1aa:	f107 0108 	add.w	r1, r7, #8
 800d1ae:	1d3b      	adds	r3, r7, #4
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe ff44 	bl	800c040 <find_volume>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d1be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d11f      	bne.n	800d206 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	f107 0308 	add.w	r3, r7, #8
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe fe2a 	bl	800be28 <follow_path>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d1da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d111      	bne.n	800d206 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d1e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1e6:	b25b      	sxtb	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	da03      	bge.n	800d1f4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d1ec:	2306      	movs	r3, #6
 800d1ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d1f2:	e008      	b.n	800d206 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <f_stat+0x66>
 800d1fa:	f107 0308 	add.w	r3, r7, #8
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	4618      	mov	r0, r3
 800d202:	f7fe fb7b 	bl	800b8fc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3740      	adds	r7, #64	; 0x40
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
	...

0800d214 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d214:	b480      	push	{r7}
 800d216:	b087      	sub	sp, #28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4613      	mov	r3, r2
 800d220:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d222:	2301      	movs	r3, #1
 800d224:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d22a:	4b1f      	ldr	r3, [pc, #124]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d22c:	7a5b      	ldrb	r3, [r3, #9]
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b00      	cmp	r3, #0
 800d232:	d131      	bne.n	800d298 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d234:	4b1c      	ldr	r3, [pc, #112]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d236:	7a5b      	ldrb	r3, [r3, #9]
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	461a      	mov	r2, r3
 800d23c:	4b1a      	ldr	r3, [pc, #104]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d23e:	2100      	movs	r1, #0
 800d240:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d242:	4b19      	ldr	r3, [pc, #100]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d244:	7a5b      	ldrb	r3, [r3, #9]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4413      	add	r3, r2
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d254:	7a5b      	ldrb	r3, [r3, #9]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	461a      	mov	r2, r3
 800d25a:	4b13      	ldr	r3, [pc, #76]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d25c:	4413      	add	r3, r2
 800d25e:	79fa      	ldrb	r2, [r7, #7]
 800d260:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d262:	4b11      	ldr	r3, [pc, #68]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d264:	7a5b      	ldrb	r3, [r3, #9]
 800d266:	b2db      	uxtb	r3, r3
 800d268:	1c5a      	adds	r2, r3, #1
 800d26a:	b2d1      	uxtb	r1, r2
 800d26c:	4a0e      	ldr	r2, [pc, #56]	; (800d2a8 <FATFS_LinkDriverEx+0x94>)
 800d26e:	7251      	strb	r1, [r2, #9]
 800d270:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d272:	7dbb      	ldrb	r3, [r7, #22]
 800d274:	3330      	adds	r3, #48	; 0x30
 800d276:	b2da      	uxtb	r2, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3301      	adds	r3, #1
 800d280:	223a      	movs	r2, #58	; 0x3a
 800d282:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	3302      	adds	r3, #2
 800d288:	222f      	movs	r2, #47	; 0x2f
 800d28a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	3303      	adds	r3, #3
 800d290:	2200      	movs	r2, #0
 800d292:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d298:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	371c      	adds	r7, #28
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	24001a60 	.word	0x24001a60

0800d2ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff ffaa 	bl	800d214 <FATFS_LinkDriverEx>
 800d2c0:	4603      	mov	r3, r0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
	...

0800d2cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	6039      	str	r1, [r7, #0]
 800d2d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d2d8:	88fb      	ldrh	r3, [r7, #6]
 800d2da:	2b7f      	cmp	r3, #127	; 0x7f
 800d2dc:	d802      	bhi.n	800d2e4 <ff_convert+0x18>
		c = chr;
 800d2de:	88fb      	ldrh	r3, [r7, #6]
 800d2e0:	81fb      	strh	r3, [r7, #14]
 800d2e2:	e025      	b.n	800d330 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00b      	beq.n	800d302 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d2ea:	88fb      	ldrh	r3, [r7, #6]
 800d2ec:	2bff      	cmp	r3, #255	; 0xff
 800d2ee:	d805      	bhi.n	800d2fc <ff_convert+0x30>
 800d2f0:	88fb      	ldrh	r3, [r7, #6]
 800d2f2:	3b80      	subs	r3, #128	; 0x80
 800d2f4:	4a12      	ldr	r2, [pc, #72]	; (800d340 <ff_convert+0x74>)
 800d2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2fa:	e000      	b.n	800d2fe <ff_convert+0x32>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	81fb      	strh	r3, [r7, #14]
 800d300:	e016      	b.n	800d330 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d302:	2300      	movs	r3, #0
 800d304:	81fb      	strh	r3, [r7, #14]
 800d306:	e009      	b.n	800d31c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d308:	89fb      	ldrh	r3, [r7, #14]
 800d30a:	4a0d      	ldr	r2, [pc, #52]	; (800d340 <ff_convert+0x74>)
 800d30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d310:	88fa      	ldrh	r2, [r7, #6]
 800d312:	429a      	cmp	r2, r3
 800d314:	d006      	beq.n	800d324 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d316:	89fb      	ldrh	r3, [r7, #14]
 800d318:	3301      	adds	r3, #1
 800d31a:	81fb      	strh	r3, [r7, #14]
 800d31c:	89fb      	ldrh	r3, [r7, #14]
 800d31e:	2b7f      	cmp	r3, #127	; 0x7f
 800d320:	d9f2      	bls.n	800d308 <ff_convert+0x3c>
 800d322:	e000      	b.n	800d326 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d324:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d326:	89fb      	ldrh	r3, [r7, #14]
 800d328:	3380      	adds	r3, #128	; 0x80
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d330:	89fb      	ldrh	r3, [r7, #14]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	08010724 	.word	0x08010724

0800d344 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	4603      	mov	r3, r0
 800d34c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d34e:	88fb      	ldrh	r3, [r7, #6]
 800d350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d354:	d201      	bcs.n	800d35a <ff_wtoupper+0x16>
 800d356:	4b3e      	ldr	r3, [pc, #248]	; (800d450 <ff_wtoupper+0x10c>)
 800d358:	e000      	b.n	800d35c <ff_wtoupper+0x18>
 800d35a:	4b3e      	ldr	r3, [pc, #248]	; (800d454 <ff_wtoupper+0x110>)
 800d35c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	1c9a      	adds	r2, r3, #2
 800d362:	617a      	str	r2, [r7, #20]
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d368:	8a7b      	ldrh	r3, [r7, #18]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d068      	beq.n	800d440 <ff_wtoupper+0xfc>
 800d36e:	88fa      	ldrh	r2, [r7, #6]
 800d370:	8a7b      	ldrh	r3, [r7, #18]
 800d372:	429a      	cmp	r2, r3
 800d374:	d364      	bcc.n	800d440 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	1c9a      	adds	r2, r3, #2
 800d37a:	617a      	str	r2, [r7, #20]
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	823b      	strh	r3, [r7, #16]
 800d380:	8a3b      	ldrh	r3, [r7, #16]
 800d382:	0a1b      	lsrs	r3, r3, #8
 800d384:	81fb      	strh	r3, [r7, #14]
 800d386:	8a3b      	ldrh	r3, [r7, #16]
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d38c:	88fa      	ldrh	r2, [r7, #6]
 800d38e:	8a79      	ldrh	r1, [r7, #18]
 800d390:	8a3b      	ldrh	r3, [r7, #16]
 800d392:	440b      	add	r3, r1
 800d394:	429a      	cmp	r2, r3
 800d396:	da49      	bge.n	800d42c <ff_wtoupper+0xe8>
			switch (cmd) {
 800d398:	89fb      	ldrh	r3, [r7, #14]
 800d39a:	2b08      	cmp	r3, #8
 800d39c:	d84f      	bhi.n	800d43e <ff_wtoupper+0xfa>
 800d39e:	a201      	add	r2, pc, #4	; (adr r2, 800d3a4 <ff_wtoupper+0x60>)
 800d3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a4:	0800d3c9 	.word	0x0800d3c9
 800d3a8:	0800d3db 	.word	0x0800d3db
 800d3ac:	0800d3f1 	.word	0x0800d3f1
 800d3b0:	0800d3f9 	.word	0x0800d3f9
 800d3b4:	0800d401 	.word	0x0800d401
 800d3b8:	0800d409 	.word	0x0800d409
 800d3bc:	0800d411 	.word	0x0800d411
 800d3c0:	0800d419 	.word	0x0800d419
 800d3c4:	0800d421 	.word	0x0800d421
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d3c8:	88fa      	ldrh	r2, [r7, #6]
 800d3ca:	8a7b      	ldrh	r3, [r7, #18]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	005b      	lsls	r3, r3, #1
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	80fb      	strh	r3, [r7, #6]
 800d3d8:	e027      	b.n	800d42a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d3da:	88fa      	ldrh	r2, [r7, #6]
 800d3dc:	8a7b      	ldrh	r3, [r7, #18]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	88fa      	ldrh	r2, [r7, #6]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	80fb      	strh	r3, [r7, #6]
 800d3ee:	e01c      	b.n	800d42a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d3f0:	88fb      	ldrh	r3, [r7, #6]
 800d3f2:	3b10      	subs	r3, #16
 800d3f4:	80fb      	strh	r3, [r7, #6]
 800d3f6:	e018      	b.n	800d42a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	3b20      	subs	r3, #32
 800d3fc:	80fb      	strh	r3, [r7, #6]
 800d3fe:	e014      	b.n	800d42a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d400:	88fb      	ldrh	r3, [r7, #6]
 800d402:	3b30      	subs	r3, #48	; 0x30
 800d404:	80fb      	strh	r3, [r7, #6]
 800d406:	e010      	b.n	800d42a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d408:	88fb      	ldrh	r3, [r7, #6]
 800d40a:	3b1a      	subs	r3, #26
 800d40c:	80fb      	strh	r3, [r7, #6]
 800d40e:	e00c      	b.n	800d42a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d410:	88fb      	ldrh	r3, [r7, #6]
 800d412:	3308      	adds	r3, #8
 800d414:	80fb      	strh	r3, [r7, #6]
 800d416:	e008      	b.n	800d42a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d418:	88fb      	ldrh	r3, [r7, #6]
 800d41a:	3b50      	subs	r3, #80	; 0x50
 800d41c:	80fb      	strh	r3, [r7, #6]
 800d41e:	e004      	b.n	800d42a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d420:	88fb      	ldrh	r3, [r7, #6]
 800d422:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d426:	80fb      	strh	r3, [r7, #6]
 800d428:	bf00      	nop
			}
			break;
 800d42a:	e008      	b.n	800d43e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d42c:	89fb      	ldrh	r3, [r7, #14]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d195      	bne.n	800d35e <ff_wtoupper+0x1a>
 800d432:	8a3b      	ldrh	r3, [r7, #16]
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	4413      	add	r3, r2
 800d43a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d43c:	e78f      	b.n	800d35e <ff_wtoupper+0x1a>
			break;
 800d43e:	bf00      	nop
	}

	return chr;
 800d440:	88fb      	ldrh	r3, [r7, #6]
}
 800d442:	4618      	mov	r0, r3
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	08010824 	.word	0x08010824
 800d454:	08010a18 	.word	0x08010a18

0800d458 <__errno>:
 800d458:	4b01      	ldr	r3, [pc, #4]	; (800d460 <__errno+0x8>)
 800d45a:	6818      	ldr	r0, [r3, #0]
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	24000010 	.word	0x24000010

0800d464 <__libc_init_array>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	4d0d      	ldr	r5, [pc, #52]	; (800d49c <__libc_init_array+0x38>)
 800d468:	4c0d      	ldr	r4, [pc, #52]	; (800d4a0 <__libc_init_array+0x3c>)
 800d46a:	1b64      	subs	r4, r4, r5
 800d46c:	10a4      	asrs	r4, r4, #2
 800d46e:	2600      	movs	r6, #0
 800d470:	42a6      	cmp	r6, r4
 800d472:	d109      	bne.n	800d488 <__libc_init_array+0x24>
 800d474:	4d0b      	ldr	r5, [pc, #44]	; (800d4a4 <__libc_init_array+0x40>)
 800d476:	4c0c      	ldr	r4, [pc, #48]	; (800d4a8 <__libc_init_array+0x44>)
 800d478:	f002 fe90 	bl	801019c <_init>
 800d47c:	1b64      	subs	r4, r4, r5
 800d47e:	10a4      	asrs	r4, r4, #2
 800d480:	2600      	movs	r6, #0
 800d482:	42a6      	cmp	r6, r4
 800d484:	d105      	bne.n	800d492 <__libc_init_array+0x2e>
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	f855 3b04 	ldr.w	r3, [r5], #4
 800d48c:	4798      	blx	r3
 800d48e:	3601      	adds	r6, #1
 800d490:	e7ee      	b.n	800d470 <__libc_init_array+0xc>
 800d492:	f855 3b04 	ldr.w	r3, [r5], #4
 800d496:	4798      	blx	r3
 800d498:	3601      	adds	r6, #1
 800d49a:	e7f2      	b.n	800d482 <__libc_init_array+0x1e>
 800d49c:	08010eb4 	.word	0x08010eb4
 800d4a0:	08010eb4 	.word	0x08010eb4
 800d4a4:	08010eb4 	.word	0x08010eb4
 800d4a8:	08010eb8 	.word	0x08010eb8

0800d4ac <memcpy>:
 800d4ac:	440a      	add	r2, r1
 800d4ae:	4291      	cmp	r1, r2
 800d4b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4b4:	d100      	bne.n	800d4b8 <memcpy+0xc>
 800d4b6:	4770      	bx	lr
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4c2:	4291      	cmp	r1, r2
 800d4c4:	d1f9      	bne.n	800d4ba <memcpy+0xe>
 800d4c6:	bd10      	pop	{r4, pc}

0800d4c8 <memset>:
 800d4c8:	4402      	add	r2, r0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d100      	bne.n	800d4d2 <memset+0xa>
 800d4d0:	4770      	bx	lr
 800d4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4d6:	e7f9      	b.n	800d4cc <memset+0x4>

0800d4d8 <__cvt>:
 800d4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4da:	ed2d 8b02 	vpush	{d8}
 800d4de:	eeb0 8b40 	vmov.f64	d8, d0
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	4617      	mov	r7, r2
 800d4e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d4e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d4ea:	ee18 2a90 	vmov	r2, s17
 800d4ee:	f025 0520 	bic.w	r5, r5, #32
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	bfb6      	itet	lt
 800d4f6:	222d      	movlt	r2, #45	; 0x2d
 800d4f8:	2200      	movge	r2, #0
 800d4fa:	eeb1 8b40 	vneglt.f64	d8, d0
 800d4fe:	2d46      	cmp	r5, #70	; 0x46
 800d500:	460c      	mov	r4, r1
 800d502:	701a      	strb	r2, [r3, #0]
 800d504:	d004      	beq.n	800d510 <__cvt+0x38>
 800d506:	2d45      	cmp	r5, #69	; 0x45
 800d508:	d100      	bne.n	800d50c <__cvt+0x34>
 800d50a:	3401      	adds	r4, #1
 800d50c:	2102      	movs	r1, #2
 800d50e:	e000      	b.n	800d512 <__cvt+0x3a>
 800d510:	2103      	movs	r1, #3
 800d512:	ab03      	add	r3, sp, #12
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	ab02      	add	r3, sp, #8
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	4622      	mov	r2, r4
 800d51c:	4633      	mov	r3, r6
 800d51e:	eeb0 0b48 	vmov.f64	d0, d8
 800d522:	f000 fcfd 	bl	800df20 <_dtoa_r>
 800d526:	2d47      	cmp	r5, #71	; 0x47
 800d528:	d101      	bne.n	800d52e <__cvt+0x56>
 800d52a:	07fb      	lsls	r3, r7, #31
 800d52c:	d51a      	bpl.n	800d564 <__cvt+0x8c>
 800d52e:	2d46      	cmp	r5, #70	; 0x46
 800d530:	eb00 0204 	add.w	r2, r0, r4
 800d534:	d10c      	bne.n	800d550 <__cvt+0x78>
 800d536:	7803      	ldrb	r3, [r0, #0]
 800d538:	2b30      	cmp	r3, #48	; 0x30
 800d53a:	d107      	bne.n	800d54c <__cvt+0x74>
 800d53c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d544:	bf1c      	itt	ne
 800d546:	f1c4 0401 	rsbne	r4, r4, #1
 800d54a:	6034      	strne	r4, [r6, #0]
 800d54c:	6833      	ldr	r3, [r6, #0]
 800d54e:	441a      	add	r2, r3
 800d550:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d558:	bf08      	it	eq
 800d55a:	9203      	streq	r2, [sp, #12]
 800d55c:	2130      	movs	r1, #48	; 0x30
 800d55e:	9b03      	ldr	r3, [sp, #12]
 800d560:	4293      	cmp	r3, r2
 800d562:	d307      	bcc.n	800d574 <__cvt+0x9c>
 800d564:	9b03      	ldr	r3, [sp, #12]
 800d566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d568:	1a1b      	subs	r3, r3, r0
 800d56a:	6013      	str	r3, [r2, #0]
 800d56c:	b005      	add	sp, #20
 800d56e:	ecbd 8b02 	vpop	{d8}
 800d572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d574:	1c5c      	adds	r4, r3, #1
 800d576:	9403      	str	r4, [sp, #12]
 800d578:	7019      	strb	r1, [r3, #0]
 800d57a:	e7f0      	b.n	800d55e <__cvt+0x86>

0800d57c <__exponent>:
 800d57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d57e:	4603      	mov	r3, r0
 800d580:	2900      	cmp	r1, #0
 800d582:	bfb8      	it	lt
 800d584:	4249      	neglt	r1, r1
 800d586:	f803 2b02 	strb.w	r2, [r3], #2
 800d58a:	bfb4      	ite	lt
 800d58c:	222d      	movlt	r2, #45	; 0x2d
 800d58e:	222b      	movge	r2, #43	; 0x2b
 800d590:	2909      	cmp	r1, #9
 800d592:	7042      	strb	r2, [r0, #1]
 800d594:	dd2a      	ble.n	800d5ec <__exponent+0x70>
 800d596:	f10d 0407 	add.w	r4, sp, #7
 800d59a:	46a4      	mov	ip, r4
 800d59c:	270a      	movs	r7, #10
 800d59e:	46a6      	mov	lr, r4
 800d5a0:	460a      	mov	r2, r1
 800d5a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800d5a6:	fb07 1516 	mls	r5, r7, r6, r1
 800d5aa:	3530      	adds	r5, #48	; 0x30
 800d5ac:	2a63      	cmp	r2, #99	; 0x63
 800d5ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800d5b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	dcf1      	bgt.n	800d59e <__exponent+0x22>
 800d5ba:	3130      	adds	r1, #48	; 0x30
 800d5bc:	f1ae 0502 	sub.w	r5, lr, #2
 800d5c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5c4:	1c44      	adds	r4, r0, #1
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4561      	cmp	r1, ip
 800d5ca:	d30a      	bcc.n	800d5e2 <__exponent+0x66>
 800d5cc:	f10d 0209 	add.w	r2, sp, #9
 800d5d0:	eba2 020e 	sub.w	r2, r2, lr
 800d5d4:	4565      	cmp	r5, ip
 800d5d6:	bf88      	it	hi
 800d5d8:	2200      	movhi	r2, #0
 800d5da:	4413      	add	r3, r2
 800d5dc:	1a18      	subs	r0, r3, r0
 800d5de:	b003      	add	sp, #12
 800d5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5ea:	e7ed      	b.n	800d5c8 <__exponent+0x4c>
 800d5ec:	2330      	movs	r3, #48	; 0x30
 800d5ee:	3130      	adds	r1, #48	; 0x30
 800d5f0:	7083      	strb	r3, [r0, #2]
 800d5f2:	70c1      	strb	r1, [r0, #3]
 800d5f4:	1d03      	adds	r3, r0, #4
 800d5f6:	e7f1      	b.n	800d5dc <__exponent+0x60>

0800d5f8 <_printf_float>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	b08b      	sub	sp, #44	; 0x2c
 800d5fe:	460c      	mov	r4, r1
 800d600:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d604:	4616      	mov	r6, r2
 800d606:	461f      	mov	r7, r3
 800d608:	4605      	mov	r5, r0
 800d60a:	f001 f9f7 	bl	800e9fc <_localeconv_r>
 800d60e:	f8d0 b000 	ldr.w	fp, [r0]
 800d612:	4658      	mov	r0, fp
 800d614:	f7f2 fe64 	bl	80002e0 <strlen>
 800d618:	2300      	movs	r3, #0
 800d61a:	9308      	str	r3, [sp, #32]
 800d61c:	f8d8 3000 	ldr.w	r3, [r8]
 800d620:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d624:	6822      	ldr	r2, [r4, #0]
 800d626:	3307      	adds	r3, #7
 800d628:	f023 0307 	bic.w	r3, r3, #7
 800d62c:	f103 0108 	add.w	r1, r3, #8
 800d630:	f8c8 1000 	str.w	r1, [r8]
 800d634:	4682      	mov	sl, r0
 800d636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d63a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d63e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d8a0 <_printf_float+0x2a8>
 800d642:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d646:	eeb0 6bc0 	vabs.f64	d6, d0
 800d64a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d652:	dd24      	ble.n	800d69e <_printf_float+0xa6>
 800d654:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65c:	d502      	bpl.n	800d664 <_printf_float+0x6c>
 800d65e:	232d      	movs	r3, #45	; 0x2d
 800d660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d664:	4b90      	ldr	r3, [pc, #576]	; (800d8a8 <_printf_float+0x2b0>)
 800d666:	4891      	ldr	r0, [pc, #580]	; (800d8ac <_printf_float+0x2b4>)
 800d668:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d66c:	bf94      	ite	ls
 800d66e:	4698      	movls	r8, r3
 800d670:	4680      	movhi	r8, r0
 800d672:	2303      	movs	r3, #3
 800d674:	6123      	str	r3, [r4, #16]
 800d676:	f022 0204 	bic.w	r2, r2, #4
 800d67a:	2300      	movs	r3, #0
 800d67c:	6022      	str	r2, [r4, #0]
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	9700      	str	r7, [sp, #0]
 800d682:	4633      	mov	r3, r6
 800d684:	aa09      	add	r2, sp, #36	; 0x24
 800d686:	4621      	mov	r1, r4
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f9d3 	bl	800da34 <_printf_common>
 800d68e:	3001      	adds	r0, #1
 800d690:	f040 808a 	bne.w	800d7a8 <_printf_float+0x1b0>
 800d694:	f04f 30ff 	mov.w	r0, #4294967295
 800d698:	b00b      	add	sp, #44	; 0x2c
 800d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	d709      	bvc.n	800d6bc <_printf_float+0xc4>
 800d6a8:	ee10 3a90 	vmov	r3, s1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bfbc      	itt	lt
 800d6b0:	232d      	movlt	r3, #45	; 0x2d
 800d6b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6b6:	487e      	ldr	r0, [pc, #504]	; (800d8b0 <_printf_float+0x2b8>)
 800d6b8:	4b7e      	ldr	r3, [pc, #504]	; (800d8b4 <_printf_float+0x2bc>)
 800d6ba:	e7d5      	b.n	800d668 <_printf_float+0x70>
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6c2:	9104      	str	r1, [sp, #16]
 800d6c4:	1c59      	adds	r1, r3, #1
 800d6c6:	d13c      	bne.n	800d742 <_printf_float+0x14a>
 800d6c8:	2306      	movs	r3, #6
 800d6ca:	6063      	str	r3, [r4, #4]
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	9303      	str	r3, [sp, #12]
 800d6d0:	ab08      	add	r3, sp, #32
 800d6d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6da:	ab07      	add	r3, sp, #28
 800d6dc:	6861      	ldr	r1, [r4, #4]
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	6022      	str	r2, [r4, #0]
 800d6e2:	f10d 031b 	add.w	r3, sp, #27
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f7ff fef6 	bl	800d4d8 <__cvt>
 800d6ec:	9b04      	ldr	r3, [sp, #16]
 800d6ee:	9907      	ldr	r1, [sp, #28]
 800d6f0:	2b47      	cmp	r3, #71	; 0x47
 800d6f2:	4680      	mov	r8, r0
 800d6f4:	d108      	bne.n	800d708 <_printf_float+0x110>
 800d6f6:	1cc8      	adds	r0, r1, #3
 800d6f8:	db02      	blt.n	800d700 <_printf_float+0x108>
 800d6fa:	6863      	ldr	r3, [r4, #4]
 800d6fc:	4299      	cmp	r1, r3
 800d6fe:	dd41      	ble.n	800d784 <_printf_float+0x18c>
 800d700:	f1a9 0902 	sub.w	r9, r9, #2
 800d704:	fa5f f989 	uxtb.w	r9, r9
 800d708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d70c:	d820      	bhi.n	800d750 <_printf_float+0x158>
 800d70e:	3901      	subs	r1, #1
 800d710:	464a      	mov	r2, r9
 800d712:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d716:	9107      	str	r1, [sp, #28]
 800d718:	f7ff ff30 	bl	800d57c <__exponent>
 800d71c:	9a08      	ldr	r2, [sp, #32]
 800d71e:	9004      	str	r0, [sp, #16]
 800d720:	1813      	adds	r3, r2, r0
 800d722:	2a01      	cmp	r2, #1
 800d724:	6123      	str	r3, [r4, #16]
 800d726:	dc02      	bgt.n	800d72e <_printf_float+0x136>
 800d728:	6822      	ldr	r2, [r4, #0]
 800d72a:	07d2      	lsls	r2, r2, #31
 800d72c:	d501      	bpl.n	800d732 <_printf_float+0x13a>
 800d72e:	3301      	adds	r3, #1
 800d730:	6123      	str	r3, [r4, #16]
 800d732:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d0a2      	beq.n	800d680 <_printf_float+0x88>
 800d73a:	232d      	movs	r3, #45	; 0x2d
 800d73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d740:	e79e      	b.n	800d680 <_printf_float+0x88>
 800d742:	9904      	ldr	r1, [sp, #16]
 800d744:	2947      	cmp	r1, #71	; 0x47
 800d746:	d1c1      	bne.n	800d6cc <_printf_float+0xd4>
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1bf      	bne.n	800d6cc <_printf_float+0xd4>
 800d74c:	2301      	movs	r3, #1
 800d74e:	e7bc      	b.n	800d6ca <_printf_float+0xd2>
 800d750:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d754:	d118      	bne.n	800d788 <_printf_float+0x190>
 800d756:	2900      	cmp	r1, #0
 800d758:	6863      	ldr	r3, [r4, #4]
 800d75a:	dd0b      	ble.n	800d774 <_printf_float+0x17c>
 800d75c:	6121      	str	r1, [r4, #16]
 800d75e:	b913      	cbnz	r3, 800d766 <_printf_float+0x16e>
 800d760:	6822      	ldr	r2, [r4, #0]
 800d762:	07d0      	lsls	r0, r2, #31
 800d764:	d502      	bpl.n	800d76c <_printf_float+0x174>
 800d766:	3301      	adds	r3, #1
 800d768:	440b      	add	r3, r1
 800d76a:	6123      	str	r3, [r4, #16]
 800d76c:	2300      	movs	r3, #0
 800d76e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d770:	9304      	str	r3, [sp, #16]
 800d772:	e7de      	b.n	800d732 <_printf_float+0x13a>
 800d774:	b913      	cbnz	r3, 800d77c <_printf_float+0x184>
 800d776:	6822      	ldr	r2, [r4, #0]
 800d778:	07d2      	lsls	r2, r2, #31
 800d77a:	d501      	bpl.n	800d780 <_printf_float+0x188>
 800d77c:	3302      	adds	r3, #2
 800d77e:	e7f4      	b.n	800d76a <_printf_float+0x172>
 800d780:	2301      	movs	r3, #1
 800d782:	e7f2      	b.n	800d76a <_printf_float+0x172>
 800d784:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d788:	9b08      	ldr	r3, [sp, #32]
 800d78a:	4299      	cmp	r1, r3
 800d78c:	db05      	blt.n	800d79a <_printf_float+0x1a2>
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	6121      	str	r1, [r4, #16]
 800d792:	07d8      	lsls	r0, r3, #31
 800d794:	d5ea      	bpl.n	800d76c <_printf_float+0x174>
 800d796:	1c4b      	adds	r3, r1, #1
 800d798:	e7e7      	b.n	800d76a <_printf_float+0x172>
 800d79a:	2900      	cmp	r1, #0
 800d79c:	bfd4      	ite	le
 800d79e:	f1c1 0202 	rsble	r2, r1, #2
 800d7a2:	2201      	movgt	r2, #1
 800d7a4:	4413      	add	r3, r2
 800d7a6:	e7e0      	b.n	800d76a <_printf_float+0x172>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	055a      	lsls	r2, r3, #21
 800d7ac:	d407      	bmi.n	800d7be <_printf_float+0x1c6>
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	4642      	mov	r2, r8
 800d7b2:	4631      	mov	r1, r6
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	47b8      	blx	r7
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	d12a      	bne.n	800d812 <_printf_float+0x21a>
 800d7bc:	e76a      	b.n	800d694 <_printf_float+0x9c>
 800d7be:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7c2:	f240 80e2 	bls.w	800d98a <_printf_float+0x392>
 800d7c6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d7ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d2:	d133      	bne.n	800d83c <_printf_float+0x244>
 800d7d4:	4a38      	ldr	r2, [pc, #224]	; (800d8b8 <_printf_float+0x2c0>)
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b8      	blx	r7
 800d7de:	3001      	adds	r0, #1
 800d7e0:	f43f af58 	beq.w	800d694 <_printf_float+0x9c>
 800d7e4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	db02      	blt.n	800d7f2 <_printf_float+0x1fa>
 800d7ec:	6823      	ldr	r3, [r4, #0]
 800d7ee:	07d8      	lsls	r0, r3, #31
 800d7f0:	d50f      	bpl.n	800d812 <_printf_float+0x21a>
 800d7f2:	4653      	mov	r3, sl
 800d7f4:	465a      	mov	r2, fp
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	47b8      	blx	r7
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	f43f af49 	beq.w	800d694 <_printf_float+0x9c>
 800d802:	f04f 0800 	mov.w	r8, #0
 800d806:	f104 091a 	add.w	r9, r4, #26
 800d80a:	9b08      	ldr	r3, [sp, #32]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	4543      	cmp	r3, r8
 800d810:	dc09      	bgt.n	800d826 <_printf_float+0x22e>
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	079b      	lsls	r3, r3, #30
 800d816:	f100 8108 	bmi.w	800da2a <_printf_float+0x432>
 800d81a:	68e0      	ldr	r0, [r4, #12]
 800d81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81e:	4298      	cmp	r0, r3
 800d820:	bfb8      	it	lt
 800d822:	4618      	movlt	r0, r3
 800d824:	e738      	b.n	800d698 <_printf_float+0xa0>
 800d826:	2301      	movs	r3, #1
 800d828:	464a      	mov	r2, r9
 800d82a:	4631      	mov	r1, r6
 800d82c:	4628      	mov	r0, r5
 800d82e:	47b8      	blx	r7
 800d830:	3001      	adds	r0, #1
 800d832:	f43f af2f 	beq.w	800d694 <_printf_float+0x9c>
 800d836:	f108 0801 	add.w	r8, r8, #1
 800d83a:	e7e6      	b.n	800d80a <_printf_float+0x212>
 800d83c:	9b07      	ldr	r3, [sp, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dc3c      	bgt.n	800d8bc <_printf_float+0x2c4>
 800d842:	4a1d      	ldr	r2, [pc, #116]	; (800d8b8 <_printf_float+0x2c0>)
 800d844:	2301      	movs	r3, #1
 800d846:	4631      	mov	r1, r6
 800d848:	4628      	mov	r0, r5
 800d84a:	47b8      	blx	r7
 800d84c:	3001      	adds	r0, #1
 800d84e:	f43f af21 	beq.w	800d694 <_printf_float+0x9c>
 800d852:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d856:	4313      	orrs	r3, r2
 800d858:	d102      	bne.n	800d860 <_printf_float+0x268>
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	07d9      	lsls	r1, r3, #31
 800d85e:	d5d8      	bpl.n	800d812 <_printf_float+0x21a>
 800d860:	4653      	mov	r3, sl
 800d862:	465a      	mov	r2, fp
 800d864:	4631      	mov	r1, r6
 800d866:	4628      	mov	r0, r5
 800d868:	47b8      	blx	r7
 800d86a:	3001      	adds	r0, #1
 800d86c:	f43f af12 	beq.w	800d694 <_printf_float+0x9c>
 800d870:	f04f 0900 	mov.w	r9, #0
 800d874:	f104 0a1a 	add.w	sl, r4, #26
 800d878:	9b07      	ldr	r3, [sp, #28]
 800d87a:	425b      	negs	r3, r3
 800d87c:	454b      	cmp	r3, r9
 800d87e:	dc01      	bgt.n	800d884 <_printf_float+0x28c>
 800d880:	9b08      	ldr	r3, [sp, #32]
 800d882:	e795      	b.n	800d7b0 <_printf_float+0x1b8>
 800d884:	2301      	movs	r3, #1
 800d886:	4652      	mov	r2, sl
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f af00 	beq.w	800d694 <_printf_float+0x9c>
 800d894:	f109 0901 	add.w	r9, r9, #1
 800d898:	e7ee      	b.n	800d878 <_printf_float+0x280>
 800d89a:	bf00      	nop
 800d89c:	f3af 8000 	nop.w
 800d8a0:	ffffffff 	.word	0xffffffff
 800d8a4:	7fefffff 	.word	0x7fefffff
 800d8a8:	08010ad8 	.word	0x08010ad8
 800d8ac:	08010adc 	.word	0x08010adc
 800d8b0:	08010ae4 	.word	0x08010ae4
 800d8b4:	08010ae0 	.word	0x08010ae0
 800d8b8:	08010ae8 	.word	0x08010ae8
 800d8bc:	9a08      	ldr	r2, [sp, #32]
 800d8be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	bfa8      	it	ge
 800d8c4:	461a      	movge	r2, r3
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	4691      	mov	r9, r2
 800d8ca:	dc38      	bgt.n	800d93e <_printf_float+0x346>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9305      	str	r3, [sp, #20]
 800d8d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8d4:	f104 021a 	add.w	r2, r4, #26
 800d8d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8da:	9905      	ldr	r1, [sp, #20]
 800d8dc:	9304      	str	r3, [sp, #16]
 800d8de:	eba3 0309 	sub.w	r3, r3, r9
 800d8e2:	428b      	cmp	r3, r1
 800d8e4:	dc33      	bgt.n	800d94e <_printf_float+0x356>
 800d8e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	db3c      	blt.n	800d968 <_printf_float+0x370>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	07da      	lsls	r2, r3, #31
 800d8f2:	d439      	bmi.n	800d968 <_printf_float+0x370>
 800d8f4:	9b08      	ldr	r3, [sp, #32]
 800d8f6:	9a04      	ldr	r2, [sp, #16]
 800d8f8:	9907      	ldr	r1, [sp, #28]
 800d8fa:	1a9a      	subs	r2, r3, r2
 800d8fc:	eba3 0901 	sub.w	r9, r3, r1
 800d900:	4591      	cmp	r9, r2
 800d902:	bfa8      	it	ge
 800d904:	4691      	movge	r9, r2
 800d906:	f1b9 0f00 	cmp.w	r9, #0
 800d90a:	dc35      	bgt.n	800d978 <_printf_float+0x380>
 800d90c:	f04f 0800 	mov.w	r8, #0
 800d910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d914:	f104 0a1a 	add.w	sl, r4, #26
 800d918:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d91c:	1a9b      	subs	r3, r3, r2
 800d91e:	eba3 0309 	sub.w	r3, r3, r9
 800d922:	4543      	cmp	r3, r8
 800d924:	f77f af75 	ble.w	800d812 <_printf_float+0x21a>
 800d928:	2301      	movs	r3, #1
 800d92a:	4652      	mov	r2, sl
 800d92c:	4631      	mov	r1, r6
 800d92e:	4628      	mov	r0, r5
 800d930:	47b8      	blx	r7
 800d932:	3001      	adds	r0, #1
 800d934:	f43f aeae 	beq.w	800d694 <_printf_float+0x9c>
 800d938:	f108 0801 	add.w	r8, r8, #1
 800d93c:	e7ec      	b.n	800d918 <_printf_float+0x320>
 800d93e:	4613      	mov	r3, r2
 800d940:	4631      	mov	r1, r6
 800d942:	4642      	mov	r2, r8
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	d1bf      	bne.n	800d8cc <_printf_float+0x2d4>
 800d94c:	e6a2      	b.n	800d694 <_printf_float+0x9c>
 800d94e:	2301      	movs	r3, #1
 800d950:	4631      	mov	r1, r6
 800d952:	4628      	mov	r0, r5
 800d954:	9204      	str	r2, [sp, #16]
 800d956:	47b8      	blx	r7
 800d958:	3001      	adds	r0, #1
 800d95a:	f43f ae9b 	beq.w	800d694 <_printf_float+0x9c>
 800d95e:	9b05      	ldr	r3, [sp, #20]
 800d960:	9a04      	ldr	r2, [sp, #16]
 800d962:	3301      	adds	r3, #1
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	e7b7      	b.n	800d8d8 <_printf_float+0x2e0>
 800d968:	4653      	mov	r3, sl
 800d96a:	465a      	mov	r2, fp
 800d96c:	4631      	mov	r1, r6
 800d96e:	4628      	mov	r0, r5
 800d970:	47b8      	blx	r7
 800d972:	3001      	adds	r0, #1
 800d974:	d1be      	bne.n	800d8f4 <_printf_float+0x2fc>
 800d976:	e68d      	b.n	800d694 <_printf_float+0x9c>
 800d978:	9a04      	ldr	r2, [sp, #16]
 800d97a:	464b      	mov	r3, r9
 800d97c:	4442      	add	r2, r8
 800d97e:	4631      	mov	r1, r6
 800d980:	4628      	mov	r0, r5
 800d982:	47b8      	blx	r7
 800d984:	3001      	adds	r0, #1
 800d986:	d1c1      	bne.n	800d90c <_printf_float+0x314>
 800d988:	e684      	b.n	800d694 <_printf_float+0x9c>
 800d98a:	9a08      	ldr	r2, [sp, #32]
 800d98c:	2a01      	cmp	r2, #1
 800d98e:	dc01      	bgt.n	800d994 <_printf_float+0x39c>
 800d990:	07db      	lsls	r3, r3, #31
 800d992:	d537      	bpl.n	800da04 <_printf_float+0x40c>
 800d994:	2301      	movs	r3, #1
 800d996:	4642      	mov	r2, r8
 800d998:	4631      	mov	r1, r6
 800d99a:	4628      	mov	r0, r5
 800d99c:	47b8      	blx	r7
 800d99e:	3001      	adds	r0, #1
 800d9a0:	f43f ae78 	beq.w	800d694 <_printf_float+0x9c>
 800d9a4:	4653      	mov	r3, sl
 800d9a6:	465a      	mov	r2, fp
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	47b8      	blx	r7
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	f43f ae70 	beq.w	800d694 <_printf_float+0x9c>
 800d9b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d9b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c0:	d01b      	beq.n	800d9fa <_printf_float+0x402>
 800d9c2:	9b08      	ldr	r3, [sp, #32]
 800d9c4:	f108 0201 	add.w	r2, r8, #1
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	47b8      	blx	r7
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d10e      	bne.n	800d9f2 <_printf_float+0x3fa>
 800d9d4:	e65e      	b.n	800d694 <_printf_float+0x9c>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	464a      	mov	r2, r9
 800d9da:	4631      	mov	r1, r6
 800d9dc:	4628      	mov	r0, r5
 800d9de:	47b8      	blx	r7
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	f43f ae57 	beq.w	800d694 <_printf_float+0x9c>
 800d9e6:	f108 0801 	add.w	r8, r8, #1
 800d9ea:	9b08      	ldr	r3, [sp, #32]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	4543      	cmp	r3, r8
 800d9f0:	dcf1      	bgt.n	800d9d6 <_printf_float+0x3de>
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9f8:	e6db      	b.n	800d7b2 <_printf_float+0x1ba>
 800d9fa:	f04f 0800 	mov.w	r8, #0
 800d9fe:	f104 091a 	add.w	r9, r4, #26
 800da02:	e7f2      	b.n	800d9ea <_printf_float+0x3f2>
 800da04:	2301      	movs	r3, #1
 800da06:	4642      	mov	r2, r8
 800da08:	e7df      	b.n	800d9ca <_printf_float+0x3d2>
 800da0a:	2301      	movs	r3, #1
 800da0c:	464a      	mov	r2, r9
 800da0e:	4631      	mov	r1, r6
 800da10:	4628      	mov	r0, r5
 800da12:	47b8      	blx	r7
 800da14:	3001      	adds	r0, #1
 800da16:	f43f ae3d 	beq.w	800d694 <_printf_float+0x9c>
 800da1a:	f108 0801 	add.w	r8, r8, #1
 800da1e:	68e3      	ldr	r3, [r4, #12]
 800da20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da22:	1a5b      	subs	r3, r3, r1
 800da24:	4543      	cmp	r3, r8
 800da26:	dcf0      	bgt.n	800da0a <_printf_float+0x412>
 800da28:	e6f7      	b.n	800d81a <_printf_float+0x222>
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	f104 0919 	add.w	r9, r4, #25
 800da32:	e7f4      	b.n	800da1e <_printf_float+0x426>

0800da34 <_printf_common>:
 800da34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	4616      	mov	r6, r2
 800da3a:	4699      	mov	r9, r3
 800da3c:	688a      	ldr	r2, [r1, #8]
 800da3e:	690b      	ldr	r3, [r1, #16]
 800da40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da44:	4293      	cmp	r3, r2
 800da46:	bfb8      	it	lt
 800da48:	4613      	movlt	r3, r2
 800da4a:	6033      	str	r3, [r6, #0]
 800da4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da50:	4607      	mov	r7, r0
 800da52:	460c      	mov	r4, r1
 800da54:	b10a      	cbz	r2, 800da5a <_printf_common+0x26>
 800da56:	3301      	adds	r3, #1
 800da58:	6033      	str	r3, [r6, #0]
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	0699      	lsls	r1, r3, #26
 800da5e:	bf42      	ittt	mi
 800da60:	6833      	ldrmi	r3, [r6, #0]
 800da62:	3302      	addmi	r3, #2
 800da64:	6033      	strmi	r3, [r6, #0]
 800da66:	6825      	ldr	r5, [r4, #0]
 800da68:	f015 0506 	ands.w	r5, r5, #6
 800da6c:	d106      	bne.n	800da7c <_printf_common+0x48>
 800da6e:	f104 0a19 	add.w	sl, r4, #25
 800da72:	68e3      	ldr	r3, [r4, #12]
 800da74:	6832      	ldr	r2, [r6, #0]
 800da76:	1a9b      	subs	r3, r3, r2
 800da78:	42ab      	cmp	r3, r5
 800da7a:	dc26      	bgt.n	800daca <_printf_common+0x96>
 800da7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da80:	1e13      	subs	r3, r2, #0
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	bf18      	it	ne
 800da86:	2301      	movne	r3, #1
 800da88:	0692      	lsls	r2, r2, #26
 800da8a:	d42b      	bmi.n	800dae4 <_printf_common+0xb0>
 800da8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da90:	4649      	mov	r1, r9
 800da92:	4638      	mov	r0, r7
 800da94:	47c0      	blx	r8
 800da96:	3001      	adds	r0, #1
 800da98:	d01e      	beq.n	800dad8 <_printf_common+0xa4>
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	68e5      	ldr	r5, [r4, #12]
 800da9e:	6832      	ldr	r2, [r6, #0]
 800daa0:	f003 0306 	and.w	r3, r3, #6
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	bf08      	it	eq
 800daa8:	1aad      	subeq	r5, r5, r2
 800daaa:	68a3      	ldr	r3, [r4, #8]
 800daac:	6922      	ldr	r2, [r4, #16]
 800daae:	bf0c      	ite	eq
 800dab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dab4:	2500      	movne	r5, #0
 800dab6:	4293      	cmp	r3, r2
 800dab8:	bfc4      	itt	gt
 800daba:	1a9b      	subgt	r3, r3, r2
 800dabc:	18ed      	addgt	r5, r5, r3
 800dabe:	2600      	movs	r6, #0
 800dac0:	341a      	adds	r4, #26
 800dac2:	42b5      	cmp	r5, r6
 800dac4:	d11a      	bne.n	800dafc <_printf_common+0xc8>
 800dac6:	2000      	movs	r0, #0
 800dac8:	e008      	b.n	800dadc <_printf_common+0xa8>
 800daca:	2301      	movs	r3, #1
 800dacc:	4652      	mov	r2, sl
 800dace:	4649      	mov	r1, r9
 800dad0:	4638      	mov	r0, r7
 800dad2:	47c0      	blx	r8
 800dad4:	3001      	adds	r0, #1
 800dad6:	d103      	bne.n	800dae0 <_printf_common+0xac>
 800dad8:	f04f 30ff 	mov.w	r0, #4294967295
 800dadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae0:	3501      	adds	r5, #1
 800dae2:	e7c6      	b.n	800da72 <_printf_common+0x3e>
 800dae4:	18e1      	adds	r1, r4, r3
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	2030      	movs	r0, #48	; 0x30
 800daea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800daee:	4422      	add	r2, r4
 800daf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800daf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800daf8:	3302      	adds	r3, #2
 800dafa:	e7c7      	b.n	800da8c <_printf_common+0x58>
 800dafc:	2301      	movs	r3, #1
 800dafe:	4622      	mov	r2, r4
 800db00:	4649      	mov	r1, r9
 800db02:	4638      	mov	r0, r7
 800db04:	47c0      	blx	r8
 800db06:	3001      	adds	r0, #1
 800db08:	d0e6      	beq.n	800dad8 <_printf_common+0xa4>
 800db0a:	3601      	adds	r6, #1
 800db0c:	e7d9      	b.n	800dac2 <_printf_common+0x8e>
	...

0800db10 <_printf_i>:
 800db10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db14:	7e0f      	ldrb	r7, [r1, #24]
 800db16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db18:	2f78      	cmp	r7, #120	; 0x78
 800db1a:	4691      	mov	r9, r2
 800db1c:	4680      	mov	r8, r0
 800db1e:	460c      	mov	r4, r1
 800db20:	469a      	mov	sl, r3
 800db22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db26:	d807      	bhi.n	800db38 <_printf_i+0x28>
 800db28:	2f62      	cmp	r7, #98	; 0x62
 800db2a:	d80a      	bhi.n	800db42 <_printf_i+0x32>
 800db2c:	2f00      	cmp	r7, #0
 800db2e:	f000 80d8 	beq.w	800dce2 <_printf_i+0x1d2>
 800db32:	2f58      	cmp	r7, #88	; 0x58
 800db34:	f000 80a3 	beq.w	800dc7e <_printf_i+0x16e>
 800db38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db40:	e03a      	b.n	800dbb8 <_printf_i+0xa8>
 800db42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db46:	2b15      	cmp	r3, #21
 800db48:	d8f6      	bhi.n	800db38 <_printf_i+0x28>
 800db4a:	a101      	add	r1, pc, #4	; (adr r1, 800db50 <_printf_i+0x40>)
 800db4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db50:	0800dba9 	.word	0x0800dba9
 800db54:	0800dbbd 	.word	0x0800dbbd
 800db58:	0800db39 	.word	0x0800db39
 800db5c:	0800db39 	.word	0x0800db39
 800db60:	0800db39 	.word	0x0800db39
 800db64:	0800db39 	.word	0x0800db39
 800db68:	0800dbbd 	.word	0x0800dbbd
 800db6c:	0800db39 	.word	0x0800db39
 800db70:	0800db39 	.word	0x0800db39
 800db74:	0800db39 	.word	0x0800db39
 800db78:	0800db39 	.word	0x0800db39
 800db7c:	0800dcc9 	.word	0x0800dcc9
 800db80:	0800dbed 	.word	0x0800dbed
 800db84:	0800dcab 	.word	0x0800dcab
 800db88:	0800db39 	.word	0x0800db39
 800db8c:	0800db39 	.word	0x0800db39
 800db90:	0800dceb 	.word	0x0800dceb
 800db94:	0800db39 	.word	0x0800db39
 800db98:	0800dbed 	.word	0x0800dbed
 800db9c:	0800db39 	.word	0x0800db39
 800dba0:	0800db39 	.word	0x0800db39
 800dba4:	0800dcb3 	.word	0x0800dcb3
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	1d1a      	adds	r2, r3, #4
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	602a      	str	r2, [r5, #0]
 800dbb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e0a3      	b.n	800dd04 <_printf_i+0x1f4>
 800dbbc:	6820      	ldr	r0, [r4, #0]
 800dbbe:	6829      	ldr	r1, [r5, #0]
 800dbc0:	0606      	lsls	r6, r0, #24
 800dbc2:	f101 0304 	add.w	r3, r1, #4
 800dbc6:	d50a      	bpl.n	800dbde <_printf_i+0xce>
 800dbc8:	680e      	ldr	r6, [r1, #0]
 800dbca:	602b      	str	r3, [r5, #0]
 800dbcc:	2e00      	cmp	r6, #0
 800dbce:	da03      	bge.n	800dbd8 <_printf_i+0xc8>
 800dbd0:	232d      	movs	r3, #45	; 0x2d
 800dbd2:	4276      	negs	r6, r6
 800dbd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbd8:	485e      	ldr	r0, [pc, #376]	; (800dd54 <_printf_i+0x244>)
 800dbda:	230a      	movs	r3, #10
 800dbdc:	e019      	b.n	800dc12 <_printf_i+0x102>
 800dbde:	680e      	ldr	r6, [r1, #0]
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbe6:	bf18      	it	ne
 800dbe8:	b236      	sxthne	r6, r6
 800dbea:	e7ef      	b.n	800dbcc <_printf_i+0xbc>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	6820      	ldr	r0, [r4, #0]
 800dbf0:	1d19      	adds	r1, r3, #4
 800dbf2:	6029      	str	r1, [r5, #0]
 800dbf4:	0601      	lsls	r1, r0, #24
 800dbf6:	d501      	bpl.n	800dbfc <_printf_i+0xec>
 800dbf8:	681e      	ldr	r6, [r3, #0]
 800dbfa:	e002      	b.n	800dc02 <_printf_i+0xf2>
 800dbfc:	0646      	lsls	r6, r0, #25
 800dbfe:	d5fb      	bpl.n	800dbf8 <_printf_i+0xe8>
 800dc00:	881e      	ldrh	r6, [r3, #0]
 800dc02:	4854      	ldr	r0, [pc, #336]	; (800dd54 <_printf_i+0x244>)
 800dc04:	2f6f      	cmp	r7, #111	; 0x6f
 800dc06:	bf0c      	ite	eq
 800dc08:	2308      	moveq	r3, #8
 800dc0a:	230a      	movne	r3, #10
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc12:	6865      	ldr	r5, [r4, #4]
 800dc14:	60a5      	str	r5, [r4, #8]
 800dc16:	2d00      	cmp	r5, #0
 800dc18:	bfa2      	ittt	ge
 800dc1a:	6821      	ldrge	r1, [r4, #0]
 800dc1c:	f021 0104 	bicge.w	r1, r1, #4
 800dc20:	6021      	strge	r1, [r4, #0]
 800dc22:	b90e      	cbnz	r6, 800dc28 <_printf_i+0x118>
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	d04d      	beq.n	800dcc4 <_printf_i+0x1b4>
 800dc28:	4615      	mov	r5, r2
 800dc2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc2e:	fb03 6711 	mls	r7, r3, r1, r6
 800dc32:	5dc7      	ldrb	r7, [r0, r7]
 800dc34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc38:	4637      	mov	r7, r6
 800dc3a:	42bb      	cmp	r3, r7
 800dc3c:	460e      	mov	r6, r1
 800dc3e:	d9f4      	bls.n	800dc2a <_printf_i+0x11a>
 800dc40:	2b08      	cmp	r3, #8
 800dc42:	d10b      	bne.n	800dc5c <_printf_i+0x14c>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	07de      	lsls	r6, r3, #31
 800dc48:	d508      	bpl.n	800dc5c <_printf_i+0x14c>
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	6861      	ldr	r1, [r4, #4]
 800dc4e:	4299      	cmp	r1, r3
 800dc50:	bfde      	ittt	le
 800dc52:	2330      	movle	r3, #48	; 0x30
 800dc54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc5c:	1b52      	subs	r2, r2, r5
 800dc5e:	6122      	str	r2, [r4, #16]
 800dc60:	f8cd a000 	str.w	sl, [sp]
 800dc64:	464b      	mov	r3, r9
 800dc66:	aa03      	add	r2, sp, #12
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	f7ff fee2 	bl	800da34 <_printf_common>
 800dc70:	3001      	adds	r0, #1
 800dc72:	d14c      	bne.n	800dd0e <_printf_i+0x1fe>
 800dc74:	f04f 30ff 	mov.w	r0, #4294967295
 800dc78:	b004      	add	sp, #16
 800dc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7e:	4835      	ldr	r0, [pc, #212]	; (800dd54 <_printf_i+0x244>)
 800dc80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc84:	6829      	ldr	r1, [r5, #0]
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc8c:	6029      	str	r1, [r5, #0]
 800dc8e:	061d      	lsls	r5, r3, #24
 800dc90:	d514      	bpl.n	800dcbc <_printf_i+0x1ac>
 800dc92:	07df      	lsls	r7, r3, #31
 800dc94:	bf44      	itt	mi
 800dc96:	f043 0320 	orrmi.w	r3, r3, #32
 800dc9a:	6023      	strmi	r3, [r4, #0]
 800dc9c:	b91e      	cbnz	r6, 800dca6 <_printf_i+0x196>
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	f023 0320 	bic.w	r3, r3, #32
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	2310      	movs	r3, #16
 800dca8:	e7b0      	b.n	800dc0c <_printf_i+0xfc>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	f043 0320 	orr.w	r3, r3, #32
 800dcb0:	6023      	str	r3, [r4, #0]
 800dcb2:	2378      	movs	r3, #120	; 0x78
 800dcb4:	4828      	ldr	r0, [pc, #160]	; (800dd58 <_printf_i+0x248>)
 800dcb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcba:	e7e3      	b.n	800dc84 <_printf_i+0x174>
 800dcbc:	0659      	lsls	r1, r3, #25
 800dcbe:	bf48      	it	mi
 800dcc0:	b2b6      	uxthmi	r6, r6
 800dcc2:	e7e6      	b.n	800dc92 <_printf_i+0x182>
 800dcc4:	4615      	mov	r5, r2
 800dcc6:	e7bb      	b.n	800dc40 <_printf_i+0x130>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	6826      	ldr	r6, [r4, #0]
 800dccc:	6961      	ldr	r1, [r4, #20]
 800dcce:	1d18      	adds	r0, r3, #4
 800dcd0:	6028      	str	r0, [r5, #0]
 800dcd2:	0635      	lsls	r5, r6, #24
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	d501      	bpl.n	800dcdc <_printf_i+0x1cc>
 800dcd8:	6019      	str	r1, [r3, #0]
 800dcda:	e002      	b.n	800dce2 <_printf_i+0x1d2>
 800dcdc:	0670      	lsls	r0, r6, #25
 800dcde:	d5fb      	bpl.n	800dcd8 <_printf_i+0x1c8>
 800dce0:	8019      	strh	r1, [r3, #0]
 800dce2:	2300      	movs	r3, #0
 800dce4:	6123      	str	r3, [r4, #16]
 800dce6:	4615      	mov	r5, r2
 800dce8:	e7ba      	b.n	800dc60 <_printf_i+0x150>
 800dcea:	682b      	ldr	r3, [r5, #0]
 800dcec:	1d1a      	adds	r2, r3, #4
 800dcee:	602a      	str	r2, [r5, #0]
 800dcf0:	681d      	ldr	r5, [r3, #0]
 800dcf2:	6862      	ldr	r2, [r4, #4]
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f7f2 fafa 	bl	80002f0 <memchr>
 800dcfc:	b108      	cbz	r0, 800dd02 <_printf_i+0x1f2>
 800dcfe:	1b40      	subs	r0, r0, r5
 800dd00:	6060      	str	r0, [r4, #4]
 800dd02:	6863      	ldr	r3, [r4, #4]
 800dd04:	6123      	str	r3, [r4, #16]
 800dd06:	2300      	movs	r3, #0
 800dd08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd0c:	e7a8      	b.n	800dc60 <_printf_i+0x150>
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	462a      	mov	r2, r5
 800dd12:	4649      	mov	r1, r9
 800dd14:	4640      	mov	r0, r8
 800dd16:	47d0      	blx	sl
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d0ab      	beq.n	800dc74 <_printf_i+0x164>
 800dd1c:	6823      	ldr	r3, [r4, #0]
 800dd1e:	079b      	lsls	r3, r3, #30
 800dd20:	d413      	bmi.n	800dd4a <_printf_i+0x23a>
 800dd22:	68e0      	ldr	r0, [r4, #12]
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	4298      	cmp	r0, r3
 800dd28:	bfb8      	it	lt
 800dd2a:	4618      	movlt	r0, r3
 800dd2c:	e7a4      	b.n	800dc78 <_printf_i+0x168>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	4632      	mov	r2, r6
 800dd32:	4649      	mov	r1, r9
 800dd34:	4640      	mov	r0, r8
 800dd36:	47d0      	blx	sl
 800dd38:	3001      	adds	r0, #1
 800dd3a:	d09b      	beq.n	800dc74 <_printf_i+0x164>
 800dd3c:	3501      	adds	r5, #1
 800dd3e:	68e3      	ldr	r3, [r4, #12]
 800dd40:	9903      	ldr	r1, [sp, #12]
 800dd42:	1a5b      	subs	r3, r3, r1
 800dd44:	42ab      	cmp	r3, r5
 800dd46:	dcf2      	bgt.n	800dd2e <_printf_i+0x21e>
 800dd48:	e7eb      	b.n	800dd22 <_printf_i+0x212>
 800dd4a:	2500      	movs	r5, #0
 800dd4c:	f104 0619 	add.w	r6, r4, #25
 800dd50:	e7f5      	b.n	800dd3e <_printf_i+0x22e>
 800dd52:	bf00      	nop
 800dd54:	08010aea 	.word	0x08010aea
 800dd58:	08010afb 	.word	0x08010afb

0800dd5c <sniprintf>:
 800dd5c:	b40c      	push	{r2, r3}
 800dd5e:	b530      	push	{r4, r5, lr}
 800dd60:	4b17      	ldr	r3, [pc, #92]	; (800ddc0 <sniprintf+0x64>)
 800dd62:	1e0c      	subs	r4, r1, #0
 800dd64:	681d      	ldr	r5, [r3, #0]
 800dd66:	b09d      	sub	sp, #116	; 0x74
 800dd68:	da08      	bge.n	800dd7c <sniprintf+0x20>
 800dd6a:	238b      	movs	r3, #139	; 0x8b
 800dd6c:	602b      	str	r3, [r5, #0]
 800dd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd72:	b01d      	add	sp, #116	; 0x74
 800dd74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd78:	b002      	add	sp, #8
 800dd7a:	4770      	bx	lr
 800dd7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dd80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd84:	bf14      	ite	ne
 800dd86:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd8a:	4623      	moveq	r3, r4
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	9307      	str	r3, [sp, #28]
 800dd90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	9006      	str	r0, [sp, #24]
 800dd98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd9e:	ab21      	add	r3, sp, #132	; 0x84
 800dda0:	a902      	add	r1, sp, #8
 800dda2:	4628      	mov	r0, r5
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	f001 fb0b 	bl	800f3c0 <_svfiprintf_r>
 800ddaa:	1c43      	adds	r3, r0, #1
 800ddac:	bfbc      	itt	lt
 800ddae:	238b      	movlt	r3, #139	; 0x8b
 800ddb0:	602b      	strlt	r3, [r5, #0]
 800ddb2:	2c00      	cmp	r4, #0
 800ddb4:	d0dd      	beq.n	800dd72 <sniprintf+0x16>
 800ddb6:	9b02      	ldr	r3, [sp, #8]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e7d9      	b.n	800dd72 <sniprintf+0x16>
 800ddbe:	bf00      	nop
 800ddc0:	24000010 	.word	0x24000010

0800ddc4 <siprintf>:
 800ddc4:	b40e      	push	{r1, r2, r3}
 800ddc6:	b500      	push	{lr}
 800ddc8:	b09c      	sub	sp, #112	; 0x70
 800ddca:	ab1d      	add	r3, sp, #116	; 0x74
 800ddcc:	9002      	str	r0, [sp, #8]
 800ddce:	9006      	str	r0, [sp, #24]
 800ddd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ddd4:	4809      	ldr	r0, [pc, #36]	; (800ddfc <siprintf+0x38>)
 800ddd6:	9107      	str	r1, [sp, #28]
 800ddd8:	9104      	str	r1, [sp, #16]
 800ddda:	4909      	ldr	r1, [pc, #36]	; (800de00 <siprintf+0x3c>)
 800dddc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dde0:	9105      	str	r1, [sp, #20]
 800dde2:	6800      	ldr	r0, [r0, #0]
 800dde4:	9301      	str	r3, [sp, #4]
 800dde6:	a902      	add	r1, sp, #8
 800dde8:	f001 faea 	bl	800f3c0 <_svfiprintf_r>
 800ddec:	9b02      	ldr	r3, [sp, #8]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	b01c      	add	sp, #112	; 0x70
 800ddf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddf8:	b003      	add	sp, #12
 800ddfa:	4770      	bx	lr
 800ddfc:	24000010 	.word	0x24000010
 800de00:	ffff0208 	.word	0xffff0208

0800de04 <quorem>:
 800de04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	6903      	ldr	r3, [r0, #16]
 800de0a:	690c      	ldr	r4, [r1, #16]
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	4607      	mov	r7, r0
 800de10:	f2c0 8081 	blt.w	800df16 <quorem+0x112>
 800de14:	3c01      	subs	r4, #1
 800de16:	f101 0814 	add.w	r8, r1, #20
 800de1a:	f100 0514 	add.w	r5, r0, #20
 800de1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de22:	9301      	str	r3, [sp, #4]
 800de24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de2c:	3301      	adds	r3, #1
 800de2e:	429a      	cmp	r2, r3
 800de30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800de34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de38:	fbb2 f6f3 	udiv	r6, r2, r3
 800de3c:	d331      	bcc.n	800dea2 <quorem+0x9e>
 800de3e:	f04f 0e00 	mov.w	lr, #0
 800de42:	4640      	mov	r0, r8
 800de44:	46ac      	mov	ip, r5
 800de46:	46f2      	mov	sl, lr
 800de48:	f850 2b04 	ldr.w	r2, [r0], #4
 800de4c:	b293      	uxth	r3, r2
 800de4e:	fb06 e303 	mla	r3, r6, r3, lr
 800de52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de56:	b29b      	uxth	r3, r3
 800de58:	ebaa 0303 	sub.w	r3, sl, r3
 800de5c:	f8dc a000 	ldr.w	sl, [ip]
 800de60:	0c12      	lsrs	r2, r2, #16
 800de62:	fa13 f38a 	uxtah	r3, r3, sl
 800de66:	fb06 e202 	mla	r2, r6, r2, lr
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	9b00      	ldr	r3, [sp, #0]
 800de6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de72:	b292      	uxth	r2, r2
 800de74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800de80:	4581      	cmp	r9, r0
 800de82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de86:	f84c 3b04 	str.w	r3, [ip], #4
 800de8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de8e:	d2db      	bcs.n	800de48 <quorem+0x44>
 800de90:	f855 300b 	ldr.w	r3, [r5, fp]
 800de94:	b92b      	cbnz	r3, 800dea2 <quorem+0x9e>
 800de96:	9b01      	ldr	r3, [sp, #4]
 800de98:	3b04      	subs	r3, #4
 800de9a:	429d      	cmp	r5, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	d32e      	bcc.n	800defe <quorem+0xfa>
 800dea0:	613c      	str	r4, [r7, #16]
 800dea2:	4638      	mov	r0, r7
 800dea4:	f001 f838 	bl	800ef18 <__mcmp>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	db24      	blt.n	800def6 <quorem+0xf2>
 800deac:	3601      	adds	r6, #1
 800deae:	4628      	mov	r0, r5
 800deb0:	f04f 0c00 	mov.w	ip, #0
 800deb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800deb8:	f8d0 e000 	ldr.w	lr, [r0]
 800debc:	b293      	uxth	r3, r2
 800debe:	ebac 0303 	sub.w	r3, ip, r3
 800dec2:	0c12      	lsrs	r2, r2, #16
 800dec4:	fa13 f38e 	uxtah	r3, r3, lr
 800dec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800decc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ded6:	45c1      	cmp	r9, r8
 800ded8:	f840 3b04 	str.w	r3, [r0], #4
 800dedc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dee0:	d2e8      	bcs.n	800deb4 <quorem+0xb0>
 800dee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deea:	b922      	cbnz	r2, 800def6 <quorem+0xf2>
 800deec:	3b04      	subs	r3, #4
 800deee:	429d      	cmp	r5, r3
 800def0:	461a      	mov	r2, r3
 800def2:	d30a      	bcc.n	800df0a <quorem+0x106>
 800def4:	613c      	str	r4, [r7, #16]
 800def6:	4630      	mov	r0, r6
 800def8:	b003      	add	sp, #12
 800defa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defe:	6812      	ldr	r2, [r2, #0]
 800df00:	3b04      	subs	r3, #4
 800df02:	2a00      	cmp	r2, #0
 800df04:	d1cc      	bne.n	800dea0 <quorem+0x9c>
 800df06:	3c01      	subs	r4, #1
 800df08:	e7c7      	b.n	800de9a <quorem+0x96>
 800df0a:	6812      	ldr	r2, [r2, #0]
 800df0c:	3b04      	subs	r3, #4
 800df0e:	2a00      	cmp	r2, #0
 800df10:	d1f0      	bne.n	800def4 <quorem+0xf0>
 800df12:	3c01      	subs	r4, #1
 800df14:	e7eb      	b.n	800deee <quorem+0xea>
 800df16:	2000      	movs	r0, #0
 800df18:	e7ee      	b.n	800def8 <quorem+0xf4>
 800df1a:	0000      	movs	r0, r0
 800df1c:	0000      	movs	r0, r0
	...

0800df20 <_dtoa_r>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	ed2d 8b02 	vpush	{d8}
 800df28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df2a:	b091      	sub	sp, #68	; 0x44
 800df2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df30:	ec59 8b10 	vmov	r8, r9, d0
 800df34:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800df36:	9106      	str	r1, [sp, #24]
 800df38:	4606      	mov	r6, r0
 800df3a:	9208      	str	r2, [sp, #32]
 800df3c:	930c      	str	r3, [sp, #48]	; 0x30
 800df3e:	b975      	cbnz	r5, 800df5e <_dtoa_r+0x3e>
 800df40:	2010      	movs	r0, #16
 800df42:	f000 fd5f 	bl	800ea04 <malloc>
 800df46:	4602      	mov	r2, r0
 800df48:	6270      	str	r0, [r6, #36]	; 0x24
 800df4a:	b920      	cbnz	r0, 800df56 <_dtoa_r+0x36>
 800df4c:	4baa      	ldr	r3, [pc, #680]	; (800e1f8 <_dtoa_r+0x2d8>)
 800df4e:	21ea      	movs	r1, #234	; 0xea
 800df50:	48aa      	ldr	r0, [pc, #680]	; (800e1fc <_dtoa_r+0x2dc>)
 800df52:	f001 fb45 	bl	800f5e0 <__assert_func>
 800df56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df5a:	6005      	str	r5, [r0, #0]
 800df5c:	60c5      	str	r5, [r0, #12]
 800df5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df60:	6819      	ldr	r1, [r3, #0]
 800df62:	b151      	cbz	r1, 800df7a <_dtoa_r+0x5a>
 800df64:	685a      	ldr	r2, [r3, #4]
 800df66:	604a      	str	r2, [r1, #4]
 800df68:	2301      	movs	r3, #1
 800df6a:	4093      	lsls	r3, r2
 800df6c:	608b      	str	r3, [r1, #8]
 800df6e:	4630      	mov	r0, r6
 800df70:	f000 fd90 	bl	800ea94 <_Bfree>
 800df74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df76:	2200      	movs	r2, #0
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	f1b9 0300 	subs.w	r3, r9, #0
 800df7e:	bfbb      	ittet	lt
 800df80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df84:	9303      	strlt	r3, [sp, #12]
 800df86:	2300      	movge	r3, #0
 800df88:	2201      	movlt	r2, #1
 800df8a:	bfac      	ite	ge
 800df8c:	6023      	strge	r3, [r4, #0]
 800df8e:	6022      	strlt	r2, [r4, #0]
 800df90:	4b9b      	ldr	r3, [pc, #620]	; (800e200 <_dtoa_r+0x2e0>)
 800df92:	9c03      	ldr	r4, [sp, #12]
 800df94:	43a3      	bics	r3, r4
 800df96:	d11c      	bne.n	800dfd2 <_dtoa_r+0xb2>
 800df98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df9a:	f242 730f 	movw	r3, #9999	; 0x270f
 800df9e:	6013      	str	r3, [r2, #0]
 800dfa0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dfa4:	ea53 0308 	orrs.w	r3, r3, r8
 800dfa8:	f000 84fd 	beq.w	800e9a6 <_dtoa_r+0xa86>
 800dfac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dfae:	b963      	cbnz	r3, 800dfca <_dtoa_r+0xaa>
 800dfb0:	4b94      	ldr	r3, [pc, #592]	; (800e204 <_dtoa_r+0x2e4>)
 800dfb2:	e01f      	b.n	800dff4 <_dtoa_r+0xd4>
 800dfb4:	4b94      	ldr	r3, [pc, #592]	; (800e208 <_dtoa_r+0x2e8>)
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	3308      	adds	r3, #8
 800dfba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	9801      	ldr	r0, [sp, #4]
 800dfc0:	b011      	add	sp, #68	; 0x44
 800dfc2:	ecbd 8b02 	vpop	{d8}
 800dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfca:	4b8e      	ldr	r3, [pc, #568]	; (800e204 <_dtoa_r+0x2e4>)
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	3303      	adds	r3, #3
 800dfd0:	e7f3      	b.n	800dfba <_dtoa_r+0x9a>
 800dfd2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800dfd6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfde:	d10b      	bne.n	800dff8 <_dtoa_r+0xd8>
 800dfe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f000 84d9 	beq.w	800e9a0 <_dtoa_r+0xa80>
 800dfee:	4887      	ldr	r0, [pc, #540]	; (800e20c <_dtoa_r+0x2ec>)
 800dff0:	6018      	str	r0, [r3, #0]
 800dff2:	1e43      	subs	r3, r0, #1
 800dff4:	9301      	str	r3, [sp, #4]
 800dff6:	e7e2      	b.n	800dfbe <_dtoa_r+0x9e>
 800dff8:	a90f      	add	r1, sp, #60	; 0x3c
 800dffa:	aa0e      	add	r2, sp, #56	; 0x38
 800dffc:	4630      	mov	r0, r6
 800dffe:	eeb0 0b48 	vmov.f64	d0, d8
 800e002:	f001 f82f 	bl	800f064 <__d2b>
 800e006:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e00a:	4605      	mov	r5, r0
 800e00c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e00e:	2900      	cmp	r1, #0
 800e010:	d046      	beq.n	800e0a0 <_dtoa_r+0x180>
 800e012:	ee18 4a90 	vmov	r4, s17
 800e016:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e01a:	ec53 2b18 	vmov	r2, r3, d8
 800e01e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e022:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e026:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e02a:	2400      	movs	r4, #0
 800e02c:	ec43 2b16 	vmov	d6, r2, r3
 800e030:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e034:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e1e0 <_dtoa_r+0x2c0>
 800e038:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e03c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800e1e8 <_dtoa_r+0x2c8>
 800e040:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e044:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e1f0 <_dtoa_r+0x2d0>
 800e048:	ee07 1a90 	vmov	s15, r1
 800e04c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e050:	eeb0 7b46 	vmov.f64	d7, d6
 800e054:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e058:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e05c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e064:	ee16 ba90 	vmov	fp, s13
 800e068:	940a      	str	r4, [sp, #40]	; 0x28
 800e06a:	d508      	bpl.n	800e07e <_dtoa_r+0x15e>
 800e06c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e070:	eeb4 6b47 	vcmp.f64	d6, d7
 800e074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e078:	bf18      	it	ne
 800e07a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e07e:	f1bb 0f16 	cmp.w	fp, #22
 800e082:	d82f      	bhi.n	800e0e4 <_dtoa_r+0x1c4>
 800e084:	4b62      	ldr	r3, [pc, #392]	; (800e210 <_dtoa_r+0x2f0>)
 800e086:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e08a:	ed93 7b00 	vldr	d7, [r3]
 800e08e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e096:	d501      	bpl.n	800e09c <_dtoa_r+0x17c>
 800e098:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e09c:	2300      	movs	r3, #0
 800e09e:	e022      	b.n	800e0e6 <_dtoa_r+0x1c6>
 800e0a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0a2:	4401      	add	r1, r0
 800e0a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	bfc1      	itttt	gt
 800e0ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0b0:	fa04 f303 	lslgt.w	r3, r4, r3
 800e0b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e0b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e0bc:	bfd6      	itet	le
 800e0be:	f1c3 0320 	rsble	r3, r3, #32
 800e0c2:	ea43 0808 	orrgt.w	r8, r3, r8
 800e0c6:	fa08 f803 	lslle.w	r8, r8, r3
 800e0ca:	ee07 8a90 	vmov	s15, r8
 800e0ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e0d2:	3901      	subs	r1, #1
 800e0d4:	ee17 4a90 	vmov	r4, s15
 800e0d8:	ec53 2b17 	vmov	r2, r3, d7
 800e0dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e0e0:	2401      	movs	r4, #1
 800e0e2:	e7a3      	b.n	800e02c <_dtoa_r+0x10c>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0e8:	1a43      	subs	r3, r0, r1
 800e0ea:	1e5a      	subs	r2, r3, #1
 800e0ec:	bf45      	ittet	mi
 800e0ee:	f1c3 0301 	rsbmi	r3, r3, #1
 800e0f2:	9304      	strmi	r3, [sp, #16]
 800e0f4:	2300      	movpl	r3, #0
 800e0f6:	2300      	movmi	r3, #0
 800e0f8:	9205      	str	r2, [sp, #20]
 800e0fa:	bf54      	ite	pl
 800e0fc:	9304      	strpl	r3, [sp, #16]
 800e0fe:	9305      	strmi	r3, [sp, #20]
 800e100:	f1bb 0f00 	cmp.w	fp, #0
 800e104:	db18      	blt.n	800e138 <_dtoa_r+0x218>
 800e106:	9b05      	ldr	r3, [sp, #20]
 800e108:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800e10c:	445b      	add	r3, fp
 800e10e:	9305      	str	r3, [sp, #20]
 800e110:	2300      	movs	r3, #0
 800e112:	9a06      	ldr	r2, [sp, #24]
 800e114:	2a09      	cmp	r2, #9
 800e116:	d849      	bhi.n	800e1ac <_dtoa_r+0x28c>
 800e118:	2a05      	cmp	r2, #5
 800e11a:	bfc4      	itt	gt
 800e11c:	3a04      	subgt	r2, #4
 800e11e:	9206      	strgt	r2, [sp, #24]
 800e120:	9a06      	ldr	r2, [sp, #24]
 800e122:	f1a2 0202 	sub.w	r2, r2, #2
 800e126:	bfcc      	ite	gt
 800e128:	2400      	movgt	r4, #0
 800e12a:	2401      	movle	r4, #1
 800e12c:	2a03      	cmp	r2, #3
 800e12e:	d848      	bhi.n	800e1c2 <_dtoa_r+0x2a2>
 800e130:	e8df f002 	tbb	[pc, r2]
 800e134:	3a2c2e0b 	.word	0x3a2c2e0b
 800e138:	9b04      	ldr	r3, [sp, #16]
 800e13a:	2200      	movs	r2, #0
 800e13c:	eba3 030b 	sub.w	r3, r3, fp
 800e140:	9304      	str	r3, [sp, #16]
 800e142:	9209      	str	r2, [sp, #36]	; 0x24
 800e144:	f1cb 0300 	rsb	r3, fp, #0
 800e148:	e7e3      	b.n	800e112 <_dtoa_r+0x1f2>
 800e14a:	2200      	movs	r2, #0
 800e14c:	9207      	str	r2, [sp, #28]
 800e14e:	9a08      	ldr	r2, [sp, #32]
 800e150:	2a00      	cmp	r2, #0
 800e152:	dc39      	bgt.n	800e1c8 <_dtoa_r+0x2a8>
 800e154:	f04f 0a01 	mov.w	sl, #1
 800e158:	46d1      	mov	r9, sl
 800e15a:	4652      	mov	r2, sl
 800e15c:	f8cd a020 	str.w	sl, [sp, #32]
 800e160:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e162:	2100      	movs	r1, #0
 800e164:	6079      	str	r1, [r7, #4]
 800e166:	2004      	movs	r0, #4
 800e168:	f100 0c14 	add.w	ip, r0, #20
 800e16c:	4594      	cmp	ip, r2
 800e16e:	6879      	ldr	r1, [r7, #4]
 800e170:	d92f      	bls.n	800e1d2 <_dtoa_r+0x2b2>
 800e172:	4630      	mov	r0, r6
 800e174:	930d      	str	r3, [sp, #52]	; 0x34
 800e176:	f000 fc4d 	bl	800ea14 <_Balloc>
 800e17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e17c:	9001      	str	r0, [sp, #4]
 800e17e:	4602      	mov	r2, r0
 800e180:	2800      	cmp	r0, #0
 800e182:	d149      	bne.n	800e218 <_dtoa_r+0x2f8>
 800e184:	4b23      	ldr	r3, [pc, #140]	; (800e214 <_dtoa_r+0x2f4>)
 800e186:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e18a:	e6e1      	b.n	800df50 <_dtoa_r+0x30>
 800e18c:	2201      	movs	r2, #1
 800e18e:	e7dd      	b.n	800e14c <_dtoa_r+0x22c>
 800e190:	2200      	movs	r2, #0
 800e192:	9207      	str	r2, [sp, #28]
 800e194:	9a08      	ldr	r2, [sp, #32]
 800e196:	eb0b 0a02 	add.w	sl, fp, r2
 800e19a:	f10a 0901 	add.w	r9, sl, #1
 800e19e:	464a      	mov	r2, r9
 800e1a0:	2a01      	cmp	r2, #1
 800e1a2:	bfb8      	it	lt
 800e1a4:	2201      	movlt	r2, #1
 800e1a6:	e7db      	b.n	800e160 <_dtoa_r+0x240>
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	e7f2      	b.n	800e192 <_dtoa_r+0x272>
 800e1ac:	2401      	movs	r4, #1
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800e1b4:	f04f 3aff 	mov.w	sl, #4294967295
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	46d1      	mov	r9, sl
 800e1bc:	2212      	movs	r2, #18
 800e1be:	9108      	str	r1, [sp, #32]
 800e1c0:	e7ce      	b.n	800e160 <_dtoa_r+0x240>
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	9207      	str	r2, [sp, #28]
 800e1c6:	e7f5      	b.n	800e1b4 <_dtoa_r+0x294>
 800e1c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e1cc:	46d1      	mov	r9, sl
 800e1ce:	4652      	mov	r2, sl
 800e1d0:	e7c6      	b.n	800e160 <_dtoa_r+0x240>
 800e1d2:	3101      	adds	r1, #1
 800e1d4:	6079      	str	r1, [r7, #4]
 800e1d6:	0040      	lsls	r0, r0, #1
 800e1d8:	e7c6      	b.n	800e168 <_dtoa_r+0x248>
 800e1da:	bf00      	nop
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	636f4361 	.word	0x636f4361
 800e1e4:	3fd287a7 	.word	0x3fd287a7
 800e1e8:	8b60c8b3 	.word	0x8b60c8b3
 800e1ec:	3fc68a28 	.word	0x3fc68a28
 800e1f0:	509f79fb 	.word	0x509f79fb
 800e1f4:	3fd34413 	.word	0x3fd34413
 800e1f8:	08010b19 	.word	0x08010b19
 800e1fc:	08010b30 	.word	0x08010b30
 800e200:	7ff00000 	.word	0x7ff00000
 800e204:	08010b15 	.word	0x08010b15
 800e208:	08010b0c 	.word	0x08010b0c
 800e20c:	08010ae9 	.word	0x08010ae9
 800e210:	08010c20 	.word	0x08010c20
 800e214:	08010b8b 	.word	0x08010b8b
 800e218:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e21a:	9901      	ldr	r1, [sp, #4]
 800e21c:	6011      	str	r1, [r2, #0]
 800e21e:	f1b9 0f0e 	cmp.w	r9, #14
 800e222:	d86c      	bhi.n	800e2fe <_dtoa_r+0x3de>
 800e224:	2c00      	cmp	r4, #0
 800e226:	d06a      	beq.n	800e2fe <_dtoa_r+0x3de>
 800e228:	f1bb 0f00 	cmp.w	fp, #0
 800e22c:	f340 80a0 	ble.w	800e370 <_dtoa_r+0x450>
 800e230:	49c1      	ldr	r1, [pc, #772]	; (800e538 <_dtoa_r+0x618>)
 800e232:	f00b 020f 	and.w	r2, fp, #15
 800e236:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e23a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e23e:	ed92 7b00 	vldr	d7, [r2]
 800e242:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e246:	f000 8087 	beq.w	800e358 <_dtoa_r+0x438>
 800e24a:	4abc      	ldr	r2, [pc, #752]	; (800e53c <_dtoa_r+0x61c>)
 800e24c:	ed92 6b08 	vldr	d6, [r2, #32]
 800e250:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e254:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e258:	f001 010f 	and.w	r1, r1, #15
 800e25c:	2203      	movs	r2, #3
 800e25e:	48b7      	ldr	r0, [pc, #732]	; (800e53c <_dtoa_r+0x61c>)
 800e260:	2900      	cmp	r1, #0
 800e262:	d17b      	bne.n	800e35c <_dtoa_r+0x43c>
 800e264:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e268:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e26c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e272:	2900      	cmp	r1, #0
 800e274:	f000 80a2 	beq.w	800e3bc <_dtoa_r+0x49c>
 800e278:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e27c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e280:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e288:	f140 8098 	bpl.w	800e3bc <_dtoa_r+0x49c>
 800e28c:	f1b9 0f00 	cmp.w	r9, #0
 800e290:	f000 8094 	beq.w	800e3bc <_dtoa_r+0x49c>
 800e294:	f1ba 0f00 	cmp.w	sl, #0
 800e298:	dd2f      	ble.n	800e2fa <_dtoa_r+0x3da>
 800e29a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e29e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e2a6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	4650      	mov	r0, sl
 800e2ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e2b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e2b6:	ee07 2a90 	vmov	s15, r2
 800e2ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e2be:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e2c2:	ee15 4a90 	vmov	r4, s11
 800e2c6:	ec52 1b15 	vmov	r1, r2, d5
 800e2ca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d177      	bne.n	800e3c2 <_dtoa_r+0x4a2>
 800e2d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e2d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e2da:	ec42 1b17 	vmov	d7, r1, r2
 800e2de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e6:	f300 8263 	bgt.w	800e7b0 <_dtoa_r+0x890>
 800e2ea:	eeb1 7b47 	vneg.f64	d7, d7
 800e2ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f6:	f100 8258 	bmi.w	800e7aa <_dtoa_r+0x88a>
 800e2fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e2fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e300:	2a00      	cmp	r2, #0
 800e302:	f2c0 811d 	blt.w	800e540 <_dtoa_r+0x620>
 800e306:	f1bb 0f0e 	cmp.w	fp, #14
 800e30a:	f300 8119 	bgt.w	800e540 <_dtoa_r+0x620>
 800e30e:	4b8a      	ldr	r3, [pc, #552]	; (800e538 <_dtoa_r+0x618>)
 800e310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e314:	ed93 6b00 	vldr	d6, [r3]
 800e318:	9b08      	ldr	r3, [sp, #32]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f280 80b7 	bge.w	800e48e <_dtoa_r+0x56e>
 800e320:	f1b9 0f00 	cmp.w	r9, #0
 800e324:	f300 80b3 	bgt.w	800e48e <_dtoa_r+0x56e>
 800e328:	f040 823f 	bne.w	800e7aa <_dtoa_r+0x88a>
 800e32c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e330:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e334:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e338:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	464c      	mov	r4, r9
 800e342:	464f      	mov	r7, r9
 800e344:	f280 8215 	bge.w	800e772 <_dtoa_r+0x852>
 800e348:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e34c:	2331      	movs	r3, #49	; 0x31
 800e34e:	f808 3b01 	strb.w	r3, [r8], #1
 800e352:	f10b 0b01 	add.w	fp, fp, #1
 800e356:	e211      	b.n	800e77c <_dtoa_r+0x85c>
 800e358:	2202      	movs	r2, #2
 800e35a:	e780      	b.n	800e25e <_dtoa_r+0x33e>
 800e35c:	07cc      	lsls	r4, r1, #31
 800e35e:	d504      	bpl.n	800e36a <_dtoa_r+0x44a>
 800e360:	ed90 6b00 	vldr	d6, [r0]
 800e364:	3201      	adds	r2, #1
 800e366:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e36a:	1049      	asrs	r1, r1, #1
 800e36c:	3008      	adds	r0, #8
 800e36e:	e777      	b.n	800e260 <_dtoa_r+0x340>
 800e370:	d022      	beq.n	800e3b8 <_dtoa_r+0x498>
 800e372:	f1cb 0100 	rsb	r1, fp, #0
 800e376:	4a70      	ldr	r2, [pc, #448]	; (800e538 <_dtoa_r+0x618>)
 800e378:	f001 000f 	and.w	r0, r1, #15
 800e37c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e380:	ed92 7b00 	vldr	d7, [r2]
 800e384:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e388:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e38c:	486b      	ldr	r0, [pc, #428]	; (800e53c <_dtoa_r+0x61c>)
 800e38e:	1109      	asrs	r1, r1, #4
 800e390:	2400      	movs	r4, #0
 800e392:	2202      	movs	r2, #2
 800e394:	b929      	cbnz	r1, 800e3a2 <_dtoa_r+0x482>
 800e396:	2c00      	cmp	r4, #0
 800e398:	f43f af6a 	beq.w	800e270 <_dtoa_r+0x350>
 800e39c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3a0:	e766      	b.n	800e270 <_dtoa_r+0x350>
 800e3a2:	07cf      	lsls	r7, r1, #31
 800e3a4:	d505      	bpl.n	800e3b2 <_dtoa_r+0x492>
 800e3a6:	ed90 6b00 	vldr	d6, [r0]
 800e3aa:	3201      	adds	r2, #1
 800e3ac:	2401      	movs	r4, #1
 800e3ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e3b2:	1049      	asrs	r1, r1, #1
 800e3b4:	3008      	adds	r0, #8
 800e3b6:	e7ed      	b.n	800e394 <_dtoa_r+0x474>
 800e3b8:	2202      	movs	r2, #2
 800e3ba:	e759      	b.n	800e270 <_dtoa_r+0x350>
 800e3bc:	465f      	mov	r7, fp
 800e3be:	4648      	mov	r0, r9
 800e3c0:	e775      	b.n	800e2ae <_dtoa_r+0x38e>
 800e3c2:	ec42 1b17 	vmov	d7, r1, r2
 800e3c6:	4a5c      	ldr	r2, [pc, #368]	; (800e538 <_dtoa_r+0x618>)
 800e3c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e3cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e3d0:	9a01      	ldr	r2, [sp, #4]
 800e3d2:	1814      	adds	r4, r2, r0
 800e3d4:	9a07      	ldr	r2, [sp, #28]
 800e3d6:	b352      	cbz	r2, 800e42e <_dtoa_r+0x50e>
 800e3d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e3dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e3e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e3e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e3e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e3ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e3f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e3f4:	ee14 2a90 	vmov	r2, s9
 800e3f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e3fc:	3230      	adds	r2, #48	; 0x30
 800e3fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e402:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40a:	f808 2b01 	strb.w	r2, [r8], #1
 800e40e:	d439      	bmi.n	800e484 <_dtoa_r+0x564>
 800e410:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e414:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41c:	d472      	bmi.n	800e504 <_dtoa_r+0x5e4>
 800e41e:	45a0      	cmp	r8, r4
 800e420:	f43f af6b 	beq.w	800e2fa <_dtoa_r+0x3da>
 800e424:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e428:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e42c:	e7e0      	b.n	800e3f0 <_dtoa_r+0x4d0>
 800e42e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e432:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e436:	4621      	mov	r1, r4
 800e438:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e43c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e440:	ee14 2a90 	vmov	r2, s9
 800e444:	3230      	adds	r2, #48	; 0x30
 800e446:	f808 2b01 	strb.w	r2, [r8], #1
 800e44a:	45a0      	cmp	r8, r4
 800e44c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e450:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e454:	d118      	bne.n	800e488 <_dtoa_r+0x568>
 800e456:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e45a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e45e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e466:	dc4d      	bgt.n	800e504 <_dtoa_r+0x5e4>
 800e468:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e46c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e474:	f57f af41 	bpl.w	800e2fa <_dtoa_r+0x3da>
 800e478:	4688      	mov	r8, r1
 800e47a:	3901      	subs	r1, #1
 800e47c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e480:	2b30      	cmp	r3, #48	; 0x30
 800e482:	d0f9      	beq.n	800e478 <_dtoa_r+0x558>
 800e484:	46bb      	mov	fp, r7
 800e486:	e02a      	b.n	800e4de <_dtoa_r+0x5be>
 800e488:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e48c:	e7d6      	b.n	800e43c <_dtoa_r+0x51c>
 800e48e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e492:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e496:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e49a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e49e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e4a2:	ee15 3a10 	vmov	r3, s10
 800e4a6:	3330      	adds	r3, #48	; 0x30
 800e4a8:	f808 3b01 	strb.w	r3, [r8], #1
 800e4ac:	9b01      	ldr	r3, [sp, #4]
 800e4ae:	eba8 0303 	sub.w	r3, r8, r3
 800e4b2:	4599      	cmp	r9, r3
 800e4b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e4b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e4bc:	d133      	bne.n	800e526 <_dtoa_r+0x606>
 800e4be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e4c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ca:	dc1a      	bgt.n	800e502 <_dtoa_r+0x5e2>
 800e4cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800e4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d4:	d103      	bne.n	800e4de <_dtoa_r+0x5be>
 800e4d6:	ee15 3a10 	vmov	r3, s10
 800e4da:	07d9      	lsls	r1, r3, #31
 800e4dc:	d411      	bmi.n	800e502 <_dtoa_r+0x5e2>
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f000 fad7 	bl	800ea94 <_Bfree>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4ea:	f888 3000 	strb.w	r3, [r8]
 800e4ee:	f10b 0301 	add.w	r3, fp, #1
 800e4f2:	6013      	str	r3, [r2, #0]
 800e4f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f43f ad61 	beq.w	800dfbe <_dtoa_r+0x9e>
 800e4fc:	f8c3 8000 	str.w	r8, [r3]
 800e500:	e55d      	b.n	800dfbe <_dtoa_r+0x9e>
 800e502:	465f      	mov	r7, fp
 800e504:	4643      	mov	r3, r8
 800e506:	4698      	mov	r8, r3
 800e508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e50c:	2a39      	cmp	r2, #57	; 0x39
 800e50e:	d106      	bne.n	800e51e <_dtoa_r+0x5fe>
 800e510:	9a01      	ldr	r2, [sp, #4]
 800e512:	429a      	cmp	r2, r3
 800e514:	d1f7      	bne.n	800e506 <_dtoa_r+0x5e6>
 800e516:	9901      	ldr	r1, [sp, #4]
 800e518:	2230      	movs	r2, #48	; 0x30
 800e51a:	3701      	adds	r7, #1
 800e51c:	700a      	strb	r2, [r1, #0]
 800e51e:	781a      	ldrb	r2, [r3, #0]
 800e520:	3201      	adds	r2, #1
 800e522:	701a      	strb	r2, [r3, #0]
 800e524:	e7ae      	b.n	800e484 <_dtoa_r+0x564>
 800e526:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e52a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e532:	d1b2      	bne.n	800e49a <_dtoa_r+0x57a>
 800e534:	e7d3      	b.n	800e4de <_dtoa_r+0x5be>
 800e536:	bf00      	nop
 800e538:	08010c20 	.word	0x08010c20
 800e53c:	08010bf8 	.word	0x08010bf8
 800e540:	9907      	ldr	r1, [sp, #28]
 800e542:	2900      	cmp	r1, #0
 800e544:	f000 80d0 	beq.w	800e6e8 <_dtoa_r+0x7c8>
 800e548:	9906      	ldr	r1, [sp, #24]
 800e54a:	2901      	cmp	r1, #1
 800e54c:	f300 80b4 	bgt.w	800e6b8 <_dtoa_r+0x798>
 800e550:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e552:	2900      	cmp	r1, #0
 800e554:	f000 80ac 	beq.w	800e6b0 <_dtoa_r+0x790>
 800e558:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e55c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e560:	461c      	mov	r4, r3
 800e562:	930a      	str	r3, [sp, #40]	; 0x28
 800e564:	9b04      	ldr	r3, [sp, #16]
 800e566:	4413      	add	r3, r2
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	9b05      	ldr	r3, [sp, #20]
 800e56c:	2101      	movs	r1, #1
 800e56e:	4413      	add	r3, r2
 800e570:	4630      	mov	r0, r6
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	f000 fb46 	bl	800ec04 <__i2b>
 800e578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e57a:	4607      	mov	r7, r0
 800e57c:	f1b8 0f00 	cmp.w	r8, #0
 800e580:	dd0d      	ble.n	800e59e <_dtoa_r+0x67e>
 800e582:	9a05      	ldr	r2, [sp, #20]
 800e584:	2a00      	cmp	r2, #0
 800e586:	dd0a      	ble.n	800e59e <_dtoa_r+0x67e>
 800e588:	4542      	cmp	r2, r8
 800e58a:	9904      	ldr	r1, [sp, #16]
 800e58c:	bfa8      	it	ge
 800e58e:	4642      	movge	r2, r8
 800e590:	1a89      	subs	r1, r1, r2
 800e592:	9104      	str	r1, [sp, #16]
 800e594:	9905      	ldr	r1, [sp, #20]
 800e596:	eba8 0802 	sub.w	r8, r8, r2
 800e59a:	1a8a      	subs	r2, r1, r2
 800e59c:	9205      	str	r2, [sp, #20]
 800e59e:	b303      	cbz	r3, 800e5e2 <_dtoa_r+0x6c2>
 800e5a0:	9a07      	ldr	r2, [sp, #28]
 800e5a2:	2a00      	cmp	r2, #0
 800e5a4:	f000 80a5 	beq.w	800e6f2 <_dtoa_r+0x7d2>
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	dd13      	ble.n	800e5d4 <_dtoa_r+0x6b4>
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e5b4:	f000 fbe6 	bl	800ed84 <__pow5mult>
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	4607      	mov	r7, r0
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f000 fb36 	bl	800ec30 <__multiply>
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	900a      	str	r0, [sp, #40]	; 0x28
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f000 fa63 	bl	800ea94 <_Bfree>
 800e5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5d2:	4615      	mov	r5, r2
 800e5d4:	1b1a      	subs	r2, r3, r4
 800e5d6:	d004      	beq.n	800e5e2 <_dtoa_r+0x6c2>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f000 fbd2 	bl	800ed84 <__pow5mult>
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f000 fb0d 	bl	800ec04 <__i2b>
 800e5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	f340 8081 	ble.w	800e6f6 <_dtoa_r+0x7d6>
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f000 fbc3 	bl	800ed84 <__pow5mult>
 800e5fe:	9b06      	ldr	r3, [sp, #24]
 800e600:	2b01      	cmp	r3, #1
 800e602:	4604      	mov	r4, r0
 800e604:	dd7a      	ble.n	800e6fc <_dtoa_r+0x7dc>
 800e606:	2300      	movs	r3, #0
 800e608:	930a      	str	r3, [sp, #40]	; 0x28
 800e60a:	6922      	ldr	r2, [r4, #16]
 800e60c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e610:	6910      	ldr	r0, [r2, #16]
 800e612:	f000 faa7 	bl	800eb64 <__hi0bits>
 800e616:	f1c0 0020 	rsb	r0, r0, #32
 800e61a:	9b05      	ldr	r3, [sp, #20]
 800e61c:	4418      	add	r0, r3
 800e61e:	f010 001f 	ands.w	r0, r0, #31
 800e622:	f000 808c 	beq.w	800e73e <_dtoa_r+0x81e>
 800e626:	f1c0 0220 	rsb	r2, r0, #32
 800e62a:	2a04      	cmp	r2, #4
 800e62c:	f340 8085 	ble.w	800e73a <_dtoa_r+0x81a>
 800e630:	f1c0 001c 	rsb	r0, r0, #28
 800e634:	9b04      	ldr	r3, [sp, #16]
 800e636:	4403      	add	r3, r0
 800e638:	9304      	str	r3, [sp, #16]
 800e63a:	9b05      	ldr	r3, [sp, #20]
 800e63c:	4403      	add	r3, r0
 800e63e:	4480      	add	r8, r0
 800e640:	9305      	str	r3, [sp, #20]
 800e642:	9b04      	ldr	r3, [sp, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	dd05      	ble.n	800e654 <_dtoa_r+0x734>
 800e648:	4629      	mov	r1, r5
 800e64a:	461a      	mov	r2, r3
 800e64c:	4630      	mov	r0, r6
 800e64e:	f000 fbf3 	bl	800ee38 <__lshift>
 800e652:	4605      	mov	r5, r0
 800e654:	9b05      	ldr	r3, [sp, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	dd05      	ble.n	800e666 <_dtoa_r+0x746>
 800e65a:	4621      	mov	r1, r4
 800e65c:	461a      	mov	r2, r3
 800e65e:	4630      	mov	r0, r6
 800e660:	f000 fbea 	bl	800ee38 <__lshift>
 800e664:	4604      	mov	r4, r0
 800e666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d06a      	beq.n	800e742 <_dtoa_r+0x822>
 800e66c:	4621      	mov	r1, r4
 800e66e:	4628      	mov	r0, r5
 800e670:	f000 fc52 	bl	800ef18 <__mcmp>
 800e674:	2800      	cmp	r0, #0
 800e676:	da64      	bge.n	800e742 <_dtoa_r+0x822>
 800e678:	2300      	movs	r3, #0
 800e67a:	4629      	mov	r1, r5
 800e67c:	220a      	movs	r2, #10
 800e67e:	4630      	mov	r0, r6
 800e680:	f000 fa2a 	bl	800ead8 <__multadd>
 800e684:	9b07      	ldr	r3, [sp, #28]
 800e686:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e68a:	4605      	mov	r5, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 8191 	beq.w	800e9b4 <_dtoa_r+0xa94>
 800e692:	4639      	mov	r1, r7
 800e694:	2300      	movs	r3, #0
 800e696:	220a      	movs	r2, #10
 800e698:	4630      	mov	r0, r6
 800e69a:	f000 fa1d 	bl	800ead8 <__multadd>
 800e69e:	f1ba 0f00 	cmp.w	sl, #0
 800e6a2:	4607      	mov	r7, r0
 800e6a4:	f300 808d 	bgt.w	800e7c2 <_dtoa_r+0x8a2>
 800e6a8:	9b06      	ldr	r3, [sp, #24]
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	dc50      	bgt.n	800e750 <_dtoa_r+0x830>
 800e6ae:	e088      	b.n	800e7c2 <_dtoa_r+0x8a2>
 800e6b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e6b6:	e751      	b.n	800e55c <_dtoa_r+0x63c>
 800e6b8:	f109 34ff 	add.w	r4, r9, #4294967295
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	bfbf      	itttt	lt
 800e6c0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800e6c2:	1ae3      	sublt	r3, r4, r3
 800e6c4:	18d2      	addlt	r2, r2, r3
 800e6c6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800e6c8:	bfb6      	itet	lt
 800e6ca:	4623      	movlt	r3, r4
 800e6cc:	1b1c      	subge	r4, r3, r4
 800e6ce:	2400      	movlt	r4, #0
 800e6d0:	f1b9 0f00 	cmp.w	r9, #0
 800e6d4:	bfb5      	itete	lt
 800e6d6:	9a04      	ldrlt	r2, [sp, #16]
 800e6d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e6dc:	eba2 0809 	sublt.w	r8, r2, r9
 800e6e0:	464a      	movge	r2, r9
 800e6e2:	bfb8      	it	lt
 800e6e4:	2200      	movlt	r2, #0
 800e6e6:	e73c      	b.n	800e562 <_dtoa_r+0x642>
 800e6e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e6ec:	9f07      	ldr	r7, [sp, #28]
 800e6ee:	461c      	mov	r4, r3
 800e6f0:	e744      	b.n	800e57c <_dtoa_r+0x65c>
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	e770      	b.n	800e5d8 <_dtoa_r+0x6b8>
 800e6f6:	9b06      	ldr	r3, [sp, #24]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	dc18      	bgt.n	800e72e <_dtoa_r+0x80e>
 800e6fc:	9b02      	ldr	r3, [sp, #8]
 800e6fe:	b9b3      	cbnz	r3, 800e72e <_dtoa_r+0x80e>
 800e700:	9b03      	ldr	r3, [sp, #12]
 800e702:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e706:	b9a2      	cbnz	r2, 800e732 <_dtoa_r+0x812>
 800e708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e70c:	0d12      	lsrs	r2, r2, #20
 800e70e:	0512      	lsls	r2, r2, #20
 800e710:	b18a      	cbz	r2, 800e736 <_dtoa_r+0x816>
 800e712:	9b04      	ldr	r3, [sp, #16]
 800e714:	3301      	adds	r3, #1
 800e716:	9304      	str	r3, [sp, #16]
 800e718:	9b05      	ldr	r3, [sp, #20]
 800e71a:	3301      	adds	r3, #1
 800e71c:	9305      	str	r3, [sp, #20]
 800e71e:	2301      	movs	r3, #1
 800e720:	930a      	str	r3, [sp, #40]	; 0x28
 800e722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e724:	2b00      	cmp	r3, #0
 800e726:	f47f af70 	bne.w	800e60a <_dtoa_r+0x6ea>
 800e72a:	2001      	movs	r0, #1
 800e72c:	e775      	b.n	800e61a <_dtoa_r+0x6fa>
 800e72e:	2300      	movs	r3, #0
 800e730:	e7f6      	b.n	800e720 <_dtoa_r+0x800>
 800e732:	9b02      	ldr	r3, [sp, #8]
 800e734:	e7f4      	b.n	800e720 <_dtoa_r+0x800>
 800e736:	920a      	str	r2, [sp, #40]	; 0x28
 800e738:	e7f3      	b.n	800e722 <_dtoa_r+0x802>
 800e73a:	d082      	beq.n	800e642 <_dtoa_r+0x722>
 800e73c:	4610      	mov	r0, r2
 800e73e:	301c      	adds	r0, #28
 800e740:	e778      	b.n	800e634 <_dtoa_r+0x714>
 800e742:	f1b9 0f00 	cmp.w	r9, #0
 800e746:	dc37      	bgt.n	800e7b8 <_dtoa_r+0x898>
 800e748:	9b06      	ldr	r3, [sp, #24]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	dd34      	ble.n	800e7b8 <_dtoa_r+0x898>
 800e74e:	46ca      	mov	sl, r9
 800e750:	f1ba 0f00 	cmp.w	sl, #0
 800e754:	d10d      	bne.n	800e772 <_dtoa_r+0x852>
 800e756:	4621      	mov	r1, r4
 800e758:	4653      	mov	r3, sl
 800e75a:	2205      	movs	r2, #5
 800e75c:	4630      	mov	r0, r6
 800e75e:	f000 f9bb 	bl	800ead8 <__multadd>
 800e762:	4601      	mov	r1, r0
 800e764:	4604      	mov	r4, r0
 800e766:	4628      	mov	r0, r5
 800e768:	f000 fbd6 	bl	800ef18 <__mcmp>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	f73f adeb 	bgt.w	800e348 <_dtoa_r+0x428>
 800e772:	9b08      	ldr	r3, [sp, #32]
 800e774:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e778:	ea6f 0b03 	mvn.w	fp, r3
 800e77c:	f04f 0900 	mov.w	r9, #0
 800e780:	4621      	mov	r1, r4
 800e782:	4630      	mov	r0, r6
 800e784:	f000 f986 	bl	800ea94 <_Bfree>
 800e788:	2f00      	cmp	r7, #0
 800e78a:	f43f aea8 	beq.w	800e4de <_dtoa_r+0x5be>
 800e78e:	f1b9 0f00 	cmp.w	r9, #0
 800e792:	d005      	beq.n	800e7a0 <_dtoa_r+0x880>
 800e794:	45b9      	cmp	r9, r7
 800e796:	d003      	beq.n	800e7a0 <_dtoa_r+0x880>
 800e798:	4649      	mov	r1, r9
 800e79a:	4630      	mov	r0, r6
 800e79c:	f000 f97a 	bl	800ea94 <_Bfree>
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	f000 f976 	bl	800ea94 <_Bfree>
 800e7a8:	e699      	b.n	800e4de <_dtoa_r+0x5be>
 800e7aa:	2400      	movs	r4, #0
 800e7ac:	4627      	mov	r7, r4
 800e7ae:	e7e0      	b.n	800e772 <_dtoa_r+0x852>
 800e7b0:	46bb      	mov	fp, r7
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	4607      	mov	r7, r0
 800e7b6:	e5c7      	b.n	800e348 <_dtoa_r+0x428>
 800e7b8:	9b07      	ldr	r3, [sp, #28]
 800e7ba:	46ca      	mov	sl, r9
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 8100 	beq.w	800e9c2 <_dtoa_r+0xaa2>
 800e7c2:	f1b8 0f00 	cmp.w	r8, #0
 800e7c6:	dd05      	ble.n	800e7d4 <_dtoa_r+0x8b4>
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	4642      	mov	r2, r8
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f000 fb33 	bl	800ee38 <__lshift>
 800e7d2:	4607      	mov	r7, r0
 800e7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d05d      	beq.n	800e896 <_dtoa_r+0x976>
 800e7da:	6879      	ldr	r1, [r7, #4]
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f000 f919 	bl	800ea14 <_Balloc>
 800e7e2:	4680      	mov	r8, r0
 800e7e4:	b928      	cbnz	r0, 800e7f2 <_dtoa_r+0x8d2>
 800e7e6:	4b82      	ldr	r3, [pc, #520]	; (800e9f0 <_dtoa_r+0xad0>)
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e7ee:	f7ff bbaf 	b.w	800df50 <_dtoa_r+0x30>
 800e7f2:	693a      	ldr	r2, [r7, #16]
 800e7f4:	3202      	adds	r2, #2
 800e7f6:	0092      	lsls	r2, r2, #2
 800e7f8:	f107 010c 	add.w	r1, r7, #12
 800e7fc:	300c      	adds	r0, #12
 800e7fe:	f7fe fe55 	bl	800d4ac <memcpy>
 800e802:	2201      	movs	r2, #1
 800e804:	4641      	mov	r1, r8
 800e806:	4630      	mov	r0, r6
 800e808:	f000 fb16 	bl	800ee38 <__lshift>
 800e80c:	9b01      	ldr	r3, [sp, #4]
 800e80e:	3301      	adds	r3, #1
 800e810:	9304      	str	r3, [sp, #16]
 800e812:	9b01      	ldr	r3, [sp, #4]
 800e814:	4453      	add	r3, sl
 800e816:	9308      	str	r3, [sp, #32]
 800e818:	9b02      	ldr	r3, [sp, #8]
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	46b9      	mov	r9, r7
 800e820:	9307      	str	r3, [sp, #28]
 800e822:	4607      	mov	r7, r0
 800e824:	9b04      	ldr	r3, [sp, #16]
 800e826:	4621      	mov	r1, r4
 800e828:	3b01      	subs	r3, #1
 800e82a:	4628      	mov	r0, r5
 800e82c:	9302      	str	r3, [sp, #8]
 800e82e:	f7ff fae9 	bl	800de04 <quorem>
 800e832:	4603      	mov	r3, r0
 800e834:	3330      	adds	r3, #48	; 0x30
 800e836:	9005      	str	r0, [sp, #20]
 800e838:	4649      	mov	r1, r9
 800e83a:	4628      	mov	r0, r5
 800e83c:	9309      	str	r3, [sp, #36]	; 0x24
 800e83e:	f000 fb6b 	bl	800ef18 <__mcmp>
 800e842:	463a      	mov	r2, r7
 800e844:	4682      	mov	sl, r0
 800e846:	4621      	mov	r1, r4
 800e848:	4630      	mov	r0, r6
 800e84a:	f000 fb81 	bl	800ef50 <__mdiff>
 800e84e:	68c2      	ldr	r2, [r0, #12]
 800e850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e852:	4680      	mov	r8, r0
 800e854:	bb0a      	cbnz	r2, 800e89a <_dtoa_r+0x97a>
 800e856:	4601      	mov	r1, r0
 800e858:	4628      	mov	r0, r5
 800e85a:	f000 fb5d 	bl	800ef18 <__mcmp>
 800e85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e860:	4602      	mov	r2, r0
 800e862:	4641      	mov	r1, r8
 800e864:	4630      	mov	r0, r6
 800e866:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e86a:	f000 f913 	bl	800ea94 <_Bfree>
 800e86e:	9b06      	ldr	r3, [sp, #24]
 800e870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e872:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e876:	ea43 0102 	orr.w	r1, r3, r2
 800e87a:	9b07      	ldr	r3, [sp, #28]
 800e87c:	430b      	orrs	r3, r1
 800e87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e880:	d10d      	bne.n	800e89e <_dtoa_r+0x97e>
 800e882:	2b39      	cmp	r3, #57	; 0x39
 800e884:	d029      	beq.n	800e8da <_dtoa_r+0x9ba>
 800e886:	f1ba 0f00 	cmp.w	sl, #0
 800e88a:	dd01      	ble.n	800e890 <_dtoa_r+0x970>
 800e88c:	9b05      	ldr	r3, [sp, #20]
 800e88e:	3331      	adds	r3, #49	; 0x31
 800e890:	9a02      	ldr	r2, [sp, #8]
 800e892:	7013      	strb	r3, [r2, #0]
 800e894:	e774      	b.n	800e780 <_dtoa_r+0x860>
 800e896:	4638      	mov	r0, r7
 800e898:	e7b8      	b.n	800e80c <_dtoa_r+0x8ec>
 800e89a:	2201      	movs	r2, #1
 800e89c:	e7e1      	b.n	800e862 <_dtoa_r+0x942>
 800e89e:	f1ba 0f00 	cmp.w	sl, #0
 800e8a2:	db06      	blt.n	800e8b2 <_dtoa_r+0x992>
 800e8a4:	9906      	ldr	r1, [sp, #24]
 800e8a6:	ea41 0a0a 	orr.w	sl, r1, sl
 800e8aa:	9907      	ldr	r1, [sp, #28]
 800e8ac:	ea5a 0101 	orrs.w	r1, sl, r1
 800e8b0:	d120      	bne.n	800e8f4 <_dtoa_r+0x9d4>
 800e8b2:	2a00      	cmp	r2, #0
 800e8b4:	ddec      	ble.n	800e890 <_dtoa_r+0x970>
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	9304      	str	r3, [sp, #16]
 800e8be:	f000 fabb 	bl	800ee38 <__lshift>
 800e8c2:	4621      	mov	r1, r4
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	f000 fb27 	bl	800ef18 <__mcmp>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	9b04      	ldr	r3, [sp, #16]
 800e8ce:	dc02      	bgt.n	800e8d6 <_dtoa_r+0x9b6>
 800e8d0:	d1de      	bne.n	800e890 <_dtoa_r+0x970>
 800e8d2:	07da      	lsls	r2, r3, #31
 800e8d4:	d5dc      	bpl.n	800e890 <_dtoa_r+0x970>
 800e8d6:	2b39      	cmp	r3, #57	; 0x39
 800e8d8:	d1d8      	bne.n	800e88c <_dtoa_r+0x96c>
 800e8da:	9a02      	ldr	r2, [sp, #8]
 800e8dc:	2339      	movs	r3, #57	; 0x39
 800e8de:	7013      	strb	r3, [r2, #0]
 800e8e0:	4643      	mov	r3, r8
 800e8e2:	4698      	mov	r8, r3
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e8ea:	2a39      	cmp	r2, #57	; 0x39
 800e8ec:	d051      	beq.n	800e992 <_dtoa_r+0xa72>
 800e8ee:	3201      	adds	r2, #1
 800e8f0:	701a      	strb	r2, [r3, #0]
 800e8f2:	e745      	b.n	800e780 <_dtoa_r+0x860>
 800e8f4:	2a00      	cmp	r2, #0
 800e8f6:	dd03      	ble.n	800e900 <_dtoa_r+0x9e0>
 800e8f8:	2b39      	cmp	r3, #57	; 0x39
 800e8fa:	d0ee      	beq.n	800e8da <_dtoa_r+0x9ba>
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	e7c7      	b.n	800e890 <_dtoa_r+0x970>
 800e900:	9a04      	ldr	r2, [sp, #16]
 800e902:	9908      	ldr	r1, [sp, #32]
 800e904:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e908:	428a      	cmp	r2, r1
 800e90a:	d02b      	beq.n	800e964 <_dtoa_r+0xa44>
 800e90c:	4629      	mov	r1, r5
 800e90e:	2300      	movs	r3, #0
 800e910:	220a      	movs	r2, #10
 800e912:	4630      	mov	r0, r6
 800e914:	f000 f8e0 	bl	800ead8 <__multadd>
 800e918:	45b9      	cmp	r9, r7
 800e91a:	4605      	mov	r5, r0
 800e91c:	f04f 0300 	mov.w	r3, #0
 800e920:	f04f 020a 	mov.w	r2, #10
 800e924:	4649      	mov	r1, r9
 800e926:	4630      	mov	r0, r6
 800e928:	d107      	bne.n	800e93a <_dtoa_r+0xa1a>
 800e92a:	f000 f8d5 	bl	800ead8 <__multadd>
 800e92e:	4681      	mov	r9, r0
 800e930:	4607      	mov	r7, r0
 800e932:	9b04      	ldr	r3, [sp, #16]
 800e934:	3301      	adds	r3, #1
 800e936:	9304      	str	r3, [sp, #16]
 800e938:	e774      	b.n	800e824 <_dtoa_r+0x904>
 800e93a:	f000 f8cd 	bl	800ead8 <__multadd>
 800e93e:	4639      	mov	r1, r7
 800e940:	4681      	mov	r9, r0
 800e942:	2300      	movs	r3, #0
 800e944:	220a      	movs	r2, #10
 800e946:	4630      	mov	r0, r6
 800e948:	f000 f8c6 	bl	800ead8 <__multadd>
 800e94c:	4607      	mov	r7, r0
 800e94e:	e7f0      	b.n	800e932 <_dtoa_r+0xa12>
 800e950:	f1ba 0f00 	cmp.w	sl, #0
 800e954:	9a01      	ldr	r2, [sp, #4]
 800e956:	bfcc      	ite	gt
 800e958:	46d0      	movgt	r8, sl
 800e95a:	f04f 0801 	movle.w	r8, #1
 800e95e:	4490      	add	r8, r2
 800e960:	f04f 0900 	mov.w	r9, #0
 800e964:	4629      	mov	r1, r5
 800e966:	2201      	movs	r2, #1
 800e968:	4630      	mov	r0, r6
 800e96a:	9302      	str	r3, [sp, #8]
 800e96c:	f000 fa64 	bl	800ee38 <__lshift>
 800e970:	4621      	mov	r1, r4
 800e972:	4605      	mov	r5, r0
 800e974:	f000 fad0 	bl	800ef18 <__mcmp>
 800e978:	2800      	cmp	r0, #0
 800e97a:	dcb1      	bgt.n	800e8e0 <_dtoa_r+0x9c0>
 800e97c:	d102      	bne.n	800e984 <_dtoa_r+0xa64>
 800e97e:	9b02      	ldr	r3, [sp, #8]
 800e980:	07db      	lsls	r3, r3, #31
 800e982:	d4ad      	bmi.n	800e8e0 <_dtoa_r+0x9c0>
 800e984:	4643      	mov	r3, r8
 800e986:	4698      	mov	r8, r3
 800e988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e98c:	2a30      	cmp	r2, #48	; 0x30
 800e98e:	d0fa      	beq.n	800e986 <_dtoa_r+0xa66>
 800e990:	e6f6      	b.n	800e780 <_dtoa_r+0x860>
 800e992:	9a01      	ldr	r2, [sp, #4]
 800e994:	429a      	cmp	r2, r3
 800e996:	d1a4      	bne.n	800e8e2 <_dtoa_r+0x9c2>
 800e998:	f10b 0b01 	add.w	fp, fp, #1
 800e99c:	2331      	movs	r3, #49	; 0x31
 800e99e:	e778      	b.n	800e892 <_dtoa_r+0x972>
 800e9a0:	4b14      	ldr	r3, [pc, #80]	; (800e9f4 <_dtoa_r+0xad4>)
 800e9a2:	f7ff bb27 	b.w	800dff4 <_dtoa_r+0xd4>
 800e9a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f47f ab03 	bne.w	800dfb4 <_dtoa_r+0x94>
 800e9ae:	4b12      	ldr	r3, [pc, #72]	; (800e9f8 <_dtoa_r+0xad8>)
 800e9b0:	f7ff bb20 	b.w	800dff4 <_dtoa_r+0xd4>
 800e9b4:	f1ba 0f00 	cmp.w	sl, #0
 800e9b8:	dc03      	bgt.n	800e9c2 <_dtoa_r+0xaa2>
 800e9ba:	9b06      	ldr	r3, [sp, #24]
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	f73f aec7 	bgt.w	800e750 <_dtoa_r+0x830>
 800e9c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	f7ff fa1b 	bl	800de04 <quorem>
 800e9ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e9d2:	f808 3b01 	strb.w	r3, [r8], #1
 800e9d6:	9a01      	ldr	r2, [sp, #4]
 800e9d8:	eba8 0202 	sub.w	r2, r8, r2
 800e9dc:	4592      	cmp	sl, r2
 800e9de:	ddb7      	ble.n	800e950 <_dtoa_r+0xa30>
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	220a      	movs	r2, #10
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f000 f876 	bl	800ead8 <__multadd>
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	e7ea      	b.n	800e9c6 <_dtoa_r+0xaa6>
 800e9f0:	08010b8b 	.word	0x08010b8b
 800e9f4:	08010ae8 	.word	0x08010ae8
 800e9f8:	08010b0c 	.word	0x08010b0c

0800e9fc <_localeconv_r>:
 800e9fc:	4800      	ldr	r0, [pc, #0]	; (800ea00 <_localeconv_r+0x4>)
 800e9fe:	4770      	bx	lr
 800ea00:	24000164 	.word	0x24000164

0800ea04 <malloc>:
 800ea04:	4b02      	ldr	r3, [pc, #8]	; (800ea10 <malloc+0xc>)
 800ea06:	4601      	mov	r1, r0
 800ea08:	6818      	ldr	r0, [r3, #0]
 800ea0a:	f000 bc09 	b.w	800f220 <_malloc_r>
 800ea0e:	bf00      	nop
 800ea10:	24000010 	.word	0x24000010

0800ea14 <_Balloc>:
 800ea14:	b570      	push	{r4, r5, r6, lr}
 800ea16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea18:	4604      	mov	r4, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	b976      	cbnz	r6, 800ea3c <_Balloc+0x28>
 800ea1e:	2010      	movs	r0, #16
 800ea20:	f7ff fff0 	bl	800ea04 <malloc>
 800ea24:	4602      	mov	r2, r0
 800ea26:	6260      	str	r0, [r4, #36]	; 0x24
 800ea28:	b920      	cbnz	r0, 800ea34 <_Balloc+0x20>
 800ea2a:	4b18      	ldr	r3, [pc, #96]	; (800ea8c <_Balloc+0x78>)
 800ea2c:	4818      	ldr	r0, [pc, #96]	; (800ea90 <_Balloc+0x7c>)
 800ea2e:	2166      	movs	r1, #102	; 0x66
 800ea30:	f000 fdd6 	bl	800f5e0 <__assert_func>
 800ea34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea38:	6006      	str	r6, [r0, #0]
 800ea3a:	60c6      	str	r6, [r0, #12]
 800ea3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea3e:	68f3      	ldr	r3, [r6, #12]
 800ea40:	b183      	cbz	r3, 800ea64 <_Balloc+0x50>
 800ea42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea4a:	b9b8      	cbnz	r0, 800ea7c <_Balloc+0x68>
 800ea4c:	2101      	movs	r1, #1
 800ea4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ea52:	1d72      	adds	r2, r6, #5
 800ea54:	0092      	lsls	r2, r2, #2
 800ea56:	4620      	mov	r0, r4
 800ea58:	f000 fb60 	bl	800f11c <_calloc_r>
 800ea5c:	b160      	cbz	r0, 800ea78 <_Balloc+0x64>
 800ea5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea62:	e00e      	b.n	800ea82 <_Balloc+0x6e>
 800ea64:	2221      	movs	r2, #33	; 0x21
 800ea66:	2104      	movs	r1, #4
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f000 fb57 	bl	800f11c <_calloc_r>
 800ea6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea70:	60f0      	str	r0, [r6, #12]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1e4      	bne.n	800ea42 <_Balloc+0x2e>
 800ea78:	2000      	movs	r0, #0
 800ea7a:	bd70      	pop	{r4, r5, r6, pc}
 800ea7c:	6802      	ldr	r2, [r0, #0]
 800ea7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea82:	2300      	movs	r3, #0
 800ea84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea88:	e7f7      	b.n	800ea7a <_Balloc+0x66>
 800ea8a:	bf00      	nop
 800ea8c:	08010b19 	.word	0x08010b19
 800ea90:	08010b9c 	.word	0x08010b9c

0800ea94 <_Bfree>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea98:	4605      	mov	r5, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	b976      	cbnz	r6, 800eabc <_Bfree+0x28>
 800ea9e:	2010      	movs	r0, #16
 800eaa0:	f7ff ffb0 	bl	800ea04 <malloc>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	6268      	str	r0, [r5, #36]	; 0x24
 800eaa8:	b920      	cbnz	r0, 800eab4 <_Bfree+0x20>
 800eaaa:	4b09      	ldr	r3, [pc, #36]	; (800ead0 <_Bfree+0x3c>)
 800eaac:	4809      	ldr	r0, [pc, #36]	; (800ead4 <_Bfree+0x40>)
 800eaae:	218a      	movs	r1, #138	; 0x8a
 800eab0:	f000 fd96 	bl	800f5e0 <__assert_func>
 800eab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eab8:	6006      	str	r6, [r0, #0]
 800eaba:	60c6      	str	r6, [r0, #12]
 800eabc:	b13c      	cbz	r4, 800eace <_Bfree+0x3a>
 800eabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eac0:	6862      	ldr	r2, [r4, #4]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eac8:	6021      	str	r1, [r4, #0]
 800eaca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eace:	bd70      	pop	{r4, r5, r6, pc}
 800ead0:	08010b19 	.word	0x08010b19
 800ead4:	08010b9c 	.word	0x08010b9c

0800ead8 <__multadd>:
 800ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eadc:	690d      	ldr	r5, [r1, #16]
 800eade:	4607      	mov	r7, r0
 800eae0:	460c      	mov	r4, r1
 800eae2:	461e      	mov	r6, r3
 800eae4:	f101 0c14 	add.w	ip, r1, #20
 800eae8:	2000      	movs	r0, #0
 800eaea:	f8dc 3000 	ldr.w	r3, [ip]
 800eaee:	b299      	uxth	r1, r3
 800eaf0:	fb02 6101 	mla	r1, r2, r1, r6
 800eaf4:	0c1e      	lsrs	r6, r3, #16
 800eaf6:	0c0b      	lsrs	r3, r1, #16
 800eaf8:	fb02 3306 	mla	r3, r2, r6, r3
 800eafc:	b289      	uxth	r1, r1
 800eafe:	3001      	adds	r0, #1
 800eb00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb04:	4285      	cmp	r5, r0
 800eb06:	f84c 1b04 	str.w	r1, [ip], #4
 800eb0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb0e:	dcec      	bgt.n	800eaea <__multadd+0x12>
 800eb10:	b30e      	cbz	r6, 800eb56 <__multadd+0x7e>
 800eb12:	68a3      	ldr	r3, [r4, #8]
 800eb14:	42ab      	cmp	r3, r5
 800eb16:	dc19      	bgt.n	800eb4c <__multadd+0x74>
 800eb18:	6861      	ldr	r1, [r4, #4]
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	3101      	adds	r1, #1
 800eb1e:	f7ff ff79 	bl	800ea14 <_Balloc>
 800eb22:	4680      	mov	r8, r0
 800eb24:	b928      	cbnz	r0, 800eb32 <__multadd+0x5a>
 800eb26:	4602      	mov	r2, r0
 800eb28:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <__multadd+0x84>)
 800eb2a:	480d      	ldr	r0, [pc, #52]	; (800eb60 <__multadd+0x88>)
 800eb2c:	21b5      	movs	r1, #181	; 0xb5
 800eb2e:	f000 fd57 	bl	800f5e0 <__assert_func>
 800eb32:	6922      	ldr	r2, [r4, #16]
 800eb34:	3202      	adds	r2, #2
 800eb36:	f104 010c 	add.w	r1, r4, #12
 800eb3a:	0092      	lsls	r2, r2, #2
 800eb3c:	300c      	adds	r0, #12
 800eb3e:	f7fe fcb5 	bl	800d4ac <memcpy>
 800eb42:	4621      	mov	r1, r4
 800eb44:	4638      	mov	r0, r7
 800eb46:	f7ff ffa5 	bl	800ea94 <_Bfree>
 800eb4a:	4644      	mov	r4, r8
 800eb4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb50:	3501      	adds	r5, #1
 800eb52:	615e      	str	r6, [r3, #20]
 800eb54:	6125      	str	r5, [r4, #16]
 800eb56:	4620      	mov	r0, r4
 800eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5c:	08010b8b 	.word	0x08010b8b
 800eb60:	08010b9c 	.word	0x08010b9c

0800eb64 <__hi0bits>:
 800eb64:	0c03      	lsrs	r3, r0, #16
 800eb66:	041b      	lsls	r3, r3, #16
 800eb68:	b9d3      	cbnz	r3, 800eba0 <__hi0bits+0x3c>
 800eb6a:	0400      	lsls	r0, r0, #16
 800eb6c:	2310      	movs	r3, #16
 800eb6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb72:	bf04      	itt	eq
 800eb74:	0200      	lsleq	r0, r0, #8
 800eb76:	3308      	addeq	r3, #8
 800eb78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb7c:	bf04      	itt	eq
 800eb7e:	0100      	lsleq	r0, r0, #4
 800eb80:	3304      	addeq	r3, #4
 800eb82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb86:	bf04      	itt	eq
 800eb88:	0080      	lsleq	r0, r0, #2
 800eb8a:	3302      	addeq	r3, #2
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	db05      	blt.n	800eb9c <__hi0bits+0x38>
 800eb90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb94:	f103 0301 	add.w	r3, r3, #1
 800eb98:	bf08      	it	eq
 800eb9a:	2320      	moveq	r3, #32
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	4770      	bx	lr
 800eba0:	2300      	movs	r3, #0
 800eba2:	e7e4      	b.n	800eb6e <__hi0bits+0xa>

0800eba4 <__lo0bits>:
 800eba4:	6803      	ldr	r3, [r0, #0]
 800eba6:	f013 0207 	ands.w	r2, r3, #7
 800ebaa:	4601      	mov	r1, r0
 800ebac:	d00b      	beq.n	800ebc6 <__lo0bits+0x22>
 800ebae:	07da      	lsls	r2, r3, #31
 800ebb0:	d423      	bmi.n	800ebfa <__lo0bits+0x56>
 800ebb2:	0798      	lsls	r0, r3, #30
 800ebb4:	bf49      	itett	mi
 800ebb6:	085b      	lsrmi	r3, r3, #1
 800ebb8:	089b      	lsrpl	r3, r3, #2
 800ebba:	2001      	movmi	r0, #1
 800ebbc:	600b      	strmi	r3, [r1, #0]
 800ebbe:	bf5c      	itt	pl
 800ebc0:	600b      	strpl	r3, [r1, #0]
 800ebc2:	2002      	movpl	r0, #2
 800ebc4:	4770      	bx	lr
 800ebc6:	b298      	uxth	r0, r3
 800ebc8:	b9a8      	cbnz	r0, 800ebf6 <__lo0bits+0x52>
 800ebca:	0c1b      	lsrs	r3, r3, #16
 800ebcc:	2010      	movs	r0, #16
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	b90a      	cbnz	r2, 800ebd6 <__lo0bits+0x32>
 800ebd2:	3008      	adds	r0, #8
 800ebd4:	0a1b      	lsrs	r3, r3, #8
 800ebd6:	071a      	lsls	r2, r3, #28
 800ebd8:	bf04      	itt	eq
 800ebda:	091b      	lsreq	r3, r3, #4
 800ebdc:	3004      	addeq	r0, #4
 800ebde:	079a      	lsls	r2, r3, #30
 800ebe0:	bf04      	itt	eq
 800ebe2:	089b      	lsreq	r3, r3, #2
 800ebe4:	3002      	addeq	r0, #2
 800ebe6:	07da      	lsls	r2, r3, #31
 800ebe8:	d403      	bmi.n	800ebf2 <__lo0bits+0x4e>
 800ebea:	085b      	lsrs	r3, r3, #1
 800ebec:	f100 0001 	add.w	r0, r0, #1
 800ebf0:	d005      	beq.n	800ebfe <__lo0bits+0x5a>
 800ebf2:	600b      	str	r3, [r1, #0]
 800ebf4:	4770      	bx	lr
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	e7e9      	b.n	800ebce <__lo0bits+0x2a>
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	4770      	bx	lr
 800ebfe:	2020      	movs	r0, #32
 800ec00:	4770      	bx	lr
	...

0800ec04 <__i2b>:
 800ec04:	b510      	push	{r4, lr}
 800ec06:	460c      	mov	r4, r1
 800ec08:	2101      	movs	r1, #1
 800ec0a:	f7ff ff03 	bl	800ea14 <_Balloc>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	b928      	cbnz	r0, 800ec1e <__i2b+0x1a>
 800ec12:	4b05      	ldr	r3, [pc, #20]	; (800ec28 <__i2b+0x24>)
 800ec14:	4805      	ldr	r0, [pc, #20]	; (800ec2c <__i2b+0x28>)
 800ec16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec1a:	f000 fce1 	bl	800f5e0 <__assert_func>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	6144      	str	r4, [r0, #20]
 800ec22:	6103      	str	r3, [r0, #16]
 800ec24:	bd10      	pop	{r4, pc}
 800ec26:	bf00      	nop
 800ec28:	08010b8b 	.word	0x08010b8b
 800ec2c:	08010b9c 	.word	0x08010b9c

0800ec30 <__multiply>:
 800ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec34:	4691      	mov	r9, r2
 800ec36:	690a      	ldr	r2, [r1, #16]
 800ec38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	bfb8      	it	lt
 800ec40:	460b      	movlt	r3, r1
 800ec42:	460c      	mov	r4, r1
 800ec44:	bfbc      	itt	lt
 800ec46:	464c      	movlt	r4, r9
 800ec48:	4699      	movlt	r9, r3
 800ec4a:	6927      	ldr	r7, [r4, #16]
 800ec4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec50:	68a3      	ldr	r3, [r4, #8]
 800ec52:	6861      	ldr	r1, [r4, #4]
 800ec54:	eb07 060a 	add.w	r6, r7, sl
 800ec58:	42b3      	cmp	r3, r6
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	bfb8      	it	lt
 800ec5e:	3101      	addlt	r1, #1
 800ec60:	f7ff fed8 	bl	800ea14 <_Balloc>
 800ec64:	b930      	cbnz	r0, 800ec74 <__multiply+0x44>
 800ec66:	4602      	mov	r2, r0
 800ec68:	4b44      	ldr	r3, [pc, #272]	; (800ed7c <__multiply+0x14c>)
 800ec6a:	4845      	ldr	r0, [pc, #276]	; (800ed80 <__multiply+0x150>)
 800ec6c:	f240 115d 	movw	r1, #349	; 0x15d
 800ec70:	f000 fcb6 	bl	800f5e0 <__assert_func>
 800ec74:	f100 0514 	add.w	r5, r0, #20
 800ec78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec7c:	462b      	mov	r3, r5
 800ec7e:	2200      	movs	r2, #0
 800ec80:	4543      	cmp	r3, r8
 800ec82:	d321      	bcc.n	800ecc8 <__multiply+0x98>
 800ec84:	f104 0314 	add.w	r3, r4, #20
 800ec88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec8c:	f109 0314 	add.w	r3, r9, #20
 800ec90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec94:	9202      	str	r2, [sp, #8]
 800ec96:	1b3a      	subs	r2, r7, r4
 800ec98:	3a15      	subs	r2, #21
 800ec9a:	f022 0203 	bic.w	r2, r2, #3
 800ec9e:	3204      	adds	r2, #4
 800eca0:	f104 0115 	add.w	r1, r4, #21
 800eca4:	428f      	cmp	r7, r1
 800eca6:	bf38      	it	cc
 800eca8:	2204      	movcc	r2, #4
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	9a02      	ldr	r2, [sp, #8]
 800ecae:	9303      	str	r3, [sp, #12]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d80c      	bhi.n	800ecce <__multiply+0x9e>
 800ecb4:	2e00      	cmp	r6, #0
 800ecb6:	dd03      	ble.n	800ecc0 <__multiply+0x90>
 800ecb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d05a      	beq.n	800ed76 <__multiply+0x146>
 800ecc0:	6106      	str	r6, [r0, #16]
 800ecc2:	b005      	add	sp, #20
 800ecc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc8:	f843 2b04 	str.w	r2, [r3], #4
 800eccc:	e7d8      	b.n	800ec80 <__multiply+0x50>
 800ecce:	f8b3 a000 	ldrh.w	sl, [r3]
 800ecd2:	f1ba 0f00 	cmp.w	sl, #0
 800ecd6:	d024      	beq.n	800ed22 <__multiply+0xf2>
 800ecd8:	f104 0e14 	add.w	lr, r4, #20
 800ecdc:	46a9      	mov	r9, r5
 800ecde:	f04f 0c00 	mov.w	ip, #0
 800ece2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ece6:	f8d9 1000 	ldr.w	r1, [r9]
 800ecea:	fa1f fb82 	uxth.w	fp, r2
 800ecee:	b289      	uxth	r1, r1
 800ecf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800ecf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ecf8:	f8d9 2000 	ldr.w	r2, [r9]
 800ecfc:	4461      	add	r1, ip
 800ecfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed02:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed0a:	b289      	uxth	r1, r1
 800ed0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed10:	4577      	cmp	r7, lr
 800ed12:	f849 1b04 	str.w	r1, [r9], #4
 800ed16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed1a:	d8e2      	bhi.n	800ece2 <__multiply+0xb2>
 800ed1c:	9a01      	ldr	r2, [sp, #4]
 800ed1e:	f845 c002 	str.w	ip, [r5, r2]
 800ed22:	9a03      	ldr	r2, [sp, #12]
 800ed24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed28:	3304      	adds	r3, #4
 800ed2a:	f1b9 0f00 	cmp.w	r9, #0
 800ed2e:	d020      	beq.n	800ed72 <__multiply+0x142>
 800ed30:	6829      	ldr	r1, [r5, #0]
 800ed32:	f104 0c14 	add.w	ip, r4, #20
 800ed36:	46ae      	mov	lr, r5
 800ed38:	f04f 0a00 	mov.w	sl, #0
 800ed3c:	f8bc b000 	ldrh.w	fp, [ip]
 800ed40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed44:	fb09 220b 	mla	r2, r9, fp, r2
 800ed48:	4492      	add	sl, r2
 800ed4a:	b289      	uxth	r1, r1
 800ed4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ed50:	f84e 1b04 	str.w	r1, [lr], #4
 800ed54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed58:	f8be 1000 	ldrh.w	r1, [lr]
 800ed5c:	0c12      	lsrs	r2, r2, #16
 800ed5e:	fb09 1102 	mla	r1, r9, r2, r1
 800ed62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ed66:	4567      	cmp	r7, ip
 800ed68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed6c:	d8e6      	bhi.n	800ed3c <__multiply+0x10c>
 800ed6e:	9a01      	ldr	r2, [sp, #4]
 800ed70:	50a9      	str	r1, [r5, r2]
 800ed72:	3504      	adds	r5, #4
 800ed74:	e79a      	b.n	800ecac <__multiply+0x7c>
 800ed76:	3e01      	subs	r6, #1
 800ed78:	e79c      	b.n	800ecb4 <__multiply+0x84>
 800ed7a:	bf00      	nop
 800ed7c:	08010b8b 	.word	0x08010b8b
 800ed80:	08010b9c 	.word	0x08010b9c

0800ed84 <__pow5mult>:
 800ed84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed88:	4615      	mov	r5, r2
 800ed8a:	f012 0203 	ands.w	r2, r2, #3
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	d007      	beq.n	800eda4 <__pow5mult+0x20>
 800ed94:	4c25      	ldr	r4, [pc, #148]	; (800ee2c <__pow5mult+0xa8>)
 800ed96:	3a01      	subs	r2, #1
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed9e:	f7ff fe9b 	bl	800ead8 <__multadd>
 800eda2:	4607      	mov	r7, r0
 800eda4:	10ad      	asrs	r5, r5, #2
 800eda6:	d03d      	beq.n	800ee24 <__pow5mult+0xa0>
 800eda8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800edaa:	b97c      	cbnz	r4, 800edcc <__pow5mult+0x48>
 800edac:	2010      	movs	r0, #16
 800edae:	f7ff fe29 	bl	800ea04 <malloc>
 800edb2:	4602      	mov	r2, r0
 800edb4:	6270      	str	r0, [r6, #36]	; 0x24
 800edb6:	b928      	cbnz	r0, 800edc4 <__pow5mult+0x40>
 800edb8:	4b1d      	ldr	r3, [pc, #116]	; (800ee30 <__pow5mult+0xac>)
 800edba:	481e      	ldr	r0, [pc, #120]	; (800ee34 <__pow5mult+0xb0>)
 800edbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800edc0:	f000 fc0e 	bl	800f5e0 <__assert_func>
 800edc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edc8:	6004      	str	r4, [r0, #0]
 800edca:	60c4      	str	r4, [r0, #12]
 800edcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800edd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edd4:	b94c      	cbnz	r4, 800edea <__pow5mult+0x66>
 800edd6:	f240 2171 	movw	r1, #625	; 0x271
 800edda:	4630      	mov	r0, r6
 800eddc:	f7ff ff12 	bl	800ec04 <__i2b>
 800ede0:	2300      	movs	r3, #0
 800ede2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ede6:	4604      	mov	r4, r0
 800ede8:	6003      	str	r3, [r0, #0]
 800edea:	f04f 0900 	mov.w	r9, #0
 800edee:	07eb      	lsls	r3, r5, #31
 800edf0:	d50a      	bpl.n	800ee08 <__pow5mult+0x84>
 800edf2:	4639      	mov	r1, r7
 800edf4:	4622      	mov	r2, r4
 800edf6:	4630      	mov	r0, r6
 800edf8:	f7ff ff1a 	bl	800ec30 <__multiply>
 800edfc:	4639      	mov	r1, r7
 800edfe:	4680      	mov	r8, r0
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7ff fe47 	bl	800ea94 <_Bfree>
 800ee06:	4647      	mov	r7, r8
 800ee08:	106d      	asrs	r5, r5, #1
 800ee0a:	d00b      	beq.n	800ee24 <__pow5mult+0xa0>
 800ee0c:	6820      	ldr	r0, [r4, #0]
 800ee0e:	b938      	cbnz	r0, 800ee20 <__pow5mult+0x9c>
 800ee10:	4622      	mov	r2, r4
 800ee12:	4621      	mov	r1, r4
 800ee14:	4630      	mov	r0, r6
 800ee16:	f7ff ff0b 	bl	800ec30 <__multiply>
 800ee1a:	6020      	str	r0, [r4, #0]
 800ee1c:	f8c0 9000 	str.w	r9, [r0]
 800ee20:	4604      	mov	r4, r0
 800ee22:	e7e4      	b.n	800edee <__pow5mult+0x6a>
 800ee24:	4638      	mov	r0, r7
 800ee26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee2a:	bf00      	nop
 800ee2c:	08010ce8 	.word	0x08010ce8
 800ee30:	08010b19 	.word	0x08010b19
 800ee34:	08010b9c 	.word	0x08010b9c

0800ee38 <__lshift>:
 800ee38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	460c      	mov	r4, r1
 800ee3e:	6849      	ldr	r1, [r1, #4]
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee46:	68a3      	ldr	r3, [r4, #8]
 800ee48:	4607      	mov	r7, r0
 800ee4a:	4691      	mov	r9, r2
 800ee4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee50:	f108 0601 	add.w	r6, r8, #1
 800ee54:	42b3      	cmp	r3, r6
 800ee56:	db0b      	blt.n	800ee70 <__lshift+0x38>
 800ee58:	4638      	mov	r0, r7
 800ee5a:	f7ff fddb 	bl	800ea14 <_Balloc>
 800ee5e:	4605      	mov	r5, r0
 800ee60:	b948      	cbnz	r0, 800ee76 <__lshift+0x3e>
 800ee62:	4602      	mov	r2, r0
 800ee64:	4b2a      	ldr	r3, [pc, #168]	; (800ef10 <__lshift+0xd8>)
 800ee66:	482b      	ldr	r0, [pc, #172]	; (800ef14 <__lshift+0xdc>)
 800ee68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ee6c:	f000 fbb8 	bl	800f5e0 <__assert_func>
 800ee70:	3101      	adds	r1, #1
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	e7ee      	b.n	800ee54 <__lshift+0x1c>
 800ee76:	2300      	movs	r3, #0
 800ee78:	f100 0114 	add.w	r1, r0, #20
 800ee7c:	f100 0210 	add.w	r2, r0, #16
 800ee80:	4618      	mov	r0, r3
 800ee82:	4553      	cmp	r3, sl
 800ee84:	db37      	blt.n	800eef6 <__lshift+0xbe>
 800ee86:	6920      	ldr	r0, [r4, #16]
 800ee88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee8c:	f104 0314 	add.w	r3, r4, #20
 800ee90:	f019 091f 	ands.w	r9, r9, #31
 800ee94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ee9c:	d02f      	beq.n	800eefe <__lshift+0xc6>
 800ee9e:	f1c9 0e20 	rsb	lr, r9, #32
 800eea2:	468a      	mov	sl, r1
 800eea4:	f04f 0c00 	mov.w	ip, #0
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	fa02 f209 	lsl.w	r2, r2, r9
 800eeae:	ea42 020c 	orr.w	r2, r2, ip
 800eeb2:	f84a 2b04 	str.w	r2, [sl], #4
 800eeb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeba:	4298      	cmp	r0, r3
 800eebc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800eec0:	d8f2      	bhi.n	800eea8 <__lshift+0x70>
 800eec2:	1b03      	subs	r3, r0, r4
 800eec4:	3b15      	subs	r3, #21
 800eec6:	f023 0303 	bic.w	r3, r3, #3
 800eeca:	3304      	adds	r3, #4
 800eecc:	f104 0215 	add.w	r2, r4, #21
 800eed0:	4290      	cmp	r0, r2
 800eed2:	bf38      	it	cc
 800eed4:	2304      	movcc	r3, #4
 800eed6:	f841 c003 	str.w	ip, [r1, r3]
 800eeda:	f1bc 0f00 	cmp.w	ip, #0
 800eede:	d001      	beq.n	800eee4 <__lshift+0xac>
 800eee0:	f108 0602 	add.w	r6, r8, #2
 800eee4:	3e01      	subs	r6, #1
 800eee6:	4638      	mov	r0, r7
 800eee8:	612e      	str	r6, [r5, #16]
 800eeea:	4621      	mov	r1, r4
 800eeec:	f7ff fdd2 	bl	800ea94 <_Bfree>
 800eef0:	4628      	mov	r0, r5
 800eef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eefa:	3301      	adds	r3, #1
 800eefc:	e7c1      	b.n	800ee82 <__lshift+0x4a>
 800eefe:	3904      	subs	r1, #4
 800ef00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef08:	4298      	cmp	r0, r3
 800ef0a:	d8f9      	bhi.n	800ef00 <__lshift+0xc8>
 800ef0c:	e7ea      	b.n	800eee4 <__lshift+0xac>
 800ef0e:	bf00      	nop
 800ef10:	08010b8b 	.word	0x08010b8b
 800ef14:	08010b9c 	.word	0x08010b9c

0800ef18 <__mcmp>:
 800ef18:	b530      	push	{r4, r5, lr}
 800ef1a:	6902      	ldr	r2, [r0, #16]
 800ef1c:	690c      	ldr	r4, [r1, #16]
 800ef1e:	1b12      	subs	r2, r2, r4
 800ef20:	d10e      	bne.n	800ef40 <__mcmp+0x28>
 800ef22:	f100 0314 	add.w	r3, r0, #20
 800ef26:	3114      	adds	r1, #20
 800ef28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef38:	42a5      	cmp	r5, r4
 800ef3a:	d003      	beq.n	800ef44 <__mcmp+0x2c>
 800ef3c:	d305      	bcc.n	800ef4a <__mcmp+0x32>
 800ef3e:	2201      	movs	r2, #1
 800ef40:	4610      	mov	r0, r2
 800ef42:	bd30      	pop	{r4, r5, pc}
 800ef44:	4283      	cmp	r3, r0
 800ef46:	d3f3      	bcc.n	800ef30 <__mcmp+0x18>
 800ef48:	e7fa      	b.n	800ef40 <__mcmp+0x28>
 800ef4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef4e:	e7f7      	b.n	800ef40 <__mcmp+0x28>

0800ef50 <__mdiff>:
 800ef50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	460c      	mov	r4, r1
 800ef56:	4606      	mov	r6, r0
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	4690      	mov	r8, r2
 800ef5e:	f7ff ffdb 	bl	800ef18 <__mcmp>
 800ef62:	1e05      	subs	r5, r0, #0
 800ef64:	d110      	bne.n	800ef88 <__mdiff+0x38>
 800ef66:	4629      	mov	r1, r5
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f7ff fd53 	bl	800ea14 <_Balloc>
 800ef6e:	b930      	cbnz	r0, 800ef7e <__mdiff+0x2e>
 800ef70:	4b3a      	ldr	r3, [pc, #232]	; (800f05c <__mdiff+0x10c>)
 800ef72:	4602      	mov	r2, r0
 800ef74:	f240 2132 	movw	r1, #562	; 0x232
 800ef78:	4839      	ldr	r0, [pc, #228]	; (800f060 <__mdiff+0x110>)
 800ef7a:	f000 fb31 	bl	800f5e0 <__assert_func>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef88:	bfa4      	itt	ge
 800ef8a:	4643      	movge	r3, r8
 800ef8c:	46a0      	movge	r8, r4
 800ef8e:	4630      	mov	r0, r6
 800ef90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef94:	bfa6      	itte	ge
 800ef96:	461c      	movge	r4, r3
 800ef98:	2500      	movge	r5, #0
 800ef9a:	2501      	movlt	r5, #1
 800ef9c:	f7ff fd3a 	bl	800ea14 <_Balloc>
 800efa0:	b920      	cbnz	r0, 800efac <__mdiff+0x5c>
 800efa2:	4b2e      	ldr	r3, [pc, #184]	; (800f05c <__mdiff+0x10c>)
 800efa4:	4602      	mov	r2, r0
 800efa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800efaa:	e7e5      	b.n	800ef78 <__mdiff+0x28>
 800efac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800efb0:	6926      	ldr	r6, [r4, #16]
 800efb2:	60c5      	str	r5, [r0, #12]
 800efb4:	f104 0914 	add.w	r9, r4, #20
 800efb8:	f108 0514 	add.w	r5, r8, #20
 800efbc:	f100 0e14 	add.w	lr, r0, #20
 800efc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800efc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800efc8:	f108 0210 	add.w	r2, r8, #16
 800efcc:	46f2      	mov	sl, lr
 800efce:	2100      	movs	r1, #0
 800efd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800efd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800efd8:	fa1f f883 	uxth.w	r8, r3
 800efdc:	fa11 f18b 	uxtah	r1, r1, fp
 800efe0:	0c1b      	lsrs	r3, r3, #16
 800efe2:	eba1 0808 	sub.w	r8, r1, r8
 800efe6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800efea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800efee:	fa1f f888 	uxth.w	r8, r8
 800eff2:	1419      	asrs	r1, r3, #16
 800eff4:	454e      	cmp	r6, r9
 800eff6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800effa:	f84a 3b04 	str.w	r3, [sl], #4
 800effe:	d8e7      	bhi.n	800efd0 <__mdiff+0x80>
 800f000:	1b33      	subs	r3, r6, r4
 800f002:	3b15      	subs	r3, #21
 800f004:	f023 0303 	bic.w	r3, r3, #3
 800f008:	3304      	adds	r3, #4
 800f00a:	3415      	adds	r4, #21
 800f00c:	42a6      	cmp	r6, r4
 800f00e:	bf38      	it	cc
 800f010:	2304      	movcc	r3, #4
 800f012:	441d      	add	r5, r3
 800f014:	4473      	add	r3, lr
 800f016:	469e      	mov	lr, r3
 800f018:	462e      	mov	r6, r5
 800f01a:	4566      	cmp	r6, ip
 800f01c:	d30e      	bcc.n	800f03c <__mdiff+0xec>
 800f01e:	f10c 0203 	add.w	r2, ip, #3
 800f022:	1b52      	subs	r2, r2, r5
 800f024:	f022 0203 	bic.w	r2, r2, #3
 800f028:	3d03      	subs	r5, #3
 800f02a:	45ac      	cmp	ip, r5
 800f02c:	bf38      	it	cc
 800f02e:	2200      	movcc	r2, #0
 800f030:	441a      	add	r2, r3
 800f032:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f036:	b17b      	cbz	r3, 800f058 <__mdiff+0x108>
 800f038:	6107      	str	r7, [r0, #16]
 800f03a:	e7a3      	b.n	800ef84 <__mdiff+0x34>
 800f03c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f040:	fa11 f288 	uxtah	r2, r1, r8
 800f044:	1414      	asrs	r4, r2, #16
 800f046:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f04a:	b292      	uxth	r2, r2
 800f04c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f050:	f84e 2b04 	str.w	r2, [lr], #4
 800f054:	1421      	asrs	r1, r4, #16
 800f056:	e7e0      	b.n	800f01a <__mdiff+0xca>
 800f058:	3f01      	subs	r7, #1
 800f05a:	e7ea      	b.n	800f032 <__mdiff+0xe2>
 800f05c:	08010b8b 	.word	0x08010b8b
 800f060:	08010b9c 	.word	0x08010b9c

0800f064 <__d2b>:
 800f064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f068:	4689      	mov	r9, r1
 800f06a:	2101      	movs	r1, #1
 800f06c:	ec57 6b10 	vmov	r6, r7, d0
 800f070:	4690      	mov	r8, r2
 800f072:	f7ff fccf 	bl	800ea14 <_Balloc>
 800f076:	4604      	mov	r4, r0
 800f078:	b930      	cbnz	r0, 800f088 <__d2b+0x24>
 800f07a:	4602      	mov	r2, r0
 800f07c:	4b25      	ldr	r3, [pc, #148]	; (800f114 <__d2b+0xb0>)
 800f07e:	4826      	ldr	r0, [pc, #152]	; (800f118 <__d2b+0xb4>)
 800f080:	f240 310a 	movw	r1, #778	; 0x30a
 800f084:	f000 faac 	bl	800f5e0 <__assert_func>
 800f088:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f08c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f090:	bb35      	cbnz	r5, 800f0e0 <__d2b+0x7c>
 800f092:	2e00      	cmp	r6, #0
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	d028      	beq.n	800f0ea <__d2b+0x86>
 800f098:	4668      	mov	r0, sp
 800f09a:	9600      	str	r6, [sp, #0]
 800f09c:	f7ff fd82 	bl	800eba4 <__lo0bits>
 800f0a0:	9900      	ldr	r1, [sp, #0]
 800f0a2:	b300      	cbz	r0, 800f0e6 <__d2b+0x82>
 800f0a4:	9a01      	ldr	r2, [sp, #4]
 800f0a6:	f1c0 0320 	rsb	r3, r0, #32
 800f0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ae:	430b      	orrs	r3, r1
 800f0b0:	40c2      	lsrs	r2, r0
 800f0b2:	6163      	str	r3, [r4, #20]
 800f0b4:	9201      	str	r2, [sp, #4]
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	61a3      	str	r3, [r4, #24]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	bf14      	ite	ne
 800f0be:	2202      	movne	r2, #2
 800f0c0:	2201      	moveq	r2, #1
 800f0c2:	6122      	str	r2, [r4, #16]
 800f0c4:	b1d5      	cbz	r5, 800f0fc <__d2b+0x98>
 800f0c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f0ca:	4405      	add	r5, r0
 800f0cc:	f8c9 5000 	str.w	r5, [r9]
 800f0d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0d4:	f8c8 0000 	str.w	r0, [r8]
 800f0d8:	4620      	mov	r0, r4
 800f0da:	b003      	add	sp, #12
 800f0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0e4:	e7d5      	b.n	800f092 <__d2b+0x2e>
 800f0e6:	6161      	str	r1, [r4, #20]
 800f0e8:	e7e5      	b.n	800f0b6 <__d2b+0x52>
 800f0ea:	a801      	add	r0, sp, #4
 800f0ec:	f7ff fd5a 	bl	800eba4 <__lo0bits>
 800f0f0:	9b01      	ldr	r3, [sp, #4]
 800f0f2:	6163      	str	r3, [r4, #20]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	6122      	str	r2, [r4, #16]
 800f0f8:	3020      	adds	r0, #32
 800f0fa:	e7e3      	b.n	800f0c4 <__d2b+0x60>
 800f0fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f104:	f8c9 0000 	str.w	r0, [r9]
 800f108:	6918      	ldr	r0, [r3, #16]
 800f10a:	f7ff fd2b 	bl	800eb64 <__hi0bits>
 800f10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f112:	e7df      	b.n	800f0d4 <__d2b+0x70>
 800f114:	08010b8b 	.word	0x08010b8b
 800f118:	08010b9c 	.word	0x08010b9c

0800f11c <_calloc_r>:
 800f11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f11e:	fba1 2402 	umull	r2, r4, r1, r2
 800f122:	b94c      	cbnz	r4, 800f138 <_calloc_r+0x1c>
 800f124:	4611      	mov	r1, r2
 800f126:	9201      	str	r2, [sp, #4]
 800f128:	f000 f87a 	bl	800f220 <_malloc_r>
 800f12c:	9a01      	ldr	r2, [sp, #4]
 800f12e:	4605      	mov	r5, r0
 800f130:	b930      	cbnz	r0, 800f140 <_calloc_r+0x24>
 800f132:	4628      	mov	r0, r5
 800f134:	b003      	add	sp, #12
 800f136:	bd30      	pop	{r4, r5, pc}
 800f138:	220c      	movs	r2, #12
 800f13a:	6002      	str	r2, [r0, #0]
 800f13c:	2500      	movs	r5, #0
 800f13e:	e7f8      	b.n	800f132 <_calloc_r+0x16>
 800f140:	4621      	mov	r1, r4
 800f142:	f7fe f9c1 	bl	800d4c8 <memset>
 800f146:	e7f4      	b.n	800f132 <_calloc_r+0x16>

0800f148 <_free_r>:
 800f148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f14a:	2900      	cmp	r1, #0
 800f14c:	d044      	beq.n	800f1d8 <_free_r+0x90>
 800f14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f152:	9001      	str	r0, [sp, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	f1a1 0404 	sub.w	r4, r1, #4
 800f15a:	bfb8      	it	lt
 800f15c:	18e4      	addlt	r4, r4, r3
 800f15e:	f000 fa9b 	bl	800f698 <__malloc_lock>
 800f162:	4a1e      	ldr	r2, [pc, #120]	; (800f1dc <_free_r+0x94>)
 800f164:	9801      	ldr	r0, [sp, #4]
 800f166:	6813      	ldr	r3, [r2, #0]
 800f168:	b933      	cbnz	r3, 800f178 <_free_r+0x30>
 800f16a:	6063      	str	r3, [r4, #4]
 800f16c:	6014      	str	r4, [r2, #0]
 800f16e:	b003      	add	sp, #12
 800f170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f174:	f000 ba96 	b.w	800f6a4 <__malloc_unlock>
 800f178:	42a3      	cmp	r3, r4
 800f17a:	d908      	bls.n	800f18e <_free_r+0x46>
 800f17c:	6825      	ldr	r5, [r4, #0]
 800f17e:	1961      	adds	r1, r4, r5
 800f180:	428b      	cmp	r3, r1
 800f182:	bf01      	itttt	eq
 800f184:	6819      	ldreq	r1, [r3, #0]
 800f186:	685b      	ldreq	r3, [r3, #4]
 800f188:	1949      	addeq	r1, r1, r5
 800f18a:	6021      	streq	r1, [r4, #0]
 800f18c:	e7ed      	b.n	800f16a <_free_r+0x22>
 800f18e:	461a      	mov	r2, r3
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	b10b      	cbz	r3, 800f198 <_free_r+0x50>
 800f194:	42a3      	cmp	r3, r4
 800f196:	d9fa      	bls.n	800f18e <_free_r+0x46>
 800f198:	6811      	ldr	r1, [r2, #0]
 800f19a:	1855      	adds	r5, r2, r1
 800f19c:	42a5      	cmp	r5, r4
 800f19e:	d10b      	bne.n	800f1b8 <_free_r+0x70>
 800f1a0:	6824      	ldr	r4, [r4, #0]
 800f1a2:	4421      	add	r1, r4
 800f1a4:	1854      	adds	r4, r2, r1
 800f1a6:	42a3      	cmp	r3, r4
 800f1a8:	6011      	str	r1, [r2, #0]
 800f1aa:	d1e0      	bne.n	800f16e <_free_r+0x26>
 800f1ac:	681c      	ldr	r4, [r3, #0]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	6053      	str	r3, [r2, #4]
 800f1b2:	4421      	add	r1, r4
 800f1b4:	6011      	str	r1, [r2, #0]
 800f1b6:	e7da      	b.n	800f16e <_free_r+0x26>
 800f1b8:	d902      	bls.n	800f1c0 <_free_r+0x78>
 800f1ba:	230c      	movs	r3, #12
 800f1bc:	6003      	str	r3, [r0, #0]
 800f1be:	e7d6      	b.n	800f16e <_free_r+0x26>
 800f1c0:	6825      	ldr	r5, [r4, #0]
 800f1c2:	1961      	adds	r1, r4, r5
 800f1c4:	428b      	cmp	r3, r1
 800f1c6:	bf04      	itt	eq
 800f1c8:	6819      	ldreq	r1, [r3, #0]
 800f1ca:	685b      	ldreq	r3, [r3, #4]
 800f1cc:	6063      	str	r3, [r4, #4]
 800f1ce:	bf04      	itt	eq
 800f1d0:	1949      	addeq	r1, r1, r5
 800f1d2:	6021      	streq	r1, [r4, #0]
 800f1d4:	6054      	str	r4, [r2, #4]
 800f1d6:	e7ca      	b.n	800f16e <_free_r+0x26>
 800f1d8:	b003      	add	sp, #12
 800f1da:	bd30      	pop	{r4, r5, pc}
 800f1dc:	24001a6c 	.word	0x24001a6c

0800f1e0 <sbrk_aligned>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	4e0e      	ldr	r6, [pc, #56]	; (800f21c <sbrk_aligned+0x3c>)
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	6831      	ldr	r1, [r6, #0]
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	b911      	cbnz	r1, 800f1f2 <sbrk_aligned+0x12>
 800f1ec:	f000 f9e8 	bl	800f5c0 <_sbrk_r>
 800f1f0:	6030      	str	r0, [r6, #0]
 800f1f2:	4621      	mov	r1, r4
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f000 f9e3 	bl	800f5c0 <_sbrk_r>
 800f1fa:	1c43      	adds	r3, r0, #1
 800f1fc:	d00a      	beq.n	800f214 <sbrk_aligned+0x34>
 800f1fe:	1cc4      	adds	r4, r0, #3
 800f200:	f024 0403 	bic.w	r4, r4, #3
 800f204:	42a0      	cmp	r0, r4
 800f206:	d007      	beq.n	800f218 <sbrk_aligned+0x38>
 800f208:	1a21      	subs	r1, r4, r0
 800f20a:	4628      	mov	r0, r5
 800f20c:	f000 f9d8 	bl	800f5c0 <_sbrk_r>
 800f210:	3001      	adds	r0, #1
 800f212:	d101      	bne.n	800f218 <sbrk_aligned+0x38>
 800f214:	f04f 34ff 	mov.w	r4, #4294967295
 800f218:	4620      	mov	r0, r4
 800f21a:	bd70      	pop	{r4, r5, r6, pc}
 800f21c:	24001a70 	.word	0x24001a70

0800f220 <_malloc_r>:
 800f220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f224:	1ccd      	adds	r5, r1, #3
 800f226:	f025 0503 	bic.w	r5, r5, #3
 800f22a:	3508      	adds	r5, #8
 800f22c:	2d0c      	cmp	r5, #12
 800f22e:	bf38      	it	cc
 800f230:	250c      	movcc	r5, #12
 800f232:	2d00      	cmp	r5, #0
 800f234:	4607      	mov	r7, r0
 800f236:	db01      	blt.n	800f23c <_malloc_r+0x1c>
 800f238:	42a9      	cmp	r1, r5
 800f23a:	d905      	bls.n	800f248 <_malloc_r+0x28>
 800f23c:	230c      	movs	r3, #12
 800f23e:	603b      	str	r3, [r7, #0]
 800f240:	2600      	movs	r6, #0
 800f242:	4630      	mov	r0, r6
 800f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f248:	4e2e      	ldr	r6, [pc, #184]	; (800f304 <_malloc_r+0xe4>)
 800f24a:	f000 fa25 	bl	800f698 <__malloc_lock>
 800f24e:	6833      	ldr	r3, [r6, #0]
 800f250:	461c      	mov	r4, r3
 800f252:	bb34      	cbnz	r4, 800f2a2 <_malloc_r+0x82>
 800f254:	4629      	mov	r1, r5
 800f256:	4638      	mov	r0, r7
 800f258:	f7ff ffc2 	bl	800f1e0 <sbrk_aligned>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	4604      	mov	r4, r0
 800f260:	d14d      	bne.n	800f2fe <_malloc_r+0xde>
 800f262:	6834      	ldr	r4, [r6, #0]
 800f264:	4626      	mov	r6, r4
 800f266:	2e00      	cmp	r6, #0
 800f268:	d140      	bne.n	800f2ec <_malloc_r+0xcc>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	4631      	mov	r1, r6
 800f26e:	4638      	mov	r0, r7
 800f270:	eb04 0803 	add.w	r8, r4, r3
 800f274:	f000 f9a4 	bl	800f5c0 <_sbrk_r>
 800f278:	4580      	cmp	r8, r0
 800f27a:	d13a      	bne.n	800f2f2 <_malloc_r+0xd2>
 800f27c:	6821      	ldr	r1, [r4, #0]
 800f27e:	3503      	adds	r5, #3
 800f280:	1a6d      	subs	r5, r5, r1
 800f282:	f025 0503 	bic.w	r5, r5, #3
 800f286:	3508      	adds	r5, #8
 800f288:	2d0c      	cmp	r5, #12
 800f28a:	bf38      	it	cc
 800f28c:	250c      	movcc	r5, #12
 800f28e:	4629      	mov	r1, r5
 800f290:	4638      	mov	r0, r7
 800f292:	f7ff ffa5 	bl	800f1e0 <sbrk_aligned>
 800f296:	3001      	adds	r0, #1
 800f298:	d02b      	beq.n	800f2f2 <_malloc_r+0xd2>
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	442b      	add	r3, r5
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	e00e      	b.n	800f2c0 <_malloc_r+0xa0>
 800f2a2:	6822      	ldr	r2, [r4, #0]
 800f2a4:	1b52      	subs	r2, r2, r5
 800f2a6:	d41e      	bmi.n	800f2e6 <_malloc_r+0xc6>
 800f2a8:	2a0b      	cmp	r2, #11
 800f2aa:	d916      	bls.n	800f2da <_malloc_r+0xba>
 800f2ac:	1961      	adds	r1, r4, r5
 800f2ae:	42a3      	cmp	r3, r4
 800f2b0:	6025      	str	r5, [r4, #0]
 800f2b2:	bf18      	it	ne
 800f2b4:	6059      	strne	r1, [r3, #4]
 800f2b6:	6863      	ldr	r3, [r4, #4]
 800f2b8:	bf08      	it	eq
 800f2ba:	6031      	streq	r1, [r6, #0]
 800f2bc:	5162      	str	r2, [r4, r5]
 800f2be:	604b      	str	r3, [r1, #4]
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f104 060b 	add.w	r6, r4, #11
 800f2c6:	f000 f9ed 	bl	800f6a4 <__malloc_unlock>
 800f2ca:	f026 0607 	bic.w	r6, r6, #7
 800f2ce:	1d23      	adds	r3, r4, #4
 800f2d0:	1af2      	subs	r2, r6, r3
 800f2d2:	d0b6      	beq.n	800f242 <_malloc_r+0x22>
 800f2d4:	1b9b      	subs	r3, r3, r6
 800f2d6:	50a3      	str	r3, [r4, r2]
 800f2d8:	e7b3      	b.n	800f242 <_malloc_r+0x22>
 800f2da:	6862      	ldr	r2, [r4, #4]
 800f2dc:	42a3      	cmp	r3, r4
 800f2de:	bf0c      	ite	eq
 800f2e0:	6032      	streq	r2, [r6, #0]
 800f2e2:	605a      	strne	r2, [r3, #4]
 800f2e4:	e7ec      	b.n	800f2c0 <_malloc_r+0xa0>
 800f2e6:	4623      	mov	r3, r4
 800f2e8:	6864      	ldr	r4, [r4, #4]
 800f2ea:	e7b2      	b.n	800f252 <_malloc_r+0x32>
 800f2ec:	4634      	mov	r4, r6
 800f2ee:	6876      	ldr	r6, [r6, #4]
 800f2f0:	e7b9      	b.n	800f266 <_malloc_r+0x46>
 800f2f2:	230c      	movs	r3, #12
 800f2f4:	603b      	str	r3, [r7, #0]
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	f000 f9d4 	bl	800f6a4 <__malloc_unlock>
 800f2fc:	e7a1      	b.n	800f242 <_malloc_r+0x22>
 800f2fe:	6025      	str	r5, [r4, #0]
 800f300:	e7de      	b.n	800f2c0 <_malloc_r+0xa0>
 800f302:	bf00      	nop
 800f304:	24001a6c 	.word	0x24001a6c

0800f308 <__ssputs_r>:
 800f308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f30c:	688e      	ldr	r6, [r1, #8]
 800f30e:	429e      	cmp	r6, r3
 800f310:	4682      	mov	sl, r0
 800f312:	460c      	mov	r4, r1
 800f314:	4690      	mov	r8, r2
 800f316:	461f      	mov	r7, r3
 800f318:	d838      	bhi.n	800f38c <__ssputs_r+0x84>
 800f31a:	898a      	ldrh	r2, [r1, #12]
 800f31c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f320:	d032      	beq.n	800f388 <__ssputs_r+0x80>
 800f322:	6825      	ldr	r5, [r4, #0]
 800f324:	6909      	ldr	r1, [r1, #16]
 800f326:	eba5 0901 	sub.w	r9, r5, r1
 800f32a:	6965      	ldr	r5, [r4, #20]
 800f32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f334:	3301      	adds	r3, #1
 800f336:	444b      	add	r3, r9
 800f338:	106d      	asrs	r5, r5, #1
 800f33a:	429d      	cmp	r5, r3
 800f33c:	bf38      	it	cc
 800f33e:	461d      	movcc	r5, r3
 800f340:	0553      	lsls	r3, r2, #21
 800f342:	d531      	bpl.n	800f3a8 <__ssputs_r+0xa0>
 800f344:	4629      	mov	r1, r5
 800f346:	f7ff ff6b 	bl	800f220 <_malloc_r>
 800f34a:	4606      	mov	r6, r0
 800f34c:	b950      	cbnz	r0, 800f364 <__ssputs_r+0x5c>
 800f34e:	230c      	movs	r3, #12
 800f350:	f8ca 3000 	str.w	r3, [sl]
 800f354:	89a3      	ldrh	r3, [r4, #12]
 800f356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f35a:	81a3      	strh	r3, [r4, #12]
 800f35c:	f04f 30ff 	mov.w	r0, #4294967295
 800f360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f364:	6921      	ldr	r1, [r4, #16]
 800f366:	464a      	mov	r2, r9
 800f368:	f7fe f8a0 	bl	800d4ac <memcpy>
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f376:	81a3      	strh	r3, [r4, #12]
 800f378:	6126      	str	r6, [r4, #16]
 800f37a:	6165      	str	r5, [r4, #20]
 800f37c:	444e      	add	r6, r9
 800f37e:	eba5 0509 	sub.w	r5, r5, r9
 800f382:	6026      	str	r6, [r4, #0]
 800f384:	60a5      	str	r5, [r4, #8]
 800f386:	463e      	mov	r6, r7
 800f388:	42be      	cmp	r6, r7
 800f38a:	d900      	bls.n	800f38e <__ssputs_r+0x86>
 800f38c:	463e      	mov	r6, r7
 800f38e:	6820      	ldr	r0, [r4, #0]
 800f390:	4632      	mov	r2, r6
 800f392:	4641      	mov	r1, r8
 800f394:	f000 f966 	bl	800f664 <memmove>
 800f398:	68a3      	ldr	r3, [r4, #8]
 800f39a:	1b9b      	subs	r3, r3, r6
 800f39c:	60a3      	str	r3, [r4, #8]
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	4433      	add	r3, r6
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	e7db      	b.n	800f360 <__ssputs_r+0x58>
 800f3a8:	462a      	mov	r2, r5
 800f3aa:	f000 f981 	bl	800f6b0 <_realloc_r>
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d1e1      	bne.n	800f378 <__ssputs_r+0x70>
 800f3b4:	6921      	ldr	r1, [r4, #16]
 800f3b6:	4650      	mov	r0, sl
 800f3b8:	f7ff fec6 	bl	800f148 <_free_r>
 800f3bc:	e7c7      	b.n	800f34e <__ssputs_r+0x46>
	...

0800f3c0 <_svfiprintf_r>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	4698      	mov	r8, r3
 800f3c6:	898b      	ldrh	r3, [r1, #12]
 800f3c8:	061b      	lsls	r3, r3, #24
 800f3ca:	b09d      	sub	sp, #116	; 0x74
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	d50e      	bpl.n	800f3f2 <_svfiprintf_r+0x32>
 800f3d4:	690b      	ldr	r3, [r1, #16]
 800f3d6:	b963      	cbnz	r3, 800f3f2 <_svfiprintf_r+0x32>
 800f3d8:	2140      	movs	r1, #64	; 0x40
 800f3da:	f7ff ff21 	bl	800f220 <_malloc_r>
 800f3de:	6028      	str	r0, [r5, #0]
 800f3e0:	6128      	str	r0, [r5, #16]
 800f3e2:	b920      	cbnz	r0, 800f3ee <_svfiprintf_r+0x2e>
 800f3e4:	230c      	movs	r3, #12
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e0d1      	b.n	800f592 <_svfiprintf_r+0x1d2>
 800f3ee:	2340      	movs	r3, #64	; 0x40
 800f3f0:	616b      	str	r3, [r5, #20]
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f6:	2320      	movs	r3, #32
 800f3f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f400:	2330      	movs	r3, #48	; 0x30
 800f402:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5ac <_svfiprintf_r+0x1ec>
 800f406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f40a:	f04f 0901 	mov.w	r9, #1
 800f40e:	4623      	mov	r3, r4
 800f410:	469a      	mov	sl, r3
 800f412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f416:	b10a      	cbz	r2, 800f41c <_svfiprintf_r+0x5c>
 800f418:	2a25      	cmp	r2, #37	; 0x25
 800f41a:	d1f9      	bne.n	800f410 <_svfiprintf_r+0x50>
 800f41c:	ebba 0b04 	subs.w	fp, sl, r4
 800f420:	d00b      	beq.n	800f43a <_svfiprintf_r+0x7a>
 800f422:	465b      	mov	r3, fp
 800f424:	4622      	mov	r2, r4
 800f426:	4629      	mov	r1, r5
 800f428:	4638      	mov	r0, r7
 800f42a:	f7ff ff6d 	bl	800f308 <__ssputs_r>
 800f42e:	3001      	adds	r0, #1
 800f430:	f000 80aa 	beq.w	800f588 <_svfiprintf_r+0x1c8>
 800f434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f436:	445a      	add	r2, fp
 800f438:	9209      	str	r2, [sp, #36]	; 0x24
 800f43a:	f89a 3000 	ldrb.w	r3, [sl]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 80a2 	beq.w	800f588 <_svfiprintf_r+0x1c8>
 800f444:	2300      	movs	r3, #0
 800f446:	f04f 32ff 	mov.w	r2, #4294967295
 800f44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f44e:	f10a 0a01 	add.w	sl, sl, #1
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	9307      	str	r3, [sp, #28]
 800f456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f45a:	931a      	str	r3, [sp, #104]	; 0x68
 800f45c:	4654      	mov	r4, sl
 800f45e:	2205      	movs	r2, #5
 800f460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f464:	4851      	ldr	r0, [pc, #324]	; (800f5ac <_svfiprintf_r+0x1ec>)
 800f466:	f7f0 ff43 	bl	80002f0 <memchr>
 800f46a:	9a04      	ldr	r2, [sp, #16]
 800f46c:	b9d8      	cbnz	r0, 800f4a6 <_svfiprintf_r+0xe6>
 800f46e:	06d0      	lsls	r0, r2, #27
 800f470:	bf44      	itt	mi
 800f472:	2320      	movmi	r3, #32
 800f474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f478:	0711      	lsls	r1, r2, #28
 800f47a:	bf44      	itt	mi
 800f47c:	232b      	movmi	r3, #43	; 0x2b
 800f47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f482:	f89a 3000 	ldrb.w	r3, [sl]
 800f486:	2b2a      	cmp	r3, #42	; 0x2a
 800f488:	d015      	beq.n	800f4b6 <_svfiprintf_r+0xf6>
 800f48a:	9a07      	ldr	r2, [sp, #28]
 800f48c:	4654      	mov	r4, sl
 800f48e:	2000      	movs	r0, #0
 800f490:	f04f 0c0a 	mov.w	ip, #10
 800f494:	4621      	mov	r1, r4
 800f496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f49a:	3b30      	subs	r3, #48	; 0x30
 800f49c:	2b09      	cmp	r3, #9
 800f49e:	d94e      	bls.n	800f53e <_svfiprintf_r+0x17e>
 800f4a0:	b1b0      	cbz	r0, 800f4d0 <_svfiprintf_r+0x110>
 800f4a2:	9207      	str	r2, [sp, #28]
 800f4a4:	e014      	b.n	800f4d0 <_svfiprintf_r+0x110>
 800f4a6:	eba0 0308 	sub.w	r3, r0, r8
 800f4aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	9304      	str	r3, [sp, #16]
 800f4b2:	46a2      	mov	sl, r4
 800f4b4:	e7d2      	b.n	800f45c <_svfiprintf_r+0x9c>
 800f4b6:	9b03      	ldr	r3, [sp, #12]
 800f4b8:	1d19      	adds	r1, r3, #4
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	9103      	str	r1, [sp, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	bfbb      	ittet	lt
 800f4c2:	425b      	neglt	r3, r3
 800f4c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f4c8:	9307      	strge	r3, [sp, #28]
 800f4ca:	9307      	strlt	r3, [sp, #28]
 800f4cc:	bfb8      	it	lt
 800f4ce:	9204      	strlt	r2, [sp, #16]
 800f4d0:	7823      	ldrb	r3, [r4, #0]
 800f4d2:	2b2e      	cmp	r3, #46	; 0x2e
 800f4d4:	d10c      	bne.n	800f4f0 <_svfiprintf_r+0x130>
 800f4d6:	7863      	ldrb	r3, [r4, #1]
 800f4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f4da:	d135      	bne.n	800f548 <_svfiprintf_r+0x188>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	1d1a      	adds	r2, r3, #4
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	9203      	str	r2, [sp, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	bfb8      	it	lt
 800f4e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4ec:	3402      	adds	r4, #2
 800f4ee:	9305      	str	r3, [sp, #20]
 800f4f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5bc <_svfiprintf_r+0x1fc>
 800f4f4:	7821      	ldrb	r1, [r4, #0]
 800f4f6:	2203      	movs	r2, #3
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	f7f0 fef9 	bl	80002f0 <memchr>
 800f4fe:	b140      	cbz	r0, 800f512 <_svfiprintf_r+0x152>
 800f500:	2340      	movs	r3, #64	; 0x40
 800f502:	eba0 000a 	sub.w	r0, r0, sl
 800f506:	fa03 f000 	lsl.w	r0, r3, r0
 800f50a:	9b04      	ldr	r3, [sp, #16]
 800f50c:	4303      	orrs	r3, r0
 800f50e:	3401      	adds	r4, #1
 800f510:	9304      	str	r3, [sp, #16]
 800f512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f516:	4826      	ldr	r0, [pc, #152]	; (800f5b0 <_svfiprintf_r+0x1f0>)
 800f518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f51c:	2206      	movs	r2, #6
 800f51e:	f7f0 fee7 	bl	80002f0 <memchr>
 800f522:	2800      	cmp	r0, #0
 800f524:	d038      	beq.n	800f598 <_svfiprintf_r+0x1d8>
 800f526:	4b23      	ldr	r3, [pc, #140]	; (800f5b4 <_svfiprintf_r+0x1f4>)
 800f528:	bb1b      	cbnz	r3, 800f572 <_svfiprintf_r+0x1b2>
 800f52a:	9b03      	ldr	r3, [sp, #12]
 800f52c:	3307      	adds	r3, #7
 800f52e:	f023 0307 	bic.w	r3, r3, #7
 800f532:	3308      	adds	r3, #8
 800f534:	9303      	str	r3, [sp, #12]
 800f536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f538:	4433      	add	r3, r6
 800f53a:	9309      	str	r3, [sp, #36]	; 0x24
 800f53c:	e767      	b.n	800f40e <_svfiprintf_r+0x4e>
 800f53e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f542:	460c      	mov	r4, r1
 800f544:	2001      	movs	r0, #1
 800f546:	e7a5      	b.n	800f494 <_svfiprintf_r+0xd4>
 800f548:	2300      	movs	r3, #0
 800f54a:	3401      	adds	r4, #1
 800f54c:	9305      	str	r3, [sp, #20]
 800f54e:	4619      	mov	r1, r3
 800f550:	f04f 0c0a 	mov.w	ip, #10
 800f554:	4620      	mov	r0, r4
 800f556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f55a:	3a30      	subs	r2, #48	; 0x30
 800f55c:	2a09      	cmp	r2, #9
 800f55e:	d903      	bls.n	800f568 <_svfiprintf_r+0x1a8>
 800f560:	2b00      	cmp	r3, #0
 800f562:	d0c5      	beq.n	800f4f0 <_svfiprintf_r+0x130>
 800f564:	9105      	str	r1, [sp, #20]
 800f566:	e7c3      	b.n	800f4f0 <_svfiprintf_r+0x130>
 800f568:	fb0c 2101 	mla	r1, ip, r1, r2
 800f56c:	4604      	mov	r4, r0
 800f56e:	2301      	movs	r3, #1
 800f570:	e7f0      	b.n	800f554 <_svfiprintf_r+0x194>
 800f572:	ab03      	add	r3, sp, #12
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	462a      	mov	r2, r5
 800f578:	4b0f      	ldr	r3, [pc, #60]	; (800f5b8 <_svfiprintf_r+0x1f8>)
 800f57a:	a904      	add	r1, sp, #16
 800f57c:	4638      	mov	r0, r7
 800f57e:	f7fe f83b 	bl	800d5f8 <_printf_float>
 800f582:	1c42      	adds	r2, r0, #1
 800f584:	4606      	mov	r6, r0
 800f586:	d1d6      	bne.n	800f536 <_svfiprintf_r+0x176>
 800f588:	89ab      	ldrh	r3, [r5, #12]
 800f58a:	065b      	lsls	r3, r3, #25
 800f58c:	f53f af2c 	bmi.w	800f3e8 <_svfiprintf_r+0x28>
 800f590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f592:	b01d      	add	sp, #116	; 0x74
 800f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	ab03      	add	r3, sp, #12
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	462a      	mov	r2, r5
 800f59e:	4b06      	ldr	r3, [pc, #24]	; (800f5b8 <_svfiprintf_r+0x1f8>)
 800f5a0:	a904      	add	r1, sp, #16
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	f7fe fab4 	bl	800db10 <_printf_i>
 800f5a8:	e7eb      	b.n	800f582 <_svfiprintf_r+0x1c2>
 800f5aa:	bf00      	nop
 800f5ac:	08010cf4 	.word	0x08010cf4
 800f5b0:	08010cfe 	.word	0x08010cfe
 800f5b4:	0800d5f9 	.word	0x0800d5f9
 800f5b8:	0800f309 	.word	0x0800f309
 800f5bc:	08010cfa 	.word	0x08010cfa

0800f5c0 <_sbrk_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d06      	ldr	r5, [pc, #24]	; (800f5dc <_sbrk_r+0x1c>)
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	4608      	mov	r0, r1
 800f5ca:	602b      	str	r3, [r5, #0]
 800f5cc:	f7f2 f8f2 	bl	80017b4 <_sbrk>
 800f5d0:	1c43      	adds	r3, r0, #1
 800f5d2:	d102      	bne.n	800f5da <_sbrk_r+0x1a>
 800f5d4:	682b      	ldr	r3, [r5, #0]
 800f5d6:	b103      	cbz	r3, 800f5da <_sbrk_r+0x1a>
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	bd38      	pop	{r3, r4, r5, pc}
 800f5dc:	24001a74 	.word	0x24001a74

0800f5e0 <__assert_func>:
 800f5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5e2:	4614      	mov	r4, r2
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	4b09      	ldr	r3, [pc, #36]	; (800f60c <__assert_func+0x2c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	68d8      	ldr	r0, [r3, #12]
 800f5ee:	b14c      	cbz	r4, 800f604 <__assert_func+0x24>
 800f5f0:	4b07      	ldr	r3, [pc, #28]	; (800f610 <__assert_func+0x30>)
 800f5f2:	9100      	str	r1, [sp, #0]
 800f5f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5f8:	4906      	ldr	r1, [pc, #24]	; (800f614 <__assert_func+0x34>)
 800f5fa:	462b      	mov	r3, r5
 800f5fc:	f000 f80e 	bl	800f61c <fiprintf>
 800f600:	f000 faac 	bl	800fb5c <abort>
 800f604:	4b04      	ldr	r3, [pc, #16]	; (800f618 <__assert_func+0x38>)
 800f606:	461c      	mov	r4, r3
 800f608:	e7f3      	b.n	800f5f2 <__assert_func+0x12>
 800f60a:	bf00      	nop
 800f60c:	24000010 	.word	0x24000010
 800f610:	08010d05 	.word	0x08010d05
 800f614:	08010d12 	.word	0x08010d12
 800f618:	08010d40 	.word	0x08010d40

0800f61c <fiprintf>:
 800f61c:	b40e      	push	{r1, r2, r3}
 800f61e:	b503      	push	{r0, r1, lr}
 800f620:	4601      	mov	r1, r0
 800f622:	ab03      	add	r3, sp, #12
 800f624:	4805      	ldr	r0, [pc, #20]	; (800f63c <fiprintf+0x20>)
 800f626:	f853 2b04 	ldr.w	r2, [r3], #4
 800f62a:	6800      	ldr	r0, [r0, #0]
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	f000 f897 	bl	800f760 <_vfiprintf_r>
 800f632:	b002      	add	sp, #8
 800f634:	f85d eb04 	ldr.w	lr, [sp], #4
 800f638:	b003      	add	sp, #12
 800f63a:	4770      	bx	lr
 800f63c:	24000010 	.word	0x24000010

0800f640 <__ascii_mbtowc>:
 800f640:	b082      	sub	sp, #8
 800f642:	b901      	cbnz	r1, 800f646 <__ascii_mbtowc+0x6>
 800f644:	a901      	add	r1, sp, #4
 800f646:	b142      	cbz	r2, 800f65a <__ascii_mbtowc+0x1a>
 800f648:	b14b      	cbz	r3, 800f65e <__ascii_mbtowc+0x1e>
 800f64a:	7813      	ldrb	r3, [r2, #0]
 800f64c:	600b      	str	r3, [r1, #0]
 800f64e:	7812      	ldrb	r2, [r2, #0]
 800f650:	1e10      	subs	r0, r2, #0
 800f652:	bf18      	it	ne
 800f654:	2001      	movne	r0, #1
 800f656:	b002      	add	sp, #8
 800f658:	4770      	bx	lr
 800f65a:	4610      	mov	r0, r2
 800f65c:	e7fb      	b.n	800f656 <__ascii_mbtowc+0x16>
 800f65e:	f06f 0001 	mvn.w	r0, #1
 800f662:	e7f8      	b.n	800f656 <__ascii_mbtowc+0x16>

0800f664 <memmove>:
 800f664:	4288      	cmp	r0, r1
 800f666:	b510      	push	{r4, lr}
 800f668:	eb01 0402 	add.w	r4, r1, r2
 800f66c:	d902      	bls.n	800f674 <memmove+0x10>
 800f66e:	4284      	cmp	r4, r0
 800f670:	4623      	mov	r3, r4
 800f672:	d807      	bhi.n	800f684 <memmove+0x20>
 800f674:	1e43      	subs	r3, r0, #1
 800f676:	42a1      	cmp	r1, r4
 800f678:	d008      	beq.n	800f68c <memmove+0x28>
 800f67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f682:	e7f8      	b.n	800f676 <memmove+0x12>
 800f684:	4402      	add	r2, r0
 800f686:	4601      	mov	r1, r0
 800f688:	428a      	cmp	r2, r1
 800f68a:	d100      	bne.n	800f68e <memmove+0x2a>
 800f68c:	bd10      	pop	{r4, pc}
 800f68e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f696:	e7f7      	b.n	800f688 <memmove+0x24>

0800f698 <__malloc_lock>:
 800f698:	4801      	ldr	r0, [pc, #4]	; (800f6a0 <__malloc_lock+0x8>)
 800f69a:	f000 bc1f 	b.w	800fedc <__retarget_lock_acquire_recursive>
 800f69e:	bf00      	nop
 800f6a0:	24001a78 	.word	0x24001a78

0800f6a4 <__malloc_unlock>:
 800f6a4:	4801      	ldr	r0, [pc, #4]	; (800f6ac <__malloc_unlock+0x8>)
 800f6a6:	f000 bc1a 	b.w	800fede <__retarget_lock_release_recursive>
 800f6aa:	bf00      	nop
 800f6ac:	24001a78 	.word	0x24001a78

0800f6b0 <_realloc_r>:
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	4680      	mov	r8, r0
 800f6b6:	4614      	mov	r4, r2
 800f6b8:	460e      	mov	r6, r1
 800f6ba:	b921      	cbnz	r1, 800f6c6 <_realloc_r+0x16>
 800f6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	f7ff bdad 	b.w	800f220 <_malloc_r>
 800f6c6:	b92a      	cbnz	r2, 800f6d4 <_realloc_r+0x24>
 800f6c8:	f7ff fd3e 	bl	800f148 <_free_r>
 800f6cc:	4625      	mov	r5, r4
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d4:	f000 fc6a 	bl	800ffac <_malloc_usable_size_r>
 800f6d8:	4284      	cmp	r4, r0
 800f6da:	4607      	mov	r7, r0
 800f6dc:	d802      	bhi.n	800f6e4 <_realloc_r+0x34>
 800f6de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6e2:	d812      	bhi.n	800f70a <_realloc_r+0x5a>
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4640      	mov	r0, r8
 800f6e8:	f7ff fd9a 	bl	800f220 <_malloc_r>
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d0ed      	beq.n	800f6ce <_realloc_r+0x1e>
 800f6f2:	42bc      	cmp	r4, r7
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	4631      	mov	r1, r6
 800f6f8:	bf28      	it	cs
 800f6fa:	463a      	movcs	r2, r7
 800f6fc:	f7fd fed6 	bl	800d4ac <memcpy>
 800f700:	4631      	mov	r1, r6
 800f702:	4640      	mov	r0, r8
 800f704:	f7ff fd20 	bl	800f148 <_free_r>
 800f708:	e7e1      	b.n	800f6ce <_realloc_r+0x1e>
 800f70a:	4635      	mov	r5, r6
 800f70c:	e7df      	b.n	800f6ce <_realloc_r+0x1e>

0800f70e <__sfputc_r>:
 800f70e:	6893      	ldr	r3, [r2, #8]
 800f710:	3b01      	subs	r3, #1
 800f712:	2b00      	cmp	r3, #0
 800f714:	b410      	push	{r4}
 800f716:	6093      	str	r3, [r2, #8]
 800f718:	da08      	bge.n	800f72c <__sfputc_r+0x1e>
 800f71a:	6994      	ldr	r4, [r2, #24]
 800f71c:	42a3      	cmp	r3, r4
 800f71e:	db01      	blt.n	800f724 <__sfputc_r+0x16>
 800f720:	290a      	cmp	r1, #10
 800f722:	d103      	bne.n	800f72c <__sfputc_r+0x1e>
 800f724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f728:	f000 b94a 	b.w	800f9c0 <__swbuf_r>
 800f72c:	6813      	ldr	r3, [r2, #0]
 800f72e:	1c58      	adds	r0, r3, #1
 800f730:	6010      	str	r0, [r2, #0]
 800f732:	7019      	strb	r1, [r3, #0]
 800f734:	4608      	mov	r0, r1
 800f736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <__sfputs_r>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	4606      	mov	r6, r0
 800f740:	460f      	mov	r7, r1
 800f742:	4614      	mov	r4, r2
 800f744:	18d5      	adds	r5, r2, r3
 800f746:	42ac      	cmp	r4, r5
 800f748:	d101      	bne.n	800f74e <__sfputs_r+0x12>
 800f74a:	2000      	movs	r0, #0
 800f74c:	e007      	b.n	800f75e <__sfputs_r+0x22>
 800f74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f752:	463a      	mov	r2, r7
 800f754:	4630      	mov	r0, r6
 800f756:	f7ff ffda 	bl	800f70e <__sfputc_r>
 800f75a:	1c43      	adds	r3, r0, #1
 800f75c:	d1f3      	bne.n	800f746 <__sfputs_r+0xa>
 800f75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f760 <_vfiprintf_r>:
 800f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f764:	460d      	mov	r5, r1
 800f766:	b09d      	sub	sp, #116	; 0x74
 800f768:	4614      	mov	r4, r2
 800f76a:	4698      	mov	r8, r3
 800f76c:	4606      	mov	r6, r0
 800f76e:	b118      	cbz	r0, 800f778 <_vfiprintf_r+0x18>
 800f770:	6983      	ldr	r3, [r0, #24]
 800f772:	b90b      	cbnz	r3, 800f778 <_vfiprintf_r+0x18>
 800f774:	f000 fb14 	bl	800fda0 <__sinit>
 800f778:	4b89      	ldr	r3, [pc, #548]	; (800f9a0 <_vfiprintf_r+0x240>)
 800f77a:	429d      	cmp	r5, r3
 800f77c:	d11b      	bne.n	800f7b6 <_vfiprintf_r+0x56>
 800f77e:	6875      	ldr	r5, [r6, #4]
 800f780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f782:	07d9      	lsls	r1, r3, #31
 800f784:	d405      	bmi.n	800f792 <_vfiprintf_r+0x32>
 800f786:	89ab      	ldrh	r3, [r5, #12]
 800f788:	059a      	lsls	r2, r3, #22
 800f78a:	d402      	bmi.n	800f792 <_vfiprintf_r+0x32>
 800f78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f78e:	f000 fba5 	bl	800fedc <__retarget_lock_acquire_recursive>
 800f792:	89ab      	ldrh	r3, [r5, #12]
 800f794:	071b      	lsls	r3, r3, #28
 800f796:	d501      	bpl.n	800f79c <_vfiprintf_r+0x3c>
 800f798:	692b      	ldr	r3, [r5, #16]
 800f79a:	b9eb      	cbnz	r3, 800f7d8 <_vfiprintf_r+0x78>
 800f79c:	4629      	mov	r1, r5
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f000 f96e 	bl	800fa80 <__swsetup_r>
 800f7a4:	b1c0      	cbz	r0, 800f7d8 <_vfiprintf_r+0x78>
 800f7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7a8:	07dc      	lsls	r4, r3, #31
 800f7aa:	d50e      	bpl.n	800f7ca <_vfiprintf_r+0x6a>
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b0:	b01d      	add	sp, #116	; 0x74
 800f7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b6:	4b7b      	ldr	r3, [pc, #492]	; (800f9a4 <_vfiprintf_r+0x244>)
 800f7b8:	429d      	cmp	r5, r3
 800f7ba:	d101      	bne.n	800f7c0 <_vfiprintf_r+0x60>
 800f7bc:	68b5      	ldr	r5, [r6, #8]
 800f7be:	e7df      	b.n	800f780 <_vfiprintf_r+0x20>
 800f7c0:	4b79      	ldr	r3, [pc, #484]	; (800f9a8 <_vfiprintf_r+0x248>)
 800f7c2:	429d      	cmp	r5, r3
 800f7c4:	bf08      	it	eq
 800f7c6:	68f5      	ldreq	r5, [r6, #12]
 800f7c8:	e7da      	b.n	800f780 <_vfiprintf_r+0x20>
 800f7ca:	89ab      	ldrh	r3, [r5, #12]
 800f7cc:	0598      	lsls	r0, r3, #22
 800f7ce:	d4ed      	bmi.n	800f7ac <_vfiprintf_r+0x4c>
 800f7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7d2:	f000 fb84 	bl	800fede <__retarget_lock_release_recursive>
 800f7d6:	e7e9      	b.n	800f7ac <_vfiprintf_r+0x4c>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	9309      	str	r3, [sp, #36]	; 0x24
 800f7dc:	2320      	movs	r3, #32
 800f7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7e6:	2330      	movs	r3, #48	; 0x30
 800f7e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9ac <_vfiprintf_r+0x24c>
 800f7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7f0:	f04f 0901 	mov.w	r9, #1
 800f7f4:	4623      	mov	r3, r4
 800f7f6:	469a      	mov	sl, r3
 800f7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7fc:	b10a      	cbz	r2, 800f802 <_vfiprintf_r+0xa2>
 800f7fe:	2a25      	cmp	r2, #37	; 0x25
 800f800:	d1f9      	bne.n	800f7f6 <_vfiprintf_r+0x96>
 800f802:	ebba 0b04 	subs.w	fp, sl, r4
 800f806:	d00b      	beq.n	800f820 <_vfiprintf_r+0xc0>
 800f808:	465b      	mov	r3, fp
 800f80a:	4622      	mov	r2, r4
 800f80c:	4629      	mov	r1, r5
 800f80e:	4630      	mov	r0, r6
 800f810:	f7ff ff94 	bl	800f73c <__sfputs_r>
 800f814:	3001      	adds	r0, #1
 800f816:	f000 80aa 	beq.w	800f96e <_vfiprintf_r+0x20e>
 800f81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f81c:	445a      	add	r2, fp
 800f81e:	9209      	str	r2, [sp, #36]	; 0x24
 800f820:	f89a 3000 	ldrb.w	r3, [sl]
 800f824:	2b00      	cmp	r3, #0
 800f826:	f000 80a2 	beq.w	800f96e <_vfiprintf_r+0x20e>
 800f82a:	2300      	movs	r3, #0
 800f82c:	f04f 32ff 	mov.w	r2, #4294967295
 800f830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f834:	f10a 0a01 	add.w	sl, sl, #1
 800f838:	9304      	str	r3, [sp, #16]
 800f83a:	9307      	str	r3, [sp, #28]
 800f83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f840:	931a      	str	r3, [sp, #104]	; 0x68
 800f842:	4654      	mov	r4, sl
 800f844:	2205      	movs	r2, #5
 800f846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f84a:	4858      	ldr	r0, [pc, #352]	; (800f9ac <_vfiprintf_r+0x24c>)
 800f84c:	f7f0 fd50 	bl	80002f0 <memchr>
 800f850:	9a04      	ldr	r2, [sp, #16]
 800f852:	b9d8      	cbnz	r0, 800f88c <_vfiprintf_r+0x12c>
 800f854:	06d1      	lsls	r1, r2, #27
 800f856:	bf44      	itt	mi
 800f858:	2320      	movmi	r3, #32
 800f85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f85e:	0713      	lsls	r3, r2, #28
 800f860:	bf44      	itt	mi
 800f862:	232b      	movmi	r3, #43	; 0x2b
 800f864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f868:	f89a 3000 	ldrb.w	r3, [sl]
 800f86c:	2b2a      	cmp	r3, #42	; 0x2a
 800f86e:	d015      	beq.n	800f89c <_vfiprintf_r+0x13c>
 800f870:	9a07      	ldr	r2, [sp, #28]
 800f872:	4654      	mov	r4, sl
 800f874:	2000      	movs	r0, #0
 800f876:	f04f 0c0a 	mov.w	ip, #10
 800f87a:	4621      	mov	r1, r4
 800f87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f880:	3b30      	subs	r3, #48	; 0x30
 800f882:	2b09      	cmp	r3, #9
 800f884:	d94e      	bls.n	800f924 <_vfiprintf_r+0x1c4>
 800f886:	b1b0      	cbz	r0, 800f8b6 <_vfiprintf_r+0x156>
 800f888:	9207      	str	r2, [sp, #28]
 800f88a:	e014      	b.n	800f8b6 <_vfiprintf_r+0x156>
 800f88c:	eba0 0308 	sub.w	r3, r0, r8
 800f890:	fa09 f303 	lsl.w	r3, r9, r3
 800f894:	4313      	orrs	r3, r2
 800f896:	9304      	str	r3, [sp, #16]
 800f898:	46a2      	mov	sl, r4
 800f89a:	e7d2      	b.n	800f842 <_vfiprintf_r+0xe2>
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	1d19      	adds	r1, r3, #4
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	9103      	str	r1, [sp, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	bfbb      	ittet	lt
 800f8a8:	425b      	neglt	r3, r3
 800f8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f8ae:	9307      	strge	r3, [sp, #28]
 800f8b0:	9307      	strlt	r3, [sp, #28]
 800f8b2:	bfb8      	it	lt
 800f8b4:	9204      	strlt	r2, [sp, #16]
 800f8b6:	7823      	ldrb	r3, [r4, #0]
 800f8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8ba:	d10c      	bne.n	800f8d6 <_vfiprintf_r+0x176>
 800f8bc:	7863      	ldrb	r3, [r4, #1]
 800f8be:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c0:	d135      	bne.n	800f92e <_vfiprintf_r+0x1ce>
 800f8c2:	9b03      	ldr	r3, [sp, #12]
 800f8c4:	1d1a      	adds	r2, r3, #4
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	9203      	str	r2, [sp, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfb8      	it	lt
 800f8ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8d2:	3402      	adds	r4, #2
 800f8d4:	9305      	str	r3, [sp, #20]
 800f8d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f9bc <_vfiprintf_r+0x25c>
 800f8da:	7821      	ldrb	r1, [r4, #0]
 800f8dc:	2203      	movs	r2, #3
 800f8de:	4650      	mov	r0, sl
 800f8e0:	f7f0 fd06 	bl	80002f0 <memchr>
 800f8e4:	b140      	cbz	r0, 800f8f8 <_vfiprintf_r+0x198>
 800f8e6:	2340      	movs	r3, #64	; 0x40
 800f8e8:	eba0 000a 	sub.w	r0, r0, sl
 800f8ec:	fa03 f000 	lsl.w	r0, r3, r0
 800f8f0:	9b04      	ldr	r3, [sp, #16]
 800f8f2:	4303      	orrs	r3, r0
 800f8f4:	3401      	adds	r4, #1
 800f8f6:	9304      	str	r3, [sp, #16]
 800f8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8fc:	482c      	ldr	r0, [pc, #176]	; (800f9b0 <_vfiprintf_r+0x250>)
 800f8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f902:	2206      	movs	r2, #6
 800f904:	f7f0 fcf4 	bl	80002f0 <memchr>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d03f      	beq.n	800f98c <_vfiprintf_r+0x22c>
 800f90c:	4b29      	ldr	r3, [pc, #164]	; (800f9b4 <_vfiprintf_r+0x254>)
 800f90e:	bb1b      	cbnz	r3, 800f958 <_vfiprintf_r+0x1f8>
 800f910:	9b03      	ldr	r3, [sp, #12]
 800f912:	3307      	adds	r3, #7
 800f914:	f023 0307 	bic.w	r3, r3, #7
 800f918:	3308      	adds	r3, #8
 800f91a:	9303      	str	r3, [sp, #12]
 800f91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f91e:	443b      	add	r3, r7
 800f920:	9309      	str	r3, [sp, #36]	; 0x24
 800f922:	e767      	b.n	800f7f4 <_vfiprintf_r+0x94>
 800f924:	fb0c 3202 	mla	r2, ip, r2, r3
 800f928:	460c      	mov	r4, r1
 800f92a:	2001      	movs	r0, #1
 800f92c:	e7a5      	b.n	800f87a <_vfiprintf_r+0x11a>
 800f92e:	2300      	movs	r3, #0
 800f930:	3401      	adds	r4, #1
 800f932:	9305      	str	r3, [sp, #20]
 800f934:	4619      	mov	r1, r3
 800f936:	f04f 0c0a 	mov.w	ip, #10
 800f93a:	4620      	mov	r0, r4
 800f93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f940:	3a30      	subs	r2, #48	; 0x30
 800f942:	2a09      	cmp	r2, #9
 800f944:	d903      	bls.n	800f94e <_vfiprintf_r+0x1ee>
 800f946:	2b00      	cmp	r3, #0
 800f948:	d0c5      	beq.n	800f8d6 <_vfiprintf_r+0x176>
 800f94a:	9105      	str	r1, [sp, #20]
 800f94c:	e7c3      	b.n	800f8d6 <_vfiprintf_r+0x176>
 800f94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f952:	4604      	mov	r4, r0
 800f954:	2301      	movs	r3, #1
 800f956:	e7f0      	b.n	800f93a <_vfiprintf_r+0x1da>
 800f958:	ab03      	add	r3, sp, #12
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	462a      	mov	r2, r5
 800f95e:	4b16      	ldr	r3, [pc, #88]	; (800f9b8 <_vfiprintf_r+0x258>)
 800f960:	a904      	add	r1, sp, #16
 800f962:	4630      	mov	r0, r6
 800f964:	f7fd fe48 	bl	800d5f8 <_printf_float>
 800f968:	4607      	mov	r7, r0
 800f96a:	1c78      	adds	r0, r7, #1
 800f96c:	d1d6      	bne.n	800f91c <_vfiprintf_r+0x1bc>
 800f96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f970:	07d9      	lsls	r1, r3, #31
 800f972:	d405      	bmi.n	800f980 <_vfiprintf_r+0x220>
 800f974:	89ab      	ldrh	r3, [r5, #12]
 800f976:	059a      	lsls	r2, r3, #22
 800f978:	d402      	bmi.n	800f980 <_vfiprintf_r+0x220>
 800f97a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f97c:	f000 faaf 	bl	800fede <__retarget_lock_release_recursive>
 800f980:	89ab      	ldrh	r3, [r5, #12]
 800f982:	065b      	lsls	r3, r3, #25
 800f984:	f53f af12 	bmi.w	800f7ac <_vfiprintf_r+0x4c>
 800f988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f98a:	e711      	b.n	800f7b0 <_vfiprintf_r+0x50>
 800f98c:	ab03      	add	r3, sp, #12
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	462a      	mov	r2, r5
 800f992:	4b09      	ldr	r3, [pc, #36]	; (800f9b8 <_vfiprintf_r+0x258>)
 800f994:	a904      	add	r1, sp, #16
 800f996:	4630      	mov	r0, r6
 800f998:	f7fe f8ba 	bl	800db10 <_printf_i>
 800f99c:	e7e4      	b.n	800f968 <_vfiprintf_r+0x208>
 800f99e:	bf00      	nop
 800f9a0:	08010e6c 	.word	0x08010e6c
 800f9a4:	08010e8c 	.word	0x08010e8c
 800f9a8:	08010e4c 	.word	0x08010e4c
 800f9ac:	08010cf4 	.word	0x08010cf4
 800f9b0:	08010cfe 	.word	0x08010cfe
 800f9b4:	0800d5f9 	.word	0x0800d5f9
 800f9b8:	0800f73d 	.word	0x0800f73d
 800f9bc:	08010cfa 	.word	0x08010cfa

0800f9c0 <__swbuf_r>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	460e      	mov	r6, r1
 800f9c4:	4614      	mov	r4, r2
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	b118      	cbz	r0, 800f9d2 <__swbuf_r+0x12>
 800f9ca:	6983      	ldr	r3, [r0, #24]
 800f9cc:	b90b      	cbnz	r3, 800f9d2 <__swbuf_r+0x12>
 800f9ce:	f000 f9e7 	bl	800fda0 <__sinit>
 800f9d2:	4b21      	ldr	r3, [pc, #132]	; (800fa58 <__swbuf_r+0x98>)
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	d12b      	bne.n	800fa30 <__swbuf_r+0x70>
 800f9d8:	686c      	ldr	r4, [r5, #4]
 800f9da:	69a3      	ldr	r3, [r4, #24]
 800f9dc:	60a3      	str	r3, [r4, #8]
 800f9de:	89a3      	ldrh	r3, [r4, #12]
 800f9e0:	071a      	lsls	r2, r3, #28
 800f9e2:	d52f      	bpl.n	800fa44 <__swbuf_r+0x84>
 800f9e4:	6923      	ldr	r3, [r4, #16]
 800f9e6:	b36b      	cbz	r3, 800fa44 <__swbuf_r+0x84>
 800f9e8:	6923      	ldr	r3, [r4, #16]
 800f9ea:	6820      	ldr	r0, [r4, #0]
 800f9ec:	1ac0      	subs	r0, r0, r3
 800f9ee:	6963      	ldr	r3, [r4, #20]
 800f9f0:	b2f6      	uxtb	r6, r6
 800f9f2:	4283      	cmp	r3, r0
 800f9f4:	4637      	mov	r7, r6
 800f9f6:	dc04      	bgt.n	800fa02 <__swbuf_r+0x42>
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f000 f93c 	bl	800fc78 <_fflush_r>
 800fa00:	bb30      	cbnz	r0, 800fa50 <__swbuf_r+0x90>
 800fa02:	68a3      	ldr	r3, [r4, #8]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	60a3      	str	r3, [r4, #8]
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	1c5a      	adds	r2, r3, #1
 800fa0c:	6022      	str	r2, [r4, #0]
 800fa0e:	701e      	strb	r6, [r3, #0]
 800fa10:	6963      	ldr	r3, [r4, #20]
 800fa12:	3001      	adds	r0, #1
 800fa14:	4283      	cmp	r3, r0
 800fa16:	d004      	beq.n	800fa22 <__swbuf_r+0x62>
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	07db      	lsls	r3, r3, #31
 800fa1c:	d506      	bpl.n	800fa2c <__swbuf_r+0x6c>
 800fa1e:	2e0a      	cmp	r6, #10
 800fa20:	d104      	bne.n	800fa2c <__swbuf_r+0x6c>
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	f000 f927 	bl	800fc78 <_fflush_r>
 800fa2a:	b988      	cbnz	r0, 800fa50 <__swbuf_r+0x90>
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa30:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <__swbuf_r+0x9c>)
 800fa32:	429c      	cmp	r4, r3
 800fa34:	d101      	bne.n	800fa3a <__swbuf_r+0x7a>
 800fa36:	68ac      	ldr	r4, [r5, #8]
 800fa38:	e7cf      	b.n	800f9da <__swbuf_r+0x1a>
 800fa3a:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <__swbuf_r+0xa0>)
 800fa3c:	429c      	cmp	r4, r3
 800fa3e:	bf08      	it	eq
 800fa40:	68ec      	ldreq	r4, [r5, #12]
 800fa42:	e7ca      	b.n	800f9da <__swbuf_r+0x1a>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4628      	mov	r0, r5
 800fa48:	f000 f81a 	bl	800fa80 <__swsetup_r>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d0cb      	beq.n	800f9e8 <__swbuf_r+0x28>
 800fa50:	f04f 37ff 	mov.w	r7, #4294967295
 800fa54:	e7ea      	b.n	800fa2c <__swbuf_r+0x6c>
 800fa56:	bf00      	nop
 800fa58:	08010e6c 	.word	0x08010e6c
 800fa5c:	08010e8c 	.word	0x08010e8c
 800fa60:	08010e4c 	.word	0x08010e4c

0800fa64 <__ascii_wctomb>:
 800fa64:	b149      	cbz	r1, 800fa7a <__ascii_wctomb+0x16>
 800fa66:	2aff      	cmp	r2, #255	; 0xff
 800fa68:	bf85      	ittet	hi
 800fa6a:	238a      	movhi	r3, #138	; 0x8a
 800fa6c:	6003      	strhi	r3, [r0, #0]
 800fa6e:	700a      	strbls	r2, [r1, #0]
 800fa70:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa74:	bf98      	it	ls
 800fa76:	2001      	movls	r0, #1
 800fa78:	4770      	bx	lr
 800fa7a:	4608      	mov	r0, r1
 800fa7c:	4770      	bx	lr
	...

0800fa80 <__swsetup_r>:
 800fa80:	4b32      	ldr	r3, [pc, #200]	; (800fb4c <__swsetup_r+0xcc>)
 800fa82:	b570      	push	{r4, r5, r6, lr}
 800fa84:	681d      	ldr	r5, [r3, #0]
 800fa86:	4606      	mov	r6, r0
 800fa88:	460c      	mov	r4, r1
 800fa8a:	b125      	cbz	r5, 800fa96 <__swsetup_r+0x16>
 800fa8c:	69ab      	ldr	r3, [r5, #24]
 800fa8e:	b913      	cbnz	r3, 800fa96 <__swsetup_r+0x16>
 800fa90:	4628      	mov	r0, r5
 800fa92:	f000 f985 	bl	800fda0 <__sinit>
 800fa96:	4b2e      	ldr	r3, [pc, #184]	; (800fb50 <__swsetup_r+0xd0>)
 800fa98:	429c      	cmp	r4, r3
 800fa9a:	d10f      	bne.n	800fabc <__swsetup_r+0x3c>
 800fa9c:	686c      	ldr	r4, [r5, #4]
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800faa4:	0719      	lsls	r1, r3, #28
 800faa6:	d42c      	bmi.n	800fb02 <__swsetup_r+0x82>
 800faa8:	06dd      	lsls	r5, r3, #27
 800faaa:	d411      	bmi.n	800fad0 <__swsetup_r+0x50>
 800faac:	2309      	movs	r3, #9
 800faae:	6033      	str	r3, [r6, #0]
 800fab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fab4:	81a3      	strh	r3, [r4, #12]
 800fab6:	f04f 30ff 	mov.w	r0, #4294967295
 800faba:	e03e      	b.n	800fb3a <__swsetup_r+0xba>
 800fabc:	4b25      	ldr	r3, [pc, #148]	; (800fb54 <__swsetup_r+0xd4>)
 800fabe:	429c      	cmp	r4, r3
 800fac0:	d101      	bne.n	800fac6 <__swsetup_r+0x46>
 800fac2:	68ac      	ldr	r4, [r5, #8]
 800fac4:	e7eb      	b.n	800fa9e <__swsetup_r+0x1e>
 800fac6:	4b24      	ldr	r3, [pc, #144]	; (800fb58 <__swsetup_r+0xd8>)
 800fac8:	429c      	cmp	r4, r3
 800faca:	bf08      	it	eq
 800facc:	68ec      	ldreq	r4, [r5, #12]
 800face:	e7e6      	b.n	800fa9e <__swsetup_r+0x1e>
 800fad0:	0758      	lsls	r0, r3, #29
 800fad2:	d512      	bpl.n	800fafa <__swsetup_r+0x7a>
 800fad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fad6:	b141      	cbz	r1, 800faea <__swsetup_r+0x6a>
 800fad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fadc:	4299      	cmp	r1, r3
 800fade:	d002      	beq.n	800fae6 <__swsetup_r+0x66>
 800fae0:	4630      	mov	r0, r6
 800fae2:	f7ff fb31 	bl	800f148 <_free_r>
 800fae6:	2300      	movs	r3, #0
 800fae8:	6363      	str	r3, [r4, #52]	; 0x34
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	2300      	movs	r3, #0
 800faf4:	6063      	str	r3, [r4, #4]
 800faf6:	6923      	ldr	r3, [r4, #16]
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	89a3      	ldrh	r3, [r4, #12]
 800fafc:	f043 0308 	orr.w	r3, r3, #8
 800fb00:	81a3      	strh	r3, [r4, #12]
 800fb02:	6923      	ldr	r3, [r4, #16]
 800fb04:	b94b      	cbnz	r3, 800fb1a <__swsetup_r+0x9a>
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb10:	d003      	beq.n	800fb1a <__swsetup_r+0x9a>
 800fb12:	4621      	mov	r1, r4
 800fb14:	4630      	mov	r0, r6
 800fb16:	f000 fa09 	bl	800ff2c <__smakebuf_r>
 800fb1a:	89a0      	ldrh	r0, [r4, #12]
 800fb1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb20:	f010 0301 	ands.w	r3, r0, #1
 800fb24:	d00a      	beq.n	800fb3c <__swsetup_r+0xbc>
 800fb26:	2300      	movs	r3, #0
 800fb28:	60a3      	str	r3, [r4, #8]
 800fb2a:	6963      	ldr	r3, [r4, #20]
 800fb2c:	425b      	negs	r3, r3
 800fb2e:	61a3      	str	r3, [r4, #24]
 800fb30:	6923      	ldr	r3, [r4, #16]
 800fb32:	b943      	cbnz	r3, 800fb46 <__swsetup_r+0xc6>
 800fb34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb38:	d1ba      	bne.n	800fab0 <__swsetup_r+0x30>
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
 800fb3c:	0781      	lsls	r1, r0, #30
 800fb3e:	bf58      	it	pl
 800fb40:	6963      	ldrpl	r3, [r4, #20]
 800fb42:	60a3      	str	r3, [r4, #8]
 800fb44:	e7f4      	b.n	800fb30 <__swsetup_r+0xb0>
 800fb46:	2000      	movs	r0, #0
 800fb48:	e7f7      	b.n	800fb3a <__swsetup_r+0xba>
 800fb4a:	bf00      	nop
 800fb4c:	24000010 	.word	0x24000010
 800fb50:	08010e6c 	.word	0x08010e6c
 800fb54:	08010e8c 	.word	0x08010e8c
 800fb58:	08010e4c 	.word	0x08010e4c

0800fb5c <abort>:
 800fb5c:	b508      	push	{r3, lr}
 800fb5e:	2006      	movs	r0, #6
 800fb60:	f000 fa54 	bl	801000c <raise>
 800fb64:	2001      	movs	r0, #1
 800fb66:	f7f1 fdad 	bl	80016c4 <_exit>
	...

0800fb6c <__sflush_r>:
 800fb6c:	898a      	ldrh	r2, [r1, #12]
 800fb6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb72:	4605      	mov	r5, r0
 800fb74:	0710      	lsls	r0, r2, #28
 800fb76:	460c      	mov	r4, r1
 800fb78:	d458      	bmi.n	800fc2c <__sflush_r+0xc0>
 800fb7a:	684b      	ldr	r3, [r1, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	dc05      	bgt.n	800fb8c <__sflush_r+0x20>
 800fb80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	dc02      	bgt.n	800fb8c <__sflush_r+0x20>
 800fb86:	2000      	movs	r0, #0
 800fb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb8e:	2e00      	cmp	r6, #0
 800fb90:	d0f9      	beq.n	800fb86 <__sflush_r+0x1a>
 800fb92:	2300      	movs	r3, #0
 800fb94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb98:	682f      	ldr	r7, [r5, #0]
 800fb9a:	602b      	str	r3, [r5, #0]
 800fb9c:	d032      	beq.n	800fc04 <__sflush_r+0x98>
 800fb9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	075a      	lsls	r2, r3, #29
 800fba4:	d505      	bpl.n	800fbb2 <__sflush_r+0x46>
 800fba6:	6863      	ldr	r3, [r4, #4]
 800fba8:	1ac0      	subs	r0, r0, r3
 800fbaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbac:	b10b      	cbz	r3, 800fbb2 <__sflush_r+0x46>
 800fbae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbb0:	1ac0      	subs	r0, r0, r3
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbb8:	6a21      	ldr	r1, [r4, #32]
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b0      	blx	r6
 800fbbe:	1c43      	adds	r3, r0, #1
 800fbc0:	89a3      	ldrh	r3, [r4, #12]
 800fbc2:	d106      	bne.n	800fbd2 <__sflush_r+0x66>
 800fbc4:	6829      	ldr	r1, [r5, #0]
 800fbc6:	291d      	cmp	r1, #29
 800fbc8:	d82c      	bhi.n	800fc24 <__sflush_r+0xb8>
 800fbca:	4a2a      	ldr	r2, [pc, #168]	; (800fc74 <__sflush_r+0x108>)
 800fbcc:	40ca      	lsrs	r2, r1
 800fbce:	07d6      	lsls	r6, r2, #31
 800fbd0:	d528      	bpl.n	800fc24 <__sflush_r+0xb8>
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	6062      	str	r2, [r4, #4]
 800fbd6:	04d9      	lsls	r1, r3, #19
 800fbd8:	6922      	ldr	r2, [r4, #16]
 800fbda:	6022      	str	r2, [r4, #0]
 800fbdc:	d504      	bpl.n	800fbe8 <__sflush_r+0x7c>
 800fbde:	1c42      	adds	r2, r0, #1
 800fbe0:	d101      	bne.n	800fbe6 <__sflush_r+0x7a>
 800fbe2:	682b      	ldr	r3, [r5, #0]
 800fbe4:	b903      	cbnz	r3, 800fbe8 <__sflush_r+0x7c>
 800fbe6:	6560      	str	r0, [r4, #84]	; 0x54
 800fbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbea:	602f      	str	r7, [r5, #0]
 800fbec:	2900      	cmp	r1, #0
 800fbee:	d0ca      	beq.n	800fb86 <__sflush_r+0x1a>
 800fbf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbf4:	4299      	cmp	r1, r3
 800fbf6:	d002      	beq.n	800fbfe <__sflush_r+0x92>
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	f7ff faa5 	bl	800f148 <_free_r>
 800fbfe:	2000      	movs	r0, #0
 800fc00:	6360      	str	r0, [r4, #52]	; 0x34
 800fc02:	e7c1      	b.n	800fb88 <__sflush_r+0x1c>
 800fc04:	6a21      	ldr	r1, [r4, #32]
 800fc06:	2301      	movs	r3, #1
 800fc08:	4628      	mov	r0, r5
 800fc0a:	47b0      	blx	r6
 800fc0c:	1c41      	adds	r1, r0, #1
 800fc0e:	d1c7      	bne.n	800fba0 <__sflush_r+0x34>
 800fc10:	682b      	ldr	r3, [r5, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d0c4      	beq.n	800fba0 <__sflush_r+0x34>
 800fc16:	2b1d      	cmp	r3, #29
 800fc18:	d001      	beq.n	800fc1e <__sflush_r+0xb2>
 800fc1a:	2b16      	cmp	r3, #22
 800fc1c:	d101      	bne.n	800fc22 <__sflush_r+0xb6>
 800fc1e:	602f      	str	r7, [r5, #0]
 800fc20:	e7b1      	b.n	800fb86 <__sflush_r+0x1a>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc28:	81a3      	strh	r3, [r4, #12]
 800fc2a:	e7ad      	b.n	800fb88 <__sflush_r+0x1c>
 800fc2c:	690f      	ldr	r7, [r1, #16]
 800fc2e:	2f00      	cmp	r7, #0
 800fc30:	d0a9      	beq.n	800fb86 <__sflush_r+0x1a>
 800fc32:	0793      	lsls	r3, r2, #30
 800fc34:	680e      	ldr	r6, [r1, #0]
 800fc36:	bf08      	it	eq
 800fc38:	694b      	ldreq	r3, [r1, #20]
 800fc3a:	600f      	str	r7, [r1, #0]
 800fc3c:	bf18      	it	ne
 800fc3e:	2300      	movne	r3, #0
 800fc40:	eba6 0807 	sub.w	r8, r6, r7
 800fc44:	608b      	str	r3, [r1, #8]
 800fc46:	f1b8 0f00 	cmp.w	r8, #0
 800fc4a:	dd9c      	ble.n	800fb86 <__sflush_r+0x1a>
 800fc4c:	6a21      	ldr	r1, [r4, #32]
 800fc4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc50:	4643      	mov	r3, r8
 800fc52:	463a      	mov	r2, r7
 800fc54:	4628      	mov	r0, r5
 800fc56:	47b0      	blx	r6
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	dc06      	bgt.n	800fc6a <__sflush_r+0xfe>
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc62:	81a3      	strh	r3, [r4, #12]
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	e78e      	b.n	800fb88 <__sflush_r+0x1c>
 800fc6a:	4407      	add	r7, r0
 800fc6c:	eba8 0800 	sub.w	r8, r8, r0
 800fc70:	e7e9      	b.n	800fc46 <__sflush_r+0xda>
 800fc72:	bf00      	nop
 800fc74:	20400001 	.word	0x20400001

0800fc78 <_fflush_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	690b      	ldr	r3, [r1, #16]
 800fc7c:	4605      	mov	r5, r0
 800fc7e:	460c      	mov	r4, r1
 800fc80:	b913      	cbnz	r3, 800fc88 <_fflush_r+0x10>
 800fc82:	2500      	movs	r5, #0
 800fc84:	4628      	mov	r0, r5
 800fc86:	bd38      	pop	{r3, r4, r5, pc}
 800fc88:	b118      	cbz	r0, 800fc92 <_fflush_r+0x1a>
 800fc8a:	6983      	ldr	r3, [r0, #24]
 800fc8c:	b90b      	cbnz	r3, 800fc92 <_fflush_r+0x1a>
 800fc8e:	f000 f887 	bl	800fda0 <__sinit>
 800fc92:	4b14      	ldr	r3, [pc, #80]	; (800fce4 <_fflush_r+0x6c>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	d11b      	bne.n	800fcd0 <_fflush_r+0x58>
 800fc98:	686c      	ldr	r4, [r5, #4]
 800fc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d0ef      	beq.n	800fc82 <_fflush_r+0xa>
 800fca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fca4:	07d0      	lsls	r0, r2, #31
 800fca6:	d404      	bmi.n	800fcb2 <_fflush_r+0x3a>
 800fca8:	0599      	lsls	r1, r3, #22
 800fcaa:	d402      	bmi.n	800fcb2 <_fflush_r+0x3a>
 800fcac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcae:	f000 f915 	bl	800fedc <__retarget_lock_acquire_recursive>
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	f7ff ff59 	bl	800fb6c <__sflush_r>
 800fcba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcbc:	07da      	lsls	r2, r3, #31
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	d4e0      	bmi.n	800fc84 <_fflush_r+0xc>
 800fcc2:	89a3      	ldrh	r3, [r4, #12]
 800fcc4:	059b      	lsls	r3, r3, #22
 800fcc6:	d4dd      	bmi.n	800fc84 <_fflush_r+0xc>
 800fcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcca:	f000 f908 	bl	800fede <__retarget_lock_release_recursive>
 800fcce:	e7d9      	b.n	800fc84 <_fflush_r+0xc>
 800fcd0:	4b05      	ldr	r3, [pc, #20]	; (800fce8 <_fflush_r+0x70>)
 800fcd2:	429c      	cmp	r4, r3
 800fcd4:	d101      	bne.n	800fcda <_fflush_r+0x62>
 800fcd6:	68ac      	ldr	r4, [r5, #8]
 800fcd8:	e7df      	b.n	800fc9a <_fflush_r+0x22>
 800fcda:	4b04      	ldr	r3, [pc, #16]	; (800fcec <_fflush_r+0x74>)
 800fcdc:	429c      	cmp	r4, r3
 800fcde:	bf08      	it	eq
 800fce0:	68ec      	ldreq	r4, [r5, #12]
 800fce2:	e7da      	b.n	800fc9a <_fflush_r+0x22>
 800fce4:	08010e6c 	.word	0x08010e6c
 800fce8:	08010e8c 	.word	0x08010e8c
 800fcec:	08010e4c 	.word	0x08010e4c

0800fcf0 <std>:
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	b510      	push	{r4, lr}
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	e9c0 3300 	strd	r3, r3, [r0]
 800fcfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcfe:	6083      	str	r3, [r0, #8]
 800fd00:	8181      	strh	r1, [r0, #12]
 800fd02:	6643      	str	r3, [r0, #100]	; 0x64
 800fd04:	81c2      	strh	r2, [r0, #14]
 800fd06:	6183      	str	r3, [r0, #24]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	2208      	movs	r2, #8
 800fd0c:	305c      	adds	r0, #92	; 0x5c
 800fd0e:	f7fd fbdb 	bl	800d4c8 <memset>
 800fd12:	4b05      	ldr	r3, [pc, #20]	; (800fd28 <std+0x38>)
 800fd14:	6263      	str	r3, [r4, #36]	; 0x24
 800fd16:	4b05      	ldr	r3, [pc, #20]	; (800fd2c <std+0x3c>)
 800fd18:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd1a:	4b05      	ldr	r3, [pc, #20]	; (800fd30 <std+0x40>)
 800fd1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd1e:	4b05      	ldr	r3, [pc, #20]	; (800fd34 <std+0x44>)
 800fd20:	6224      	str	r4, [r4, #32]
 800fd22:	6323      	str	r3, [r4, #48]	; 0x30
 800fd24:	bd10      	pop	{r4, pc}
 800fd26:	bf00      	nop
 800fd28:	08010045 	.word	0x08010045
 800fd2c:	08010067 	.word	0x08010067
 800fd30:	0801009f 	.word	0x0801009f
 800fd34:	080100c3 	.word	0x080100c3

0800fd38 <_cleanup_r>:
 800fd38:	4901      	ldr	r1, [pc, #4]	; (800fd40 <_cleanup_r+0x8>)
 800fd3a:	f000 b8af 	b.w	800fe9c <_fwalk_reent>
 800fd3e:	bf00      	nop
 800fd40:	0800fc79 	.word	0x0800fc79

0800fd44 <__sfmoreglue>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	2268      	movs	r2, #104	; 0x68
 800fd48:	1e4d      	subs	r5, r1, #1
 800fd4a:	4355      	muls	r5, r2
 800fd4c:	460e      	mov	r6, r1
 800fd4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd52:	f7ff fa65 	bl	800f220 <_malloc_r>
 800fd56:	4604      	mov	r4, r0
 800fd58:	b140      	cbz	r0, 800fd6c <__sfmoreglue+0x28>
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	e9c0 1600 	strd	r1, r6, [r0]
 800fd60:	300c      	adds	r0, #12
 800fd62:	60a0      	str	r0, [r4, #8]
 800fd64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd68:	f7fd fbae 	bl	800d4c8 <memset>
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}

0800fd70 <__sfp_lock_acquire>:
 800fd70:	4801      	ldr	r0, [pc, #4]	; (800fd78 <__sfp_lock_acquire+0x8>)
 800fd72:	f000 b8b3 	b.w	800fedc <__retarget_lock_acquire_recursive>
 800fd76:	bf00      	nop
 800fd78:	24001a79 	.word	0x24001a79

0800fd7c <__sfp_lock_release>:
 800fd7c:	4801      	ldr	r0, [pc, #4]	; (800fd84 <__sfp_lock_release+0x8>)
 800fd7e:	f000 b8ae 	b.w	800fede <__retarget_lock_release_recursive>
 800fd82:	bf00      	nop
 800fd84:	24001a79 	.word	0x24001a79

0800fd88 <__sinit_lock_acquire>:
 800fd88:	4801      	ldr	r0, [pc, #4]	; (800fd90 <__sinit_lock_acquire+0x8>)
 800fd8a:	f000 b8a7 	b.w	800fedc <__retarget_lock_acquire_recursive>
 800fd8e:	bf00      	nop
 800fd90:	24001a7a 	.word	0x24001a7a

0800fd94 <__sinit_lock_release>:
 800fd94:	4801      	ldr	r0, [pc, #4]	; (800fd9c <__sinit_lock_release+0x8>)
 800fd96:	f000 b8a2 	b.w	800fede <__retarget_lock_release_recursive>
 800fd9a:	bf00      	nop
 800fd9c:	24001a7a 	.word	0x24001a7a

0800fda0 <__sinit>:
 800fda0:	b510      	push	{r4, lr}
 800fda2:	4604      	mov	r4, r0
 800fda4:	f7ff fff0 	bl	800fd88 <__sinit_lock_acquire>
 800fda8:	69a3      	ldr	r3, [r4, #24]
 800fdaa:	b11b      	cbz	r3, 800fdb4 <__sinit+0x14>
 800fdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdb0:	f7ff bff0 	b.w	800fd94 <__sinit_lock_release>
 800fdb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fdb8:	6523      	str	r3, [r4, #80]	; 0x50
 800fdba:	4b13      	ldr	r3, [pc, #76]	; (800fe08 <__sinit+0x68>)
 800fdbc:	4a13      	ldr	r2, [pc, #76]	; (800fe0c <__sinit+0x6c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fdc2:	42a3      	cmp	r3, r4
 800fdc4:	bf04      	itt	eq
 800fdc6:	2301      	moveq	r3, #1
 800fdc8:	61a3      	streq	r3, [r4, #24]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 f820 	bl	800fe10 <__sfp>
 800fdd0:	6060      	str	r0, [r4, #4]
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 f81c 	bl	800fe10 <__sfp>
 800fdd8:	60a0      	str	r0, [r4, #8]
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 f818 	bl	800fe10 <__sfp>
 800fde0:	2200      	movs	r2, #0
 800fde2:	60e0      	str	r0, [r4, #12]
 800fde4:	2104      	movs	r1, #4
 800fde6:	6860      	ldr	r0, [r4, #4]
 800fde8:	f7ff ff82 	bl	800fcf0 <std>
 800fdec:	68a0      	ldr	r0, [r4, #8]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	2109      	movs	r1, #9
 800fdf2:	f7ff ff7d 	bl	800fcf0 <std>
 800fdf6:	68e0      	ldr	r0, [r4, #12]
 800fdf8:	2202      	movs	r2, #2
 800fdfa:	2112      	movs	r1, #18
 800fdfc:	f7ff ff78 	bl	800fcf0 <std>
 800fe00:	2301      	movs	r3, #1
 800fe02:	61a3      	str	r3, [r4, #24]
 800fe04:	e7d2      	b.n	800fdac <__sinit+0xc>
 800fe06:	bf00      	nop
 800fe08:	08010ad4 	.word	0x08010ad4
 800fe0c:	0800fd39 	.word	0x0800fd39

0800fe10 <__sfp>:
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	4607      	mov	r7, r0
 800fe14:	f7ff ffac 	bl	800fd70 <__sfp_lock_acquire>
 800fe18:	4b1e      	ldr	r3, [pc, #120]	; (800fe94 <__sfp+0x84>)
 800fe1a:	681e      	ldr	r6, [r3, #0]
 800fe1c:	69b3      	ldr	r3, [r6, #24]
 800fe1e:	b913      	cbnz	r3, 800fe26 <__sfp+0x16>
 800fe20:	4630      	mov	r0, r6
 800fe22:	f7ff ffbd 	bl	800fda0 <__sinit>
 800fe26:	3648      	adds	r6, #72	; 0x48
 800fe28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	d503      	bpl.n	800fe38 <__sfp+0x28>
 800fe30:	6833      	ldr	r3, [r6, #0]
 800fe32:	b30b      	cbz	r3, 800fe78 <__sfp+0x68>
 800fe34:	6836      	ldr	r6, [r6, #0]
 800fe36:	e7f7      	b.n	800fe28 <__sfp+0x18>
 800fe38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe3c:	b9d5      	cbnz	r5, 800fe74 <__sfp+0x64>
 800fe3e:	4b16      	ldr	r3, [pc, #88]	; (800fe98 <__sfp+0x88>)
 800fe40:	60e3      	str	r3, [r4, #12]
 800fe42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe46:	6665      	str	r5, [r4, #100]	; 0x64
 800fe48:	f000 f847 	bl	800feda <__retarget_lock_init_recursive>
 800fe4c:	f7ff ff96 	bl	800fd7c <__sfp_lock_release>
 800fe50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe58:	6025      	str	r5, [r4, #0]
 800fe5a:	61a5      	str	r5, [r4, #24]
 800fe5c:	2208      	movs	r2, #8
 800fe5e:	4629      	mov	r1, r5
 800fe60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe64:	f7fd fb30 	bl	800d4c8 <memset>
 800fe68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe70:	4620      	mov	r0, r4
 800fe72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe74:	3468      	adds	r4, #104	; 0x68
 800fe76:	e7d9      	b.n	800fe2c <__sfp+0x1c>
 800fe78:	2104      	movs	r1, #4
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	f7ff ff62 	bl	800fd44 <__sfmoreglue>
 800fe80:	4604      	mov	r4, r0
 800fe82:	6030      	str	r0, [r6, #0]
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d1d5      	bne.n	800fe34 <__sfp+0x24>
 800fe88:	f7ff ff78 	bl	800fd7c <__sfp_lock_release>
 800fe8c:	230c      	movs	r3, #12
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	e7ee      	b.n	800fe70 <__sfp+0x60>
 800fe92:	bf00      	nop
 800fe94:	08010ad4 	.word	0x08010ad4
 800fe98:	ffff0001 	.word	0xffff0001

0800fe9c <_fwalk_reent>:
 800fe9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea0:	4606      	mov	r6, r0
 800fea2:	4688      	mov	r8, r1
 800fea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fea8:	2700      	movs	r7, #0
 800feaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feae:	f1b9 0901 	subs.w	r9, r9, #1
 800feb2:	d505      	bpl.n	800fec0 <_fwalk_reent+0x24>
 800feb4:	6824      	ldr	r4, [r4, #0]
 800feb6:	2c00      	cmp	r4, #0
 800feb8:	d1f7      	bne.n	800feaa <_fwalk_reent+0xe>
 800feba:	4638      	mov	r0, r7
 800febc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fec0:	89ab      	ldrh	r3, [r5, #12]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d907      	bls.n	800fed6 <_fwalk_reent+0x3a>
 800fec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800feca:	3301      	adds	r3, #1
 800fecc:	d003      	beq.n	800fed6 <_fwalk_reent+0x3a>
 800fece:	4629      	mov	r1, r5
 800fed0:	4630      	mov	r0, r6
 800fed2:	47c0      	blx	r8
 800fed4:	4307      	orrs	r7, r0
 800fed6:	3568      	adds	r5, #104	; 0x68
 800fed8:	e7e9      	b.n	800feae <_fwalk_reent+0x12>

0800feda <__retarget_lock_init_recursive>:
 800feda:	4770      	bx	lr

0800fedc <__retarget_lock_acquire_recursive>:
 800fedc:	4770      	bx	lr

0800fede <__retarget_lock_release_recursive>:
 800fede:	4770      	bx	lr

0800fee0 <__swhatbuf_r>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	460e      	mov	r6, r1
 800fee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee8:	2900      	cmp	r1, #0
 800feea:	b096      	sub	sp, #88	; 0x58
 800feec:	4614      	mov	r4, r2
 800feee:	461d      	mov	r5, r3
 800fef0:	da08      	bge.n	800ff04 <__swhatbuf_r+0x24>
 800fef2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fef6:	2200      	movs	r2, #0
 800fef8:	602a      	str	r2, [r5, #0]
 800fefa:	061a      	lsls	r2, r3, #24
 800fefc:	d410      	bmi.n	800ff20 <__swhatbuf_r+0x40>
 800fefe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff02:	e00e      	b.n	800ff22 <__swhatbuf_r+0x42>
 800ff04:	466a      	mov	r2, sp
 800ff06:	f000 f903 	bl	8010110 <_fstat_r>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	dbf1      	blt.n	800fef2 <__swhatbuf_r+0x12>
 800ff0e:	9a01      	ldr	r2, [sp, #4]
 800ff10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff18:	425a      	negs	r2, r3
 800ff1a:	415a      	adcs	r2, r3
 800ff1c:	602a      	str	r2, [r5, #0]
 800ff1e:	e7ee      	b.n	800fefe <__swhatbuf_r+0x1e>
 800ff20:	2340      	movs	r3, #64	; 0x40
 800ff22:	2000      	movs	r0, #0
 800ff24:	6023      	str	r3, [r4, #0]
 800ff26:	b016      	add	sp, #88	; 0x58
 800ff28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff2c <__smakebuf_r>:
 800ff2c:	898b      	ldrh	r3, [r1, #12]
 800ff2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff30:	079d      	lsls	r5, r3, #30
 800ff32:	4606      	mov	r6, r0
 800ff34:	460c      	mov	r4, r1
 800ff36:	d507      	bpl.n	800ff48 <__smakebuf_r+0x1c>
 800ff38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	2301      	movs	r3, #1
 800ff42:	6163      	str	r3, [r4, #20]
 800ff44:	b002      	add	sp, #8
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	ab01      	add	r3, sp, #4
 800ff4a:	466a      	mov	r2, sp
 800ff4c:	f7ff ffc8 	bl	800fee0 <__swhatbuf_r>
 800ff50:	9900      	ldr	r1, [sp, #0]
 800ff52:	4605      	mov	r5, r0
 800ff54:	4630      	mov	r0, r6
 800ff56:	f7ff f963 	bl	800f220 <_malloc_r>
 800ff5a:	b948      	cbnz	r0, 800ff70 <__smakebuf_r+0x44>
 800ff5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff60:	059a      	lsls	r2, r3, #22
 800ff62:	d4ef      	bmi.n	800ff44 <__smakebuf_r+0x18>
 800ff64:	f023 0303 	bic.w	r3, r3, #3
 800ff68:	f043 0302 	orr.w	r3, r3, #2
 800ff6c:	81a3      	strh	r3, [r4, #12]
 800ff6e:	e7e3      	b.n	800ff38 <__smakebuf_r+0xc>
 800ff70:	4b0d      	ldr	r3, [pc, #52]	; (800ffa8 <__smakebuf_r+0x7c>)
 800ff72:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	6020      	str	r0, [r4, #0]
 800ff78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff7c:	81a3      	strh	r3, [r4, #12]
 800ff7e:	9b00      	ldr	r3, [sp, #0]
 800ff80:	6163      	str	r3, [r4, #20]
 800ff82:	9b01      	ldr	r3, [sp, #4]
 800ff84:	6120      	str	r0, [r4, #16]
 800ff86:	b15b      	cbz	r3, 800ffa0 <__smakebuf_r+0x74>
 800ff88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f000 f8d1 	bl	8010134 <_isatty_r>
 800ff92:	b128      	cbz	r0, 800ffa0 <__smakebuf_r+0x74>
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	f023 0303 	bic.w	r3, r3, #3
 800ff9a:	f043 0301 	orr.w	r3, r3, #1
 800ff9e:	81a3      	strh	r3, [r4, #12]
 800ffa0:	89a0      	ldrh	r0, [r4, #12]
 800ffa2:	4305      	orrs	r5, r0
 800ffa4:	81a5      	strh	r5, [r4, #12]
 800ffa6:	e7cd      	b.n	800ff44 <__smakebuf_r+0x18>
 800ffa8:	0800fd39 	.word	0x0800fd39

0800ffac <_malloc_usable_size_r>:
 800ffac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffb0:	1f18      	subs	r0, r3, #4
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	bfbc      	itt	lt
 800ffb6:	580b      	ldrlt	r3, [r1, r0]
 800ffb8:	18c0      	addlt	r0, r0, r3
 800ffba:	4770      	bx	lr

0800ffbc <_raise_r>:
 800ffbc:	291f      	cmp	r1, #31
 800ffbe:	b538      	push	{r3, r4, r5, lr}
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	460d      	mov	r5, r1
 800ffc4:	d904      	bls.n	800ffd0 <_raise_r+0x14>
 800ffc6:	2316      	movs	r3, #22
 800ffc8:	6003      	str	r3, [r0, #0]
 800ffca:	f04f 30ff 	mov.w	r0, #4294967295
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
 800ffd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ffd2:	b112      	cbz	r2, 800ffda <_raise_r+0x1e>
 800ffd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffd8:	b94b      	cbnz	r3, 800ffee <_raise_r+0x32>
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f000 f830 	bl	8010040 <_getpid_r>
 800ffe0:	462a      	mov	r2, r5
 800ffe2:	4601      	mov	r1, r0
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffea:	f000 b817 	b.w	801001c <_kill_r>
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d00a      	beq.n	8010008 <_raise_r+0x4c>
 800fff2:	1c59      	adds	r1, r3, #1
 800fff4:	d103      	bne.n	800fffe <_raise_r+0x42>
 800fff6:	2316      	movs	r3, #22
 800fff8:	6003      	str	r3, [r0, #0]
 800fffa:	2001      	movs	r0, #1
 800fffc:	e7e7      	b.n	800ffce <_raise_r+0x12>
 800fffe:	2400      	movs	r4, #0
 8010000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010004:	4628      	mov	r0, r5
 8010006:	4798      	blx	r3
 8010008:	2000      	movs	r0, #0
 801000a:	e7e0      	b.n	800ffce <_raise_r+0x12>

0801000c <raise>:
 801000c:	4b02      	ldr	r3, [pc, #8]	; (8010018 <raise+0xc>)
 801000e:	4601      	mov	r1, r0
 8010010:	6818      	ldr	r0, [r3, #0]
 8010012:	f7ff bfd3 	b.w	800ffbc <_raise_r>
 8010016:	bf00      	nop
 8010018:	24000010 	.word	0x24000010

0801001c <_kill_r>:
 801001c:	b538      	push	{r3, r4, r5, lr}
 801001e:	4d07      	ldr	r5, [pc, #28]	; (801003c <_kill_r+0x20>)
 8010020:	2300      	movs	r3, #0
 8010022:	4604      	mov	r4, r0
 8010024:	4608      	mov	r0, r1
 8010026:	4611      	mov	r1, r2
 8010028:	602b      	str	r3, [r5, #0]
 801002a:	f7f1 fb3b 	bl	80016a4 <_kill>
 801002e:	1c43      	adds	r3, r0, #1
 8010030:	d102      	bne.n	8010038 <_kill_r+0x1c>
 8010032:	682b      	ldr	r3, [r5, #0]
 8010034:	b103      	cbz	r3, 8010038 <_kill_r+0x1c>
 8010036:	6023      	str	r3, [r4, #0]
 8010038:	bd38      	pop	{r3, r4, r5, pc}
 801003a:	bf00      	nop
 801003c:	24001a74 	.word	0x24001a74

08010040 <_getpid_r>:
 8010040:	f7f1 bb28 	b.w	8001694 <_getpid>

08010044 <__sread>:
 8010044:	b510      	push	{r4, lr}
 8010046:	460c      	mov	r4, r1
 8010048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801004c:	f000 f894 	bl	8010178 <_read_r>
 8010050:	2800      	cmp	r0, #0
 8010052:	bfab      	itete	ge
 8010054:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010056:	89a3      	ldrhlt	r3, [r4, #12]
 8010058:	181b      	addge	r3, r3, r0
 801005a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801005e:	bfac      	ite	ge
 8010060:	6563      	strge	r3, [r4, #84]	; 0x54
 8010062:	81a3      	strhlt	r3, [r4, #12]
 8010064:	bd10      	pop	{r4, pc}

08010066 <__swrite>:
 8010066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006a:	461f      	mov	r7, r3
 801006c:	898b      	ldrh	r3, [r1, #12]
 801006e:	05db      	lsls	r3, r3, #23
 8010070:	4605      	mov	r5, r0
 8010072:	460c      	mov	r4, r1
 8010074:	4616      	mov	r6, r2
 8010076:	d505      	bpl.n	8010084 <__swrite+0x1e>
 8010078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801007c:	2302      	movs	r3, #2
 801007e:	2200      	movs	r2, #0
 8010080:	f000 f868 	bl	8010154 <_lseek_r>
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801008a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801008e:	81a3      	strh	r3, [r4, #12]
 8010090:	4632      	mov	r2, r6
 8010092:	463b      	mov	r3, r7
 8010094:	4628      	mov	r0, r5
 8010096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801009a:	f000 b817 	b.w	80100cc <_write_r>

0801009e <__sseek>:
 801009e:	b510      	push	{r4, lr}
 80100a0:	460c      	mov	r4, r1
 80100a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a6:	f000 f855 	bl	8010154 <_lseek_r>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	bf15      	itete	ne
 80100b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80100b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100ba:	81a3      	strheq	r3, [r4, #12]
 80100bc:	bf18      	it	ne
 80100be:	81a3      	strhne	r3, [r4, #12]
 80100c0:	bd10      	pop	{r4, pc}

080100c2 <__sclose>:
 80100c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100c6:	f000 b813 	b.w	80100f0 <_close_r>
	...

080100cc <_write_r>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4d07      	ldr	r5, [pc, #28]	; (80100ec <_write_r+0x20>)
 80100d0:	4604      	mov	r4, r0
 80100d2:	4608      	mov	r0, r1
 80100d4:	4611      	mov	r1, r2
 80100d6:	2200      	movs	r2, #0
 80100d8:	602a      	str	r2, [r5, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	f7f1 fb19 	bl	8001712 <_write>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_write_r+0x1e>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_write_r+0x1e>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	24001a74 	.word	0x24001a74

080100f0 <_close_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4d06      	ldr	r5, [pc, #24]	; (801010c <_close_r+0x1c>)
 80100f4:	2300      	movs	r3, #0
 80100f6:	4604      	mov	r4, r0
 80100f8:	4608      	mov	r0, r1
 80100fa:	602b      	str	r3, [r5, #0]
 80100fc:	f7f1 fb25 	bl	800174a <_close>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d102      	bne.n	801010a <_close_r+0x1a>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	b103      	cbz	r3, 801010a <_close_r+0x1a>
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	24001a74 	.word	0x24001a74

08010110 <_fstat_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	; (8010130 <_fstat_r+0x20>)
 8010114:	2300      	movs	r3, #0
 8010116:	4604      	mov	r4, r0
 8010118:	4608      	mov	r0, r1
 801011a:	4611      	mov	r1, r2
 801011c:	602b      	str	r3, [r5, #0]
 801011e:	f7f1 fb20 	bl	8001762 <_fstat>
 8010122:	1c43      	adds	r3, r0, #1
 8010124:	d102      	bne.n	801012c <_fstat_r+0x1c>
 8010126:	682b      	ldr	r3, [r5, #0]
 8010128:	b103      	cbz	r3, 801012c <_fstat_r+0x1c>
 801012a:	6023      	str	r3, [r4, #0]
 801012c:	bd38      	pop	{r3, r4, r5, pc}
 801012e:	bf00      	nop
 8010130:	24001a74 	.word	0x24001a74

08010134 <_isatty_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4d06      	ldr	r5, [pc, #24]	; (8010150 <_isatty_r+0x1c>)
 8010138:	2300      	movs	r3, #0
 801013a:	4604      	mov	r4, r0
 801013c:	4608      	mov	r0, r1
 801013e:	602b      	str	r3, [r5, #0]
 8010140:	f7f1 fb1f 	bl	8001782 <_isatty>
 8010144:	1c43      	adds	r3, r0, #1
 8010146:	d102      	bne.n	801014e <_isatty_r+0x1a>
 8010148:	682b      	ldr	r3, [r5, #0]
 801014a:	b103      	cbz	r3, 801014e <_isatty_r+0x1a>
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	bd38      	pop	{r3, r4, r5, pc}
 8010150:	24001a74 	.word	0x24001a74

08010154 <_lseek_r>:
 8010154:	b538      	push	{r3, r4, r5, lr}
 8010156:	4d07      	ldr	r5, [pc, #28]	; (8010174 <_lseek_r+0x20>)
 8010158:	4604      	mov	r4, r0
 801015a:	4608      	mov	r0, r1
 801015c:	4611      	mov	r1, r2
 801015e:	2200      	movs	r2, #0
 8010160:	602a      	str	r2, [r5, #0]
 8010162:	461a      	mov	r2, r3
 8010164:	f7f1 fb18 	bl	8001798 <_lseek>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	d102      	bne.n	8010172 <_lseek_r+0x1e>
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	b103      	cbz	r3, 8010172 <_lseek_r+0x1e>
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	24001a74 	.word	0x24001a74

08010178 <_read_r>:
 8010178:	b538      	push	{r3, r4, r5, lr}
 801017a:	4d07      	ldr	r5, [pc, #28]	; (8010198 <_read_r+0x20>)
 801017c:	4604      	mov	r4, r0
 801017e:	4608      	mov	r0, r1
 8010180:	4611      	mov	r1, r2
 8010182:	2200      	movs	r2, #0
 8010184:	602a      	str	r2, [r5, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	f7f1 faa6 	bl	80016d8 <_read>
 801018c:	1c43      	adds	r3, r0, #1
 801018e:	d102      	bne.n	8010196 <_read_r+0x1e>
 8010190:	682b      	ldr	r3, [r5, #0]
 8010192:	b103      	cbz	r3, 8010196 <_read_r+0x1e>
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	bd38      	pop	{r3, r4, r5, pc}
 8010198:	24001a74 	.word	0x24001a74

0801019c <_init>:
 801019c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019e:	bf00      	nop
 80101a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101a2:	bc08      	pop	{r3}
 80101a4:	469e      	mov	lr, r3
 80101a6:	4770      	bx	lr

080101a8 <_fini>:
 80101a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101aa:	bf00      	nop
 80101ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ae:	bc08      	pop	{r3}
 80101b0:	469e      	mov	lr, r3
 80101b2:	4770      	bx	lr
