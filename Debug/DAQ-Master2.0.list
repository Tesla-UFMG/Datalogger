
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010304  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001064  080105a8  080105a8  000205a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801160c  0801160c  0002160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011614  08011614  00021614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011618  08011618  00021618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0801161c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000524c  240001e0  080117fc  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  2400542c  080117fc  0003542c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030ba7  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050ff  00000000  00000000  00060db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016f0  00000000  00000000  00065eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001538  00000000  00000000  000675a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba28  00000000  00000000  00068ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ebc9  00000000  00000000  000a4508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168677  00000000  00000000  000c30d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022b748  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f50  00000000  00000000  0022b79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801058c 	.word	0x0801058c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801058c 	.word	0x0801058c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 ffb6 	bl	8002608 <HAL_FDCAN_RegisterRxFifo0Callback>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80006a2:	f001 f821 	bl	80016e8 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f001 ffde 	bl	8002668 <HAL_FDCAN_Start>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80006b2:	f001 f819 	bl	80016e8 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f002 f96e 	bl	800299c <HAL_FDCAN_ActivateNotification>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 80006c6:	f001 f80f 	bl	80016e8 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006dc:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <init_CAN+0x10>)
 800070a:	f000 fd95 	bl	8001238 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	24003224 	.word	0x24003224

08000718 <SD_Create_File>:
char bufferFile[20];//buffer with the name of the file
int count = 0;
uint8_t _datalog_flag = 0;

FRESULT SD_Create_File(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	FRESULT fresult;
	uint8_t contFile = 0;	/*enumerate the file*/
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 8000722:	2200      	movs	r2, #0
 8000724:	491a      	ldr	r1, [pc, #104]	; (8000790 <SD_Create_File+0x78>)
 8000726:	481b      	ldr	r0, [pc, #108]	; (8000794 <SD_Create_File+0x7c>)
 8000728:	f00c f8f6 	bl	800c918 <f_mount>
 800072c:	4603      	mov	r3, r0
 800072e:	71bb      	strb	r3, [r7, #6]
	do
	{
		sprintf(bufferFile, "ARQ%02d.txt", contFile);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	461a      	mov	r2, r3
 8000734:	4918      	ldr	r1, [pc, #96]	; (8000798 <SD_Create_File+0x80>)
 8000736:	4819      	ldr	r0, [pc, #100]	; (800079c <SD_Create_File+0x84>)
 8000738:	f00d fd74 	bl	800e224 <siprintf>
		fresult = f_stat(bufferFile, &file);
 800073c:	4918      	ldr	r1, [pc, #96]	; (80007a0 <SD_Create_File+0x88>)
 800073e:	4817      	ldr	r0, [pc, #92]	; (800079c <SD_Create_File+0x84>)
 8000740:	f00c ff5c 	bl	800d5fc <f_stat>
 8000744:	4603      	mov	r3, r0
 8000746:	71bb      	strb	r3, [r7, #6]
		contFile++;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3301      	adds	r3, #1
 800074c:	71fb      	strb	r3, [r7, #7]
	} while(fresult != FR_NO_FILE);
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	2b04      	cmp	r3, #4
 8000752:	d1ed      	bne.n	8000730 <SD_Create_File+0x18>
	contFile = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	71fb      	strb	r3, [r7, #7]
	fresult = f_open(&file, bufferFile, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 8000758:	2208      	movs	r2, #8
 800075a:	4910      	ldr	r1, [pc, #64]	; (800079c <SD_Create_File+0x84>)
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <SD_Create_File+0x88>)
 800075e:	f00c f921 	bl	800c9a4 <f_open>
 8000762:	4603      	mov	r3, r0
 8000764:	71bb      	strb	r3, [r7, #6]
	//fresult = f_write(&file, arrayComOsNomes, sizeoff(array), &bytes_written);     //write data to the file
	fresult = f_close(&file);
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <SD_Create_File+0x88>)
 8000768:	f00c fcfa 	bl	800d160 <f_close>
 800076c:	4603      	mov	r3, r0
 800076e:	71bb      	strb	r3, [r7, #6]
	if(fresult == FR_OK){
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d103      	bne.n	800077e <SD_Create_File+0x66>
		//HAL_GPIO_TogglePin(DATALOG_LED_GPIO_Port, DATALOG_LED_Pin); //Blinks the led to indicate that there was no erros
		_datalog_flag  = 1;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <SD_Create_File+0x8c>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e002      	b.n	8000784 <SD_Create_File+0x6c>
	}
	else _datalog_flag = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <SD_Create_File+0x8c>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	return fresult;
 8000784:	79bb      	ldrb	r3, [r7, #6]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	080105a8 	.word	0x080105a8
 8000794:	240001fc 	.word	0x240001fc
 8000798:	080105ac 	.word	0x080105ac
 800079c:	240024d8 	.word	0x240024d8
 80007a0:	240014a8 	.word	0x240014a8
 80007a4:	24001234 	.word	0x24001234

080007a8 <cabecalho>:

void cabecalho(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	f5ad 6db1 	sub.w	sp, sp, #1416	; 0x588
 80007ae:	af00      	add	r7, sp, #0
	UINT bytes_written;
	FRESULT fresult;
	char buffer_log[1400];
	strcpy(buffer_log, "Timer\tVol\tAccel\tFreio\tModo\tFrenagemReg\tHodometroP\tHodometroT\tTorqueRM\tTorqueLM\tTorqueRefR\tTorqueRefL\tVelRM\tVelLM\tEcuEventId\tEcuEventId\tVelFrontLTie\tVelFrontRTie\tVelBackRTie\tVelBackLTie\tTorqueGain\tTCurrentRM\tTCurrentLM\tT\tTempInversorR1\tTempInversorR2\tTempInversorL1\tTempInversor2L\tAccelX\tAccelY\tAccelZ\tErro\tGyroX\tGyroY\tGyroZ\tErro\tISensor2\tISensor1High\tISensor1Low\tISensor3\tGlvVoltage\tCarga(%)\tAir\tTensaoTot\tTMaxBancoBat\tTensaoMin\tTensaoMax\tVCell400\tVCell401\tVCell402\tVCell403\tVCell404\tVCell405\tVCell406\tVCell407\tVCell408\tVCell409\tVCell410\tVCell411\tVCell412\tTemp400\tTemp401\tTemp302\tTemp403\tTemp404\tVCell500\tVCell501\tVCell502\tVCell53\tVCell504\tVCell505\tVCell506\tVCell507\tVCell508\tVCell509\tVCell510\tVCell511\tVCell512\tTemp500\tTemp501\tTemp502\tTemp503\tTemp504\tVCell300\tVCell301\tVCell302\tVCell303\tVCell304\tVCell305\tVCell306\tVCell307\tVCell308\tVCell309\tVCell310\tVCell311\tVCell312\tTemp300\tTemp301\tTemp302\tTemp303\tTemp304\tVCell200\tVCell201\tVCell202\tVCell203\tVCell204\tVCell205\tVCell206\tVCell207\tVCell208\tVCell209\tVCell210\tVCell211\tVCell212\tTemp200\tTemp201\tTemp202\tTemp203\tTemp204\tVCell100\tVCell101\tVCell102\tVCell103\tVCell104\tVCell105\tVCell106\tVCell107\tVCell108\tVCell109\tVCell110\tVCell111\tVCell112\tTemp100\tTemp101\tTemp102\tTemp103\tTemp104\tVCell000\tVCell001\tVCell002\tVCell003\tVCell004\tVCell005\tVCell006\tVCell007\tVCell008\tVCell009\tVCell010\tVCell011\tVCell012\tTemp000\tTemp001\tTemp002\tTemp003\tTemp004");
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <cabecalho+0x7c>)
 80007b4:	4618      	mov	r0, r3
 80007b6:	4611      	mov	r1, r2
 80007b8:	f240 5364 	movw	r3, #1380	; 0x564
 80007bc:	461a      	mov	r2, r3
 80007be:	f00d f8a3 	bl	800d908 <memcpy>
	int len = strlen(buffer_log);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fd8b 	bl	80002e0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write
 80007d0:	2212      	movs	r2, #18
 80007d2:	4915      	ldr	r1, [pc, #84]	; (8000828 <cabecalho+0x80>)
 80007d4:	4815      	ldr	r0, [pc, #84]	; (800082c <cabecalho+0x84>)
 80007d6:	f00c f8e5 	bl	800c9a4 <f_open>
 80007da:	4603      	mov	r3, r0
 80007dc:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
	fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <cabecalho+0x84>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <cabecalho+0x84>)
 80007e8:	f00c fce4 	bl	800d1b4 <f_lseek>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
	fresult = f_write(&file, buffer_log, len+1, &bytes_written);//write data to the file
 80007f2:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80007f6:	3301      	adds	r3, #1
 80007f8:	461a      	mov	r2, r3
 80007fa:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 80007fe:	1d39      	adds	r1, r7, #4
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <cabecalho+0x84>)
 8000802:	f00c fa9b 	bl	800cd3c <f_write>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
	fresult = f_close(&file);//closes the file
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <cabecalho+0x84>)
 800080e:	f00c fca7 	bl	800d160 <f_close>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
}
 8000818:	bf00      	nop
 800081a:	f507 67b1 	add.w	r7, r7, #1416	; 0x588
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	080105b8 	.word	0x080105b8
 8000828:	240024d8 	.word	0x240024d8
 800082c:	240014a8 	.word	0x240014a8

08000830 <writeSD>:

void writeSD(void)
{
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	f2ad 5d74 	subw	sp, sp, #1396	; 0x574
 8000836:	af50      	add	r7, sp, #320	; 0x140
	UINT bytes_written;
	FRESULT fresult;
	char buffer_log[256];
	uint8_t block[512];
	uint32_t time = HAL_GetTick();
 8000838:	f001 fb44 	bl	8001ec4 <HAL_GetTick>
 800083c:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//7//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//8//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//9//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t",	//10//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11

		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000840:	4bbc      	ldr	r3, [pc, #752]	; (8000b34 <writeSD+0x304>)
 8000842:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
		int len = snprintf((char*) block, sizeof(block),
 8000846:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 800084a:	4bba      	ldr	r3, [pc, #744]	; (8000b34 <writeSD+0x304>)
 800084c:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
		int len = snprintf((char*) block, sizeof(block),
 8000850:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000854:	4bb7      	ldr	r3, [pc, #732]	; (8000b34 <writeSD+0x304>)
 8000856:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
		int len = snprintf((char*) block, sizeof(block),
 800085a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 800085e:	4bb5      	ldr	r3, [pc, #724]	; (8000b34 <writeSD+0x304>)
 8000860:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8000864:	b25b      	sxtb	r3, r3
		int len = snprintf((char*) block, sizeof(block),
 8000866:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 800086a:	4bb2      	ldr	r3, [pc, #712]	; (8000b34 <writeSD+0x304>)
 800086c:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
		int len = snprintf((char*) block, sizeof(block),
 8000870:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000874:	4baf      	ldr	r3, [pc, #700]	; (8000b34 <writeSD+0x304>)
 8000876:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
		int len = snprintf((char*) block, sizeof(block),
 800087a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 800087e:	4bad      	ldr	r3, [pc, #692]	; (8000b34 <writeSD+0x304>)
 8000880:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
		int len = snprintf((char*) block, sizeof(block),
 8000884:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 8000888:	4baa      	ldr	r3, [pc, #680]	; (8000b34 <writeSD+0x304>)
 800088a:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
		int len = snprintf((char*) block, sizeof(block),
 800088e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 8000892:	4ba8      	ldr	r3, [pc, #672]	; (8000b34 <writeSD+0x304>)
 8000894:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
		int len = snprintf((char*) block, sizeof(block),
 8000898:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 800089c:	4ba5      	ldr	r3, [pc, #660]	; (8000b34 <writeSD+0x304>)
 800089e:	f8b3 333c 	ldrh.w	r3, [r3, #828]	; 0x33c
		int len = snprintf((char*) block, sizeof(block),
 80008a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008a6:	4ba3      	ldr	r3, [pc, #652]	; (8000b34 <writeSD+0x304>)
 80008a8:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
		int len = snprintf((char*) block, sizeof(block),
 80008ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008b0:	4ba0      	ldr	r3, [pc, #640]	; (8000b34 <writeSD+0x304>)
 80008b2:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
		int len = snprintf((char*) block, sizeof(block),
 80008b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008ba:	4b9e      	ldr	r3, [pc, #632]	; (8000b34 <writeSD+0x304>)
 80008bc:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
		int len = snprintf((char*) block, sizeof(block),
 80008c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008c4:	4b9b      	ldr	r3, [pc, #620]	; (8000b34 <writeSD+0x304>)
 80008c6:	f8b3 3344 	ldrh.w	r3, [r3, #836]	; 0x344
		int len = snprintf((char*) block, sizeof(block),
 80008ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008ce:	4b99      	ldr	r3, [pc, #612]	; (8000b34 <writeSD+0x304>)
 80008d0:	f8b3 3346 	ldrh.w	r3, [r3, #838]	; 0x346
		int len = snprintf((char*) block, sizeof(block),
 80008d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008d8:	4b96      	ldr	r3, [pc, #600]	; (8000b34 <writeSD+0x304>)
 80008da:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
		int len = snprintf((char*) block, sizeof(block),
 80008de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008e2:	4b94      	ldr	r3, [pc, #592]	; (8000b34 <writeSD+0x304>)
 80008e4:	f8b3 334a 	ldrh.w	r3, [r3, #842]	; 0x34a
		int len = snprintf((char*) block, sizeof(block),
 80008e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008ec:	4b91      	ldr	r3, [pc, #580]	; (8000b34 <writeSD+0x304>)
 80008ee:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
		int len = snprintf((char*) block, sizeof(block),
 80008f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008f6:	4b8f      	ldr	r3, [pc, #572]	; (8000b34 <writeSD+0x304>)
 80008f8:	f8b3 334e 	ldrh.w	r3, [r3, #846]	; 0x34e
		int len = snprintf((char*) block, sizeof(block),
 80008fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 8000900:	4b8c      	ldr	r3, [pc, #560]	; (8000b34 <writeSD+0x304>)
 8000902:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
		int len = snprintf((char*) block, sizeof(block),
 8000906:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 800090a:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <writeSD+0x304>)
 800090c:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
		int len = snprintf((char*) block, sizeof(block),
 8000910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 8000914:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <writeSD+0x304>)
 8000916:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
		int len = snprintf((char*) block, sizeof(block),
 800091a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 800091e:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <writeSD+0x304>)
 8000920:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
		int len = snprintf((char*) block, sizeof(block),
 8000924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 8000928:	4b82      	ldr	r3, [pc, #520]	; (8000b34 <writeSD+0x304>)
 800092a:	f8b3 335a 	ldrh.w	r3, [r3, #858]	; 0x35a
		int len = snprintf((char*) block, sizeof(block),
 800092e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 8000932:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <writeSD+0x304>)
 8000934:	f8b3 335c 	ldrh.w	r3, [r3, #860]	; 0x35c
		int len = snprintf((char*) block, sizeof(block),
 8000938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 800093c:	4b7d      	ldr	r3, [pc, #500]	; (8000b34 <writeSD+0x304>)
 800093e:	f8b3 335e 	ldrh.w	r3, [r3, #862]	; 0x35e
		int len = snprintf((char*) block, sizeof(block),
 8000942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 8000946:	4b7b      	ldr	r3, [pc, #492]	; (8000b34 <writeSD+0x304>)
 8000948:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
		int len = snprintf((char*) block, sizeof(block),
 800094c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 8000950:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <writeSD+0x304>)
 8000952:	f8b3 3362 	ldrh.w	r3, [r3, #866]	; 0x362
		int len = snprintf((char*) block, sizeof(block),
 8000956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 800095a:	4b76      	ldr	r3, [pc, #472]	; (8000b34 <writeSD+0x304>)
 800095c:	f8b3 3364 	ldrh.w	r3, [r3, #868]	; 0x364
		int len = snprintf((char*) block, sizeof(block),
 8000960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 8000964:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <writeSD+0x304>)
 8000966:	f8b3 3366 	ldrh.w	r3, [r3, #870]	; 0x366
		int len = snprintf((char*) block, sizeof(block),
 800096a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,can_vector[109].word_0,
 800096e:	4b71      	ldr	r3, [pc, #452]	; (8000b34 <writeSD+0x304>)
 8000970:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
		int len = snprintf((char*) block, sizeof(block),
 8000974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000978:	4b6e      	ldr	r3, [pc, #440]	; (8000b34 <writeSD+0x304>)
 800097a:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
		int len = snprintf((char*) block, sizeof(block),
 800097e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000982:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <writeSD+0x304>)
 8000984:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
		int len = snprintf((char*) block, sizeof(block),
 8000988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 800098c:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <writeSD+0x304>)
 800098e:	f8b3 336c 	ldrh.w	r3, [r3, #876]	; 0x36c
		int len = snprintf((char*) block, sizeof(block),
 8000992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <writeSD+0x304>)
 8000998:	f8b3 336e 	ldrh.w	r3, [r3, #878]	; 0x36e
		int len = snprintf((char*) block, sizeof(block),
 800099c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 80009a0:	4b64      	ldr	r3, [pc, #400]	; (8000b34 <writeSD+0x304>)
 80009a2:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
		int len = snprintf((char*) block, sizeof(block),
 80009a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <writeSD+0x304>)
 80009ac:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
		int len = snprintf((char*) block, sizeof(block),
 80009b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 80009b4:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <writeSD+0x304>)
 80009b6:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
		int len = snprintf((char*) block, sizeof(block),
 80009ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <writeSD+0x304>)
 80009c0:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
		int len = snprintf((char*) block, sizeof(block),
 80009c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009c8:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <writeSD+0x304>)
 80009ca:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
		int len = snprintf((char*) block, sizeof(block),
 80009ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009d2:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <writeSD+0x304>)
 80009d4:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
		int len = snprintf((char*) block, sizeof(block),
 80009d8:	67fb      	str	r3, [r7, #124]	; 0x7c
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009da:	4b56      	ldr	r3, [pc, #344]	; (8000b34 <writeSD+0x304>)
 80009dc:	f8b3 319e 	ldrh.w	r3, [r3, #414]	; 0x19e
		int len = snprintf((char*) block, sizeof(block),
 80009e0:	67bb      	str	r3, [r7, #120]	; 0x78
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009e2:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <writeSD+0x304>)
 80009e4:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
		int len = snprintf((char*) block, sizeof(block),
 80009e8:	677b      	str	r3, [r7, #116]	; 0x74
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009ea:	4b52      	ldr	r3, [pc, #328]	; (8000b34 <writeSD+0x304>)
 80009ec:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
		int len = snprintf((char*) block, sizeof(block),
 80009f0:	673b      	str	r3, [r7, #112]	; 0x70
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009f2:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <writeSD+0x304>)
 80009f4:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
		int len = snprintf((char*) block, sizeof(block),
 80009f8:	66fb      	str	r3, [r7, #108]	; 0x6c
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009fa:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <writeSD+0x304>)
 80009fc:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
		int len = snprintf((char*) block, sizeof(block),
 8000a00:	66bb      	str	r3, [r7, #104]	; 0x68
		/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 8000a02:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <writeSD+0x304>)
 8000a04:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
		int len = snprintf((char*) block, sizeof(block),
 8000a08:	667b      	str	r3, [r7, #100]	; 0x64
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a0a:	4b4a      	ldr	r3, [pc, #296]	; (8000b34 <writeSD+0x304>)
 8000a0c:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
		int len = snprintf((char*) block, sizeof(block),
 8000a10:	663b      	str	r3, [r7, #96]	; 0x60
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a12:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <writeSD+0x304>)
 8000a14:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
		int len = snprintf((char*) block, sizeof(block),
 8000a18:	65fb      	str	r3, [r7, #92]	; 0x5c
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a1a:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <writeSD+0x304>)
 8000a1c:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
		int len = snprintf((char*) block, sizeof(block),
 8000a20:	65bb      	str	r3, [r7, #88]	; 0x58
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a22:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <writeSD+0x304>)
 8000a24:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
		int len = snprintf((char*) block, sizeof(block),
 8000a28:	657b      	str	r3, [r7, #84]	; 0x54
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <writeSD+0x304>)
 8000a2c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
		int len = snprintf((char*) block, sizeof(block),
 8000a30:	653b      	str	r3, [r7, #80]	; 0x50
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a32:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <writeSD+0x304>)
 8000a34:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
		int len = snprintf((char*) block, sizeof(block),
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <writeSD+0x304>)
 8000a3c:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
		int len = snprintf((char*) block, sizeof(block),
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
		/*7	*/	can_vector[256].word_1,can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <writeSD+0x304>)
 8000a44:	f8b3 380e 	ldrh.w	r3, [r3, #2062]	; 0x80e
		int len = snprintf((char*) block, sizeof(block),
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <writeSD+0x304>)
 8000a4c:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
		int len = snprintf((char*) block, sizeof(block),
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <writeSD+0x304>)
 8000a54:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
		int len = snprintf((char*) block, sizeof(block),
 8000a58:	63fb      	str	r3, [r7, #60]	; 0x3c
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a5a:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <writeSD+0x304>)
 8000a5c:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
		int len = snprintf((char*) block, sizeof(block),
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <writeSD+0x304>)
 8000a64:	f8b3 3816 	ldrh.w	r3, [r3, #2070]	; 0x816
		int len = snprintf((char*) block, sizeof(block),
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a6a:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <writeSD+0x304>)
 8000a6c:	f8b3 3818 	ldrh.w	r3, [r3, #2072]	; 0x818
		int len = snprintf((char*) block, sizeof(block),
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a72:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <writeSD+0x304>)
 8000a74:	f8b3 381a 	ldrh.w	r3, [r3, #2074]	; 0x81a
		int len = snprintf((char*) block, sizeof(block),
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <writeSD+0x304>)
 8000a7c:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	; 0x81c
		int len = snprintf((char*) block, sizeof(block),
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
		/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <writeSD+0x304>)
 8000a84:	f8b3 381e 	ldrh.w	r3, [r3, #2078]	; 0x81e
		int len = snprintf((char*) block, sizeof(block),
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <writeSD+0x304>)
 8000a8c:	f8b3 3820 	ldrh.w	r3, [r3, #2080]	; 0x820
		int len = snprintf((char*) block, sizeof(block),
 8000a90:	623b      	str	r3, [r7, #32]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <writeSD+0x304>)
 8000a94:	f8b3 3822 	ldrh.w	r3, [r3, #2082]	; 0x822
		int len = snprintf((char*) block, sizeof(block),
 8000a98:	61fb      	str	r3, [r7, #28]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <writeSD+0x304>)
 8000a9c:	f8b3 3828 	ldrh.w	r3, [r3, #2088]	; 0x828
		int len = snprintf((char*) block, sizeof(block),
 8000aa0:	61bb      	str	r3, [r7, #24]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <writeSD+0x304>)
 8000aa4:	f8b3 382a 	ldrh.w	r3, [r3, #2090]	; 0x82a
		int len = snprintf((char*) block, sizeof(block),
 8000aa8:	617b      	str	r3, [r7, #20]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <writeSD+0x304>)
 8000aac:	f8b3 382c 	ldrh.w	r3, [r3, #2092]	; 0x82c
		int len = snprintf((char*) block, sizeof(block),
 8000ab0:	613b      	str	r3, [r7, #16]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <writeSD+0x304>)
 8000ab4:	f8b3 382e 	ldrh.w	r3, [r3, #2094]	; 0x82e
		int len = snprintf((char*) block, sizeof(block),
 8000ab8:	60fb      	str	r3, [r7, #12]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <writeSD+0x304>)
 8000abc:	f8b3 3830 	ldrh.w	r3, [r3, #2096]	; 0x830
		int len = snprintf((char*) block, sizeof(block),
 8000ac0:	60bb      	str	r3, [r7, #8]
		/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <writeSD+0x304>)
 8000ac4:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
		int len = snprintf((char*) block, sizeof(block),
 8000ac8:	607b      	str	r3, [r7, #4]
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <writeSD+0x304>)
 8000acc:	f8b3 3834 	ldrh.w	r3, [r3, #2100]	; 0x834
		int len = snprintf((char*) block, sizeof(block),
 8000ad0:	603b      	str	r3, [r7, #0]
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <writeSD+0x304>)
 8000ad4:	f8b3 3836 	ldrh.w	r3, [r3, #2102]	; 0x836
		int len = snprintf((char*) block, sizeof(block),
 8000ad8:	461e      	mov	r6, r3
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <writeSD+0x304>)
 8000adc:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
		int len = snprintf((char*) block, sizeof(block),
 8000ae0:	461d      	mov	r5, r3
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <writeSD+0x304>)
 8000ae4:	f8b3 383a 	ldrh.w	r3, [r3, #2106]	; 0x83a
		int len = snprintf((char*) block, sizeof(block),
 8000ae8:	461c      	mov	r4, r3
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <writeSD+0x304>)
 8000aec:	f8b3 383c 	ldrh.w	r3, [r3, #2108]	; 0x83c
		int len = snprintf((char*) block, sizeof(block),
 8000af0:	4618      	mov	r0, r3
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <writeSD+0x304>)
 8000af4:	f8b3 383e 	ldrh.w	r3, [r3, #2110]	; 0x83e
		int len = snprintf((char*) block, sizeof(block),
 8000af8:	4619      	mov	r1, r3
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <writeSD+0x304>)
 8000afc:	f8b3 3840 	ldrh.w	r3, [r3, #2112]	; 0x840
		int len = snprintf((char*) block, sizeof(block),
 8000b00:	461a      	mov	r2, r3
		/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1);
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <writeSD+0x304>)
 8000b04:	f8b3 3842 	ldrh.w	r3, [r3, #2114]	; 0x842
		int len = snprintf((char*) block, sizeof(block),
 8000b08:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 8000b0c:	934e      	str	r3, [sp, #312]	; 0x138
 8000b0e:	924d      	str	r2, [sp, #308]	; 0x134
 8000b10:	914c      	str	r1, [sp, #304]	; 0x130
 8000b12:	904b      	str	r0, [sp, #300]	; 0x12c
 8000b14:	944a      	str	r4, [sp, #296]	; 0x128
 8000b16:	9549      	str	r5, [sp, #292]	; 0x124
 8000b18:	9648      	str	r6, [sp, #288]	; 0x120
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	9247      	str	r2, [sp, #284]	; 0x11c
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	9246      	str	r2, [sp, #280]	; 0x118
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	9245      	str	r2, [sp, #276]	; 0x114
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	9244      	str	r2, [sp, #272]	; 0x110
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	9243      	str	r2, [sp, #268]	; 0x10c
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	9242      	str	r2, [sp, #264]	; 0x108
 8000b32:	e001      	b.n	8000b38 <writeSD+0x308>
 8000b34:	240024ec 	.word	0x240024ec
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	9241      	str	r2, [sp, #260]	; 0x104
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	9240      	str	r2, [sp, #256]	; 0x100
 8000b40:	6a3a      	ldr	r2, [r7, #32]
 8000b42:	923f      	str	r2, [sp, #252]	; 0xfc
 8000b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b46:	923e      	str	r2, [sp, #248]	; 0xf8
 8000b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b4a:	923d      	str	r2, [sp, #244]	; 0xf4
 8000b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b4e:	923c      	str	r2, [sp, #240]	; 0xf0
 8000b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b52:	923b      	str	r2, [sp, #236]	; 0xec
 8000b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b56:	923a      	str	r2, [sp, #232]	; 0xe8
 8000b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b5a:	9239      	str	r2, [sp, #228]	; 0xe4
 8000b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b5e:	9238      	str	r2, [sp, #224]	; 0xe0
 8000b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b62:	9237      	str	r2, [sp, #220]	; 0xdc
 8000b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b66:	9236      	str	r2, [sp, #216]	; 0xd8
 8000b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b6a:	9235      	str	r2, [sp, #212]	; 0xd4
 8000b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b6e:	9234      	str	r2, [sp, #208]	; 0xd0
 8000b70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b72:	9233      	str	r2, [sp, #204]	; 0xcc
 8000b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b76:	9232      	str	r2, [sp, #200]	; 0xc8
 8000b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b7a:	9231      	str	r2, [sp, #196]	; 0xc4
 8000b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b7e:	9230      	str	r2, [sp, #192]	; 0xc0
 8000b80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b82:	922f      	str	r2, [sp, #188]	; 0xbc
 8000b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b86:	922e      	str	r2, [sp, #184]	; 0xb8
 8000b88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000b8a:	922d      	str	r2, [sp, #180]	; 0xb4
 8000b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b8e:	922c      	str	r2, [sp, #176]	; 0xb0
 8000b90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b92:	922b      	str	r2, [sp, #172]	; 0xac
 8000b94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000b96:	922a      	str	r2, [sp, #168]	; 0xa8
 8000b98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000b9a:	9229      	str	r2, [sp, #164]	; 0xa4
 8000b9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000b9e:	9228      	str	r2, [sp, #160]	; 0xa0
 8000ba0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000ba4:	9227      	str	r2, [sp, #156]	; 0x9c
 8000ba6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000baa:	9226      	str	r2, [sp, #152]	; 0x98
 8000bac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000bb0:	9225      	str	r2, [sp, #148]	; 0x94
 8000bb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000bb6:	9224      	str	r2, [sp, #144]	; 0x90
 8000bb8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000bbc:	9223      	str	r2, [sp, #140]	; 0x8c
 8000bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000bc2:	9222      	str	r2, [sp, #136]	; 0x88
 8000bc4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000bc8:	9221      	str	r2, [sp, #132]	; 0x84
 8000bca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000bce:	9220      	str	r2, [sp, #128]	; 0x80
 8000bd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000bd4:	921f      	str	r2, [sp, #124]	; 0x7c
 8000bd6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000bda:	921e      	str	r2, [sp, #120]	; 0x78
 8000bdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000be0:	921d      	str	r2, [sp, #116]	; 0x74
 8000be2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000be6:	921c      	str	r2, [sp, #112]	; 0x70
 8000be8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000bec:	921b      	str	r2, [sp, #108]	; 0x6c
 8000bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000bf2:	921a      	str	r2, [sp, #104]	; 0x68
 8000bf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000bf8:	9219      	str	r2, [sp, #100]	; 0x64
 8000bfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bfe:	9218      	str	r2, [sp, #96]	; 0x60
 8000c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000c04:	9217      	str	r2, [sp, #92]	; 0x5c
 8000c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000c0a:	9216      	str	r2, [sp, #88]	; 0x58
 8000c0c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000c10:	9215      	str	r2, [sp, #84]	; 0x54
 8000c12:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000c16:	9214      	str	r2, [sp, #80]	; 0x50
 8000c18:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000c1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8000c1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000c22:	9212      	str	r2, [sp, #72]	; 0x48
 8000c24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000c28:	9211      	str	r2, [sp, #68]	; 0x44
 8000c2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000c2e:	9210      	str	r2, [sp, #64]	; 0x40
 8000c30:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000c34:	920f      	str	r2, [sp, #60]	; 0x3c
 8000c36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8000c3c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000c40:	920d      	str	r2, [sp, #52]	; 0x34
 8000c42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000c46:	920c      	str	r2, [sp, #48]	; 0x30
 8000c48:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000c4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8000c4e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c52:	920a      	str	r2, [sp, #40]	; 0x28
 8000c54:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000c58:	9209      	str	r2, [sp, #36]	; 0x24
 8000c5a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000c5e:	9208      	str	r2, [sp, #32]
 8000c60:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000c64:	9207      	str	r2, [sp, #28]
 8000c66:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000c6a:	9206      	str	r2, [sp, #24]
 8000c6c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000c70:	9205      	str	r2, [sp, #20]
 8000c72:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000c76:	9204      	str	r2, [sp, #16]
 8000c78:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c7c:	9203      	str	r2, [sp, #12]
 8000c7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000c82:	9202      	str	r2, [sp, #8]
 8000c84:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000c88:	9201      	str	r2, [sp, #4]
 8000c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000c94:	4ac2      	ldr	r2, [pc, #776]	; (8000fa0 <writeSD+0x770>)
 8000c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	f00d fa8e 	bl	800e1bc <sniprintf>
 8000ca0:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428

		fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write
 8000ca4:	2212      	movs	r2, #18
 8000ca6:	49bf      	ldr	r1, [pc, #764]	; (8000fa4 <writeSD+0x774>)
 8000ca8:	48bf      	ldr	r0, [pc, #764]	; (8000fa8 <writeSD+0x778>)
 8000caa:	f00b fe7b 	bl	800c9a4 <f_open>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 8000cb4:	4bbc      	ldr	r3, [pc, #752]	; (8000fa8 <writeSD+0x778>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	48bb      	ldr	r0, [pc, #748]	; (8000fa8 <writeSD+0x778>)
 8000cbc:	f00c fa7a 	bl	800d1b4 <f_lseek>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		fresult = f_write(&file, block/*buffer_log*/, len, &bytes_written);     //write data to the file
 8000cc6:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8000cca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000cce:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000cd2:	48b5      	ldr	r0, [pc, #724]	; (8000fa8 <writeSD+0x778>)
 8000cd4:	f00c f832 	bl	800cd3c <f_write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//17//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//18//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
				"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//19//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
				"%u\t%u\t%u\t%u\n",					//20//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11

		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000cde:	4bb3      	ldr	r3, [pc, #716]	; (8000fac <writeSD+0x77c>)
 8000ce0:	f8b3 3844 	ldrh.w	r3, [r3, #2116]	; 0x844
		len = snprintf((char*) block, sizeof(block),
 8000ce4:	469e      	mov	lr, r3
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000ce6:	4bb1      	ldr	r3, [pc, #708]	; (8000fac <writeSD+0x77c>)
 8000ce8:	f8b3 3846 	ldrh.w	r3, [r3, #2118]	; 0x846
		len = snprintf((char*) block, sizeof(block),
 8000cec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000cf0:	4bae      	ldr	r3, [pc, #696]	; (8000fac <writeSD+0x77c>)
 8000cf2:	f8b3 3848 	ldrh.w	r3, [r3, #2120]	; 0x848
		len = snprintf((char*) block, sizeof(block),
 8000cf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000cfa:	4bac      	ldr	r3, [pc, #688]	; (8000fac <writeSD+0x77c>)
 8000cfc:	f8b3 384a 	ldrh.w	r3, [r3, #2122]	; 0x84a
		len = snprintf((char*) block, sizeof(block),
 8000d00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000d04:	4ba9      	ldr	r3, [pc, #676]	; (8000fac <writeSD+0x77c>)
 8000d06:	f8b3 3850 	ldrh.w	r3, [r3, #2128]	; 0x850
		len = snprintf((char*) block, sizeof(block),
 8000d0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000d0e:	4ba7      	ldr	r3, [pc, #668]	; (8000fac <writeSD+0x77c>)
 8000d10:	f8b3 3852 	ldrh.w	r3, [r3, #2130]	; 0x852
		len = snprintf((char*) block, sizeof(block),
 8000d14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000d18:	4ba4      	ldr	r3, [pc, #656]	; (8000fac <writeSD+0x77c>)
 8000d1a:	f8b3 3854 	ldrh.w	r3, [r3, #2132]	; 0x854
		len = snprintf((char*) block, sizeof(block),
 8000d1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000d22:	4ba2      	ldr	r3, [pc, #648]	; (8000fac <writeSD+0x77c>)
 8000d24:	f8b3 3856 	ldrh.w	r3, [r3, #2134]	; 0x856
		len = snprintf((char*) block, sizeof(block),
 8000d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d2c:	4b9f      	ldr	r3, [pc, #636]	; (8000fac <writeSD+0x77c>)
 8000d2e:	f8b3 3858 	ldrh.w	r3, [r3, #2136]	; 0x858
		len = snprintf((char*) block, sizeof(block),
 8000d32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d36:	4b9d      	ldr	r3, [pc, #628]	; (8000fac <writeSD+0x77c>)
 8000d38:	f8b3 385a 	ldrh.w	r3, [r3, #2138]	; 0x85a
		len = snprintf((char*) block, sizeof(block),
 8000d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d40:	4b9a      	ldr	r3, [pc, #616]	; (8000fac <writeSD+0x77c>)
 8000d42:	f8b3 385c 	ldrh.w	r3, [r3, #2140]	; 0x85c
		len = snprintf((char*) block, sizeof(block),
 8000d46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d4a:	4b98      	ldr	r3, [pc, #608]	; (8000fac <writeSD+0x77c>)
 8000d4c:	f8b3 385e 	ldrh.w	r3, [r3, #2142]	; 0x85e
		len = snprintf((char*) block, sizeof(block),
 8000d50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d54:	4b95      	ldr	r3, [pc, #596]	; (8000fac <writeSD+0x77c>)
 8000d56:	f8b3 3860 	ldrh.w	r3, [r3, #2144]	; 0x860
		len = snprintf((char*) block, sizeof(block),
 8000d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d5e:	4b93      	ldr	r3, [pc, #588]	; (8000fac <writeSD+0x77c>)
 8000d60:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
		len = snprintf((char*) block, sizeof(block),
 8000d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d68:	4b90      	ldr	r3, [pc, #576]	; (8000fac <writeSD+0x77c>)
 8000d6a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
		len = snprintf((char*) block, sizeof(block),
 8000d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000d72:	4b8e      	ldr	r3, [pc, #568]	; (8000fac <writeSD+0x77c>)
 8000d74:	f8b3 3866 	ldrh.w	r3, [r3, #2150]	; 0x866
		len = snprintf((char*) block, sizeof(block),
 8000d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000d7c:	4b8b      	ldr	r3, [pc, #556]	; (8000fac <writeSD+0x77c>)
 8000d7e:	f8b3 3868 	ldrh.w	r3, [r3, #2152]	; 0x868
		len = snprintf((char*) block, sizeof(block),
 8000d82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000d86:	4b89      	ldr	r3, [pc, #548]	; (8000fac <writeSD+0x77c>)
 8000d88:	f8b3 386a 	ldrh.w	r3, [r3, #2154]	; 0x86a
		len = snprintf((char*) block, sizeof(block),
 8000d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000d90:	4b86      	ldr	r3, [pc, #536]	; (8000fac <writeSD+0x77c>)
 8000d92:	f8b3 386c 	ldrh.w	r3, [r3, #2156]	; 0x86c
		len = snprintf((char*) block, sizeof(block),
 8000d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000d9a:	4b84      	ldr	r3, [pc, #528]	; (8000fac <writeSD+0x77c>)
 8000d9c:	f8b3 386e 	ldrh.w	r3, [r3, #2158]	; 0x86e
		len = snprintf((char*) block, sizeof(block),
 8000da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000da4:	4b81      	ldr	r3, [pc, #516]	; (8000fac <writeSD+0x77c>)
 8000da6:	f8b3 3870 	ldrh.w	r3, [r3, #2160]	; 0x870
		len = snprintf((char*) block, sizeof(block),
 8000daa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000dae:	4b7f      	ldr	r3, [pc, #508]	; (8000fac <writeSD+0x77c>)
 8000db0:	f8b3 3872 	ldrh.w	r3, [r3, #2162]	; 0x872
		len = snprintf((char*) block, sizeof(block),
 8000db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000db8:	4b7c      	ldr	r3, [pc, #496]	; (8000fac <writeSD+0x77c>)
 8000dba:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
		len = snprintf((char*) block, sizeof(block),
 8000dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000dc2:	4b7a      	ldr	r3, [pc, #488]	; (8000fac <writeSD+0x77c>)
 8000dc4:	f8b3 387a 	ldrh.w	r3, [r3, #2170]	; 0x87a
		len = snprintf((char*) block, sizeof(block),
 8000dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000dcc:	4b77      	ldr	r3, [pc, #476]	; (8000fac <writeSD+0x77c>)
 8000dce:	f8b3 387c 	ldrh.w	r3, [r3, #2172]	; 0x87c
		len = snprintf((char*) block, sizeof(block),
 8000dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000dd6:	4b75      	ldr	r3, [pc, #468]	; (8000fac <writeSD+0x77c>)
 8000dd8:	f8b3 387e 	ldrh.w	r3, [r3, #2174]	; 0x87e
		len = snprintf((char*) block, sizeof(block),
 8000ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000de0:	4b72      	ldr	r3, [pc, #456]	; (8000fac <writeSD+0x77c>)
 8000de2:	f8b3 3880 	ldrh.w	r3, [r3, #2176]	; 0x880
		len = snprintf((char*) block, sizeof(block),
 8000de6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000dea:	4b70      	ldr	r3, [pc, #448]	; (8000fac <writeSD+0x77c>)
 8000dec:	f8b3 3882 	ldrh.w	r3, [r3, #2178]	; 0x882
		len = snprintf((char*) block, sizeof(block),
 8000df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000df4:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <writeSD+0x77c>)
 8000df6:	f8b3 3884 	ldrh.w	r3, [r3, #2180]	; 0x884
		len = snprintf((char*) block, sizeof(block),
 8000dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000dfe:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <writeSD+0x77c>)
 8000e00:	f8b3 3886 	ldrh.w	r3, [r3, #2182]	; 0x886
		len = snprintf((char*) block, sizeof(block),
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000e08:	4b68      	ldr	r3, [pc, #416]	; (8000fac <writeSD+0x77c>)
 8000e0a:	f8b3 3888 	ldrh.w	r3, [r3, #2184]	; 0x888
		len = snprintf((char*) block, sizeof(block),
 8000e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	    /*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000e12:	4b66      	ldr	r3, [pc, #408]	; (8000fac <writeSD+0x77c>)
 8000e14:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
		len = snprintf((char*) block, sizeof(block),
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e1c:	4b63      	ldr	r3, [pc, #396]	; (8000fac <writeSD+0x77c>)
 8000e1e:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
		len = snprintf((char*) block, sizeof(block),
 8000e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e26:	4b61      	ldr	r3, [pc, #388]	; (8000fac <writeSD+0x77c>)
 8000e28:	f8b3 388e 	ldrh.w	r3, [r3, #2190]	; 0x88e
		len = snprintf((char*) block, sizeof(block),
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e30:	4b5e      	ldr	r3, [pc, #376]	; (8000fac <writeSD+0x77c>)
 8000e32:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
		len = snprintf((char*) block, sizeof(block),
 8000e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e3a:	4b5c      	ldr	r3, [pc, #368]	; (8000fac <writeSD+0x77c>)
 8000e3c:	f8b3 3892 	ldrh.w	r3, [r3, #2194]	; 0x892
		len = snprintf((char*) block, sizeof(block),
 8000e40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e44:	4b59      	ldr	r3, [pc, #356]	; (8000fac <writeSD+0x77c>)
 8000e46:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
		len = snprintf((char*) block, sizeof(block),
 8000e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e4e:	4b57      	ldr	r3, [pc, #348]	; (8000fac <writeSD+0x77c>)
 8000e50:	f8b3 3896 	ldrh.w	r3, [r3, #2198]	; 0x896
		len = snprintf((char*) block, sizeof(block),
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e58:	4b54      	ldr	r3, [pc, #336]	; (8000fac <writeSD+0x77c>)
 8000e5a:	f8b3 3898 	ldrh.w	r3, [r3, #2200]	; 0x898
		len = snprintf((char*) block, sizeof(block),
 8000e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000e62:	4b52      	ldr	r3, [pc, #328]	; (8000fac <writeSD+0x77c>)
 8000e64:	f8b3 389a 	ldrh.w	r3, [r3, #2202]	; 0x89a
		len = snprintf((char*) block, sizeof(block),
 8000e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <writeSD+0x77c>)
 8000e6e:	f8b3 38a0 	ldrh.w	r3, [r3, #2208]	; 0x8a0
		len = snprintf((char*) block, sizeof(block),
 8000e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e76:	4b4d      	ldr	r3, [pc, #308]	; (8000fac <writeSD+0x77c>)
 8000e78:	f8b3 38a2 	ldrh.w	r3, [r3, #2210]	; 0x8a2
		len = snprintf((char*) block, sizeof(block),
 8000e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <writeSD+0x77c>)
 8000e80:	f8b3 38a4 	ldrh.w	r3, [r3, #2212]	; 0x8a4
		len = snprintf((char*) block, sizeof(block),
 8000e84:	67bb      	str	r3, [r7, #120]	; 0x78
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <writeSD+0x77c>)
 8000e88:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
		len = snprintf((char*) block, sizeof(block),
 8000e8c:	677b      	str	r3, [r7, #116]	; 0x74
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <writeSD+0x77c>)
 8000e90:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
		len = snprintf((char*) block, sizeof(block),
 8000e94:	673b      	str	r3, [r7, #112]	; 0x70
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <writeSD+0x77c>)
 8000e98:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
		len = snprintf((char*) block, sizeof(block),
 8000e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <writeSD+0x77c>)
 8000ea0:	f8b3 38ac 	ldrh.w	r3, [r3, #2220]	; 0x8ac
		len = snprintf((char*) block, sizeof(block),
 8000ea4:	66bb      	str	r3, [r7, #104]	; 0x68
		/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <writeSD+0x77c>)
 8000ea8:	f8b3 38ae 	ldrh.w	r3, [r3, #2222]	; 0x8ae
		len = snprintf((char*) block, sizeof(block),
 8000eac:	667b      	str	r3, [r7, #100]	; 0x64
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <writeSD+0x77c>)
 8000eb0:	f8b3 38b0 	ldrh.w	r3, [r3, #2224]	; 0x8b0
		len = snprintf((char*) block, sizeof(block),
 8000eb4:	663b      	str	r3, [r7, #96]	; 0x60
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <writeSD+0x77c>)
 8000eb8:	f8b3 38b2 	ldrh.w	r3, [r3, #2226]	; 0x8b2
		len = snprintf((char*) block, sizeof(block),
 8000ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <writeSD+0x77c>)
 8000ec0:	f8b3 38b4 	ldrh.w	r3, [r3, #2228]	; 0x8b4
		len = snprintf((char*) block, sizeof(block),
 8000ec4:	65bb      	str	r3, [r7, #88]	; 0x58
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <writeSD+0x77c>)
 8000ec8:	f8b3 38b6 	ldrh.w	r3, [r3, #2230]	; 0x8b6
		len = snprintf((char*) block, sizeof(block),
 8000ecc:	657b      	str	r3, [r7, #84]	; 0x54
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <writeSD+0x77c>)
 8000ed0:	f8b3 38b8 	ldrh.w	r3, [r3, #2232]	; 0x8b8
		len = snprintf((char*) block, sizeof(block),
 8000ed4:	653b      	str	r3, [r7, #80]	; 0x50
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <writeSD+0x77c>)
 8000ed8:	f8b3 38ba 	ldrh.w	r3, [r3, #2234]	; 0x8ba
		len = snprintf((char*) block, sizeof(block),
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <writeSD+0x77c>)
 8000ee0:	f8b3 38bc 	ldrh.w	r3, [r3, #2236]	; 0x8bc
		len = snprintf((char*) block, sizeof(block),
 8000ee4:	64bb      	str	r3, [r7, #72]	; 0x48
		/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <writeSD+0x77c>)
 8000ee8:	f8b3 38be 	ldrh.w	r3, [r3, #2238]	; 0x8be
		len = snprintf((char*) block, sizeof(block),
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <writeSD+0x77c>)
 8000ef0:	f8b3 38c0 	ldrh.w	r3, [r3, #2240]	; 0x8c0
		len = snprintf((char*) block, sizeof(block),
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <writeSD+0x77c>)
 8000ef8:	f8b3 38c2 	ldrh.w	r3, [r3, #2242]	; 0x8c2
		len = snprintf((char*) block, sizeof(block),
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <writeSD+0x77c>)
 8000f00:	f8b3 38c8 	ldrh.w	r3, [r3, #2248]	; 0x8c8
		len = snprintf((char*) block, sizeof(block),
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <writeSD+0x77c>)
 8000f08:	f8b3 38ca 	ldrh.w	r3, [r3, #2250]	; 0x8ca
		len = snprintf((char*) block, sizeof(block),
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <writeSD+0x77c>)
 8000f10:	f8b3 38cc 	ldrh.w	r3, [r3, #2252]	; 0x8cc
		len = snprintf((char*) block, sizeof(block),
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <writeSD+0x77c>)
 8000f18:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
		len = snprintf((char*) block, sizeof(block),
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <writeSD+0x77c>)
 8000f20:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
		len = snprintf((char*) block, sizeof(block),
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
		/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <writeSD+0x77c>)
 8000f28:	f8b3 38d2 	ldrh.w	r3, [r3, #2258]	; 0x8d2
		len = snprintf((char*) block, sizeof(block),
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <writeSD+0x77c>)
 8000f30:	f8b3 38d4 	ldrh.w	r3, [r3, #2260]	; 0x8d4
		len = snprintf((char*) block, sizeof(block),
 8000f34:	623b      	str	r3, [r7, #32]
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <writeSD+0x77c>)
 8000f38:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
		len = snprintf((char*) block, sizeof(block),
 8000f3c:	61fb      	str	r3, [r7, #28]
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <writeSD+0x77c>)
 8000f40:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
		len = snprintf((char*) block, sizeof(block),
 8000f44:	61bb      	str	r3, [r7, #24]
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <writeSD+0x77c>)
 8000f48:	f8b3 38da 	ldrh.w	r3, [r3, #2266]	; 0x8da
		len = snprintf((char*) block, sizeof(block),
 8000f4c:	617b      	str	r3, [r7, #20]
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <writeSD+0x77c>)
 8000f50:	f8b3 38dc 	ldrh.w	r3, [r3, #2268]	; 0x8dc
		len = snprintf((char*) block, sizeof(block),
 8000f54:	613b      	str	r3, [r7, #16]
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <writeSD+0x77c>)
 8000f58:	f8b3 38de 	ldrh.w	r3, [r3, #2270]	; 0x8de
		len = snprintf((char*) block, sizeof(block),
 8000f5c:	461e      	mov	r6, r3
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <writeSD+0x77c>)
 8000f60:	f8b3 38e0 	ldrh.w	r3, [r3, #2272]	; 0x8e0
		len = snprintf((char*) block, sizeof(block),
 8000f64:	461d      	mov	r5, r3
		/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <writeSD+0x77c>)
 8000f68:	f8b3 38e2 	ldrh.w	r3, [r3, #2274]	; 0x8e2
		len = snprintf((char*) block, sizeof(block),
 8000f6c:	461c      	mov	r4, r3
		/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <writeSD+0x77c>)
 8000f70:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
		len = snprintf((char*) block, sizeof(block),
 8000f74:	4618      	mov	r0, r3
		/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <writeSD+0x77c>)
 8000f78:	f8b3 38e6 	ldrh.w	r3, [r3, #2278]	; 0x8e6
		len = snprintf((char*) block, sizeof(block),
 8000f7c:	4619      	mov	r1, r3
		/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <writeSD+0x77c>)
 8000f80:	f8b3 38e8 	ldrh.w	r3, [r3, #2280]	; 0x8e8
		len = snprintf((char*) block, sizeof(block),
 8000f84:	461a      	mov	r2, r3
		/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <writeSD+0x77c>)
 8000f88:	f8b3 38ea 	ldrh.w	r3, [r3, #2282]	; 0x8ea
		len = snprintf((char*) block, sizeof(block),
 8000f8c:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 8000f90:	934a      	str	r3, [sp, #296]	; 0x128
 8000f92:	9249      	str	r2, [sp, #292]	; 0x124
 8000f94:	9148      	str	r1, [sp, #288]	; 0x120
 8000f96:	9047      	str	r0, [sp, #284]	; 0x11c
 8000f98:	9446      	str	r4, [sp, #280]	; 0x118
 8000f9a:	9545      	str	r5, [sp, #276]	; 0x114
 8000f9c:	9644      	str	r6, [sp, #272]	; 0x110
 8000f9e:	e007      	b.n	8000fb0 <writeSD+0x780>
 8000fa0:	08010b1c 	.word	0x08010b1c
 8000fa4:	240024d8 	.word	0x240024d8
 8000fa8:	240014a8 	.word	0x240014a8
 8000fac:	240024ec 	.word	0x240024ec
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	9243      	str	r2, [sp, #268]	; 0x10c
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	9242      	str	r2, [sp, #264]	; 0x108
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	9241      	str	r2, [sp, #260]	; 0x104
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	9240      	str	r2, [sp, #256]	; 0x100
 8000fc0:	6a3a      	ldr	r2, [r7, #32]
 8000fc2:	923f      	str	r2, [sp, #252]	; 0xfc
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc6:	923e      	str	r2, [sp, #248]	; 0xf8
 8000fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fca:	923d      	str	r2, [sp, #244]	; 0xf4
 8000fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fce:	923c      	str	r2, [sp, #240]	; 0xf0
 8000fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fd2:	923b      	str	r2, [sp, #236]	; 0xec
 8000fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd6:	923a      	str	r2, [sp, #232]	; 0xe8
 8000fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fda:	9239      	str	r2, [sp, #228]	; 0xe4
 8000fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fde:	9238      	str	r2, [sp, #224]	; 0xe0
 8000fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fe2:	9237      	str	r2, [sp, #220]	; 0xdc
 8000fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000fe6:	9236      	str	r2, [sp, #216]	; 0xd8
 8000fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000fea:	9235      	str	r2, [sp, #212]	; 0xd4
 8000fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fee:	9234      	str	r2, [sp, #208]	; 0xd0
 8000ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ff2:	9233      	str	r2, [sp, #204]	; 0xcc
 8000ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff6:	9232      	str	r2, [sp, #200]	; 0xc8
 8000ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ffa:	9231      	str	r2, [sp, #196]	; 0xc4
 8000ffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ffe:	9230      	str	r2, [sp, #192]	; 0xc0
 8001000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001002:	922f      	str	r2, [sp, #188]	; 0xbc
 8001004:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001006:	922e      	str	r2, [sp, #184]	; 0xb8
 8001008:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800100a:	922d      	str	r2, [sp, #180]	; 0xb4
 800100c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800100e:	922c      	str	r2, [sp, #176]	; 0xb0
 8001010:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001012:	922b      	str	r2, [sp, #172]	; 0xac
 8001014:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001016:	922a      	str	r2, [sp, #168]	; 0xa8
 8001018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800101a:	9229      	str	r2, [sp, #164]	; 0xa4
 800101c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800101e:	9228      	str	r2, [sp, #160]	; 0xa0
 8001020:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001024:	9227      	str	r2, [sp, #156]	; 0x9c
 8001026:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800102a:	9226      	str	r2, [sp, #152]	; 0x98
 800102c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001030:	9225      	str	r2, [sp, #148]	; 0x94
 8001032:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001036:	9224      	str	r2, [sp, #144]	; 0x90
 8001038:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800103c:	9223      	str	r2, [sp, #140]	; 0x8c
 800103e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001042:	9222      	str	r2, [sp, #136]	; 0x88
 8001044:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001048:	9221      	str	r2, [sp, #132]	; 0x84
 800104a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800104e:	9220      	str	r2, [sp, #128]	; 0x80
 8001050:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001054:	921f      	str	r2, [sp, #124]	; 0x7c
 8001056:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800105a:	921e      	str	r2, [sp, #120]	; 0x78
 800105c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001060:	921d      	str	r2, [sp, #116]	; 0x74
 8001062:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001066:	921c      	str	r2, [sp, #112]	; 0x70
 8001068:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800106c:	921b      	str	r2, [sp, #108]	; 0x6c
 800106e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001072:	921a      	str	r2, [sp, #104]	; 0x68
 8001074:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001078:	9219      	str	r2, [sp, #100]	; 0x64
 800107a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800107e:	9218      	str	r2, [sp, #96]	; 0x60
 8001080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001084:	9217      	str	r2, [sp, #92]	; 0x5c
 8001086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800108a:	9216      	str	r2, [sp, #88]	; 0x58
 800108c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001090:	9215      	str	r2, [sp, #84]	; 0x54
 8001092:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001096:	9214      	str	r2, [sp, #80]	; 0x50
 8001098:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800109c:	9213      	str	r2, [sp, #76]	; 0x4c
 800109e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80010a2:	9212      	str	r2, [sp, #72]	; 0x48
 80010a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80010a8:	9211      	str	r2, [sp, #68]	; 0x44
 80010aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010ae:	9210      	str	r2, [sp, #64]	; 0x40
 80010b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80010b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80010b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80010ba:	920e      	str	r2, [sp, #56]	; 0x38
 80010bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80010c0:	920d      	str	r2, [sp, #52]	; 0x34
 80010c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80010c6:	920c      	str	r2, [sp, #48]	; 0x30
 80010c8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80010cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80010ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80010d2:	920a      	str	r2, [sp, #40]	; 0x28
 80010d4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80010d8:	9209      	str	r2, [sp, #36]	; 0x24
 80010da:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80010de:	9208      	str	r2, [sp, #32]
 80010e0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80010e4:	9207      	str	r2, [sp, #28]
 80010e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80010ea:	9206      	str	r2, [sp, #24]
 80010ec:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80010f0:	9205      	str	r2, [sp, #20]
 80010f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80010f6:	9204      	str	r2, [sp, #16]
 80010f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80010fc:	9203      	str	r2, [sp, #12]
 80010fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001102:	9202      	str	r2, [sp, #8]
 8001104:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4673      	mov	r3, lr
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <writeSD+0x938>)
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	4660      	mov	r0, ip
 800111a:	f00d f84f 	bl	800e1bc <sniprintf>
 800111e:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428

		fresult = f_write(&file, block/*buffer_log*/, len, &bytes_written);     //write data to the file
 8001122:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001126:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800112a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <writeSD+0x93c>)
 8001130:	f00b fe04 	bl	800cd3c <f_write>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		fresult = f_close(&file);//closes the file
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <writeSD+0x93c>)
 800113c:	f00c f810 	bl	800d160 <f_close>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
		if(fresult == FR_OK){
 8001146:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <writeSD+0x926>
			_datalog_flag  = 1;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <writeSD+0x940>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
		}
		else _datalog_flag = 0;

}
 8001154:	e002      	b.n	800115c <writeSD+0x92c>
		else _datalog_flag = 0;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <writeSD+0x940>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	f207 4734 	addw	r7, r7, #1076	; 0x434
 8001162:	46bd      	mov	sp, r7
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	bf00      	nop
 8001168:	08010c10 	.word	0x08010c10
 800116c:	240014a8 	.word	0x240014a8
 8001170:	24001234 	.word	0x24001234

08001174 <Clean_CAN_Struct>:

CanIdData_t can_vector[CAN_IDS_NUMBER];



void Clean_CAN_Struct(void) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	80fb      	strh	r3, [r7, #6]
 800117e:	e019      	b.n	80011b4 <Clean_CAN_Struct+0x40>
		can_vector[i].word_0 = 0;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <Clean_CAN_Struct+0x58>)
 8001184:	2100      	movs	r1, #0
 8001186:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <Clean_CAN_Struct+0x58>)
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	2200      	movs	r2, #0
 8001194:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <Clean_CAN_Struct+0x58>)
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	2200      	movs	r2, #0
 80011a0:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <Clean_CAN_Struct+0x58>)
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	2200      	movs	r2, #0
 80011ac:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	3301      	adds	r3, #1
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011ba:	d3e1      	bcc.n	8001180 <Clean_CAN_Struct+0xc>
	}
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	240024ec 	.word	0x240024ec

080011d0 <canMessageReceived>:

void canMessageReceived(uint16_t id, uint8_t *data) {
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	80fb      	strh	r3, [r7, #6]
	if (id > CAN_IDS_NUMBER - 1)
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011e2:	d220      	bcs.n	8001226 <canMessageReceived+0x56>
		return;

	uint16_t *data_word = (uint16_t*) data;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	60fb      	str	r3, [r7, #12]
	can_vector[id].word_0 = data_word[0];
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	8811      	ldrh	r1, [r2, #0]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <canMessageReceived+0x64>)
 80011f0:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[id].word_1 = data_word[1];
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	8851      	ldrh	r1, [r2, #2]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <canMessageReceived+0x64>)
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	460a      	mov	r2, r1
 8001202:	805a      	strh	r2, [r3, #2]
	can_vector[id].word_2 = data_word[2];
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	8891      	ldrh	r1, [r2, #4]
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <canMessageReceived+0x64>)
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4413      	add	r3, r2
 8001210:	460a      	mov	r2, r1
 8001212:	809a      	strh	r2, [r3, #4]
	can_vector[id].word_3 = data_word[3];
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	88d1      	ldrh	r1, [r2, #6]
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <canMessageReceived+0x64>)
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	80da      	strh	r2, [r3, #6]
 8001224:	e000      	b.n	8001228 <canMessageReceived+0x58>
		return;
 8001226:	bf00      	nop
}
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	240024ec 	.word	0x240024ec

08001238 <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <initialize_general_CAN+0x24>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <initialize_general_CAN+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <initialize_general_CAN+0x28>)
 800124c:	4905      	ldr	r1, [pc, #20]	; (8001264 <initialize_general_CAN+0x2c>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fa1a 	bl	8000688 <initialize_CAN>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	24001238 	.word	0x24001238
 8001260:	2400123c 	.word	0x2400123c
 8001264:	08001269 	.word	0x08001269

08001268 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d043      	beq.n	8001304 <CAN_general_receive_callback+0x9c>

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <CAN_general_receive_callback+0xa4>)
 800127e:	4a24      	ldr	r2, [pc, #144]	; (8001310 <CAN_general_receive_callback+0xa8>)
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f001 fa1c 	bl	80026c0 <HAL_FDCAN_GetRxMessage>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 800128e:	f000 fa2b 	bl	80016e8 <Error_Handler>
		}

		idgeneral = RxHeader.Identifier;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <CAN_general_receive_callback+0xa8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <CAN_general_receive_callback+0xac>)
 8001298:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e019      	b.n	80012d4 <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <CAN_general_receive_callback+0xa4>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b219      	sxth	r1, r3
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <CAN_general_receive_callback+0xa4>)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da00      	bge.n	80012be <CAN_general_receive_callback+0x56>
 80012bc:	3301      	adds	r3, #1
 80012be:	105b      	asrs	r3, r3, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	ea41 0302 	orr.w	r3, r1, r2
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <CAN_general_receive_callback+0xb0>)
 80012ca:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3302      	adds	r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	dde2      	ble.n	80012a0 <CAN_general_receive_callback+0x38>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <CAN_general_receive_callback+0xb4>)
 80012de:	f002 fa74 	bl	80037ca <HAL_GPIO_TogglePin>
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas
		canMessageReceived(idgeneral, datageneral);
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <CAN_general_receive_callback+0xac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	490b      	ldr	r1, [pc, #44]	; (8001318 <CAN_general_receive_callback+0xb0>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff70 	bl	80011d0 <canMessageReceived>

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80012f0:	2200      	movs	r2, #0
 80012f2:	2101      	movs	r1, #1
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f001 fb51 	bl	800299c <HAL_FDCAN_ActivateNotification>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <CAN_general_receive_callback+0x9c>
			/* Notification Error */
			Error_Handler();
 8001300:	f000 f9f2 	bl	80016e8 <Error_Handler>
		}
	}
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	24003178 	.word	0x24003178
 8001310:	24003180 	.word	0x24003180
 8001314:	2400316c 	.word	0x2400316c
 8001318:	24003170 	.word	0x24003170
 800131c:	58020c00 	.word	0x58020c00

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f000 fd47 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 f817 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f000 f95d 	bl	80015ec <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001332:	f000 f88d 	bl	8001450 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8001336:	f000 f90d 	bl	8001554 <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 800133a:	f000 f8ed 	bl	8001518 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800133e:	f008 fddf 	bl	8009f00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 8001342:	f7ff f9df 	bl	8000704 <init_CAN>
  SD_Create_File();
 8001346:	f7ff f9e7 	bl	8000718 <SD_Create_File>
  cabecalho();
 800134a:	f7ff fa2d 	bl	80007a8 <cabecalho>
  Clean_CAN_Struct();
 800134e:	f7ff ff11 	bl	8001174 <Clean_CAN_Struct>
  //uint16_t vet_tx[4]={0,0,0,0};
  uint16_t id = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  writeSD();
 8001356:	f7ff fa6b 	bl	8000830 <writeSD>
 800135a:	e7fc      	b.n	8001356 <main+0x36>

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09c      	sub	sp, #112	; 0x70
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	224c      	movs	r2, #76	; 0x4c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00c fada 	bl	800d924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2220      	movs	r2, #32
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f00c fad4 	bl	800d924 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800137c:	2002      	movs	r0, #2
 800137e:	f002 fa3f 	bl	8003800 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <SystemClock_Config+0xec>)
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <SystemClock_Config+0xec>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <SystemClock_Config+0xec>)
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <SystemClock_Config+0xf0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a2a      	ldr	r2, [pc, #168]	; (800144c <SystemClock_Config+0xf0>)
 80013a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <SystemClock_Config+0xf0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b4:	bf00      	nop
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <SystemClock_Config+0xf0>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d1f8      	bne.n	80013b6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013da:	2364      	movs	r3, #100	; 0x64
 80013dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e2:	2304      	movs	r3, #4
 80013e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013ea:	230c      	movs	r3, #12
 80013ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fa3a 	bl	8003874 <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001406:	f000 f96f 	bl	80016e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140a:	233f      	movs	r3, #63	; 0x3f
 800140c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140e:	2303      	movs	r3, #3
 8001410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001416:	2308      	movs	r3, #8
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001426:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fe2f 	bl	8004094 <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800143c:	f000 f954 	bl	80016e8 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3770      	adds	r7, #112	; 0x70
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	58000400 	.word	0x58000400
 800144c:	58024800 	.word	0x58024800

08001450 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <MX_FDCAN1_Init+0xc4>)
 8001458:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001468:	2200      	movs	r2, #0
 800146a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800146e:	2200      	movs	r2, #0
 8001470:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001474:	2200      	movs	r2, #0
 8001476:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800147a:	2201      	movs	r2, #1
 800147c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001480:	2202      	movs	r2, #2
 8001482:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001486:	220d      	movs	r2, #13
 8001488:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800148c:	2202      	movs	r2, #2
 800148e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001492:	2201      	movs	r2, #1
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 8001498:	2202      	movs	r2, #2
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 800149e:	220d      	movs	r2, #13
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014a4:	2202      	movs	r2, #2
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014bc:	2220      	movs	r2, #32
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014c8:	2220      	movs	r2, #32
 80014ca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014d4:	2220      	movs	r2, #32
 80014d6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014da:	2204      	movs	r2, #4
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014e0:	2220      	movs	r2, #32
 80014e2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014e6:	2220      	movs	r2, #32
 80014e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014ec:	2220      	movs	r2, #32
 80014ee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014f8:	2204      	movs	r2, #4
 80014fa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_FDCAN1_Init+0xc0>)
 80014fe:	f000 fe2d 	bl	800215c <HAL_FDCAN_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001508:	f000 f8ee 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	24003224 	.word	0x24003224
 8001514:	4000a000 	.word	0x4000a000

08001518 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_SDMMC1_SD_Init+0x34>)
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <MX_SDMMC1_SD_Init+0x38>)
 8001520:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_SDMMC1_SD_Init+0x34>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_SDMMC1_SD_Init+0x34>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_SDMMC1_SD_Init+0x34>)
 8001530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001534:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <MX_SDMMC1_SD_Init+0x34>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <MX_SDMMC1_SD_Init+0x34>)
 800153e:	2204      	movs	r2, #4
 8001540:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	240031a8 	.word	0x240031a8
 8001550:	52007000 	.word	0x52007000

08001554 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <MX_UART4_Init+0x90>)
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <MX_UART4_Init+0x94>)
 800155c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_UART4_Init+0x90>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_UART4_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_UART4_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_UART4_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_UART4_Init+0x90>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_UART4_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_UART4_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_UART4_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_UART4_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_UART4_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <MX_UART4_Init+0x90>)
 800159e:	f006 fec5 	bl	800832c <HAL_UART_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015a8:	f000 f89e 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_UART4_Init+0x90>)
 80015b0:	f007 fe12 	bl	80091d8 <HAL_UARTEx_SetTxFifoThreshold>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f000 f895 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <MX_UART4_Init+0x90>)
 80015c2:	f007 fe47 	bl	8009254 <HAL_UARTEx_SetRxFifoThreshold>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015cc:	f000 f88c 	bl	80016e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_UART4_Init+0x90>)
 80015d2:	f007 fdc8 	bl	8009166 <HAL_UARTEx_DisableFifoMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f000 f884 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	24003318 	.word	0x24003318
 80015e8:	40004c00 	.word	0x40004c00

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800160a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a2e      	ldr	r2, [pc, #184]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <MX_GPIO_Init+0xf4>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_GPIO_Init+0xf4>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <MX_GPIO_Init+0xf8>)
 800169e:	f002 f87b 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	480b      	ldr	r0, [pc, #44]	; (80016e4 <MX_GPIO_Init+0xf8>)
 80016b6:	f001 fea7 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_GPIO_Init+0xf8>)
 80016d2:	f001 fe99 	bl	8003408 <HAL_GPIO_Init>

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	58024400 	.word	0x58024400
 80016e4:	58020c00 	.word	0x58020c00

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_MspInit+0x30>)
 80016fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x30>)
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x30>)
 800170c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	58024400 	.word	0x58024400

08001728 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0b8      	sub	sp, #224	; 0xe0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	22bc      	movs	r2, #188	; 0xbc
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00c f8eb 	bl	800d924 <memset>
  if(hfdcan->Instance==FDCAN1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a2d      	ldr	r2, [pc, #180]	; (8001808 <HAL_FDCAN_MspInit+0xe0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d152      	bne.n	80017fe <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800175c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800175e:	2300      	movs	r3, #0
 8001760:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f820 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8001772:	f7ff ffb9 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_FDCAN_MspInit+0xe4>)
 8001778:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <HAL_FDCAN_MspInit+0xe4>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_FDCAN_MspInit+0xe4>)
 8001788:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_FDCAN_MspInit+0xe4>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_FDCAN_MspInit+0xe4>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_FDCAN_MspInit+0xe4>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017cc:	2309      	movs	r3, #9
 80017ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017d6:	4619      	mov	r1, r3
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <HAL_FDCAN_MspInit+0xe8>)
 80017da:	f001 fe15 	bl	8003408 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2013      	movs	r0, #19
 80017e4:	f000 fc85 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80017e8:	2013      	movs	r0, #19
 80017ea:	f000 fc9c 	bl	8002126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2015      	movs	r0, #21
 80017f4:	f000 fc7d 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80017f8:	2015      	movs	r0, #21
 80017fa:	f000 fc94 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	37e0      	adds	r7, #224	; 0xe0
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	4000a000 	.word	0x4000a000
 800180c:	58024400 	.word	0x58024400
 8001810:	58020400 	.word	0x58020400

08001814 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0ba      	sub	sp, #232	; 0xe8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	22bc      	movs	r2, #188	; 0xbc
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f00c f875 	bl	800d924 <memset>
  if(hsd->Instance==SDMMC1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a46      	ldr	r2, [pc, #280]	; (8001958 <HAL_SD_MspInit+0x144>)
 8001840:	4293      	cmp	r3, r2
 8001842:	f040 8085 	bne.w	8001950 <HAL_SD_MspInit+0x13c>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800184c:	2300      	movs	r3, #0
 800184e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4618      	mov	r0, r3
 8001856:	f002 ffa9 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001860:	f7ff ff42 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_SD_MspInit+0x148>)
 8001866:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <HAL_SD_MspInit+0x148>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_SD_MspInit+0x148>)
 8001876:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_SD_MspInit+0x148>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a34      	ldr	r2, [pc, #208]	; (800195c <HAL_SD_MspInit+0x148>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_SD_MspInit+0x148>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a0:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_SD_MspInit+0x148>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <HAL_SD_MspInit+0x148>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_SD_MspInit+0x148>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80018be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018d8:	230c      	movs	r3, #12
 80018da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e2:	4619      	mov	r1, r3
 80018e4:	481e      	ldr	r0, [pc, #120]	; (8001960 <HAL_SD_MspInit+0x14c>)
 80018e6:	f001 fd8f 	bl	8003408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001904:	230c      	movs	r3, #12
 8001906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800190e:	4619      	mov	r1, r3
 8001910:	4813      	ldr	r0, [pc, #76]	; (8001960 <HAL_SD_MspInit+0x14c>)
 8001912:	f001 fd79 	bl	8003408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001916:	2304      	movs	r3, #4
 8001918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800192e:	230c      	movs	r3, #12
 8001930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001934:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001938:	4619      	mov	r1, r3
 800193a:	480a      	ldr	r0, [pc, #40]	; (8001964 <HAL_SD_MspInit+0x150>)
 800193c:	f001 fd64 	bl	8003408 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2031      	movs	r0, #49	; 0x31
 8001946:	f000 fbd4 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800194a:	2031      	movs	r0, #49	; 0x31
 800194c:	f000 fbeb 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	37e8      	adds	r7, #232	; 0xe8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	52007000 	.word	0x52007000
 800195c:	58024400 	.word	0x58024400
 8001960:	58020800 	.word	0x58020800
 8001964:	58020c00 	.word	0x58020c00

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0b8      	sub	sp, #224	; 0xe0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	22bc      	movs	r2, #188	; 0xbc
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f00b ffcb 	bl	800d924 <memset>
  if(huart->Instance==UART4)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_UART_MspInit+0xbc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d141      	bne.n	8001a1c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 ff00 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019b2:	f7ff fe99 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_UART_MspInit+0xc0>)
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019bc:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_UART_MspInit+0xc0>)
 80019be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_UART_MspInit+0xc0>)
 80019c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_UART_MspInit+0xc0>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_UART_MspInit+0xc0>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_UART_MspInit+0xc0>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_UART_MspInit+0xc4>)
 8001a18:	f001 fcf6 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	37e0      	adds	r7, #224	; 0xe0
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40004c00 	.word	0x40004c00
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	58020000 	.word	0x58020000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 fa0e 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <FDCAN1_IT0_IRQHandler+0x10>)
 8001a8a:	f001 f801 	bl	8002a90 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	24003224 	.word	0x24003224

08001a98 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <FDCAN1_IT1_IRQHandler+0x10>)
 8001a9e:	f000 fff7 	bl	8002a90 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	24003224 	.word	0x24003224

08001aac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <SDMMC1_IRQHandler+0x10>)
 8001ab2:	f005 fa69 	bl	8006f88 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	240031a8 	.word	0x240031a8

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ada:	f00b feeb 	bl	800d8b4 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b02:	e7fe      	b.n	8001b02 <_exit+0x12>

08001b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b16:	f3af 8000 	nop.w
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf0      	blt.n	8001b16 <_read+0x12>
	}

return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e009      	b.n	8001b64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf1      	blt.n	8001b50 <_write+0x12>
	}
	return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_close>:

int _close(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f00b fe50 	bl	800d8b4 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	24080000 	.word	0x24080000
 8001c40:	00000800 	.word	0x00000800
 8001c44:	24001260 	.word	0x24001260
 8001c48:	24005430 	.word	0x24005430

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <SystemInit+0xec>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <SystemInit+0xec>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <SystemInit+0xf0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d807      	bhi.n	8001c7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <SystemInit+0xf0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 030f 	bic.w	r3, r3, #15
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <SystemInit+0xf0>)
 8001c76:	f043 0307 	orr.w	r3, r3, #7
 8001c7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <SystemInit+0xf4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <SystemInit+0xf4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <SystemInit+0xf4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <SystemInit+0xf4>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	492b      	ldr	r1, [pc, #172]	; (8001d40 <SystemInit+0xf4>)
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <SystemInit+0xf8>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <SystemInit+0xf0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <SystemInit+0xf0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <SystemInit+0xf0>)
 8001cb0:	f043 0307 	orr.w	r3, r3, #7
 8001cb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <SystemInit+0xf4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <SystemInit+0xf4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <SystemInit+0xf4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <SystemInit+0xf4>)
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <SystemInit+0xfc>)
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <SystemInit+0xf4>)
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <SystemInit+0x100>)
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <SystemInit+0xf4>)
 8001cd6:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <SystemInit+0x104>)
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <SystemInit+0xf4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <SystemInit+0xf4>)
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <SystemInit+0x104>)
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <SystemInit+0xf4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <SystemInit+0xf4>)
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <SystemInit+0x104>)
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <SystemInit+0xf4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <SystemInit+0xf4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <SystemInit+0xf4>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <SystemInit+0xf4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <SystemInit+0x108>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <SystemInit+0x10c>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d16:	d202      	bcs.n	8001d1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <SystemInit+0x110>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <SystemInit+0x114>)
 8001d20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d24:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SystemInit+0xec>)
 8001d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d2c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00
 8001d3c:	52002000 	.word	0x52002000
 8001d40:	58024400 	.word	0x58024400
 8001d44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d48:	02020200 	.word	0x02020200
 8001d4c:	01ff0000 	.word	0x01ff0000
 8001d50:	01010280 	.word	0x01010280
 8001d54:	5c001000 	.word	0x5c001000
 8001d58:	ffff0000 	.word	0xffff0000
 8001d5c:	51008108 	.word	0x51008108
 8001d60:	52004000 	.word	0x52004000

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d68:	f7ff ff70 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d92:	f00b fd95 	bl	800d8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff fac3 	bl	8001320 <main>
  bx  lr
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001da0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001da4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001da8:	0801161c 	.word	0x0801161c
  ldr r2, =_sbss
 8001dac:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001db0:	2400542c 	.word	0x2400542c

08001db4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC3_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	f000 f98c 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dc4:	f002 fb1c 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_Init+0x68>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	4913      	ldr	r1, [pc, #76]	; (8001e24 <HAL_Init+0x6c>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_Init+0x68>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_Init+0x6c>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_Init+0x70>)
 8001dfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_Init+0x74>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f814 	bl	8001e30 <HAL_InitTick>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e002      	b.n	8001e18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e12:	f7ff fc6f 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	58024400 	.word	0x58024400
 8001e24:	08010d8c 	.word	0x08010d8c
 8001e28:	24000004 	.word	0x24000004
 8001e2c:	24000000 	.word	0x24000000

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_InitTick+0x60>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e021      	b.n	8001e88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_InitTick+0x64>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_InitTick+0x60>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f971 	bl	8002142 <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f93b 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_InitTick+0x68>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2400000c 	.word	0x2400000c
 8001e94:	24000000 	.word	0x24000000
 8001e98:	24000008 	.word	0x24000008

08001e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2400000c 	.word	0x2400000c
 8001ec0:	240033a8 	.word	0x240033a8

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	240033a8 	.word	0x240033a8

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2400000c 	.word	0x2400000c

08001f24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetREVID+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	5c001000 	.word	0x5c001000

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <__NVIC_SetPriorityGrouping+0x40>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <__NVIC_SetPriorityGrouping+0x40>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	05fa0000 	.word	0x05fa0000

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff40 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ff90 	bl	8002030 <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5f 	bl	8001fdc <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff33 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa4 	bl	8002098 <SysTick_Config>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b098      	sub	sp, #96	; 0x60
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002164:	4a99      	ldr	r2, [pc, #612]	; (80023cc <HAL_FDCAN_Init+0x270>)
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	4611      	mov	r1, r2
 800216c:	224c      	movs	r2, #76	; 0x4c
 800216e:	4618      	mov	r0, r3
 8002170:	f00b fbca 	bl	800d908 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e23d      	b.n	80025fa <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a93      	ldr	r2, [pc, #588]	; (80023d0 <HAL_FDCAN_Init+0x274>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d106      	bne.n	8002196 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d155      	bne.n	800224e <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a89      	ldr	r2, [pc, #548]	; (80023d4 <HAL_FDCAN_Init+0x278>)
 80021ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a88      	ldr	r2, [pc, #544]	; (80023d8 <HAL_FDCAN_Init+0x27c>)
 80021b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a87      	ldr	r2, [pc, #540]	; (80023dc <HAL_FDCAN_Init+0x280>)
 80021be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a86      	ldr	r2, [pc, #536]	; (80023e0 <HAL_FDCAN_Init+0x284>)
 80021c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a85      	ldr	r2, [pc, #532]	; (80023e4 <HAL_FDCAN_Init+0x288>)
 80021ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a84      	ldr	r2, [pc, #528]	; (80023e8 <HAL_FDCAN_Init+0x28c>)
 80021d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a83      	ldr	r2, [pc, #524]	; (80023ec <HAL_FDCAN_Init+0x290>)
 80021de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a82      	ldr	r2, [pc, #520]	; (80023f0 <HAL_FDCAN_Init+0x294>)
 80021e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a81      	ldr	r2, [pc, #516]	; (80023f4 <HAL_FDCAN_Init+0x298>)
 80021ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a80      	ldr	r2, [pc, #512]	; (80023f8 <HAL_FDCAN_Init+0x29c>)
 80021f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <HAL_FDCAN_Init+0x2a0>)
 80021fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a7e      	ldr	r2, [pc, #504]	; (8002400 <HAL_FDCAN_Init+0x2a4>)
 8002206:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a7d      	ldr	r2, [pc, #500]	; (8002404 <HAL_FDCAN_Init+0x2a8>)
 800220e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a7c      	ldr	r2, [pc, #496]	; (8002408 <HAL_FDCAN_Init+0x2ac>)
 8002216:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a7b      	ldr	r2, [pc, #492]	; (800240c <HAL_FDCAN_Init+0x2b0>)
 800221e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a7a      	ldr	r2, [pc, #488]	; (8002410 <HAL_FDCAN_Init+0x2b4>)
 8002226:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a79      	ldr	r2, [pc, #484]	; (8002414 <HAL_FDCAN_Init+0x2b8>)
 800222e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a76      	ldr	r2, [pc, #472]	; (8002418 <HAL_FDCAN_Init+0x2bc>)
 8002240:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0210 	bic.w	r2, r2, #16
 800225c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225e:	f7ff fe31 	bl	8001ec4 <HAL_GetTick>
 8002262:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002264:	e014      	b.n	8002290 <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002266:	f7ff fe2d 	bl	8001ec4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b0a      	cmp	r3, #10
 8002272:	d90d      	bls.n	8002290 <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2203      	movs	r2, #3
 8002288:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e1b4      	b.n	80025fa <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b08      	cmp	r3, #8
 800229c:	d0e3      	beq.n	8002266 <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ae:	f7ff fe09 	bl	8001ec4 <HAL_GetTick>
 80022b2:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022b4:	e014      	b.n	80022e0 <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022b6:	f7ff fe05 	bl	8001ec4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	d90d      	bls.n	80022e0 <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2203      	movs	r2, #3
 80022d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e18c      	b.n	80025fa <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0e3      	beq.n	80022b6 <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0202 	orr.w	r2, r2, #2
 80022fc:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7c1b      	ldrb	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002314:	619a      	str	r2, [r3, #24]
 8002316:	e007      	b.n	8002328 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002326:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7c5b      	ldrb	r3, [r3, #17]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	e007      	b.n	8002352 <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002350:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7c9b      	ldrb	r3, [r3, #18]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002368:	619a      	str	r2, [r3, #24]
 800236a:	e007      	b.n	800237c <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800237a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80023a0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0210 	bic.w	r2, r2, #16
 80023b0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d130      	bne.n	800241c <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	e054      	b.n	8002476 <HAL_FDCAN_Init+0x31a>
 80023cc:	08010cf8 	.word	0x08010cf8
 80023d0:	4000a000 	.word	0x4000a000
 80023d4:	08002f91 	.word	0x08002f91
 80023d8:	08002fa7 	.word	0x08002fa7
 80023dc:	08002fbd 	.word	0x08002fbd
 80023e0:	08002fd3 	.word	0x08002fd3
 80023e4:	08002fe9 	.word	0x08002fe9
 80023e8:	08002ffd 	.word	0x08002ffd
 80023ec:	08003013 	.word	0x08003013
 80023f0:	08003029 	.word	0x08003029
 80023f4:	08003065 	.word	0x08003065
 80023f8:	0800303d 	.word	0x0800303d
 80023fc:	08003051 	.word	0x08003051
 8002400:	08003079 	.word	0x08003079
 8002404:	0800308d 	.word	0x0800308d
 8002408:	080030a3 	.word	0x080030a3
 800240c:	080030b9 	.word	0x080030b9
 8002410:	080030cf 	.word	0x080030cf
 8002414:	080030e7 	.word	0x080030e7
 8002418:	08001729 	.word	0x08001729
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d028      	beq.n	8002476 <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d01c      	beq.n	8002466 <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800243a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0210 	orr.w	r2, r2, #16
 800244a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d110      	bne.n	8002476 <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	e007      	b.n	8002476 <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0220 	orr.w	r2, r2, #32
 8002474:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	3b01      	subs	r3, #1
 800247c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	3b01      	subs	r3, #1
 8002484:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002486:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800248e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	3b01      	subs	r3, #1
 8002498:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800249e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024aa:	d115      	bne.n	80024d8 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	3b01      	subs	r3, #1
 80024b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	3b01      	subs	r3, #1
 80024c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	3b01      	subs	r3, #1
 80024ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80024d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024d6:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	4413      	add	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800250c:	f023 0107 	bic.w	r1, r3, #7
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800251a:	4413      	add	r3, r2
 800251c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800253a:	f023 0107 	bic.w	r1, r3, #7
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002548:	4413      	add	r3, r2
 800254a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002568:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002576:	4413      	add	r3, r2
 8002578:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002598:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025a6:	4413      	add	r3, r2
 80025a8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80025ac:	021a      	lsls	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_FDCAN_Init+0x4a8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d107      	bne.n	80025d2 <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f022 0203 	bic.w	r2, r2, #3
 80025d0:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fd86 	bl	80030fc <FDCAN_CalcultateRamBlockAddresses>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80025f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3760      	adds	r7, #96	; 0x60
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	4000a000 	.word	0x4000a000

08002608 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e015      	b.n	800265c <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d104      	bne.n	8002646 <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002644:	e009      	b.n	800265a <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800264c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d111      	bne.n	80026a0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e008      	b.n	80026b2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b08b      	sub	sp, #44	; 0x2c
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80026d8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80026da:	7efb      	ldrb	r3, [r7, #27]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f040 814b 	bne.w	8002978 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d14d      	bne.n	8002784 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80026f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e13e      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e12c      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002738:	0e1b      	lsrs	r3, r3, #24
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10b      	bne.n	800275a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800274a:	0fdb      	lsrs	r3, r3, #31
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002754:	d101      	bne.n	800275a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	69f9      	ldr	r1, [r7, #28]
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	e069      	b.n	8002858 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b41      	cmp	r3, #65	; 0x41
 8002788:	d14d      	bne.n	8002826 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0ed      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0db      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027da:	0e1b      	lsrs	r3, r3, #24
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10b      	bne.n	80027fc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027ec:	0fdb      	lsrs	r3, r3, #31
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027f6:	d101      	bne.n	80027fc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	69f9      	ldr	r1, [r7, #28]
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	e018      	b.n	8002858 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	d309      	bcc.n	8002844 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0a2      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e005      	b.n	8002888 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3304      	adds	r3, #4
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0e1b      	lsrs	r3, r3, #24
 80028da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0fda      	lsrs	r2, r3, #31
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	3304      	adds	r3, #4
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	e00a      	b.n	8002912 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	441a      	add	r2, r3
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	440b      	add	r3, r1
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	3301      	adds	r3, #1
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	461a      	mov	r2, r3
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	4293      	cmp	r3, r2
 8002922:	d3eb      	bcc.n	80028fc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d105      	bne.n	8002936 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002934:	e01e      	b.n	8002974 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b41      	cmp	r3, #65	; 0x41
 800293a:	d105      	bne.n	8002948 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002946:	e015      	b.n	8002974 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b1f      	cmp	r3, #31
 800294c:	d808      	bhi.n	8002960 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2101      	movs	r1, #1
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800295e:	e009      	b.n	8002974 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e008      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800297e:	f043 0208 	orr.w	r2, r3, #8
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	372c      	adds	r7, #44	; 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	08010d9c 	.word	0x08010d9c

0800299c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80029ae:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d002      	beq.n	80029bc <HAL_FDCAN_ActivateNotification+0x20>
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d155      	bne.n	8002a68 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029da:	e014      	b.n	8002a06 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d108      	bne.n	80029fe <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0202 	orr.w	r2, r2, #2
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80029fc:	e003      	b.n	8002a06 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2203      	movs	r2, #3
 8002a04:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_FDCAN_ActivateNotification+0xec>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6553      	str	r3, [r2, #84]	; 0x54
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_FDCAN_ActivateNotification+0xf0>)
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	0f9b      	lsrs	r3, r3, #30
 8002a5e:	490b      	ldr	r1, [pc, #44]	; (8002a8c <HAL_FDCAN_ActivateNotification+0xf0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e008      	b.n	8002a7a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a6e:	f043 0202 	orr.w	r2, r3, #2
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	3fcfffff 	.word	0x3fcfffff
 8002a8c:	4000a800 	.word	0x4000a800

08002a90 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b092      	sub	sp, #72	; 0x48
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002a98:	4b98      	ldr	r3, [pc, #608]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	079b      	lsls	r3, r3, #30
 8002a9e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002aa0:	4b96      	ldr	r3, [pc, #600]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad8:	4013      	ands	r3, r2
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af0:	4013      	ands	r3, r2
 8002af2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b08:	4013      	ands	r3, r2
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b12:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b20:	4013      	ands	r3, r2
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d013      	beq.n	8002b5a <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
 8002b4a:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00f      	beq.n	8002bd0 <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <HAL_FDCAN_IRQHandler+0x270>)
 8002bb8:	400b      	ands	r3, r1
 8002bba:	6513      	str	r3, [r2, #80]	; 0x50
 8002bbc:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc0:	0f9b      	lsrs	r3, r3, #30
 8002bc2:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00f      	beq.n	8002bf6 <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bdc:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_FDCAN_IRQHandler+0x270>)
 8002bde:	400b      	ands	r3, r1
 8002be0:	6513      	str	r3, [r2, #80]	; 0x50
 8002be2:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be6:	0f9b      	lsrs	r3, r3, #30
 8002be8:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00f      	beq.n	8002c1c <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_FDCAN_IRQHandler+0x270>)
 8002c04:	400b      	ands	r3, r1
 8002c06:	6513      	str	r3, [r2, #80]	; 0x50
 8002c08:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	0f9b      	lsrs	r3, r3, #30
 8002c0e:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00f      	beq.n	8002c42 <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_FDCAN_IRQHandler+0x270>)
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	6513      	str	r3, [r2, #80]	; 0x50
 8002c2e:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	0f9b      	lsrs	r3, r3, #30
 8002c34:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c66:	651a      	str	r2, [r3, #80]	; 0x50
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d020      	beq.n	8002cc8 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d019      	beq.n	8002cc8 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	4013      	ands	r3, r2
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d018      	beq.n	8002d08 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d011      	beq.n	8002d08 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cec:	651a      	str	r2, [r3, #80]	; 0x50
 8002cee:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_FDCAN_IRQHandler+0x26c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002cfa:	e003      	b.n	8002d04 <HAL_FDCAN_IRQHandler+0x274>
 8002cfc:	4000a800 	.word	0x4000a800
 8002d00:	3fcfffff 	.word	0x3fcfffff
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d2e:	4b95      	ldr	r3, [pc, #596]	; (8002f84 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d62:	651a      	str	r2, [r3, #80]	; 0x50
 8002d64:	4b87      	ldr	r3, [pc, #540]	; (8002f84 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d98:	651a      	str	r2, [r3, #80]	; 0x50
 8002d9a:	4b7a      	ldr	r3, [pc, #488]	; (8002f84 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00f      	beq.n	8002dd6 <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dbc:	4b72      	ldr	r3, [pc, #456]	; (8002f88 <HAL_FDCAN_IRQHandler+0x4f8>)
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	6513      	str	r3, [r2, #80]	; 0x50
 8002dc2:	4a70      	ldr	r2, [pc, #448]	; (8002f84 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	0f9b      	lsrs	r3, r3, #30
 8002dc8:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002de2:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <HAL_FDCAN_IRQHandler+0x4f8>)
 8002de4:	400b      	ands	r3, r1
 8002de6:	6513      	str	r3, [r2, #80]	; 0x50
 8002de8:	4a66      	ldr	r2, [pc, #408]	; (8002f84 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	0f9b      	lsrs	r3, r3, #30
 8002dee:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a61      	ldr	r2, [pc, #388]	; (8002f8c <HAL_FDCAN_IRQHandler+0x4fc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	f040 80ae 	bne.w	8002f68 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80a6 	beq.w	8002f68 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	4013      	ands	r3, r2
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e3e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	6a3a      	ldr	r2, [r7, #32]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002e56:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002e6e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002e86:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ec2:	6a39      	ldr	r1, [r7, #32]
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efa:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	6939      	ldr	r1, [r7, #16]
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	69f9      	ldr	r1, [r7, #28]
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d004      	beq.n	8002f7c <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3748      	adds	r7, #72	; 0x48
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	4000a800 	.word	0x4000a800
 8002f88:	3fcfffff 	.word	0x3fcfffff
 8002f8c:	4000a000 	.word	0x4000a000

08002f90 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003112:	4ba7      	ldr	r3, [pc, #668]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003114:	4013      	ands	r3, r2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	0091      	lsls	r1, r2, #2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	430b      	orrs	r3, r1
 8003120:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	4413      	add	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003152:	4b97      	ldr	r3, [pc, #604]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003154:	4013      	ands	r3, r2
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	0091      	lsls	r1, r2, #2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	430b      	orrs	r3, r1
 8003160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003194:	4b86      	ldr	r3, [pc, #536]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	0091      	lsls	r1, r2, #2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	041a      	lsls	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031dc:	4b74      	ldr	r3, [pc, #464]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031de:	4013      	ands	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	0091      	lsls	r1, r2, #2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	041a      	lsls	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	4413      	add	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003224:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	0091      	lsls	r1, r2, #2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003250:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	0091      	lsls	r1, r2, #2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800326a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	041a      	lsls	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	4413      	add	r3, r2
 8003288:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003294:	4013      	ands	r3, r2
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	0091      	lsls	r1, r2, #2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	430b      	orrs	r3, r1
 80032a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	041a      	lsls	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d0:	061a      	lsls	r2, r3, #24
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80032e2:	4413      	add	r3, r2
 80032e4:	009a      	lsls	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d915      	bls.n	80033d8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80033ac:	e006      	b.n	80033bc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80033ae:	bf00      	nop
 80033b0:	ffff0003 	.word	0xffff0003
 80033b4:	10002b00 	.word	0x10002b00
 80033b8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2203      	movs	r2, #3
 80033d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e010      	b.n	80033fa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e005      	b.n	80033ec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3304      	adds	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3f3      	bcc.n	80033e0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003416:	4b89      	ldr	r3, [pc, #548]	; (800363c <HAL_GPIO_Init+0x234>)
 8003418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800341a:	e194      	b.n	8003746 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8186 	beq.w	8003740 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d00b      	beq.n	8003454 <HAL_GPIO_Init+0x4c>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003448:	2b11      	cmp	r3, #17
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b12      	cmp	r3, #18
 8003452:	d130      	bne.n	80034b6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348a:	2201      	movs	r2, #1
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0201 	and.w	r2, r3, #1
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0xee>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b12      	cmp	r3, #18
 80034f4:	d123      	bne.n	800353e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	69b9      	ldr	r1, [r7, #24]
 800353a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0203 	and.w	r2, r3, #3
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80e0 	beq.w	8003740 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003580:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_GPIO_Init+0x238>)
 8003582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003586:	4a2e      	ldr	r2, [pc, #184]	; (8003640 <HAL_GPIO_Init+0x238>)
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_GPIO_Init+0x238>)
 8003592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <HAL_GPIO_Init+0x23c>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <HAL_GPIO_Init+0x240>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d052      	beq.n	8003670 <HAL_GPIO_Init+0x268>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_GPIO_Init+0x244>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d031      	beq.n	8003636 <HAL_GPIO_Init+0x22e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <HAL_GPIO_Init+0x248>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d02b      	beq.n	8003632 <HAL_GPIO_Init+0x22a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_GPIO_Init+0x24c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d025      	beq.n	800362e <HAL_GPIO_Init+0x226>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_GPIO_Init+0x250>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01f      	beq.n	800362a <HAL_GPIO_Init+0x222>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_GPIO_Init+0x254>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d019      	beq.n	8003626 <HAL_GPIO_Init+0x21e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_GPIO_Init+0x258>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_GPIO_Init+0x25c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00d      	beq.n	800361e <HAL_GPIO_Init+0x216>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <HAL_GPIO_Init+0x260>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <HAL_GPIO_Init+0x212>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_GPIO_Init+0x264>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_GPIO_Init+0x20e>
 8003612:	2309      	movs	r3, #9
 8003614:	e02d      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 8003616:	230a      	movs	r3, #10
 8003618:	e02b      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 800361a:	2308      	movs	r3, #8
 800361c:	e029      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 800361e:	2307      	movs	r3, #7
 8003620:	e027      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 8003622:	2306      	movs	r3, #6
 8003624:	e025      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 8003626:	2305      	movs	r3, #5
 8003628:	e023      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 800362a:	2304      	movs	r3, #4
 800362c:	e021      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 800362e:	2303      	movs	r3, #3
 8003630:	e01f      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 8003632:	2302      	movs	r3, #2
 8003634:	e01d      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 8003636:	2301      	movs	r3, #1
 8003638:	e01b      	b.n	8003672 <HAL_GPIO_Init+0x26a>
 800363a:	bf00      	nop
 800363c:	58000080 	.word	0x58000080
 8003640:	58024400 	.word	0x58024400
 8003644:	58000400 	.word	0x58000400
 8003648:	58020000 	.word	0x58020000
 800364c:	58020400 	.word	0x58020400
 8003650:	58020800 	.word	0x58020800
 8003654:	58020c00 	.word	0x58020c00
 8003658:	58021000 	.word	0x58021000
 800365c:	58021400 	.word	0x58021400
 8003660:	58021800 	.word	0x58021800
 8003664:	58021c00 	.word	0x58021c00
 8003668:	58022000 	.word	0x58022000
 800366c:	58022400 	.word	0x58022400
 8003670:	2300      	movs	r3, #0
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	f002 0203 	and.w	r2, r2, #3
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	4093      	lsls	r3, r2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003682:	4938      	ldr	r1, [pc, #224]	; (8003764 <HAL_GPIO_Init+0x35c>)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800370a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f ae63 	bne.w	800341c <HAL_GPIO_Init+0x14>
  }
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	3724      	adds	r7, #36	; 0x24
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	58000400 	.word	0x58000400

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037dc:	887a      	ldrh	r2, [r7, #2]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4013      	ands	r3, r2
 80037e2:	041a      	lsls	r2, r3, #16
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	887b      	ldrh	r3, [r7, #2]
 80037ea:	400b      	ands	r3, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	619a      	str	r2, [r3, #24]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_PWREx_ConfigSupply+0x70>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00a      	beq.n	800382a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_PWREx_ConfigSupply+0x70>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d001      	beq.n	8003826 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e01f      	b.n	8003866 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e01d      	b.n	8003866 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_PWREx_ConfigSupply+0x70>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	490f      	ldr	r1, [pc, #60]	; (8003870 <HAL_PWREx_ConfigSupply+0x70>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800383a:	f7fe fb43 	bl	8001ec4 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003840:	e009      	b.n	8003856 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003842:	f7fe fb3f 	bl	8001ec4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003850:	d901      	bls.n	8003856 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e007      	b.n	8003866 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_PWREx_ConfigSupply+0x70>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d1ee      	bne.n	8003842 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	58024800 	.word	0x58024800

08003874 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e3ff      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8087 	beq.w	80039a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003894:	4b99      	ldr	r3, [pc, #612]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800389e:	4b97      	ldr	r3, [pc, #604]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d007      	beq.n	80038ba <HAL_RCC_OscConfig+0x46>
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	2b18      	cmp	r3, #24
 80038ae:	d110      	bne.n	80038d2 <HAL_RCC_OscConfig+0x5e>
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ba:	4b90      	ldr	r3, [pc, #576]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d06c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x12c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d168      	bne.n	80039a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e3d9      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x76>
 80038dc:	4b87      	ldr	r3, [pc, #540]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a86      	ldr	r2, [pc, #536]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e02e      	b.n	8003948 <HAL_RCC_OscConfig+0xd4>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b82      	ldr	r3, [pc, #520]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a81      	ldr	r2, [pc, #516]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b7f      	ldr	r3, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7e      	ldr	r2, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xd4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0xbc>
 8003916:	4b79      	ldr	r3, [pc, #484]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a78      	ldr	r2, [pc, #480]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xd4>
 8003930:	4b72      	ldr	r3, [pc, #456]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a71      	ldr	r2, [pc, #452]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fab8 	bl	8001ec4 <HAL_GetTick>
 8003954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fab4 	bl	8001ec4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e38d      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800396a:	4b64      	ldr	r3, [pc, #400]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xe4>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe faa4 	bl	8001ec4 <HAL_GetTick>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe faa0 	bl	8001ec4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e379      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003992:	4b5a      	ldr	r3, [pc, #360]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x10c>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ae 	beq.w	8003b0c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b0:	4b52      	ldr	r3, [pc, #328]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ba:	4b50      	ldr	r3, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_RCC_OscConfig+0x162>
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	2b18      	cmp	r3, #24
 80039ca:	d13a      	bne.n	8003a42 <HAL_RCC_OscConfig+0x1ce>
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d135      	bne.n	8003a42 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_RCC_OscConfig+0x17a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e34b      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ee:	f7fe fa99 	bl	8001f24 <HAL_GetREVID>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d817      	bhi.n	8003a2c <HAL_RCC_OscConfig+0x1b8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d108      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1a2>
 8003a04:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a0c:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a14:	e07a      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b39      	ldr	r3, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	031b      	lsls	r3, r3, #12
 8003a24:	4935      	ldr	r1, [pc, #212]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a2a:	e06f      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2c:	4b33      	ldr	r3, [pc, #204]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	4930      	ldr	r1, [pc, #192]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a40:	e064      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d045      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0219 	bic.w	r2, r3, #25
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4929      	ldr	r1, [pc, #164]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fa32 	bl	8001ec4 <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fe fa2e 	bl	8001ec4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e307      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	f7fe fa4f 	bl	8001f24 <HAL_GetREVID>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d817      	bhi.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d108      	bne.n	8003aaa <HAL_RCC_OscConfig+0x236>
 8003a98:	4b18      	ldr	r3, [pc, #96]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa6:	6053      	str	r3, [r2, #4]
 8003aa8:	e030      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	031b      	lsls	r3, r3, #12
 8003ab8:	4910      	ldr	r1, [pc, #64]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
 8003abe:	e025      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	490b      	ldr	r1, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
 8003ad4:	e01a      	b.n	8003b0c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_RCC_OscConfig+0x288>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe f9ef 	bl	8001ec4 <HAL_GetTick>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fe f9eb 	bl	8001ec4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d903      	bls.n	8003b00 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e2c4      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
 8003afc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b00:	4ba4      	ldr	r3, [pc, #656]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ee      	bne.n	8003aea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80a9 	beq.w	8003c6c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1a:	4b9e      	ldr	r3, [pc, #632]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b24:	4b9b      	ldr	r3, [pc, #620]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCC_OscConfig+0x2cc>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b18      	cmp	r3, #24
 8003b34:	d13a      	bne.n	8003bac <HAL_RCC_OscConfig+0x338>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d135      	bne.n	8003bac <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b40:	4b94      	ldr	r3, [pc, #592]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2e4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e296      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b58:	f7fe f9e4 	bl	8001f24 <HAL_GetREVID>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d817      	bhi.n	8003b96 <HAL_RCC_OscConfig+0x322>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d108      	bne.n	8003b80 <HAL_RCC_OscConfig+0x30c>
 8003b6e:	4b89      	ldr	r3, [pc, #548]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b76:	4a87      	ldr	r2, [pc, #540]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b7e:	e075      	b.n	8003c6c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	069b      	lsls	r3, r3, #26
 8003b8e:	4981      	ldr	r1, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b94:	e06a      	b.n	8003c6c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	061b      	lsls	r3, r3, #24
 8003ba4:	497b      	ldr	r1, [pc, #492]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003baa:	e05f      	b.n	8003c6c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d042      	beq.n	8003c3a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bb4:	4b77      	ldr	r3, [pc, #476]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a76      	ldr	r2, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe f980 	bl	8001ec4 <HAL_GetTick>
 8003bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003bc8:	f7fe f97c 	bl	8001ec4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e255      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bda:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be6:	f7fe f99d 	bl	8001f24 <HAL_GetREVID>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d817      	bhi.n	8003c24 <HAL_RCC_OscConfig+0x3b0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d108      	bne.n	8003c0e <HAL_RCC_OscConfig+0x39a>
 8003bfc:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c04:	4a63      	ldr	r2, [pc, #396]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c0a:	6053      	str	r3, [r2, #4]
 8003c0c:	e02e      	b.n	8003c6c <HAL_RCC_OscConfig+0x3f8>
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	069b      	lsls	r3, r3, #26
 8003c1c:	495d      	ldr	r1, [pc, #372]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
 8003c22:	e023      	b.n	8003c6c <HAL_RCC_OscConfig+0x3f8>
 8003c24:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4958      	ldr	r1, [pc, #352]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60cb      	str	r3, [r1, #12]
 8003c38:	e018      	b.n	8003c6c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a55      	ldr	r2, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe f93d 	bl	8001ec4 <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c4e:	f7fe f939 	bl	8001ec4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e212      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c60:	4b4c      	ldr	r3, [pc, #304]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d036      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d019      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c80:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	4a43      	ldr	r2, [pc, #268]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe f91a 	bl	8001ec4 <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fe f916 	bl	8001ec4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1ef      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x420>
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb4:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe f900 	bl	8001ec4 <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fe f8fc 	bl	8001ec4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1d5      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cda:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d036      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d019      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d06:	f7fe f8dd 	bl	8001ec4 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d0e:	f7fe f8d9 	bl	8001ec4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1b2      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x49a>
 8003d2c:	e018      	b.n	8003d60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe f8c3 	bl	8001ec4 <HAL_GetTick>
 8003d3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d42:	f7fe f8bf 	bl	8001ec4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e198      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_RCC_OscConfig+0x520>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8085 	beq.w	8003e78 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_RCC_OscConfig+0x524>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_OscConfig+0x524>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7a:	f7fe f8a3 	bl	8001ec4 <HAL_GetTick>
 8003d7e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d80:	e00c      	b.n	8003d9c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fe f89f 	bl	8001ec4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d905      	bls.n	8003d9c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e178      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
 8003d94:	58024400 	.word	0x58024400
 8003d98:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9c:	4b96      	ldr	r3, [pc, #600]	; (8003ff8 <HAL_RCC_OscConfig+0x784>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ec      	beq.n	8003d82 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x54a>
 8003db0:	4b92      	ldr	r3, [pc, #584]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a91      	ldr	r2, [pc, #580]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	e02d      	b.n	8003e1a <HAL_RCC_OscConfig+0x5a6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x56c>
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a8c      	ldr	r2, [pc, #560]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b8a      	ldr	r3, [pc, #552]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a89      	ldr	r2, [pc, #548]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	e01c      	b.n	8003e1a <HAL_RCC_OscConfig+0x5a6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0x58e>
 8003de8:	4b84      	ldr	r3, [pc, #528]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a83      	ldr	r2, [pc, #524]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	4b81      	ldr	r3, [pc, #516]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4a80      	ldr	r2, [pc, #512]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0x5a6>
 8003e02:	4b7e      	ldr	r3, [pc, #504]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a7d      	ldr	r2, [pc, #500]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	4b7b      	ldr	r3, [pc, #492]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a7a      	ldr	r2, [pc, #488]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fe f84f 	bl	8001ec4 <HAL_GetTick>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe f84b 	bl	8001ec4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e122      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e40:	4b6e      	ldr	r3, [pc, #440]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCC_OscConfig+0x5b6>
 8003e4c:	e014      	b.n	8003e78 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fe f839 	bl	8001ec4 <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fe f835 	bl	8001ec4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e10c      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e6c:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8101 	beq.w	8004084 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e82:	4b5e      	ldr	r3, [pc, #376]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e8a:	2b18      	cmp	r3, #24
 8003e8c:	f000 80bc 	beq.w	8004008 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	f040 8095 	bne.w	8003fc4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	4b58      	ldr	r3, [pc, #352]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a57      	ldr	r2, [pc, #348]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fe f80d 	bl	8001ec4 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe f809 	bl	8001ec4 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0e2      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ecc:	4b4b      	ldr	r3, [pc, #300]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <HAL_RCC_OscConfig+0x78c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	4946      	ldr	r1, [pc, #280]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	628b      	str	r3, [r1, #40]	; 0x28
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	3b01      	subs	r3, #1
 8003eec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	025b      	lsls	r3, r3, #9
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	3b01      	subs	r3, #1
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f16:	4939      	ldr	r1, [pc, #228]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <HAL_RCC_OscConfig+0x790>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f34:	00d2      	lsls	r2, r2, #3
 8003f36:	4931      	ldr	r1, [pc, #196]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f3c:	4b2f      	ldr	r3, [pc, #188]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f023 020c 	bic.w	r2, r3, #12
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	492c      	ldr	r1, [pc, #176]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f023 0202 	bic.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4928      	ldr	r1, [pc, #160]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd ff92 	bl	8001ec4 <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd ff8e 	bl	8001ec4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e067      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x730>
 8003fc2:	e05f      	b.n	8004084 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd ff78 	bl	8001ec4 <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd ff74 	bl	8001ec4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04d      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_RCC_OscConfig+0x788>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x764>
 8003ff6:	e045      	b.n	8004084 <HAL_RCC_OscConfig+0x810>
 8003ff8:	58024800 	.word	0x58024800
 8003ffc:	58024400 	.word	0x58024400
 8004000:	fffffc0c 	.word	0xfffffc0c
 8004004:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <HAL_RCC_OscConfig+0x81c>)
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_OscConfig+0x81c>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b01      	cmp	r3, #1
 800401a:	d031      	beq.n	8004080 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0203 	and.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d12a      	bne.n	8004080 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d122      	bne.n	8004080 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d11a      	bne.n	8004080 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0a5b      	lsrs	r3, r3, #9
 800404e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d111      	bne.n	8004080 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d108      	bne.n	8004080 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	0e1b      	lsrs	r3, r3, #24
 8004072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	; 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400

08004094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e19c      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b87      	ldr	r3, [pc, #540]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	4985      	ldr	r1, [pc, #532]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b83      	ldr	r3, [pc, #524]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e184      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	4b7b      	ldr	r3, [pc, #492]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d908      	bls.n	8004106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f4:	4b78      	ldr	r3, [pc, #480]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4975      	ldr	r1, [pc, #468]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004102:	4313      	orrs	r3, r2
 8004104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d010      	beq.n	8004134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800411e:	429a      	cmp	r2, r3
 8004120:	d908      	bls.n	8004134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004122:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	496a      	ldr	r1, [pc, #424]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004130:	4313      	orrs	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	4b64      	ldr	r3, [pc, #400]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800414c:	429a      	cmp	r2, r3
 800414e:	d908      	bls.n	8004162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	495e      	ldr	r1, [pc, #376]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 800415e:	4313      	orrs	r3, r2
 8004160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800417a:	429a      	cmp	r2, r3
 800417c:	d908      	bls.n	8004190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800417e:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4953      	ldr	r1, [pc, #332]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 800418c:	4313      	orrs	r3, r2
 800418e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	4b4d      	ldr	r3, [pc, #308]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d908      	bls.n	80041be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f023 020f 	bic.w	r2, r3, #15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4947      	ldr	r1, [pc, #284]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d055      	beq.n	8004276 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041ca:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4940      	ldr	r1, [pc, #256]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e4:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d121      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0f6      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d107      	bne.n	800420c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d115      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0ea      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004214:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0de      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004224:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d6      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f023 0207 	bic.w	r2, r3, #7
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4925      	ldr	r1, [pc, #148]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fd fe3d 	bl	8001ec4 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424c:	e00a      	b.n	8004264 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424e:	f7fd fe39 	bl	8001ec4 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0be      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004264:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	429a      	cmp	r2, r3
 8004274:	d1eb      	bne.n	800424e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d010      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	429a      	cmp	r2, r3
 8004290:	d208      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f023 020f 	bic.w	r2, r3, #15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	490e      	ldr	r1, [pc, #56]	; (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d214      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 020f 	bic.w	r2, r3, #15
 80042ba:	4906      	ldr	r1, [pc, #24]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e086      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
 80042d4:	52002000 	.word	0x52002000
 80042d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d208      	bcs.n	800430a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f8:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4939      	ldr	r1, [pc, #228]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004306:	4313      	orrs	r3, r2
 8004308:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d010      	beq.n	8004338 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004322:	429a      	cmp	r2, r3
 8004324:	d208      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	492e      	ldr	r1, [pc, #184]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004334:	4313      	orrs	r3, r2
 8004336:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	4b28      	ldr	r3, [pc, #160]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004350:	429a      	cmp	r2, r3
 8004352:	d208      	bcs.n	8004366 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4922      	ldr	r1, [pc, #136]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004362:	4313      	orrs	r3, r2
 8004364:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437e:	429a      	cmp	r2, r3
 8004380:	d208      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	4917      	ldr	r1, [pc, #92]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004390:	4313      	orrs	r3, r2
 8004392:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004394:	f000 f834 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	4912      	ldr	r1, [pc, #72]	; (80043f0 <HAL_RCC_ClockConfig+0x35c>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043b2:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <HAL_RCC_ClockConfig+0x358>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	4a0d      	ldr	r2, [pc, #52]	; (80043f0 <HAL_RCC_ClockConfig+0x35c>)
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
 80043c8:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <HAL_RCC_ClockConfig+0x360>)
 80043ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x364>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_ClockConfig+0x368>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd fd2a 	bl	8001e30 <HAL_InitTick>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
 80043f0:	08010d8c 	.word	0x08010d8c
 80043f4:	24000004 	.word	0x24000004
 80043f8:	24000000 	.word	0x24000000
 80043fc:	24000008 	.word	0x24000008

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004406:	4bb3      	ldr	r3, [pc, #716]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800440e:	2b18      	cmp	r3, #24
 8004410:	f200 8155 	bhi.w	80046be <HAL_RCC_GetSysClockFreq+0x2be>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004481 	.word	0x08004481
 8004420:	080046bf 	.word	0x080046bf
 8004424:	080046bf 	.word	0x080046bf
 8004428:	080046bf 	.word	0x080046bf
 800442c:	080046bf 	.word	0x080046bf
 8004430:	080046bf 	.word	0x080046bf
 8004434:	080046bf 	.word	0x080046bf
 8004438:	080046bf 	.word	0x080046bf
 800443c:	080044a7 	.word	0x080044a7
 8004440:	080046bf 	.word	0x080046bf
 8004444:	080046bf 	.word	0x080046bf
 8004448:	080046bf 	.word	0x080046bf
 800444c:	080046bf 	.word	0x080046bf
 8004450:	080046bf 	.word	0x080046bf
 8004454:	080046bf 	.word	0x080046bf
 8004458:	080046bf 	.word	0x080046bf
 800445c:	080044ad 	.word	0x080044ad
 8004460:	080046bf 	.word	0x080046bf
 8004464:	080046bf 	.word	0x080046bf
 8004468:	080046bf 	.word	0x080046bf
 800446c:	080046bf 	.word	0x080046bf
 8004470:	080046bf 	.word	0x080046bf
 8004474:	080046bf 	.word	0x080046bf
 8004478:	080046bf 	.word	0x080046bf
 800447c:	080044b3 	.word	0x080044b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004480:	4b94      	ldr	r3, [pc, #592]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800448c:	4b91      	ldr	r3, [pc, #580]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	4a90      	ldr	r2, [pc, #576]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800449e:	e111      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044a0:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044a2:	61bb      	str	r3, [r7, #24]
    break;
 80044a4:	e10e      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044a6:	4b8d      	ldr	r3, [pc, #564]	; (80046dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a8:	61bb      	str	r3, [r7, #24]
    break;
 80044aa:	e10b      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044ac:	4b8c      	ldr	r3, [pc, #560]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044ae:	61bb      	str	r3, [r7, #24]
    break;
 80044b0:	e108      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b2:	4b88      	ldr	r3, [pc, #544]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80044bc:	4b85      	ldr	r3, [pc, #532]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044c8:	4b82      	ldr	r3, [pc, #520]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80044d2:	4b80      	ldr	r3, [pc, #512]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80e1 	beq.w	80046b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f000 8083 	beq.w	8004604 <HAL_RCC_GetSysClockFreq+0x204>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b02      	cmp	r3, #2
 8004502:	f200 80a1 	bhi.w	8004648 <HAL_RCC_GetSysClockFreq+0x248>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x114>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d056      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004512:	e099      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004514:	4b6f      	ldr	r3, [pc, #444]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02d      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004520:	4b6c      	ldr	r3, [pc, #432]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	4a6b      	ldr	r2, [pc, #428]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454a:	4b62      	ldr	r3, [pc, #392]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455a:	ed97 6a02 	vldr	s12, [r7, #8]
 800455e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800457a:	e087      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	eddf 6a58 	vldr	s13, [pc, #352]	; 80046e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800458a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458e:	4b51      	ldr	r3, [pc, #324]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459e:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045be:	e065      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80046ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d2:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004602:	e043      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80046f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004616:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004626:	ed97 6a02 	vldr	s12, [r7, #8]
 800462a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800463a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004646:	e021      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466a:	ed97 6a02 	vldr	s12, [r7, #8]
 800466e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800468a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800468c:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	0a5b      	lsrs	r3, r3, #9
 8004692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004696:	3301      	adds	r3, #1
 8004698:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 3a90 	vmov	r3, s15
 80046b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046b6:	e005      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
    break;
 80046bc:	e002      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80046be:	4b07      	ldr	r3, [pc, #28]	; (80046dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046c0:	61bb      	str	r3, [r7, #24]
    break;
 80046c2:	bf00      	nop
  }

  return sysclockfreq;
 80046c4:	69bb      	ldr	r3, [r7, #24]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	; 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	58024400 	.word	0x58024400
 80046d8:	03d09000 	.word	0x03d09000
 80046dc:	003d0900 	.word	0x003d0900
 80046e0:	007a1200 	.word	0x007a1200
 80046e4:	46000000 	.word	0x46000000
 80046e8:	4c742400 	.word	0x4c742400
 80046ec:	4a742400 	.word	0x4a742400
 80046f0:	4af42400 	.word	0x4af42400

080046f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046fa:	f7ff fe81 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_GetHCLKFreq+0x50>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	0a1b      	lsrs	r3, r3, #8
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	490f      	ldr	r1, [pc, #60]	; (8004748 <HAL_RCC_GetHCLKFreq+0x54>)
 800470c:	5ccb      	ldrb	r3, [r1, r3]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	fa22 f303 	lsr.w	r3, r2, r3
 8004716:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_RCC_GetHCLKFreq+0x50>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <HAL_RCC_GetHCLKFreq+0x54>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <HAL_RCC_GetHCLKFreq+0x58>)
 8004730:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <HAL_RCC_GetHCLKFreq+0x58>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024400 	.word	0x58024400
 8004748:	08010d8c 	.word	0x08010d8c
 800474c:	24000004 	.word	0x24000004
 8004750:	24000000 	.word	0x24000000

08004754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004758:	f7ff ffcc 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4904      	ldr	r1, [pc, #16]	; (800477c <HAL_RCC_GetPCLK1Freq+0x28>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	58024400 	.word	0x58024400
 800477c:	08010d8c 	.word	0x08010d8c

08004780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004784:	f7ff ffb6 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	58024400 	.word	0x58024400
 80047a8:	08010d8c 	.word	0x08010d8c

080047ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b4:	2300      	movs	r3, #0
 80047b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047b8:	2300      	movs	r3, #0
 80047ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03f      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047d0:	d02a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047d6:	d824      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047dc:	d018      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047e2:	d81e      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ec:	d007      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047ee:	e018      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f0:	4bab      	ldr	r3, [pc, #684]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	4aaa      	ldr	r2, [pc, #680]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047fc:	e015      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f001 fff3 	bl	80067f0 <RCCEx_PLL2_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800480e:	e00c      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3324      	adds	r3, #36	; 0x24
 8004814:	2102      	movs	r1, #2
 8004816:	4618      	mov	r0, r3
 8004818:	f002 f89c 	bl	8006954 <RCCEx_PLL3_Config>
 800481c:	4603      	mov	r3, r0
 800481e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004820:	e003      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
      break;
 8004826:	e000      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004830:	4b9b      	ldr	r3, [pc, #620]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800483c:	4998      	ldr	r1, [pc, #608]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800483e:	4313      	orrs	r3, r2
 8004840:	650b      	str	r3, [r1, #80]	; 0x50
 8004842:	e001      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d03d      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	2b04      	cmp	r3, #4
 800485a:	d826      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004879 	.word	0x08004879
 8004868:	08004887 	.word	0x08004887
 800486c:	08004899 	.word	0x08004899
 8004870:	080048b1 	.word	0x080048b1
 8004874:	080048b1 	.word	0x080048b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004878:	4b89      	ldr	r3, [pc, #548]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a88      	ldr	r2, [pc, #544]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004884:	e015      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f001 ffaf 	bl	80067f0 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004896:	e00c      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 f858 	bl	8006954 <RCCEx_PLL3_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
      break;
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80048b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048b8:	4b79      	ldr	r3, [pc, #484]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	f023 0207 	bic.w	r2, r3, #7
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	4976      	ldr	r1, [pc, #472]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	650b      	str	r3, [r1, #80]	; 0x50
 80048ca:	e001      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d042      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	d02b      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d825      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048ec:	2bc0      	cmp	r3, #192	; 0xc0
 80048ee:	d028      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048f0:	2bc0      	cmp	r3, #192	; 0xc0
 80048f2:	d821      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d016      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	d81d      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d007      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004904:	e018      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004906:	4b66      	ldr	r3, [pc, #408]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a65      	ldr	r2, [pc, #404]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004912:	e017      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f001 ff68 	bl	80067f0 <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004924:	e00e      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3324      	adds	r3, #36	; 0x24
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f002 f811 	bl	8006954 <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004936:	e005      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	75fb      	strb	r3, [r7, #23]
      break;
 800493c:	e002      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800493e:	bf00      	nop
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800494a:	4b55      	ldr	r3, [pc, #340]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	4952      	ldr	r1, [pc, #328]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	650b      	str	r3, [r1, #80]	; 0x50
 800495c:	e001      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496a:	2b00      	cmp	r3, #0
 800496c:	d049      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004974:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004978:	d030      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800497a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800497e:	d82a      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004980:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004984:	d02c      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004986:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800498a:	d824      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800498c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004990:	d018      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004996:	d81e      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800499c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a0:	d007      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049a2:	e018      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a4:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049b0:	e017      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 ff19 	bl	80067f0 <RCCEx_PLL2_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049c2:	e00e      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 ffc2 	bl	8006954 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049d4:	e005      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80049e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049e8:	4b2d      	ldr	r3, [pc, #180]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049f6:	492a      	ldr	r1, [pc, #168]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	658b      	str	r3, [r1, #88]	; 0x58
 80049fc:	e001      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d04c      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a18:	d030      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a1e:	d82a      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a24:	d02c      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a2a:	d824      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a30:	d018      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a36:	d81e      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a40:	d007      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a42:	e018      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a50:	e017      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fec9 	bl	80067f0 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a62:	e00e      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 ff72 	bl	8006954 <RCCEx_PLL3_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a74:	e005      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7a:	e002      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004a7c:	bf00      	nop
 8004a7e:	e000      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a96:	4902      	ldr	r1, [pc, #8]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	658b      	str	r3, [r1, #88]	; 0x58
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d032      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab8:	2b30      	cmp	r3, #48	; 0x30
 8004aba:	d01c      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004abc:	2b30      	cmp	r3, #48	; 0x30
 8004abe:	d817      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d00c      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d813      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d016      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d10f      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	4baf      	ldr	r3, [pc, #700]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4aae      	ldr	r2, [pc, #696]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004adc:	e00e      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fe83 	bl	80067f0 <RCCEx_PLL2_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004aee:	e005      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
      break;
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b02:	4ba3      	ldr	r3, [pc, #652]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	49a0      	ldr	r1, [pc, #640]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b14:	e001      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d047      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b2e:	d030      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b34:	d82a      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b3a:	d02c      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004b3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b40:	d824      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b46:	d018      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4c:	d81e      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d007      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004b58:	e018      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5a:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	4a8c      	ldr	r2, [pc, #560]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b66:	e017      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 fe3e 	bl	80067f0 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b78:	e00e      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3324      	adds	r3, #36	; 0x24
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fee7 	bl	8006954 <RCCEx_PLL3_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b8a:	e005      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b90:	e002      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b9e:	4b7c      	ldr	r3, [pc, #496]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	4979      	ldr	r1, [pc, #484]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	650b      	str	r3, [r1, #80]	; 0x50
 8004bb0:	e001      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d049      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bca:	d02e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd0:	d828      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004bd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bd6:	d02a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bdc:	d822      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be2:	d026      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be8:	d81c      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bee:	d010      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf4:	d816      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01d      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d111      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	2101      	movs	r1, #1
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 fdf2 	bl	80067f0 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c10:	e012      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	2101      	movs	r1, #1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fe9b 	bl	8006954 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c22:	e009      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e004      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c3e:	4b54      	ldr	r3, [pc, #336]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4a:	4951      	ldr	r1, [pc, #324]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c50:	e001      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d04b      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c6c:	d02e      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c72:	d828      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d02a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d822      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c84:	d026      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004c86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c8a:	d81c      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c90:	d010      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c96:	d816      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01d      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ca0:	d111      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fda1 	bl	80067f0 <RCCEx_PLL2_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004cb2:	e012      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 fe4a 	bl	8006954 <RCCEx_PLL3_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004cc4:	e009      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cca:	e006      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004ccc:	bf00      	nop
 8004cce:	e004      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004cd0:	bf00      	nop
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004cd4:	bf00      	nop
 8004cd6:	e000      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cee:	4928      	ldr	r1, [pc, #160]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	658b      	str	r3, [r1, #88]	; 0x58
 8004cf4:	e001      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02f      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0e:	d00e      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d14:	d814      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d015      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1e:	d10f      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d2c:	e00c      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3304      	adds	r3, #4
 8004d32:	2101      	movs	r1, #1
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fd5b 	bl	80067f0 <RCCEx_PLL2_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d3e:	e003      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
      break;
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5a:	490d      	ldr	r1, [pc, #52]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	650b      	str	r3, [r1, #80]	; 0x50
 8004d60:	e001      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d033      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d81c      	bhi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004dbb 	.word	0x08004dbb
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004da3 	.word	0x08004da3
 8004d8c:	08004dbb 	.word	0x08004dbb
 8004d90:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d94:	4bb8      	ldr	r3, [pc, #736]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4ab7      	ldr	r2, [pc, #732]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004da0:	e00c      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2102      	movs	r1, #2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fd21 	bl	80067f0 <RCCEx_PLL2_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004db2:	e003      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      break;
 8004db8:	e000      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dc2:	4bad      	ldr	r3, [pc, #692]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	49aa      	ldr	r1, [pc, #680]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dd4:	e001      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8086 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de8:	4ba4      	ldr	r3, [pc, #656]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4aa3      	ldr	r2, [pc, #652]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df4:	f7fd f866 	bl	8001ec4 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fd f862 	bl	8001ec4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d902      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e10:	4b9a      	ldr	r3, [pc, #616]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d166      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e22:	4b95      	ldr	r3, [pc, #596]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e2c:	4053      	eors	r3, r2
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d013      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e36:	4b90      	ldr	r3, [pc, #576]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e40:	4b8d      	ldr	r3, [pc, #564]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a8c      	ldr	r2, [pc, #560]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4c:	4b8a      	ldr	r3, [pc, #552]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	4a89      	ldr	r2, [pc, #548]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e58:	4a87      	ldr	r2, [pc, #540]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e68:	d115      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6a:	f7fd f82b 	bl	8001ec4 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e70:	e00b      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fd f827 	bl	8001ec4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d902      	bls.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	75fb      	strb	r3, [r7, #23]
            break;
 8004e88:	e005      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e8a:	4b7b      	ldr	r3, [pc, #492]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0ed      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d126      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004eac:	4b72      	ldr	r3, [pc, #456]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eba:	0919      	lsrs	r1, r3, #4
 8004ebc:	4b70      	ldr	r3, [pc, #448]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	496d      	ldr	r1, [pc, #436]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	610b      	str	r3, [r1, #16]
 8004ec6:	e005      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004ec8:	4b6b      	ldr	r3, [pc, #428]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4a6a      	ldr	r2, [pc, #424]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ece:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ed2:	6113      	str	r3, [r2, #16]
 8004ed4:	4b68      	ldr	r3, [pc, #416]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee2:	4965      	ldr	r1, [pc, #404]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	670b      	str	r3, [r1, #112]	; 0x70
 8004ee8:	e004      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	75bb      	strb	r3, [r7, #22]
 8004eee:	e001      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d07e      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f04:	2b28      	cmp	r3, #40	; 0x28
 8004f06:	d867      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004fdf 	.word	0x08004fdf
 8004f14:	08004fd9 	.word	0x08004fd9
 8004f18:	08004fd9 	.word	0x08004fd9
 8004f1c:	08004fd9 	.word	0x08004fd9
 8004f20:	08004fd9 	.word	0x08004fd9
 8004f24:	08004fd9 	.word	0x08004fd9
 8004f28:	08004fd9 	.word	0x08004fd9
 8004f2c:	08004fd9 	.word	0x08004fd9
 8004f30:	08004fb5 	.word	0x08004fb5
 8004f34:	08004fd9 	.word	0x08004fd9
 8004f38:	08004fd9 	.word	0x08004fd9
 8004f3c:	08004fd9 	.word	0x08004fd9
 8004f40:	08004fd9 	.word	0x08004fd9
 8004f44:	08004fd9 	.word	0x08004fd9
 8004f48:	08004fd9 	.word	0x08004fd9
 8004f4c:	08004fd9 	.word	0x08004fd9
 8004f50:	08004fc7 	.word	0x08004fc7
 8004f54:	08004fd9 	.word	0x08004fd9
 8004f58:	08004fd9 	.word	0x08004fd9
 8004f5c:	08004fd9 	.word	0x08004fd9
 8004f60:	08004fd9 	.word	0x08004fd9
 8004f64:	08004fd9 	.word	0x08004fd9
 8004f68:	08004fd9 	.word	0x08004fd9
 8004f6c:	08004fd9 	.word	0x08004fd9
 8004f70:	08004fdf 	.word	0x08004fdf
 8004f74:	08004fd9 	.word	0x08004fd9
 8004f78:	08004fd9 	.word	0x08004fd9
 8004f7c:	08004fd9 	.word	0x08004fd9
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fd9 	.word	0x08004fd9
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fdf 	.word	0x08004fdf
 8004f94:	08004fd9 	.word	0x08004fd9
 8004f98:	08004fd9 	.word	0x08004fd9
 8004f9c:	08004fd9 	.word	0x08004fd9
 8004fa0:	08004fd9 	.word	0x08004fd9
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	08004fdf 	.word	0x08004fdf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 fc18 	bl	80067f0 <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004fc4:	e00c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fcc1 	bl	8006954 <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff2:	4921      	ldr	r1, [pc, #132]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	654b      	str	r3, [r1, #84]	; 0x54
 8004ff8:	e001      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d03e      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	2b05      	cmp	r3, #5
 8005010:	d820      	bhi.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	0800505b 	.word	0x0800505b
 800501c:	08005031 	.word	0x08005031
 8005020:	08005043 	.word	0x08005043
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800505b 	.word	0x0800505b
 800502c:	0800505b 	.word	0x0800505b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fbda 	bl	80067f0 <RCCEx_PLL2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005040:	e00c      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3324      	adds	r3, #36	; 0x24
 8005046:	2101      	movs	r1, #1
 8005048:	4618      	mov	r0, r3
 800504a:	f001 fc83 	bl	8006954 <RCCEx_PLL3_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005052:	e003      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75fb      	strb	r3, [r7, #23]
      break;
 8005058:	e000      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800505a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d110      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f023 0207 	bic.w	r2, r3, #7
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	4902      	ldr	r1, [pc, #8]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005070:	4313      	orrs	r3, r2
 8005072:	654b      	str	r3, [r1, #84]	; 0x54
 8005074:	e008      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005076:	bf00      	nop
 8005078:	58024400 	.word	0x58024400
 800507c:	58024800 	.word	0x58024800
 8005080:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d039      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	2b05      	cmp	r3, #5
 800509c:	d820      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050e7 	.word	0x080050e7
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050cf 	.word	0x080050cf
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	080050e7 	.word	0x080050e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fb94 	bl	80067f0 <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050cc:	e00c      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fc3d 	bl	8006954 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050de:	e003      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80050e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ee:	4bb7      	ldr	r3, [pc, #732]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	f023 0207 	bic.w	r2, r3, #7
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	49b3      	ldr	r1, [pc, #716]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	658b      	str	r3, [r1, #88]	; 0x58
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d04b      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800511e:	d02e      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005124:	d828      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d02a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005130:	d822      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005136:	d026      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005138:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800513c:	d81c      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800513e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005142:	d010      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005148:	d816      	bhi.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01d      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800514e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005152:	d111      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f001 fb48 	bl	80067f0 <RCCEx_PLL2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005164:	e012      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3324      	adds	r3, #36	; 0x24
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fbf1 	bl	8006954 <RCCEx_PLL3_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005176:	e009      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
      break;
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800518a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005192:	4b8e      	ldr	r3, [pc, #568]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	498a      	ldr	r1, [pc, #552]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	654b      	str	r3, [r1, #84]	; 0x54
 80051a6:	e001      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d04b      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051c2:	d02e      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80051c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051c8:	d828      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ce:	d02a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d822      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051da:	d026      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80051dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051e0:	d81c      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e6:	d010      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80051e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ec:	d816      	bhi.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01d      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f6:	d111      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 faf6 	bl	80067f0 <RCCEx_PLL2_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005208:	e012      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3324      	adds	r3, #36	; 0x24
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f001 fb9f 	bl	8006954 <RCCEx_PLL3_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800521a:	e009      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	75fb      	strb	r3, [r7, #23]
      break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005222:	bf00      	nop
 8005224:	e004      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800522e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005236:	4b65      	ldr	r3, [pc, #404]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005244:	4961      	ldr	r1, [pc, #388]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005246:	4313      	orrs	r3, r2
 8005248:	658b      	str	r3, [r1, #88]	; 0x58
 800524a:	e001      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d04b      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005262:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005266:	d02e      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005268:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800526c:	d828      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800526e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005272:	d02a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	d822      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800527a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800527e:	d026      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005280:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005284:	d81c      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800528a:	d010      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005290:	d816      	bhi.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01d      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	d111      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 faa4 	bl	80067f0 <RCCEx_PLL2_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052ac:	e012      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3324      	adds	r3, #36	; 0x24
 80052b2:	2102      	movs	r1, #2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fb4d 	bl	8006954 <RCCEx_PLL3_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052be:	e009      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	75fb      	strb	r3, [r7, #23]
      break;
 80052c4:	e006      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80052c6:	bf00      	nop
 80052c8:	e004      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80052ca:	bf00      	nop
 80052cc:	e002      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80052d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052da:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052e8:	4938      	ldr	r1, [pc, #224]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	658b      	str	r3, [r1, #88]	; 0x58
 80052ee:	e001      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	d10a      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3324      	adds	r3, #36	; 0x24
 8005310:	2102      	movs	r1, #2
 8005312:	4618      	mov	r0, r3
 8005314:	f001 fb1e 	bl	8006954 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005330:	4926      	ldr	r1, [pc, #152]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005332:	4313      	orrs	r3, r2
 8005334:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d10a      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3324      	adds	r3, #36	; 0x24
 8005352:	2102      	movs	r1, #2
 8005354:	4618      	mov	r0, r3
 8005356:	f001 fafd 	bl	8006954 <RCCEx_PLL3_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005372:	4916      	ldr	r1, [pc, #88]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005374:	4313      	orrs	r3, r2
 8005376:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d036      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800538a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538e:	d01f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005394:	d817      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539e:	d009      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80053a0:	e011      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2100      	movs	r1, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 fa21 	bl	80067f0 <RCCEx_PLL2_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80053b2:	e00e      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3324      	adds	r3, #36	; 0x24
 80053b8:	2102      	movs	r1, #2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 faca 	bl	8006954 <RCCEx_PLL3_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80053c4:	e005      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
      break;
 80053ca:	e002      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80053cc:	58024400 	.word	0x58024400
      break;
 80053d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053d8:	4b93      	ldr	r3, [pc, #588]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053e6:	4990      	ldr	r1, [pc, #576]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	658b      	str	r3, [r1, #88]	; 0x58
 80053ec:	e001      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d033      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005408:	d01c      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800540a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800540e:	d816      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005414:	d003      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541a:	d007      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800541c:	e00f      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800541e:	4b82      	ldr	r3, [pc, #520]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	4a81      	ldr	r2, [pc, #516]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f001 fa8e 	bl	8006954 <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
      break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800544c:	4b76      	ldr	r3, [pc, #472]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800545a:	4973      	ldr	r1, [pc, #460]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800545c:	4313      	orrs	r3, r2
 800545e:	654b      	str	r3, [r1, #84]	; 0x54
 8005460:	e001      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d029      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800547a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547e:	d007      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005480:	e00f      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005482:	4b69      	ldr	r3, [pc, #420]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4a68      	ldr	r2, [pc, #416]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800548e:	e00b      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	2102      	movs	r1, #2
 8005496:	4618      	mov	r0, r3
 8005498:	f001 f9aa 	bl	80067f0 <RCCEx_PLL2_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	75fb      	strb	r3, [r7, #23]
      break;
 80054a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054ae:	4b5e      	ldr	r3, [pc, #376]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ba:	495b      	ldr	r1, [pc, #364]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054c0:	e001      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3324      	adds	r3, #36	; 0x24
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fa3b 	bl	8006954 <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d030      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fc:	d017      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d811      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005508:	d013      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800550a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550e:	d80b      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005518:	d106      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551a:	4b43      	ldr	r3, [pc, #268]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	4a42      	ldr	r2, [pc, #264]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005526:	e007      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
      break;
 800552c:	e004      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800552e:	bf00      	nop
 8005530:	e002      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005532:	bf00      	nop
 8005534:	e000      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d109      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800553e:	4b3a      	ldr	r3, [pc, #232]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800554a:	4937      	ldr	r1, [pc, #220]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	654b      	str	r3, [r1, #84]	; 0x54
 8005550:	e001      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005562:	4b31      	ldr	r3, [pc, #196]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005566:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	492e      	ldr	r1, [pc, #184]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005580:	4b29      	ldr	r3, [pc, #164]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800558e:	4926      	ldr	r1, [pc, #152]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055a0:	4b21      	ldr	r3, [pc, #132]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ac:	491e      	ldr	r1, [pc, #120]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055be:	4b1a      	ldr	r3, [pc, #104]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	4a19      	ldr	r2, [pc, #100]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055c8:	6113      	str	r3, [r2, #16]
 80055ca:	4b17      	ldr	r3, [pc, #92]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80055d4:	4914      	ldr	r1, [pc, #80]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da08      	bge.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ee:	490e      	ldr	r1, [pc, #56]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	4906      	ldr	r1, [pc, #24]	; (8005628 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005610:	4313      	orrs	r3, r2
 8005612:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005614:	7dbb      	ldrb	r3, [r7, #22]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	58024400 	.word	0x58024400

0800562c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b090      	sub	sp, #64	; 0x40
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	f040 8095 	bne.w	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800563e:	4bae      	ldr	r3, [pc, #696]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	633b      	str	r3, [r7, #48]	; 0x30
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	2b04      	cmp	r3, #4
 800564c:	f200 8088 	bhi.w	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800566d 	.word	0x0800566d
 800565c:	08005695 	.word	0x08005695
 8005660:	080056bd 	.word	0x080056bd
 8005664:	08005759 	.word	0x08005759
 8005668:	080056e5 	.word	0x080056e5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800566c:	4ba2      	ldr	r3, [pc, #648]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005678:	d108      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800567a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800567e:	4618      	mov	r0, r3
 8005680:	f000 ff64 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005688:	f000 bc95 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005690:	f000 bc91 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005694:	4b98      	ldr	r3, [pc, #608]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800569c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a0:	d108      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056a2:	f107 0318 	add.w	r3, r7, #24
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fca8 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056b0:	f000 bc81 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b8:	f000 bc7d 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056bc:	4b8e      	ldr	r3, [pc, #568]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c8:	d108      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ca:	f107 030c 	add.w	r3, r7, #12
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fde8 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056d8:	f000 bc6d 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e0:	f000 bc69 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80056e4:	4b84      	ldr	r3, [pc, #528]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d10c      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005700:	4b7d      	ldr	r3, [pc, #500]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	08db      	lsrs	r3, r3, #3
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005712:	e01f      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005714:	4b78      	ldr	r3, [pc, #480]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005720:	d106      	bne.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005728:	d102      	bne.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800572a:	4b75      	ldr	r3, [pc, #468]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800572c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572e:	e011      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005730:	4b71      	ldr	r3, [pc, #452]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800573c:	d106      	bne.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005744:	d102      	bne.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005746:	4b6f      	ldr	r3, [pc, #444]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574a:	e003      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005750:	f000 bc31 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005754:	f000 bc2f 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005758:	4b6b      	ldr	r3, [pc, #428]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800575c:	f000 bc2b 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005764:	f000 bc27 	b.w	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576e:	f040 8095 	bne.w	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005772:	4b61      	ldr	r3, [pc, #388]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800577a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d04d      	beq.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578a:	f200 8084 	bhi.w	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2bc0      	cmp	r3, #192	; 0xc0
 8005792:	d07d      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2bc0      	cmp	r3, #192	; 0xc0
 8005798:	d87d      	bhi.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d02d      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d877      	bhi.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d012      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80057b2:	e070      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057b4:	4b50      	ldr	r3, [pc, #320]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c0:	d107      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fec0 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057d0:	e3f1      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057d6:	e3ee      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057d8:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e4:	d107      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e6:	f107 0318 	add.w	r3, r7, #24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fc06 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057f4:	e3df      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057fa:	e3dc      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057fc:	4b3e      	ldr	r3, [pc, #248]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005808:	d107      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800580a:	f107 030c 	add.w	r3, r7, #12
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fd48 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005818:	e3cd      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800581e:	e3ca      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005820:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005828:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800582a:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b04      	cmp	r3, #4
 8005834:	d10c      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800583c:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	4a2d      	ldr	r2, [pc, #180]	; (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584e:	e01e      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005850:	4b29      	ldr	r3, [pc, #164]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	d106      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005864:	d102      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005866:	4b26      	ldr	r3, [pc, #152]	; (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800586a:	e010      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800586c:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005878:	d106      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005880:	d102      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005886:	e002      	b.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800588c:	e393      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800588e:	e392      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005894:	e38f      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589a:	e38c      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	f040 80a7 	bne.w	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058b6:	d05f      	beq.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058be:	f200 8096 	bhi.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058c8:	f000 808e 	beq.w	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058d2:	f200 808c 	bhi.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058dc:	d03a      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e4:	f200 8083 	bhi.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f4:	d01c      	beq.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80058f6:	e07a      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80058f8:	58024400 	.word	0x58024400
 80058fc:	03d09000 	.word	0x03d09000
 8005900:	003d0900 	.word	0x003d0900
 8005904:	007a1200 	.word	0x007a1200
 8005908:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800590c:	4baa      	ldr	r3, [pc, #680]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005918:	d107      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800591a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fe14 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005928:	e345      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800592e:	e342      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005930:	4ba1      	ldr	r3, [pc, #644]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593c:	d107      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800593e:	f107 0318 	add.w	r3, r7, #24
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fb5a 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800594c:	e333      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005952:	e330      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005954:	4b98      	ldr	r3, [pc, #608]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005960:	d107      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005962:	f107 030c 	add.w	r3, r7, #12
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fc9c 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005970:	e321      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005976:	e31e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005978:	4b8f      	ldr	r3, [pc, #572]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800597a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005980:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005982:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b04      	cmp	r3, #4
 800598c:	d10c      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005994:	4b88      	ldr	r3, [pc, #544]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a87      	ldr	r2, [pc, #540]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a6:	e01e      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059a8:	4b83      	ldr	r3, [pc, #524]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b4:	d106      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059bc:	d102      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80059be:	4b80      	ldr	r3, [pc, #512]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c2:	e010      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059c4:	4b7c      	ldr	r3, [pc, #496]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059d0:	d106      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d8:	d102      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80059da:	4b7a      	ldr	r3, [pc, #488]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059de:	e002      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80059e4:	e2e7      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80059e6:	e2e6      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80059e8:	4b77      	ldr	r3, [pc, #476]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ec:	e2e3      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059f2:	e2e0      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fa:	f040 809c 	bne.w	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80059fe:	4b6e      	ldr	r3, [pc, #440]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a02:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005a06:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a0e:	d054      	beq.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a16:	f200 808b 	bhi.w	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a20:	f000 8083 	beq.w	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a2a:	f200 8081 	bhi.w	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a34:	d02f      	beq.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	d878      	bhi.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a4a:	d012      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005a4c:	e070      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a4e:	4b5a      	ldr	r3, [pc, #360]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fd73 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a6a:	e2a4      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a70:	e2a1      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a72:	4b51      	ldr	r3, [pc, #324]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a80:	f107 0318 	add.w	r3, r7, #24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fab9 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005a8e:	e292      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a94:	e28f      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a96:	4b48      	ldr	r3, [pc, #288]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fbfb 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ab2:	e280      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab8:	e27d      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ac4:	4b3c      	ldr	r3, [pc, #240]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d10c      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d109      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ad6:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	4a36      	ldr	r2, [pc, #216]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae8:	e01e      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005aea:	4b33      	ldr	r3, [pc, #204]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af6:	d106      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afe:	d102      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b00:	4b2f      	ldr	r3, [pc, #188]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b04:	e010      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b06:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b12:	d106      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1a:	d102      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b1c:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b26:	e246      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b28:	e245      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b2a:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2e:	e242      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b34:	e23f      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3c:	f040 80a8 	bne.w	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005b40:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b44:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b50:	d060      	beq.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b58:	f200 8097 	bhi.w	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b62:	f000 808f 	beq.w	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6c:	f200 808d 	bhi.w	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b76:	d03b      	beq.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7e:	f200 8084 	bhi.w	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	d01d      	beq.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005b90:	e07b      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fcd1 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bae:	e202      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bb4:	e1ff      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005bb6:	bf00      	nop
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	03d09000 	.word	0x03d09000
 8005bc0:	003d0900 	.word	0x003d0900
 8005bc4:	007a1200 	.word	0x007a1200
 8005bc8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bcc:	4ba3      	ldr	r3, [pc, #652]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd8:	d107      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bda:	f107 0318 	add.w	r3, r7, #24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fa0c 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005be8:	e1e5      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bee:	e1e2      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bf0:	4b9a      	ldr	r3, [pc, #616]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bfe:	f107 030c 	add.w	r3, r7, #12
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fb4e 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c0c:	e1d3      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c12:	e1d0      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c14:	4b91      	ldr	r3, [pc, #580]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c1e:	4b8f      	ldr	r3, [pc, #572]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c30:	4b8a      	ldr	r3, [pc, #552]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	4a89      	ldr	r2, [pc, #548]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c42:	e01e      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c44:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c50:	d106      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c58:	d102      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c5a:	4b82      	ldr	r3, [pc, #520]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5e:	e010      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c60:	4b7e      	ldr	r3, [pc, #504]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c6c:	d106      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c74:	d102      	bne.n	8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c76:	4b7c      	ldr	r3, [pc, #496]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7a:	e002      	b.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c80:	e199      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c82:	e198      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c84:	4b79      	ldr	r3, [pc, #484]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c88:	e195      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c8e:	e192      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c96:	d173      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005c98:	4b70      	ldr	r3, [pc, #448]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca8:	d02f      	beq.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb0:	d863      	bhi.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbe:	d012      	beq.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005cc0:	e05b      	b.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cc2:	4b66      	ldr	r3, [pc, #408]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cce:	d107      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd0:	f107 0318 	add.w	r3, r7, #24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f991 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cde:	e16a      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ce4:	e167      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ce6:	4b5d      	ldr	r3, [pc, #372]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fad3 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d02:	e158      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d08:	e155      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d0a:	4b54      	ldr	r3, [pc, #336]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d14:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d10c      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d26:	4b4d      	ldr	r3, [pc, #308]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	08db      	lsrs	r3, r3, #3
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	4a4b      	ldr	r2, [pc, #300]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d32:	fa22 f303 	lsr.w	r3, r2, r3
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d38:	e01e      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d3a:	4b48      	ldr	r3, [pc, #288]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d46:	d106      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d4e:	d102      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d50:	4b44      	ldr	r3, [pc, #272]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d54:	e010      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d62:	d106      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6a:	d102      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d6c:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d70:	e002      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d76:	e11e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005d78:	e11d      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d7e:	e11a      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d86:	d133      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005d88:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9e:	d012      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005da0:	e023      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005da2:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fbc9 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005dbe:	e0fa      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc4:	e0f7      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dc6:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dd4:	f107 0318 	add.w	r3, r7, #24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f90f 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005de2:	e0e8      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de8:	e0e5      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dee:	e0e2      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df6:	f040 808f 	bne.w	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e02:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e0a:	d075      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e12:	d87e      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1a:	d060      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e22:	d876      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e2a:	d045      	beq.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e32:	d86e      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e3a:	d02b      	beq.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e42:	d866      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e50:	d00e      	beq.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005e52:	e05e      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005e54:	f000 f8bc 	bl	8005fd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e58:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005e5a:	e0ac      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	03d09000 	.word	0x03d09000
 8005e64:	003d0900 	.word	0x003d0900
 8005e68:	007a1200 	.word	0x007a1200
 8005e6c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e70:	4b53      	ldr	r3, [pc, #332]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e7c:	d107      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7e:	f107 0318 	add.w	r3, r7, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f8ba 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e8c:	e093      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e92:	e090      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e94:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ea2:	f107 030c 	add.w	r3, r7, #12
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f9fc 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005eb0:	e081      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eb6:	e07e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005eb8:	4b41      	ldr	r3, [pc, #260]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d109      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec4:	4b3e      	ldr	r3, [pc, #248]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	08db      	lsrs	r3, r3, #3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	4a3d      	ldr	r2, [pc, #244]	; (8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ed6:	e06e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005edc:	e06b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ede:	4b38      	ldr	r3, [pc, #224]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eea:	d102      	bne.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005eec:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ef0:	e061      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ef6:	e05e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ef8:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f04:	d102      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005f06:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f0a:	e054      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f10:	e051      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f16:	e04e      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1e:	d148      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005f20:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f30:	d02a      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f38:	d838      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f46:	d00d      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005f48:	e030      	b.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f4a:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f56:	d102      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005f58:	4b1c      	ldr	r3, [pc, #112]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f5c:	e02b      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f62:	e028      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f64:	4b16      	ldr	r3, [pc, #88]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f70:	d107      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fae8 	bl	800654c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f80:	e019      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f86:	e016      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f96:	f107 0318 	add.w	r3, r7, #24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f82e 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fa4:	e007      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb0:	e001      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3740      	adds	r7, #64	; 0x40
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	03d09000 	.word	0x03d09000
 8005fc8:	003d0900 	.word	0x003d0900
 8005fcc:	007a1200 	.word	0x007a1200

08005fd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fd4:	f7fe fb8e 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4904      	ldr	r1, [pc, #16]	; (8005ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	08010d8c 	.word	0x08010d8c

08005ffc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	; 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006004:	4ba1      	ldr	r3, [pc, #644]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800600e:	4b9f      	ldr	r3, [pc, #636]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	0b1b      	lsrs	r3, r3, #12
 8006014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006018:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800601a:	4b9c      	ldr	r3, [pc, #624]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	091b      	lsrs	r3, r3, #4
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006026:	4b99      	ldr	r3, [pc, #612]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	08db      	lsrs	r3, r3, #3
 800602c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8111 	beq.w	800626c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b02      	cmp	r3, #2
 800604e:	f000 8083 	beq.w	8006158 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b02      	cmp	r3, #2
 8006056:	f200 80a1 	bhi.w	800619c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d056      	beq.n	8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006066:	e099      	b.n	800619c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006068:	4b88      	ldr	r3, [pc, #544]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d02d      	beq.n	80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006074:	4b85      	ldr	r3, [pc, #532]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	08db      	lsrs	r3, r3, #3
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	4a84      	ldr	r2, [pc, #528]	; (8006290 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
 8006084:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b7b      	ldr	r3, [pc, #492]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060ce:	e087      	b.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e2:	4b6a      	ldr	r3, [pc, #424]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006112:	e065      	b.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800629c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006126:	4b59      	ldr	r3, [pc, #356]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006136:	ed97 6a03 	vldr	s12, [r7, #12]
 800613a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800613e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006152:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006156:	e043      	b.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616a:	4b48      	ldr	r3, [pc, #288]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617a:	ed97 6a03 	vldr	s12, [r7, #12]
 800617e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800619a:	e021      	b.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800629c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b37      	ldr	r3, [pc, #220]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80061e0:	4b2a      	ldr	r3, [pc, #168]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	0a5b      	lsrs	r3, r3, #9
 80061e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006206:	ee17 2a90 	vmov	r2, s15
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800620e:	4b1f      	ldr	r3, [pc, #124]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	0c1b      	lsrs	r3, r3, #16
 8006214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006224:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006228:	edd7 6a07 	vldr	s13, [r7, #28]
 800622c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006234:	ee17 2a90 	vmov	r2, s15
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	0e1b      	lsrs	r3, r3, #24
 8006242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006252:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006256:	edd7 6a07 	vldr	s13, [r7, #28]
 800625a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006262:	ee17 2a90 	vmov	r2, s15
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800626a:	e008      	b.n	800627e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	609a      	str	r2, [r3, #8]
}
 800627e:	bf00      	nop
 8006280:	3724      	adds	r7, #36	; 0x24
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	58024400 	.word	0x58024400
 8006290:	03d09000 	.word	0x03d09000
 8006294:	46000000 	.word	0x46000000
 8006298:	4c742400 	.word	0x4c742400
 800629c:	4a742400 	.word	0x4a742400
 80062a0:	4af42400 	.word	0x4af42400

080062a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b089      	sub	sp, #36	; 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ac:	4ba1      	ldr	r3, [pc, #644]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80062b6:	4b9f      	ldr	r3, [pc, #636]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	0d1b      	lsrs	r3, r3, #20
 80062bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062c2:	4b9c      	ldr	r3, [pc, #624]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80062ce:	4b99      	ldr	r3, [pc, #612]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	08db      	lsrs	r3, r3, #3
 80062d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8111 	beq.w	8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	f000 8083 	beq.w	8006400 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	f200 80a1 	bhi.w	8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d056      	beq.n	80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800630e:	e099      	b.n	8006444 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006310:	4b88      	ldr	r3, [pc, #544]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d02d      	beq.n	8006378 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800631c:	4b85      	ldr	r3, [pc, #532]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	08db      	lsrs	r3, r3, #3
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	4a84      	ldr	r2, [pc, #528]	; (8006538 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
 800632c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006346:	4b7b      	ldr	r3, [pc, #492]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006356:	ed97 6a03 	vldr	s12, [r7, #12]
 800635a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800635e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006372:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006376:	e087      	b.n	8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638a:	4b6a      	ldr	r3, [pc, #424]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639a:	ed97 6a03 	vldr	s12, [r7, #12]
 800639e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ba:	e065      	b.n	8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ce:	4b59      	ldr	r3, [pc, #356]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063de:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063fe:	e043      	b.n	8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800640e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006412:	4b48      	ldr	r3, [pc, #288]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006422:	ed97 6a03 	vldr	s12, [r7, #12]
 8006426:	eddf 5a45 	vldr	s11, [pc, #276]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800642a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006442:	e021      	b.n	8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006456:	4b37      	ldr	r3, [pc, #220]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006466:	ed97 6a03 	vldr	s12, [r7, #12]
 800646a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800653c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800646e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006486:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006488:	4b2a      	ldr	r3, [pc, #168]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	0a5b      	lsrs	r3, r3, #9
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800649e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ae:	ee17 2a90 	vmov	r2, s15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80064b6:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	0c1b      	lsrs	r3, r3, #16
 80064bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064dc:	ee17 2a90 	vmov	r2, s15
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	0e1b      	lsrs	r3, r3, #24
 80064ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800650a:	ee17 2a90 	vmov	r2, s15
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006512:	e008      	b.n	8006526 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
}
 8006526:	bf00      	nop
 8006528:	3724      	adds	r7, #36	; 0x24
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
 8006538:	03d09000 	.word	0x03d09000
 800653c:	46000000 	.word	0x46000000
 8006540:	4c742400 	.word	0x4c742400
 8006544:	4a742400 	.word	0x4a742400
 8006548:	4af42400 	.word	0x4af42400

0800654c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	; 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006554:	4ba0      	ldr	r3, [pc, #640]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800655e:	4b9e      	ldr	r3, [pc, #632]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006568:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800656a:	4b9b      	ldr	r3, [pc, #620]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006574:	4b98      	ldr	r3, [pc, #608]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	fb02 f303 	mul.w	r3, r2, r3
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8111 	beq.w	80067ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b02      	cmp	r3, #2
 800659c:	f000 8083 	beq.w	80066a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	f200 80a1 	bhi.w	80066ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d056      	beq.n	8006662 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80065b4:	e099      	b.n	80066ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b6:	4b88      	ldr	r3, [pc, #544]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d02d      	beq.n	800661e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065c2:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	4a83      	ldr	r2, [pc, #524]	; (80067dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ec:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006600:	eddf 5a77 	vldr	s11, [pc, #476]	; 80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006618:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800661c:	e087      	b.n	800672e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80067e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800662c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006640:	ed97 6a03 	vldr	s12, [r7, #12]
 8006644:	eddf 5a66 	vldr	s11, [pc, #408]	; 80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006660:	e065      	b.n	800672e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80067e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006674:	4b58      	ldr	r3, [pc, #352]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006684:	ed97 6a03 	vldr	s12, [r7, #12]
 8006688:	eddf 5a55 	vldr	s11, [pc, #340]	; 80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800668c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066a4:	e043      	b.n	800672e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	ee07 3a90 	vmov	s15, r3
 80066ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80066b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b8:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80066cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e8:	e021      	b.n	800672e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	ee07 3a90 	vmov	s15, r3
 80066f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80067e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fc:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006710:	eddf 5a33 	vldr	s11, [pc, #204]	; 80067e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006728:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800672c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800672e:	4b2a      	ldr	r3, [pc, #168]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	0a5b      	lsrs	r3, r3, #9
 8006734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006748:	edd7 6a07 	vldr	s13, [r7, #28]
 800674c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006754:	ee17 2a90 	vmov	r2, s15
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800675c:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006776:	edd7 6a07 	vldr	s13, [r7, #28]
 800677a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006782:	ee17 2a90 	vmov	r2, s15
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800678a:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	0e1b      	lsrs	r3, r3, #24
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b0:	ee17 2a90 	vmov	r2, s15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
}
 80067cc:	bf00      	nop
 80067ce:	3724      	adds	r7, #36	; 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	58024400 	.word	0x58024400
 80067dc:	03d09000 	.word	0x03d09000
 80067e0:	46000000 	.word	0x46000000
 80067e4:	4c742400 	.word	0x4c742400
 80067e8:	4a742400 	.word	0x4a742400
 80067ec:	4af42400 	.word	0x4af42400

080067f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067fe:	4b53      	ldr	r3, [pc, #332]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d101      	bne.n	800680e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e099      	b.n	8006942 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800680e:	4b4f      	ldr	r3, [pc, #316]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4e      	ldr	r2, [pc, #312]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006814:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800681a:	f7fb fb53 	bl	8001ec4 <HAL_GetTick>
 800681e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006820:	e008      	b.n	8006834 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006822:	f7fb fb4f 	bl	8001ec4 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e086      	b.n	8006942 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006834:	4b45      	ldr	r3, [pc, #276]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006840:	4b42      	ldr	r3, [pc, #264]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	031b      	lsls	r3, r3, #12
 800684e:	493f      	ldr	r1, [pc, #252]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006850:	4313      	orrs	r3, r2
 8006852:	628b      	str	r3, [r1, #40]	; 0x28
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	3b01      	subs	r3, #1
 800685a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	3b01      	subs	r3, #1
 8006864:	025b      	lsls	r3, r3, #9
 8006866:	b29b      	uxth	r3, r3
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	3b01      	subs	r3, #1
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	3b01      	subs	r3, #1
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006884:	4931      	ldr	r1, [pc, #196]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800688a:	4b30      	ldr	r3, [pc, #192]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	492d      	ldr	r1, [pc, #180]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800689c:	4b2b      	ldr	r3, [pc, #172]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	f023 0220 	bic.w	r2, r3, #32
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	4928      	ldr	r1, [pc, #160]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068ae:	4b27      	ldr	r3, [pc, #156]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	4a26      	ldr	r2, [pc, #152]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068b4:	f023 0310 	bic.w	r3, r3, #16
 80068b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <RCCEx_PLL2_Config+0x160>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	69d2      	ldr	r2, [r2, #28]
 80068c6:	00d2      	lsls	r2, r2, #3
 80068c8:	4920      	ldr	r1, [pc, #128]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068ce:	4b1f      	ldr	r3, [pc, #124]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	4a1e      	ldr	r2, [pc, #120]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068d4:	f043 0310 	orr.w	r3, r3, #16
 80068d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068ec:	e00f      	b.n	800690e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068f4:	4b15      	ldr	r3, [pc, #84]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 80068fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006900:	e005      	b.n	800690e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	4a11      	ldr	r2, [pc, #68]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800690c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800690e:	4b0f      	ldr	r3, [pc, #60]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a0e      	ldr	r2, [pc, #56]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691a:	f7fb fad3 	bl	8001ec4 <HAL_GetTick>
 800691e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006920:	e008      	b.n	8006934 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006922:	f7fb facf 	bl	8001ec4 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <RCCEx_PLL2_Config+0x15c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	58024400 	.word	0x58024400
 8006950:	ffff0007 	.word	0xffff0007

08006954 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006962:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d101      	bne.n	8006972 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e099      	b.n	8006aa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006972:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a4e      	ldr	r2, [pc, #312]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697e:	f7fb faa1 	bl	8001ec4 <HAL_GetTick>
 8006982:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006984:	e008      	b.n	8006998 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006986:	f7fb fa9d 	bl	8001ec4 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d901      	bls.n	8006998 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e086      	b.n	8006aa6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006998:	4b45      	ldr	r3, [pc, #276]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f0      	bne.n	8006986 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069a4:	4b42      	ldr	r3, [pc, #264]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	051b      	lsls	r3, r3, #20
 80069b2:	493f      	ldr	r1, [pc, #252]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	628b      	str	r3, [r1, #40]	; 0x28
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	3b01      	subs	r3, #1
 80069be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	025b      	lsls	r3, r3, #9
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	061b      	lsls	r3, r3, #24
 80069e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069e8:	4931      	ldr	r1, [pc, #196]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069ee:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	492d      	ldr	r1, [pc, #180]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a00:	4b2b      	ldr	r3, [pc, #172]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	4928      	ldr	r1, [pc, #160]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a12:	4b27      	ldr	r3, [pc, #156]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <RCCEx_PLL3_Config+0x160>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	69d2      	ldr	r2, [r2, #28]
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	4920      	ldr	r1, [pc, #128]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a32:	4b1f      	ldr	r3, [pc, #124]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	4a1e      	ldr	r2, [pc, #120]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a50:	e00f      	b.n	8006a72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a64:	e005      	b.n	8006a72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	4a11      	ldr	r2, [pc, #68]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7e:	f7fb fa21 	bl	8001ec4 <HAL_GetTick>
 8006a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a84:	e008      	b.n	8006a98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a86:	f7fb fa1d 	bl	8001ec4 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e006      	b.n	8006aa6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <RCCEx_PLL3_Config+0x15c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	ffff0007 	.word	0xffff0007

08006ab8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e075      	b.n	8006bb6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fa fe99 	bl	8001814 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f868 	bl	8006bc0 <HAL_SD_InitCard>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e05d      	b.n	8006bb6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fda5 	bl	8007650 <HAL_SD_GetCardStatus>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e052      	b.n	8006bb6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006b10:	7e3b      	ldrb	r3, [r7, #24]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006b16:	7e7b      	ldrb	r3, [r7, #25]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d10a      	bne.n	8006b3a <HAL_SD_Init+0x82>
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d102      	bne.n	8006b30 <HAL_SD_Init+0x78>
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b36:	659a      	str	r2, [r3, #88]	; 0x58
 8006b38:	e00b      	b.n	8006b52 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d104      	bne.n	8006b4c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b48:	659a      	str	r2, [r3, #88]	; 0x58
 8006b4a:	e002      	b.n	8006b52 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fe5b 	bl	8007814 <HAL_SD_ConfigWideBusOperation>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e026      	b.n	8006bb6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006b68:	f7fb f9ac 	bl	8001ec4 <HAL_GetTick>
 8006b6c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b6e:	e011      	b.n	8006b94 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b70:	f7fb f9a8 	bl	8001ec4 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d109      	bne.n	8006b94 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b86:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e010      	b.n	8006bb6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 ff4d 	bl	8007a34 <HAL_SD_GetCardState>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d1e7      	bne.n	8006b70 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3728      	adds	r7, #40	; 0x28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b08d      	sub	sp, #52	; 0x34
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006bd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006bdc:	f7fe fd26 	bl	800562c <HAL_RCCEx_GetPeriphCLKFreq>
 8006be0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bf6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e06a      	b.n	8006cd2 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	4a36      	ldr	r2, [pc, #216]	; (8006cdc <HAL_SD_InitCard+0x11c>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681c      	ldr	r4, [r3, #0]
 8006c0e:	466a      	mov	r2, sp
 8006c10:	f107 0318 	add.w	r3, r7, #24
 8006c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006c18:	e882 0003 	stmia.w	r2, {r0, r1}
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c22:	4620      	mov	r0, r4
 8006c24:	f002 fba2 	bl	800936c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f002 fbe5 	bl	80093fc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006c3e:	4a28      	ldr	r2, [pc, #160]	; (8006ce0 <HAL_SD_InitCard+0x120>)
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c46:	3301      	adds	r3, #1
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fb f947 	bl	8001edc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 ffcc 	bl	8007bec <SD_PowerON>
 8006c54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e02e      	b.n	8006cd2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fefd 	bl	8007a74 <SD_InitCard>
 8006c7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01b      	b.n	8006cd2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f002 fc40 	bl	8009528 <SDMMC_CmdBlockLength>
 8006ca8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00f      	beq.n	8006cd0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a0b      	ldr	r2, [pc, #44]	; (8006ce4 <HAL_SD_InitCard+0x124>)
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	372c      	adds	r7, #44	; 0x2c
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd90      	pop	{r4, r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	014f8b59 	.word	0x014f8b59
 8006ce0:	00012110 	.word	0x00012110
 8006ce4:	1fe00fff 	.word	0x1fe00fff

08006ce8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d107      	bne.n	8006d10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e08d      	b.n	8006e2c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	f040 8086 	bne.w	8006e2a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d907      	bls.n	8006d42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e074      	b.n	8006e2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2203      	movs	r2, #3
 8006d46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	025a      	lsls	r2, r3, #9
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d002      	beq.n	8006d6e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	025b      	lsls	r3, r3, #9
 8006d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d72:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	025b      	lsls	r3, r3, #9
 8006d78:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d7a:	2390      	movs	r3, #144	; 0x90
 8006d7c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f107 0210 	add.w	r2, r7, #16
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f002 fb9b 	bl	80094d0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d90a      	bls.n	8006dd6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2282      	movs	r2, #130	; 0x82
 8006dc4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 fbf1 	bl	80095b4 <SDMMC_CmdReadMultiBlock>
 8006dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006dd4:	e009      	b.n	8006dea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2281      	movs	r2, #129	; 0x81
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006de2:	4618      	mov	r0, r3
 8006de4:	f002 fbc3 	bl	800956e <SDMMC_CmdReadSingleBlock>
 8006de8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d012      	beq.n	8006e16 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a0f      	ldr	r2, [pc, #60]	; (8006e34 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e00a      	b.n	8006e2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006e24:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3730      	adds	r7, #48	; 0x30
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	1fe00fff 	.word	0x1fe00fff

08006e38 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08c      	sub	sp, #48	; 0x30
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d107      	bne.n	8006e60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e08d      	b.n	8006f7c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	f040 8086 	bne.w	8006f7a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d907      	bls.n	8006e92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e074      	b.n	8006f7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2203      	movs	r2, #3
 8006e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	025a      	lsls	r2, r3, #9
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d002      	beq.n	8006ebe <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	025b      	lsls	r3, r3, #9
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	025b      	lsls	r3, r3, #9
 8006ec8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006eca:	2390      	movs	r3, #144	; 0x90
 8006ecc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f107 0210 	add.w	r2, r7, #16
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f002 faf3 	bl	80094d0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2201      	movs	r2, #1
 8006f08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d90a      	bls.n	8006f26 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	22a0      	movs	r2, #160	; 0xa0
 8006f14:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 fb8f 	bl	8009640 <SDMMC_CmdWriteMultiBlock>
 8006f22:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f24:	e009      	b.n	8006f3a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2290      	movs	r2, #144	; 0x90
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 fb61 	bl	80095fa <SDMMC_CmdWriteSingleBlock>
 8006f38:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e00a      	b.n	8006f7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006f74:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006f7a:	2302      	movs	r3, #2
  }
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3730      	adds	r7, #48	; 0x30
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	1fe00fff 	.word	0x1fe00fff

08006f88 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_SD_IRQHandler+0x2e>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f904 	bl	80081bc <SD_Read_IT>
 8006fb4:	e19a      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80ac 	beq.w	800711e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b9d      	ldr	r3, [pc, #628]	; (8007250 <HAL_SD_IRQHandler+0x2c8>)
 8006fdc:	400b      	ands	r3, r1
 8006fde:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d038      	beq.n	800707c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_SD_IRQHandler+0x96>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d011      	beq.n	8007042 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f002 fb30 	bl	8009688 <SDMMC_CmdStopTransfer>
 8007028:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f959 	bl	80072f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a83      	ldr	r2, [pc, #524]	; (8007254 <HAL_SD_IRQHandler+0x2cc>)
 8007048:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <HAL_SD_IRQHandler+0xe4>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f002 ffe3 	bl	800a038 <HAL_SD_RxCpltCallback>
 8007072:	e13b      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f002 ffd5 	bl	800a024 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800707a:	e137      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8132 	beq.w	80072ec <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2200      	movs	r2, #0
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_SD_IRQHandler+0x12c>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d011      	beq.n	80070d8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 fae5 	bl	8009688 <SDMMC_CmdStopTransfer>
 80070be:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f90e 	bl	80072f4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_SD_IRQHandler+0x172>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 ff92 	bl	800a024 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <HAL_SD_IRQHandler+0x18e>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80eb 	beq.w	80072ec <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f002 ff8e 	bl	800a038 <HAL_SD_RxCpltCallback>
}
 800711c:	e0e6      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <HAL_SD_IRQHandler+0x1b6>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 f886 	bl	8008248 <SD_Write_IT>
 800713c:	e0d6      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80a2 	beq.w	8007292 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	f043 0202 	orr.w	r2, r3, #2
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	f043 0208 	orr.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007194:	f043 0220 	orr.w	r2, r3, #32
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a2:	f003 0310 	and.w	r3, r3, #16
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ae:	f043 0210 	orr.w	r2, r3, #16
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a26      	ldr	r2, [pc, #152]	; (8007254 <HAL_SD_IRQHandler+0x2cc>)
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80071cc:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071dc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071fc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f002 fa40 	bl	8009688 <SDMMC_CmdStopTransfer>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007222:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00f      	beq.n	8007258 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f854 	bl	80072f4 <HAL_SD_ErrorCallback>
}
 800724c:	e04e      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
 800724e:	bf00      	nop
 8007250:	ffff3ec5 	.word	0xffff3ec5
 8007254:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	2b00      	cmp	r3, #0
 8007260:	d044      	beq.n	80072ec <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	2b00      	cmp	r3, #0
 8007268:	d040      	beq.n	80072ec <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007278:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f832 	bl	80072f4 <HAL_SD_ErrorCallback>
}
 8007290:	e02c      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d025      	beq.n	80072ec <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10c      	bne.n	80072d2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f828 	bl	8008318 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80072c8:	e010      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 f810 	bl	80082f0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80072d0:	e00c      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f811 	bl	8008304 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80072e2:	e003      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fff9 	bl	80082dc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80072ea:	e7ff      	b.n	80072ec <HAL_SD_IRQHandler+0x364>
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	0f9b      	lsrs	r3, r3, #30
 8007318:	b2da      	uxtb	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007322:	0e9b      	lsrs	r3, r3, #26
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	b2da      	uxtb	r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	b2da      	uxtb	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	b2da      	uxtb	r2, r3
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b2da      	uxtb	r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735e:	b2da      	uxtb	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	0d1b      	lsrs	r3, r3, #20
 800736a:	b29a      	uxth	r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007374:	0c1b      	lsrs	r3, r3, #16
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	b2da      	uxtb	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007386:	0bdb      	lsrs	r3, r3, #15
 8007388:	b2db      	uxtb	r3, r3
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	b2da      	uxtb	r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007398:	0b9b      	lsrs	r3, r3, #14
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073aa:	0b5b      	lsrs	r3, r3, #13
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073bc:	0b1b      	lsrs	r3, r3, #12
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2200      	movs	r2, #0
 80073ce:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d163      	bne.n	80074a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073dc:	009a      	lsls	r2, r3, #2
 80073de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073e2:	4013      	ands	r3, r2
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80073e8:	0f92      	lsrs	r2, r2, #30
 80073ea:	431a      	orrs	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f4:	0edb      	lsrs	r3, r3, #27
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007406:	0e1b      	lsrs	r3, r3, #24
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	b2da      	uxtb	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007418:	0d5b      	lsrs	r3, r3, #21
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	b2da      	uxtb	r2, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742a:	0c9b      	lsrs	r3, r3, #18
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	b2da      	uxtb	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743c:	0bdb      	lsrs	r3, r3, #15
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	b2da      	uxtb	r2, r3
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	7e1b      	ldrb	r3, [r3, #24]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	3302      	adds	r3, #2
 8007460:	2201      	movs	r2, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800746a:	fb02 f203 	mul.w	r2, r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	7a1b      	ldrb	r3, [r3, #8]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	2201      	movs	r2, #1
 800747e:	409a      	lsls	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800748c:	0a52      	lsrs	r2, r2, #9
 800748e:	fb02 f203 	mul.w	r2, r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
 800749e:	e031      	b.n	8007504 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d11d      	bne.n	80074e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ac:	041b      	lsls	r3, r3, #16
 80074ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	431a      	orrs	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	3301      	adds	r3, #1
 80074c4:	029a      	lsls	r2, r3, #10
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
 80074e2:	e00f      	b.n	8007504 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a58      	ldr	r2, [pc, #352]	; (800764c <HAL_SD_GetCardCSD+0x344>)
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e09d      	b.n	8007640 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007508:	0b9b      	lsrs	r3, r3, #14
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	b2da      	uxtb	r2, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800751a:	09db      	lsrs	r3, r3, #7
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007522:	b2da      	uxtb	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007532:	b2da      	uxtb	r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800753c:	0fdb      	lsrs	r3, r3, #31
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007548:	0f5b      	lsrs	r3, r3, #29
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	b2da      	uxtb	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755a:	0e9b      	lsrs	r3, r3, #26
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	b2da      	uxtb	r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756c:	0d9b      	lsrs	r3, r3, #22
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	b2da      	uxtb	r2, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800757e:	0d5b      	lsrs	r3, r3, #21
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ae:	0bdb      	lsrs	r3, r3, #15
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c2:	0b9b      	lsrs	r3, r3, #14
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d6:	0b5b      	lsrs	r3, r3, #13
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ea:	0b1b      	lsrs	r3, r3, #12
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075fe:	0a9b      	lsrs	r3, r3, #10
 8007600:	b2db      	uxtb	r3, r3
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	b2da      	uxtb	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	b2da      	uxtb	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762e:	b2da      	uxtb	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	1fe00fff 	.word	0x1fe00fff

08007650 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b094      	sub	sp, #80	; 0x50
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fb4a 	bl	8007d00 <SD_SendSDStatus>
 800766c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800766e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007670:	2b00      	cmp	r3, #0
 8007672:	d011      	beq.n	8007698 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a4f      	ldr	r2, [pc, #316]	; (80077b8 <HAL_SD_GetCardStatus+0x168>)
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007696:	e070      	b.n	800777a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	099b      	lsrs	r3, r3, #6
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	0e1b      	lsrs	r3, r3, #24
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	4313      	orrs	r3, r2
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	061a      	lsls	r2, r3, #24
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076de:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076e8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	0e1b      	lsrs	r3, r3, #24
 80076ee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	b2da      	uxtb	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	0d1b      	lsrs	r3, r3, #20
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	b2da      	uxtb	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	0c1b      	lsrs	r3, r3, #16
 800771a:	b29b      	uxth	r3, r3
 800771c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007720:	b29a      	uxth	r2, r3
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	b29b      	uxth	r3, r3
 8007726:	b2db      	uxtb	r3, r3
 8007728:	b29b      	uxth	r3, r3
 800772a:	4313      	orrs	r3, r2
 800772c:	b29a      	uxth	r2, r3
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	0a9b      	lsrs	r3, r3, #10
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800773c:	b2da      	uxtb	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	0a1b      	lsrs	r3, r3, #8
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	b2da      	uxtb	r2, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	b2da      	uxtb	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	b2da      	uxtb	r2, r3
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	0e1b      	lsrs	r3, r3, #24
 8007774:	b2da      	uxtb	r2, r3
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fed0 	bl	8009528 <SDMMC_CmdBlockLength>
 8007788:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800778a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <HAL_SD_GetCardStatus+0x168>)
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800779c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80077ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3750      	adds	r7, #80	; 0x50
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	1fe00fff 	.word	0x1fe00fff

080077bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007814:	b590      	push	{r4, r7, lr}
 8007816:	b08d      	sub	sp, #52	; 0x34
 8007818:	af02      	add	r7, sp, #8
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2203      	movs	r2, #3
 8007828:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007830:	2b03      	cmp	r3, #3
 8007832:	d02e      	beq.n	8007892 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783a:	d106      	bne.n	800784a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	635a      	str	r2, [r3, #52]	; 0x34
 8007848:	e029      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007850:	d10a      	bne.n	8007868 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fb4c 	bl	8007ef0 <SD_WideBus_Enable>
 8007858:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	635a      	str	r2, [r3, #52]	; 0x34
 8007866:	e01a      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb89 	bl	8007f86 <SD_WideBus_Disable>
 8007874:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	635a      	str	r2, [r3, #52]	; 0x34
 8007882:	e00c      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	635a      	str	r2, [r3, #52]	; 0x34
 8007890:	e005      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a5e      	ldr	r2, [pc, #376]	; (8007a24 <HAL_SD_ConfigWideBusOperation+0x210>)
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078b4:	e094      	b.n	80079e0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80078b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80078ba:	f7fd feb7 	bl	800562c <HAL_RCCEx_GetPeriphCLKFreq>
 80078be:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 8083 	beq.w	80079ce <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4950      	ldr	r1, [pc, #320]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x214>)
 80078e6:	fba1 1303 	umull	r1, r3, r1, r3
 80078ea:	0e1b      	lsrs	r3, r3, #24
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d303      	bcc.n	80078f8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e05a      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007900:	d103      	bne.n	800790a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e051      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007912:	d126      	bne.n	8007962 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10e      	bne.n	800793a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4a43      	ldr	r2, [pc, #268]	; (8007a2c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d906      	bls.n	8007932 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4a40      	ldr	r2, [pc, #256]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	0e5b      	lsrs	r3, r3, #25
 800792e:	61bb      	str	r3, [r7, #24]
 8007930:	e03d      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	e039      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	fbb2 f3f3 	udiv	r3, r2, r3
 8007946:	4a39      	ldr	r2, [pc, #228]	; (8007a2c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d906      	bls.n	800795a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	4a36      	ldr	r2, [pc, #216]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	0e5b      	lsrs	r3, r3, #25
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	e029      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	e025      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10e      	bne.n	8007988 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4a30      	ldr	r2, [pc, #192]	; (8007a30 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d906      	bls.n	8007980 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4a2c      	ldr	r2, [pc, #176]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0e1b      	lsrs	r3, r3, #24
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	e016      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	e012      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	4a26      	ldr	r2, [pc, #152]	; (8007a30 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d906      	bls.n	80079a8 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <HAL_SD_ConfigWideBusOperation+0x214>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	0e1b      	lsrs	r3, r3, #24
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	e002      	b.n	80079ae <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681c      	ldr	r4, [r3, #0]
 80079b2:	466a      	mov	r2, sp
 80079b4:	f107 0314 	add.w	r3, r7, #20
 80079b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079c6:	4620      	mov	r0, r4
 80079c8:	f001 fcd0 	bl	800936c <SDMMC_Init>
 80079cc:	e008      	b.n	80079e0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fd9d 	bl	8009528 <SDMMC_CmdBlockLength>
 80079ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <HAL_SD_ConfigWideBusOperation+0x210>)
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	372c      	adds	r7, #44	; 0x2c
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd90      	pop	{r4, r7, pc}
 8007a24:	1fe00fff 	.word	0x1fe00fff
 8007a28:	55e63b89 	.word	0x55e63b89
 8007a2c:	02faf080 	.word	0x02faf080
 8007a30:	017d7840 	.word	0x017d7840

08007a34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a40:	f107 030c 	add.w	r3, r7, #12
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa2a 	bl	8007ea0 <SD_SendStatus>
 8007a4c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0a5b      	lsrs	r3, r3, #9
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007a6a:	693b      	ldr	r3, [r7, #16]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b090      	sub	sp, #64	; 0x40
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 fcca 	bl	800941e <SDMMC_GetPowerState>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a94:	e0a5      	b.n	8007be2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d02e      	beq.n	8007afc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 ff15 	bl	80098d2 <SDMMC_CmdSendCID>
 8007aa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	e096      	b.n	8007be2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 fcf5 	bl	80094aa <SDMMC_GetResponse>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2104      	movs	r1, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 fcec 	bl	80094aa <SDMMC_GetResponse>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2108      	movs	r1, #8
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 fce3 	bl	80094aa <SDMMC_GetResponse>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	210c      	movs	r1, #12
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 fcda 	bl	80094aa <SDMMC_GetResponse>
 8007af6:	4602      	mov	r2, r0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d00d      	beq.n	8007b20 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f107 020e 	add.w	r2, r7, #14
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 ff1e 	bl	8009950 <SDMMC_CmdSetRelAdd>
 8007b14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <SD_InitCard+0xac>
    {
      return errorstate;
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	e060      	b.n	8007be2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d036      	beq.n	8007b96 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f001 fee7 	bl	8009910 <SDMMC_CmdSendCSD>
 8007b42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <SD_InitCard+0xda>
    {
      return errorstate;
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	e049      	b.n	8007be2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 fca8 	bl	80094aa <SDMMC_GetResponse>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2104      	movs	r1, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fc9f 	bl	80094aa <SDMMC_GetResponse>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2108      	movs	r1, #8
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 fc96 	bl	80094aa <SDMMC_GetResponse>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	210c      	movs	r1, #12
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fc8d 	bl	80094aa <SDMMC_GetResponse>
 8007b90:	4602      	mov	r2, r0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2104      	movs	r1, #4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fc84 	bl	80094aa <SDMMC_GetResponse>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	0d1a      	lsrs	r2, r3, #20
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007baa:	f107 0310 	add.w	r3, r7, #16
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fba9 	bl	8007308 <HAL_SD_GetCardCSD>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bc0:	e00f      	b.n	8007be2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f001 fd96 	bl	8009700 <SDMMC_CmdSelDesel>
 8007bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <SD_InitCard+0x16c>
  {
    return errorstate;
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	e000      	b.n	8007be2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3740      	adds	r7, #64	; 0x40
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fd9e 	bl	8009746 <SDMMC_CmdGoIdleState>
 8007c0a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	e06e      	b.n	8007cf4 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 fdb1 	bl	8009782 <SDMMC_CmdOperCond>
 8007c20:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fd87 	bl	8009746 <SDMMC_CmdGoIdleState>
 8007c38:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	e057      	b.n	8007cf4 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d137      	bne.n	8007cc2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2100      	movs	r1, #0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fdb2 	bl	80097c2 <SDMMC_CmdAppCommand>
 8007c5e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d02d      	beq.n	8007cc2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c6a:	e043      	b.n	8007cf4 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fda5 	bl	80097c2 <SDMMC_CmdAppCommand>
 8007c78:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <SD_PowerON+0x98>
    {
      return errorstate;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	e037      	b.n	8007cf4 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	491c      	ldr	r1, [pc, #112]	; (8007cfc <SD_PowerON+0x110>)
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f001 fdbc 	bl	8009808 <SDMMC_CmdAppOperCommand>
 8007c90:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c9c:	e02a      	b.n	8007cf4 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 fc00 	bl	80094aa <SDMMC_GetResponse>
 8007caa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	0fdb      	lsrs	r3, r3, #31
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <SD_PowerON+0xcc>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <SD_PowerON+0xce>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]

    count++;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d802      	bhi.n	8007cd2 <SD_PowerON+0xe6>
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0cc      	beq.n	8007c6c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d902      	bls.n	8007ce2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ce0:	e008      	b.n	8007cf4 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	c1100000 	.word	0xc1100000

08007d00 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08c      	sub	sp, #48	; 0x30
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d0a:	f7fa f8db 	bl	8001ec4 <HAL_GetTick>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 fbc5 	bl	80094aa <SDMMC_GetResponse>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d2a:	d102      	bne.n	8007d32 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d30:	e0b0      	b.n	8007e94 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2140      	movs	r1, #64	; 0x40
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fbf5 	bl	8009528 <SDMMC_CmdBlockLength>
 8007d3e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	e0a0      	b.n	8007e94 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f001 fd2f 	bl	80097c2 <SDMMC_CmdAppCommand>
 8007d64:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	e08d      	b.n	8007e94 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007d7e:	2340      	movs	r3, #64	; 0x40
 8007d80:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007d82:	2360      	movs	r3, #96	; 0x60
 8007d84:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d86:	2302      	movs	r3, #2
 8007d88:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f107 0208 	add.w	r2, r7, #8
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fb97 	bl	80094d0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 fe17 	bl	80099da <SDMMC_CmdStatusRegister>
 8007dac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d02b      	beq.n	8007e0c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	e069      	b.n	8007e94 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d013      	beq.n	8007df6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd2:	e00d      	b.n	8007df0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 faf1 	bl	80093c0 <SDMMC_ReadFIFO>
 8007dde:	4602      	mov	r2, r0
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	601a      	str	r2, [r3, #0]
        pData++;
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	3304      	adds	r3, #4
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	3301      	adds	r3, #1
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	2b07      	cmp	r3, #7
 8007df4:	d9ee      	bls.n	8007dd4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007df6:	f7fa f865 	bl	8001ec4 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	d102      	bne.n	8007e0c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e0a:	e043      	b.n	8007e94 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0d2      	beq.n	8007dc0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e28:	2308      	movs	r3, #8
 8007e2a:	e033      	b.n	8007e94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e02a      	b.n	8007e94 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d017      	beq.n	8007e7c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	e021      	b.n	8007e94 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 fab3 	bl	80093c0 <SDMMC_ReadFIFO>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	601a      	str	r2, [r3, #0]
    pData++;
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	3304      	adds	r3, #4
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e66:	f7fa f82d 	bl	8001ec4 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e74:	d102      	bne.n	8007e7c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e7a:	e00b      	b.n	8007e94 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e2      	bne.n	8007e50 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a03      	ldr	r2, [pc, #12]	; (8007e9c <SD_SendSDStatus+0x19c>)
 8007e90:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3730      	adds	r7, #48	; 0x30
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	18000f3a 	.word	0x18000f3a

08007ea0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007eb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eb4:	e018      	b.n	8007ee8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ebe:	041b      	lsls	r3, r3, #16
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f001 fd66 	bl	8009994 <SDMMC_CmdSendStatus>
 8007ec8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	e009      	b.n	8007ee8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 fae5 	bl	80094aa <SDMMC_GetResponse>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	2300      	movs	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 facf 	bl	80094aa <SDMMC_GetResponse>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f16:	d102      	bne.n	8007f1e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f1c:	e02f      	b.n	8007f7e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f879 	bl	800801c <SD_FindSCR>
 8007f2a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	e023      	b.n	8007f7e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01c      	beq.n	8007f7a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	f001 fc38 	bl	80097c2 <SDMMC_CmdAppCommand>
 8007f52:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	e00f      	b.n	8007f7e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2102      	movs	r1, #2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 fc6f 	bl	8009848 <SDMMC_CmdBusWidth>
 8007f6a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	e003      	b.n	8007f7e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e001      	b.n	8007f7e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	2300      	movs	r3, #0
 8007f94:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 fa84 	bl	80094aa <SDMMC_GetResponse>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fac:	d102      	bne.n	8007fb4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fb2:	e02f      	b.n	8008014 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f82e 	bl	800801c <SD_FindSCR>
 8007fc0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	e023      	b.n	8008014 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01c      	beq.n	8008010 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fde:	041b      	lsls	r3, r3, #16
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f001 fbed 	bl	80097c2 <SDMMC_CmdAppCommand>
 8007fe8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	e00f      	b.n	8008014 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fc24 	bl	8009848 <SDMMC_CmdBusWidth>
 8008000:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	e003      	b.n	8008014 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800800c:	2300      	movs	r3, #0
 800800e:	e001      	b.n	8008014 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008010:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08e      	sub	sp, #56	; 0x38
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008026:	f7f9 ff4d 	bl	8001ec4 <HAL_GetTick>
 800802a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008030:	2300      	movs	r3, #0
 8008032:	60bb      	str	r3, [r7, #8]
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2108      	movs	r1, #8
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fa70 	bl	8009528 <SDMMC_CmdBlockLength>
 8008048:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	e0ad      	b.n	80081b0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	041b      	lsls	r3, r3, #16
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f001 fbae 	bl	80097c2 <SDMMC_CmdAppCommand>
 8008066:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <SD_FindSCR+0x56>
  {
    return errorstate;
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	e09e      	b.n	80081b0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008078:	2308      	movs	r3, #8
 800807a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800807c:	2330      	movs	r3, #48	; 0x30
 800807e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008080:	2302      	movs	r3, #2
 8008082:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008084:	2300      	movs	r3, #0
 8008086:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008088:	2301      	movs	r3, #1
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f107 0210 	add.w	r2, r7, #16
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fa1a 	bl	80094d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 fbf4 	bl	800988e <SDMMC_CmdSendSCR>
 80080a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d027      	beq.n	80080fe <SD_FindSCR+0xe2>
  {
    return errorstate;
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	e07e      	b.n	80081b0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d113      	bne.n	80080e8 <SD_FindSCR+0xcc>
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d110      	bne.n	80080e8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 f978 	bl	80093c0 <SDMMC_ReadFIFO>
 80080d0:	4603      	mov	r3, r0
 80080d2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f971 	bl	80093c0 <SDMMC_ReadFIFO>
 80080de:	4603      	mov	r3, r0
 80080e0:	60fb      	str	r3, [r7, #12]
      index++;
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	3301      	adds	r3, #1
 80080e6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080e8:	f7f9 feec 	bl	8001ec4 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d102      	bne.n	80080fe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080fc:	e058      	b.n	80081b0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	f240 532a 	movw	r3, #1322	; 0x52a
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0d1      	beq.n	80080b2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2208      	movs	r2, #8
 8008122:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008124:	2308      	movs	r3, #8
 8008126:	e043      	b.n	80081b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2202      	movs	r2, #2
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800813e:	2302      	movs	r3, #2
 8008140:	e036      	b.n	80081b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2220      	movs	r2, #32
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008158:	2320      	movs	r3, #32
 800815a:	e029      	b.n	80081b0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <SD_FindSCR+0x19c>)
 8008162:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	061a      	lsls	r2, r3, #24
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008170:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800817a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	0e1b      	lsrs	r3, r3, #24
 8008180:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	601a      	str	r2, [r3, #0]
    scr++;
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	3304      	adds	r3, #4
 800818a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	061a      	lsls	r2, r3, #24
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008198:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	0a1b      	lsrs	r3, r3, #8
 800819e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	0e1b      	lsrs	r3, r3, #24
 80081a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3738      	adds	r7, #56	; 0x38
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	18000f3a 	.word	0x18000f3a

080081bc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	2b1f      	cmp	r3, #31
 80081d0:	d936      	bls.n	8008240 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	e027      	b.n	8008228 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 f8ef 	bl	80093c0 <SDMMC_ReadFIFO>
 80081e2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3301      	adds	r3, #1
 80081f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3301      	adds	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	b2da      	uxtb	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	3301      	adds	r3, #1
 8008210:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	0e1b      	lsrs	r3, r3, #24
 8008216:	b2da      	uxtb	r2, r3
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3301      	adds	r3, #1
 8008220:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	3301      	adds	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b07      	cmp	r3, #7
 800822c:	d9d4      	bls.n	80081d8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f1a3 0220 	sub.w	r2, r3, #32
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8008240:	bf00      	nop
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	2b1f      	cmp	r3, #31
 800825c:	d93a      	bls.n	80082d4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e02b      	b.n	80082bc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	60fb      	str	r3, [r7, #12]
      tmp++;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3301      	adds	r3, #1
 800826e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	021a      	lsls	r2, r3, #8
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3301      	adds	r3, #1
 8008280:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	041a      	lsls	r2, r3, #16
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	3301      	adds	r3, #1
 8008292:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	061a      	lsls	r2, r3, #24
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	3301      	adds	r3, #1
 80082a4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f107 020c 	add.w	r2, r7, #12
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 f892 	bl	80093da <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	3301      	adds	r3, #1
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	2b07      	cmp	r3, #7
 80082c0:	d9d0      	bls.n	8008264 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	f1a3 0220 	sub.w	r2, r3, #32
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	621a      	str	r2, [r3, #32]
  }
}
 80082d4:	bf00      	nop
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e042      	b.n	80083c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f9 fb09 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2224      	movs	r2, #36	; 0x24
 800835a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0201 	bic.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f82c 	bl	80083cc <UART_SetConfig>
 8008374:	4603      	mov	r3, r0
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e022      	b.n	80083c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fd80 	bl	8008e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800839a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fe07 	bl	8008fd0 <UART_CheckIdleState>
 80083c2:	4603      	mov	r3, r0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083cc:	b5b0      	push	{r4, r5, r7, lr}
 80083ce:	b08e      	sub	sp, #56	; 0x38
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4bbf      	ldr	r3, [pc, #764]	; (80086f8 <UART_SetConfig+0x32c>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008402:	430b      	orrs	r3, r1
 8008404:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4ab5      	ldr	r2, [pc, #724]	; (80086fc <UART_SetConfig+0x330>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d004      	beq.n	8008436 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008432:	4313      	orrs	r3, r2
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	4bb0      	ldr	r3, [pc, #704]	; (8008700 <UART_SetConfig+0x334>)
 800843e:	4013      	ands	r3, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008446:	430b      	orrs	r3, r1
 8008448:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f023 010f 	bic.w	r1, r3, #15
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4aa7      	ldr	r2, [pc, #668]	; (8008704 <UART_SetConfig+0x338>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d176      	bne.n	8008558 <UART_SetConfig+0x18c>
 800846a:	4ba7      	ldr	r3, [pc, #668]	; (8008708 <UART_SetConfig+0x33c>)
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008472:	2b28      	cmp	r3, #40	; 0x28
 8008474:	d86c      	bhi.n	8008550 <UART_SetConfig+0x184>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0xb0>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	08008521 	.word	0x08008521
 8008480:	08008551 	.word	0x08008551
 8008484:	08008551 	.word	0x08008551
 8008488:	08008551 	.word	0x08008551
 800848c:	08008551 	.word	0x08008551
 8008490:	08008551 	.word	0x08008551
 8008494:	08008551 	.word	0x08008551
 8008498:	08008551 	.word	0x08008551
 800849c:	08008529 	.word	0x08008529
 80084a0:	08008551 	.word	0x08008551
 80084a4:	08008551 	.word	0x08008551
 80084a8:	08008551 	.word	0x08008551
 80084ac:	08008551 	.word	0x08008551
 80084b0:	08008551 	.word	0x08008551
 80084b4:	08008551 	.word	0x08008551
 80084b8:	08008551 	.word	0x08008551
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008551 	.word	0x08008551
 80084c4:	08008551 	.word	0x08008551
 80084c8:	08008551 	.word	0x08008551
 80084cc:	08008551 	.word	0x08008551
 80084d0:	08008551 	.word	0x08008551
 80084d4:	08008551 	.word	0x08008551
 80084d8:	08008551 	.word	0x08008551
 80084dc:	08008539 	.word	0x08008539
 80084e0:	08008551 	.word	0x08008551
 80084e4:	08008551 	.word	0x08008551
 80084e8:	08008551 	.word	0x08008551
 80084ec:	08008551 	.word	0x08008551
 80084f0:	08008551 	.word	0x08008551
 80084f4:	08008551 	.word	0x08008551
 80084f8:	08008551 	.word	0x08008551
 80084fc:	08008541 	.word	0x08008541
 8008500:	08008551 	.word	0x08008551
 8008504:	08008551 	.word	0x08008551
 8008508:	08008551 	.word	0x08008551
 800850c:	08008551 	.word	0x08008551
 8008510:	08008551 	.word	0x08008551
 8008514:	08008551 	.word	0x08008551
 8008518:	08008551 	.word	0x08008551
 800851c:	08008549 	.word	0x08008549
 8008520:	2301      	movs	r3, #1
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008526:	e222      	b.n	800896e <UART_SetConfig+0x5a2>
 8008528:	2304      	movs	r3, #4
 800852a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800852e:	e21e      	b.n	800896e <UART_SetConfig+0x5a2>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008536:	e21a      	b.n	800896e <UART_SetConfig+0x5a2>
 8008538:	2310      	movs	r3, #16
 800853a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800853e:	e216      	b.n	800896e <UART_SetConfig+0x5a2>
 8008540:	2320      	movs	r3, #32
 8008542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008546:	e212      	b.n	800896e <UART_SetConfig+0x5a2>
 8008548:	2340      	movs	r3, #64	; 0x40
 800854a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800854e:	e20e      	b.n	800896e <UART_SetConfig+0x5a2>
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008556:	e20a      	b.n	800896e <UART_SetConfig+0x5a2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a6b      	ldr	r2, [pc, #428]	; (800870c <UART_SetConfig+0x340>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d130      	bne.n	80085c4 <UART_SetConfig+0x1f8>
 8008562:	4b69      	ldr	r3, [pc, #420]	; (8008708 <UART_SetConfig+0x33c>)
 8008564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b05      	cmp	r3, #5
 800856c:	d826      	bhi.n	80085bc <UART_SetConfig+0x1f0>
 800856e:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <UART_SetConfig+0x1a8>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	0800858d 	.word	0x0800858d
 8008578:	08008595 	.word	0x08008595
 800857c:	0800859d 	.word	0x0800859d
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085ad 	.word	0x080085ad
 8008588:	080085b5 	.word	0x080085b5
 800858c:	2300      	movs	r3, #0
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	e1ec      	b.n	800896e <UART_SetConfig+0x5a2>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859a:	e1e8      	b.n	800896e <UART_SetConfig+0x5a2>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a2:	e1e4      	b.n	800896e <UART_SetConfig+0x5a2>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085aa:	e1e0      	b.n	800896e <UART_SetConfig+0x5a2>
 80085ac:	2320      	movs	r3, #32
 80085ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b2:	e1dc      	b.n	800896e <UART_SetConfig+0x5a2>
 80085b4:	2340      	movs	r3, #64	; 0x40
 80085b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ba:	e1d8      	b.n	800896e <UART_SetConfig+0x5a2>
 80085bc:	2380      	movs	r3, #128	; 0x80
 80085be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085c2:	e1d4      	b.n	800896e <UART_SetConfig+0x5a2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a51      	ldr	r2, [pc, #324]	; (8008710 <UART_SetConfig+0x344>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d130      	bne.n	8008630 <UART_SetConfig+0x264>
 80085ce:	4b4e      	ldr	r3, [pc, #312]	; (8008708 <UART_SetConfig+0x33c>)
 80085d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d826      	bhi.n	8008628 <UART_SetConfig+0x25c>
 80085da:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0x214>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008609 	.word	0x08008609
 80085ec:	08008611 	.word	0x08008611
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008621 	.word	0x08008621
 80085f8:	2300      	movs	r3, #0
 80085fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fe:	e1b6      	b.n	800896e <UART_SetConfig+0x5a2>
 8008600:	2304      	movs	r3, #4
 8008602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008606:	e1b2      	b.n	800896e <UART_SetConfig+0x5a2>
 8008608:	2308      	movs	r3, #8
 800860a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860e:	e1ae      	b.n	800896e <UART_SetConfig+0x5a2>
 8008610:	2310      	movs	r3, #16
 8008612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008616:	e1aa      	b.n	800896e <UART_SetConfig+0x5a2>
 8008618:	2320      	movs	r3, #32
 800861a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800861e:	e1a6      	b.n	800896e <UART_SetConfig+0x5a2>
 8008620:	2340      	movs	r3, #64	; 0x40
 8008622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008626:	e1a2      	b.n	800896e <UART_SetConfig+0x5a2>
 8008628:	2380      	movs	r3, #128	; 0x80
 800862a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800862e:	e19e      	b.n	800896e <UART_SetConfig+0x5a2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a37      	ldr	r2, [pc, #220]	; (8008714 <UART_SetConfig+0x348>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d130      	bne.n	800869c <UART_SetConfig+0x2d0>
 800863a:	4b33      	ldr	r3, [pc, #204]	; (8008708 <UART_SetConfig+0x33c>)
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	2b05      	cmp	r3, #5
 8008644:	d826      	bhi.n	8008694 <UART_SetConfig+0x2c8>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <UART_SetConfig+0x280>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008665 	.word	0x08008665
 8008650:	0800866d 	.word	0x0800866d
 8008654:	08008675 	.word	0x08008675
 8008658:	0800867d 	.word	0x0800867d
 800865c:	08008685 	.word	0x08008685
 8008660:	0800868d 	.word	0x0800868d
 8008664:	2300      	movs	r3, #0
 8008666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866a:	e180      	b.n	800896e <UART_SetConfig+0x5a2>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008672:	e17c      	b.n	800896e <UART_SetConfig+0x5a2>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867a:	e178      	b.n	800896e <UART_SetConfig+0x5a2>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008682:	e174      	b.n	800896e <UART_SetConfig+0x5a2>
 8008684:	2320      	movs	r3, #32
 8008686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868a:	e170      	b.n	800896e <UART_SetConfig+0x5a2>
 800868c:	2340      	movs	r3, #64	; 0x40
 800868e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008692:	e16c      	b.n	800896e <UART_SetConfig+0x5a2>
 8008694:	2380      	movs	r3, #128	; 0x80
 8008696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869a:	e168      	b.n	800896e <UART_SetConfig+0x5a2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <UART_SetConfig+0x34c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d142      	bne.n	800872c <UART_SetConfig+0x360>
 80086a6:	4b18      	ldr	r3, [pc, #96]	; (8008708 <UART_SetConfig+0x33c>)
 80086a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	d838      	bhi.n	8008724 <UART_SetConfig+0x358>
 80086b2:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <UART_SetConfig+0x2ec>)
 80086b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b8:	080086d1 	.word	0x080086d1
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	080086e1 	.word	0x080086e1
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d6:	e14a      	b.n	800896e <UART_SetConfig+0x5a2>
 80086d8:	2304      	movs	r3, #4
 80086da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086de:	e146      	b.n	800896e <UART_SetConfig+0x5a2>
 80086e0:	2308      	movs	r3, #8
 80086e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086e6:	e142      	b.n	800896e <UART_SetConfig+0x5a2>
 80086e8:	2310      	movs	r3, #16
 80086ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ee:	e13e      	b.n	800896e <UART_SetConfig+0x5a2>
 80086f0:	2320      	movs	r3, #32
 80086f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f6:	e13a      	b.n	800896e <UART_SetConfig+0x5a2>
 80086f8:	cfff69f3 	.word	0xcfff69f3
 80086fc:	58000c00 	.word	0x58000c00
 8008700:	11fff4ff 	.word	0x11fff4ff
 8008704:	40011000 	.word	0x40011000
 8008708:	58024400 	.word	0x58024400
 800870c:	40004400 	.word	0x40004400
 8008710:	40004800 	.word	0x40004800
 8008714:	40004c00 	.word	0x40004c00
 8008718:	40005000 	.word	0x40005000
 800871c:	2340      	movs	r3, #64	; 0x40
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	e124      	b.n	800896e <UART_SetConfig+0x5a2>
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872a:	e120      	b.n	800896e <UART_SetConfig+0x5a2>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4acc      	ldr	r2, [pc, #816]	; (8008a64 <UART_SetConfig+0x698>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d176      	bne.n	8008824 <UART_SetConfig+0x458>
 8008736:	4bcc      	ldr	r3, [pc, #816]	; (8008a68 <UART_SetConfig+0x69c>)
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800873e:	2b28      	cmp	r3, #40	; 0x28
 8008740:	d86c      	bhi.n	800881c <UART_SetConfig+0x450>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <UART_SetConfig+0x37c>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	080087ed 	.word	0x080087ed
 800874c:	0800881d 	.word	0x0800881d
 8008750:	0800881d 	.word	0x0800881d
 8008754:	0800881d 	.word	0x0800881d
 8008758:	0800881d 	.word	0x0800881d
 800875c:	0800881d 	.word	0x0800881d
 8008760:	0800881d 	.word	0x0800881d
 8008764:	0800881d 	.word	0x0800881d
 8008768:	080087f5 	.word	0x080087f5
 800876c:	0800881d 	.word	0x0800881d
 8008770:	0800881d 	.word	0x0800881d
 8008774:	0800881d 	.word	0x0800881d
 8008778:	0800881d 	.word	0x0800881d
 800877c:	0800881d 	.word	0x0800881d
 8008780:	0800881d 	.word	0x0800881d
 8008784:	0800881d 	.word	0x0800881d
 8008788:	080087fd 	.word	0x080087fd
 800878c:	0800881d 	.word	0x0800881d
 8008790:	0800881d 	.word	0x0800881d
 8008794:	0800881d 	.word	0x0800881d
 8008798:	0800881d 	.word	0x0800881d
 800879c:	0800881d 	.word	0x0800881d
 80087a0:	0800881d 	.word	0x0800881d
 80087a4:	0800881d 	.word	0x0800881d
 80087a8:	08008805 	.word	0x08008805
 80087ac:	0800881d 	.word	0x0800881d
 80087b0:	0800881d 	.word	0x0800881d
 80087b4:	0800881d 	.word	0x0800881d
 80087b8:	0800881d 	.word	0x0800881d
 80087bc:	0800881d 	.word	0x0800881d
 80087c0:	0800881d 	.word	0x0800881d
 80087c4:	0800881d 	.word	0x0800881d
 80087c8:	0800880d 	.word	0x0800880d
 80087cc:	0800881d 	.word	0x0800881d
 80087d0:	0800881d 	.word	0x0800881d
 80087d4:	0800881d 	.word	0x0800881d
 80087d8:	0800881d 	.word	0x0800881d
 80087dc:	0800881d 	.word	0x0800881d
 80087e0:	0800881d 	.word	0x0800881d
 80087e4:	0800881d 	.word	0x0800881d
 80087e8:	08008815 	.word	0x08008815
 80087ec:	2301      	movs	r3, #1
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	e0bc      	b.n	800896e <UART_SetConfig+0x5a2>
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fa:	e0b8      	b.n	800896e <UART_SetConfig+0x5a2>
 80087fc:	2308      	movs	r3, #8
 80087fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008802:	e0b4      	b.n	800896e <UART_SetConfig+0x5a2>
 8008804:	2310      	movs	r3, #16
 8008806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880a:	e0b0      	b.n	800896e <UART_SetConfig+0x5a2>
 800880c:	2320      	movs	r3, #32
 800880e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008812:	e0ac      	b.n	800896e <UART_SetConfig+0x5a2>
 8008814:	2340      	movs	r3, #64	; 0x40
 8008816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881a:	e0a8      	b.n	800896e <UART_SetConfig+0x5a2>
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008822:	e0a4      	b.n	800896e <UART_SetConfig+0x5a2>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a90      	ldr	r2, [pc, #576]	; (8008a6c <UART_SetConfig+0x6a0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d130      	bne.n	8008890 <UART_SetConfig+0x4c4>
 800882e:	4b8e      	ldr	r3, [pc, #568]	; (8008a68 <UART_SetConfig+0x69c>)
 8008830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b05      	cmp	r3, #5
 8008838:	d826      	bhi.n	8008888 <UART_SetConfig+0x4bc>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x474>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008859 	.word	0x08008859
 8008844:	08008861 	.word	0x08008861
 8008848:	08008869 	.word	0x08008869
 800884c:	08008871 	.word	0x08008871
 8008850:	08008879 	.word	0x08008879
 8008854:	08008881 	.word	0x08008881
 8008858:	2300      	movs	r3, #0
 800885a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885e:	e086      	b.n	800896e <UART_SetConfig+0x5a2>
 8008860:	2304      	movs	r3, #4
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e082      	b.n	800896e <UART_SetConfig+0x5a2>
 8008868:	2308      	movs	r3, #8
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e07e      	b.n	800896e <UART_SetConfig+0x5a2>
 8008870:	2310      	movs	r3, #16
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e07a      	b.n	800896e <UART_SetConfig+0x5a2>
 8008878:	2320      	movs	r3, #32
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e076      	b.n	800896e <UART_SetConfig+0x5a2>
 8008880:	2340      	movs	r3, #64	; 0x40
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e072      	b.n	800896e <UART_SetConfig+0x5a2>
 8008888:	2380      	movs	r3, #128	; 0x80
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888e:	e06e      	b.n	800896e <UART_SetConfig+0x5a2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a76      	ldr	r2, [pc, #472]	; (8008a70 <UART_SetConfig+0x6a4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d130      	bne.n	80088fc <UART_SetConfig+0x530>
 800889a:	4b73      	ldr	r3, [pc, #460]	; (8008a68 <UART_SetConfig+0x69c>)
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d826      	bhi.n	80088f4 <UART_SetConfig+0x528>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0x4e0>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088c5 	.word	0x080088c5
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	080088dd 	.word	0x080088dd
 80088bc:	080088e5 	.word	0x080088e5
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e050      	b.n	800896e <UART_SetConfig+0x5a2>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e04c      	b.n	800896e <UART_SetConfig+0x5a2>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e048      	b.n	800896e <UART_SetConfig+0x5a2>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e044      	b.n	800896e <UART_SetConfig+0x5a2>
 80088e4:	2320      	movs	r3, #32
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e040      	b.n	800896e <UART_SetConfig+0x5a2>
 80088ec:	2340      	movs	r3, #64	; 0x40
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e03c      	b.n	800896e <UART_SetConfig+0x5a2>
 80088f4:	2380      	movs	r3, #128	; 0x80
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e038      	b.n	800896e <UART_SetConfig+0x5a2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a5c      	ldr	r2, [pc, #368]	; (8008a74 <UART_SetConfig+0x6a8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d130      	bne.n	8008968 <UART_SetConfig+0x59c>
 8008906:	4b58      	ldr	r3, [pc, #352]	; (8008a68 <UART_SetConfig+0x69c>)
 8008908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	2b05      	cmp	r3, #5
 8008910:	d826      	bhi.n	8008960 <UART_SetConfig+0x594>
 8008912:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <UART_SetConfig+0x54c>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	08008931 	.word	0x08008931
 800891c:	08008939 	.word	0x08008939
 8008920:	08008941 	.word	0x08008941
 8008924:	08008949 	.word	0x08008949
 8008928:	08008951 	.word	0x08008951
 800892c:	08008959 	.word	0x08008959
 8008930:	2302      	movs	r3, #2
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e01a      	b.n	800896e <UART_SetConfig+0x5a2>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e016      	b.n	800896e <UART_SetConfig+0x5a2>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e012      	b.n	800896e <UART_SetConfig+0x5a2>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e00e      	b.n	800896e <UART_SetConfig+0x5a2>
 8008950:	2320      	movs	r3, #32
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e00a      	b.n	800896e <UART_SetConfig+0x5a2>
 8008958:	2340      	movs	r3, #64	; 0x40
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e006      	b.n	800896e <UART_SetConfig+0x5a2>
 8008960:	2380      	movs	r3, #128	; 0x80
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e002      	b.n	800896e <UART_SetConfig+0x5a2>
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a40      	ldr	r2, [pc, #256]	; (8008a74 <UART_SetConfig+0x6a8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	f040 80ef 	bne.w	8008b58 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800897a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800897e:	2b20      	cmp	r3, #32
 8008980:	dc46      	bgt.n	8008a10 <UART_SetConfig+0x644>
 8008982:	2b02      	cmp	r3, #2
 8008984:	f2c0 8081 	blt.w	8008a8a <UART_SetConfig+0x6be>
 8008988:	3b02      	subs	r3, #2
 800898a:	2b1e      	cmp	r3, #30
 800898c:	d87d      	bhi.n	8008a8a <UART_SetConfig+0x6be>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0x5c8>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	08008a17 	.word	0x08008a17
 8008998:	08008a8b 	.word	0x08008a8b
 800899c:	08008a1f 	.word	0x08008a1f
 80089a0:	08008a8b 	.word	0x08008a8b
 80089a4:	08008a8b 	.word	0x08008a8b
 80089a8:	08008a8b 	.word	0x08008a8b
 80089ac:	08008a2f 	.word	0x08008a2f
 80089b0:	08008a8b 	.word	0x08008a8b
 80089b4:	08008a8b 	.word	0x08008a8b
 80089b8:	08008a8b 	.word	0x08008a8b
 80089bc:	08008a8b 	.word	0x08008a8b
 80089c0:	08008a8b 	.word	0x08008a8b
 80089c4:	08008a8b 	.word	0x08008a8b
 80089c8:	08008a8b 	.word	0x08008a8b
 80089cc:	08008a3f 	.word	0x08008a3f
 80089d0:	08008a8b 	.word	0x08008a8b
 80089d4:	08008a8b 	.word	0x08008a8b
 80089d8:	08008a8b 	.word	0x08008a8b
 80089dc:	08008a8b 	.word	0x08008a8b
 80089e0:	08008a8b 	.word	0x08008a8b
 80089e4:	08008a8b 	.word	0x08008a8b
 80089e8:	08008a8b 	.word	0x08008a8b
 80089ec:	08008a8b 	.word	0x08008a8b
 80089f0:	08008a8b 	.word	0x08008a8b
 80089f4:	08008a8b 	.word	0x08008a8b
 80089f8:	08008a8b 	.word	0x08008a8b
 80089fc:	08008a8b 	.word	0x08008a8b
 8008a00:	08008a8b 	.word	0x08008a8b
 8008a04:	08008a8b 	.word	0x08008a8b
 8008a08:	08008a8b 	.word	0x08008a8b
 8008a0c:	08008a7d 	.word	0x08008a7d
 8008a10:	2b40      	cmp	r3, #64	; 0x40
 8008a12:	d036      	beq.n	8008a82 <UART_SetConfig+0x6b6>
 8008a14:	e039      	b.n	8008a8a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a16:	f7fd fadb 	bl	8005fd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a1c:	e03b      	b.n	8008a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1e:	f107 0314 	add.w	r3, r7, #20
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fd faea 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a2c:	e033      	b.n	8008a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a2e:	f107 0308 	add.w	r3, r7, #8
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fd fc36 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a3c:	e02b      	b.n	8008a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3e:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <UART_SetConfig+0x69c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0320 	and.w	r3, r3, #32
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d009      	beq.n	8008a5e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <UART_SetConfig+0x69c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	08db      	lsrs	r3, r3, #3
 8008a50:	f003 0303 	and.w	r3, r3, #3
 8008a54:	4a08      	ldr	r2, [pc, #32]	; (8008a78 <UART_SetConfig+0x6ac>)
 8008a56:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a5c:	e01b      	b.n	8008a96 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008a5e:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <UART_SetConfig+0x6ac>)
 8008a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a62:	e018      	b.n	8008a96 <UART_SetConfig+0x6ca>
 8008a64:	40011400 	.word	0x40011400
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	40007800 	.word	0x40007800
 8008a70:	40007c00 	.word	0x40007c00
 8008a74:	58000c00 	.word	0x58000c00
 8008a78:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a7c:	4bc4      	ldr	r3, [pc, #784]	; (8008d90 <UART_SetConfig+0x9c4>)
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a80:	e009      	b.n	8008a96 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a88:	e005      	b.n	8008a96 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 81da 	beq.w	8008e52 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa2:	4abc      	ldr	r2, [pc, #752]	; (8008d94 <UART_SetConfig+0x9c8>)
 8008aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	4413      	add	r3, r2
 8008abc:	6a3a      	ldr	r2, [r7, #32]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d305      	bcc.n	8008ace <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac8:	6a3a      	ldr	r2, [r7, #32]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d903      	bls.n	8008ad6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ad4:	e1bd      	b.n	8008e52 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f04f 0100 	mov.w	r1, #0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae2:	4aac      	ldr	r2, [pc, #688]	; (8008d94 <UART_SetConfig+0x9c8>)
 8008ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	f7f7 fc4f 	bl	8000390 <__aeabi_uldivmod>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4610      	mov	r0, r2
 8008af8:	4619      	mov	r1, r3
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	020b      	lsls	r3, r1, #8
 8008b04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b08:	0202      	lsls	r2, r0, #8
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	6849      	ldr	r1, [r1, #4]
 8008b0e:	0849      	lsrs	r1, r1, #1
 8008b10:	4608      	mov	r0, r1
 8008b12:	f04f 0100 	mov.w	r1, #0
 8008b16:	1814      	adds	r4, r2, r0
 8008b18:	eb43 0501 	adc.w	r5, r3, r1
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	461a      	mov	r2, r3
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fc31 	bl	8000390 <__aeabi_uldivmod>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4613      	mov	r3, r2
 8008b34:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b3c:	d308      	bcc.n	8008b50 <UART_SetConfig+0x784>
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b44:	d204      	bcs.n	8008b50 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	e180      	b.n	8008e52 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008b56:	e17c      	b.n	8008e52 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b60:	f040 80bf 	bne.w	8008ce2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	dc49      	bgt.n	8008c00 <UART_SetConfig+0x834>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	db7c      	blt.n	8008c6a <UART_SetConfig+0x89e>
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d87a      	bhi.n	8008c6a <UART_SetConfig+0x89e>
 8008b74:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <UART_SetConfig+0x7b0>)
 8008b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008c07 	.word	0x08008c07
 8008b80:	08008c0f 	.word	0x08008c0f
 8008b84:	08008c6b 	.word	0x08008c6b
 8008b88:	08008c6b 	.word	0x08008c6b
 8008b8c:	08008c17 	.word	0x08008c17
 8008b90:	08008c6b 	.word	0x08008c6b
 8008b94:	08008c6b 	.word	0x08008c6b
 8008b98:	08008c6b 	.word	0x08008c6b
 8008b9c:	08008c27 	.word	0x08008c27
 8008ba0:	08008c6b 	.word	0x08008c6b
 8008ba4:	08008c6b 	.word	0x08008c6b
 8008ba8:	08008c6b 	.word	0x08008c6b
 8008bac:	08008c6b 	.word	0x08008c6b
 8008bb0:	08008c6b 	.word	0x08008c6b
 8008bb4:	08008c6b 	.word	0x08008c6b
 8008bb8:	08008c6b 	.word	0x08008c6b
 8008bbc:	08008c37 	.word	0x08008c37
 8008bc0:	08008c6b 	.word	0x08008c6b
 8008bc4:	08008c6b 	.word	0x08008c6b
 8008bc8:	08008c6b 	.word	0x08008c6b
 8008bcc:	08008c6b 	.word	0x08008c6b
 8008bd0:	08008c6b 	.word	0x08008c6b
 8008bd4:	08008c6b 	.word	0x08008c6b
 8008bd8:	08008c6b 	.word	0x08008c6b
 8008bdc:	08008c6b 	.word	0x08008c6b
 8008be0:	08008c6b 	.word	0x08008c6b
 8008be4:	08008c6b 	.word	0x08008c6b
 8008be8:	08008c6b 	.word	0x08008c6b
 8008bec:	08008c6b 	.word	0x08008c6b
 8008bf0:	08008c6b 	.word	0x08008c6b
 8008bf4:	08008c6b 	.word	0x08008c6b
 8008bf8:	08008c6b 	.word	0x08008c6b
 8008bfc:	08008c5d 	.word	0x08008c5d
 8008c00:	2b40      	cmp	r3, #64	; 0x40
 8008c02:	d02e      	beq.n	8008c62 <UART_SetConfig+0x896>
 8008c04:	e031      	b.n	8008c6a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fb fda5 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 8008c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c0c:	e033      	b.n	8008c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0e:	f7fb fdb7 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 8008c12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c14:	e02f      	b.n	8008c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c16:	f107 0314 	add.w	r3, r7, #20
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fd f9ee 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c24:	e027      	b.n	8008c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c26:	f107 0308 	add.w	r3, r7, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fd fb3a 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c34:	e01f      	b.n	8008c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c36:	4b58      	ldr	r3, [pc, #352]	; (8008d98 <UART_SetConfig+0x9cc>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c42:	4b55      	ldr	r3, [pc, #340]	; (8008d98 <UART_SetConfig+0x9cc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	4a53      	ldr	r2, [pc, #332]	; (8008d9c <UART_SetConfig+0x9d0>)
 8008c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c54:	e00f      	b.n	8008c76 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008c56:	4b51      	ldr	r3, [pc, #324]	; (8008d9c <UART_SetConfig+0x9d0>)
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c5a:	e00c      	b.n	8008c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c5c:	4b4c      	ldr	r3, [pc, #304]	; (8008d90 <UART_SetConfig+0x9c4>)
 8008c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c60:	e009      	b.n	8008c76 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c68:	e005      	b.n	8008c76 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 80ea 	beq.w	8008e52 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	4a44      	ldr	r2, [pc, #272]	; (8008d94 <UART_SetConfig+0x9c8>)
 8008c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c90:	005a      	lsls	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	441a      	add	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	2b0f      	cmp	r3, #15
 8008caa:	d916      	bls.n	8008cda <UART_SetConfig+0x90e>
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb2:	d212      	bcs.n	8008cda <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	f023 030f 	bic.w	r3, r3, #15
 8008cbc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cd6:	60da      	str	r2, [r3, #12]
 8008cd8:	e0bb      	b.n	8008e52 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ce0:	e0b7      	b.n	8008e52 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ce2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	dc4a      	bgt.n	8008d80 <UART_SetConfig+0x9b4>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f2c0 8086 	blt.w	8008dfc <UART_SetConfig+0xa30>
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	f200 8083 	bhi.w	8008dfc <UART_SetConfig+0xa30>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0x930>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d87 	.word	0x08008d87
 8008d00:	08008da1 	.word	0x08008da1
 8008d04:	08008dfd 	.word	0x08008dfd
 8008d08:	08008dfd 	.word	0x08008dfd
 8008d0c:	08008da9 	.word	0x08008da9
 8008d10:	08008dfd 	.word	0x08008dfd
 8008d14:	08008dfd 	.word	0x08008dfd
 8008d18:	08008dfd 	.word	0x08008dfd
 8008d1c:	08008db9 	.word	0x08008db9
 8008d20:	08008dfd 	.word	0x08008dfd
 8008d24:	08008dfd 	.word	0x08008dfd
 8008d28:	08008dfd 	.word	0x08008dfd
 8008d2c:	08008dfd 	.word	0x08008dfd
 8008d30:	08008dfd 	.word	0x08008dfd
 8008d34:	08008dfd 	.word	0x08008dfd
 8008d38:	08008dfd 	.word	0x08008dfd
 8008d3c:	08008dc9 	.word	0x08008dc9
 8008d40:	08008dfd 	.word	0x08008dfd
 8008d44:	08008dfd 	.word	0x08008dfd
 8008d48:	08008dfd 	.word	0x08008dfd
 8008d4c:	08008dfd 	.word	0x08008dfd
 8008d50:	08008dfd 	.word	0x08008dfd
 8008d54:	08008dfd 	.word	0x08008dfd
 8008d58:	08008dfd 	.word	0x08008dfd
 8008d5c:	08008dfd 	.word	0x08008dfd
 8008d60:	08008dfd 	.word	0x08008dfd
 8008d64:	08008dfd 	.word	0x08008dfd
 8008d68:	08008dfd 	.word	0x08008dfd
 8008d6c:	08008dfd 	.word	0x08008dfd
 8008d70:	08008dfd 	.word	0x08008dfd
 8008d74:	08008dfd 	.word	0x08008dfd
 8008d78:	08008dfd 	.word	0x08008dfd
 8008d7c:	08008def 	.word	0x08008def
 8008d80:	2b40      	cmp	r3, #64	; 0x40
 8008d82:	d037      	beq.n	8008df4 <UART_SetConfig+0xa28>
 8008d84:	e03a      	b.n	8008dfc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d86:	f7fb fce5 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 8008d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008d8c:	e03c      	b.n	8008e08 <UART_SetConfig+0xa3c>
 8008d8e:	bf00      	nop
 8008d90:	003d0900 	.word	0x003d0900
 8008d94:	08010dac 	.word	0x08010dac
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008da0:	f7fb fcee 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 8008da4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008da6:	e02f      	b.n	8008e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fd f925 	bl	8005ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008db6:	e027      	b.n	8008e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db8:	f107 0308 	add.w	r3, r7, #8
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fd fa71 	bl	80062a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dc6:	e01f      	b.n	8008e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dc8:	4b2c      	ldr	r3, [pc, #176]	; (8008e7c <UART_SetConfig+0xab0>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d009      	beq.n	8008de8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dd4:	4b29      	ldr	r3, [pc, #164]	; (8008e7c <UART_SetConfig+0xab0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	08db      	lsrs	r3, r3, #3
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	4a28      	ldr	r2, [pc, #160]	; (8008e80 <UART_SetConfig+0xab4>)
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
 8008de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008de6:	e00f      	b.n	8008e08 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <UART_SetConfig+0xab4>)
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dec:	e00c      	b.n	8008e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008dee:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <UART_SetConfig+0xab8>)
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008df2:	e009      	b.n	8008e08 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dfa:	e005      	b.n	8008e08 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e06:	bf00      	nop
    }

    if (pclk != 0U)
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d021      	beq.n	8008e52 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	4a1d      	ldr	r2, [pc, #116]	; (8008e88 <UART_SetConfig+0xabc>)
 8008e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	085b      	lsrs	r3, r3, #1
 8008e26:	441a      	add	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d908      	bls.n	8008e4c <UART_SetConfig+0xa80>
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e40:	d204      	bcs.n	8008e4c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e48:	60da      	str	r2, [r3, #12]
 8008e4a:	e002      	b.n	8008e52 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008e6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3738      	adds	r7, #56	; 0x38
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bdb0      	pop	{r4, r5, r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	003d0900 	.word	0x003d0900
 8008e88:	08010dac 	.word	0x08010dac

08008e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00a      	beq.n	8008f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01a      	beq.n	8008fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f8a:	d10a      	bne.n	8008fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
  }
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fe0:	f7f8 ff70 	bl	8001ec4 <HAL_GetTick>
 8008fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d10e      	bne.n	8009012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f82f 	bl	8009066 <UART_WaitOnFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e025      	b.n	800905e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b04      	cmp	r3, #4
 800901e:	d10e      	bne.n	800903e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f819 	bl	8009066 <UART_WaitOnFlagUntilTimeout>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e00f      	b.n	800905e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009076:	e062      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d05e      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009080:	f7f8 ff20 	bl	8001ec4 <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	429a      	cmp	r2, r3
 800908e:	d302      	bcc.n	8009096 <UART_WaitOnFlagUntilTimeout+0x30>
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d11d      	bne.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e045      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d02e      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ee:	d126      	bne.n	800913e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009108:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2220      	movs	r2, #32
 8009126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2220      	movs	r2, #32
 800912e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e00f      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4013      	ands	r3, r2
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	bf0c      	ite	eq
 800914e:	2301      	moveq	r3, #1
 8009150:	2300      	movne	r3, #0
 8009152:	b2db      	uxtb	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	429a      	cmp	r2, r3
 800915a:	d08d      	beq.n	8009078 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009166:	b480      	push	{r7}
 8009168:	b085      	sub	sp, #20
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_UARTEx_DisableFifoMode+0x16>
 8009178:	2302      	movs	r3, #2
 800917a:	e027      	b.n	80091cc <HAL_UARTEx_DisableFifoMode+0x66>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2220      	movs	r2, #32
 80091be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e02d      	b.n	800924c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2224      	movs	r2, #36	; 0x24
 80091fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0201 	bic.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f84f 	bl	80092d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009268:	2302      	movs	r3, #2
 800926a:	e02d      	b.n	80092c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2224      	movs	r2, #36	; 0x24
 8009278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0201 	bic.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f811 	bl	80092d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d108      	bne.n	80092f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092f0:	e031      	b.n	8009356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092f2:	2310      	movs	r3, #16
 80092f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092f6:	2310      	movs	r3, #16
 80092f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	0e5b      	lsrs	r3, r3, #25
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	0f5b      	lsrs	r3, r3, #29
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	7b3a      	ldrb	r2, [r7, #12]
 800931e:	4911      	ldr	r1, [pc, #68]	; (8009364 <UARTEx_SetNbDataToProcess+0x94>)
 8009320:	5c8a      	ldrb	r2, [r1, r2]
 8009322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009326:	7b3a      	ldrb	r2, [r7, #12]
 8009328:	490f      	ldr	r1, [pc, #60]	; (8009368 <UARTEx_SetNbDataToProcess+0x98>)
 800932a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800932c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	7b7a      	ldrb	r2, [r7, #13]
 800933c:	4909      	ldr	r1, [pc, #36]	; (8009364 <UARTEx_SetNbDataToProcess+0x94>)
 800933e:	5c8a      	ldrb	r2, [r1, r2]
 8009340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009344:	7b7a      	ldrb	r2, [r7, #13]
 8009346:	4908      	ldr	r1, [pc, #32]	; (8009368 <UARTEx_SetNbDataToProcess+0x98>)
 8009348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800934a:	fb93 f3f2 	sdiv	r3, r3, r2
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009356:	bf00      	nop
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	08010dc4 	.word	0x08010dc4
 8009368:	08010dcc 	.word	0x08010dcc

0800936c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800936c:	b084      	sub	sp, #16
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	f107 001c 	add.w	r0, r7, #28
 800937a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009382:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009384:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009386:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800938a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800938e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009392:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	4313      	orrs	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <SDMMC_Init+0x50>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	b004      	add	sp, #16
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	ffc02c00 	.word	0xffc02c00

080093c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f043 0203 	orr.w	r2, r3, #3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0303 	and.w	r3, r3, #3
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
	...

0800943c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800945a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009460:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009466:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	4b06      	ldr	r3, [pc, #24]	; (800948c <SDMMC_SendCommand+0x50>)
 8009474:	4013      	ands	r3, r2
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	fffee0c0 	.word	0xfffee0c0

08009490 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	b2db      	uxtb	r3, r3
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b085      	sub	sp, #20
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3314      	adds	r3, #20
 80094b8:	461a      	mov	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	4413      	add	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80094f6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80094fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009502:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800951a:	2300      	movs	r3, #0

}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009536:	2310      	movs	r3, #16
 8009538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800953a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800953e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800954a:	f107 0308 	add.w	r3, r7, #8
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff73 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009556:	f241 3288 	movw	r2, #5000	; 0x1388
 800955a:	2110      	movs	r1, #16
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa5f 	bl	8009a20 <SDMMC_GetCmdResp1>
 8009562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009564:	69fb      	ldr	r3, [r7, #28]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800957c:	2311      	movs	r3, #17
 800957e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800958a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800958e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009590:	f107 0308 	add.w	r3, r7, #8
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff ff50 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800959c:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a0:	2111      	movs	r1, #17
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa3c 	bl	8009a20 <SDMMC_GetCmdResp1>
 80095a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095aa:	69fb      	ldr	r3, [r7, #28]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3720      	adds	r7, #32
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80095c2:	2312      	movs	r3, #18
 80095c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff ff2d 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80095e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e6:	2112      	movs	r1, #18
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fa19 	bl	8009a20 <SDMMC_GetCmdResp1>
 80095ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095f0:	69fb      	ldr	r3, [r7, #28]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b088      	sub	sp, #32
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009608:	2318      	movs	r3, #24
 800960a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800960c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800961a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800961c:	f107 0308 	add.w	r3, r7, #8
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff ff0a 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009628:	f241 3288 	movw	r2, #5000	; 0x1388
 800962c:	2118      	movs	r1, #24
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f9f6 	bl	8009a20 <SDMMC_GetCmdResp1>
 8009634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009636:	69fb      	ldr	r3, [r7, #28]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800964e:	2319      	movs	r3, #25
 8009650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800965c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009662:	f107 0308 	add.w	r3, r7, #8
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fee7 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800966e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009672:	2119      	movs	r1, #25
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f9d3 	bl	8009a20 <SDMMC_GetCmdResp1>
 800967a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800967c:	69fb      	ldr	r3, [r7, #28]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3720      	adds	r7, #32
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009694:	230c      	movs	r3, #12
 8009696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096a6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff feb8 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80096cc:	4a0b      	ldr	r2, [pc, #44]	; (80096fc <SDMMC_CmdStopTransfer+0x74>)
 80096ce:	210c      	movs	r1, #12
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f9a5 	bl	8009a20 <SDMMC_GetCmdResp1>
 80096d6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096ea:	d101      	bne.n	80096f0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80096f0:	69fb      	ldr	r3, [r7, #28]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	05f5e100 	.word	0x05f5e100

08009700 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800970e:	2307      	movs	r3, #7
 8009710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800971c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009720:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009722:	f107 0308 	add.w	r3, r7, #8
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff fe87 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800972e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009732:	2107      	movs	r1, #7
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f973 	bl	8009a20 <SDMMC_GetCmdResp1>
 800973a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800973c:	69fb      	ldr	r3, [r7, #28]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b088      	sub	sp, #32
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009756:	2300      	movs	r3, #0
 8009758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800975e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009764:	f107 0308 	add.w	r3, r7, #8
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fe66 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb97 	bl	8009ea4 <SDMMC_GetCmdError>
 8009776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009778:	69fb      	ldr	r3, [r7, #28]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800978a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800978e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009790:	2308      	movs	r3, #8
 8009792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800979e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097a4:	f107 0308 	add.w	r3, r7, #8
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fe46 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fb29 	bl	8009e08 <SDMMC_GetCmdResp7>
 80097b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097b8:	69fb      	ldr	r3, [r7, #28]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b088      	sub	sp, #32
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80097d0:	2337      	movs	r3, #55	; 0x37
 80097d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff fe26 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80097f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f4:	2137      	movs	r1, #55	; 0x37
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f912 	bl	8009a20 <SDMMC_GetCmdResp1>
 80097fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097fe:	69fb      	ldr	r3, [r7, #28]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3720      	adds	r7, #32
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009816:	2329      	movs	r3, #41	; 0x29
 8009818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800981a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800981e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800982a:	f107 0308 	add.w	r3, r7, #8
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff fe03 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa2e 	bl	8009c98 <SDMMC_GetCmdResp3>
 800983c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800983e:	69fb      	ldr	r3, [r7, #28]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009856:	2306      	movs	r3, #6
 8009858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800985a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fde3 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009876:	f241 3288 	movw	r2, #5000	; 0x1388
 800987a:	2106      	movs	r1, #6
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f8cf 	bl	8009a20 <SDMMC_GetCmdResp1>
 8009882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009884:	69fb      	ldr	r3, [r7, #28]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b088      	sub	sp, #32
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009896:	2300      	movs	r3, #0
 8009898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800989a:	2333      	movs	r3, #51	; 0x33
 800989c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800989e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098a4:	2300      	movs	r3, #0
 80098a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ae:	f107 0308 	add.w	r3, r7, #8
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f7ff fdc1 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80098ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80098be:	2133      	movs	r1, #51	; 0x33
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f8ad 	bl	8009a20 <SDMMC_GetCmdResp1>
 80098c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c8:	69fb      	ldr	r3, [r7, #28]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b088      	sub	sp, #32
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80098de:	2302      	movs	r3, #2
 80098e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80098e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fd9f 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f980 	bl	8009c04 <SDMMC_GetCmdResp2>
 8009904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009906:	69fb      	ldr	r3, [r7, #28]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800991e:	2309      	movs	r3, #9
 8009920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800992c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fd7f 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f960 	bl	8009c04 <SDMMC_GetCmdResp2>
 8009944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009946:	69fb      	ldr	r3, [r7, #28]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3720      	adds	r7, #32
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800995e:	2303      	movs	r3, #3
 8009960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800996c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fd5f 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	2103      	movs	r1, #3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f9c8 	bl	8009d18 <SDMMC_GetCmdResp6>
 8009988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800998a:	69fb      	ldr	r3, [r7, #28]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80099a2:	230d      	movs	r3, #13
 80099a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099b6:	f107 0308 	add.w	r3, r7, #8
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff fd3d 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80099c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c6:	210d      	movs	r1, #13
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f829 	bl	8009a20 <SDMMC_GetCmdResp1>
 80099ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d0:	69fb      	ldr	r3, [r7, #28]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b088      	sub	sp, #32
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80099e6:	230d      	movs	r3, #13
 80099e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099fa:	f107 0308 	add.w	r3, r7, #8
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff fd1b 	bl	800943c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a0a:	210d      	movs	r1, #13
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f807 	bl	8009a20 <SDMMC_GetCmdResp1>
 8009a12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a14:	69fb      	ldr	r3, [r7, #28]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a2e:	4b70      	ldr	r3, [pc, #448]	; (8009bf0 <SDMMC_GetCmdResp1+0x1d0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a70      	ldr	r2, [pc, #448]	; (8009bf4 <SDMMC_GetCmdResp1+0x1d4>)
 8009a34:	fba2 2303 	umull	r2, r3, r2, r3
 8009a38:	0a5a      	lsrs	r2, r3, #9
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	fb02 f303 	mul.w	r3, r2, r3
 8009a40:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	61fa      	str	r2, [r7, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d102      	bne.n	8009a52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a50:	e0c9      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a56:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	4b67      	ldr	r3, [pc, #412]	; (8009bf8 <SDMMC_GetCmdResp1+0x1d8>)
 8009a5c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0ef      	beq.n	8009a42 <SDMMC_GetCmdResp1+0x22>
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1ea      	bne.n	8009a42 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a7e:	2304      	movs	r3, #4
 8009a80:	e0b1      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d004      	beq.n	8009a98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e0a6      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4a58      	ldr	r2, [pc, #352]	; (8009bfc <SDMMC_GetCmdResp1+0x1dc>)
 8009a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fcf6 	bl	8009490 <SDMMC_GetCommandResponse>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d001      	beq.n	8009ab2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e099      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7ff fcf8 	bl	80094aa <SDMMC_GetResponse>
 8009aba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4b50      	ldr	r3, [pc, #320]	; (8009c00 <SDMMC_GetCmdResp1+0x1e0>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e08d      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da02      	bge.n	8009ad6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ad4:	e087      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	e080      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009aee:	2380      	movs	r3, #128	; 0x80
 8009af0:	e079      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b00:	e071      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b10:	e069      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b20:	e061      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b30:	e059      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b40:	e051      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b50:	e049      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b60:	e041      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b70:	e039      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b80:	e031      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b90:	e029      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ba0:	e021      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009bb0:	e019      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009bc0:	e011      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009bcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bd0:	e009      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009bdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009be0:	e001      	b.n	8009be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	24000000 	.word	0x24000000
 8009bf4:	10624dd3 	.word	0x10624dd3
 8009bf8:	00200045 	.word	0x00200045
 8009bfc:	002000c5 	.word	0x002000c5
 8009c00:	fdffe008 	.word	0xfdffe008

08009c04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c0c:	4b1f      	ldr	r3, [pc, #124]	; (8009c8c <SDMMC_GetCmdResp2+0x88>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a1f      	ldr	r2, [pc, #124]	; (8009c90 <SDMMC_GetCmdResp2+0x8c>)
 8009c12:	fba2 2303 	umull	r2, r3, r2, r3
 8009c16:	0a5b      	lsrs	r3, r3, #9
 8009c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c1c:	fb02 f303 	mul.w	r3, r2, r3
 8009c20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	1e5a      	subs	r2, r3, #1
 8009c26:	60fa      	str	r2, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c30:	e026      	b.n	8009c80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0ef      	beq.n	8009c22 <SDMMC_GetCmdResp2+0x1e>
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1ea      	bne.n	8009c22 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2204      	movs	r2, #4
 8009c5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c5e:	2304      	movs	r3, #4
 8009c60:	e00e      	b.n	8009c80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e003      	b.n	8009c80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a06      	ldr	r2, [pc, #24]	; (8009c94 <SDMMC_GetCmdResp2+0x90>)
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	24000000 	.word	0x24000000
 8009c90:	10624dd3 	.word	0x10624dd3
 8009c94:	002000c5 	.word	0x002000c5

08009c98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ca0:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <SDMMC_GetCmdResp3+0x74>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a1a      	ldr	r2, [pc, #104]	; (8009d10 <SDMMC_GetCmdResp3+0x78>)
 8009ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8009caa:	0a5b      	lsrs	r3, r3, #9
 8009cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb0:	fb02 f303 	mul.w	r3, r2, r3
 8009cb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1e5a      	subs	r2, r3, #1
 8009cba:	60fa      	str	r2, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cc4:	e01b      	b.n	8009cfe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0ef      	beq.n	8009cb6 <SDMMC_GetCmdResp3+0x1e>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1ea      	bne.n	8009cb6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d004      	beq.n	8009cf6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2204      	movs	r2, #4
 8009cf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cf2:	2304      	movs	r3, #4
 8009cf4:	e003      	b.n	8009cfe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a06      	ldr	r2, [pc, #24]	; (8009d14 <SDMMC_GetCmdResp3+0x7c>)
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	24000000 	.word	0x24000000
 8009d10:	10624dd3 	.word	0x10624dd3
 8009d14:	002000c5 	.word	0x002000c5

08009d18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	460b      	mov	r3, r1
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d26:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <SDMMC_GetCmdResp6+0xe4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a35      	ldr	r2, [pc, #212]	; (8009e00 <SDMMC_GetCmdResp6+0xe8>)
 8009d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d30:	0a5b      	lsrs	r3, r3, #9
 8009d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d36:	fb02 f303 	mul.w	r3, r2, r3
 8009d3a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	1e5a      	subs	r2, r3, #1
 8009d40:	61fa      	str	r2, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d102      	bne.n	8009d4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d4a:	e052      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d50:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0ef      	beq.n	8009d3c <SDMMC_GetCmdResp6+0x24>
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1ea      	bne.n	8009d3c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d004      	beq.n	8009d7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2204      	movs	r2, #4
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d78:	2304      	movs	r3, #4
 8009d7a:	e03a      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d004      	beq.n	8009d92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e02f      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f7ff fb7c 	bl	8009490 <SDMMC_GetCommandResponse>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d001      	beq.n	8009da6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e025      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <SDMMC_GetCmdResp6+0xec>)
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009dac:	2100      	movs	r1, #0
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f7ff fb7b 	bl	80094aa <SDMMC_GetResponse>
 8009db4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d106      	bne.n	8009dce <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	0c1b      	lsrs	r3, r3, #16
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e011      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ddc:	e009      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dec:	e001      	b.n	8009df2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3720      	adds	r7, #32
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	24000000 	.word	0x24000000
 8009e00:	10624dd3 	.word	0x10624dd3
 8009e04:	002000c5 	.word	0x002000c5

08009e08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e10:	4b22      	ldr	r3, [pc, #136]	; (8009e9c <SDMMC_GetCmdResp7+0x94>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <SDMMC_GetCmdResp7+0x98>)
 8009e16:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1a:	0a5b      	lsrs	r3, r3, #9
 8009e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e20:	fb02 f303 	mul.w	r3, r2, r3
 8009e24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1e5a      	subs	r2, r3, #1
 8009e2a:	60fa      	str	r2, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e34:	e02c      	b.n	8009e90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0ef      	beq.n	8009e26 <SDMMC_GetCmdResp7+0x1e>
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1ea      	bne.n	8009e26 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e54:	f003 0304 	and.w	r3, r3, #4
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e62:	2304      	movs	r3, #4
 8009e64:	e014      	b.n	8009e90 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e009      	b.n	8009e90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2240      	movs	r2, #64	; 0x40
 8009e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e8e:	2300      	movs	r3, #0

}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	24000000 	.word	0x24000000
 8009ea0:	10624dd3 	.word	0x10624dd3

08009ea4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009eac:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <SDMMC_GetCmdError+0x50>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <SDMMC_GetCmdError+0x54>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	0a5b      	lsrs	r3, r3, #9
 8009eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ebc:	fb02 f303 	mul.w	r3, r2, r3
 8009ec0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1e5a      	subs	r2, r3, #1
 8009ec6:	60fa      	str	r2, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ed0:	e009      	b.n	8009ee6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f1      	beq.n	8009ec2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a06      	ldr	r2, [pc, #24]	; (8009efc <SDMMC_GetCmdError+0x58>)
 8009ee2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	24000000 	.word	0x24000000
 8009ef8:	10624dd3 	.word	0x10624dd3
 8009efc:	002000c5 	.word	0x002000c5

08009f00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f04:	4904      	ldr	r1, [pc, #16]	; (8009f18 <MX_FATFS_Init+0x18>)
 8009f06:	4805      	ldr	r0, [pc, #20]	; (8009f1c <MX_FATFS_Init+0x1c>)
 8009f08:	f003 fbfe 	bl	800d708 <FATFS_LinkDriver>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <MX_FATFS_Init+0x20>)
 8009f12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f14:	bf00      	nop
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	240033b0 	.word	0x240033b0
 8009f1c:	08010dd4 	.word	0x08010dd4
 8009f20:	240033ac 	.word	0x240033ac

08009f24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009f24:	b480      	push	{r7}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009f28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f3e:	f000 f885 	bl	800a04c <BSP_SD_IsDetected>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d001      	beq.n	8009f4c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e012      	b.n	8009f72 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009f4c:	480b      	ldr	r0, [pc, #44]	; (8009f7c <BSP_SD_Init+0x48>)
 8009f4e:	f7fc fdb3 	bl	8006ab8 <HAL_SD_Init>
 8009f52:	4603      	mov	r3, r0
 8009f54:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f60:	4806      	ldr	r0, [pc, #24]	; (8009f7c <BSP_SD_Init+0x48>)
 8009f62:	f7fd fc57 	bl	8007814 <HAL_SD_ConfigWideBusOperation>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009f70:	79fb      	ldrb	r3, [r7, #7]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	240031a8 	.word	0x240031a8

08009f80 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	4806      	ldr	r0, [pc, #24]	; (8009fb0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009f98:	f7fc fea6 	bl	8006ce8 <HAL_SD_ReadBlocks_DMA>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	240031a8 	.word	0x240031a8

08009fb4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	68f9      	ldr	r1, [r7, #12]
 8009fca:	4806      	ldr	r0, [pc, #24]	; (8009fe4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009fcc:	f7fc ff34 	bl	8006e38 <HAL_SD_WriteBlocks_DMA>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	240031a8 	.word	0x240031a8

08009fe8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009fec:	4805      	ldr	r0, [pc, #20]	; (800a004 <BSP_SD_GetCardState+0x1c>)
 8009fee:	f7fd fd21 	bl	8007a34 <HAL_SD_GetCardState>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b04      	cmp	r3, #4
 8009ff6:	bf14      	ite	ne
 8009ff8:	2301      	movne	r3, #1
 8009ffa:	2300      	moveq	r3, #0
 8009ffc:	b2db      	uxtb	r3, r3
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	240031a8 	.word	0x240031a8

0800a008 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4803      	ldr	r0, [pc, #12]	; (800a020 <BSP_SD_GetCardInfo+0x18>)
 800a014:	f7fd fbd2 	bl	80077bc <HAL_SD_GetCardInfo>
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	240031a8 	.word	0x240031a8

0800a024 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a02c:	f000 f9a0 	bl	800a370 <BSP_SD_WriteCpltCallback>
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a040:	f000 f9a2 	bl	800a388 <BSP_SD_ReadCpltCallback>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a052:	2301      	movs	r3, #1
 800a054:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a056:	f000 f80b 	bl	800a070 <BSP_PlatformIsDetected>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a060:	2300      	movs	r3, #0
 800a062:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	b2db      	uxtb	r3, r3
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a076:	2301      	movs	r3, #1
 800a078:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a07a:	2101      	movs	r1, #1
 800a07c:	4806      	ldr	r0, [pc, #24]	; (800a098 <BSP_PlatformIsDetected+0x28>)
 800a07e:	f7f9 fb73 	bl	8003768 <HAL_GPIO_ReadPin>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a088:	2300      	movs	r3, #0
 800a08a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a08c:	79fb      	ldrb	r3, [r7, #7]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	58020c00 	.word	0x58020c00

0800a09c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a0a4:	f7f7 ff0e 	bl	8001ec4 <HAL_GetTick>
 800a0a8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a0aa:	e006      	b.n	800a0ba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a0ac:	f7ff ff9c 	bl	8009fe8 <BSP_SD_GetCardState>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e009      	b.n	800a0ce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a0ba:	f7f7 ff03 	bl	8001ec4 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d8f0      	bhi.n	800a0ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a0ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <SD_CheckStatus+0x38>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a0e8:	f7ff ff7e 	bl	8009fe8 <BSP_SD_GetCardState>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d107      	bne.n	800a102 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a0f2:	4b07      	ldr	r3, [pc, #28]	; (800a110 <SD_CheckStatus+0x38>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	f023 0301 	bic.w	r3, r3, #1
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	4b04      	ldr	r3, [pc, #16]	; (800a110 <SD_CheckStatus+0x38>)
 800a100:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a102:	4b03      	ldr	r3, [pc, #12]	; (800a110 <SD_CheckStatus+0x38>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	b2db      	uxtb	r3, r3
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	2400000d 	.word	0x2400000d

0800a114 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a11e:	f7ff ff09 	bl	8009f34 <BSP_SD_Init>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d107      	bne.n	800a138 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7ff ffd4 	bl	800a0d8 <SD_CheckStatus>
 800a130:	4603      	mov	r3, r0
 800a132:	461a      	mov	r2, r3
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <SD_initialize+0x34>)
 800a136:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a138:	4b03      	ldr	r3, [pc, #12]	; (800a148 <SD_initialize+0x34>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	b2db      	uxtb	r3, r3
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	2400000d 	.word	0x2400000d

0800a14c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff ffbd 	bl	800a0d8 <SD_CheckStatus>
 800a15e:	4603      	mov	r3, r0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a17c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a180:	f7ff ff8c 	bl	800a09c <SD_CheckStatusWithTimeout>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	da01      	bge.n	800a18e <SD_read+0x26>
  {
    return res;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	e03b      	b.n	800a206 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	68b8      	ldr	r0, [r7, #8]
 800a194:	f7ff fef4 	bl	8009f80 <BSP_SD_ReadBlocks_DMA>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d132      	bne.n	800a204 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a19e:	4b1c      	ldr	r3, [pc, #112]	; (800a210 <SD_read+0xa8>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a1a4:	f7f7 fe8e 	bl	8001ec4 <HAL_GetTick>
 800a1a8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a1aa:	bf00      	nop
 800a1ac:	4b18      	ldr	r3, [pc, #96]	; (800a210 <SD_read+0xa8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d108      	bne.n	800a1c6 <SD_read+0x5e>
 800a1b4:	f7f7 fe86 	bl	8001ec4 <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	f247 522f 	movw	r2, #29999	; 0x752f
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d9f2      	bls.n	800a1ac <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a1c6:	4b12      	ldr	r3, [pc, #72]	; (800a210 <SD_read+0xa8>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d102      	bne.n	800a1d4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
 800a1d2:	e017      	b.n	800a204 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	; (800a210 <SD_read+0xa8>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a1da:	f7f7 fe73 	bl	8001ec4 <HAL_GetTick>
 800a1de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a1e0:	e007      	b.n	800a1f2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a1e2:	f7ff ff01 	bl	8009fe8 <BSP_SD_GetCardState>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d102      	bne.n	800a1f2 <SD_read+0x8a>
          {
            res = RES_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a1f0:	e008      	b.n	800a204 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a1f2:	f7f7 fe67 	bl	8001ec4 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	f247 522f 	movw	r2, #29999	; 0x752f
 800a200:	4293      	cmp	r3, r2
 800a202:	d9ee      	bls.n	800a1e2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a204:	7dfb      	ldrb	r3, [r7, #23]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	24001268 	.word	0x24001268

0800a214 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a228:	4b24      	ldr	r3, [pc, #144]	; (800a2bc <SD_write+0xa8>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a22e:	f247 5030 	movw	r0, #30000	; 0x7530
 800a232:	f7ff ff33 	bl	800a09c <SD_CheckStatusWithTimeout>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da01      	bge.n	800a240 <SD_write+0x2c>
  {
    return res;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	e038      	b.n	800a2b2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	68b8      	ldr	r0, [r7, #8]
 800a246:	f7ff feb5 	bl	8009fb4 <BSP_SD_WriteBlocks_DMA>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d12f      	bne.n	800a2b0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a250:	f7f7 fe38 	bl	8001ec4 <HAL_GetTick>
 800a254:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a256:	bf00      	nop
 800a258:	4b18      	ldr	r3, [pc, #96]	; (800a2bc <SD_write+0xa8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d108      	bne.n	800a272 <SD_write+0x5e>
 800a260:	f7f7 fe30 	bl	8001ec4 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a26e:	4293      	cmp	r3, r2
 800a270:	d9f2      	bls.n	800a258 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a272:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <SD_write+0xa8>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d102      	bne.n	800a280 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	75fb      	strb	r3, [r7, #23]
 800a27e:	e017      	b.n	800a2b0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a280:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <SD_write+0xa8>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a286:	f7f7 fe1d 	bl	8001ec4 <HAL_GetTick>
 800a28a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a28c:	e007      	b.n	800a29e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a28e:	f7ff feab 	bl	8009fe8 <BSP_SD_GetCardState>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <SD_write+0x8a>
          {
            res = RES_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	75fb      	strb	r3, [r7, #23]
            break;
 800a29c:	e008      	b.n	800a2b0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a29e:	f7f7 fe11 	bl	8001ec4 <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d9ee      	bls.n	800a28e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	24001264 	.word	0x24001264

0800a2c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08c      	sub	sp, #48	; 0x30
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	603a      	str	r2, [r7, #0]
 800a2ca:	71fb      	strb	r3, [r7, #7]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a2d6:	4b25      	ldr	r3, [pc, #148]	; (800a36c <SD_ioctl+0xac>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <SD_ioctl+0x28>
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e03c      	b.n	800a362 <SD_ioctl+0xa2>

  switch (cmd)
 800a2e8:	79bb      	ldrb	r3, [r7, #6]
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d834      	bhi.n	800a358 <SD_ioctl+0x98>
 800a2ee:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <SD_ioctl+0x34>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a30d 	.word	0x0800a30d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a33f 	.word	0x0800a33f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a30a:	e028      	b.n	800a35e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a30c:	f107 0308 	add.w	r3, r7, #8
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff fe79 	bl	800a008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a316:	6a3a      	ldr	r2, [r7, #32]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a322:	e01c      	b.n	800a35e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a324:	f107 0308 	add.w	r3, r7, #8
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fe6d 	bl	800a008 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	b29a      	uxth	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a33c:	e00f      	b.n	800a35e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a33e:	f107 0308 	add.w	r3, r7, #8
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fe60 	bl	800a008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	0a5a      	lsrs	r2, r3, #9
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a356:	e002      	b.n	800a35e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a358:	2304      	movs	r3, #4
 800a35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a362:	4618      	mov	r0, r3
 800a364:	3730      	adds	r7, #48	; 0x30
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	2400000d 	.word	0x2400000d

0800a370 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a374:	4b03      	ldr	r3, [pc, #12]	; (800a384 <BSP_SD_WriteCpltCallback+0x14>)
 800a376:	2201      	movs	r2, #1
 800a378:	601a      	str	r2, [r3, #0]
}
 800a37a:	bf00      	nop
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	24001264 	.word	0x24001264

0800a388 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a38c:	4b03      	ldr	r3, [pc, #12]	; (800a39c <BSP_SD_ReadCpltCallback+0x14>)
 800a38e:	2201      	movs	r2, #1
 800a390:	601a      	str	r2, [r3, #0]
}
 800a392:	bf00      	nop
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	24001268 	.word	0x24001268

0800a3a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	4a08      	ldr	r2, [pc, #32]	; (800a3d0 <disk_status+0x30>)
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	79fa      	ldrb	r2, [r7, #7]
 800a3b8:	4905      	ldr	r1, [pc, #20]	; (800a3d0 <disk_status+0x30>)
 800a3ba:	440a      	add	r2, r1
 800a3bc:	7a12      	ldrb	r2, [r2, #8]
 800a3be:	4610      	mov	r0, r2
 800a3c0:	4798      	blx	r3
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	24001494 	.word	0x24001494

0800a3d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	4a0d      	ldr	r2, [pc, #52]	; (800a41c <disk_initialize+0x48>)
 800a3e6:	5cd3      	ldrb	r3, [r2, r3]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d111      	bne.n	800a410 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a3ec:	79fb      	ldrb	r3, [r7, #7]
 800a3ee:	4a0b      	ldr	r2, [pc, #44]	; (800a41c <disk_initialize+0x48>)
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	4a09      	ldr	r2, [pc, #36]	; (800a41c <disk_initialize+0x48>)
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	79fa      	ldrb	r2, [r7, #7]
 800a402:	4906      	ldr	r1, [pc, #24]	; (800a41c <disk_initialize+0x48>)
 800a404:	440a      	add	r2, r1
 800a406:	7a12      	ldrb	r2, [r2, #8]
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	24001494 	.word	0x24001494

0800a420 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a420:	b590      	push	{r4, r7, lr}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	607a      	str	r2, [r7, #4]
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	4a0a      	ldr	r2, [pc, #40]	; (800a45c <disk_read+0x3c>)
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	689c      	ldr	r4, [r3, #8]
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	4a07      	ldr	r2, [pc, #28]	; (800a45c <disk_read+0x3c>)
 800a440:	4413      	add	r3, r2
 800a442:	7a18      	ldrb	r0, [r3, #8]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	47a0      	blx	r4
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
}
 800a452:	4618      	mov	r0, r3
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	bd90      	pop	{r4, r7, pc}
 800a45a:	bf00      	nop
 800a45c:	24001494 	.word	0x24001494

0800a460 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	607a      	str	r2, [r7, #4]
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	4603      	mov	r3, r0
 800a46e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <disk_write+0x3c>)
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	68dc      	ldr	r4, [r3, #12]
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	4a07      	ldr	r2, [pc, #28]	; (800a49c <disk_write+0x3c>)
 800a480:	4413      	add	r3, r2
 800a482:	7a18      	ldrb	r0, [r3, #8]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	68b9      	ldr	r1, [r7, #8]
 800a48a:	47a0      	blx	r4
 800a48c:	4603      	mov	r3, r0
 800a48e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a490:	7dfb      	ldrb	r3, [r7, #23]
}
 800a492:	4618      	mov	r0, r3
 800a494:	371c      	adds	r7, #28
 800a496:	46bd      	mov	sp, r7
 800a498:	bd90      	pop	{r4, r7, pc}
 800a49a:	bf00      	nop
 800a49c:	24001494 	.word	0x24001494

0800a4a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	603a      	str	r2, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	4a09      	ldr	r2, [pc, #36]	; (800a4d8 <disk_ioctl+0x38>)
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	79fa      	ldrb	r2, [r7, #7]
 800a4be:	4906      	ldr	r1, [pc, #24]	; (800a4d8 <disk_ioctl+0x38>)
 800a4c0:	440a      	add	r2, r1
 800a4c2:	7a10      	ldrb	r0, [r2, #8]
 800a4c4:	79b9      	ldrb	r1, [r7, #6]
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4798      	blx	r3
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	24001494 	.word	0x24001494

0800a4dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b21a      	sxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	b21b      	sxth	r3, r3
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	b21b      	sxth	r3, r3
 800a4fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a4fe:	89fb      	ldrh	r3, [r7, #14]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3303      	adds	r3, #3
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	3202      	adds	r2, #2
 800a524:	7812      	ldrb	r2, [r2, #0]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	3201      	adds	r2, #1
 800a532:	7812      	ldrb	r2, [r2, #0]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	7812      	ldrb	r2, [r2, #0]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
	return rv;
 800a544:	68fb      	ldr	r3, [r7, #12]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	887a      	ldrh	r2, [r7, #2]
 800a566:	b2d2      	uxtb	r2, r2
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	887b      	ldrh	r3, [r7, #2]
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	607a      	str	r2, [r7, #4]
 800a576:	887a      	ldrh	r2, [r7, #2]
 800a578:	b2d2      	uxtb	r2, r2
 800a57a:	701a      	strb	r2, [r3, #0]
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	701a      	strb	r2, [r3, #0]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	0a1b      	lsrs	r3, r3, #8
 800a5a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	607a      	str	r2, [r7, #4]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	b2d2      	uxtb	r2, r2
 800a5ae:	701a      	strb	r2, [r3, #0]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	0a1b      	lsrs	r3, r3, #8
 800a5c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	b2d2      	uxtb	r2, r2
 800a5d2:	701a      	strb	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00d      	beq.n	800a616 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	1c53      	adds	r3, r2, #1
 800a5fe:	613b      	str	r3, [r7, #16]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	1c59      	adds	r1, r3, #1
 800a604:	6179      	str	r1, [r7, #20]
 800a606:	7812      	ldrb	r2, [r2, #0]
 800a608:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	607b      	str	r3, [r7, #4]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1f1      	bne.n	800a5fa <mem_cpy+0x1a>
	}
}
 800a616:	bf00      	nop
 800a618:	371c      	adds	r7, #28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a622:	b480      	push	{r7}
 800a624:	b087      	sub	sp, #28
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	617a      	str	r2, [r7, #20]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3b01      	subs	r3, #1
 800a642:	607b      	str	r3, [r7, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f3      	bne.n	800a632 <mem_set+0x10>
}
 800a64a:	bf00      	nop
 800a64c:	bf00      	nop
 800a64e:	371c      	adds	r7, #28
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a658:	b480      	push	{r7}
 800a65a:	b089      	sub	sp, #36	; 0x24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	61fb      	str	r3, [r7, #28]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	61fa      	str	r2, [r7, #28]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	4619      	mov	r1, r3
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	61ba      	str	r2, [r7, #24]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	1acb      	subs	r3, r1, r3
 800a684:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	3b01      	subs	r3, #1
 800a68a:	607b      	str	r3, [r7, #4]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <mem_cmp+0x40>
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0eb      	beq.n	800a670 <mem_cmp+0x18>

	return r;
 800a698:	697b      	ldr	r3, [r7, #20]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3724      	adds	r7, #36	; 0x24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a6b0:	e002      	b.n	800a6b8 <chk_chr+0x12>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <chk_chr+0x26>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d1f2      	bne.n	800a6b2 <chk_chr+0xc>
	return *str;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60bb      	str	r3, [r7, #8]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	e029      	b.n	800a744 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a6f0:	4a27      	ldr	r2, [pc, #156]	; (800a790 <chk_lock+0xb4>)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	4413      	add	r3, r2
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01d      	beq.n	800a73a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a6fe:	4a24      	ldr	r2, [pc, #144]	; (800a790 <chk_lock+0xb4>)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	011b      	lsls	r3, r3, #4
 800a704:	4413      	add	r3, r2
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d116      	bne.n	800a73e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a710:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <chk_lock+0xb4>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	011b      	lsls	r3, r3, #4
 800a716:	4413      	add	r3, r2
 800a718:	3304      	adds	r3, #4
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a720:	429a      	cmp	r2, r3
 800a722:	d10c      	bne.n	800a73e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a724:	4a1a      	ldr	r2, [pc, #104]	; (800a790 <chk_lock+0xb4>)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	011b      	lsls	r3, r3, #4
 800a72a:	4413      	add	r3, r2
 800a72c:	3308      	adds	r3, #8
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a734:	429a      	cmp	r2, r3
 800a736:	d102      	bne.n	800a73e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a738:	e007      	b.n	800a74a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a73a:	2301      	movs	r3, #1
 800a73c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3301      	adds	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d9d2      	bls.n	800a6f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d109      	bne.n	800a764 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <chk_lock+0x80>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d101      	bne.n	800a760 <chk_lock+0x84>
 800a75c:	2300      	movs	r3, #0
 800a75e:	e010      	b.n	800a782 <chk_lock+0xa6>
 800a760:	2312      	movs	r3, #18
 800a762:	e00e      	b.n	800a782 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d108      	bne.n	800a77c <chk_lock+0xa0>
 800a76a:	4a09      	ldr	r2, [pc, #36]	; (800a790 <chk_lock+0xb4>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	4413      	add	r3, r2
 800a772:	330c      	adds	r3, #12
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77a:	d101      	bne.n	800a780 <chk_lock+0xa4>
 800a77c:	2310      	movs	r3, #16
 800a77e:	e000      	b.n	800a782 <chk_lock+0xa6>
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	24001274 	.word	0x24001274

0800a794 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a79a:	2300      	movs	r3, #0
 800a79c:	607b      	str	r3, [r7, #4]
 800a79e:	e002      	b.n	800a7a6 <enq_lock+0x12>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	607b      	str	r3, [r7, #4]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d806      	bhi.n	800a7ba <enq_lock+0x26>
 800a7ac:	4a09      	ldr	r2, [pc, #36]	; (800a7d4 <enq_lock+0x40>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	011b      	lsls	r3, r3, #4
 800a7b2:	4413      	add	r3, r2
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f2      	bne.n	800a7a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	bf14      	ite	ne
 800a7c0:	2301      	movne	r3, #1
 800a7c2:	2300      	moveq	r3, #0
 800a7c4:	b2db      	uxtb	r3, r3
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	24001274 	.word	0x24001274

0800a7d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
 800a7e6:	e01f      	b.n	800a828 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a7e8:	4a41      	ldr	r2, [pc, #260]	; (800a8f0 <inc_lock+0x118>)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	4413      	add	r3, r2
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d113      	bne.n	800a822 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a7fa:	4a3d      	ldr	r2, [pc, #244]	; (800a8f0 <inc_lock+0x118>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	011b      	lsls	r3, r3, #4
 800a800:	4413      	add	r3, r2
 800a802:	3304      	adds	r3, #4
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d109      	bne.n	800a822 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a80e:	4a38      	ldr	r2, [pc, #224]	; (800a8f0 <inc_lock+0x118>)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	4413      	add	r3, r2
 800a816:	3308      	adds	r3, #8
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a81e:	429a      	cmp	r2, r3
 800a820:	d006      	beq.n	800a830 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3301      	adds	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d9dc      	bls.n	800a7e8 <inc_lock+0x10>
 800a82e:	e000      	b.n	800a832 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a830:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d132      	bne.n	800a89e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	e002      	b.n	800a844 <inc_lock+0x6c>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3301      	adds	r3, #1
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d806      	bhi.n	800a858 <inc_lock+0x80>
 800a84a:	4a29      	ldr	r2, [pc, #164]	; (800a8f0 <inc_lock+0x118>)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	4413      	add	r3, r2
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1f2      	bne.n	800a83e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d101      	bne.n	800a862 <inc_lock+0x8a>
 800a85e:	2300      	movs	r3, #0
 800a860:	e040      	b.n	800a8e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	4922      	ldr	r1, [pc, #136]	; (800a8f0 <inc_lock+0x118>)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	011b      	lsls	r3, r3, #4
 800a86c:	440b      	add	r3, r1
 800a86e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	491e      	ldr	r1, [pc, #120]	; (800a8f0 <inc_lock+0x118>)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	440b      	add	r3, r1
 800a87c:	3304      	adds	r3, #4
 800a87e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	695a      	ldr	r2, [r3, #20]
 800a884:	491a      	ldr	r1, [pc, #104]	; (800a8f0 <inc_lock+0x118>)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	011b      	lsls	r3, r3, #4
 800a88a:	440b      	add	r3, r1
 800a88c:	3308      	adds	r3, #8
 800a88e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a890:	4a17      	ldr	r2, [pc, #92]	; (800a8f0 <inc_lock+0x118>)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	011b      	lsls	r3, r3, #4
 800a896:	4413      	add	r3, r2
 800a898:	330c      	adds	r3, #12
 800a89a:	2200      	movs	r2, #0
 800a89c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d009      	beq.n	800a8b8 <inc_lock+0xe0>
 800a8a4:	4a12      	ldr	r2, [pc, #72]	; (800a8f0 <inc_lock+0x118>)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	4413      	add	r3, r2
 800a8ac:	330c      	adds	r3, #12
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <inc_lock+0xe0>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	e015      	b.n	800a8e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d108      	bne.n	800a8d0 <inc_lock+0xf8>
 800a8be:	4a0c      	ldr	r2, [pc, #48]	; (800a8f0 <inc_lock+0x118>)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	4413      	add	r3, r2
 800a8c6:	330c      	adds	r3, #12
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	e001      	b.n	800a8d4 <inc_lock+0xfc>
 800a8d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8d4:	4906      	ldr	r1, [pc, #24]	; (800a8f0 <inc_lock+0x118>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	011b      	lsls	r3, r3, #4
 800a8da:	440b      	add	r3, r1
 800a8dc:	330c      	adds	r3, #12
 800a8de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3301      	adds	r3, #1
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	24001274 	.word	0x24001274

0800a8f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	607b      	str	r3, [r7, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d825      	bhi.n	800a954 <dec_lock+0x60>
		n = Files[i].ctr;
 800a908:	4a17      	ldr	r2, [pc, #92]	; (800a968 <dec_lock+0x74>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	4413      	add	r3, r2
 800a910:	330c      	adds	r3, #12
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a916:	89fb      	ldrh	r3, [r7, #14]
 800a918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91c:	d101      	bne.n	800a922 <dec_lock+0x2e>
 800a91e:	2300      	movs	r3, #0
 800a920:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a922:	89fb      	ldrh	r3, [r7, #14]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <dec_lock+0x3a>
 800a928:	89fb      	ldrh	r3, [r7, #14]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a92e:	4a0e      	ldr	r2, [pc, #56]	; (800a968 <dec_lock+0x74>)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	4413      	add	r3, r2
 800a936:	330c      	adds	r3, #12
 800a938:	89fa      	ldrh	r2, [r7, #14]
 800a93a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a93c:	89fb      	ldrh	r3, [r7, #14]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d105      	bne.n	800a94e <dec_lock+0x5a>
 800a942:	4a09      	ldr	r2, [pc, #36]	; (800a968 <dec_lock+0x74>)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	4413      	add	r3, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	737b      	strb	r3, [r7, #13]
 800a952:	e001      	b.n	800a958 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a954:	2302      	movs	r3, #2
 800a956:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a958:	7b7b      	ldrb	r3, [r7, #13]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	24001274 	.word	0x24001274

0800a96c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	e010      	b.n	800a99c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a97a:	4a0d      	ldr	r2, [pc, #52]	; (800a9b0 <clear_lock+0x44>)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	011b      	lsls	r3, r3, #4
 800a980:	4413      	add	r3, r2
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	429a      	cmp	r2, r3
 800a988:	d105      	bne.n	800a996 <clear_lock+0x2a>
 800a98a:	4a09      	ldr	r2, [pc, #36]	; (800a9b0 <clear_lock+0x44>)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	4413      	add	r3, r2
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3301      	adds	r3, #1
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d9eb      	bls.n	800a97a <clear_lock+0xe>
	}
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	24001274 	.word	0x24001274

0800a9b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	78db      	ldrb	r3, [r3, #3]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d034      	beq.n	800aa32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7858      	ldrb	r0, [r3, #1]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9d8:	2301      	movs	r3, #1
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	f7ff fd40 	bl	800a460 <disk_write>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	73fb      	strb	r3, [r7, #15]
 800a9ea:	e022      	b.n	800aa32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	1ad2      	subs	r2, r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d217      	bcs.n	800aa32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	789b      	ldrb	r3, [r3, #2]
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	e010      	b.n	800aa2c <sync_window+0x78>
					wsect += fs->fsize;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4413      	add	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7858      	ldrb	r0, [r3, #1]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa1e:	2301      	movs	r3, #1
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	f7ff fd1d 	bl	800a460 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	613b      	str	r3, [r7, #16]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d8eb      	bhi.n	800aa0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d01b      	beq.n	800aa8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ffad 	bl	800a9b4 <sync_window>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d113      	bne.n	800aa8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7858      	ldrb	r0, [r3, #1]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa6e:	2301      	movs	r3, #1
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	f7ff fcd5 	bl	800a420 <disk_read>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff ff87 	bl	800a9b4 <sync_window>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d159      	bne.n	800ab64 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d149      	bne.n	800ab4c <sync_fs+0xb4>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	791b      	ldrb	r3, [r3, #4]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d145      	bne.n	800ab4c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	899b      	ldrh	r3, [r3, #12]
 800aaca:	461a      	mov	r2, r3
 800aacc:	2100      	movs	r1, #0
 800aace:	f7ff fda8 	bl	800a622 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3338      	adds	r3, #56	; 0x38
 800aad6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aada:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fd37 	bl	800a552 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3338      	adds	r3, #56	; 0x38
 800aae8:	4921      	ldr	r1, [pc, #132]	; (800ab70 <sync_fs+0xd8>)
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7ff fd4c 	bl	800a588 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3338      	adds	r3, #56	; 0x38
 800aaf4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aaf8:	491e      	ldr	r1, [pc, #120]	; (800ab74 <sync_fs+0xdc>)
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff fd44 	bl	800a588 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3338      	adds	r3, #56	; 0x38
 800ab04:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	f7ff fd3a 	bl	800a588 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3338      	adds	r3, #56	; 0x38
 800ab18:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7ff fd30 	bl	800a588 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7858      	ldrb	r0, [r3, #1]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab40:	2301      	movs	r3, #1
 800ab42:	f7ff fc8d 	bl	800a460 <disk_write>
			fs->fsi_flag = 0;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	785b      	ldrb	r3, [r3, #1]
 800ab50:	2200      	movs	r2, #0
 800ab52:	2100      	movs	r1, #0
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fca3 	bl	800a4a0 <disk_ioctl>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <sync_fs+0xcc>
 800ab60:	2301      	movs	r3, #1
 800ab62:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	41615252 	.word	0x41615252
 800ab74:	61417272 	.word	0x61417272

0800ab78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	3b02      	subs	r3, #2
 800ab86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	3b02      	subs	r3, #2
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d301      	bcc.n	800ab98 <clust2sect+0x20>
 800ab94:	2300      	movs	r3, #0
 800ab96:	e008      	b.n	800abaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	895b      	ldrh	r3, [r3, #10]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	fb03 f202 	mul.w	r2, r3, r2
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba8:	4413      	add	r3, r2
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b086      	sub	sp, #24
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d904      	bls.n	800abd6 <get_fat+0x20>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d302      	bcc.n	800abdc <get_fat+0x26>
		val = 1;	/* Internal error */
 800abd6:	2301      	movs	r3, #1
 800abd8:	617b      	str	r3, [r7, #20]
 800abda:	e0bb      	b.n	800ad54 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	f000 8083 	beq.w	800acf2 <get_fat+0x13c>
 800abec:	2b03      	cmp	r3, #3
 800abee:	f300 80a7 	bgt.w	800ad40 <get_fat+0x18a>
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d002      	beq.n	800abfc <get_fat+0x46>
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d056      	beq.n	800aca8 <get_fat+0xf2>
 800abfa:	e0a1      	b.n	800ad40 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4413      	add	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	899b      	ldrh	r3, [r3, #12]
 800ac12:	4619      	mov	r1, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac1a:	4413      	add	r3, r2
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6938      	ldr	r0, [r7, #16]
 800ac20:	f7ff ff0c 	bl	800aa3c <move_window>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f040 808d 	bne.w	800ad46 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	60fa      	str	r2, [r7, #12]
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	8992      	ldrh	r2, [r2, #12]
 800ac36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac3a:	fb02 f201 	mul.w	r2, r2, r1
 800ac3e:	1a9b      	subs	r3, r3, r2
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	4413      	add	r3, r2
 800ac44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	899b      	ldrh	r3, [r3, #12]
 800ac52:	4619      	mov	r1, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac5a:	4413      	add	r3, r2
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6938      	ldr	r0, [r7, #16]
 800ac60:	f7ff feec 	bl	800aa3c <move_window>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d16f      	bne.n	800ad4a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	899b      	ldrh	r3, [r3, #12]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac76:	fb02 f201 	mul.w	r2, r2, r1
 800ac7a:	1a9b      	subs	r3, r3, r2
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	461a      	mov	r2, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <get_fat+0xe8>
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	091b      	lsrs	r3, r3, #4
 800ac9c:	e002      	b.n	800aca4 <get_fat+0xee>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aca4:	617b      	str	r3, [r7, #20]
			break;
 800aca6:	e055      	b.n	800ad54 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	899b      	ldrh	r3, [r3, #12]
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	4619      	mov	r1, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800acbc:	4413      	add	r3, r2
 800acbe:	4619      	mov	r1, r3
 800acc0:	6938      	ldr	r0, [r7, #16]
 800acc2:	f7ff febb 	bl	800aa3c <move_window>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d140      	bne.n	800ad4e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	8992      	ldrh	r2, [r2, #12]
 800acda:	fbb3 f0f2 	udiv	r0, r3, r2
 800acde:	fb02 f200 	mul.w	r2, r2, r0
 800ace2:	1a9b      	subs	r3, r3, r2
 800ace4:	440b      	add	r3, r1
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff fbf8 	bl	800a4dc <ld_word>
 800acec:	4603      	mov	r3, r0
 800acee:	617b      	str	r3, [r7, #20]
			break;
 800acf0:	e030      	b.n	800ad54 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	899b      	ldrh	r3, [r3, #12]
 800acfa:	089b      	lsrs	r3, r3, #2
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	4619      	mov	r1, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad06:	4413      	add	r3, r2
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6938      	ldr	r0, [r7, #16]
 800ad0c:	f7ff fe96 	bl	800aa3c <move_window>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d11d      	bne.n	800ad52 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	8992      	ldrh	r2, [r2, #12]
 800ad24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad28:	fb02 f200 	mul.w	r2, r2, r0
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	440b      	add	r3, r1
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fbeb 	bl	800a50c <ld_dword>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad3c:	617b      	str	r3, [r7, #20]
			break;
 800ad3e:	e009      	b.n	800ad54 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad40:	2301      	movs	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
 800ad44:	e006      	b.n	800ad54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad46:	bf00      	nop
 800ad48:	e004      	b.n	800ad54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad4a:	bf00      	nop
 800ad4c:	e002      	b.n	800ad54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad52:	bf00      	nop
		}
	}

	return val;
 800ad54:	697b      	ldr	r3, [r7, #20]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad5e:	b590      	push	{r4, r7, lr}
 800ad60:	b089      	sub	sp, #36	; 0x24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	f240 8102 	bls.w	800af7a <put_fat+0x21c>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	f080 80fc 	bcs.w	800af7a <put_fat+0x21c>
		switch (fs->fs_type) {
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	f000 80b6 	beq.w	800aef8 <put_fat+0x19a>
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	f300 80fd 	bgt.w	800af8c <put_fat+0x22e>
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d003      	beq.n	800ad9e <put_fat+0x40>
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	f000 8083 	beq.w	800aea2 <put_fat+0x144>
 800ad9c:	e0f6      	b.n	800af8c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	61bb      	str	r3, [r7, #24]
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	085b      	lsrs	r3, r3, #1
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	4413      	add	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	899b      	ldrh	r3, [r3, #12]
 800adb4:	4619      	mov	r1, r3
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800adbc:	4413      	add	r3, r2
 800adbe:	4619      	mov	r1, r3
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff fe3b 	bl	800aa3c <move_window>
 800adc6:	4603      	mov	r3, r0
 800adc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adca:	7ffb      	ldrb	r3, [r7, #31]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f040 80d6 	bne.w	800af7e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	61ba      	str	r2, [r7, #24]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	8992      	ldrh	r2, [r2, #12]
 800ade2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ade6:	fb02 f200 	mul.w	r2, r2, r0
 800adea:	1a9b      	subs	r3, r3, r2
 800adec:	440b      	add	r3, r1
 800adee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <put_fat+0xb8>
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	f003 030f 	and.w	r3, r3, #15
 800ae04:	b25a      	sxtb	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	b25b      	sxtb	r3, r3
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	b25b      	sxtb	r3, r3
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	e001      	b.n	800ae1a <put_fat+0xbc>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	899b      	ldrh	r3, [r3, #12]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae34:	4413      	add	r3, r2
 800ae36:	4619      	mov	r1, r3
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f7ff fdff 	bl	800aa3c <move_window>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae42:	7ffb      	ldrb	r3, [r7, #31]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f040 809c 	bne.w	800af82 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	899b      	ldrh	r3, [r3, #12]
 800ae54:	461a      	mov	r2, r3
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae5c:	fb02 f200 	mul.w	r2, r2, r0
 800ae60:	1a9b      	subs	r3, r3, r2
 800ae62:	440b      	add	r3, r1
 800ae64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <put_fat+0x11a>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	091b      	lsrs	r3, r3, #4
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	e00e      	b.n	800ae96 <put_fat+0x138>
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	b25b      	sxtb	r3, r3
 800ae7e:	f023 030f 	bic.w	r3, r3, #15
 800ae82:	b25a      	sxtb	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	0a1b      	lsrs	r3, r3, #8
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	b25b      	sxtb	r3, r3
 800ae90:	4313      	orrs	r3, r2
 800ae92:	b25b      	sxtb	r3, r3
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	70da      	strb	r2, [r3, #3]
			break;
 800aea0:	e074      	b.n	800af8c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	899b      	ldrh	r3, [r3, #12]
 800aeaa:	085b      	lsrs	r3, r3, #1
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4619      	mov	r1, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeb6:	4413      	add	r3, r2
 800aeb8:	4619      	mov	r1, r3
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7ff fdbe 	bl	800aa3c <move_window>
 800aec0:	4603      	mov	r3, r0
 800aec2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aec4:	7ffb      	ldrb	r3, [r7, #31]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d15d      	bne.n	800af86 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	8992      	ldrh	r2, [r2, #12]
 800aed8:	fbb3 f0f2 	udiv	r0, r3, r2
 800aedc:	fb02 f200 	mul.w	r2, r2, r0
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	440b      	add	r3, r1
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	b292      	uxth	r2, r2
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff fb31 	bl	800a552 <st_word>
			fs->wflag = 1;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	70da      	strb	r2, [r3, #3]
			break;
 800aef6:	e049      	b.n	800af8c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	899b      	ldrh	r3, [r3, #12]
 800af00:	089b      	lsrs	r3, r3, #2
 800af02:	b29b      	uxth	r3, r3
 800af04:	4619      	mov	r1, r3
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	fbb3 f3f1 	udiv	r3, r3, r1
 800af0c:	4413      	add	r3, r2
 800af0e:	4619      	mov	r1, r3
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff fd93 	bl	800aa3c <move_window>
 800af16:	4603      	mov	r3, r0
 800af18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af1a:	7ffb      	ldrb	r3, [r7, #31]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d134      	bne.n	800af8a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	8992      	ldrh	r2, [r2, #12]
 800af34:	fbb3 f0f2 	udiv	r0, r3, r2
 800af38:	fb02 f200 	mul.w	r2, r2, r0
 800af3c:	1a9b      	subs	r3, r3, r2
 800af3e:	440b      	add	r3, r1
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff fae3 	bl	800a50c <ld_dword>
 800af46:	4603      	mov	r3, r0
 800af48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af4c:	4323      	orrs	r3, r4
 800af4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	8992      	ldrh	r2, [r2, #12]
 800af5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800af62:	fb02 f200 	mul.w	r2, r2, r0
 800af66:	1a9b      	subs	r3, r3, r2
 800af68:	440b      	add	r3, r1
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fb0b 	bl	800a588 <st_dword>
			fs->wflag = 1;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	70da      	strb	r2, [r3, #3]
			break;
 800af78:	e008      	b.n	800af8c <put_fat+0x22e>
		}
	}
 800af7a:	bf00      	nop
 800af7c:	e006      	b.n	800af8c <put_fat+0x22e>
			if (res != FR_OK) break;
 800af7e:	bf00      	nop
 800af80:	e004      	b.n	800af8c <put_fat+0x22e>
			if (res != FR_OK) break;
 800af82:	bf00      	nop
 800af84:	e002      	b.n	800af8c <put_fat+0x22e>
			if (res != FR_OK) break;
 800af86:	bf00      	nop
 800af88:	e000      	b.n	800af8c <put_fat+0x22e>
			if (res != FR_OK) break;
 800af8a:	bf00      	nop
	return res;
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3724      	adds	r7, #36	; 0x24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd90      	pop	{r4, r7, pc}

0800af96 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b088      	sub	sp, #32
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d904      	bls.n	800afbc <remove_chain+0x26>
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d301      	bcc.n	800afc0 <remove_chain+0x2a>
 800afbc:	2302      	movs	r3, #2
 800afbe:	e04b      	b.n	800b058 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00c      	beq.n	800afe0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	69b8      	ldr	r0, [r7, #24]
 800afce:	f7ff fec6 	bl	800ad5e <put_fat>
 800afd2:	4603      	mov	r3, r0
 800afd4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800afd6:	7ffb      	ldrb	r3, [r7, #31]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <remove_chain+0x4a>
 800afdc:	7ffb      	ldrb	r3, [r7, #31]
 800afde:	e03b      	b.n	800b058 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f7ff fde7 	bl	800abb6 <get_fat>
 800afe8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d031      	beq.n	800b054 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <remove_chain+0x64>
 800aff6:	2302      	movs	r3, #2
 800aff8:	e02e      	b.n	800b058 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b000:	d101      	bne.n	800b006 <remove_chain+0x70>
 800b002:	2301      	movs	r3, #1
 800b004:	e028      	b.n	800b058 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b006:	2200      	movs	r2, #0
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	69b8      	ldr	r0, [r7, #24]
 800b00c:	f7ff fea7 	bl	800ad5e <put_fat>
 800b010:	4603      	mov	r3, r0
 800b012:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b014:	7ffb      	ldrb	r3, [r7, #31]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <remove_chain+0x88>
 800b01a:	7ffb      	ldrb	r3, [r7, #31]
 800b01c:	e01c      	b.n	800b058 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	699a      	ldr	r2, [r3, #24]
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	3b02      	subs	r3, #2
 800b028:	429a      	cmp	r2, r3
 800b02a:	d20b      	bcs.n	800b044 <remove_chain+0xae>
			fs->free_clst++;
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	791b      	ldrb	r3, [r3, #4]
 800b03a:	f043 0301 	orr.w	r3, r3, #1
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d3c6      	bcc.n	800afe0 <remove_chain+0x4a>
 800b052:	e000      	b.n	800b056 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b054:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10d      	bne.n	800b092 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <create_chain+0x2c>
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d31b      	bcc.n	800b0c4 <create_chain+0x64>
 800b08c:	2301      	movs	r3, #1
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	e018      	b.n	800b0c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7ff fd8e 	bl	800abb6 <get_fat>
 800b09a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d801      	bhi.n	800b0a6 <create_chain+0x46>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e070      	b.n	800b188 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ac:	d101      	bne.n	800b0b2 <create_chain+0x52>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	e06a      	b.n	800b188 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d201      	bcs.n	800b0c0 <create_chain+0x60>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	e063      	b.n	800b188 <create_chain+0x128>
		scl = clst;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	69fa      	ldr	r2, [r7, #28]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d307      	bcc.n	800b0e8 <create_chain+0x88>
				ncl = 2;
 800b0d8:	2302      	movs	r3, #2
 800b0da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b0dc:	69fa      	ldr	r2, [r7, #28]
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d901      	bls.n	800b0e8 <create_chain+0x88>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e04f      	b.n	800b188 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b0e8:	69f9      	ldr	r1, [r7, #28]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7ff fd63 	bl	800abb6 <get_fat>
 800b0f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00e      	beq.n	800b116 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d003      	beq.n	800b106 <create_chain+0xa6>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b104:	d101      	bne.n	800b10a <create_chain+0xaa>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	e03e      	b.n	800b188 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d1da      	bne.n	800b0c8 <create_chain+0x68>
 800b112:	2300      	movs	r3, #0
 800b114:	e038      	b.n	800b188 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b116:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	69f9      	ldr	r1, [r7, #28]
 800b11e:	6938      	ldr	r0, [r7, #16]
 800b120:	f7ff fe1d 	bl	800ad5e <put_fat>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d109      	bne.n	800b142 <create_chain+0xe2>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b134:	69fa      	ldr	r2, [r7, #28]
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6938      	ldr	r0, [r7, #16]
 800b13a:	f7ff fe10 	bl	800ad5e <put_fat>
 800b13e:	4603      	mov	r3, r0
 800b140:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d116      	bne.n	800b176 <create_chain+0x116>
		fs->last_clst = ncl;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	3b02      	subs	r3, #2
 800b158:	429a      	cmp	r2, r3
 800b15a:	d804      	bhi.n	800b166 <create_chain+0x106>
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	1e5a      	subs	r2, r3, #1
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	791b      	ldrb	r3, [r3, #4]
 800b16a:	f043 0301 	orr.w	r3, r3, #1
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	711a      	strb	r2, [r3, #4]
 800b174:	e007      	b.n	800b186 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d102      	bne.n	800b182 <create_chain+0x122>
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295
 800b180:	e000      	b.n	800b184 <create_chain+0x124>
 800b182:	2301      	movs	r3, #1
 800b184:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b186:	69fb      	ldr	r3, [r7, #28]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3720      	adds	r7, #32
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	899b      	ldrh	r3, [r3, #12]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	8952      	ldrh	r2, [r2, #10]
 800b1b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	1d1a      	adds	r2, r3, #4
 800b1c2:	613a      	str	r2, [r7, #16]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <clmt_clust+0x42>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e010      	b.n	800b1f4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d307      	bcc.n	800b1ea <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1e8:	e7e9      	b.n	800b1be <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b1ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	4413      	add	r3, r2
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b216:	d204      	bcs.n	800b222 <dir_sdi+0x22>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	f003 031f 	and.w	r3, r3, #31
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b222:	2302      	movs	r3, #2
 800b224:	e071      	b.n	800b30a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d106      	bne.n	800b246 <dir_sdi+0x46>
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d902      	bls.n	800b246 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10c      	bne.n	800b266 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	095b      	lsrs	r3, r3, #5
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	8912      	ldrh	r2, [r2, #8]
 800b254:	4293      	cmp	r3, r2
 800b256:	d301      	bcc.n	800b25c <dir_sdi+0x5c>
 800b258:	2302      	movs	r3, #2
 800b25a:	e056      	b.n	800b30a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	61da      	str	r2, [r3, #28]
 800b264:	e02d      	b.n	800b2c2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	895b      	ldrh	r3, [r3, #10]
 800b26a:	461a      	mov	r2, r3
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	899b      	ldrh	r3, [r3, #12]
 800b270:	fb03 f302 	mul.w	r3, r3, r2
 800b274:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b276:	e019      	b.n	800b2ac <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6979      	ldr	r1, [r7, #20]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff fc9a 	bl	800abb6 <get_fat>
 800b282:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28a:	d101      	bne.n	800b290 <dir_sdi+0x90>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e03c      	b.n	800b30a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d904      	bls.n	800b2a0 <dir_sdi+0xa0>
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d301      	bcc.n	800b2a4 <dir_sdi+0xa4>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e032      	b.n	800b30a <dir_sdi+0x10a>
			ofs -= csz;
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d2e1      	bcs.n	800b278 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b2b4:	6979      	ldr	r1, [r7, #20]
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f7ff fc5e 	bl	800ab78 <clust2sect>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <dir_sdi+0xd4>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	e01a      	b.n	800b30a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	69da      	ldr	r2, [r3, #28]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	899b      	ldrh	r3, [r3, #12]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2e4:	441a      	add	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	899b      	ldrh	r3, [r3, #12]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2fc:	fb02 f200 	mul.w	r2, r2, r0
 800b300:	1a9b      	subs	r3, r3, r2
 800b302:	18ca      	adds	r2, r1, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b086      	sub	sp, #24
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	3320      	adds	r3, #32
 800b328:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <dir_next+0x28>
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b338:	d301      	bcc.n	800b33e <dir_next+0x2c>
 800b33a:	2304      	movs	r3, #4
 800b33c:	e0bb      	b.n	800b4b6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	899b      	ldrh	r3, [r3, #12]
 800b342:	461a      	mov	r2, r3
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	fbb3 f1f2 	udiv	r1, r3, r2
 800b34a:	fb02 f201 	mul.w	r2, r2, r1
 800b34e:	1a9b      	subs	r3, r3, r2
 800b350:	2b00      	cmp	r3, #0
 800b352:	f040 809d 	bne.w	800b490 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10b      	bne.n	800b380 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	095b      	lsrs	r3, r3, #5
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	8912      	ldrh	r2, [r2, #8]
 800b370:	4293      	cmp	r3, r2
 800b372:	f0c0 808d 	bcc.w	800b490 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	61da      	str	r2, [r3, #28]
 800b37c:	2304      	movs	r3, #4
 800b37e:	e09a      	b.n	800b4b6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	899b      	ldrh	r3, [r3, #12]
 800b384:	461a      	mov	r2, r3
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	fbb3 f3f2 	udiv	r3, r3, r2
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	8952      	ldrh	r2, [r2, #10]
 800b390:	3a01      	subs	r2, #1
 800b392:	4013      	ands	r3, r2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d17b      	bne.n	800b490 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7ff fc08 	bl	800abb6 <get_fat>
 800b3a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d801      	bhi.n	800b3b2 <dir_next+0xa0>
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	e081      	b.n	800b4b6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d101      	bne.n	800b3be <dir_next+0xac>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e07b      	b.n	800b4b6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d359      	bcc.n	800b47c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d104      	bne.n	800b3d8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	61da      	str	r2, [r3, #28]
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	e06e      	b.n	800b4b6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	f7ff fe3d 	bl	800b060 <create_chain>
 800b3e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <dir_next+0xe0>
 800b3ee:	2307      	movs	r3, #7
 800b3f0:	e061      	b.n	800b4b6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d101      	bne.n	800b3fc <dir_next+0xea>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	e05c      	b.n	800b4b6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d101      	bne.n	800b408 <dir_next+0xf6>
 800b404:	2301      	movs	r3, #1
 800b406:	e056      	b.n	800b4b6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7ff fad3 	bl	800a9b4 <sync_window>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <dir_next+0x106>
 800b414:	2301      	movs	r3, #1
 800b416:	e04e      	b.n	800b4b6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	899b      	ldrh	r3, [r3, #12]
 800b422:	461a      	mov	r2, r3
 800b424:	2100      	movs	r1, #0
 800b426:	f7ff f8fc 	bl	800a622 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b42a:	2300      	movs	r3, #0
 800b42c:	613b      	str	r3, [r7, #16]
 800b42e:	6979      	ldr	r1, [r7, #20]
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7ff fba1 	bl	800ab78 <clust2sect>
 800b436:	4602      	mov	r2, r0
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	635a      	str	r2, [r3, #52]	; 0x34
 800b43c:	e012      	b.n	800b464 <dir_next+0x152>
						fs->wflag = 1;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2201      	movs	r2, #1
 800b442:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f7ff fab5 	bl	800a9b4 <sync_window>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <dir_next+0x142>
 800b450:	2301      	movs	r3, #1
 800b452:	e030      	b.n	800b4b6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3301      	adds	r3, #1
 800b458:	613b      	str	r3, [r7, #16]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	635a      	str	r2, [r3, #52]	; 0x34
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	895b      	ldrh	r3, [r3, #10]
 800b468:	461a      	mov	r2, r3
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d3e6      	bcc.n	800b43e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b482:	6979      	ldr	r1, [r7, #20]
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7ff fb77 	bl	800ab78 <clust2sect>
 800b48a:	4602      	mov	r2, r0
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	899b      	ldrh	r3, [r3, #12]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4a8:	fb02 f200 	mul.w	r2, r2, r0
 800b4ac:	1a9b      	subs	r3, r3, r2
 800b4ae:	18ca      	adds	r2, r1, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b086      	sub	sp, #24
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff fe95 	bl	800b200 <dir_sdi>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d12b      	bne.n	800b538 <dir_alloc+0x7a>
		n = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff faa6 	bl	800aa3c <move_window>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d11d      	bne.n	800b536 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	2be5      	cmp	r3, #229	; 0xe5
 800b502:	d004      	beq.n	800b50e <dir_alloc+0x50>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a1b      	ldr	r3, [r3, #32]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d107      	bne.n	800b51e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3301      	adds	r3, #1
 800b512:	613b      	str	r3, [r7, #16]
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d102      	bne.n	800b522 <dir_alloc+0x64>
 800b51c:	e00c      	b.n	800b538 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b51e:	2300      	movs	r3, #0
 800b520:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b522:	2101      	movs	r1, #1
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff fef4 	bl	800b312 <dir_next>
 800b52a:	4603      	mov	r3, r0
 800b52c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0d7      	beq.n	800b4e4 <dir_alloc+0x26>
 800b534:	e000      	b.n	800b538 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b536:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d101      	bne.n	800b542 <dir_alloc+0x84>
 800b53e:	2307      	movs	r3, #7
 800b540:	75fb      	strb	r3, [r7, #23]
	return res;
 800b542:	7dfb      	ldrb	r3, [r7, #23]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	331a      	adds	r3, #26
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe ffbe 	bl	800a4dc <ld_word>
 800b560:	4603      	mov	r3, r0
 800b562:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d109      	bne.n	800b580 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	3314      	adds	r3, #20
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe ffb3 	bl	800a4dc <ld_word>
 800b576:	4603      	mov	r3, r0
 800b578:	041b      	lsls	r3, r3, #16
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b580:	68fb      	ldr	r3, [r7, #12]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	331a      	adds	r3, #26
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	b292      	uxth	r2, r2
 800b59e:	4611      	mov	r1, r2
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe ffd6 	bl	800a552 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d109      	bne.n	800b5c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	f103 0214 	add.w	r2, r3, #20
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	0c1b      	lsrs	r3, r3, #16
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4610      	mov	r0, r2
 800b5be:	f7fe ffc8 	bl	800a552 <st_word>
	}
}
 800b5c2:	bf00      	nop
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
	...

0800b5cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b5cc:	b590      	push	{r4, r7, lr}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	331a      	adds	r3, #26
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe ff7e 	bl	800a4dc <ld_word>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <cmp_lfn+0x1e>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e059      	b.n	800b69e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5f2:	1e5a      	subs	r2, r3, #1
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b600:	2301      	movs	r3, #1
 800b602:	81fb      	strh	r3, [r7, #14]
 800b604:	2300      	movs	r3, #0
 800b606:	613b      	str	r3, [r7, #16]
 800b608:	e033      	b.n	800b672 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b60a:	4a27      	ldr	r2, [pc, #156]	; (800b6a8 <cmp_lfn+0xdc>)
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	4413      	add	r3, r2
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	4413      	add	r3, r2
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe ff5f 	bl	800a4dc <ld_word>
 800b61e:	4603      	mov	r3, r0
 800b620:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b622:	89fb      	ldrh	r3, [r7, #14]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01a      	beq.n	800b65e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	2bfe      	cmp	r3, #254	; 0xfe
 800b62c:	d812      	bhi.n	800b654 <cmp_lfn+0x88>
 800b62e:	89bb      	ldrh	r3, [r7, #12]
 800b630:	4618      	mov	r0, r3
 800b632:	f002 f8b5 	bl	800d7a0 <ff_wtoupper>
 800b636:	4603      	mov	r3, r0
 800b638:	461c      	mov	r4, r3
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	617a      	str	r2, [r7, #20]
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	4413      	add	r3, r2
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f002 f8a9 	bl	800d7a0 <ff_wtoupper>
 800b64e:	4603      	mov	r3, r0
 800b650:	429c      	cmp	r4, r3
 800b652:	d001      	beq.n	800b658 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b654:	2300      	movs	r3, #0
 800b656:	e022      	b.n	800b69e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b658:	89bb      	ldrh	r3, [r7, #12]
 800b65a:	81fb      	strh	r3, [r7, #14]
 800b65c:	e006      	b.n	800b66c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b65e:	89bb      	ldrh	r3, [r7, #12]
 800b660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b664:	4293      	cmp	r3, r2
 800b666:	d001      	beq.n	800b66c <cmp_lfn+0xa0>
 800b668:	2300      	movs	r3, #0
 800b66a:	e018      	b.n	800b69e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	3301      	adds	r3, #1
 800b670:	613b      	str	r3, [r7, #16]
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b0c      	cmp	r3, #12
 800b676:	d9c8      	bls.n	800b60a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <cmp_lfn+0xd0>
 800b684:	89fb      	ldrh	r3, [r7, #14]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <cmp_lfn+0xd0>
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	4413      	add	r3, r2
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <cmp_lfn+0xd0>
 800b698:	2300      	movs	r3, #0
 800b69a:	e000      	b.n	800b69e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b69c:	2301      	movs	r3, #1
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd90      	pop	{r4, r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	08010e68 	.word	0x08010e68

0800b6ac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	71fb      	strb	r3, [r7, #7]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	330d      	adds	r3, #13
 800b6c6:	79ba      	ldrb	r2, [r7, #6]
 800b6c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	330b      	adds	r3, #11
 800b6ce:	220f      	movs	r2, #15
 800b6d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	330c      	adds	r3, #12
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	331a      	adds	r3, #26
 800b6de:	2100      	movs	r1, #0
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe ff36 	bl	800a552 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	1e5a      	subs	r2, r3, #1
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	005b      	lsls	r3, r3, #1
 800b6ee:	4413      	add	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	82fb      	strh	r3, [r7, #22]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b6fe:	8afb      	ldrh	r3, [r7, #22]
 800b700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b704:	4293      	cmp	r3, r2
 800b706:	d007      	beq.n	800b718 <put_lfn+0x6c>
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	61fa      	str	r2, [r7, #28]
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b718:	4a17      	ldr	r2, [pc, #92]	; (800b778 <put_lfn+0xcc>)
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	4413      	add	r3, r2
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	461a      	mov	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	4413      	add	r3, r2
 800b726:	8afa      	ldrh	r2, [r7, #22]
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fe ff11 	bl	800a552 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b730:	8afb      	ldrh	r3, [r7, #22]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d102      	bne.n	800b73c <put_lfn+0x90>
 800b736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b73a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	3301      	adds	r3, #1
 800b740:	61bb      	str	r3, [r7, #24]
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b0c      	cmp	r3, #12
 800b746:	d9da      	bls.n	800b6fe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b748:	8afb      	ldrh	r3, [r7, #22]
 800b74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b74e:	4293      	cmp	r3, r2
 800b750:	d006      	beq.n	800b760 <put_lfn+0xb4>
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <put_lfn+0xbc>
 800b760:	79fb      	ldrb	r3, [r7, #7]
 800b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b766:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	79fa      	ldrb	r2, [r7, #7]
 800b76c:	701a      	strb	r2, [r3, #0]
}
 800b76e:	bf00      	nop
 800b770:	3720      	adds	r7, #32
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	08010e68 	.word	0x08010e68

0800b77c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08c      	sub	sp, #48	; 0x30
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b78a:	220b      	movs	r2, #11
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7fe ff26 	bl	800a5e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b05      	cmp	r3, #5
 800b798:	d929      	bls.n	800b7ee <gen_numname+0x72>
		sr = seq;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b79e:	e020      	b.n	800b7e2 <gen_numname+0x66>
			wc = *lfn++;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	1c9a      	adds	r2, r3, #2
 800b7a4:	607a      	str	r2, [r7, #4]
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7ae:	e015      	b.n	800b7dc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	005a      	lsls	r2, r3, #1
 800b7b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	4413      	add	r3, r2
 800b7bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b7be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7c0:	085b      	lsrs	r3, r3, #1
 800b7c2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <gen_numname+0x5a>
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	4b31      	ldr	r3, [pc, #196]	; (800b898 <gen_numname+0x11c>)
 800b7d2:	4053      	eors	r3, r2
 800b7d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	3301      	adds	r3, #1
 800b7da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	2b0f      	cmp	r3, #15
 800b7e0:	d9e6      	bls.n	800b7b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1da      	bne.n	800b7a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b7ee:	2307      	movs	r3, #7
 800b7f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	3330      	adds	r3, #48	; 0x30
 800b7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b806:	2b39      	cmp	r3, #57	; 0x39
 800b808:	d904      	bls.n	800b814 <gen_numname+0x98>
 800b80a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b80e:	3307      	adds	r3, #7
 800b810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	1e5a      	subs	r2, r3, #1
 800b818:	62ba      	str	r2, [r7, #40]	; 0x28
 800b81a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b81e:	4413      	add	r3, r2
 800b820:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b824:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	091b      	lsrs	r3, r3, #4
 800b82c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1de      	bne.n	800b7f2 <gen_numname+0x76>
	ns[i] = '~';
 800b834:	f107 0214 	add.w	r2, r7, #20
 800b838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83a:	4413      	add	r3, r2
 800b83c:	227e      	movs	r2, #126	; 0x7e
 800b83e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b840:	2300      	movs	r3, #0
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
 800b844:	e002      	b.n	800b84c <gen_numname+0xd0>
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	3301      	adds	r3, #1
 800b84a:	627b      	str	r3, [r7, #36]	; 0x24
 800b84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b850:	429a      	cmp	r2, r3
 800b852:	d205      	bcs.n	800b860 <gen_numname+0xe4>
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	4413      	add	r3, r2
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	d1f2      	bne.n	800b846 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	2b07      	cmp	r3, #7
 800b864:	d808      	bhi.n	800b878 <gen_numname+0xfc>
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b86c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b870:	4413      	add	r3, r2
 800b872:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b876:	e000      	b.n	800b87a <gen_numname+0xfe>
 800b878:	2120      	movs	r1, #32
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	1c5a      	adds	r2, r3, #1
 800b87e:	627a      	str	r2, [r7, #36]	; 0x24
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4413      	add	r3, r2
 800b884:	460a      	mov	r2, r1
 800b886:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88a:	2b07      	cmp	r3, #7
 800b88c:	d9e8      	bls.n	800b860 <gen_numname+0xe4>
}
 800b88e:	bf00      	nop
 800b890:	bf00      	nop
 800b892:	3730      	adds	r7, #48	; 0x30
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	00011021 	.word	0x00011021

0800b89c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b8a8:	230b      	movs	r3, #11
 800b8aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	0852      	lsrs	r2, r2, #1
 800b8b2:	01db      	lsls	r3, r3, #7
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	1c59      	adds	r1, r3, #1
 800b8bc:	6079      	str	r1, [r7, #4]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	60bb      	str	r3, [r7, #8]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1ed      	bne.n	800b8ac <sum_sfn+0x10>
	return sum;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b086      	sub	sp, #24
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff fc86 	bl	800b200 <dir_sdi>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <dir_find+0x24>
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	e0a9      	b.n	800ba56 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b902:	23ff      	movs	r3, #255	; 0xff
 800b904:	753b      	strb	r3, [r7, #20]
 800b906:	7d3b      	ldrb	r3, [r7, #20]
 800b908:	757b      	strb	r3, [r7, #21]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295
 800b910:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	4619      	mov	r1, r3
 800b918:	6938      	ldr	r0, [r7, #16]
 800b91a:	f7ff f88f 	bl	800aa3c <move_window>
 800b91e:	4603      	mov	r3, r0
 800b920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f040 8090 	bne.w	800ba4a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b932:	7dbb      	ldrb	r3, [r7, #22]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <dir_find+0x60>
 800b938:	2304      	movs	r3, #4
 800b93a:	75fb      	strb	r3, [r7, #23]
 800b93c:	e08a      	b.n	800ba54 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	330b      	adds	r3, #11
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b94a:	73fb      	strb	r3, [r7, #15]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7bfa      	ldrb	r2, [r7, #15]
 800b950:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b952:	7dbb      	ldrb	r3, [r7, #22]
 800b954:	2be5      	cmp	r3, #229	; 0xe5
 800b956:	d007      	beq.n	800b968 <dir_find+0x8a>
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	f003 0308 	and.w	r3, r3, #8
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d009      	beq.n	800b976 <dir_find+0x98>
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	2b0f      	cmp	r3, #15
 800b966:	d006      	beq.n	800b976 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b968:	23ff      	movs	r3, #255	; 0xff
 800b96a:	757b      	strb	r3, [r7, #21]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295
 800b972:	631a      	str	r2, [r3, #48]	; 0x30
 800b974:	e05e      	b.n	800ba34 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	2b0f      	cmp	r3, #15
 800b97a:	d136      	bne.n	800b9ea <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d154      	bne.n	800ba34 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b98a:	7dbb      	ldrb	r3, [r7, #22]
 800b98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00d      	beq.n	800b9b0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	7b5b      	ldrb	r3, [r3, #13]
 800b99a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b99c:	7dbb      	ldrb	r3, [r7, #22]
 800b99e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9a2:	75bb      	strb	r3, [r7, #22]
 800b9a4:	7dbb      	ldrb	r3, [r7, #22]
 800b9a6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	695a      	ldr	r2, [r3, #20]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9b0:	7dba      	ldrb	r2, [r7, #22]
 800b9b2:	7d7b      	ldrb	r3, [r7, #21]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d115      	bne.n	800b9e4 <dir_find+0x106>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	330d      	adds	r3, #13
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	7d3a      	ldrb	r2, [r7, #20]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d10e      	bne.n	800b9e4 <dir_find+0x106>
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	691a      	ldr	r2, [r3, #16]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7ff fdfb 	bl	800b5cc <cmp_lfn>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <dir_find+0x106>
 800b9dc:	7d7b      	ldrb	r3, [r7, #21]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	e000      	b.n	800b9e6 <dir_find+0x108>
 800b9e4:	23ff      	movs	r3, #255	; 0xff
 800b9e6:	757b      	strb	r3, [r7, #21]
 800b9e8:	e024      	b.n	800ba34 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b9ea:	7d7b      	ldrb	r3, [r7, #21]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d109      	bne.n	800ba04 <dir_find+0x126>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff ff51 	bl	800b89c <sum_sfn>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	7d3b      	ldrb	r3, [r7, #20]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d024      	beq.n	800ba4e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10a      	bne.n	800ba28 <dir_find+0x14a>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a18      	ldr	r0, [r3, #32]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3324      	adds	r3, #36	; 0x24
 800ba1a:	220b      	movs	r2, #11
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f7fe fe1b 	bl	800a658 <mem_cmp>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d014      	beq.n	800ba52 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba28:	23ff      	movs	r3, #255	; 0xff
 800ba2a:	757b      	strb	r3, [r7, #21]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba34:	2100      	movs	r1, #0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff fc6b 	bl	800b312 <dir_next>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f43f af65 	beq.w	800b912 <dir_find+0x34>
 800ba48:	e004      	b.n	800ba54 <dir_find+0x176>
		if (res != FR_OK) break;
 800ba4a:	bf00      	nop
 800ba4c:	e002      	b.n	800ba54 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba4e:	bf00      	nop
 800ba50:	e000      	b.n	800ba54 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba52:	bf00      	nop

	return res;
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08c      	sub	sp, #48	; 0x30
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba74:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <dir_register+0x20>
 800ba7c:	2306      	movs	r3, #6
 800ba7e:	e0e0      	b.n	800bc42 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ba80:	2300      	movs	r3, #0
 800ba82:	627b      	str	r3, [r7, #36]	; 0x24
 800ba84:	e002      	b.n	800ba8c <dir_register+0x2c>
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	3301      	adds	r3, #1
 800ba8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	691a      	ldr	r2, [r3, #16]
 800ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	4413      	add	r3, r2
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1f4      	bne.n	800ba86 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800baa2:	f107 030c 	add.w	r3, r7, #12
 800baa6:	220c      	movs	r2, #12
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fd99 	bl	800a5e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d032      	beq.n	800bb1e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2240      	movs	r2, #64	; 0x40
 800babc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bac0:	2301      	movs	r3, #1
 800bac2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bac4:	e016      	b.n	800baf4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	691a      	ldr	r2, [r3, #16]
 800bad0:	f107 010c 	add.w	r1, r7, #12
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	f7ff fe51 	bl	800b77c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff feff 	bl	800b8de <dir_find>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baea:	2b00      	cmp	r3, #0
 800baec:	d106      	bne.n	800bafc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf0:	3301      	adds	r3, #1
 800baf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	2b63      	cmp	r3, #99	; 0x63
 800baf8:	d9e5      	bls.n	800bac6 <dir_register+0x66>
 800bafa:	e000      	b.n	800bafe <dir_register+0x9e>
			if (res != FR_OK) break;
 800bafc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	2b64      	cmp	r3, #100	; 0x64
 800bb02:	d101      	bne.n	800bb08 <dir_register+0xa8>
 800bb04:	2307      	movs	r3, #7
 800bb06:	e09c      	b.n	800bc42 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bb08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d002      	beq.n	800bb16 <dir_register+0xb6>
 800bb10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb14:	e095      	b.n	800bc42 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bb16:	7dfa      	ldrb	r2, [r7, #23]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d007      	beq.n	800bb38 <dir_register+0xd8>
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	330c      	adds	r3, #12
 800bb2c:	4a47      	ldr	r2, [pc, #284]	; (800bc4c <dir_register+0x1ec>)
 800bb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb32:	089b      	lsrs	r3, r3, #2
 800bb34:	3301      	adds	r3, #1
 800bb36:	e000      	b.n	800bb3a <dir_register+0xda>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bb3c:	6a39      	ldr	r1, [r7, #32]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff fcbd 	bl	800b4be <dir_alloc>
 800bb44:	4603      	mov	r3, r0
 800bb46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bb4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d148      	bne.n	800bbe4 <dir_register+0x184>
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	623b      	str	r3, [r7, #32]
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d042      	beq.n	800bbe4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	695a      	ldr	r2, [r3, #20]
 800bb62:	6a3b      	ldr	r3, [r7, #32]
 800bb64:	015b      	lsls	r3, r3, #5
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fb48 	bl	800b200 <dir_sdi>
 800bb70:	4603      	mov	r3, r0
 800bb72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bb76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d132      	bne.n	800bbe4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	3324      	adds	r3, #36	; 0x24
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fe8a 	bl	800b89c <sum_sfn>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	4619      	mov	r1, r3
 800bb92:	69f8      	ldr	r0, [r7, #28]
 800bb94:	f7fe ff52 	bl	800aa3c <move_window>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bb9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d11d      	bne.n	800bbe2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	6918      	ldr	r0, [r3, #16]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a19      	ldr	r1, [r3, #32]
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	7efb      	ldrb	r3, [r7, #27]
 800bbb4:	f7ff fd7a 	bl	800b6ac <put_lfn>
				fs->wflag = 1;
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7ff fba6 	bl	800b312 <dir_next>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bbcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d107      	bne.n	800bbe4 <dir_register+0x184>
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	623b      	str	r3, [r7, #32]
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1d5      	bne.n	800bb8c <dir_register+0x12c>
 800bbe0:	e000      	b.n	800bbe4 <dir_register+0x184>
				if (res != FR_OK) break;
 800bbe2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bbe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d128      	bne.n	800bc3e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	69f8      	ldr	r0, [r7, #28]
 800bbf4:	f7fe ff22 	bl	800aa3c <move_window>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bbfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d11b      	bne.n	800bc3e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe fd07 	bl	800a622 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a18      	ldr	r0, [r3, #32]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	3324      	adds	r3, #36	; 0x24
 800bc1c:	220b      	movs	r2, #11
 800bc1e:	4619      	mov	r1, r3
 800bc20:	f7fe fcde 	bl	800a5e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	330c      	adds	r3, #12
 800bc30:	f002 0218 	and.w	r2, r2, #24
 800bc34:	b2d2      	uxtb	r2, r2
 800bc36:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3730      	adds	r7, #48	; 0x30
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	4ec4ec4f 	.word	0x4ec4ec4f

0800bc50 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2200      	movs	r2, #0
 800bc64:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f000 80c9 	beq.w	800be02 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc78:	d032      	beq.n	800bce0 <get_fileinfo+0x90>
			i = j = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bc82:	e01b      	b.n	800bcbc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bc84:	89fb      	ldrh	r3, [r7, #14]
 800bc86:	2100      	movs	r1, #0
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 fd4d 	bl	800d728 <ff_convert>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bc92:	89fb      	ldrh	r3, [r7, #14]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <get_fileinfo+0x4e>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e01a      	b.n	800bcd4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	2bfe      	cmp	r3, #254	; 0xfe
 800bca2:	d902      	bls.n	800bcaa <get_fileinfo+0x5a>
 800bca4:	2300      	movs	r3, #0
 800bca6:	61fb      	str	r3, [r7, #28]
 800bca8:	e014      	b.n	800bcd4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	61fa      	str	r2, [r7, #28]
 800bcb0:	89fa      	ldrh	r2, [r7, #14]
 800bcb2:	b2d1      	uxtb	r1, r2
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	460a      	mov	r2, r1
 800bcba:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	691a      	ldr	r2, [r3, #16]
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	1c59      	adds	r1, r3, #1
 800bcc4:	61b9      	str	r1, [r7, #24]
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	4413      	add	r3, r2
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	81fb      	strh	r3, [r7, #14]
 800bcce:	89fb      	ldrh	r3, [r7, #14]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1d7      	bne.n	800bc84 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	3316      	adds	r3, #22
 800bcdc:	2200      	movs	r2, #0
 800bcde:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	4413      	add	r3, r2
 800bcee:	3316      	adds	r3, #22
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800bcf4:	e04c      	b.n	800bd90 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a1a      	ldr	r2, [r3, #32]
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	1c59      	adds	r1, r3, #1
 800bcfe:	61f9      	str	r1, [r7, #28]
 800bd00:	4413      	add	r3, r2
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	2b20      	cmp	r3, #32
 800bd0a:	d100      	bne.n	800bd0e <get_fileinfo+0xbe>
 800bd0c:	e040      	b.n	800bd90 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	2b05      	cmp	r3, #5
 800bd12:	d101      	bne.n	800bd18 <get_fileinfo+0xc8>
 800bd14:	23e5      	movs	r3, #229	; 0xe5
 800bd16:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d10f      	bne.n	800bd3e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800bd1e:	89bb      	ldrh	r3, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d105      	bne.n	800bd30 <get_fileinfo+0xe0>
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	4413      	add	r3, r2
 800bd2a:	3316      	adds	r3, #22
 800bd2c:	222e      	movs	r2, #46	; 0x2e
 800bd2e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	61ba      	str	r2, [r7, #24]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4413      	add	r3, r2
 800bd3a:	222e      	movs	r2, #46	; 0x2e
 800bd3c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800bd3e:	683a      	ldr	r2, [r7, #0]
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	4413      	add	r3, r2
 800bd44:	3309      	adds	r3, #9
 800bd46:	7dfa      	ldrb	r2, [r7, #23]
 800bd48:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800bd4a:	89bb      	ldrh	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11c      	bne.n	800bd8a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800bd50:	7dfb      	ldrb	r3, [r7, #23]
 800bd52:	2b40      	cmp	r3, #64	; 0x40
 800bd54:	d913      	bls.n	800bd7e <get_fileinfo+0x12e>
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	2b5a      	cmp	r3, #90	; 0x5a
 800bd5a:	d810      	bhi.n	800bd7e <get_fileinfo+0x12e>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a1b      	ldr	r3, [r3, #32]
 800bd60:	330c      	adds	r3, #12
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	2b08      	cmp	r3, #8
 800bd6a:	d901      	bls.n	800bd70 <get_fileinfo+0x120>
 800bd6c:	2310      	movs	r3, #16
 800bd6e:	e000      	b.n	800bd72 <get_fileinfo+0x122>
 800bd70:	2308      	movs	r3, #8
 800bd72:	4013      	ands	r3, r2
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	3320      	adds	r3, #32
 800bd7c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	4413      	add	r3, r2
 800bd84:	3316      	adds	r3, #22
 800bd86:	7dfa      	ldrb	r2, [r7, #23]
 800bd88:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	2b0a      	cmp	r3, #10
 800bd94:	d9af      	bls.n	800bcf6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800bd96:	89bb      	ldrh	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10d      	bne.n	800bdb8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	4413      	add	r3, r2
 800bda2:	3316      	adds	r3, #22
 800bda4:	2200      	movs	r2, #0
 800bda6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	330c      	adds	r3, #12
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <get_fileinfo+0x168>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	3309      	adds	r3, #9
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	7ada      	ldrb	r2, [r3, #11]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a1b      	ldr	r3, [r3, #32]
 800bdd2:	331c      	adds	r3, #28
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fb99 	bl	800a50c <ld_dword>
 800bdda:	4602      	mov	r2, r0
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a1b      	ldr	r3, [r3, #32]
 800bde4:	3316      	adds	r3, #22
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fb90 	bl	800a50c <ld_dword>
 800bdec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	80da      	strh	r2, [r3, #6]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	0c1b      	lsrs	r3, r3, #16
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	809a      	strh	r2, [r3, #4]
 800be00:	e000      	b.n	800be04 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800be02:	bf00      	nop
}
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b08a      	sub	sp, #40	; 0x28
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	613b      	str	r3, [r7, #16]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	2300      	movs	r3, #0
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	61ba      	str	r2, [r7, #24]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	4413      	add	r3, r2
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800be3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be3c:	2b1f      	cmp	r3, #31
 800be3e:	d940      	bls.n	800bec2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800be40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be42:	2b2f      	cmp	r3, #47	; 0x2f
 800be44:	d006      	beq.n	800be54 <create_name+0x48>
 800be46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be48:	2b5c      	cmp	r3, #92	; 0x5c
 800be4a:	d110      	bne.n	800be6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be4c:	e002      	b.n	800be54 <create_name+0x48>
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	3301      	adds	r3, #1
 800be52:	61bb      	str	r3, [r7, #24]
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	4413      	add	r3, r2
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b2f      	cmp	r3, #47	; 0x2f
 800be5e:	d0f6      	beq.n	800be4e <create_name+0x42>
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b5c      	cmp	r3, #92	; 0x5c
 800be6a:	d0f0      	beq.n	800be4e <create_name+0x42>
			break;
 800be6c:	e02a      	b.n	800bec4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2bfe      	cmp	r3, #254	; 0xfe
 800be72:	d901      	bls.n	800be78 <create_name+0x6c>
 800be74:	2306      	movs	r3, #6
 800be76:	e177      	b.n	800c168 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800be78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800be7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be80:	2101      	movs	r1, #1
 800be82:	4618      	mov	r0, r3
 800be84:	f001 fc50 	bl	800d728 <ff_convert>
 800be88:	4603      	mov	r3, r0
 800be8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800be8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <create_name+0x8a>
 800be92:	2306      	movs	r3, #6
 800be94:	e168      	b.n	800c168 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800be96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be98:	2b7f      	cmp	r3, #127	; 0x7f
 800be9a:	d809      	bhi.n	800beb0 <create_name+0xa4>
 800be9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be9e:	4619      	mov	r1, r3
 800bea0:	48b3      	ldr	r0, [pc, #716]	; (800c170 <create_name+0x364>)
 800bea2:	f7fe fc00 	bl	800a6a6 <chk_chr>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <create_name+0xa4>
 800beac:	2306      	movs	r3, #6
 800beae:	e15b      	b.n	800c168 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	617a      	str	r2, [r7, #20]
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bebe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bec0:	e7b4      	b.n	800be2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bec2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	441a      	add	r2, r3
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bed0:	2b1f      	cmp	r3, #31
 800bed2:	d801      	bhi.n	800bed8 <create_name+0xcc>
 800bed4:	2304      	movs	r3, #4
 800bed6:	e000      	b.n	800beda <create_name+0xce>
 800bed8:	2300      	movs	r3, #0
 800beda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bede:	e011      	b.n	800bf04 <create_name+0xf8>
		w = lfn[di - 1];
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bee6:	4413      	add	r3, r2
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4413      	add	r3, r2
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bef4:	2b20      	cmp	r3, #32
 800bef6:	d002      	beq.n	800befe <create_name+0xf2>
 800bef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befa:	2b2e      	cmp	r3, #46	; 0x2e
 800befc:	d106      	bne.n	800bf0c <create_name+0x100>
		di--;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1ea      	bne.n	800bee0 <create_name+0xd4>
 800bf0a:	e000      	b.n	800bf0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bf0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	4413      	add	r3, r2
 800bf16:	2200      	movs	r2, #0
 800bf18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <create_name+0x118>
 800bf20:	2306      	movs	r3, #6
 800bf22:	e121      	b.n	800c168 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3324      	adds	r3, #36	; 0x24
 800bf28:	220b      	movs	r2, #11
 800bf2a:	2120      	movs	r1, #32
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe fb78 	bl	800a622 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bf32:	2300      	movs	r3, #0
 800bf34:	61bb      	str	r3, [r7, #24]
 800bf36:	e002      	b.n	800bf3e <create_name+0x132>
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	4413      	add	r3, r2
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	2b20      	cmp	r3, #32
 800bf4a:	d0f5      	beq.n	800bf38 <create_name+0x12c>
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	4413      	add	r3, r2
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	2b2e      	cmp	r3, #46	; 0x2e
 800bf58:	d0ee      	beq.n	800bf38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <create_name+0x168>
 800bf60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf64:	f043 0303 	orr.w	r3, r3, #3
 800bf68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bf6c:	e002      	b.n	800bf74 <create_name+0x168>
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d009      	beq.n	800bf8e <create_name+0x182>
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bf80:	4413      	add	r3, r2
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	4413      	add	r3, r2
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf8c:	d1ef      	bne.n	800bf6e <create_name+0x162>

	i = b = 0; ni = 8;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf94:	2300      	movs	r3, #0
 800bf96:	623b      	str	r3, [r7, #32]
 800bf98:	2308      	movs	r3, #8
 800bf9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	61ba      	str	r2, [r7, #24]
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	881b      	ldrh	r3, [r3, #0]
 800bfaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bfac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 8090 	beq.w	800c0d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bfb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb6:	2b20      	cmp	r3, #32
 800bfb8:	d006      	beq.n	800bfc8 <create_name+0x1bc>
 800bfba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bfbe:	d10a      	bne.n	800bfd6 <create_name+0x1ca>
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d006      	beq.n	800bfd6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfcc:	f043 0303 	orr.w	r3, r3, #3
 800bfd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfd4:	e07d      	b.n	800c0d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bfd6:	6a3a      	ldr	r2, [r7, #32]
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d203      	bcs.n	800bfe6 <create_name+0x1da>
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d123      	bne.n	800c02e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	2b0b      	cmp	r3, #11
 800bfea:	d106      	bne.n	800bffa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bfec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bff0:	f043 0303 	orr.w	r3, r3, #3
 800bff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bff8:	e06f      	b.n	800c0da <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bffa:	69ba      	ldr	r2, [r7, #24]
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d005      	beq.n	800c00e <create_name+0x202>
 800c002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c006:	f043 0303 	orr.w	r3, r3, #3
 800c00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	429a      	cmp	r2, r3
 800c014:	d860      	bhi.n	800c0d8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	61bb      	str	r3, [r7, #24]
 800c01a:	2308      	movs	r3, #8
 800c01c:	623b      	str	r3, [r7, #32]
 800c01e:	230b      	movs	r3, #11
 800c020:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c02c:	e051      	b.n	800c0d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c02e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c030:	2b7f      	cmp	r3, #127	; 0x7f
 800c032:	d914      	bls.n	800c05e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f001 fb75 	bl	800d728 <ff_convert>
 800c03e:	4603      	mov	r3, r0
 800c040:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c044:	2b00      	cmp	r3, #0
 800c046:	d004      	beq.n	800c052 <create_name+0x246>
 800c048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c04a:	3b80      	subs	r3, #128	; 0x80
 800c04c:	4a49      	ldr	r2, [pc, #292]	; (800c174 <create_name+0x368>)
 800c04e:	5cd3      	ldrb	r3, [r2, r3]
 800c050:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c056:	f043 0302 	orr.w	r3, r3, #2
 800c05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c05e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d007      	beq.n	800c074 <create_name+0x268>
 800c064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c066:	4619      	mov	r1, r3
 800c068:	4843      	ldr	r0, [pc, #268]	; (800c178 <create_name+0x36c>)
 800c06a:	f7fe fb1c 	bl	800a6a6 <chk_chr>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d008      	beq.n	800c086 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c074:	235f      	movs	r3, #95	; 0x5f
 800c076:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c07c:	f043 0303 	orr.w	r3, r3, #3
 800c080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c084:	e01b      	b.n	800c0be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c088:	2b40      	cmp	r3, #64	; 0x40
 800c08a:	d909      	bls.n	800c0a0 <create_name+0x294>
 800c08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c08e:	2b5a      	cmp	r3, #90	; 0x5a
 800c090:	d806      	bhi.n	800c0a0 <create_name+0x294>
					b |= 2;
 800c092:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c096:	f043 0302 	orr.w	r3, r3, #2
 800c09a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c09e:	e00e      	b.n	800c0be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c0a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0a2:	2b60      	cmp	r3, #96	; 0x60
 800c0a4:	d90b      	bls.n	800c0be <create_name+0x2b2>
 800c0a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0a8:	2b7a      	cmp	r3, #122	; 0x7a
 800c0aa:	d808      	bhi.n	800c0be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c0ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0b0:	f043 0301 	orr.w	r3, r3, #1
 800c0b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ba:	3b20      	subs	r3, #32
 800c0bc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	623a      	str	r2, [r7, #32]
 800c0c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0c6:	b2d1      	uxtb	r1, r2
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	460a      	mov	r2, r1
 800c0ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c0d2:	e763      	b.n	800bf9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c0d4:	bf00      	nop
 800c0d6:	e000      	b.n	800c0da <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c0d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c0e0:	2be5      	cmp	r3, #229	; 0xe5
 800c0e2:	d103      	bne.n	800c0ec <create_name+0x2e0>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2205      	movs	r2, #5
 800c0e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	2b08      	cmp	r3, #8
 800c0f0:	d104      	bne.n	800c0fc <create_name+0x2f0>
 800c0f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c0fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c100:	f003 030c 	and.w	r3, r3, #12
 800c104:	2b0c      	cmp	r3, #12
 800c106:	d005      	beq.n	800c114 <create_name+0x308>
 800c108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c10c:	f003 0303 	and.w	r3, r3, #3
 800c110:	2b03      	cmp	r3, #3
 800c112:	d105      	bne.n	800c120 <create_name+0x314>
 800c114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c118:	f043 0302 	orr.w	r3, r3, #2
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d117      	bne.n	800c15c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c12c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c130:	f003 0303 	and.w	r3, r3, #3
 800c134:	2b01      	cmp	r3, #1
 800c136:	d105      	bne.n	800c144 <create_name+0x338>
 800c138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13c:	f043 0310 	orr.w	r3, r3, #16
 800c140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c148:	f003 030c 	and.w	r3, r3, #12
 800c14c:	2b04      	cmp	r3, #4
 800c14e:	d105      	bne.n	800c15c <create_name+0x350>
 800c150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c154:	f043 0308 	orr.w	r3, r3, #8
 800c158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c162:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c166:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3728      	adds	r7, #40	; 0x28
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	08010d44 	.word	0x08010d44
 800c174:	08010de8 	.word	0x08010de8
 800c178:	08010d50 	.word	0x08010d50

0800c17c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c190:	e002      	b.n	800c198 <follow_path+0x1c>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	3301      	adds	r3, #1
 800c196:	603b      	str	r3, [r7, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b2f      	cmp	r3, #47	; 0x2f
 800c19e:	d0f8      	beq.n	800c192 <follow_path+0x16>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b5c      	cmp	r3, #92	; 0x5c
 800c1a6:	d0f4      	beq.n	800c192 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b1f      	cmp	r3, #31
 800c1b4:	d80a      	bhi.n	800c1cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2280      	movs	r2, #128	; 0x80
 800c1ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c1be:	2100      	movs	r1, #0
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7ff f81d 	bl	800b200 <dir_sdi>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	75fb      	strb	r3, [r7, #23]
 800c1ca:	e048      	b.n	800c25e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff fe1b 	bl	800be0c <create_name>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d139      	bne.n	800c254 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff fb7c 	bl	800b8de <dir_find>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00a      	beq.n	800c20e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b04      	cmp	r3, #4
 800c1fc:	d12c      	bne.n	800c258 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c1fe:	7afb      	ldrb	r3, [r7, #11]
 800c200:	f003 0304 	and.w	r3, r3, #4
 800c204:	2b00      	cmp	r3, #0
 800c206:	d127      	bne.n	800c258 <follow_path+0xdc>
 800c208:	2305      	movs	r3, #5
 800c20a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c20c:	e024      	b.n	800c258 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c20e:	7afb      	ldrb	r3, [r7, #11]
 800c210:	f003 0304 	and.w	r3, r3, #4
 800c214:	2b00      	cmp	r3, #0
 800c216:	d121      	bne.n	800c25c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	799b      	ldrb	r3, [r3, #6]
 800c21c:	f003 0310 	and.w	r3, r3, #16
 800c220:	2b00      	cmp	r3, #0
 800c222:	d102      	bne.n	800c22a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c224:	2305      	movs	r3, #5
 800c226:	75fb      	strb	r3, [r7, #23]
 800c228:	e019      	b.n	800c25e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	8992      	ldrh	r2, [r2, #12]
 800c238:	fbb3 f0f2 	udiv	r0, r3, r2
 800c23c:	fb02 f200 	mul.w	r2, r2, r0
 800c240:	1a9b      	subs	r3, r3, r2
 800c242:	440b      	add	r3, r1
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff f980 	bl	800b54c <ld_clust>
 800c24c:	4602      	mov	r2, r0
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c252:	e7bb      	b.n	800c1cc <follow_path+0x50>
			if (res != FR_OK) break;
 800c254:	bf00      	nop
 800c256:	e002      	b.n	800c25e <follow_path+0xe2>
				break;
 800c258:	bf00      	nop
 800c25a:	e000      	b.n	800c25e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c25c:	bf00      	nop
			}
		}
	}

	return res;
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c270:	f04f 33ff 	mov.w	r3, #4294967295
 800c274:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d031      	beq.n	800c2e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	617b      	str	r3, [r7, #20]
 800c284:	e002      	b.n	800c28c <get_ldnumber+0x24>
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	3301      	adds	r3, #1
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b1f      	cmp	r3, #31
 800c292:	d903      	bls.n	800c29c <get_ldnumber+0x34>
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b3a      	cmp	r3, #58	; 0x3a
 800c29a:	d1f4      	bne.n	800c286 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b3a      	cmp	r3, #58	; 0x3a
 800c2a2:	d11c      	bne.n	800c2de <get_ldnumber+0x76>
			tp = *path;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	60fa      	str	r2, [r7, #12]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	3b30      	subs	r3, #48	; 0x30
 800c2b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b09      	cmp	r3, #9
 800c2ba:	d80e      	bhi.n	800c2da <get_ldnumber+0x72>
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d10a      	bne.n	800c2da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d107      	bne.n	800c2da <get_ldnumber+0x72>
					vol = (int)i;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	e002      	b.n	800c2e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c2de:	2300      	movs	r3, #0
 800c2e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c2e2:	693b      	ldr	r3, [r7, #16]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	70da      	strb	r2, [r3, #3]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f04f 32ff 	mov.w	r2, #4294967295
 800c306:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7fe fb96 	bl	800aa3c <move_window>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d001      	beq.n	800c31a <check_fs+0x2a>
 800c316:	2304      	movs	r3, #4
 800c318:	e038      	b.n	800c38c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	3338      	adds	r3, #56	; 0x38
 800c31e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe f8da 	bl	800a4dc <ld_word>
 800c328:	4603      	mov	r3, r0
 800c32a:	461a      	mov	r2, r3
 800c32c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c330:	429a      	cmp	r2, r3
 800c332:	d001      	beq.n	800c338 <check_fs+0x48>
 800c334:	2303      	movs	r3, #3
 800c336:	e029      	b.n	800c38c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c33e:	2be9      	cmp	r3, #233	; 0xe9
 800c340:	d009      	beq.n	800c356 <check_fs+0x66>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c348:	2beb      	cmp	r3, #235	; 0xeb
 800c34a:	d11e      	bne.n	800c38a <check_fs+0x9a>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c352:	2b90      	cmp	r3, #144	; 0x90
 800c354:	d119      	bne.n	800c38a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3338      	adds	r3, #56	; 0x38
 800c35a:	3336      	adds	r3, #54	; 0x36
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe f8d5 	bl	800a50c <ld_dword>
 800c362:	4603      	mov	r3, r0
 800c364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c368:	4a0a      	ldr	r2, [pc, #40]	; (800c394 <check_fs+0xa4>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d101      	bne.n	800c372 <check_fs+0x82>
 800c36e:	2300      	movs	r3, #0
 800c370:	e00c      	b.n	800c38c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	3338      	adds	r3, #56	; 0x38
 800c376:	3352      	adds	r3, #82	; 0x52
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fe f8c7 	bl	800a50c <ld_dword>
 800c37e:	4603      	mov	r3, r0
 800c380:	4a05      	ldr	r2, [pc, #20]	; (800c398 <check_fs+0xa8>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d101      	bne.n	800c38a <check_fs+0x9a>
 800c386:	2300      	movs	r3, #0
 800c388:	e000      	b.n	800c38c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c38a:	2302      	movs	r3, #2
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	00544146 	.word	0x00544146
 800c398:	33544146 	.word	0x33544146

0800c39c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b096      	sub	sp, #88	; 0x58
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff ff59 	bl	800c268 <get_ldnumber>
 800c3b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da01      	bge.n	800c3c2 <find_volume+0x26>
 800c3be:	230b      	movs	r3, #11
 800c3c0:	e268      	b.n	800c894 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c3c2:	4ab0      	ldr	r2, [pc, #704]	; (800c684 <find_volume+0x2e8>)
 800c3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <find_volume+0x3a>
 800c3d2:	230c      	movs	r3, #12
 800c3d4:	e25e      	b.n	800c894 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	f023 0301 	bic.w	r3, r3, #1
 800c3e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d01a      	beq.n	800c422 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	785b      	ldrb	r3, [r3, #1]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd ffd5 	bl	800a3a0 <disk_status>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c3fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10c      	bne.n	800c422 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c408:	79fb      	ldrb	r3, [r7, #7]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <find_volume+0x82>
 800c40e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c412:	f003 0304 	and.w	r3, r3, #4
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c41a:	230a      	movs	r3, #10
 800c41c:	e23a      	b.n	800c894 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800c41e:	2300      	movs	r3, #0
 800c420:	e238      	b.n	800c894 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	2200      	movs	r2, #0
 800c426:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	785b      	ldrb	r3, [r3, #1]
 800c434:	4618      	mov	r0, r3
 800c436:	f7fd ffcd 	bl	800a3d4 <disk_initialize>
 800c43a:	4603      	mov	r3, r0
 800c43c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c444:	f003 0301 	and.w	r3, r3, #1
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c44c:	2303      	movs	r3, #3
 800c44e:	e221      	b.n	800c894 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c450:	79fb      	ldrb	r3, [r7, #7]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <find_volume+0xca>
 800c456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c45a:	f003 0304 	and.w	r3, r3, #4
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c462:	230a      	movs	r3, #10
 800c464:	e216      	b.n	800c894 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c468:	7858      	ldrb	r0, [r3, #1]
 800c46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46c:	330c      	adds	r3, #12
 800c46e:	461a      	mov	r2, r3
 800c470:	2102      	movs	r1, #2
 800c472:	f7fe f815 	bl	800a4a0 <disk_ioctl>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <find_volume+0xe4>
 800c47c:	2301      	movs	r3, #1
 800c47e:	e209      	b.n	800c894 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	899b      	ldrh	r3, [r3, #12]
 800c484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c488:	d80d      	bhi.n	800c4a6 <find_volume+0x10a>
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	899b      	ldrh	r3, [r3, #12]
 800c48e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c492:	d308      	bcc.n	800c4a6 <find_volume+0x10a>
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	899b      	ldrh	r3, [r3, #12]
 800c498:	461a      	mov	r2, r3
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	899b      	ldrh	r3, [r3, #12]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <find_volume+0x10e>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e1f4      	b.n	800c894 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c4ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4b2:	f7ff ff1d 	bl	800c2f0 <check_fs>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d14b      	bne.n	800c55c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c4c8:	e01f      	b.n	800c50a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4d2:	011b      	lsls	r3, r3, #4
 800c4d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c4d8:	4413      	add	r3, r2
 800c4da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	3304      	adds	r3, #4
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <find_volume+0x158>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe f80e 	bl	800a50c <ld_dword>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	e000      	b.n	800c4f6 <find_volume+0x15a>
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c4fe:	440b      	add	r3, r1
 800c500:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c506:	3301      	adds	r3, #1
 800c508:	643b      	str	r3, [r7, #64]	; 0x40
 800c50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d9dc      	bls.n	800c4ca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c510:	2300      	movs	r3, #0
 800c512:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <find_volume+0x184>
 800c51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51c:	3b01      	subs	r3, #1
 800c51e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c528:	4413      	add	r3, r2
 800c52a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c52e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <find_volume+0x1a6>
 800c536:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c53a:	f7ff fed9 	bl	800c2f0 <check_fs>
 800c53e:	4603      	mov	r3, r0
 800c540:	e000      	b.n	800c544 <find_volume+0x1a8>
 800c542:	2303      	movs	r3, #3
 800c544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d905      	bls.n	800c55c <find_volume+0x1c0>
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	3301      	adds	r3, #1
 800c554:	643b      	str	r3, [r7, #64]	; 0x40
 800c556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d9e1      	bls.n	800c520 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c55c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c560:	2b04      	cmp	r3, #4
 800c562:	d101      	bne.n	800c568 <find_volume+0x1cc>
 800c564:	2301      	movs	r3, #1
 800c566:	e195      	b.n	800c894 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d901      	bls.n	800c574 <find_volume+0x1d8>
 800c570:	230d      	movs	r3, #13
 800c572:	e18f      	b.n	800c894 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c576:	3338      	adds	r3, #56	; 0x38
 800c578:	330b      	adds	r3, #11
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fd ffae 	bl	800a4dc <ld_word>
 800c580:	4603      	mov	r3, r0
 800c582:	461a      	mov	r2, r3
 800c584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c586:	899b      	ldrh	r3, [r3, #12]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d001      	beq.n	800c590 <find_volume+0x1f4>
 800c58c:	230d      	movs	r3, #13
 800c58e:	e181      	b.n	800c894 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	3338      	adds	r3, #56	; 0x38
 800c594:	3316      	adds	r3, #22
 800c596:	4618      	mov	r0, r3
 800c598:	f7fd ffa0 	bl	800a4dc <ld_word>
 800c59c:	4603      	mov	r3, r0
 800c59e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c5a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <find_volume+0x218>
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	3338      	adds	r3, #56	; 0x38
 800c5aa:	3324      	adds	r3, #36	; 0x24
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd ffad 	bl	800a50c <ld_dword>
 800c5b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5b8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	789b      	ldrb	r3, [r3, #2]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d005      	beq.n	800c5d8 <find_volume+0x23c>
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	789b      	ldrb	r3, [r3, #2]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d001      	beq.n	800c5d8 <find_volume+0x23c>
 800c5d4:	230d      	movs	r3, #13
 800c5d6:	e15d      	b.n	800c894 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	789b      	ldrb	r3, [r3, #2]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e0:	fb02 f303 	mul.w	r3, r2, r3
 800c5e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	895b      	ldrh	r3, [r3, #10]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d008      	beq.n	800c60c <find_volume+0x270>
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fc:	895b      	ldrh	r3, [r3, #10]
 800c5fe:	461a      	mov	r2, r3
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	895b      	ldrh	r3, [r3, #10]
 800c604:	3b01      	subs	r3, #1
 800c606:	4013      	ands	r3, r2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <find_volume+0x274>
 800c60c:	230d      	movs	r3, #13
 800c60e:	e141      	b.n	800c894 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	3338      	adds	r3, #56	; 0x38
 800c614:	3311      	adds	r3, #17
 800c616:	4618      	mov	r0, r3
 800c618:	f7fd ff60 	bl	800a4dc <ld_word>
 800c61c:	4603      	mov	r3, r0
 800c61e:	461a      	mov	r2, r3
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	891b      	ldrh	r3, [r3, #8]
 800c628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c62a:	8992      	ldrh	r2, [r2, #12]
 800c62c:	0952      	lsrs	r2, r2, #5
 800c62e:	b292      	uxth	r2, r2
 800c630:	fbb3 f1f2 	udiv	r1, r3, r2
 800c634:	fb02 f201 	mul.w	r2, r2, r1
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <find_volume+0x2a8>
 800c640:	230d      	movs	r3, #13
 800c642:	e127      	b.n	800c894 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	3338      	adds	r3, #56	; 0x38
 800c648:	3313      	adds	r3, #19
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd ff46 	bl	800a4dc <ld_word>
 800c650:	4603      	mov	r3, r0
 800c652:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <find_volume+0x2cc>
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	3338      	adds	r3, #56	; 0x38
 800c65e:	3320      	adds	r3, #32
 800c660:	4618      	mov	r0, r3
 800c662:	f7fd ff53 	bl	800a50c <ld_dword>
 800c666:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	3338      	adds	r3, #56	; 0x38
 800c66c:	330e      	adds	r3, #14
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fd ff34 	bl	800a4dc <ld_word>
 800c674:	4603      	mov	r3, r0
 800c676:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d104      	bne.n	800c688 <find_volume+0x2ec>
 800c67e:	230d      	movs	r3, #13
 800c680:	e108      	b.n	800c894 <find_volume+0x4f8>
 800c682:	bf00      	nop
 800c684:	2400126c 	.word	0x2400126c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c688:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c68c:	4413      	add	r3, r2
 800c68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c690:	8911      	ldrh	r1, [r2, #8]
 800c692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c694:	8992      	ldrh	r2, [r2, #12]
 800c696:	0952      	lsrs	r2, r2, #5
 800c698:	b292      	uxth	r2, r2
 800c69a:	fbb1 f2f2 	udiv	r2, r1, r2
 800c69e:	b292      	uxth	r2, r2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c6a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d201      	bcs.n	800c6b0 <find_volume+0x314>
 800c6ac:	230d      	movs	r3, #13
 800c6ae:	e0f1      	b.n	800c894 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c6b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b8:	8952      	ldrh	r2, [r2, #10]
 800c6ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <find_volume+0x32e>
 800c6c6:	230d      	movs	r3, #13
 800c6c8:	e0e4      	b.n	800c894 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d802      	bhi.n	800c6e0 <find_volume+0x344>
 800c6da:	2302      	movs	r3, #2
 800c6dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d802      	bhi.n	800c6f0 <find_volume+0x354>
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	1c9a      	adds	r2, r3, #2
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6fc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c6fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c702:	441a      	add	r2, r3
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	441a      	add	r2, r3
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c716:	2b03      	cmp	r3, #3
 800c718:	d11e      	bne.n	800c758 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	3338      	adds	r3, #56	; 0x38
 800c71e:	332a      	adds	r3, #42	; 0x2a
 800c720:	4618      	mov	r0, r3
 800c722:	f7fd fedb 	bl	800a4dc <ld_word>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <find_volume+0x394>
 800c72c:	230d      	movs	r3, #13
 800c72e:	e0b1      	b.n	800c894 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	891b      	ldrh	r3, [r3, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <find_volume+0x3a0>
 800c738:	230d      	movs	r3, #13
 800c73a:	e0ab      	b.n	800c894 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	3338      	adds	r3, #56	; 0x38
 800c740:	332c      	adds	r3, #44	; 0x2c
 800c742:	4618      	mov	r0, r3
 800c744:	f7fd fee2 	bl	800a50c <ld_dword>
 800c748:	4602      	mov	r2, r0
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c750:	69db      	ldr	r3, [r3, #28]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	647b      	str	r3, [r7, #68]	; 0x44
 800c756:	e01f      	b.n	800c798 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	891b      	ldrh	r3, [r3, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <find_volume+0x3c8>
 800c760:	230d      	movs	r3, #13
 800c762:	e097      	b.n	800c894 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c76a:	441a      	add	r2, r3
 800c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c774:	2b02      	cmp	r3, #2
 800c776:	d103      	bne.n	800c780 <find_volume+0x3e4>
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	69db      	ldr	r3, [r3, #28]
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	e00a      	b.n	800c796 <find_volume+0x3fa>
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	69da      	ldr	r2, [r3, #28]
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	085a      	lsrs	r2, r3, #1
 800c78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c796:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	6a1a      	ldr	r2, [r3, #32]
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	899b      	ldrh	r3, [r3, #12]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7a4:	440b      	add	r3, r1
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7aa:	8989      	ldrh	r1, [r1, #12]
 800c7ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d201      	bcs.n	800c7b8 <find_volume+0x41c>
 800c7b4:	230d      	movs	r3, #13
 800c7b6:	e06d      	b.n	800c894 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c7be:	619a      	str	r2, [r3, #24]
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	699a      	ldr	r2, [r3, #24]
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	2280      	movs	r2, #128	; 0x80
 800c7cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c7ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d149      	bne.n	800c86a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	3338      	adds	r3, #56	; 0x38
 800c7da:	3330      	adds	r3, #48	; 0x30
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fd fe7d 	bl	800a4dc <ld_word>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d140      	bne.n	800c86a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7f0:	f7fe f924 	bl	800aa3c <move_window>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d137      	bne.n	800c86a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	3338      	adds	r3, #56	; 0x38
 800c804:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd fe67 	bl	800a4dc <ld_word>
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c816:	429a      	cmp	r2, r3
 800c818:	d127      	bne.n	800c86a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	3338      	adds	r3, #56	; 0x38
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fd fe74 	bl	800a50c <ld_dword>
 800c824:	4603      	mov	r3, r0
 800c826:	4a1d      	ldr	r2, [pc, #116]	; (800c89c <find_volume+0x500>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d11e      	bne.n	800c86a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	3338      	adds	r3, #56	; 0x38
 800c830:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd fe69 	bl	800a50c <ld_dword>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4a18      	ldr	r2, [pc, #96]	; (800c8a0 <find_volume+0x504>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d113      	bne.n	800c86a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	3338      	adds	r3, #56	; 0x38
 800c846:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fd fe5e 	bl	800a50c <ld_dword>
 800c850:	4602      	mov	r2, r0
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	3338      	adds	r3, #56	; 0x38
 800c85a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fd fe54 	bl	800a50c <ld_dword>
 800c864:	4602      	mov	r2, r0
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c870:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c872:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <find_volume+0x508>)
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	b29a      	uxth	r2, r3
 800c87a:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <find_volume+0x508>)
 800c87c:	801a      	strh	r2, [r3, #0]
 800c87e:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <find_volume+0x508>)
 800c880:	881a      	ldrh	r2, [r3, #0]
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c888:	4a07      	ldr	r2, [pc, #28]	; (800c8a8 <find_volume+0x50c>)
 800c88a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c88e:	f7fe f86d 	bl	800a96c <clear_lock>
#endif
	return FR_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3758      	adds	r7, #88	; 0x58
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	41615252 	.word	0x41615252
 800c8a0:	61417272 	.word	0x61417272
 800c8a4:	24001270 	.word	0x24001270
 800c8a8:	24001294 	.word	0x24001294

0800c8ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c8b6:	2309      	movs	r3, #9
 800c8b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d01c      	beq.n	800c8fa <validate+0x4e>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d018      	beq.n	800c8fa <validate+0x4e>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d013      	beq.n	800c8fa <validate+0x4e>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	889a      	ldrh	r2, [r3, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	88db      	ldrh	r3, [r3, #6]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d10c      	bne.n	800c8fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	785b      	ldrb	r3, [r3, #1]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fd fd5a 	bl	800a3a0 <disk_status>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <validate+0x4e>
			res = FR_OK;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <validate+0x5a>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	e000      	b.n	800c908 <validate+0x5c>
 800c906:	2300      	movs	r3, #0
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	6013      	str	r3, [r2, #0]
	return res;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b088      	sub	sp, #32
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	4613      	mov	r3, r2
 800c924:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c92a:	f107 0310 	add.w	r3, r7, #16
 800c92e:	4618      	mov	r0, r3
 800c930:	f7ff fc9a 	bl	800c268 <get_ldnumber>
 800c934:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	da01      	bge.n	800c940 <f_mount+0x28>
 800c93c:	230b      	movs	r3, #11
 800c93e:	e02b      	b.n	800c998 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c940:	4a17      	ldr	r2, [pc, #92]	; (800c9a0 <f_mount+0x88>)
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c948:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d005      	beq.n	800c95c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c950:	69b8      	ldr	r0, [r7, #24]
 800c952:	f7fe f80b 	bl	800a96c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	2200      	movs	r2, #0
 800c95a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d002      	beq.n	800c968 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	490d      	ldr	r1, [pc, #52]	; (800c9a0 <f_mount+0x88>)
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <f_mount+0x66>
 800c978:	79fb      	ldrb	r3, [r7, #7]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d001      	beq.n	800c982 <f_mount+0x6a>
 800c97e:	2300      	movs	r3, #0
 800c980:	e00a      	b.n	800c998 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c982:	f107 010c 	add.w	r1, r7, #12
 800c986:	f107 0308 	add.w	r3, r7, #8
 800c98a:	2200      	movs	r2, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fd05 	bl	800c39c <find_volume>
 800c992:	4603      	mov	r3, r0
 800c994:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c996:	7dfb      	ldrb	r3, [r7, #23]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3720      	adds	r7, #32
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	2400126c 	.word	0x2400126c

0800c9a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b09a      	sub	sp, #104	; 0x68
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d101      	bne.n	800c9bc <f_open+0x18>
 800c9b8:	2309      	movs	r3, #9
 800c9ba:	e1bb      	b.n	800cd34 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c9bc:	79fb      	ldrb	r3, [r7, #7]
 800c9be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c9c4:	79fa      	ldrb	r2, [r7, #7]
 800c9c6:	f107 0114 	add.w	r1, r7, #20
 800c9ca:	f107 0308 	add.w	r3, r7, #8
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7ff fce4 	bl	800c39c <find_volume>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c9da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f040 819f 	bne.w	800cd22 <f_open+0x37e>
		dj.obj.fs = fs;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	f107 0318 	add.w	r3, r7, #24
 800c9ee:	4611      	mov	r1, r2
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fbc3 	bl	800c17c <follow_path>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c9fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d11a      	bne.n	800ca3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca08:	b25b      	sxtb	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	da03      	bge.n	800ca16 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca0e:	2306      	movs	r3, #6
 800ca10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ca14:	e011      	b.n	800ca3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	f023 0301 	bic.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bf14      	ite	ne
 800ca20:	2301      	movne	r3, #1
 800ca22:	2300      	moveq	r3, #0
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	461a      	mov	r2, r3
 800ca28:	f107 0318 	add.w	r3, r7, #24
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fd fe54 	bl	800a6dc <chk_lock>
 800ca34:	4603      	mov	r3, r0
 800ca36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	f003 031c 	and.w	r3, r3, #28
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d07f      	beq.n	800cb44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ca44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d017      	beq.n	800ca7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d10e      	bne.n	800ca72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca54:	f7fd fe9e 	bl	800a794 <enq_lock>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <f_open+0xc8>
 800ca5e:	f107 0318 	add.w	r3, r7, #24
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fe fffc 	bl	800ba60 <dir_register>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	e000      	b.n	800ca6e <f_open+0xca>
 800ca6c:	2312      	movs	r3, #18
 800ca6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca72:	79fb      	ldrb	r3, [r7, #7]
 800ca74:	f043 0308 	orr.w	r3, r3, #8
 800ca78:	71fb      	strb	r3, [r7, #7]
 800ca7a:	e010      	b.n	800ca9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca7c:	7fbb      	ldrb	r3, [r7, #30]
 800ca7e:	f003 0311 	and.w	r3, r3, #17
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <f_open+0xea>
					res = FR_DENIED;
 800ca86:	2307      	movs	r3, #7
 800ca88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ca8c:	e007      	b.n	800ca9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca8e:	79fb      	ldrb	r3, [r7, #7]
 800ca90:	f003 0304 	and.w	r3, r3, #4
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <f_open+0xfa>
 800ca98:	2308      	movs	r3, #8
 800ca9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d168      	bne.n	800cb78 <f_open+0x1d4>
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d063      	beq.n	800cb78 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cab0:	f7fd fa38 	bl	8009f24 <get_fattime>
 800cab4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	330e      	adds	r3, #14
 800caba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fd fd63 	bl	800a588 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	3316      	adds	r3, #22
 800cac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fd fd5d 	bl	800a588 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	330b      	adds	r3, #11
 800cad2:	2220      	movs	r2, #32
 800cad4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe fd35 	bl	800b54c <ld_clust>
 800cae2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cae8:	2200      	movs	r2, #0
 800caea:	4618      	mov	r0, r3
 800caec:	f7fe fd4d 	bl	800b58a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	331c      	adds	r3, #28
 800caf4:	2100      	movs	r1, #0
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fd fd46 	bl	800a588 <st_dword>
					fs->wflag = 1;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2201      	movs	r2, #1
 800cb00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d037      	beq.n	800cb78 <f_open+0x1d4>
						dw = fs->winsect;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb0c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cb0e:	f107 0318 	add.w	r3, r7, #24
 800cb12:	2200      	movs	r2, #0
 800cb14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fe fa3d 	bl	800af96 <remove_chain>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cb22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d126      	bne.n	800cb78 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fd ff84 	bl	800aa3c <move_window>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb3e:	3a01      	subs	r2, #1
 800cb40:	615a      	str	r2, [r3, #20]
 800cb42:	e019      	b.n	800cb78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d115      	bne.n	800cb78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb4c:	7fbb      	ldrb	r3, [r7, #30]
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <f_open+0x1ba>
					res = FR_NO_FILE;
 800cb56:	2304      	movs	r3, #4
 800cb58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cb5c:	e00c      	b.n	800cb78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d007      	beq.n	800cb78 <f_open+0x1d4>
 800cb68:	7fbb      	ldrb	r3, [r7, #30]
 800cb6a:	f003 0301 	and.w	r3, r3, #1
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d002      	beq.n	800cb78 <f_open+0x1d4>
						res = FR_DENIED;
 800cb72:	2307      	movs	r3, #7
 800cb74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d128      	bne.n	800cbd2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	f003 0308 	and.w	r3, r3, #8
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d003      	beq.n	800cb92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cb8a:	79fb      	ldrb	r3, [r7, #7]
 800cb8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cb9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	f023 0301 	bic.w	r3, r3, #1
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bf14      	ite	ne
 800cbaa:	2301      	movne	r3, #1
 800cbac:	2300      	moveq	r3, #0
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	f107 0318 	add.w	r3, r7, #24
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fd fe0d 	bl	800a7d8 <inc_lock>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <f_open+0x22e>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cbd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f040 80a3 	bne.w	800cd22 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fcb2 	bl	800b54c <ld_clust>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	331c      	adds	r3, #28
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fd fc8a 	bl	800a50c <ld_dword>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	88da      	ldrh	r2, [r3, #6]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	79fa      	ldrb	r2, [r7, #7]
 800cc16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3330      	adds	r3, #48	; 0x30
 800cc2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc32:	2100      	movs	r1, #0
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd fcf4 	bl	800a622 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	f003 0320 	and.w	r3, r3, #32
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d06e      	beq.n	800cd22 <f_open+0x37e>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d06a      	beq.n	800cd22 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	895b      	ldrh	r3, [r3, #10]
 800cc58:	461a      	mov	r2, r3
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	899b      	ldrh	r3, [r3, #12]
 800cc5e:	fb03 f302 	mul.w	r3, r3, r2
 800cc62:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc70:	e016      	b.n	800cca0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fd ff9d 	bl	800abb6 <get_fat>
 800cc7c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cc7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d802      	bhi.n	800cc8a <f_open+0x2e6>
 800cc84:	2302      	movs	r3, #2
 800cc86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc90:	d102      	bne.n	800cc98 <f_open+0x2f4>
 800cc92:	2301      	movs	r3, #1
 800cc94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cca0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d103      	bne.n	800ccb0 <f_open+0x30c>
 800cca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d8e0      	bhi.n	800cc72 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ccb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d131      	bne.n	800cd22 <f_open+0x37e>
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	899b      	ldrh	r3, [r3, #12]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccca:	fb02 f201 	mul.w	r2, r2, r1
 800ccce:	1a9b      	subs	r3, r3, r2
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d026      	beq.n	800cd22 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fd ff4d 	bl	800ab78 <clust2sect>
 800ccde:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d103      	bne.n	800ccee <f_open+0x34a>
						res = FR_INT_ERR;
 800cce6:	2302      	movs	r3, #2
 800cce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ccec:	e019      	b.n	800cd22 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	899b      	ldrh	r3, [r3, #12]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccfc:	441a      	add	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	7858      	ldrb	r0, [r3, #1]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6a1a      	ldr	r2, [r3, #32]
 800cd10:	2301      	movs	r3, #1
 800cd12:	f7fd fb85 	bl	800a420 <disk_read>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <f_open+0x37e>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <f_open+0x38c>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3768      	adds	r7, #104	; 0x68
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08c      	sub	sp, #48	; 0x30
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f107 0210 	add.w	r2, r7, #16
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff fda5 	bl	800c8ac <validate>
 800cd62:	4603      	mov	r3, r0
 800cd64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d107      	bne.n	800cd80 <f_write+0x44>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	7d5b      	ldrb	r3, [r3, #21]
 800cd74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <f_write+0x4a>
 800cd80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd84:	e16a      	b.n	800d05c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	7d1b      	ldrb	r3, [r3, #20]
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <f_write+0x5a>
 800cd92:	2307      	movs	r3, #7
 800cd94:	e162      	b.n	800d05c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	699a      	ldr	r2, [r3, #24]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	441a      	add	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	f080 814c 	bcs.w	800d040 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	43db      	mvns	r3, r3
 800cdae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cdb0:	e146      	b.n	800d040 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	693a      	ldr	r2, [r7, #16]
 800cdb8:	8992      	ldrh	r2, [r2, #12]
 800cdba:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdbe:	fb02 f201 	mul.w	r2, r2, r1
 800cdc2:	1a9b      	subs	r3, r3, r2
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 80f1 	bne.w	800cfac <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	8992      	ldrh	r2, [r2, #12]
 800cdd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	8952      	ldrh	r2, [r2, #10]
 800cdda:	3a01      	subs	r2, #1
 800cddc:	4013      	ands	r3, r2
 800cdde:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d143      	bne.n	800ce6e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10c      	bne.n	800ce08 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d11a      	bne.n	800ce30 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fe f92e 	bl	800b060 <create_chain>
 800ce04:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce06:	e013      	b.n	800ce30 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d007      	beq.n	800ce20 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	4619      	mov	r1, r3
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7fe f9ba 	bl	800b190 <clmt_clust>
 800ce1c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce1e:	e007      	b.n	800ce30 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	69db      	ldr	r3, [r3, #28]
 800ce26:	4619      	mov	r1, r3
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f7fe f919 	bl	800b060 <create_chain>
 800ce2e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	f000 8109 	beq.w	800d04a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d104      	bne.n	800ce48 <f_write+0x10c>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2202      	movs	r2, #2
 800ce42:	755a      	strb	r2, [r3, #21]
 800ce44:	2302      	movs	r3, #2
 800ce46:	e109      	b.n	800d05c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4e:	d104      	bne.n	800ce5a <f_write+0x11e>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2201      	movs	r2, #1
 800ce54:	755a      	strb	r2, [r3, #21]
 800ce56:	2301      	movs	r3, #1
 800ce58:	e100      	b.n	800d05c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce5e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <f_write+0x132>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce6c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7d1b      	ldrb	r3, [r3, #20]
 800ce72:	b25b      	sxtb	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da18      	bge.n	800ceaa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	7858      	ldrb	r0, [r3, #1]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6a1a      	ldr	r2, [r3, #32]
 800ce86:	2301      	movs	r3, #1
 800ce88:	f7fd faea 	bl	800a460 <disk_write>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d004      	beq.n	800ce9c <f_write+0x160>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2201      	movs	r2, #1
 800ce96:	755a      	strb	r2, [r3, #21]
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e0df      	b.n	800d05c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	7d1b      	ldrb	r3, [r3, #20]
 800cea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fd fe60 	bl	800ab78 <clust2sect>
 800ceb8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <f_write+0x18e>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2202      	movs	r2, #2
 800cec4:	755a      	strb	r2, [r3, #21]
 800cec6:	2302      	movs	r3, #2
 800cec8:	e0c8      	b.n	800d05c <f_write+0x320>
			sect += csect;
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	4413      	add	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	899b      	ldrh	r3, [r3, #12]
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	fbb3 f3f2 	udiv	r3, r3, r2
 800cede:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cee0:	6a3b      	ldr	r3, [r7, #32]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d043      	beq.n	800cf6e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cee6:	69ba      	ldr	r2, [r7, #24]
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	4413      	add	r3, r2
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	8952      	ldrh	r2, [r2, #10]
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d905      	bls.n	800cf00 <f_write+0x1c4>
					cc = fs->csize - csect;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	895b      	ldrh	r3, [r3, #10]
 800cef8:	461a      	mov	r2, r3
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	7858      	ldrb	r0, [r3, #1]
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	69f9      	ldr	r1, [r7, #28]
 800cf0a:	f7fd faa9 	bl	800a460 <disk_write>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d004      	beq.n	800cf1e <f_write+0x1e2>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2201      	movs	r2, #1
 800cf18:	755a      	strb	r2, [r3, #21]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e09e      	b.n	800d05c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6a1a      	ldr	r2, [r3, #32]
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	6a3a      	ldr	r2, [r7, #32]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d918      	bls.n	800cf5e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6a1a      	ldr	r2, [r3, #32]
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	8992      	ldrh	r2, [r2, #12]
 800cf3e:	fb02 f303 	mul.w	r3, r2, r3
 800cf42:	69fa      	ldr	r2, [r7, #28]
 800cf44:	18d1      	adds	r1, r2, r3
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	899b      	ldrh	r3, [r3, #12]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	f7fd fb48 	bl	800a5e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	7d1b      	ldrb	r3, [r3, #20]
 800cf54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	899b      	ldrh	r3, [r3, #12]
 800cf62:	461a      	mov	r2, r3
 800cf64:	6a3b      	ldr	r3, [r7, #32]
 800cf66:	fb02 f303 	mul.w	r3, r2, r3
 800cf6a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cf6c:	e04b      	b.n	800d006 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d016      	beq.n	800cfa6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	699a      	ldr	r2, [r3, #24]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d210      	bcs.n	800cfa6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	7858      	ldrb	r0, [r3, #1]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf8e:	2301      	movs	r3, #1
 800cf90:	697a      	ldr	r2, [r7, #20]
 800cf92:	f7fd fa45 	bl	800a420 <disk_read>
 800cf96:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d004      	beq.n	800cfa6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	755a      	strb	r2, [r3, #21]
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e05a      	b.n	800d05c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	899b      	ldrh	r3, [r3, #12]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	8992      	ldrh	r2, [r2, #12]
 800cfba:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfbe:	fb02 f201 	mul.w	r2, r2, r1
 800cfc2:	1a9b      	subs	r3, r3, r2
 800cfc4:	1ac3      	subs	r3, r0, r3
 800cfc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cfc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d901      	bls.n	800cfd4 <f_write+0x298>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	8992      	ldrh	r2, [r2, #12]
 800cfe2:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfe6:	fb02 f200 	mul.w	r2, r2, r0
 800cfea:	1a9b      	subs	r3, r3, r2
 800cfec:	440b      	add	r3, r1
 800cfee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cff0:	69f9      	ldr	r1, [r7, #28]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fd faf4 	bl	800a5e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	7d1b      	ldrb	r3, [r3, #20]
 800cffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d000:	b2da      	uxtb	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	4413      	add	r3, r2
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	699a      	ldr	r2, [r3, #24]
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	441a      	add	r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	619a      	str	r2, [r3, #24]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68da      	ldr	r2, [r3, #12]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	699b      	ldr	r3, [r3, #24]
 800d022:	429a      	cmp	r2, r3
 800d024:	bf38      	it	cc
 800d026:	461a      	movcc	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	60da      	str	r2, [r3, #12]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	441a      	add	r2, r3
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f47f aeb5 	bne.w	800cdb2 <f_write+0x76>
 800d048:	e000      	b.n	800d04c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d04a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d054:	b2da      	uxtb	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3730      	adds	r7, #48	; 0x30
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f107 0208 	add.w	r2, r7, #8
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff fc19 	bl	800c8ac <validate>
 800d07a:	4603      	mov	r3, r0
 800d07c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d168      	bne.n	800d156 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	7d1b      	ldrb	r3, [r3, #20]
 800d088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d062      	beq.n	800d156 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7d1b      	ldrb	r3, [r3, #20]
 800d094:	b25b      	sxtb	r3, r3
 800d096:	2b00      	cmp	r3, #0
 800d098:	da15      	bge.n	800d0c6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	7858      	ldrb	r0, [r3, #1]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6a1a      	ldr	r2, [r3, #32]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f7fd f9d9 	bl	800a460 <disk_write>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <f_sync+0x54>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e04f      	b.n	800d158 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	7d1b      	ldrb	r3, [r3, #20]
 800d0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0c6:	f7fc ff2d 	bl	8009f24 <get_fattime>
 800d0ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	f7fd fcb1 	bl	800aa3c <move_window>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d138      	bne.n	800d156 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	330b      	adds	r3, #11
 800d0ee:	781a      	ldrb	r2, [r3, #0]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	330b      	adds	r3, #11
 800d0f4:	f042 0220 	orr.w	r2, r2, #32
 800d0f8:	b2d2      	uxtb	r2, r2
 800d0fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	461a      	mov	r2, r3
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	f7fe fa3f 	bl	800b58a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f103 021c 	add.w	r2, r3, #28
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	4619      	mov	r1, r3
 800d118:	4610      	mov	r0, r2
 800d11a:	f7fd fa35 	bl	800a588 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3316      	adds	r3, #22
 800d122:	6939      	ldr	r1, [r7, #16]
 800d124:	4618      	mov	r0, r3
 800d126:	f7fd fa2f 	bl	800a588 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3312      	adds	r3, #18
 800d12e:	2100      	movs	r1, #0
 800d130:	4618      	mov	r0, r3
 800d132:	f7fd fa0e 	bl	800a552 <st_word>
					fs->wflag = 1;
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2201      	movs	r2, #1
 800d13a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fd fcaa 	bl	800aa98 <sync_fs>
 800d144:	4603      	mov	r3, r0
 800d146:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
 800d14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d150:	b2da      	uxtb	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d156:	7dfb      	ldrb	r3, [r7, #23]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f7ff ff7b 	bl	800d064 <f_sync>
 800d16e:	4603      	mov	r3, r0
 800d170:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d172:	7bfb      	ldrb	r3, [r7, #15]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d118      	bne.n	800d1aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f107 0208 	add.w	r2, r7, #8
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fb93 	bl	800c8ac <validate>
 800d186:	4603      	mov	r3, r0
 800d188:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d18a:	7bfb      	ldrb	r3, [r7, #15]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10c      	bne.n	800d1aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	4618      	mov	r0, r3
 800d196:	f7fd fbad 	bl	800a8f4 <dec_lock>
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b090      	sub	sp, #64	; 0x40
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f107 0208 	add.w	r2, r7, #8
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fb70 	bl	800c8ac <validate>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d1d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d103      	bne.n	800d1e2 <f_lseek+0x2e>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	7d5b      	ldrb	r3, [r3, #21]
 800d1de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d1e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <f_lseek+0x3c>
 800d1ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d1ee:	e201      	b.n	800d5f4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 80d9 	beq.w	800d3ac <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d200:	d15a      	bne.n	800d2b8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d206:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	1d1a      	adds	r2, r3, #4
 800d20c:	627a      	str	r2, [r7, #36]	; 0x24
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	2302      	movs	r3, #2
 800d214:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d03a      	beq.n	800d298 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d224:	613b      	str	r3, [r7, #16]
 800d226:	2300      	movs	r3, #0
 800d228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	3302      	adds	r3, #2
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d236:	3301      	adds	r3, #1
 800d238:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fd fcb9 	bl	800abb6 <get_fat>
 800d244:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d804      	bhi.n	800d256 <f_lseek+0xa2>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2202      	movs	r2, #2
 800d250:	755a      	strb	r2, [r3, #21]
 800d252:	2302      	movs	r3, #2
 800d254:	e1ce      	b.n	800d5f4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d104      	bne.n	800d268 <f_lseek+0xb4>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2201      	movs	r2, #1
 800d262:	755a      	strb	r2, [r3, #21]
 800d264:	2301      	movs	r3, #1
 800d266:	e1c5      	b.n	800d5f4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	3301      	adds	r3, #1
 800d26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d26e:	429a      	cmp	r2, r3
 800d270:	d0de      	beq.n	800d230 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	429a      	cmp	r2, r3
 800d278:	d809      	bhi.n	800d28e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	1d1a      	adds	r2, r3, #4
 800d27e:	627a      	str	r2, [r7, #36]	; 0x24
 800d280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	1d1a      	adds	r2, r3, #4
 800d288:	627a      	str	r2, [r7, #36]	; 0x24
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	69db      	ldr	r3, [r3, #28]
 800d292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d294:	429a      	cmp	r2, r3
 800d296:	d3c4      	bcc.n	800d222 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d803      	bhi.n	800d2b0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	e19f      	b.n	800d5f0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d2b0:	2311      	movs	r3, #17
 800d2b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d2b6:	e19b      	b.n	800d5f0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d902      	bls.n	800d2c8 <f_lseek+0x114>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	683a      	ldr	r2, [r7, #0]
 800d2cc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f000 818d 	beq.w	800d5f0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	4619      	mov	r1, r3
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7fd ff57 	bl	800b190 <clmt_clust>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	69db      	ldr	r3, [r3, #28]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7fd fc41 	bl	800ab78 <clust2sect>
 800d2f6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d104      	bne.n	800d308 <f_lseek+0x154>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2202      	movs	r2, #2
 800d302:	755a      	strb	r2, [r3, #21]
 800d304:	2302      	movs	r3, #2
 800d306:	e175      	b.n	800d5f4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	3b01      	subs	r3, #1
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	8992      	ldrh	r2, [r2, #12]
 800d310:	fbb3 f3f2 	udiv	r3, r3, r2
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	8952      	ldrh	r2, [r2, #10]
 800d318:	3a01      	subs	r2, #1
 800d31a:	4013      	ands	r3, r2
 800d31c:	69ba      	ldr	r2, [r7, #24]
 800d31e:	4413      	add	r3, r2
 800d320:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	8992      	ldrh	r2, [r2, #12]
 800d32a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d32e:	fb02 f201 	mul.w	r2, r2, r1
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 815b 	beq.w	800d5f0 <f_lseek+0x43c>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	69ba      	ldr	r2, [r7, #24]
 800d340:	429a      	cmp	r2, r3
 800d342:	f000 8155 	beq.w	800d5f0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	7d1b      	ldrb	r3, [r3, #20]
 800d34a:	b25b      	sxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	da18      	bge.n	800d382 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	7858      	ldrb	r0, [r3, #1]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a1a      	ldr	r2, [r3, #32]
 800d35e:	2301      	movs	r3, #1
 800d360:	f7fd f87e 	bl	800a460 <disk_write>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d004      	beq.n	800d374 <f_lseek+0x1c0>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2201      	movs	r2, #1
 800d36e:	755a      	strb	r2, [r3, #21]
 800d370:	2301      	movs	r3, #1
 800d372:	e13f      	b.n	800d5f4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	7858      	ldrb	r0, [r3, #1]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d38c:	2301      	movs	r3, #1
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	f7fd f846 	bl	800a420 <disk_read>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d004      	beq.n	800d3a4 <f_lseek+0x1f0>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	755a      	strb	r2, [r3, #21]
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e127      	b.n	800d5f4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	69ba      	ldr	r2, [r7, #24]
 800d3a8:	621a      	str	r2, [r3, #32]
 800d3aa:	e121      	b.n	800d5f0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	683a      	ldr	r2, [r7, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d908      	bls.n	800d3c8 <f_lseek+0x214>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	7d1b      	ldrb	r3, [r3, #20]
 800d3ba:	f003 0302 	and.w	r3, r3, #2
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d102      	bne.n	800d3c8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	699b      	ldr	r3, [r3, #24]
 800d3cc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3d6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 80b5 	beq.w	800d54a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	895b      	ldrh	r3, [r3, #10]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	899b      	ldrh	r3, [r3, #12]
 800d3ea:	fb03 f302 	mul.w	r3, r3, r2
 800d3ee:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d01b      	beq.n	800d42e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	1e5a      	subs	r2, r3, #1
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	1e59      	subs	r1, r3, #1
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d30f      	bcc.n	800d42e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	1e5a      	subs	r2, r3, #1
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	425b      	negs	r3, r3
 800d416:	401a      	ands	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	69db      	ldr	r3, [r3, #28]
 800d42a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d42c:	e022      	b.n	800d474 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	2b00      	cmp	r3, #0
 800d438:	d119      	bne.n	800d46e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fd fe0e 	bl	800b060 <create_chain>
 800d444:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d104      	bne.n	800d456 <f_lseek+0x2a2>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	755a      	strb	r2, [r3, #21]
 800d452:	2302      	movs	r3, #2
 800d454:	e0ce      	b.n	800d5f4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d45c:	d104      	bne.n	800d468 <f_lseek+0x2b4>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	755a      	strb	r2, [r3, #21]
 800d464:	2301      	movs	r3, #1
 800d466:	e0c5      	b.n	800d5f4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d46c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d472:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d476:	2b00      	cmp	r3, #0
 800d478:	d067      	beq.n	800d54a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d47a:	e03a      	b.n	800d4f2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	603b      	str	r3, [r7, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	699a      	ldr	r2, [r3, #24]
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	441a      	add	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	7d1b      	ldrb	r3, [r3, #20]
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00b      	beq.n	800d4b4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fd fddd 	bl	800b060 <create_chain>
 800d4a6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d108      	bne.n	800d4c0 <f_lseek+0x30c>
							ofs = 0; break;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	603b      	str	r3, [r7, #0]
 800d4b2:	e022      	b.n	800d4fa <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fd fb7c 	bl	800abb6 <get_fat>
 800d4be:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c6:	d104      	bne.n	800d4d2 <f_lseek+0x31e>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	755a      	strb	r2, [r3, #21]
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e090      	b.n	800d5f4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d904      	bls.n	800d4e2 <f_lseek+0x32e>
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d304      	bcc.n	800d4ec <f_lseek+0x338>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2202      	movs	r2, #2
 800d4e6:	755a      	strb	r2, [r3, #21]
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	e083      	b.n	800d5f4 <f_lseek+0x440>
					fp->clust = clst;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4f0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d8c0      	bhi.n	800d47c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	699a      	ldr	r2, [r3, #24]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	441a      	add	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	899b      	ldrh	r3, [r3, #12]
 800d50a:	461a      	mov	r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d512:	fb02 f201 	mul.w	r2, r2, r1
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d016      	beq.n	800d54a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d520:	4618      	mov	r0, r3
 800d522:	f7fd fb29 	bl	800ab78 <clust2sect>
 800d526:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d104      	bne.n	800d538 <f_lseek+0x384>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2202      	movs	r2, #2
 800d532:	755a      	strb	r2, [r3, #21]
 800d534:	2302      	movs	r3, #2
 800d536:	e05d      	b.n	800d5f4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	899b      	ldrh	r3, [r3, #12]
 800d53c:	461a      	mov	r2, r3
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	fbb3 f3f2 	udiv	r3, r3, r2
 800d544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d546:	4413      	add	r3, r2
 800d548:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	699a      	ldr	r2, [r3, #24]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	429a      	cmp	r2, r3
 800d554:	d90a      	bls.n	800d56c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	699a      	ldr	r2, [r3, #24]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7d1b      	ldrb	r3, [r3, #20]
 800d562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d566:	b2da      	uxtb	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	8992      	ldrh	r2, [r2, #12]
 800d574:	fbb3 f1f2 	udiv	r1, r3, r2
 800d578:	fb02 f201 	mul.w	r2, r2, r1
 800d57c:	1a9b      	subs	r3, r3, r2
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d036      	beq.n	800d5f0 <f_lseek+0x43c>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d588:	429a      	cmp	r2, r3
 800d58a:	d031      	beq.n	800d5f0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	b25b      	sxtb	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	da18      	bge.n	800d5c8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	7858      	ldrb	r0, [r3, #1]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a1a      	ldr	r2, [r3, #32]
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	f7fc ff5b 	bl	800a460 <disk_write>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <f_lseek+0x406>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	755a      	strb	r2, [r3, #21]
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e01c      	b.n	800d5f4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	7d1b      	ldrb	r3, [r3, #20]
 800d5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	7858      	ldrb	r0, [r3, #1]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5d6:	f7fc ff23 	bl	800a420 <disk_read>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d004      	beq.n	800d5ea <f_lseek+0x436>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	755a      	strb	r2, [r3, #21]
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e004      	b.n	800d5f4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ee:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d5f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3740      	adds	r7, #64	; 0x40
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b090      	sub	sp, #64	; 0x40
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d606:	f107 0108 	add.w	r1, r7, #8
 800d60a:	1d3b      	adds	r3, r7, #4
 800d60c:	2200      	movs	r2, #0
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe fec4 	bl	800c39c <find_volume>
 800d614:	4603      	mov	r3, r0
 800d616:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d61a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d11f      	bne.n	800d662 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	f107 0308 	add.w	r3, r7, #8
 800d628:	4611      	mov	r1, r2
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe fda6 	bl	800c17c <follow_path>
 800d630:	4603      	mov	r3, r0
 800d632:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d636:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d111      	bne.n	800d662 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d63e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d642:	b25b      	sxtb	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	da03      	bge.n	800d650 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d648:	2306      	movs	r3, #6
 800d64a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d64e:	e008      	b.n	800d662 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <f_stat+0x66>
 800d656:	f107 0308 	add.w	r3, r7, #8
 800d65a:	6839      	ldr	r1, [r7, #0]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fe faf7 	bl	800bc50 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d666:	4618      	mov	r0, r3
 800d668:	3740      	adds	r7, #64	; 0x40
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
	...

0800d670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	4613      	mov	r3, r2
 800d67c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d67e:	2301      	movs	r3, #1
 800d680:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d686:	4b1f      	ldr	r3, [pc, #124]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d688:	7a5b      	ldrb	r3, [r3, #9]
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d131      	bne.n	800d6f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d690:	4b1c      	ldr	r3, [pc, #112]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d692:	7a5b      	ldrb	r3, [r3, #9]
 800d694:	b2db      	uxtb	r3, r3
 800d696:	461a      	mov	r2, r3
 800d698:	4b1a      	ldr	r3, [pc, #104]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d69a:	2100      	movs	r1, #0
 800d69c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d69e:	4b19      	ldr	r3, [pc, #100]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d6a0:	7a5b      	ldrb	r3, [r3, #9]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	4a17      	ldr	r2, [pc, #92]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6ae:	4b15      	ldr	r3, [pc, #84]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d6b0:	7a5b      	ldrb	r3, [r3, #9]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	4b13      	ldr	r3, [pc, #76]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d6b8:	4413      	add	r3, r2
 800d6ba:	79fa      	ldrb	r2, [r7, #7]
 800d6bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6be:	4b11      	ldr	r3, [pc, #68]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d6c0:	7a5b      	ldrb	r3, [r3, #9]
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	b2d1      	uxtb	r1, r2
 800d6c8:	4a0e      	ldr	r2, [pc, #56]	; (800d704 <FATFS_LinkDriverEx+0x94>)
 800d6ca:	7251      	strb	r1, [r2, #9]
 800d6cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6ce:	7dbb      	ldrb	r3, [r7, #22]
 800d6d0:	3330      	adds	r3, #48	; 0x30
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	223a      	movs	r2, #58	; 0x3a
 800d6de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	3302      	adds	r3, #2
 800d6e4:	222f      	movs	r2, #47	; 0x2f
 800d6e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	3303      	adds	r3, #3
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	371c      	adds	r7, #28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	24001494 	.word	0x24001494

0800d708 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d712:	2200      	movs	r2, #0
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff ffaa 	bl	800d670 <FATFS_LinkDriverEx>
 800d71c:	4603      	mov	r3, r0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d728:	b480      	push	{r7}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	4603      	mov	r3, r0
 800d730:	6039      	str	r1, [r7, #0]
 800d732:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d734:	88fb      	ldrh	r3, [r7, #6]
 800d736:	2b7f      	cmp	r3, #127	; 0x7f
 800d738:	d802      	bhi.n	800d740 <ff_convert+0x18>
		c = chr;
 800d73a:	88fb      	ldrh	r3, [r7, #6]
 800d73c:	81fb      	strh	r3, [r7, #14]
 800d73e:	e025      	b.n	800d78c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00b      	beq.n	800d75e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d746:	88fb      	ldrh	r3, [r7, #6]
 800d748:	2bff      	cmp	r3, #255	; 0xff
 800d74a:	d805      	bhi.n	800d758 <ff_convert+0x30>
 800d74c:	88fb      	ldrh	r3, [r7, #6]
 800d74e:	3b80      	subs	r3, #128	; 0x80
 800d750:	4a12      	ldr	r2, [pc, #72]	; (800d79c <ff_convert+0x74>)
 800d752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d756:	e000      	b.n	800d75a <ff_convert+0x32>
 800d758:	2300      	movs	r3, #0
 800d75a:	81fb      	strh	r3, [r7, #14]
 800d75c:	e016      	b.n	800d78c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d75e:	2300      	movs	r3, #0
 800d760:	81fb      	strh	r3, [r7, #14]
 800d762:	e009      	b.n	800d778 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d764:	89fb      	ldrh	r3, [r7, #14]
 800d766:	4a0d      	ldr	r2, [pc, #52]	; (800d79c <ff_convert+0x74>)
 800d768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d76c:	88fa      	ldrh	r2, [r7, #6]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d006      	beq.n	800d780 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d772:	89fb      	ldrh	r3, [r7, #14]
 800d774:	3301      	adds	r3, #1
 800d776:	81fb      	strh	r3, [r7, #14]
 800d778:	89fb      	ldrh	r3, [r7, #14]
 800d77a:	2b7f      	cmp	r3, #127	; 0x7f
 800d77c:	d9f2      	bls.n	800d764 <ff_convert+0x3c>
 800d77e:	e000      	b.n	800d782 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d780:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d782:	89fb      	ldrh	r3, [r7, #14]
 800d784:	3380      	adds	r3, #128	; 0x80
 800d786:	b29b      	uxth	r3, r3
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d78c:	89fb      	ldrh	r3, [r7, #14]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3714      	adds	r7, #20
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop
 800d79c:	08010e78 	.word	0x08010e78

0800d7a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7b0:	d201      	bcs.n	800d7b6 <ff_wtoupper+0x16>
 800d7b2:	4b3e      	ldr	r3, [pc, #248]	; (800d8ac <ff_wtoupper+0x10c>)
 800d7b4:	e000      	b.n	800d7b8 <ff_wtoupper+0x18>
 800d7b6:	4b3e      	ldr	r3, [pc, #248]	; (800d8b0 <ff_wtoupper+0x110>)
 800d7b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	1c9a      	adds	r2, r3, #2
 800d7be:	617a      	str	r2, [r7, #20]
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d7c4:	8a7b      	ldrh	r3, [r7, #18]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d068      	beq.n	800d89c <ff_wtoupper+0xfc>
 800d7ca:	88fa      	ldrh	r2, [r7, #6]
 800d7cc:	8a7b      	ldrh	r3, [r7, #18]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d364      	bcc.n	800d89c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	1c9a      	adds	r2, r3, #2
 800d7d6:	617a      	str	r2, [r7, #20]
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	823b      	strh	r3, [r7, #16]
 800d7dc:	8a3b      	ldrh	r3, [r7, #16]
 800d7de:	0a1b      	lsrs	r3, r3, #8
 800d7e0:	81fb      	strh	r3, [r7, #14]
 800d7e2:	8a3b      	ldrh	r3, [r7, #16]
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d7e8:	88fa      	ldrh	r2, [r7, #6]
 800d7ea:	8a79      	ldrh	r1, [r7, #18]
 800d7ec:	8a3b      	ldrh	r3, [r7, #16]
 800d7ee:	440b      	add	r3, r1
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	da49      	bge.n	800d888 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d7f4:	89fb      	ldrh	r3, [r7, #14]
 800d7f6:	2b08      	cmp	r3, #8
 800d7f8:	d84f      	bhi.n	800d89a <ff_wtoupper+0xfa>
 800d7fa:	a201      	add	r2, pc, #4	; (adr r2, 800d800 <ff_wtoupper+0x60>)
 800d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d800:	0800d825 	.word	0x0800d825
 800d804:	0800d837 	.word	0x0800d837
 800d808:	0800d84d 	.word	0x0800d84d
 800d80c:	0800d855 	.word	0x0800d855
 800d810:	0800d85d 	.word	0x0800d85d
 800d814:	0800d865 	.word	0x0800d865
 800d818:	0800d86d 	.word	0x0800d86d
 800d81c:	0800d875 	.word	0x0800d875
 800d820:	0800d87d 	.word	0x0800d87d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d824:	88fa      	ldrh	r2, [r7, #6]
 800d826:	8a7b      	ldrh	r3, [r7, #18]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	4413      	add	r3, r2
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	80fb      	strh	r3, [r7, #6]
 800d834:	e027      	b.n	800d886 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d836:	88fa      	ldrh	r2, [r7, #6]
 800d838:	8a7b      	ldrh	r3, [r7, #18]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	b29b      	uxth	r3, r3
 800d844:	88fa      	ldrh	r2, [r7, #6]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	80fb      	strh	r3, [r7, #6]
 800d84a:	e01c      	b.n	800d886 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d84c:	88fb      	ldrh	r3, [r7, #6]
 800d84e:	3b10      	subs	r3, #16
 800d850:	80fb      	strh	r3, [r7, #6]
 800d852:	e018      	b.n	800d886 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d854:	88fb      	ldrh	r3, [r7, #6]
 800d856:	3b20      	subs	r3, #32
 800d858:	80fb      	strh	r3, [r7, #6]
 800d85a:	e014      	b.n	800d886 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d85c:	88fb      	ldrh	r3, [r7, #6]
 800d85e:	3b30      	subs	r3, #48	; 0x30
 800d860:	80fb      	strh	r3, [r7, #6]
 800d862:	e010      	b.n	800d886 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	3b1a      	subs	r3, #26
 800d868:	80fb      	strh	r3, [r7, #6]
 800d86a:	e00c      	b.n	800d886 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d86c:	88fb      	ldrh	r3, [r7, #6]
 800d86e:	3308      	adds	r3, #8
 800d870:	80fb      	strh	r3, [r7, #6]
 800d872:	e008      	b.n	800d886 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d874:	88fb      	ldrh	r3, [r7, #6]
 800d876:	3b50      	subs	r3, #80	; 0x50
 800d878:	80fb      	strh	r3, [r7, #6]
 800d87a:	e004      	b.n	800d886 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d87c:	88fb      	ldrh	r3, [r7, #6]
 800d87e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d882:	80fb      	strh	r3, [r7, #6]
 800d884:	bf00      	nop
			}
			break;
 800d886:	e008      	b.n	800d89a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d888:	89fb      	ldrh	r3, [r7, #14]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d195      	bne.n	800d7ba <ff_wtoupper+0x1a>
 800d88e:	8a3b      	ldrh	r3, [r7, #16]
 800d890:	005b      	lsls	r3, r3, #1
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	4413      	add	r3, r2
 800d896:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d898:	e78f      	b.n	800d7ba <ff_wtoupper+0x1a>
			break;
 800d89a:	bf00      	nop
	}

	return chr;
 800d89c:	88fb      	ldrh	r3, [r7, #6]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	371c      	adds	r7, #28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	08010f78 	.word	0x08010f78
 800d8b0:	0801116c 	.word	0x0801116c

0800d8b4 <__errno>:
 800d8b4:	4b01      	ldr	r3, [pc, #4]	; (800d8bc <__errno+0x8>)
 800d8b6:	6818      	ldr	r0, [r3, #0]
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	24000010 	.word	0x24000010

0800d8c0 <__libc_init_array>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	4d0d      	ldr	r5, [pc, #52]	; (800d8f8 <__libc_init_array+0x38>)
 800d8c4:	4c0d      	ldr	r4, [pc, #52]	; (800d8fc <__libc_init_array+0x3c>)
 800d8c6:	1b64      	subs	r4, r4, r5
 800d8c8:	10a4      	asrs	r4, r4, #2
 800d8ca:	2600      	movs	r6, #0
 800d8cc:	42a6      	cmp	r6, r4
 800d8ce:	d109      	bne.n	800d8e4 <__libc_init_array+0x24>
 800d8d0:	4d0b      	ldr	r5, [pc, #44]	; (800d900 <__libc_init_array+0x40>)
 800d8d2:	4c0c      	ldr	r4, [pc, #48]	; (800d904 <__libc_init_array+0x44>)
 800d8d4:	f002 fe5a 	bl	801058c <_init>
 800d8d8:	1b64      	subs	r4, r4, r5
 800d8da:	10a4      	asrs	r4, r4, #2
 800d8dc:	2600      	movs	r6, #0
 800d8de:	42a6      	cmp	r6, r4
 800d8e0:	d105      	bne.n	800d8ee <__libc_init_array+0x2e>
 800d8e2:	bd70      	pop	{r4, r5, r6, pc}
 800d8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8e8:	4798      	blx	r3
 800d8ea:	3601      	adds	r6, #1
 800d8ec:	e7ee      	b.n	800d8cc <__libc_init_array+0xc>
 800d8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8f2:	4798      	blx	r3
 800d8f4:	3601      	adds	r6, #1
 800d8f6:	e7f2      	b.n	800d8de <__libc_init_array+0x1e>
 800d8f8:	08011614 	.word	0x08011614
 800d8fc:	08011614 	.word	0x08011614
 800d900:	08011614 	.word	0x08011614
 800d904:	08011618 	.word	0x08011618

0800d908 <memcpy>:
 800d908:	440a      	add	r2, r1
 800d90a:	4291      	cmp	r1, r2
 800d90c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d910:	d100      	bne.n	800d914 <memcpy+0xc>
 800d912:	4770      	bx	lr
 800d914:	b510      	push	{r4, lr}
 800d916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d91a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d91e:	4291      	cmp	r1, r2
 800d920:	d1f9      	bne.n	800d916 <memcpy+0xe>
 800d922:	bd10      	pop	{r4, pc}

0800d924 <memset>:
 800d924:	4402      	add	r2, r0
 800d926:	4603      	mov	r3, r0
 800d928:	4293      	cmp	r3, r2
 800d92a:	d100      	bne.n	800d92e <memset+0xa>
 800d92c:	4770      	bx	lr
 800d92e:	f803 1b01 	strb.w	r1, [r3], #1
 800d932:	e7f9      	b.n	800d928 <memset+0x4>

0800d934 <__cvt>:
 800d934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d936:	ed2d 8b02 	vpush	{d8}
 800d93a:	eeb0 8b40 	vmov.f64	d8, d0
 800d93e:	b085      	sub	sp, #20
 800d940:	4617      	mov	r7, r2
 800d942:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d944:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d946:	ee18 2a90 	vmov	r2, s17
 800d94a:	f025 0520 	bic.w	r5, r5, #32
 800d94e:	2a00      	cmp	r2, #0
 800d950:	bfb6      	itet	lt
 800d952:	222d      	movlt	r2, #45	; 0x2d
 800d954:	2200      	movge	r2, #0
 800d956:	eeb1 8b40 	vneglt.f64	d8, d0
 800d95a:	2d46      	cmp	r5, #70	; 0x46
 800d95c:	460c      	mov	r4, r1
 800d95e:	701a      	strb	r2, [r3, #0]
 800d960:	d004      	beq.n	800d96c <__cvt+0x38>
 800d962:	2d45      	cmp	r5, #69	; 0x45
 800d964:	d100      	bne.n	800d968 <__cvt+0x34>
 800d966:	3401      	adds	r4, #1
 800d968:	2102      	movs	r1, #2
 800d96a:	e000      	b.n	800d96e <__cvt+0x3a>
 800d96c:	2103      	movs	r1, #3
 800d96e:	ab03      	add	r3, sp, #12
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	ab02      	add	r3, sp, #8
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4622      	mov	r2, r4
 800d978:	4633      	mov	r3, r6
 800d97a:	eeb0 0b48 	vmov.f64	d0, d8
 800d97e:	f000 fcff 	bl	800e380 <_dtoa_r>
 800d982:	2d47      	cmp	r5, #71	; 0x47
 800d984:	d109      	bne.n	800d99a <__cvt+0x66>
 800d986:	07fb      	lsls	r3, r7, #31
 800d988:	d407      	bmi.n	800d99a <__cvt+0x66>
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d98e:	1a1b      	subs	r3, r3, r0
 800d990:	6013      	str	r3, [r2, #0]
 800d992:	b005      	add	sp, #20
 800d994:	ecbd 8b02 	vpop	{d8}
 800d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99a:	2d46      	cmp	r5, #70	; 0x46
 800d99c:	eb00 0204 	add.w	r2, r0, r4
 800d9a0:	d10c      	bne.n	800d9bc <__cvt+0x88>
 800d9a2:	7803      	ldrb	r3, [r0, #0]
 800d9a4:	2b30      	cmp	r3, #48	; 0x30
 800d9a6:	d107      	bne.n	800d9b8 <__cvt+0x84>
 800d9a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b0:	bf1c      	itt	ne
 800d9b2:	f1c4 0401 	rsbne	r4, r4, #1
 800d9b6:	6034      	strne	r4, [r6, #0]
 800d9b8:	6833      	ldr	r3, [r6, #0]
 800d9ba:	441a      	add	r2, r3
 800d9bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c4:	bf08      	it	eq
 800d9c6:	9203      	streq	r2, [sp, #12]
 800d9c8:	2130      	movs	r1, #48	; 0x30
 800d9ca:	9b03      	ldr	r3, [sp, #12]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d2dc      	bcs.n	800d98a <__cvt+0x56>
 800d9d0:	1c5c      	adds	r4, r3, #1
 800d9d2:	9403      	str	r4, [sp, #12]
 800d9d4:	7019      	strb	r1, [r3, #0]
 800d9d6:	e7f8      	b.n	800d9ca <__cvt+0x96>

0800d9d8 <__exponent>:
 800d9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	bfb8      	it	lt
 800d9e0:	4249      	neglt	r1, r1
 800d9e2:	f803 2b02 	strb.w	r2, [r3], #2
 800d9e6:	bfb4      	ite	lt
 800d9e8:	222d      	movlt	r2, #45	; 0x2d
 800d9ea:	222b      	movge	r2, #43	; 0x2b
 800d9ec:	2909      	cmp	r1, #9
 800d9ee:	7042      	strb	r2, [r0, #1]
 800d9f0:	dd2a      	ble.n	800da48 <__exponent+0x70>
 800d9f2:	f10d 0407 	add.w	r4, sp, #7
 800d9f6:	46a4      	mov	ip, r4
 800d9f8:	270a      	movs	r7, #10
 800d9fa:	46a6      	mov	lr, r4
 800d9fc:	460a      	mov	r2, r1
 800d9fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800da02:	fb07 1516 	mls	r5, r7, r6, r1
 800da06:	3530      	adds	r5, #48	; 0x30
 800da08:	2a63      	cmp	r2, #99	; 0x63
 800da0a:	f104 34ff 	add.w	r4, r4, #4294967295
 800da0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800da12:	4631      	mov	r1, r6
 800da14:	dcf1      	bgt.n	800d9fa <__exponent+0x22>
 800da16:	3130      	adds	r1, #48	; 0x30
 800da18:	f1ae 0502 	sub.w	r5, lr, #2
 800da1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800da20:	1c44      	adds	r4, r0, #1
 800da22:	4629      	mov	r1, r5
 800da24:	4561      	cmp	r1, ip
 800da26:	d30a      	bcc.n	800da3e <__exponent+0x66>
 800da28:	f10d 0209 	add.w	r2, sp, #9
 800da2c:	eba2 020e 	sub.w	r2, r2, lr
 800da30:	4565      	cmp	r5, ip
 800da32:	bf88      	it	hi
 800da34:	2200      	movhi	r2, #0
 800da36:	4413      	add	r3, r2
 800da38:	1a18      	subs	r0, r3, r0
 800da3a:	b003      	add	sp, #12
 800da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da42:	f804 2f01 	strb.w	r2, [r4, #1]!
 800da46:	e7ed      	b.n	800da24 <__exponent+0x4c>
 800da48:	2330      	movs	r3, #48	; 0x30
 800da4a:	3130      	adds	r1, #48	; 0x30
 800da4c:	7083      	strb	r3, [r0, #2]
 800da4e:	70c1      	strb	r1, [r0, #3]
 800da50:	1d03      	adds	r3, r0, #4
 800da52:	e7f1      	b.n	800da38 <__exponent+0x60>
 800da54:	0000      	movs	r0, r0
	...

0800da58 <_printf_float>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	b08b      	sub	sp, #44	; 0x2c
 800da5e:	460c      	mov	r4, r1
 800da60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800da64:	4616      	mov	r6, r2
 800da66:	461f      	mov	r7, r3
 800da68:	4605      	mov	r5, r0
 800da6a:	f001 fa0b 	bl	800ee84 <_localeconv_r>
 800da6e:	f8d0 b000 	ldr.w	fp, [r0]
 800da72:	4658      	mov	r0, fp
 800da74:	f7f2 fc34 	bl	80002e0 <strlen>
 800da78:	2300      	movs	r3, #0
 800da7a:	9308      	str	r3, [sp, #32]
 800da7c:	f8d8 3000 	ldr.w	r3, [r8]
 800da80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800da84:	6822      	ldr	r2, [r4, #0]
 800da86:	3307      	adds	r3, #7
 800da88:	f023 0307 	bic.w	r3, r3, #7
 800da8c:	f103 0108 	add.w	r1, r3, #8
 800da90:	f8c8 1000 	str.w	r1, [r8]
 800da94:	4682      	mov	sl, r0
 800da96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800da9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800dd00 <_printf_float+0x2a8>
 800daa2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800daa6:	eeb0 6bc0 	vabs.f64	d6, d0
 800daaa:	eeb4 6b47 	vcmp.f64	d6, d7
 800daae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab2:	dd24      	ble.n	800dafe <_printf_float+0xa6>
 800dab4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabc:	d502      	bpl.n	800dac4 <_printf_float+0x6c>
 800dabe:	232d      	movs	r3, #45	; 0x2d
 800dac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dac4:	4b90      	ldr	r3, [pc, #576]	; (800dd08 <_printf_float+0x2b0>)
 800dac6:	4891      	ldr	r0, [pc, #580]	; (800dd0c <_printf_float+0x2b4>)
 800dac8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dacc:	bf94      	ite	ls
 800dace:	4698      	movls	r8, r3
 800dad0:	4680      	movhi	r8, r0
 800dad2:	2303      	movs	r3, #3
 800dad4:	6123      	str	r3, [r4, #16]
 800dad6:	f022 0204 	bic.w	r2, r2, #4
 800dada:	2300      	movs	r3, #0
 800dadc:	6022      	str	r2, [r4, #0]
 800dade:	9304      	str	r3, [sp, #16]
 800dae0:	9700      	str	r7, [sp, #0]
 800dae2:	4633      	mov	r3, r6
 800dae4:	aa09      	add	r2, sp, #36	; 0x24
 800dae6:	4621      	mov	r1, r4
 800dae8:	4628      	mov	r0, r5
 800daea:	f000 f9d3 	bl	800de94 <_printf_common>
 800daee:	3001      	adds	r0, #1
 800daf0:	f040 808a 	bne.w	800dc08 <_printf_float+0x1b0>
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	b00b      	add	sp, #44	; 0x2c
 800dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafe:	eeb4 0b40 	vcmp.f64	d0, d0
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	d709      	bvc.n	800db1c <_printf_float+0xc4>
 800db08:	ee10 3a90 	vmov	r3, s1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bfbc      	itt	lt
 800db10:	232d      	movlt	r3, #45	; 0x2d
 800db12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800db16:	487e      	ldr	r0, [pc, #504]	; (800dd10 <_printf_float+0x2b8>)
 800db18:	4b7e      	ldr	r3, [pc, #504]	; (800dd14 <_printf_float+0x2bc>)
 800db1a:	e7d5      	b.n	800dac8 <_printf_float+0x70>
 800db1c:	6863      	ldr	r3, [r4, #4]
 800db1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800db22:	9104      	str	r1, [sp, #16]
 800db24:	1c59      	adds	r1, r3, #1
 800db26:	d13c      	bne.n	800dba2 <_printf_float+0x14a>
 800db28:	2306      	movs	r3, #6
 800db2a:	6063      	str	r3, [r4, #4]
 800db2c:	2300      	movs	r3, #0
 800db2e:	9303      	str	r3, [sp, #12]
 800db30:	ab08      	add	r3, sp, #32
 800db32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800db36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db3a:	ab07      	add	r3, sp, #28
 800db3c:	6861      	ldr	r1, [r4, #4]
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	6022      	str	r2, [r4, #0]
 800db42:	f10d 031b 	add.w	r3, sp, #27
 800db46:	4628      	mov	r0, r5
 800db48:	f7ff fef4 	bl	800d934 <__cvt>
 800db4c:	9b04      	ldr	r3, [sp, #16]
 800db4e:	9907      	ldr	r1, [sp, #28]
 800db50:	2b47      	cmp	r3, #71	; 0x47
 800db52:	4680      	mov	r8, r0
 800db54:	d108      	bne.n	800db68 <_printf_float+0x110>
 800db56:	1cc8      	adds	r0, r1, #3
 800db58:	db02      	blt.n	800db60 <_printf_float+0x108>
 800db5a:	6863      	ldr	r3, [r4, #4]
 800db5c:	4299      	cmp	r1, r3
 800db5e:	dd41      	ble.n	800dbe4 <_printf_float+0x18c>
 800db60:	f1a9 0902 	sub.w	r9, r9, #2
 800db64:	fa5f f989 	uxtb.w	r9, r9
 800db68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800db6c:	d820      	bhi.n	800dbb0 <_printf_float+0x158>
 800db6e:	3901      	subs	r1, #1
 800db70:	464a      	mov	r2, r9
 800db72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db76:	9107      	str	r1, [sp, #28]
 800db78:	f7ff ff2e 	bl	800d9d8 <__exponent>
 800db7c:	9a08      	ldr	r2, [sp, #32]
 800db7e:	9004      	str	r0, [sp, #16]
 800db80:	1813      	adds	r3, r2, r0
 800db82:	2a01      	cmp	r2, #1
 800db84:	6123      	str	r3, [r4, #16]
 800db86:	dc02      	bgt.n	800db8e <_printf_float+0x136>
 800db88:	6822      	ldr	r2, [r4, #0]
 800db8a:	07d2      	lsls	r2, r2, #31
 800db8c:	d501      	bpl.n	800db92 <_printf_float+0x13a>
 800db8e:	3301      	adds	r3, #1
 800db90:	6123      	str	r3, [r4, #16]
 800db92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0a2      	beq.n	800dae0 <_printf_float+0x88>
 800db9a:	232d      	movs	r3, #45	; 0x2d
 800db9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba0:	e79e      	b.n	800dae0 <_printf_float+0x88>
 800dba2:	9904      	ldr	r1, [sp, #16]
 800dba4:	2947      	cmp	r1, #71	; 0x47
 800dba6:	d1c1      	bne.n	800db2c <_printf_float+0xd4>
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1bf      	bne.n	800db2c <_printf_float+0xd4>
 800dbac:	2301      	movs	r3, #1
 800dbae:	e7bc      	b.n	800db2a <_printf_float+0xd2>
 800dbb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dbb4:	d118      	bne.n	800dbe8 <_printf_float+0x190>
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	6863      	ldr	r3, [r4, #4]
 800dbba:	dd0b      	ble.n	800dbd4 <_printf_float+0x17c>
 800dbbc:	6121      	str	r1, [r4, #16]
 800dbbe:	b913      	cbnz	r3, 800dbc6 <_printf_float+0x16e>
 800dbc0:	6822      	ldr	r2, [r4, #0]
 800dbc2:	07d0      	lsls	r0, r2, #31
 800dbc4:	d502      	bpl.n	800dbcc <_printf_float+0x174>
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	440b      	add	r3, r1
 800dbca:	6123      	str	r3, [r4, #16]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	65a1      	str	r1, [r4, #88]	; 0x58
 800dbd0:	9304      	str	r3, [sp, #16]
 800dbd2:	e7de      	b.n	800db92 <_printf_float+0x13a>
 800dbd4:	b913      	cbnz	r3, 800dbdc <_printf_float+0x184>
 800dbd6:	6822      	ldr	r2, [r4, #0]
 800dbd8:	07d2      	lsls	r2, r2, #31
 800dbda:	d501      	bpl.n	800dbe0 <_printf_float+0x188>
 800dbdc:	3302      	adds	r3, #2
 800dbde:	e7f4      	b.n	800dbca <_printf_float+0x172>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e7f2      	b.n	800dbca <_printf_float+0x172>
 800dbe4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dbe8:	9b08      	ldr	r3, [sp, #32]
 800dbea:	4299      	cmp	r1, r3
 800dbec:	db05      	blt.n	800dbfa <_printf_float+0x1a2>
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	6121      	str	r1, [r4, #16]
 800dbf2:	07d8      	lsls	r0, r3, #31
 800dbf4:	d5ea      	bpl.n	800dbcc <_printf_float+0x174>
 800dbf6:	1c4b      	adds	r3, r1, #1
 800dbf8:	e7e7      	b.n	800dbca <_printf_float+0x172>
 800dbfa:	2900      	cmp	r1, #0
 800dbfc:	bfd4      	ite	le
 800dbfe:	f1c1 0202 	rsble	r2, r1, #2
 800dc02:	2201      	movgt	r2, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	e7e0      	b.n	800dbca <_printf_float+0x172>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	055a      	lsls	r2, r3, #21
 800dc0c:	d407      	bmi.n	800dc1e <_printf_float+0x1c6>
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	4642      	mov	r2, r8
 800dc12:	4631      	mov	r1, r6
 800dc14:	4628      	mov	r0, r5
 800dc16:	47b8      	blx	r7
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d12a      	bne.n	800dc72 <_printf_float+0x21a>
 800dc1c:	e76a      	b.n	800daf4 <_printf_float+0x9c>
 800dc1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dc22:	f240 80e2 	bls.w	800ddea <_printf_float+0x392>
 800dc26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dc2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc32:	d133      	bne.n	800dc9c <_printf_float+0x244>
 800dc34:	4a38      	ldr	r2, [pc, #224]	; (800dd18 <_printf_float+0x2c0>)
 800dc36:	2301      	movs	r3, #1
 800dc38:	4631      	mov	r1, r6
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	47b8      	blx	r7
 800dc3e:	3001      	adds	r0, #1
 800dc40:	f43f af58 	beq.w	800daf4 <_printf_float+0x9c>
 800dc44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	db02      	blt.n	800dc52 <_printf_float+0x1fa>
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	07d8      	lsls	r0, r3, #31
 800dc50:	d50f      	bpl.n	800dc72 <_printf_float+0x21a>
 800dc52:	4653      	mov	r3, sl
 800dc54:	465a      	mov	r2, fp
 800dc56:	4631      	mov	r1, r6
 800dc58:	4628      	mov	r0, r5
 800dc5a:	47b8      	blx	r7
 800dc5c:	3001      	adds	r0, #1
 800dc5e:	f43f af49 	beq.w	800daf4 <_printf_float+0x9c>
 800dc62:	f04f 0800 	mov.w	r8, #0
 800dc66:	f104 091a 	add.w	r9, r4, #26
 800dc6a:	9b08      	ldr	r3, [sp, #32]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	4543      	cmp	r3, r8
 800dc70:	dc09      	bgt.n	800dc86 <_printf_float+0x22e>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	079b      	lsls	r3, r3, #30
 800dc76:	f100 8108 	bmi.w	800de8a <_printf_float+0x432>
 800dc7a:	68e0      	ldr	r0, [r4, #12]
 800dc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc7e:	4298      	cmp	r0, r3
 800dc80:	bfb8      	it	lt
 800dc82:	4618      	movlt	r0, r3
 800dc84:	e738      	b.n	800daf8 <_printf_float+0xa0>
 800dc86:	2301      	movs	r3, #1
 800dc88:	464a      	mov	r2, r9
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	47b8      	blx	r7
 800dc90:	3001      	adds	r0, #1
 800dc92:	f43f af2f 	beq.w	800daf4 <_printf_float+0x9c>
 800dc96:	f108 0801 	add.w	r8, r8, #1
 800dc9a:	e7e6      	b.n	800dc6a <_printf_float+0x212>
 800dc9c:	9b07      	ldr	r3, [sp, #28]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	dc3c      	bgt.n	800dd1c <_printf_float+0x2c4>
 800dca2:	4a1d      	ldr	r2, [pc, #116]	; (800dd18 <_printf_float+0x2c0>)
 800dca4:	2301      	movs	r3, #1
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	f43f af21 	beq.w	800daf4 <_printf_float+0x9c>
 800dcb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	d102      	bne.n	800dcc0 <_printf_float+0x268>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	07d9      	lsls	r1, r3, #31
 800dcbe:	d5d8      	bpl.n	800dc72 <_printf_float+0x21a>
 800dcc0:	4653      	mov	r3, sl
 800dcc2:	465a      	mov	r2, fp
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	f43f af12 	beq.w	800daf4 <_printf_float+0x9c>
 800dcd0:	f04f 0900 	mov.w	r9, #0
 800dcd4:	f104 0a1a 	add.w	sl, r4, #26
 800dcd8:	9b07      	ldr	r3, [sp, #28]
 800dcda:	425b      	negs	r3, r3
 800dcdc:	454b      	cmp	r3, r9
 800dcde:	dc01      	bgt.n	800dce4 <_printf_float+0x28c>
 800dce0:	9b08      	ldr	r3, [sp, #32]
 800dce2:	e795      	b.n	800dc10 <_printf_float+0x1b8>
 800dce4:	2301      	movs	r3, #1
 800dce6:	4652      	mov	r2, sl
 800dce8:	4631      	mov	r1, r6
 800dcea:	4628      	mov	r0, r5
 800dcec:	47b8      	blx	r7
 800dcee:	3001      	adds	r0, #1
 800dcf0:	f43f af00 	beq.w	800daf4 <_printf_float+0x9c>
 800dcf4:	f109 0901 	add.w	r9, r9, #1
 800dcf8:	e7ee      	b.n	800dcd8 <_printf_float+0x280>
 800dcfa:	bf00      	nop
 800dcfc:	f3af 8000 	nop.w
 800dd00:	ffffffff 	.word	0xffffffff
 800dd04:	7fefffff 	.word	0x7fefffff
 800dd08:	0801122c 	.word	0x0801122c
 800dd0c:	08011230 	.word	0x08011230
 800dd10:	08011238 	.word	0x08011238
 800dd14:	08011234 	.word	0x08011234
 800dd18:	0801123c 	.word	0x0801123c
 800dd1c:	9a08      	ldr	r2, [sp, #32]
 800dd1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd20:	429a      	cmp	r2, r3
 800dd22:	bfa8      	it	ge
 800dd24:	461a      	movge	r2, r3
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	4691      	mov	r9, r2
 800dd2a:	dc38      	bgt.n	800dd9e <_printf_float+0x346>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9305      	str	r3, [sp, #20]
 800dd30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd34:	f104 021a 	add.w	r2, r4, #26
 800dd38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd3a:	9905      	ldr	r1, [sp, #20]
 800dd3c:	9304      	str	r3, [sp, #16]
 800dd3e:	eba3 0309 	sub.w	r3, r3, r9
 800dd42:	428b      	cmp	r3, r1
 800dd44:	dc33      	bgt.n	800ddae <_printf_float+0x356>
 800dd46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	db3c      	blt.n	800ddc8 <_printf_float+0x370>
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	07da      	lsls	r2, r3, #31
 800dd52:	d439      	bmi.n	800ddc8 <_printf_float+0x370>
 800dd54:	9a08      	ldr	r2, [sp, #32]
 800dd56:	9b04      	ldr	r3, [sp, #16]
 800dd58:	9907      	ldr	r1, [sp, #28]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	eba2 0901 	sub.w	r9, r2, r1
 800dd60:	4599      	cmp	r9, r3
 800dd62:	bfa8      	it	ge
 800dd64:	4699      	movge	r9, r3
 800dd66:	f1b9 0f00 	cmp.w	r9, #0
 800dd6a:	dc35      	bgt.n	800ddd8 <_printf_float+0x380>
 800dd6c:	f04f 0800 	mov.w	r8, #0
 800dd70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd74:	f104 0a1a 	add.w	sl, r4, #26
 800dd78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dd7c:	1a9b      	subs	r3, r3, r2
 800dd7e:	eba3 0309 	sub.w	r3, r3, r9
 800dd82:	4543      	cmp	r3, r8
 800dd84:	f77f af75 	ble.w	800dc72 <_printf_float+0x21a>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4628      	mov	r0, r5
 800dd90:	47b8      	blx	r7
 800dd92:	3001      	adds	r0, #1
 800dd94:	f43f aeae 	beq.w	800daf4 <_printf_float+0x9c>
 800dd98:	f108 0801 	add.w	r8, r8, #1
 800dd9c:	e7ec      	b.n	800dd78 <_printf_float+0x320>
 800dd9e:	4613      	mov	r3, r2
 800dda0:	4631      	mov	r1, r6
 800dda2:	4642      	mov	r2, r8
 800dda4:	4628      	mov	r0, r5
 800dda6:	47b8      	blx	r7
 800dda8:	3001      	adds	r0, #1
 800ddaa:	d1bf      	bne.n	800dd2c <_printf_float+0x2d4>
 800ddac:	e6a2      	b.n	800daf4 <_printf_float+0x9c>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4631      	mov	r1, r6
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	9204      	str	r2, [sp, #16]
 800ddb6:	47b8      	blx	r7
 800ddb8:	3001      	adds	r0, #1
 800ddba:	f43f ae9b 	beq.w	800daf4 <_printf_float+0x9c>
 800ddbe:	9b05      	ldr	r3, [sp, #20]
 800ddc0:	9a04      	ldr	r2, [sp, #16]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	9305      	str	r3, [sp, #20]
 800ddc6:	e7b7      	b.n	800dd38 <_printf_float+0x2e0>
 800ddc8:	4653      	mov	r3, sl
 800ddca:	465a      	mov	r2, fp
 800ddcc:	4631      	mov	r1, r6
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b8      	blx	r7
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d1be      	bne.n	800dd54 <_printf_float+0x2fc>
 800ddd6:	e68d      	b.n	800daf4 <_printf_float+0x9c>
 800ddd8:	9a04      	ldr	r2, [sp, #16]
 800ddda:	464b      	mov	r3, r9
 800dddc:	4442      	add	r2, r8
 800ddde:	4631      	mov	r1, r6
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b8      	blx	r7
 800dde4:	3001      	adds	r0, #1
 800dde6:	d1c1      	bne.n	800dd6c <_printf_float+0x314>
 800dde8:	e684      	b.n	800daf4 <_printf_float+0x9c>
 800ddea:	9a08      	ldr	r2, [sp, #32]
 800ddec:	2a01      	cmp	r2, #1
 800ddee:	dc01      	bgt.n	800ddf4 <_printf_float+0x39c>
 800ddf0:	07db      	lsls	r3, r3, #31
 800ddf2:	d537      	bpl.n	800de64 <_printf_float+0x40c>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	4642      	mov	r2, r8
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	47b8      	blx	r7
 800ddfe:	3001      	adds	r0, #1
 800de00:	f43f ae78 	beq.w	800daf4 <_printf_float+0x9c>
 800de04:	4653      	mov	r3, sl
 800de06:	465a      	mov	r2, fp
 800de08:	4631      	mov	r1, r6
 800de0a:	4628      	mov	r0, r5
 800de0c:	47b8      	blx	r7
 800de0e:	3001      	adds	r0, #1
 800de10:	f43f ae70 	beq.w	800daf4 <_printf_float+0x9c>
 800de14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800de18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de20:	d01b      	beq.n	800de5a <_printf_float+0x402>
 800de22:	9b08      	ldr	r3, [sp, #32]
 800de24:	f108 0201 	add.w	r2, r8, #1
 800de28:	3b01      	subs	r3, #1
 800de2a:	4631      	mov	r1, r6
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b8      	blx	r7
 800de30:	3001      	adds	r0, #1
 800de32:	d10e      	bne.n	800de52 <_printf_float+0x3fa>
 800de34:	e65e      	b.n	800daf4 <_printf_float+0x9c>
 800de36:	2301      	movs	r3, #1
 800de38:	464a      	mov	r2, r9
 800de3a:	4631      	mov	r1, r6
 800de3c:	4628      	mov	r0, r5
 800de3e:	47b8      	blx	r7
 800de40:	3001      	adds	r0, #1
 800de42:	f43f ae57 	beq.w	800daf4 <_printf_float+0x9c>
 800de46:	f108 0801 	add.w	r8, r8, #1
 800de4a:	9b08      	ldr	r3, [sp, #32]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	4543      	cmp	r3, r8
 800de50:	dcf1      	bgt.n	800de36 <_printf_float+0x3de>
 800de52:	9b04      	ldr	r3, [sp, #16]
 800de54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de58:	e6db      	b.n	800dc12 <_printf_float+0x1ba>
 800de5a:	f04f 0800 	mov.w	r8, #0
 800de5e:	f104 091a 	add.w	r9, r4, #26
 800de62:	e7f2      	b.n	800de4a <_printf_float+0x3f2>
 800de64:	2301      	movs	r3, #1
 800de66:	4642      	mov	r2, r8
 800de68:	e7df      	b.n	800de2a <_printf_float+0x3d2>
 800de6a:	2301      	movs	r3, #1
 800de6c:	464a      	mov	r2, r9
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f ae3d 	beq.w	800daf4 <_printf_float+0x9c>
 800de7a:	f108 0801 	add.w	r8, r8, #1
 800de7e:	68e3      	ldr	r3, [r4, #12]
 800de80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de82:	1a5b      	subs	r3, r3, r1
 800de84:	4543      	cmp	r3, r8
 800de86:	dcf0      	bgt.n	800de6a <_printf_float+0x412>
 800de88:	e6f7      	b.n	800dc7a <_printf_float+0x222>
 800de8a:	f04f 0800 	mov.w	r8, #0
 800de8e:	f104 0919 	add.w	r9, r4, #25
 800de92:	e7f4      	b.n	800de7e <_printf_float+0x426>

0800de94 <_printf_common>:
 800de94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de98:	4616      	mov	r6, r2
 800de9a:	4699      	mov	r9, r3
 800de9c:	688a      	ldr	r2, [r1, #8]
 800de9e:	690b      	ldr	r3, [r1, #16]
 800dea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dea4:	4293      	cmp	r3, r2
 800dea6:	bfb8      	it	lt
 800dea8:	4613      	movlt	r3, r2
 800deaa:	6033      	str	r3, [r6, #0]
 800deac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800deb0:	4607      	mov	r7, r0
 800deb2:	460c      	mov	r4, r1
 800deb4:	b10a      	cbz	r2, 800deba <_printf_common+0x26>
 800deb6:	3301      	adds	r3, #1
 800deb8:	6033      	str	r3, [r6, #0]
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	0699      	lsls	r1, r3, #26
 800debe:	bf42      	ittt	mi
 800dec0:	6833      	ldrmi	r3, [r6, #0]
 800dec2:	3302      	addmi	r3, #2
 800dec4:	6033      	strmi	r3, [r6, #0]
 800dec6:	6825      	ldr	r5, [r4, #0]
 800dec8:	f015 0506 	ands.w	r5, r5, #6
 800decc:	d106      	bne.n	800dedc <_printf_common+0x48>
 800dece:	f104 0a19 	add.w	sl, r4, #25
 800ded2:	68e3      	ldr	r3, [r4, #12]
 800ded4:	6832      	ldr	r2, [r6, #0]
 800ded6:	1a9b      	subs	r3, r3, r2
 800ded8:	42ab      	cmp	r3, r5
 800deda:	dc26      	bgt.n	800df2a <_printf_common+0x96>
 800dedc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dee0:	1e13      	subs	r3, r2, #0
 800dee2:	6822      	ldr	r2, [r4, #0]
 800dee4:	bf18      	it	ne
 800dee6:	2301      	movne	r3, #1
 800dee8:	0692      	lsls	r2, r2, #26
 800deea:	d42b      	bmi.n	800df44 <_printf_common+0xb0>
 800deec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800def0:	4649      	mov	r1, r9
 800def2:	4638      	mov	r0, r7
 800def4:	47c0      	blx	r8
 800def6:	3001      	adds	r0, #1
 800def8:	d01e      	beq.n	800df38 <_printf_common+0xa4>
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	68e5      	ldr	r5, [r4, #12]
 800defe:	6832      	ldr	r2, [r6, #0]
 800df00:	f003 0306 	and.w	r3, r3, #6
 800df04:	2b04      	cmp	r3, #4
 800df06:	bf08      	it	eq
 800df08:	1aad      	subeq	r5, r5, r2
 800df0a:	68a3      	ldr	r3, [r4, #8]
 800df0c:	6922      	ldr	r2, [r4, #16]
 800df0e:	bf0c      	ite	eq
 800df10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df14:	2500      	movne	r5, #0
 800df16:	4293      	cmp	r3, r2
 800df18:	bfc4      	itt	gt
 800df1a:	1a9b      	subgt	r3, r3, r2
 800df1c:	18ed      	addgt	r5, r5, r3
 800df1e:	2600      	movs	r6, #0
 800df20:	341a      	adds	r4, #26
 800df22:	42b5      	cmp	r5, r6
 800df24:	d11a      	bne.n	800df5c <_printf_common+0xc8>
 800df26:	2000      	movs	r0, #0
 800df28:	e008      	b.n	800df3c <_printf_common+0xa8>
 800df2a:	2301      	movs	r3, #1
 800df2c:	4652      	mov	r2, sl
 800df2e:	4649      	mov	r1, r9
 800df30:	4638      	mov	r0, r7
 800df32:	47c0      	blx	r8
 800df34:	3001      	adds	r0, #1
 800df36:	d103      	bne.n	800df40 <_printf_common+0xac>
 800df38:	f04f 30ff 	mov.w	r0, #4294967295
 800df3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df40:	3501      	adds	r5, #1
 800df42:	e7c6      	b.n	800ded2 <_printf_common+0x3e>
 800df44:	18e1      	adds	r1, r4, r3
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	2030      	movs	r0, #48	; 0x30
 800df4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df4e:	4422      	add	r2, r4
 800df50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df58:	3302      	adds	r3, #2
 800df5a:	e7c7      	b.n	800deec <_printf_common+0x58>
 800df5c:	2301      	movs	r3, #1
 800df5e:	4622      	mov	r2, r4
 800df60:	4649      	mov	r1, r9
 800df62:	4638      	mov	r0, r7
 800df64:	47c0      	blx	r8
 800df66:	3001      	adds	r0, #1
 800df68:	d0e6      	beq.n	800df38 <_printf_common+0xa4>
 800df6a:	3601      	adds	r6, #1
 800df6c:	e7d9      	b.n	800df22 <_printf_common+0x8e>
	...

0800df70 <_printf_i>:
 800df70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df74:	460c      	mov	r4, r1
 800df76:	4691      	mov	r9, r2
 800df78:	7e27      	ldrb	r7, [r4, #24]
 800df7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df7c:	2f78      	cmp	r7, #120	; 0x78
 800df7e:	4680      	mov	r8, r0
 800df80:	469a      	mov	sl, r3
 800df82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df86:	d807      	bhi.n	800df98 <_printf_i+0x28>
 800df88:	2f62      	cmp	r7, #98	; 0x62
 800df8a:	d80a      	bhi.n	800dfa2 <_printf_i+0x32>
 800df8c:	2f00      	cmp	r7, #0
 800df8e:	f000 80d8 	beq.w	800e142 <_printf_i+0x1d2>
 800df92:	2f58      	cmp	r7, #88	; 0x58
 800df94:	f000 80a3 	beq.w	800e0de <_printf_i+0x16e>
 800df98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfa0:	e03a      	b.n	800e018 <_printf_i+0xa8>
 800dfa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfa6:	2b15      	cmp	r3, #21
 800dfa8:	d8f6      	bhi.n	800df98 <_printf_i+0x28>
 800dfaa:	a001      	add	r0, pc, #4	; (adr r0, 800dfb0 <_printf_i+0x40>)
 800dfac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dfb0:	0800e009 	.word	0x0800e009
 800dfb4:	0800e01d 	.word	0x0800e01d
 800dfb8:	0800df99 	.word	0x0800df99
 800dfbc:	0800df99 	.word	0x0800df99
 800dfc0:	0800df99 	.word	0x0800df99
 800dfc4:	0800df99 	.word	0x0800df99
 800dfc8:	0800e01d 	.word	0x0800e01d
 800dfcc:	0800df99 	.word	0x0800df99
 800dfd0:	0800df99 	.word	0x0800df99
 800dfd4:	0800df99 	.word	0x0800df99
 800dfd8:	0800df99 	.word	0x0800df99
 800dfdc:	0800e129 	.word	0x0800e129
 800dfe0:	0800e04d 	.word	0x0800e04d
 800dfe4:	0800e10b 	.word	0x0800e10b
 800dfe8:	0800df99 	.word	0x0800df99
 800dfec:	0800df99 	.word	0x0800df99
 800dff0:	0800e14b 	.word	0x0800e14b
 800dff4:	0800df99 	.word	0x0800df99
 800dff8:	0800e04d 	.word	0x0800e04d
 800dffc:	0800df99 	.word	0x0800df99
 800e000:	0800df99 	.word	0x0800df99
 800e004:	0800e113 	.word	0x0800e113
 800e008:	680b      	ldr	r3, [r1, #0]
 800e00a:	1d1a      	adds	r2, r3, #4
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	600a      	str	r2, [r1, #0]
 800e010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e018:	2301      	movs	r3, #1
 800e01a:	e0a3      	b.n	800e164 <_printf_i+0x1f4>
 800e01c:	6825      	ldr	r5, [r4, #0]
 800e01e:	6808      	ldr	r0, [r1, #0]
 800e020:	062e      	lsls	r6, r5, #24
 800e022:	f100 0304 	add.w	r3, r0, #4
 800e026:	d50a      	bpl.n	800e03e <_printf_i+0xce>
 800e028:	6805      	ldr	r5, [r0, #0]
 800e02a:	600b      	str	r3, [r1, #0]
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	da03      	bge.n	800e038 <_printf_i+0xc8>
 800e030:	232d      	movs	r3, #45	; 0x2d
 800e032:	426d      	negs	r5, r5
 800e034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e038:	485e      	ldr	r0, [pc, #376]	; (800e1b4 <_printf_i+0x244>)
 800e03a:	230a      	movs	r3, #10
 800e03c:	e019      	b.n	800e072 <_printf_i+0x102>
 800e03e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e042:	6805      	ldr	r5, [r0, #0]
 800e044:	600b      	str	r3, [r1, #0]
 800e046:	bf18      	it	ne
 800e048:	b22d      	sxthne	r5, r5
 800e04a:	e7ef      	b.n	800e02c <_printf_i+0xbc>
 800e04c:	680b      	ldr	r3, [r1, #0]
 800e04e:	6825      	ldr	r5, [r4, #0]
 800e050:	1d18      	adds	r0, r3, #4
 800e052:	6008      	str	r0, [r1, #0]
 800e054:	0628      	lsls	r0, r5, #24
 800e056:	d501      	bpl.n	800e05c <_printf_i+0xec>
 800e058:	681d      	ldr	r5, [r3, #0]
 800e05a:	e002      	b.n	800e062 <_printf_i+0xf2>
 800e05c:	0669      	lsls	r1, r5, #25
 800e05e:	d5fb      	bpl.n	800e058 <_printf_i+0xe8>
 800e060:	881d      	ldrh	r5, [r3, #0]
 800e062:	4854      	ldr	r0, [pc, #336]	; (800e1b4 <_printf_i+0x244>)
 800e064:	2f6f      	cmp	r7, #111	; 0x6f
 800e066:	bf0c      	ite	eq
 800e068:	2308      	moveq	r3, #8
 800e06a:	230a      	movne	r3, #10
 800e06c:	2100      	movs	r1, #0
 800e06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e072:	6866      	ldr	r6, [r4, #4]
 800e074:	60a6      	str	r6, [r4, #8]
 800e076:	2e00      	cmp	r6, #0
 800e078:	bfa2      	ittt	ge
 800e07a:	6821      	ldrge	r1, [r4, #0]
 800e07c:	f021 0104 	bicge.w	r1, r1, #4
 800e080:	6021      	strge	r1, [r4, #0]
 800e082:	b90d      	cbnz	r5, 800e088 <_printf_i+0x118>
 800e084:	2e00      	cmp	r6, #0
 800e086:	d04d      	beq.n	800e124 <_printf_i+0x1b4>
 800e088:	4616      	mov	r6, r2
 800e08a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e08e:	fb03 5711 	mls	r7, r3, r1, r5
 800e092:	5dc7      	ldrb	r7, [r0, r7]
 800e094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e098:	462f      	mov	r7, r5
 800e09a:	42bb      	cmp	r3, r7
 800e09c:	460d      	mov	r5, r1
 800e09e:	d9f4      	bls.n	800e08a <_printf_i+0x11a>
 800e0a0:	2b08      	cmp	r3, #8
 800e0a2:	d10b      	bne.n	800e0bc <_printf_i+0x14c>
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	07df      	lsls	r7, r3, #31
 800e0a8:	d508      	bpl.n	800e0bc <_printf_i+0x14c>
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	6861      	ldr	r1, [r4, #4]
 800e0ae:	4299      	cmp	r1, r3
 800e0b0:	bfde      	ittt	le
 800e0b2:	2330      	movle	r3, #48	; 0x30
 800e0b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e0b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e0bc:	1b92      	subs	r2, r2, r6
 800e0be:	6122      	str	r2, [r4, #16]
 800e0c0:	f8cd a000 	str.w	sl, [sp]
 800e0c4:	464b      	mov	r3, r9
 800e0c6:	aa03      	add	r2, sp, #12
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	f7ff fee2 	bl	800de94 <_printf_common>
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d14c      	bne.n	800e16e <_printf_i+0x1fe>
 800e0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d8:	b004      	add	sp, #16
 800e0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0de:	4835      	ldr	r0, [pc, #212]	; (800e1b4 <_printf_i+0x244>)
 800e0e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	680e      	ldr	r6, [r1, #0]
 800e0e8:	061f      	lsls	r7, r3, #24
 800e0ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800e0ee:	600e      	str	r6, [r1, #0]
 800e0f0:	d514      	bpl.n	800e11c <_printf_i+0x1ac>
 800e0f2:	07d9      	lsls	r1, r3, #31
 800e0f4:	bf44      	itt	mi
 800e0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800e0fa:	6023      	strmi	r3, [r4, #0]
 800e0fc:	b91d      	cbnz	r5, 800e106 <_printf_i+0x196>
 800e0fe:	6823      	ldr	r3, [r4, #0]
 800e100:	f023 0320 	bic.w	r3, r3, #32
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	2310      	movs	r3, #16
 800e108:	e7b0      	b.n	800e06c <_printf_i+0xfc>
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	f043 0320 	orr.w	r3, r3, #32
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	2378      	movs	r3, #120	; 0x78
 800e114:	4828      	ldr	r0, [pc, #160]	; (800e1b8 <_printf_i+0x248>)
 800e116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e11a:	e7e3      	b.n	800e0e4 <_printf_i+0x174>
 800e11c:	065e      	lsls	r6, r3, #25
 800e11e:	bf48      	it	mi
 800e120:	b2ad      	uxthmi	r5, r5
 800e122:	e7e6      	b.n	800e0f2 <_printf_i+0x182>
 800e124:	4616      	mov	r6, r2
 800e126:	e7bb      	b.n	800e0a0 <_printf_i+0x130>
 800e128:	680b      	ldr	r3, [r1, #0]
 800e12a:	6826      	ldr	r6, [r4, #0]
 800e12c:	6960      	ldr	r0, [r4, #20]
 800e12e:	1d1d      	adds	r5, r3, #4
 800e130:	600d      	str	r5, [r1, #0]
 800e132:	0635      	lsls	r5, r6, #24
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	d501      	bpl.n	800e13c <_printf_i+0x1cc>
 800e138:	6018      	str	r0, [r3, #0]
 800e13a:	e002      	b.n	800e142 <_printf_i+0x1d2>
 800e13c:	0671      	lsls	r1, r6, #25
 800e13e:	d5fb      	bpl.n	800e138 <_printf_i+0x1c8>
 800e140:	8018      	strh	r0, [r3, #0]
 800e142:	2300      	movs	r3, #0
 800e144:	6123      	str	r3, [r4, #16]
 800e146:	4616      	mov	r6, r2
 800e148:	e7ba      	b.n	800e0c0 <_printf_i+0x150>
 800e14a:	680b      	ldr	r3, [r1, #0]
 800e14c:	1d1a      	adds	r2, r3, #4
 800e14e:	600a      	str	r2, [r1, #0]
 800e150:	681e      	ldr	r6, [r3, #0]
 800e152:	6862      	ldr	r2, [r4, #4]
 800e154:	2100      	movs	r1, #0
 800e156:	4630      	mov	r0, r6
 800e158:	f7f2 f8ca 	bl	80002f0 <memchr>
 800e15c:	b108      	cbz	r0, 800e162 <_printf_i+0x1f2>
 800e15e:	1b80      	subs	r0, r0, r6
 800e160:	6060      	str	r0, [r4, #4]
 800e162:	6863      	ldr	r3, [r4, #4]
 800e164:	6123      	str	r3, [r4, #16]
 800e166:	2300      	movs	r3, #0
 800e168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e16c:	e7a8      	b.n	800e0c0 <_printf_i+0x150>
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	4632      	mov	r2, r6
 800e172:	4649      	mov	r1, r9
 800e174:	4640      	mov	r0, r8
 800e176:	47d0      	blx	sl
 800e178:	3001      	adds	r0, #1
 800e17a:	d0ab      	beq.n	800e0d4 <_printf_i+0x164>
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	079b      	lsls	r3, r3, #30
 800e180:	d413      	bmi.n	800e1aa <_printf_i+0x23a>
 800e182:	68e0      	ldr	r0, [r4, #12]
 800e184:	9b03      	ldr	r3, [sp, #12]
 800e186:	4298      	cmp	r0, r3
 800e188:	bfb8      	it	lt
 800e18a:	4618      	movlt	r0, r3
 800e18c:	e7a4      	b.n	800e0d8 <_printf_i+0x168>
 800e18e:	2301      	movs	r3, #1
 800e190:	4632      	mov	r2, r6
 800e192:	4649      	mov	r1, r9
 800e194:	4640      	mov	r0, r8
 800e196:	47d0      	blx	sl
 800e198:	3001      	adds	r0, #1
 800e19a:	d09b      	beq.n	800e0d4 <_printf_i+0x164>
 800e19c:	3501      	adds	r5, #1
 800e19e:	68e3      	ldr	r3, [r4, #12]
 800e1a0:	9903      	ldr	r1, [sp, #12]
 800e1a2:	1a5b      	subs	r3, r3, r1
 800e1a4:	42ab      	cmp	r3, r5
 800e1a6:	dcf2      	bgt.n	800e18e <_printf_i+0x21e>
 800e1a8:	e7eb      	b.n	800e182 <_printf_i+0x212>
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	f104 0619 	add.w	r6, r4, #25
 800e1b0:	e7f5      	b.n	800e19e <_printf_i+0x22e>
 800e1b2:	bf00      	nop
 800e1b4:	0801123e 	.word	0x0801123e
 800e1b8:	0801124f 	.word	0x0801124f

0800e1bc <sniprintf>:
 800e1bc:	b40c      	push	{r2, r3}
 800e1be:	b530      	push	{r4, r5, lr}
 800e1c0:	4b17      	ldr	r3, [pc, #92]	; (800e220 <sniprintf+0x64>)
 800e1c2:	1e0c      	subs	r4, r1, #0
 800e1c4:	681d      	ldr	r5, [r3, #0]
 800e1c6:	b09d      	sub	sp, #116	; 0x74
 800e1c8:	da08      	bge.n	800e1dc <sniprintf+0x20>
 800e1ca:	238b      	movs	r3, #139	; 0x8b
 800e1cc:	602b      	str	r3, [r5, #0]
 800e1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d2:	b01d      	add	sp, #116	; 0x74
 800e1d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1d8:	b002      	add	sp, #8
 800e1da:	4770      	bx	lr
 800e1dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e1e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e1e4:	bf14      	ite	ne
 800e1e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e1ea:	4623      	moveq	r3, r4
 800e1ec:	9304      	str	r3, [sp, #16]
 800e1ee:	9307      	str	r3, [sp, #28]
 800e1f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1f4:	9002      	str	r0, [sp, #8]
 800e1f6:	9006      	str	r0, [sp, #24]
 800e1f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e1fe:	ab21      	add	r3, sp, #132	; 0x84
 800e200:	a902      	add	r1, sp, #8
 800e202:	4628      	mov	r0, r5
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	f001 fadd 	bl	800f7c4 <_svfiprintf_r>
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	bfbc      	itt	lt
 800e20e:	238b      	movlt	r3, #139	; 0x8b
 800e210:	602b      	strlt	r3, [r5, #0]
 800e212:	2c00      	cmp	r4, #0
 800e214:	d0dd      	beq.n	800e1d2 <sniprintf+0x16>
 800e216:	9b02      	ldr	r3, [sp, #8]
 800e218:	2200      	movs	r2, #0
 800e21a:	701a      	strb	r2, [r3, #0]
 800e21c:	e7d9      	b.n	800e1d2 <sniprintf+0x16>
 800e21e:	bf00      	nop
 800e220:	24000010 	.word	0x24000010

0800e224 <siprintf>:
 800e224:	b40e      	push	{r1, r2, r3}
 800e226:	b500      	push	{lr}
 800e228:	b09c      	sub	sp, #112	; 0x70
 800e22a:	ab1d      	add	r3, sp, #116	; 0x74
 800e22c:	9002      	str	r0, [sp, #8]
 800e22e:	9006      	str	r0, [sp, #24]
 800e230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e234:	4809      	ldr	r0, [pc, #36]	; (800e25c <siprintf+0x38>)
 800e236:	9107      	str	r1, [sp, #28]
 800e238:	9104      	str	r1, [sp, #16]
 800e23a:	4909      	ldr	r1, [pc, #36]	; (800e260 <siprintf+0x3c>)
 800e23c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e240:	9105      	str	r1, [sp, #20]
 800e242:	6800      	ldr	r0, [r0, #0]
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	a902      	add	r1, sp, #8
 800e248:	f001 fabc 	bl	800f7c4 <_svfiprintf_r>
 800e24c:	9b02      	ldr	r3, [sp, #8]
 800e24e:	2200      	movs	r2, #0
 800e250:	701a      	strb	r2, [r3, #0]
 800e252:	b01c      	add	sp, #112	; 0x70
 800e254:	f85d eb04 	ldr.w	lr, [sp], #4
 800e258:	b003      	add	sp, #12
 800e25a:	4770      	bx	lr
 800e25c:	24000010 	.word	0x24000010
 800e260:	ffff0208 	.word	0xffff0208

0800e264 <quorem>:
 800e264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	6903      	ldr	r3, [r0, #16]
 800e26a:	690c      	ldr	r4, [r1, #16]
 800e26c:	42a3      	cmp	r3, r4
 800e26e:	4607      	mov	r7, r0
 800e270:	f2c0 8081 	blt.w	800e376 <quorem+0x112>
 800e274:	3c01      	subs	r4, #1
 800e276:	f101 0814 	add.w	r8, r1, #20
 800e27a:	f100 0514 	add.w	r5, r0, #20
 800e27e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e282:	9301      	str	r3, [sp, #4]
 800e284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e28c:	3301      	adds	r3, #1
 800e28e:	429a      	cmp	r2, r3
 800e290:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e298:	fbb2 f6f3 	udiv	r6, r2, r3
 800e29c:	d331      	bcc.n	800e302 <quorem+0x9e>
 800e29e:	f04f 0e00 	mov.w	lr, #0
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	46ac      	mov	ip, r5
 800e2a6:	46f2      	mov	sl, lr
 800e2a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2ac:	b293      	uxth	r3, r2
 800e2ae:	fb06 e303 	mla	r3, r6, r3, lr
 800e2b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	ebaa 0303 	sub.w	r3, sl, r3
 800e2bc:	0c12      	lsrs	r2, r2, #16
 800e2be:	f8dc a000 	ldr.w	sl, [ip]
 800e2c2:	fb06 e202 	mla	r2, r6, r2, lr
 800e2c6:	fa13 f38a 	uxtah	r3, r3, sl
 800e2ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2ce:	fa1f fa82 	uxth.w	sl, r2
 800e2d2:	f8dc 2000 	ldr.w	r2, [ip]
 800e2d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e2da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2e4:	4581      	cmp	r9, r0
 800e2e6:	f84c 3b04 	str.w	r3, [ip], #4
 800e2ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e2ee:	d2db      	bcs.n	800e2a8 <quorem+0x44>
 800e2f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e2f4:	b92b      	cbnz	r3, 800e302 <quorem+0x9e>
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	3b04      	subs	r3, #4
 800e2fa:	429d      	cmp	r5, r3
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	d32e      	bcc.n	800e35e <quorem+0xfa>
 800e300:	613c      	str	r4, [r7, #16]
 800e302:	4638      	mov	r0, r7
 800e304:	f001 f848 	bl	800f398 <__mcmp>
 800e308:	2800      	cmp	r0, #0
 800e30a:	db24      	blt.n	800e356 <quorem+0xf2>
 800e30c:	3601      	adds	r6, #1
 800e30e:	4628      	mov	r0, r5
 800e310:	f04f 0c00 	mov.w	ip, #0
 800e314:	f858 2b04 	ldr.w	r2, [r8], #4
 800e318:	f8d0 e000 	ldr.w	lr, [r0]
 800e31c:	b293      	uxth	r3, r2
 800e31e:	ebac 0303 	sub.w	r3, ip, r3
 800e322:	0c12      	lsrs	r2, r2, #16
 800e324:	fa13 f38e 	uxtah	r3, r3, lr
 800e328:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e32c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e330:	b29b      	uxth	r3, r3
 800e332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e336:	45c1      	cmp	r9, r8
 800e338:	f840 3b04 	str.w	r3, [r0], #4
 800e33c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e340:	d2e8      	bcs.n	800e314 <quorem+0xb0>
 800e342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e34a:	b922      	cbnz	r2, 800e356 <quorem+0xf2>
 800e34c:	3b04      	subs	r3, #4
 800e34e:	429d      	cmp	r5, r3
 800e350:	461a      	mov	r2, r3
 800e352:	d30a      	bcc.n	800e36a <quorem+0x106>
 800e354:	613c      	str	r4, [r7, #16]
 800e356:	4630      	mov	r0, r6
 800e358:	b003      	add	sp, #12
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	3b04      	subs	r3, #4
 800e362:	2a00      	cmp	r2, #0
 800e364:	d1cc      	bne.n	800e300 <quorem+0x9c>
 800e366:	3c01      	subs	r4, #1
 800e368:	e7c7      	b.n	800e2fa <quorem+0x96>
 800e36a:	6812      	ldr	r2, [r2, #0]
 800e36c:	3b04      	subs	r3, #4
 800e36e:	2a00      	cmp	r2, #0
 800e370:	d1f0      	bne.n	800e354 <quorem+0xf0>
 800e372:	3c01      	subs	r4, #1
 800e374:	e7eb      	b.n	800e34e <quorem+0xea>
 800e376:	2000      	movs	r0, #0
 800e378:	e7ee      	b.n	800e358 <quorem+0xf4>
 800e37a:	0000      	movs	r0, r0
 800e37c:	0000      	movs	r0, r0
	...

0800e380 <_dtoa_r>:
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e384:	ec59 8b10 	vmov	r8, r9, d0
 800e388:	b095      	sub	sp, #84	; 0x54
 800e38a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e38c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e38e:	9107      	str	r1, [sp, #28]
 800e390:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e394:	4606      	mov	r6, r0
 800e396:	9209      	str	r2, [sp, #36]	; 0x24
 800e398:	9310      	str	r3, [sp, #64]	; 0x40
 800e39a:	b975      	cbnz	r5, 800e3ba <_dtoa_r+0x3a>
 800e39c:	2010      	movs	r0, #16
 800e39e:	f000 fd75 	bl	800ee8c <malloc>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e3a6:	b920      	cbnz	r0, 800e3b2 <_dtoa_r+0x32>
 800e3a8:	4bab      	ldr	r3, [pc, #684]	; (800e658 <_dtoa_r+0x2d8>)
 800e3aa:	21ea      	movs	r1, #234	; 0xea
 800e3ac:	48ab      	ldr	r0, [pc, #684]	; (800e65c <_dtoa_r+0x2dc>)
 800e3ae:	f001 fb19 	bl	800f9e4 <__assert_func>
 800e3b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3b6:	6005      	str	r5, [r0, #0]
 800e3b8:	60c5      	str	r5, [r0, #12]
 800e3ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e3bc:	6819      	ldr	r1, [r3, #0]
 800e3be:	b151      	cbz	r1, 800e3d6 <_dtoa_r+0x56>
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	604a      	str	r2, [r1, #4]
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	4093      	lsls	r3, r2
 800e3c8:	608b      	str	r3, [r1, #8]
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f000 fda6 	bl	800ef1c <_Bfree>
 800e3d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	f1b9 0300 	subs.w	r3, r9, #0
 800e3da:	bfbb      	ittet	lt
 800e3dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3e0:	9303      	strlt	r3, [sp, #12]
 800e3e2:	2300      	movge	r3, #0
 800e3e4:	2201      	movlt	r2, #1
 800e3e6:	bfac      	ite	ge
 800e3e8:	6023      	strge	r3, [r4, #0]
 800e3ea:	6022      	strlt	r2, [r4, #0]
 800e3ec:	4b9c      	ldr	r3, [pc, #624]	; (800e660 <_dtoa_r+0x2e0>)
 800e3ee:	9c03      	ldr	r4, [sp, #12]
 800e3f0:	43a3      	bics	r3, r4
 800e3f2:	d11a      	bne.n	800e42a <_dtoa_r+0xaa>
 800e3f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3fa:	6013      	str	r3, [r2, #0]
 800e3fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e400:	ea53 0308 	orrs.w	r3, r3, r8
 800e404:	f000 8512 	beq.w	800ee2c <_dtoa_r+0xaac>
 800e408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e40a:	b953      	cbnz	r3, 800e422 <_dtoa_r+0xa2>
 800e40c:	4b95      	ldr	r3, [pc, #596]	; (800e664 <_dtoa_r+0x2e4>)
 800e40e:	e01f      	b.n	800e450 <_dtoa_r+0xd0>
 800e410:	4b95      	ldr	r3, [pc, #596]	; (800e668 <_dtoa_r+0x2e8>)
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	3308      	adds	r3, #8
 800e416:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e418:	6013      	str	r3, [r2, #0]
 800e41a:	9800      	ldr	r0, [sp, #0]
 800e41c:	b015      	add	sp, #84	; 0x54
 800e41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e422:	4b90      	ldr	r3, [pc, #576]	; (800e664 <_dtoa_r+0x2e4>)
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	3303      	adds	r3, #3
 800e428:	e7f5      	b.n	800e416 <_dtoa_r+0x96>
 800e42a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e42e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e436:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e43a:	d10b      	bne.n	800e454 <_dtoa_r+0xd4>
 800e43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e43e:	2301      	movs	r3, #1
 800e440:	6013      	str	r3, [r2, #0]
 800e442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 84ee 	beq.w	800ee26 <_dtoa_r+0xaa6>
 800e44a:	4888      	ldr	r0, [pc, #544]	; (800e66c <_dtoa_r+0x2ec>)
 800e44c:	6018      	str	r0, [r3, #0]
 800e44e:	1e43      	subs	r3, r0, #1
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	e7e2      	b.n	800e41a <_dtoa_r+0x9a>
 800e454:	a913      	add	r1, sp, #76	; 0x4c
 800e456:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e45a:	aa12      	add	r2, sp, #72	; 0x48
 800e45c:	4630      	mov	r0, r6
 800e45e:	f001 f83f 	bl	800f4e0 <__d2b>
 800e462:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e466:	4605      	mov	r5, r0
 800e468:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e46a:	2900      	cmp	r1, #0
 800e46c:	d047      	beq.n	800e4fe <_dtoa_r+0x17e>
 800e46e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e470:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e478:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e47c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e480:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e484:	2400      	movs	r4, #0
 800e486:	ec43 2b16 	vmov	d6, r2, r3
 800e48a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e48e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e640 <_dtoa_r+0x2c0>
 800e492:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e496:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e648 <_dtoa_r+0x2c8>
 800e49a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e49e:	eeb0 7b46 	vmov.f64	d7, d6
 800e4a2:	ee06 1a90 	vmov	s13, r1
 800e4a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e4aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e650 <_dtoa_r+0x2d0>
 800e4ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e4b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e4b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4be:	ee16 ba90 	vmov	fp, s13
 800e4c2:	9411      	str	r4, [sp, #68]	; 0x44
 800e4c4:	d508      	bpl.n	800e4d8 <_dtoa_r+0x158>
 800e4c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e4ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800e4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d2:	bf18      	it	ne
 800e4d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e4d8:	f1bb 0f16 	cmp.w	fp, #22
 800e4dc:	d832      	bhi.n	800e544 <_dtoa_r+0x1c4>
 800e4de:	4b64      	ldr	r3, [pc, #400]	; (800e670 <_dtoa_r+0x2f0>)
 800e4e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e4e4:	ed93 7b00 	vldr	d7, [r3]
 800e4e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e4ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f4:	d501      	bpl.n	800e4fa <_dtoa_r+0x17a>
 800e4f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e023      	b.n	800e546 <_dtoa_r+0x1c6>
 800e4fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e500:	4401      	add	r1, r0
 800e502:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e506:	2b20      	cmp	r3, #32
 800e508:	bfc3      	ittte	gt
 800e50a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e50e:	fa04 f303 	lslgt.w	r3, r4, r3
 800e512:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e516:	f1c3 0320 	rsble	r3, r3, #32
 800e51a:	bfc6      	itte	gt
 800e51c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e520:	ea43 0308 	orrgt.w	r3, r3, r8
 800e524:	fa08 f303 	lslle.w	r3, r8, r3
 800e528:	ee07 3a90 	vmov	s15, r3
 800e52c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e530:	3901      	subs	r1, #1
 800e532:	ed8d 7b00 	vstr	d7, [sp]
 800e536:	9c01      	ldr	r4, [sp, #4]
 800e538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e53c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e540:	2401      	movs	r4, #1
 800e542:	e7a0      	b.n	800e486 <_dtoa_r+0x106>
 800e544:	2301      	movs	r3, #1
 800e546:	930f      	str	r3, [sp, #60]	; 0x3c
 800e548:	1a43      	subs	r3, r0, r1
 800e54a:	1e5a      	subs	r2, r3, #1
 800e54c:	bf45      	ittet	mi
 800e54e:	f1c3 0301 	rsbmi	r3, r3, #1
 800e552:	9305      	strmi	r3, [sp, #20]
 800e554:	2300      	movpl	r3, #0
 800e556:	2300      	movmi	r3, #0
 800e558:	9206      	str	r2, [sp, #24]
 800e55a:	bf54      	ite	pl
 800e55c:	9305      	strpl	r3, [sp, #20]
 800e55e:	9306      	strmi	r3, [sp, #24]
 800e560:	f1bb 0f00 	cmp.w	fp, #0
 800e564:	db18      	blt.n	800e598 <_dtoa_r+0x218>
 800e566:	9b06      	ldr	r3, [sp, #24]
 800e568:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e56c:	445b      	add	r3, fp
 800e56e:	9306      	str	r3, [sp, #24]
 800e570:	2300      	movs	r3, #0
 800e572:	9a07      	ldr	r2, [sp, #28]
 800e574:	2a09      	cmp	r2, #9
 800e576:	d849      	bhi.n	800e60c <_dtoa_r+0x28c>
 800e578:	2a05      	cmp	r2, #5
 800e57a:	bfc4      	itt	gt
 800e57c:	3a04      	subgt	r2, #4
 800e57e:	9207      	strgt	r2, [sp, #28]
 800e580:	9a07      	ldr	r2, [sp, #28]
 800e582:	f1a2 0202 	sub.w	r2, r2, #2
 800e586:	bfcc      	ite	gt
 800e588:	2400      	movgt	r4, #0
 800e58a:	2401      	movle	r4, #1
 800e58c:	2a03      	cmp	r2, #3
 800e58e:	d848      	bhi.n	800e622 <_dtoa_r+0x2a2>
 800e590:	e8df f002 	tbb	[pc, r2]
 800e594:	3a2c2e0b 	.word	0x3a2c2e0b
 800e598:	9b05      	ldr	r3, [sp, #20]
 800e59a:	2200      	movs	r2, #0
 800e59c:	eba3 030b 	sub.w	r3, r3, fp
 800e5a0:	9305      	str	r3, [sp, #20]
 800e5a2:	920e      	str	r2, [sp, #56]	; 0x38
 800e5a4:	f1cb 0300 	rsb	r3, fp, #0
 800e5a8:	e7e3      	b.n	800e572 <_dtoa_r+0x1f2>
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	9208      	str	r2, [sp, #32]
 800e5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5b0:	2a00      	cmp	r2, #0
 800e5b2:	dc39      	bgt.n	800e628 <_dtoa_r+0x2a8>
 800e5b4:	f04f 0a01 	mov.w	sl, #1
 800e5b8:	46d1      	mov	r9, sl
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e5c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e5c2:	2100      	movs	r1, #0
 800e5c4:	6079      	str	r1, [r7, #4]
 800e5c6:	2004      	movs	r0, #4
 800e5c8:	f100 0c14 	add.w	ip, r0, #20
 800e5cc:	4594      	cmp	ip, r2
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	d92f      	bls.n	800e632 <_dtoa_r+0x2b2>
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	930c      	str	r3, [sp, #48]	; 0x30
 800e5d6:	f000 fc61 	bl	800ee9c <_Balloc>
 800e5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5dc:	9000      	str	r0, [sp, #0]
 800e5de:	4602      	mov	r2, r0
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d149      	bne.n	800e678 <_dtoa_r+0x2f8>
 800e5e4:	4b23      	ldr	r3, [pc, #140]	; (800e674 <_dtoa_r+0x2f4>)
 800e5e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e5ea:	e6df      	b.n	800e3ac <_dtoa_r+0x2c>
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	e7dd      	b.n	800e5ac <_dtoa_r+0x22c>
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	9208      	str	r2, [sp, #32]
 800e5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5f6:	eb0b 0a02 	add.w	sl, fp, r2
 800e5fa:	f10a 0901 	add.w	r9, sl, #1
 800e5fe:	464a      	mov	r2, r9
 800e600:	2a01      	cmp	r2, #1
 800e602:	bfb8      	it	lt
 800e604:	2201      	movlt	r2, #1
 800e606:	e7db      	b.n	800e5c0 <_dtoa_r+0x240>
 800e608:	2201      	movs	r2, #1
 800e60a:	e7f2      	b.n	800e5f2 <_dtoa_r+0x272>
 800e60c:	2401      	movs	r4, #1
 800e60e:	2200      	movs	r2, #0
 800e610:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e614:	f04f 3aff 	mov.w	sl, #4294967295
 800e618:	2100      	movs	r1, #0
 800e61a:	46d1      	mov	r9, sl
 800e61c:	2212      	movs	r2, #18
 800e61e:	9109      	str	r1, [sp, #36]	; 0x24
 800e620:	e7ce      	b.n	800e5c0 <_dtoa_r+0x240>
 800e622:	2201      	movs	r2, #1
 800e624:	9208      	str	r2, [sp, #32]
 800e626:	e7f5      	b.n	800e614 <_dtoa_r+0x294>
 800e628:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e62c:	46d1      	mov	r9, sl
 800e62e:	4652      	mov	r2, sl
 800e630:	e7c6      	b.n	800e5c0 <_dtoa_r+0x240>
 800e632:	3101      	adds	r1, #1
 800e634:	6079      	str	r1, [r7, #4]
 800e636:	0040      	lsls	r0, r0, #1
 800e638:	e7c6      	b.n	800e5c8 <_dtoa_r+0x248>
 800e63a:	bf00      	nop
 800e63c:	f3af 8000 	nop.w
 800e640:	636f4361 	.word	0x636f4361
 800e644:	3fd287a7 	.word	0x3fd287a7
 800e648:	8b60c8b3 	.word	0x8b60c8b3
 800e64c:	3fc68a28 	.word	0x3fc68a28
 800e650:	509f79fb 	.word	0x509f79fb
 800e654:	3fd34413 	.word	0x3fd34413
 800e658:	0801126d 	.word	0x0801126d
 800e65c:	08011284 	.word	0x08011284
 800e660:	7ff00000 	.word	0x7ff00000
 800e664:	08011269 	.word	0x08011269
 800e668:	08011260 	.word	0x08011260
 800e66c:	0801123d 	.word	0x0801123d
 800e670:	08011380 	.word	0x08011380
 800e674:	080112e3 	.word	0x080112e3
 800e678:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e67a:	9900      	ldr	r1, [sp, #0]
 800e67c:	6011      	str	r1, [r2, #0]
 800e67e:	f1b9 0f0e 	cmp.w	r9, #14
 800e682:	d872      	bhi.n	800e76a <_dtoa_r+0x3ea>
 800e684:	2c00      	cmp	r4, #0
 800e686:	d070      	beq.n	800e76a <_dtoa_r+0x3ea>
 800e688:	f1bb 0f00 	cmp.w	fp, #0
 800e68c:	f340 80a6 	ble.w	800e7dc <_dtoa_r+0x45c>
 800e690:	49ca      	ldr	r1, [pc, #808]	; (800e9bc <_dtoa_r+0x63c>)
 800e692:	f00b 020f 	and.w	r2, fp, #15
 800e696:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e69a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e69e:	ed92 7b00 	vldr	d7, [r2]
 800e6a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e6a6:	f000 808d 	beq.w	800e7c4 <_dtoa_r+0x444>
 800e6aa:	4ac5      	ldr	r2, [pc, #788]	; (800e9c0 <_dtoa_r+0x640>)
 800e6ac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e6b0:	ed92 6b08 	vldr	d6, [r2, #32]
 800e6b4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e6b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e6bc:	f001 010f 	and.w	r1, r1, #15
 800e6c0:	2203      	movs	r2, #3
 800e6c2:	48bf      	ldr	r0, [pc, #764]	; (800e9c0 <_dtoa_r+0x640>)
 800e6c4:	2900      	cmp	r1, #0
 800e6c6:	d17f      	bne.n	800e7c8 <_dtoa_r+0x448>
 800e6c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e6cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e6d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	f000 80b2 	beq.w	800e840 <_dtoa_r+0x4c0>
 800e6dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e6e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ec:	f140 80a8 	bpl.w	800e840 <_dtoa_r+0x4c0>
 800e6f0:	f1b9 0f00 	cmp.w	r9, #0
 800e6f4:	f000 80a4 	beq.w	800e840 <_dtoa_r+0x4c0>
 800e6f8:	f1ba 0f00 	cmp.w	sl, #0
 800e6fc:	dd31      	ble.n	800e762 <_dtoa_r+0x3e2>
 800e6fe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e702:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e706:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e70a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e70e:	3201      	adds	r2, #1
 800e710:	4650      	mov	r0, sl
 800e712:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e716:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e71a:	ee07 2a90 	vmov	s15, r2
 800e71e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e722:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e726:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e72a:	9c03      	ldr	r4, [sp, #12]
 800e72c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e730:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e734:	2800      	cmp	r0, #0
 800e736:	f040 8086 	bne.w	800e846 <_dtoa_r+0x4c6>
 800e73a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e73e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e742:	ec42 1b17 	vmov	d7, r1, r2
 800e746:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74e:	f300 8272 	bgt.w	800ec36 <_dtoa_r+0x8b6>
 800e752:	eeb1 7b47 	vneg.f64	d7, d7
 800e756:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75e:	f100 8267 	bmi.w	800ec30 <_dtoa_r+0x8b0>
 800e762:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e766:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e76a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e76c:	2a00      	cmp	r2, #0
 800e76e:	f2c0 8129 	blt.w	800e9c4 <_dtoa_r+0x644>
 800e772:	f1bb 0f0e 	cmp.w	fp, #14
 800e776:	f300 8125 	bgt.w	800e9c4 <_dtoa_r+0x644>
 800e77a:	4b90      	ldr	r3, [pc, #576]	; (800e9bc <_dtoa_r+0x63c>)
 800e77c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e780:	ed93 6b00 	vldr	d6, [r3]
 800e784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e786:	2b00      	cmp	r3, #0
 800e788:	f280 80c3 	bge.w	800e912 <_dtoa_r+0x592>
 800e78c:	f1b9 0f00 	cmp.w	r9, #0
 800e790:	f300 80bf 	bgt.w	800e912 <_dtoa_r+0x592>
 800e794:	f040 824c 	bne.w	800ec30 <_dtoa_r+0x8b0>
 800e798:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e79c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e7a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ac:	464c      	mov	r4, r9
 800e7ae:	464f      	mov	r7, r9
 800e7b0:	f280 8222 	bge.w	800ebf8 <_dtoa_r+0x878>
 800e7b4:	f8dd 8000 	ldr.w	r8, [sp]
 800e7b8:	2331      	movs	r3, #49	; 0x31
 800e7ba:	f808 3b01 	strb.w	r3, [r8], #1
 800e7be:	f10b 0b01 	add.w	fp, fp, #1
 800e7c2:	e21e      	b.n	800ec02 <_dtoa_r+0x882>
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	e77c      	b.n	800e6c2 <_dtoa_r+0x342>
 800e7c8:	07cc      	lsls	r4, r1, #31
 800e7ca:	d504      	bpl.n	800e7d6 <_dtoa_r+0x456>
 800e7cc:	ed90 6b00 	vldr	d6, [r0]
 800e7d0:	3201      	adds	r2, #1
 800e7d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7d6:	1049      	asrs	r1, r1, #1
 800e7d8:	3008      	adds	r0, #8
 800e7da:	e773      	b.n	800e6c4 <_dtoa_r+0x344>
 800e7dc:	d02e      	beq.n	800e83c <_dtoa_r+0x4bc>
 800e7de:	f1cb 0100 	rsb	r1, fp, #0
 800e7e2:	4a76      	ldr	r2, [pc, #472]	; (800e9bc <_dtoa_r+0x63c>)
 800e7e4:	f001 000f 	and.w	r0, r1, #15
 800e7e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e7ec:	ed92 7b00 	vldr	d7, [r2]
 800e7f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e7f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e7f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e7fc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e800:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e804:	486e      	ldr	r0, [pc, #440]	; (800e9c0 <_dtoa_r+0x640>)
 800e806:	1109      	asrs	r1, r1, #4
 800e808:	2400      	movs	r4, #0
 800e80a:	2202      	movs	r2, #2
 800e80c:	b939      	cbnz	r1, 800e81e <_dtoa_r+0x49e>
 800e80e:	2c00      	cmp	r4, #0
 800e810:	f43f af60 	beq.w	800e6d4 <_dtoa_r+0x354>
 800e814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e81c:	e75a      	b.n	800e6d4 <_dtoa_r+0x354>
 800e81e:	07cf      	lsls	r7, r1, #31
 800e820:	d509      	bpl.n	800e836 <_dtoa_r+0x4b6>
 800e822:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e826:	ed90 7b00 	vldr	d7, [r0]
 800e82a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e82e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e832:	3201      	adds	r2, #1
 800e834:	2401      	movs	r4, #1
 800e836:	1049      	asrs	r1, r1, #1
 800e838:	3008      	adds	r0, #8
 800e83a:	e7e7      	b.n	800e80c <_dtoa_r+0x48c>
 800e83c:	2202      	movs	r2, #2
 800e83e:	e749      	b.n	800e6d4 <_dtoa_r+0x354>
 800e840:	465f      	mov	r7, fp
 800e842:	4648      	mov	r0, r9
 800e844:	e765      	b.n	800e712 <_dtoa_r+0x392>
 800e846:	ec42 1b17 	vmov	d7, r1, r2
 800e84a:	4a5c      	ldr	r2, [pc, #368]	; (800e9bc <_dtoa_r+0x63c>)
 800e84c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e850:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e854:	9a00      	ldr	r2, [sp, #0]
 800e856:	1814      	adds	r4, r2, r0
 800e858:	9a08      	ldr	r2, [sp, #32]
 800e85a:	b352      	cbz	r2, 800e8b2 <_dtoa_r+0x532>
 800e85c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e860:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e864:	f8dd 8000 	ldr.w	r8, [sp]
 800e868:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e86c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e870:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e874:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e878:	ee14 2a90 	vmov	r2, s9
 800e87c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e880:	3230      	adds	r2, #48	; 0x30
 800e882:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88e:	f808 2b01 	strb.w	r2, [r8], #1
 800e892:	d439      	bmi.n	800e908 <_dtoa_r+0x588>
 800e894:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e898:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a0:	d472      	bmi.n	800e988 <_dtoa_r+0x608>
 800e8a2:	45a0      	cmp	r8, r4
 800e8a4:	f43f af5d 	beq.w	800e762 <_dtoa_r+0x3e2>
 800e8a8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e8ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e8b0:	e7e0      	b.n	800e874 <_dtoa_r+0x4f4>
 800e8b2:	f8dd 8000 	ldr.w	r8, [sp]
 800e8b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e8ba:	4621      	mov	r1, r4
 800e8bc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e8c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e8c4:	ee14 2a90 	vmov	r2, s9
 800e8c8:	3230      	adds	r2, #48	; 0x30
 800e8ca:	f808 2b01 	strb.w	r2, [r8], #1
 800e8ce:	45a0      	cmp	r8, r4
 800e8d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e8d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e8d8:	d118      	bne.n	800e90c <_dtoa_r+0x58c>
 800e8da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e8de:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e8e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	dc4d      	bgt.n	800e988 <_dtoa_r+0x608>
 800e8ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e8f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f8:	f57f af33 	bpl.w	800e762 <_dtoa_r+0x3e2>
 800e8fc:	4688      	mov	r8, r1
 800e8fe:	3901      	subs	r1, #1
 800e900:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e904:	2b30      	cmp	r3, #48	; 0x30
 800e906:	d0f9      	beq.n	800e8fc <_dtoa_r+0x57c>
 800e908:	46bb      	mov	fp, r7
 800e90a:	e02a      	b.n	800e962 <_dtoa_r+0x5e2>
 800e90c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e910:	e7d6      	b.n	800e8c0 <_dtoa_r+0x540>
 800e912:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e916:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e91a:	f8dd 8000 	ldr.w	r8, [sp]
 800e91e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e922:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e926:	ee15 3a10 	vmov	r3, s10
 800e92a:	3330      	adds	r3, #48	; 0x30
 800e92c:	f808 3b01 	strb.w	r3, [r8], #1
 800e930:	9b00      	ldr	r3, [sp, #0]
 800e932:	eba8 0303 	sub.w	r3, r8, r3
 800e936:	4599      	cmp	r9, r3
 800e938:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e93c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e940:	d133      	bne.n	800e9aa <_dtoa_r+0x62a>
 800e942:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e946:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94e:	dc1a      	bgt.n	800e986 <_dtoa_r+0x606>
 800e950:	eeb4 7b46 	vcmp.f64	d7, d6
 800e954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e958:	d103      	bne.n	800e962 <_dtoa_r+0x5e2>
 800e95a:	ee15 3a10 	vmov	r3, s10
 800e95e:	07d9      	lsls	r1, r3, #31
 800e960:	d411      	bmi.n	800e986 <_dtoa_r+0x606>
 800e962:	4629      	mov	r1, r5
 800e964:	4630      	mov	r0, r6
 800e966:	f000 fad9 	bl	800ef1c <_Bfree>
 800e96a:	2300      	movs	r3, #0
 800e96c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e96e:	f888 3000 	strb.w	r3, [r8]
 800e972:	f10b 0301 	add.w	r3, fp, #1
 800e976:	6013      	str	r3, [r2, #0]
 800e978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f43f ad4d 	beq.w	800e41a <_dtoa_r+0x9a>
 800e980:	f8c3 8000 	str.w	r8, [r3]
 800e984:	e549      	b.n	800e41a <_dtoa_r+0x9a>
 800e986:	465f      	mov	r7, fp
 800e988:	4643      	mov	r3, r8
 800e98a:	4698      	mov	r8, r3
 800e98c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e990:	2a39      	cmp	r2, #57	; 0x39
 800e992:	d106      	bne.n	800e9a2 <_dtoa_r+0x622>
 800e994:	9a00      	ldr	r2, [sp, #0]
 800e996:	429a      	cmp	r2, r3
 800e998:	d1f7      	bne.n	800e98a <_dtoa_r+0x60a>
 800e99a:	9900      	ldr	r1, [sp, #0]
 800e99c:	2230      	movs	r2, #48	; 0x30
 800e99e:	3701      	adds	r7, #1
 800e9a0:	700a      	strb	r2, [r1, #0]
 800e9a2:	781a      	ldrb	r2, [r3, #0]
 800e9a4:	3201      	adds	r2, #1
 800e9a6:	701a      	strb	r2, [r3, #0]
 800e9a8:	e7ae      	b.n	800e908 <_dtoa_r+0x588>
 800e9aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e9ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b6:	d1b2      	bne.n	800e91e <_dtoa_r+0x59e>
 800e9b8:	e7d3      	b.n	800e962 <_dtoa_r+0x5e2>
 800e9ba:	bf00      	nop
 800e9bc:	08011380 	.word	0x08011380
 800e9c0:	08011358 	.word	0x08011358
 800e9c4:	9908      	ldr	r1, [sp, #32]
 800e9c6:	2900      	cmp	r1, #0
 800e9c8:	f000 80d1 	beq.w	800eb6e <_dtoa_r+0x7ee>
 800e9cc:	9907      	ldr	r1, [sp, #28]
 800e9ce:	2901      	cmp	r1, #1
 800e9d0:	f300 80b4 	bgt.w	800eb3c <_dtoa_r+0x7bc>
 800e9d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e9d6:	2900      	cmp	r1, #0
 800e9d8:	f000 80ac 	beq.w	800eb34 <_dtoa_r+0x7b4>
 800e9dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e9e4:	461c      	mov	r4, r3
 800e9e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9e8:	9b05      	ldr	r3, [sp, #20]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	9305      	str	r3, [sp, #20]
 800e9ee:	9b06      	ldr	r3, [sp, #24]
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	4413      	add	r3, r2
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	9306      	str	r3, [sp, #24]
 800e9f8:	f000 fb4c 	bl	800f094 <__i2b>
 800e9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9fe:	4607      	mov	r7, r0
 800ea00:	f1b8 0f00 	cmp.w	r8, #0
 800ea04:	dd0d      	ble.n	800ea22 <_dtoa_r+0x6a2>
 800ea06:	9a06      	ldr	r2, [sp, #24]
 800ea08:	2a00      	cmp	r2, #0
 800ea0a:	dd0a      	ble.n	800ea22 <_dtoa_r+0x6a2>
 800ea0c:	4542      	cmp	r2, r8
 800ea0e:	9905      	ldr	r1, [sp, #20]
 800ea10:	bfa8      	it	ge
 800ea12:	4642      	movge	r2, r8
 800ea14:	1a89      	subs	r1, r1, r2
 800ea16:	9105      	str	r1, [sp, #20]
 800ea18:	9906      	ldr	r1, [sp, #24]
 800ea1a:	eba8 0802 	sub.w	r8, r8, r2
 800ea1e:	1a8a      	subs	r2, r1, r2
 800ea20:	9206      	str	r2, [sp, #24]
 800ea22:	b303      	cbz	r3, 800ea66 <_dtoa_r+0x6e6>
 800ea24:	9a08      	ldr	r2, [sp, #32]
 800ea26:	2a00      	cmp	r2, #0
 800ea28:	f000 80a6 	beq.w	800eb78 <_dtoa_r+0x7f8>
 800ea2c:	2c00      	cmp	r4, #0
 800ea2e:	dd13      	ble.n	800ea58 <_dtoa_r+0x6d8>
 800ea30:	4639      	mov	r1, r7
 800ea32:	4622      	mov	r2, r4
 800ea34:	4630      	mov	r0, r6
 800ea36:	930c      	str	r3, [sp, #48]	; 0x30
 800ea38:	f000 fbe8 	bl	800f20c <__pow5mult>
 800ea3c:	462a      	mov	r2, r5
 800ea3e:	4601      	mov	r1, r0
 800ea40:	4607      	mov	r7, r0
 800ea42:	4630      	mov	r0, r6
 800ea44:	f000 fb3c 	bl	800f0c0 <__multiply>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	900a      	str	r0, [sp, #40]	; 0x28
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f000 fa65 	bl	800ef1c <_Bfree>
 800ea52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea56:	4615      	mov	r5, r2
 800ea58:	1b1a      	subs	r2, r3, r4
 800ea5a:	d004      	beq.n	800ea66 <_dtoa_r+0x6e6>
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f000 fbd4 	bl	800f20c <__pow5mult>
 800ea64:	4605      	mov	r5, r0
 800ea66:	2101      	movs	r1, #1
 800ea68:	4630      	mov	r0, r6
 800ea6a:	f000 fb13 	bl	800f094 <__i2b>
 800ea6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	4604      	mov	r4, r0
 800ea74:	f340 8082 	ble.w	800eb7c <_dtoa_r+0x7fc>
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	f000 fbc5 	bl	800f20c <__pow5mult>
 800ea82:	9b07      	ldr	r3, [sp, #28]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	4604      	mov	r4, r0
 800ea88:	dd7b      	ble.n	800eb82 <_dtoa_r+0x802>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	930a      	str	r3, [sp, #40]	; 0x28
 800ea8e:	6922      	ldr	r2, [r4, #16]
 800ea90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ea94:	6910      	ldr	r0, [r2, #16]
 800ea96:	f000 faad 	bl	800eff4 <__hi0bits>
 800ea9a:	f1c0 0020 	rsb	r0, r0, #32
 800ea9e:	9b06      	ldr	r3, [sp, #24]
 800eaa0:	4418      	add	r0, r3
 800eaa2:	f010 001f 	ands.w	r0, r0, #31
 800eaa6:	f000 808d 	beq.w	800ebc4 <_dtoa_r+0x844>
 800eaaa:	f1c0 0220 	rsb	r2, r0, #32
 800eaae:	2a04      	cmp	r2, #4
 800eab0:	f340 8086 	ble.w	800ebc0 <_dtoa_r+0x840>
 800eab4:	f1c0 001c 	rsb	r0, r0, #28
 800eab8:	9b05      	ldr	r3, [sp, #20]
 800eaba:	4403      	add	r3, r0
 800eabc:	9305      	str	r3, [sp, #20]
 800eabe:	9b06      	ldr	r3, [sp, #24]
 800eac0:	4403      	add	r3, r0
 800eac2:	4480      	add	r8, r0
 800eac4:	9306      	str	r3, [sp, #24]
 800eac6:	9b05      	ldr	r3, [sp, #20]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	dd05      	ble.n	800ead8 <_dtoa_r+0x758>
 800eacc:	4629      	mov	r1, r5
 800eace:	461a      	mov	r2, r3
 800ead0:	4630      	mov	r0, r6
 800ead2:	f000 fbf5 	bl	800f2c0 <__lshift>
 800ead6:	4605      	mov	r5, r0
 800ead8:	9b06      	ldr	r3, [sp, #24]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	dd05      	ble.n	800eaea <_dtoa_r+0x76a>
 800eade:	4621      	mov	r1, r4
 800eae0:	461a      	mov	r2, r3
 800eae2:	4630      	mov	r0, r6
 800eae4:	f000 fbec 	bl	800f2c0 <__lshift>
 800eae8:	4604      	mov	r4, r0
 800eaea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d06b      	beq.n	800ebc8 <_dtoa_r+0x848>
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 fc50 	bl	800f398 <__mcmp>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	da65      	bge.n	800ebc8 <_dtoa_r+0x848>
 800eafc:	2300      	movs	r3, #0
 800eafe:	4629      	mov	r1, r5
 800eb00:	220a      	movs	r2, #10
 800eb02:	4630      	mov	r0, r6
 800eb04:	f000 fa2c 	bl	800ef60 <__multadd>
 800eb08:	9b08      	ldr	r3, [sp, #32]
 800eb0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb0e:	4605      	mov	r5, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 8192 	beq.w	800ee3a <_dtoa_r+0xaba>
 800eb16:	4639      	mov	r1, r7
 800eb18:	2300      	movs	r3, #0
 800eb1a:	220a      	movs	r2, #10
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f000 fa1f 	bl	800ef60 <__multadd>
 800eb22:	f1ba 0f00 	cmp.w	sl, #0
 800eb26:	4607      	mov	r7, r0
 800eb28:	f300 808e 	bgt.w	800ec48 <_dtoa_r+0x8c8>
 800eb2c:	9b07      	ldr	r3, [sp, #28]
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	dc51      	bgt.n	800ebd6 <_dtoa_r+0x856>
 800eb32:	e089      	b.n	800ec48 <_dtoa_r+0x8c8>
 800eb34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb3a:	e751      	b.n	800e9e0 <_dtoa_r+0x660>
 800eb3c:	f109 34ff 	add.w	r4, r9, #4294967295
 800eb40:	42a3      	cmp	r3, r4
 800eb42:	bfbf      	itttt	lt
 800eb44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800eb46:	1ae3      	sublt	r3, r4, r3
 800eb48:	18d2      	addlt	r2, r2, r3
 800eb4a:	4613      	movlt	r3, r2
 800eb4c:	bfb7      	itett	lt
 800eb4e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eb50:	1b1c      	subge	r4, r3, r4
 800eb52:	4623      	movlt	r3, r4
 800eb54:	2400      	movlt	r4, #0
 800eb56:	f1b9 0f00 	cmp.w	r9, #0
 800eb5a:	bfb5      	itete	lt
 800eb5c:	9a05      	ldrlt	r2, [sp, #20]
 800eb5e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800eb62:	eba2 0809 	sublt.w	r8, r2, r9
 800eb66:	464a      	movge	r2, r9
 800eb68:	bfb8      	it	lt
 800eb6a:	2200      	movlt	r2, #0
 800eb6c:	e73b      	b.n	800e9e6 <_dtoa_r+0x666>
 800eb6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800eb72:	9f08      	ldr	r7, [sp, #32]
 800eb74:	461c      	mov	r4, r3
 800eb76:	e743      	b.n	800ea00 <_dtoa_r+0x680>
 800eb78:	461a      	mov	r2, r3
 800eb7a:	e76f      	b.n	800ea5c <_dtoa_r+0x6dc>
 800eb7c:	9b07      	ldr	r3, [sp, #28]
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	dc18      	bgt.n	800ebb4 <_dtoa_r+0x834>
 800eb82:	9b02      	ldr	r3, [sp, #8]
 800eb84:	b9b3      	cbnz	r3, 800ebb4 <_dtoa_r+0x834>
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800eb8c:	b9a2      	cbnz	r2, 800ebb8 <_dtoa_r+0x838>
 800eb8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eb92:	0d12      	lsrs	r2, r2, #20
 800eb94:	0512      	lsls	r2, r2, #20
 800eb96:	b18a      	cbz	r2, 800ebbc <_dtoa_r+0x83c>
 800eb98:	9b05      	ldr	r3, [sp, #20]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	9305      	str	r3, [sp, #20]
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	3301      	adds	r3, #1
 800eba2:	9306      	str	r3, [sp, #24]
 800eba4:	2301      	movs	r3, #1
 800eba6:	930a      	str	r3, [sp, #40]	; 0x28
 800eba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f47f af6f 	bne.w	800ea8e <_dtoa_r+0x70e>
 800ebb0:	2001      	movs	r0, #1
 800ebb2:	e774      	b.n	800ea9e <_dtoa_r+0x71e>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	e7f6      	b.n	800eba6 <_dtoa_r+0x826>
 800ebb8:	9b02      	ldr	r3, [sp, #8]
 800ebba:	e7f4      	b.n	800eba6 <_dtoa_r+0x826>
 800ebbc:	920a      	str	r2, [sp, #40]	; 0x28
 800ebbe:	e7f3      	b.n	800eba8 <_dtoa_r+0x828>
 800ebc0:	d081      	beq.n	800eac6 <_dtoa_r+0x746>
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	301c      	adds	r0, #28
 800ebc6:	e777      	b.n	800eab8 <_dtoa_r+0x738>
 800ebc8:	f1b9 0f00 	cmp.w	r9, #0
 800ebcc:	dc37      	bgt.n	800ec3e <_dtoa_r+0x8be>
 800ebce:	9b07      	ldr	r3, [sp, #28]
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	dd34      	ble.n	800ec3e <_dtoa_r+0x8be>
 800ebd4:	46ca      	mov	sl, r9
 800ebd6:	f1ba 0f00 	cmp.w	sl, #0
 800ebda:	d10d      	bne.n	800ebf8 <_dtoa_r+0x878>
 800ebdc:	4621      	mov	r1, r4
 800ebde:	4653      	mov	r3, sl
 800ebe0:	2205      	movs	r2, #5
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f000 f9bc 	bl	800ef60 <__multadd>
 800ebe8:	4601      	mov	r1, r0
 800ebea:	4604      	mov	r4, r0
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 fbd3 	bl	800f398 <__mcmp>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	f73f adde 	bgt.w	800e7b4 <_dtoa_r+0x434>
 800ebf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebfa:	f8dd 8000 	ldr.w	r8, [sp]
 800ebfe:	ea6f 0b03 	mvn.w	fp, r3
 800ec02:	f04f 0900 	mov.w	r9, #0
 800ec06:	4621      	mov	r1, r4
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f000 f987 	bl	800ef1c <_Bfree>
 800ec0e:	2f00      	cmp	r7, #0
 800ec10:	f43f aea7 	beq.w	800e962 <_dtoa_r+0x5e2>
 800ec14:	f1b9 0f00 	cmp.w	r9, #0
 800ec18:	d005      	beq.n	800ec26 <_dtoa_r+0x8a6>
 800ec1a:	45b9      	cmp	r9, r7
 800ec1c:	d003      	beq.n	800ec26 <_dtoa_r+0x8a6>
 800ec1e:	4649      	mov	r1, r9
 800ec20:	4630      	mov	r0, r6
 800ec22:	f000 f97b 	bl	800ef1c <_Bfree>
 800ec26:	4639      	mov	r1, r7
 800ec28:	4630      	mov	r0, r6
 800ec2a:	f000 f977 	bl	800ef1c <_Bfree>
 800ec2e:	e698      	b.n	800e962 <_dtoa_r+0x5e2>
 800ec30:	2400      	movs	r4, #0
 800ec32:	4627      	mov	r7, r4
 800ec34:	e7e0      	b.n	800ebf8 <_dtoa_r+0x878>
 800ec36:	46bb      	mov	fp, r7
 800ec38:	4604      	mov	r4, r0
 800ec3a:	4607      	mov	r7, r0
 800ec3c:	e5ba      	b.n	800e7b4 <_dtoa_r+0x434>
 800ec3e:	9b08      	ldr	r3, [sp, #32]
 800ec40:	46ca      	mov	sl, r9
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 8100 	beq.w	800ee48 <_dtoa_r+0xac8>
 800ec48:	f1b8 0f00 	cmp.w	r8, #0
 800ec4c:	dd05      	ble.n	800ec5a <_dtoa_r+0x8da>
 800ec4e:	4639      	mov	r1, r7
 800ec50:	4642      	mov	r2, r8
 800ec52:	4630      	mov	r0, r6
 800ec54:	f000 fb34 	bl	800f2c0 <__lshift>
 800ec58:	4607      	mov	r7, r0
 800ec5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d05d      	beq.n	800ed1c <_dtoa_r+0x99c>
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	4630      	mov	r0, r6
 800ec64:	f000 f91a 	bl	800ee9c <_Balloc>
 800ec68:	4680      	mov	r8, r0
 800ec6a:	b928      	cbnz	r0, 800ec78 <_dtoa_r+0x8f8>
 800ec6c:	4b82      	ldr	r3, [pc, #520]	; (800ee78 <_dtoa_r+0xaf8>)
 800ec6e:	4602      	mov	r2, r0
 800ec70:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec74:	f7ff bb9a 	b.w	800e3ac <_dtoa_r+0x2c>
 800ec78:	693a      	ldr	r2, [r7, #16]
 800ec7a:	3202      	adds	r2, #2
 800ec7c:	0092      	lsls	r2, r2, #2
 800ec7e:	f107 010c 	add.w	r1, r7, #12
 800ec82:	300c      	adds	r0, #12
 800ec84:	f7fe fe40 	bl	800d908 <memcpy>
 800ec88:	2201      	movs	r2, #1
 800ec8a:	4641      	mov	r1, r8
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f000 fb17 	bl	800f2c0 <__lshift>
 800ec92:	9b00      	ldr	r3, [sp, #0]
 800ec94:	3301      	adds	r3, #1
 800ec96:	9305      	str	r3, [sp, #20]
 800ec98:	9b00      	ldr	r3, [sp, #0]
 800ec9a:	4453      	add	r3, sl
 800ec9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec9e:	9b02      	ldr	r3, [sp, #8]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	46b9      	mov	r9, r7
 800eca6:	9308      	str	r3, [sp, #32]
 800eca8:	4607      	mov	r7, r0
 800ecaa:	9b05      	ldr	r3, [sp, #20]
 800ecac:	4621      	mov	r1, r4
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	9302      	str	r3, [sp, #8]
 800ecb4:	f7ff fad6 	bl	800e264 <quorem>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	3330      	adds	r3, #48	; 0x30
 800ecbc:	9006      	str	r0, [sp, #24]
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	930a      	str	r3, [sp, #40]	; 0x28
 800ecc4:	f000 fb68 	bl	800f398 <__mcmp>
 800ecc8:	463a      	mov	r2, r7
 800ecca:	4682      	mov	sl, r0
 800eccc:	4621      	mov	r1, r4
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f000 fb7e 	bl	800f3d0 <__mdiff>
 800ecd4:	68c2      	ldr	r2, [r0, #12]
 800ecd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecd8:	4680      	mov	r8, r0
 800ecda:	bb0a      	cbnz	r2, 800ed20 <_dtoa_r+0x9a0>
 800ecdc:	4601      	mov	r1, r0
 800ecde:	4628      	mov	r0, r5
 800ece0:	f000 fb5a 	bl	800f398 <__mcmp>
 800ece4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece6:	4602      	mov	r2, r0
 800ece8:	4641      	mov	r1, r8
 800ecea:	4630      	mov	r0, r6
 800ecec:	920e      	str	r2, [sp, #56]	; 0x38
 800ecee:	930a      	str	r3, [sp, #40]	; 0x28
 800ecf0:	f000 f914 	bl	800ef1c <_Bfree>
 800ecf4:	9b07      	ldr	r3, [sp, #28]
 800ecf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ecfc:	ea43 0102 	orr.w	r1, r3, r2
 800ed00:	9b08      	ldr	r3, [sp, #32]
 800ed02:	430b      	orrs	r3, r1
 800ed04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed06:	d10d      	bne.n	800ed24 <_dtoa_r+0x9a4>
 800ed08:	2b39      	cmp	r3, #57	; 0x39
 800ed0a:	d029      	beq.n	800ed60 <_dtoa_r+0x9e0>
 800ed0c:	f1ba 0f00 	cmp.w	sl, #0
 800ed10:	dd01      	ble.n	800ed16 <_dtoa_r+0x996>
 800ed12:	9b06      	ldr	r3, [sp, #24]
 800ed14:	3331      	adds	r3, #49	; 0x31
 800ed16:	9a02      	ldr	r2, [sp, #8]
 800ed18:	7013      	strb	r3, [r2, #0]
 800ed1a:	e774      	b.n	800ec06 <_dtoa_r+0x886>
 800ed1c:	4638      	mov	r0, r7
 800ed1e:	e7b8      	b.n	800ec92 <_dtoa_r+0x912>
 800ed20:	2201      	movs	r2, #1
 800ed22:	e7e1      	b.n	800ece8 <_dtoa_r+0x968>
 800ed24:	f1ba 0f00 	cmp.w	sl, #0
 800ed28:	db06      	blt.n	800ed38 <_dtoa_r+0x9b8>
 800ed2a:	9907      	ldr	r1, [sp, #28]
 800ed2c:	ea41 0a0a 	orr.w	sl, r1, sl
 800ed30:	9908      	ldr	r1, [sp, #32]
 800ed32:	ea5a 0101 	orrs.w	r1, sl, r1
 800ed36:	d120      	bne.n	800ed7a <_dtoa_r+0x9fa>
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	ddec      	ble.n	800ed16 <_dtoa_r+0x996>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	2201      	movs	r2, #1
 800ed40:	4630      	mov	r0, r6
 800ed42:	9305      	str	r3, [sp, #20]
 800ed44:	f000 fabc 	bl	800f2c0 <__lshift>
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	f000 fb24 	bl	800f398 <__mcmp>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	9b05      	ldr	r3, [sp, #20]
 800ed54:	dc02      	bgt.n	800ed5c <_dtoa_r+0x9dc>
 800ed56:	d1de      	bne.n	800ed16 <_dtoa_r+0x996>
 800ed58:	07da      	lsls	r2, r3, #31
 800ed5a:	d5dc      	bpl.n	800ed16 <_dtoa_r+0x996>
 800ed5c:	2b39      	cmp	r3, #57	; 0x39
 800ed5e:	d1d8      	bne.n	800ed12 <_dtoa_r+0x992>
 800ed60:	9a02      	ldr	r2, [sp, #8]
 800ed62:	2339      	movs	r3, #57	; 0x39
 800ed64:	7013      	strb	r3, [r2, #0]
 800ed66:	4643      	mov	r3, r8
 800ed68:	4698      	mov	r8, r3
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ed70:	2a39      	cmp	r2, #57	; 0x39
 800ed72:	d051      	beq.n	800ee18 <_dtoa_r+0xa98>
 800ed74:	3201      	adds	r2, #1
 800ed76:	701a      	strb	r2, [r3, #0]
 800ed78:	e745      	b.n	800ec06 <_dtoa_r+0x886>
 800ed7a:	2a00      	cmp	r2, #0
 800ed7c:	dd03      	ble.n	800ed86 <_dtoa_r+0xa06>
 800ed7e:	2b39      	cmp	r3, #57	; 0x39
 800ed80:	d0ee      	beq.n	800ed60 <_dtoa_r+0x9e0>
 800ed82:	3301      	adds	r3, #1
 800ed84:	e7c7      	b.n	800ed16 <_dtoa_r+0x996>
 800ed86:	9a05      	ldr	r2, [sp, #20]
 800ed88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed8a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ed8e:	428a      	cmp	r2, r1
 800ed90:	d02b      	beq.n	800edea <_dtoa_r+0xa6a>
 800ed92:	4629      	mov	r1, r5
 800ed94:	2300      	movs	r3, #0
 800ed96:	220a      	movs	r2, #10
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f000 f8e1 	bl	800ef60 <__multadd>
 800ed9e:	45b9      	cmp	r9, r7
 800eda0:	4605      	mov	r5, r0
 800eda2:	f04f 0300 	mov.w	r3, #0
 800eda6:	f04f 020a 	mov.w	r2, #10
 800edaa:	4649      	mov	r1, r9
 800edac:	4630      	mov	r0, r6
 800edae:	d107      	bne.n	800edc0 <_dtoa_r+0xa40>
 800edb0:	f000 f8d6 	bl	800ef60 <__multadd>
 800edb4:	4681      	mov	r9, r0
 800edb6:	4607      	mov	r7, r0
 800edb8:	9b05      	ldr	r3, [sp, #20]
 800edba:	3301      	adds	r3, #1
 800edbc:	9305      	str	r3, [sp, #20]
 800edbe:	e774      	b.n	800ecaa <_dtoa_r+0x92a>
 800edc0:	f000 f8ce 	bl	800ef60 <__multadd>
 800edc4:	4639      	mov	r1, r7
 800edc6:	4681      	mov	r9, r0
 800edc8:	2300      	movs	r3, #0
 800edca:	220a      	movs	r2, #10
 800edcc:	4630      	mov	r0, r6
 800edce:	f000 f8c7 	bl	800ef60 <__multadd>
 800edd2:	4607      	mov	r7, r0
 800edd4:	e7f0      	b.n	800edb8 <_dtoa_r+0xa38>
 800edd6:	f1ba 0f00 	cmp.w	sl, #0
 800edda:	9a00      	ldr	r2, [sp, #0]
 800eddc:	bfcc      	ite	gt
 800edde:	46d0      	movgt	r8, sl
 800ede0:	f04f 0801 	movle.w	r8, #1
 800ede4:	4490      	add	r8, r2
 800ede6:	f04f 0900 	mov.w	r9, #0
 800edea:	4629      	mov	r1, r5
 800edec:	2201      	movs	r2, #1
 800edee:	4630      	mov	r0, r6
 800edf0:	9302      	str	r3, [sp, #8]
 800edf2:	f000 fa65 	bl	800f2c0 <__lshift>
 800edf6:	4621      	mov	r1, r4
 800edf8:	4605      	mov	r5, r0
 800edfa:	f000 facd 	bl	800f398 <__mcmp>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	dcb1      	bgt.n	800ed66 <_dtoa_r+0x9e6>
 800ee02:	d102      	bne.n	800ee0a <_dtoa_r+0xa8a>
 800ee04:	9b02      	ldr	r3, [sp, #8]
 800ee06:	07db      	lsls	r3, r3, #31
 800ee08:	d4ad      	bmi.n	800ed66 <_dtoa_r+0x9e6>
 800ee0a:	4643      	mov	r3, r8
 800ee0c:	4698      	mov	r8, r3
 800ee0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee12:	2a30      	cmp	r2, #48	; 0x30
 800ee14:	d0fa      	beq.n	800ee0c <_dtoa_r+0xa8c>
 800ee16:	e6f6      	b.n	800ec06 <_dtoa_r+0x886>
 800ee18:	9a00      	ldr	r2, [sp, #0]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d1a4      	bne.n	800ed68 <_dtoa_r+0x9e8>
 800ee1e:	f10b 0b01 	add.w	fp, fp, #1
 800ee22:	2331      	movs	r3, #49	; 0x31
 800ee24:	e778      	b.n	800ed18 <_dtoa_r+0x998>
 800ee26:	4b15      	ldr	r3, [pc, #84]	; (800ee7c <_dtoa_r+0xafc>)
 800ee28:	f7ff bb12 	b.w	800e450 <_dtoa_r+0xd0>
 800ee2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f47f aaee 	bne.w	800e410 <_dtoa_r+0x90>
 800ee34:	4b12      	ldr	r3, [pc, #72]	; (800ee80 <_dtoa_r+0xb00>)
 800ee36:	f7ff bb0b 	b.w	800e450 <_dtoa_r+0xd0>
 800ee3a:	f1ba 0f00 	cmp.w	sl, #0
 800ee3e:	dc03      	bgt.n	800ee48 <_dtoa_r+0xac8>
 800ee40:	9b07      	ldr	r3, [sp, #28]
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	f73f aec7 	bgt.w	800ebd6 <_dtoa_r+0x856>
 800ee48:	f8dd 8000 	ldr.w	r8, [sp]
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4628      	mov	r0, r5
 800ee50:	f7ff fa08 	bl	800e264 <quorem>
 800ee54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ee58:	f808 3b01 	strb.w	r3, [r8], #1
 800ee5c:	9a00      	ldr	r2, [sp, #0]
 800ee5e:	eba8 0202 	sub.w	r2, r8, r2
 800ee62:	4592      	cmp	sl, r2
 800ee64:	ddb7      	ble.n	800edd6 <_dtoa_r+0xa56>
 800ee66:	4629      	mov	r1, r5
 800ee68:	2300      	movs	r3, #0
 800ee6a:	220a      	movs	r2, #10
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f000 f877 	bl	800ef60 <__multadd>
 800ee72:	4605      	mov	r5, r0
 800ee74:	e7ea      	b.n	800ee4c <_dtoa_r+0xacc>
 800ee76:	bf00      	nop
 800ee78:	080112e3 	.word	0x080112e3
 800ee7c:	0801123c 	.word	0x0801123c
 800ee80:	08011260 	.word	0x08011260

0800ee84 <_localeconv_r>:
 800ee84:	4800      	ldr	r0, [pc, #0]	; (800ee88 <_localeconv_r+0x4>)
 800ee86:	4770      	bx	lr
 800ee88:	24000164 	.word	0x24000164

0800ee8c <malloc>:
 800ee8c:	4b02      	ldr	r3, [pc, #8]	; (800ee98 <malloc+0xc>)
 800ee8e:	4601      	mov	r1, r0
 800ee90:	6818      	ldr	r0, [r3, #0]
 800ee92:	f000 bbe1 	b.w	800f658 <_malloc_r>
 800ee96:	bf00      	nop
 800ee98:	24000010 	.word	0x24000010

0800ee9c <_Balloc>:
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eea0:	4604      	mov	r4, r0
 800eea2:	460d      	mov	r5, r1
 800eea4:	b976      	cbnz	r6, 800eec4 <_Balloc+0x28>
 800eea6:	2010      	movs	r0, #16
 800eea8:	f7ff fff0 	bl	800ee8c <malloc>
 800eeac:	4602      	mov	r2, r0
 800eeae:	6260      	str	r0, [r4, #36]	; 0x24
 800eeb0:	b920      	cbnz	r0, 800eebc <_Balloc+0x20>
 800eeb2:	4b18      	ldr	r3, [pc, #96]	; (800ef14 <_Balloc+0x78>)
 800eeb4:	4818      	ldr	r0, [pc, #96]	; (800ef18 <_Balloc+0x7c>)
 800eeb6:	2166      	movs	r1, #102	; 0x66
 800eeb8:	f000 fd94 	bl	800f9e4 <__assert_func>
 800eebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eec0:	6006      	str	r6, [r0, #0]
 800eec2:	60c6      	str	r6, [r0, #12]
 800eec4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eec6:	68f3      	ldr	r3, [r6, #12]
 800eec8:	b183      	cbz	r3, 800eeec <_Balloc+0x50>
 800eeca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eed2:	b9b8      	cbnz	r0, 800ef04 <_Balloc+0x68>
 800eed4:	2101      	movs	r1, #1
 800eed6:	fa01 f605 	lsl.w	r6, r1, r5
 800eeda:	1d72      	adds	r2, r6, #5
 800eedc:	0092      	lsls	r2, r2, #2
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 fb5a 	bl	800f598 <_calloc_r>
 800eee4:	b160      	cbz	r0, 800ef00 <_Balloc+0x64>
 800eee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eeea:	e00e      	b.n	800ef0a <_Balloc+0x6e>
 800eeec:	2221      	movs	r2, #33	; 0x21
 800eeee:	2104      	movs	r1, #4
 800eef0:	4620      	mov	r0, r4
 800eef2:	f000 fb51 	bl	800f598 <_calloc_r>
 800eef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eef8:	60f0      	str	r0, [r6, #12]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e4      	bne.n	800eeca <_Balloc+0x2e>
 800ef00:	2000      	movs	r0, #0
 800ef02:	bd70      	pop	{r4, r5, r6, pc}
 800ef04:	6802      	ldr	r2, [r0, #0]
 800ef06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef10:	e7f7      	b.n	800ef02 <_Balloc+0x66>
 800ef12:	bf00      	nop
 800ef14:	0801126d 	.word	0x0801126d
 800ef18:	080112f4 	.word	0x080112f4

0800ef1c <_Bfree>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef20:	4605      	mov	r5, r0
 800ef22:	460c      	mov	r4, r1
 800ef24:	b976      	cbnz	r6, 800ef44 <_Bfree+0x28>
 800ef26:	2010      	movs	r0, #16
 800ef28:	f7ff ffb0 	bl	800ee8c <malloc>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	6268      	str	r0, [r5, #36]	; 0x24
 800ef30:	b920      	cbnz	r0, 800ef3c <_Bfree+0x20>
 800ef32:	4b09      	ldr	r3, [pc, #36]	; (800ef58 <_Bfree+0x3c>)
 800ef34:	4809      	ldr	r0, [pc, #36]	; (800ef5c <_Bfree+0x40>)
 800ef36:	218a      	movs	r1, #138	; 0x8a
 800ef38:	f000 fd54 	bl	800f9e4 <__assert_func>
 800ef3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef40:	6006      	str	r6, [r0, #0]
 800ef42:	60c6      	str	r6, [r0, #12]
 800ef44:	b13c      	cbz	r4, 800ef56 <_Bfree+0x3a>
 800ef46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef48:	6862      	ldr	r2, [r4, #4]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef50:	6021      	str	r1, [r4, #0]
 800ef52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	0801126d 	.word	0x0801126d
 800ef5c:	080112f4 	.word	0x080112f4

0800ef60 <__multadd>:
 800ef60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef64:	690e      	ldr	r6, [r1, #16]
 800ef66:	4607      	mov	r7, r0
 800ef68:	4698      	mov	r8, r3
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	f101 0014 	add.w	r0, r1, #20
 800ef70:	2300      	movs	r3, #0
 800ef72:	6805      	ldr	r5, [r0, #0]
 800ef74:	b2a9      	uxth	r1, r5
 800ef76:	fb02 8101 	mla	r1, r2, r1, r8
 800ef7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ef7e:	0c2d      	lsrs	r5, r5, #16
 800ef80:	fb02 c505 	mla	r5, r2, r5, ip
 800ef84:	b289      	uxth	r1, r1
 800ef86:	3301      	adds	r3, #1
 800ef88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ef8c:	429e      	cmp	r6, r3
 800ef8e:	f840 1b04 	str.w	r1, [r0], #4
 800ef92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ef96:	dcec      	bgt.n	800ef72 <__multadd+0x12>
 800ef98:	f1b8 0f00 	cmp.w	r8, #0
 800ef9c:	d022      	beq.n	800efe4 <__multadd+0x84>
 800ef9e:	68a3      	ldr	r3, [r4, #8]
 800efa0:	42b3      	cmp	r3, r6
 800efa2:	dc19      	bgt.n	800efd8 <__multadd+0x78>
 800efa4:	6861      	ldr	r1, [r4, #4]
 800efa6:	4638      	mov	r0, r7
 800efa8:	3101      	adds	r1, #1
 800efaa:	f7ff ff77 	bl	800ee9c <_Balloc>
 800efae:	4605      	mov	r5, r0
 800efb0:	b928      	cbnz	r0, 800efbe <__multadd+0x5e>
 800efb2:	4602      	mov	r2, r0
 800efb4:	4b0d      	ldr	r3, [pc, #52]	; (800efec <__multadd+0x8c>)
 800efb6:	480e      	ldr	r0, [pc, #56]	; (800eff0 <__multadd+0x90>)
 800efb8:	21b5      	movs	r1, #181	; 0xb5
 800efba:	f000 fd13 	bl	800f9e4 <__assert_func>
 800efbe:	6922      	ldr	r2, [r4, #16]
 800efc0:	3202      	adds	r2, #2
 800efc2:	f104 010c 	add.w	r1, r4, #12
 800efc6:	0092      	lsls	r2, r2, #2
 800efc8:	300c      	adds	r0, #12
 800efca:	f7fe fc9d 	bl	800d908 <memcpy>
 800efce:	4621      	mov	r1, r4
 800efd0:	4638      	mov	r0, r7
 800efd2:	f7ff ffa3 	bl	800ef1c <_Bfree>
 800efd6:	462c      	mov	r4, r5
 800efd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800efdc:	3601      	adds	r6, #1
 800efde:	f8c3 8014 	str.w	r8, [r3, #20]
 800efe2:	6126      	str	r6, [r4, #16]
 800efe4:	4620      	mov	r0, r4
 800efe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efea:	bf00      	nop
 800efec:	080112e3 	.word	0x080112e3
 800eff0:	080112f4 	.word	0x080112f4

0800eff4 <__hi0bits>:
 800eff4:	0c03      	lsrs	r3, r0, #16
 800eff6:	041b      	lsls	r3, r3, #16
 800eff8:	b9d3      	cbnz	r3, 800f030 <__hi0bits+0x3c>
 800effa:	0400      	lsls	r0, r0, #16
 800effc:	2310      	movs	r3, #16
 800effe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f002:	bf04      	itt	eq
 800f004:	0200      	lsleq	r0, r0, #8
 800f006:	3308      	addeq	r3, #8
 800f008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f00c:	bf04      	itt	eq
 800f00e:	0100      	lsleq	r0, r0, #4
 800f010:	3304      	addeq	r3, #4
 800f012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f016:	bf04      	itt	eq
 800f018:	0080      	lsleq	r0, r0, #2
 800f01a:	3302      	addeq	r3, #2
 800f01c:	2800      	cmp	r0, #0
 800f01e:	db05      	blt.n	800f02c <__hi0bits+0x38>
 800f020:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f024:	f103 0301 	add.w	r3, r3, #1
 800f028:	bf08      	it	eq
 800f02a:	2320      	moveq	r3, #32
 800f02c:	4618      	mov	r0, r3
 800f02e:	4770      	bx	lr
 800f030:	2300      	movs	r3, #0
 800f032:	e7e4      	b.n	800effe <__hi0bits+0xa>

0800f034 <__lo0bits>:
 800f034:	6803      	ldr	r3, [r0, #0]
 800f036:	f013 0207 	ands.w	r2, r3, #7
 800f03a:	4601      	mov	r1, r0
 800f03c:	d00b      	beq.n	800f056 <__lo0bits+0x22>
 800f03e:	07da      	lsls	r2, r3, #31
 800f040:	d424      	bmi.n	800f08c <__lo0bits+0x58>
 800f042:	0798      	lsls	r0, r3, #30
 800f044:	bf49      	itett	mi
 800f046:	085b      	lsrmi	r3, r3, #1
 800f048:	089b      	lsrpl	r3, r3, #2
 800f04a:	2001      	movmi	r0, #1
 800f04c:	600b      	strmi	r3, [r1, #0]
 800f04e:	bf5c      	itt	pl
 800f050:	600b      	strpl	r3, [r1, #0]
 800f052:	2002      	movpl	r0, #2
 800f054:	4770      	bx	lr
 800f056:	b298      	uxth	r0, r3
 800f058:	b9b0      	cbnz	r0, 800f088 <__lo0bits+0x54>
 800f05a:	0c1b      	lsrs	r3, r3, #16
 800f05c:	2010      	movs	r0, #16
 800f05e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f062:	bf04      	itt	eq
 800f064:	0a1b      	lsreq	r3, r3, #8
 800f066:	3008      	addeq	r0, #8
 800f068:	071a      	lsls	r2, r3, #28
 800f06a:	bf04      	itt	eq
 800f06c:	091b      	lsreq	r3, r3, #4
 800f06e:	3004      	addeq	r0, #4
 800f070:	079a      	lsls	r2, r3, #30
 800f072:	bf04      	itt	eq
 800f074:	089b      	lsreq	r3, r3, #2
 800f076:	3002      	addeq	r0, #2
 800f078:	07da      	lsls	r2, r3, #31
 800f07a:	d403      	bmi.n	800f084 <__lo0bits+0x50>
 800f07c:	085b      	lsrs	r3, r3, #1
 800f07e:	f100 0001 	add.w	r0, r0, #1
 800f082:	d005      	beq.n	800f090 <__lo0bits+0x5c>
 800f084:	600b      	str	r3, [r1, #0]
 800f086:	4770      	bx	lr
 800f088:	4610      	mov	r0, r2
 800f08a:	e7e8      	b.n	800f05e <__lo0bits+0x2a>
 800f08c:	2000      	movs	r0, #0
 800f08e:	4770      	bx	lr
 800f090:	2020      	movs	r0, #32
 800f092:	4770      	bx	lr

0800f094 <__i2b>:
 800f094:	b510      	push	{r4, lr}
 800f096:	460c      	mov	r4, r1
 800f098:	2101      	movs	r1, #1
 800f09a:	f7ff feff 	bl	800ee9c <_Balloc>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	b928      	cbnz	r0, 800f0ae <__i2b+0x1a>
 800f0a2:	4b05      	ldr	r3, [pc, #20]	; (800f0b8 <__i2b+0x24>)
 800f0a4:	4805      	ldr	r0, [pc, #20]	; (800f0bc <__i2b+0x28>)
 800f0a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f0aa:	f000 fc9b 	bl	800f9e4 <__assert_func>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	6144      	str	r4, [r0, #20]
 800f0b2:	6103      	str	r3, [r0, #16]
 800f0b4:	bd10      	pop	{r4, pc}
 800f0b6:	bf00      	nop
 800f0b8:	080112e3 	.word	0x080112e3
 800f0bc:	080112f4 	.word	0x080112f4

0800f0c0 <__multiply>:
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	4614      	mov	r4, r2
 800f0c6:	690a      	ldr	r2, [r1, #16]
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	bfb8      	it	lt
 800f0ce:	460b      	movlt	r3, r1
 800f0d0:	460d      	mov	r5, r1
 800f0d2:	bfbc      	itt	lt
 800f0d4:	4625      	movlt	r5, r4
 800f0d6:	461c      	movlt	r4, r3
 800f0d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f0dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f0e0:	68ab      	ldr	r3, [r5, #8]
 800f0e2:	6869      	ldr	r1, [r5, #4]
 800f0e4:	eb0a 0709 	add.w	r7, sl, r9
 800f0e8:	42bb      	cmp	r3, r7
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	bfb8      	it	lt
 800f0ee:	3101      	addlt	r1, #1
 800f0f0:	f7ff fed4 	bl	800ee9c <_Balloc>
 800f0f4:	b930      	cbnz	r0, 800f104 <__multiply+0x44>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	4b42      	ldr	r3, [pc, #264]	; (800f204 <__multiply+0x144>)
 800f0fa:	4843      	ldr	r0, [pc, #268]	; (800f208 <__multiply+0x148>)
 800f0fc:	f240 115d 	movw	r1, #349	; 0x15d
 800f100:	f000 fc70 	bl	800f9e4 <__assert_func>
 800f104:	f100 0614 	add.w	r6, r0, #20
 800f108:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f10c:	4633      	mov	r3, r6
 800f10e:	2200      	movs	r2, #0
 800f110:	4543      	cmp	r3, r8
 800f112:	d31e      	bcc.n	800f152 <__multiply+0x92>
 800f114:	f105 0c14 	add.w	ip, r5, #20
 800f118:	f104 0314 	add.w	r3, r4, #20
 800f11c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f120:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f124:	9202      	str	r2, [sp, #8]
 800f126:	ebac 0205 	sub.w	r2, ip, r5
 800f12a:	3a15      	subs	r2, #21
 800f12c:	f022 0203 	bic.w	r2, r2, #3
 800f130:	3204      	adds	r2, #4
 800f132:	f105 0115 	add.w	r1, r5, #21
 800f136:	458c      	cmp	ip, r1
 800f138:	bf38      	it	cc
 800f13a:	2204      	movcc	r2, #4
 800f13c:	9201      	str	r2, [sp, #4]
 800f13e:	9a02      	ldr	r2, [sp, #8]
 800f140:	9303      	str	r3, [sp, #12]
 800f142:	429a      	cmp	r2, r3
 800f144:	d808      	bhi.n	800f158 <__multiply+0x98>
 800f146:	2f00      	cmp	r7, #0
 800f148:	dc55      	bgt.n	800f1f6 <__multiply+0x136>
 800f14a:	6107      	str	r7, [r0, #16]
 800f14c:	b005      	add	sp, #20
 800f14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f152:	f843 2b04 	str.w	r2, [r3], #4
 800f156:	e7db      	b.n	800f110 <__multiply+0x50>
 800f158:	f8b3 a000 	ldrh.w	sl, [r3]
 800f15c:	f1ba 0f00 	cmp.w	sl, #0
 800f160:	d020      	beq.n	800f1a4 <__multiply+0xe4>
 800f162:	f105 0e14 	add.w	lr, r5, #20
 800f166:	46b1      	mov	r9, r6
 800f168:	2200      	movs	r2, #0
 800f16a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f16e:	f8d9 b000 	ldr.w	fp, [r9]
 800f172:	b2a1      	uxth	r1, r4
 800f174:	fa1f fb8b 	uxth.w	fp, fp
 800f178:	fb0a b101 	mla	r1, sl, r1, fp
 800f17c:	4411      	add	r1, r2
 800f17e:	f8d9 2000 	ldr.w	r2, [r9]
 800f182:	0c24      	lsrs	r4, r4, #16
 800f184:	0c12      	lsrs	r2, r2, #16
 800f186:	fb0a 2404 	mla	r4, sl, r4, r2
 800f18a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f18e:	b289      	uxth	r1, r1
 800f190:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f194:	45f4      	cmp	ip, lr
 800f196:	f849 1b04 	str.w	r1, [r9], #4
 800f19a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f19e:	d8e4      	bhi.n	800f16a <__multiply+0xaa>
 800f1a0:	9901      	ldr	r1, [sp, #4]
 800f1a2:	5072      	str	r2, [r6, r1]
 800f1a4:	9a03      	ldr	r2, [sp, #12]
 800f1a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	f1b9 0f00 	cmp.w	r9, #0
 800f1b0:	d01f      	beq.n	800f1f2 <__multiply+0x132>
 800f1b2:	6834      	ldr	r4, [r6, #0]
 800f1b4:	f105 0114 	add.w	r1, r5, #20
 800f1b8:	46b6      	mov	lr, r6
 800f1ba:	f04f 0a00 	mov.w	sl, #0
 800f1be:	880a      	ldrh	r2, [r1, #0]
 800f1c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f1c4:	fb09 b202 	mla	r2, r9, r2, fp
 800f1c8:	4492      	add	sl, r2
 800f1ca:	b2a4      	uxth	r4, r4
 800f1cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f1d0:	f84e 4b04 	str.w	r4, [lr], #4
 800f1d4:	f851 4b04 	ldr.w	r4, [r1], #4
 800f1d8:	f8be 2000 	ldrh.w	r2, [lr]
 800f1dc:	0c24      	lsrs	r4, r4, #16
 800f1de:	fb09 2404 	mla	r4, r9, r4, r2
 800f1e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f1e6:	458c      	cmp	ip, r1
 800f1e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f1ec:	d8e7      	bhi.n	800f1be <__multiply+0xfe>
 800f1ee:	9a01      	ldr	r2, [sp, #4]
 800f1f0:	50b4      	str	r4, [r6, r2]
 800f1f2:	3604      	adds	r6, #4
 800f1f4:	e7a3      	b.n	800f13e <__multiply+0x7e>
 800f1f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1a5      	bne.n	800f14a <__multiply+0x8a>
 800f1fe:	3f01      	subs	r7, #1
 800f200:	e7a1      	b.n	800f146 <__multiply+0x86>
 800f202:	bf00      	nop
 800f204:	080112e3 	.word	0x080112e3
 800f208:	080112f4 	.word	0x080112f4

0800f20c <__pow5mult>:
 800f20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f210:	4615      	mov	r5, r2
 800f212:	f012 0203 	ands.w	r2, r2, #3
 800f216:	4606      	mov	r6, r0
 800f218:	460f      	mov	r7, r1
 800f21a:	d007      	beq.n	800f22c <__pow5mult+0x20>
 800f21c:	4c25      	ldr	r4, [pc, #148]	; (800f2b4 <__pow5mult+0xa8>)
 800f21e:	3a01      	subs	r2, #1
 800f220:	2300      	movs	r3, #0
 800f222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f226:	f7ff fe9b 	bl	800ef60 <__multadd>
 800f22a:	4607      	mov	r7, r0
 800f22c:	10ad      	asrs	r5, r5, #2
 800f22e:	d03d      	beq.n	800f2ac <__pow5mult+0xa0>
 800f230:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f232:	b97c      	cbnz	r4, 800f254 <__pow5mult+0x48>
 800f234:	2010      	movs	r0, #16
 800f236:	f7ff fe29 	bl	800ee8c <malloc>
 800f23a:	4602      	mov	r2, r0
 800f23c:	6270      	str	r0, [r6, #36]	; 0x24
 800f23e:	b928      	cbnz	r0, 800f24c <__pow5mult+0x40>
 800f240:	4b1d      	ldr	r3, [pc, #116]	; (800f2b8 <__pow5mult+0xac>)
 800f242:	481e      	ldr	r0, [pc, #120]	; (800f2bc <__pow5mult+0xb0>)
 800f244:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f248:	f000 fbcc 	bl	800f9e4 <__assert_func>
 800f24c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f250:	6004      	str	r4, [r0, #0]
 800f252:	60c4      	str	r4, [r0, #12]
 800f254:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f25c:	b94c      	cbnz	r4, 800f272 <__pow5mult+0x66>
 800f25e:	f240 2171 	movw	r1, #625	; 0x271
 800f262:	4630      	mov	r0, r6
 800f264:	f7ff ff16 	bl	800f094 <__i2b>
 800f268:	2300      	movs	r3, #0
 800f26a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f26e:	4604      	mov	r4, r0
 800f270:	6003      	str	r3, [r0, #0]
 800f272:	f04f 0900 	mov.w	r9, #0
 800f276:	07eb      	lsls	r3, r5, #31
 800f278:	d50a      	bpl.n	800f290 <__pow5mult+0x84>
 800f27a:	4639      	mov	r1, r7
 800f27c:	4622      	mov	r2, r4
 800f27e:	4630      	mov	r0, r6
 800f280:	f7ff ff1e 	bl	800f0c0 <__multiply>
 800f284:	4639      	mov	r1, r7
 800f286:	4680      	mov	r8, r0
 800f288:	4630      	mov	r0, r6
 800f28a:	f7ff fe47 	bl	800ef1c <_Bfree>
 800f28e:	4647      	mov	r7, r8
 800f290:	106d      	asrs	r5, r5, #1
 800f292:	d00b      	beq.n	800f2ac <__pow5mult+0xa0>
 800f294:	6820      	ldr	r0, [r4, #0]
 800f296:	b938      	cbnz	r0, 800f2a8 <__pow5mult+0x9c>
 800f298:	4622      	mov	r2, r4
 800f29a:	4621      	mov	r1, r4
 800f29c:	4630      	mov	r0, r6
 800f29e:	f7ff ff0f 	bl	800f0c0 <__multiply>
 800f2a2:	6020      	str	r0, [r4, #0]
 800f2a4:	f8c0 9000 	str.w	r9, [r0]
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	e7e4      	b.n	800f276 <__pow5mult+0x6a>
 800f2ac:	4638      	mov	r0, r7
 800f2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b2:	bf00      	nop
 800f2b4:	08011448 	.word	0x08011448
 800f2b8:	0801126d 	.word	0x0801126d
 800f2bc:	080112f4 	.word	0x080112f4

0800f2c0 <__lshift>:
 800f2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	6849      	ldr	r1, [r1, #4]
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2ce:	68a3      	ldr	r3, [r4, #8]
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	4691      	mov	r9, r2
 800f2d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2d8:	f108 0601 	add.w	r6, r8, #1
 800f2dc:	42b3      	cmp	r3, r6
 800f2de:	db0b      	blt.n	800f2f8 <__lshift+0x38>
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	f7ff fddb 	bl	800ee9c <_Balloc>
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	b948      	cbnz	r0, 800f2fe <__lshift+0x3e>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	4b28      	ldr	r3, [pc, #160]	; (800f390 <__lshift+0xd0>)
 800f2ee:	4829      	ldr	r0, [pc, #164]	; (800f394 <__lshift+0xd4>)
 800f2f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f2f4:	f000 fb76 	bl	800f9e4 <__assert_func>
 800f2f8:	3101      	adds	r1, #1
 800f2fa:	005b      	lsls	r3, r3, #1
 800f2fc:	e7ee      	b.n	800f2dc <__lshift+0x1c>
 800f2fe:	2300      	movs	r3, #0
 800f300:	f100 0114 	add.w	r1, r0, #20
 800f304:	f100 0210 	add.w	r2, r0, #16
 800f308:	4618      	mov	r0, r3
 800f30a:	4553      	cmp	r3, sl
 800f30c:	db33      	blt.n	800f376 <__lshift+0xb6>
 800f30e:	6920      	ldr	r0, [r4, #16]
 800f310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f314:	f104 0314 	add.w	r3, r4, #20
 800f318:	f019 091f 	ands.w	r9, r9, #31
 800f31c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f324:	d02b      	beq.n	800f37e <__lshift+0xbe>
 800f326:	f1c9 0e20 	rsb	lr, r9, #32
 800f32a:	468a      	mov	sl, r1
 800f32c:	2200      	movs	r2, #0
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	fa00 f009 	lsl.w	r0, r0, r9
 800f334:	4302      	orrs	r2, r0
 800f336:	f84a 2b04 	str.w	r2, [sl], #4
 800f33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f33e:	459c      	cmp	ip, r3
 800f340:	fa22 f20e 	lsr.w	r2, r2, lr
 800f344:	d8f3      	bhi.n	800f32e <__lshift+0x6e>
 800f346:	ebac 0304 	sub.w	r3, ip, r4
 800f34a:	3b15      	subs	r3, #21
 800f34c:	f023 0303 	bic.w	r3, r3, #3
 800f350:	3304      	adds	r3, #4
 800f352:	f104 0015 	add.w	r0, r4, #21
 800f356:	4584      	cmp	ip, r0
 800f358:	bf38      	it	cc
 800f35a:	2304      	movcc	r3, #4
 800f35c:	50ca      	str	r2, [r1, r3]
 800f35e:	b10a      	cbz	r2, 800f364 <__lshift+0xa4>
 800f360:	f108 0602 	add.w	r6, r8, #2
 800f364:	3e01      	subs	r6, #1
 800f366:	4638      	mov	r0, r7
 800f368:	612e      	str	r6, [r5, #16]
 800f36a:	4621      	mov	r1, r4
 800f36c:	f7ff fdd6 	bl	800ef1c <_Bfree>
 800f370:	4628      	mov	r0, r5
 800f372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f376:	f842 0f04 	str.w	r0, [r2, #4]!
 800f37a:	3301      	adds	r3, #1
 800f37c:	e7c5      	b.n	800f30a <__lshift+0x4a>
 800f37e:	3904      	subs	r1, #4
 800f380:	f853 2b04 	ldr.w	r2, [r3], #4
 800f384:	f841 2f04 	str.w	r2, [r1, #4]!
 800f388:	459c      	cmp	ip, r3
 800f38a:	d8f9      	bhi.n	800f380 <__lshift+0xc0>
 800f38c:	e7ea      	b.n	800f364 <__lshift+0xa4>
 800f38e:	bf00      	nop
 800f390:	080112e3 	.word	0x080112e3
 800f394:	080112f4 	.word	0x080112f4

0800f398 <__mcmp>:
 800f398:	b530      	push	{r4, r5, lr}
 800f39a:	6902      	ldr	r2, [r0, #16]
 800f39c:	690c      	ldr	r4, [r1, #16]
 800f39e:	1b12      	subs	r2, r2, r4
 800f3a0:	d10e      	bne.n	800f3c0 <__mcmp+0x28>
 800f3a2:	f100 0314 	add.w	r3, r0, #20
 800f3a6:	3114      	adds	r1, #20
 800f3a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f3ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f3b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f3b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f3b8:	42a5      	cmp	r5, r4
 800f3ba:	d003      	beq.n	800f3c4 <__mcmp+0x2c>
 800f3bc:	d305      	bcc.n	800f3ca <__mcmp+0x32>
 800f3be:	2201      	movs	r2, #1
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	bd30      	pop	{r4, r5, pc}
 800f3c4:	4283      	cmp	r3, r0
 800f3c6:	d3f3      	bcc.n	800f3b0 <__mcmp+0x18>
 800f3c8:	e7fa      	b.n	800f3c0 <__mcmp+0x28>
 800f3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ce:	e7f7      	b.n	800f3c0 <__mcmp+0x28>

0800f3d0 <__mdiff>:
 800f3d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4617      	mov	r7, r2
 800f3de:	f7ff ffdb 	bl	800f398 <__mcmp>
 800f3e2:	1e05      	subs	r5, r0, #0
 800f3e4:	d110      	bne.n	800f408 <__mdiff+0x38>
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f7ff fd57 	bl	800ee9c <_Balloc>
 800f3ee:	b930      	cbnz	r0, 800f3fe <__mdiff+0x2e>
 800f3f0:	4b39      	ldr	r3, [pc, #228]	; (800f4d8 <__mdiff+0x108>)
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	f240 2132 	movw	r1, #562	; 0x232
 800f3f8:	4838      	ldr	r0, [pc, #224]	; (800f4dc <__mdiff+0x10c>)
 800f3fa:	f000 faf3 	bl	800f9e4 <__assert_func>
 800f3fe:	2301      	movs	r3, #1
 800f400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f408:	bfa4      	itt	ge
 800f40a:	463b      	movge	r3, r7
 800f40c:	4627      	movge	r7, r4
 800f40e:	4630      	mov	r0, r6
 800f410:	6879      	ldr	r1, [r7, #4]
 800f412:	bfa6      	itte	ge
 800f414:	461c      	movge	r4, r3
 800f416:	2500      	movge	r5, #0
 800f418:	2501      	movlt	r5, #1
 800f41a:	f7ff fd3f 	bl	800ee9c <_Balloc>
 800f41e:	b920      	cbnz	r0, 800f42a <__mdiff+0x5a>
 800f420:	4b2d      	ldr	r3, [pc, #180]	; (800f4d8 <__mdiff+0x108>)
 800f422:	4602      	mov	r2, r0
 800f424:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f428:	e7e6      	b.n	800f3f8 <__mdiff+0x28>
 800f42a:	693e      	ldr	r6, [r7, #16]
 800f42c:	60c5      	str	r5, [r0, #12]
 800f42e:	6925      	ldr	r5, [r4, #16]
 800f430:	f107 0114 	add.w	r1, r7, #20
 800f434:	f104 0914 	add.w	r9, r4, #20
 800f438:	f100 0e14 	add.w	lr, r0, #20
 800f43c:	f107 0210 	add.w	r2, r7, #16
 800f440:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f444:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f448:	46f2      	mov	sl, lr
 800f44a:	2700      	movs	r7, #0
 800f44c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f450:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f454:	fa1f f883 	uxth.w	r8, r3
 800f458:	fa17 f78b 	uxtah	r7, r7, fp
 800f45c:	0c1b      	lsrs	r3, r3, #16
 800f45e:	eba7 0808 	sub.w	r8, r7, r8
 800f462:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f466:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f46a:	fa1f f888 	uxth.w	r8, r8
 800f46e:	141f      	asrs	r7, r3, #16
 800f470:	454d      	cmp	r5, r9
 800f472:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f476:	f84a 3b04 	str.w	r3, [sl], #4
 800f47a:	d8e7      	bhi.n	800f44c <__mdiff+0x7c>
 800f47c:	1b2b      	subs	r3, r5, r4
 800f47e:	3b15      	subs	r3, #21
 800f480:	f023 0303 	bic.w	r3, r3, #3
 800f484:	3304      	adds	r3, #4
 800f486:	3415      	adds	r4, #21
 800f488:	42a5      	cmp	r5, r4
 800f48a:	bf38      	it	cc
 800f48c:	2304      	movcc	r3, #4
 800f48e:	4419      	add	r1, r3
 800f490:	4473      	add	r3, lr
 800f492:	469e      	mov	lr, r3
 800f494:	460d      	mov	r5, r1
 800f496:	4565      	cmp	r5, ip
 800f498:	d30e      	bcc.n	800f4b8 <__mdiff+0xe8>
 800f49a:	f10c 0203 	add.w	r2, ip, #3
 800f49e:	1a52      	subs	r2, r2, r1
 800f4a0:	f022 0203 	bic.w	r2, r2, #3
 800f4a4:	3903      	subs	r1, #3
 800f4a6:	458c      	cmp	ip, r1
 800f4a8:	bf38      	it	cc
 800f4aa:	2200      	movcc	r2, #0
 800f4ac:	441a      	add	r2, r3
 800f4ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f4b2:	b17b      	cbz	r3, 800f4d4 <__mdiff+0x104>
 800f4b4:	6106      	str	r6, [r0, #16]
 800f4b6:	e7a5      	b.n	800f404 <__mdiff+0x34>
 800f4b8:	f855 8b04 	ldr.w	r8, [r5], #4
 800f4bc:	fa17 f488 	uxtah	r4, r7, r8
 800f4c0:	1422      	asrs	r2, r4, #16
 800f4c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f4c6:	b2a4      	uxth	r4, r4
 800f4c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f4cc:	f84e 4b04 	str.w	r4, [lr], #4
 800f4d0:	1417      	asrs	r7, r2, #16
 800f4d2:	e7e0      	b.n	800f496 <__mdiff+0xc6>
 800f4d4:	3e01      	subs	r6, #1
 800f4d6:	e7ea      	b.n	800f4ae <__mdiff+0xde>
 800f4d8:	080112e3 	.word	0x080112e3
 800f4dc:	080112f4 	.word	0x080112f4

0800f4e0 <__d2b>:
 800f4e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4e4:	4689      	mov	r9, r1
 800f4e6:	2101      	movs	r1, #1
 800f4e8:	ec57 6b10 	vmov	r6, r7, d0
 800f4ec:	4690      	mov	r8, r2
 800f4ee:	f7ff fcd5 	bl	800ee9c <_Balloc>
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	b930      	cbnz	r0, 800f504 <__d2b+0x24>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	4b25      	ldr	r3, [pc, #148]	; (800f590 <__d2b+0xb0>)
 800f4fa:	4826      	ldr	r0, [pc, #152]	; (800f594 <__d2b+0xb4>)
 800f4fc:	f240 310a 	movw	r1, #778	; 0x30a
 800f500:	f000 fa70 	bl	800f9e4 <__assert_func>
 800f504:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f50c:	bb35      	cbnz	r5, 800f55c <__d2b+0x7c>
 800f50e:	2e00      	cmp	r6, #0
 800f510:	9301      	str	r3, [sp, #4]
 800f512:	d028      	beq.n	800f566 <__d2b+0x86>
 800f514:	4668      	mov	r0, sp
 800f516:	9600      	str	r6, [sp, #0]
 800f518:	f7ff fd8c 	bl	800f034 <__lo0bits>
 800f51c:	9900      	ldr	r1, [sp, #0]
 800f51e:	b300      	cbz	r0, 800f562 <__d2b+0x82>
 800f520:	9a01      	ldr	r2, [sp, #4]
 800f522:	f1c0 0320 	rsb	r3, r0, #32
 800f526:	fa02 f303 	lsl.w	r3, r2, r3
 800f52a:	430b      	orrs	r3, r1
 800f52c:	40c2      	lsrs	r2, r0
 800f52e:	6163      	str	r3, [r4, #20]
 800f530:	9201      	str	r2, [sp, #4]
 800f532:	9b01      	ldr	r3, [sp, #4]
 800f534:	61a3      	str	r3, [r4, #24]
 800f536:	2b00      	cmp	r3, #0
 800f538:	bf14      	ite	ne
 800f53a:	2202      	movne	r2, #2
 800f53c:	2201      	moveq	r2, #1
 800f53e:	6122      	str	r2, [r4, #16]
 800f540:	b1d5      	cbz	r5, 800f578 <__d2b+0x98>
 800f542:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f546:	4405      	add	r5, r0
 800f548:	f8c9 5000 	str.w	r5, [r9]
 800f54c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f550:	f8c8 0000 	str.w	r0, [r8]
 800f554:	4620      	mov	r0, r4
 800f556:	b003      	add	sp, #12
 800f558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f55c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f560:	e7d5      	b.n	800f50e <__d2b+0x2e>
 800f562:	6161      	str	r1, [r4, #20]
 800f564:	e7e5      	b.n	800f532 <__d2b+0x52>
 800f566:	a801      	add	r0, sp, #4
 800f568:	f7ff fd64 	bl	800f034 <__lo0bits>
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	6163      	str	r3, [r4, #20]
 800f570:	2201      	movs	r2, #1
 800f572:	6122      	str	r2, [r4, #16]
 800f574:	3020      	adds	r0, #32
 800f576:	e7e3      	b.n	800f540 <__d2b+0x60>
 800f578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f57c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f580:	f8c9 0000 	str.w	r0, [r9]
 800f584:	6918      	ldr	r0, [r3, #16]
 800f586:	f7ff fd35 	bl	800eff4 <__hi0bits>
 800f58a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f58e:	e7df      	b.n	800f550 <__d2b+0x70>
 800f590:	080112e3 	.word	0x080112e3
 800f594:	080112f4 	.word	0x080112f4

0800f598 <_calloc_r>:
 800f598:	b513      	push	{r0, r1, r4, lr}
 800f59a:	434a      	muls	r2, r1
 800f59c:	4611      	mov	r1, r2
 800f59e:	9201      	str	r2, [sp, #4]
 800f5a0:	f000 f85a 	bl	800f658 <_malloc_r>
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	b118      	cbz	r0, 800f5b0 <_calloc_r+0x18>
 800f5a8:	9a01      	ldr	r2, [sp, #4]
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	f7fe f9ba 	bl	800d924 <memset>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	b002      	add	sp, #8
 800f5b4:	bd10      	pop	{r4, pc}
	...

0800f5b8 <_free_r>:
 800f5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ba:	2900      	cmp	r1, #0
 800f5bc:	d048      	beq.n	800f650 <_free_r+0x98>
 800f5be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5c2:	9001      	str	r0, [sp, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f1a1 0404 	sub.w	r4, r1, #4
 800f5ca:	bfb8      	it	lt
 800f5cc:	18e4      	addlt	r4, r4, r3
 800f5ce:	f000 fa65 	bl	800fa9c <__malloc_lock>
 800f5d2:	4a20      	ldr	r2, [pc, #128]	; (800f654 <_free_r+0x9c>)
 800f5d4:	9801      	ldr	r0, [sp, #4]
 800f5d6:	6813      	ldr	r3, [r2, #0]
 800f5d8:	4615      	mov	r5, r2
 800f5da:	b933      	cbnz	r3, 800f5ea <_free_r+0x32>
 800f5dc:	6063      	str	r3, [r4, #4]
 800f5de:	6014      	str	r4, [r2, #0]
 800f5e0:	b003      	add	sp, #12
 800f5e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5e6:	f000 ba5f 	b.w	800faa8 <__malloc_unlock>
 800f5ea:	42a3      	cmp	r3, r4
 800f5ec:	d90b      	bls.n	800f606 <_free_r+0x4e>
 800f5ee:	6821      	ldr	r1, [r4, #0]
 800f5f0:	1862      	adds	r2, r4, r1
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	bf04      	itt	eq
 800f5f6:	681a      	ldreq	r2, [r3, #0]
 800f5f8:	685b      	ldreq	r3, [r3, #4]
 800f5fa:	6063      	str	r3, [r4, #4]
 800f5fc:	bf04      	itt	eq
 800f5fe:	1852      	addeq	r2, r2, r1
 800f600:	6022      	streq	r2, [r4, #0]
 800f602:	602c      	str	r4, [r5, #0]
 800f604:	e7ec      	b.n	800f5e0 <_free_r+0x28>
 800f606:	461a      	mov	r2, r3
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	b10b      	cbz	r3, 800f610 <_free_r+0x58>
 800f60c:	42a3      	cmp	r3, r4
 800f60e:	d9fa      	bls.n	800f606 <_free_r+0x4e>
 800f610:	6811      	ldr	r1, [r2, #0]
 800f612:	1855      	adds	r5, r2, r1
 800f614:	42a5      	cmp	r5, r4
 800f616:	d10b      	bne.n	800f630 <_free_r+0x78>
 800f618:	6824      	ldr	r4, [r4, #0]
 800f61a:	4421      	add	r1, r4
 800f61c:	1854      	adds	r4, r2, r1
 800f61e:	42a3      	cmp	r3, r4
 800f620:	6011      	str	r1, [r2, #0]
 800f622:	d1dd      	bne.n	800f5e0 <_free_r+0x28>
 800f624:	681c      	ldr	r4, [r3, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	6053      	str	r3, [r2, #4]
 800f62a:	4421      	add	r1, r4
 800f62c:	6011      	str	r1, [r2, #0]
 800f62e:	e7d7      	b.n	800f5e0 <_free_r+0x28>
 800f630:	d902      	bls.n	800f638 <_free_r+0x80>
 800f632:	230c      	movs	r3, #12
 800f634:	6003      	str	r3, [r0, #0]
 800f636:	e7d3      	b.n	800f5e0 <_free_r+0x28>
 800f638:	6825      	ldr	r5, [r4, #0]
 800f63a:	1961      	adds	r1, r4, r5
 800f63c:	428b      	cmp	r3, r1
 800f63e:	bf04      	itt	eq
 800f640:	6819      	ldreq	r1, [r3, #0]
 800f642:	685b      	ldreq	r3, [r3, #4]
 800f644:	6063      	str	r3, [r4, #4]
 800f646:	bf04      	itt	eq
 800f648:	1949      	addeq	r1, r1, r5
 800f64a:	6021      	streq	r1, [r4, #0]
 800f64c:	6054      	str	r4, [r2, #4]
 800f64e:	e7c7      	b.n	800f5e0 <_free_r+0x28>
 800f650:	b003      	add	sp, #12
 800f652:	bd30      	pop	{r4, r5, pc}
 800f654:	240014a0 	.word	0x240014a0

0800f658 <_malloc_r>:
 800f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65a:	1ccd      	adds	r5, r1, #3
 800f65c:	f025 0503 	bic.w	r5, r5, #3
 800f660:	3508      	adds	r5, #8
 800f662:	2d0c      	cmp	r5, #12
 800f664:	bf38      	it	cc
 800f666:	250c      	movcc	r5, #12
 800f668:	2d00      	cmp	r5, #0
 800f66a:	4606      	mov	r6, r0
 800f66c:	db01      	blt.n	800f672 <_malloc_r+0x1a>
 800f66e:	42a9      	cmp	r1, r5
 800f670:	d903      	bls.n	800f67a <_malloc_r+0x22>
 800f672:	230c      	movs	r3, #12
 800f674:	6033      	str	r3, [r6, #0]
 800f676:	2000      	movs	r0, #0
 800f678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f67a:	f000 fa0f 	bl	800fa9c <__malloc_lock>
 800f67e:	4921      	ldr	r1, [pc, #132]	; (800f704 <_malloc_r+0xac>)
 800f680:	680a      	ldr	r2, [r1, #0]
 800f682:	4614      	mov	r4, r2
 800f684:	b99c      	cbnz	r4, 800f6ae <_malloc_r+0x56>
 800f686:	4f20      	ldr	r7, [pc, #128]	; (800f708 <_malloc_r+0xb0>)
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	b923      	cbnz	r3, 800f696 <_malloc_r+0x3e>
 800f68c:	4621      	mov	r1, r4
 800f68e:	4630      	mov	r0, r6
 800f690:	f000 f998 	bl	800f9c4 <_sbrk_r>
 800f694:	6038      	str	r0, [r7, #0]
 800f696:	4629      	mov	r1, r5
 800f698:	4630      	mov	r0, r6
 800f69a:	f000 f993 	bl	800f9c4 <_sbrk_r>
 800f69e:	1c43      	adds	r3, r0, #1
 800f6a0:	d123      	bne.n	800f6ea <_malloc_r+0x92>
 800f6a2:	230c      	movs	r3, #12
 800f6a4:	6033      	str	r3, [r6, #0]
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f000 f9fe 	bl	800faa8 <__malloc_unlock>
 800f6ac:	e7e3      	b.n	800f676 <_malloc_r+0x1e>
 800f6ae:	6823      	ldr	r3, [r4, #0]
 800f6b0:	1b5b      	subs	r3, r3, r5
 800f6b2:	d417      	bmi.n	800f6e4 <_malloc_r+0x8c>
 800f6b4:	2b0b      	cmp	r3, #11
 800f6b6:	d903      	bls.n	800f6c0 <_malloc_r+0x68>
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	441c      	add	r4, r3
 800f6bc:	6025      	str	r5, [r4, #0]
 800f6be:	e004      	b.n	800f6ca <_malloc_r+0x72>
 800f6c0:	6863      	ldr	r3, [r4, #4]
 800f6c2:	42a2      	cmp	r2, r4
 800f6c4:	bf0c      	ite	eq
 800f6c6:	600b      	streq	r3, [r1, #0]
 800f6c8:	6053      	strne	r3, [r2, #4]
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f000 f9ec 	bl	800faa8 <__malloc_unlock>
 800f6d0:	f104 000b 	add.w	r0, r4, #11
 800f6d4:	1d23      	adds	r3, r4, #4
 800f6d6:	f020 0007 	bic.w	r0, r0, #7
 800f6da:	1ac2      	subs	r2, r0, r3
 800f6dc:	d0cc      	beq.n	800f678 <_malloc_r+0x20>
 800f6de:	1a1b      	subs	r3, r3, r0
 800f6e0:	50a3      	str	r3, [r4, r2]
 800f6e2:	e7c9      	b.n	800f678 <_malloc_r+0x20>
 800f6e4:	4622      	mov	r2, r4
 800f6e6:	6864      	ldr	r4, [r4, #4]
 800f6e8:	e7cc      	b.n	800f684 <_malloc_r+0x2c>
 800f6ea:	1cc4      	adds	r4, r0, #3
 800f6ec:	f024 0403 	bic.w	r4, r4, #3
 800f6f0:	42a0      	cmp	r0, r4
 800f6f2:	d0e3      	beq.n	800f6bc <_malloc_r+0x64>
 800f6f4:	1a21      	subs	r1, r4, r0
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f000 f964 	bl	800f9c4 <_sbrk_r>
 800f6fc:	3001      	adds	r0, #1
 800f6fe:	d1dd      	bne.n	800f6bc <_malloc_r+0x64>
 800f700:	e7cf      	b.n	800f6a2 <_malloc_r+0x4a>
 800f702:	bf00      	nop
 800f704:	240014a0 	.word	0x240014a0
 800f708:	240014a4 	.word	0x240014a4

0800f70c <__ssputs_r>:
 800f70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f710:	688e      	ldr	r6, [r1, #8]
 800f712:	429e      	cmp	r6, r3
 800f714:	4682      	mov	sl, r0
 800f716:	460c      	mov	r4, r1
 800f718:	4690      	mov	r8, r2
 800f71a:	461f      	mov	r7, r3
 800f71c:	d838      	bhi.n	800f790 <__ssputs_r+0x84>
 800f71e:	898a      	ldrh	r2, [r1, #12]
 800f720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f724:	d032      	beq.n	800f78c <__ssputs_r+0x80>
 800f726:	6825      	ldr	r5, [r4, #0]
 800f728:	6909      	ldr	r1, [r1, #16]
 800f72a:	eba5 0901 	sub.w	r9, r5, r1
 800f72e:	6965      	ldr	r5, [r4, #20]
 800f730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f738:	3301      	adds	r3, #1
 800f73a:	444b      	add	r3, r9
 800f73c:	106d      	asrs	r5, r5, #1
 800f73e:	429d      	cmp	r5, r3
 800f740:	bf38      	it	cc
 800f742:	461d      	movcc	r5, r3
 800f744:	0553      	lsls	r3, r2, #21
 800f746:	d531      	bpl.n	800f7ac <__ssputs_r+0xa0>
 800f748:	4629      	mov	r1, r5
 800f74a:	f7ff ff85 	bl	800f658 <_malloc_r>
 800f74e:	4606      	mov	r6, r0
 800f750:	b950      	cbnz	r0, 800f768 <__ssputs_r+0x5c>
 800f752:	230c      	movs	r3, #12
 800f754:	f8ca 3000 	str.w	r3, [sl]
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f768:	6921      	ldr	r1, [r4, #16]
 800f76a:	464a      	mov	r2, r9
 800f76c:	f7fe f8cc 	bl	800d908 <memcpy>
 800f770:	89a3      	ldrh	r3, [r4, #12]
 800f772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77a:	81a3      	strh	r3, [r4, #12]
 800f77c:	6126      	str	r6, [r4, #16]
 800f77e:	6165      	str	r5, [r4, #20]
 800f780:	444e      	add	r6, r9
 800f782:	eba5 0509 	sub.w	r5, r5, r9
 800f786:	6026      	str	r6, [r4, #0]
 800f788:	60a5      	str	r5, [r4, #8]
 800f78a:	463e      	mov	r6, r7
 800f78c:	42be      	cmp	r6, r7
 800f78e:	d900      	bls.n	800f792 <__ssputs_r+0x86>
 800f790:	463e      	mov	r6, r7
 800f792:	4632      	mov	r2, r6
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	4641      	mov	r1, r8
 800f798:	f000 f966 	bl	800fa68 <memmove>
 800f79c:	68a3      	ldr	r3, [r4, #8]
 800f79e:	6822      	ldr	r2, [r4, #0]
 800f7a0:	1b9b      	subs	r3, r3, r6
 800f7a2:	4432      	add	r2, r6
 800f7a4:	60a3      	str	r3, [r4, #8]
 800f7a6:	6022      	str	r2, [r4, #0]
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	e7db      	b.n	800f764 <__ssputs_r+0x58>
 800f7ac:	462a      	mov	r2, r5
 800f7ae:	f000 f981 	bl	800fab4 <_realloc_r>
 800f7b2:	4606      	mov	r6, r0
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d1e1      	bne.n	800f77c <__ssputs_r+0x70>
 800f7b8:	6921      	ldr	r1, [r4, #16]
 800f7ba:	4650      	mov	r0, sl
 800f7bc:	f7ff fefc 	bl	800f5b8 <_free_r>
 800f7c0:	e7c7      	b.n	800f752 <__ssputs_r+0x46>
	...

0800f7c4 <_svfiprintf_r>:
 800f7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c8:	4698      	mov	r8, r3
 800f7ca:	898b      	ldrh	r3, [r1, #12]
 800f7cc:	061b      	lsls	r3, r3, #24
 800f7ce:	b09d      	sub	sp, #116	; 0x74
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	460d      	mov	r5, r1
 800f7d4:	4614      	mov	r4, r2
 800f7d6:	d50e      	bpl.n	800f7f6 <_svfiprintf_r+0x32>
 800f7d8:	690b      	ldr	r3, [r1, #16]
 800f7da:	b963      	cbnz	r3, 800f7f6 <_svfiprintf_r+0x32>
 800f7dc:	2140      	movs	r1, #64	; 0x40
 800f7de:	f7ff ff3b 	bl	800f658 <_malloc_r>
 800f7e2:	6028      	str	r0, [r5, #0]
 800f7e4:	6128      	str	r0, [r5, #16]
 800f7e6:	b920      	cbnz	r0, 800f7f2 <_svfiprintf_r+0x2e>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	e0d1      	b.n	800f996 <_svfiprintf_r+0x1d2>
 800f7f2:	2340      	movs	r3, #64	; 0x40
 800f7f4:	616b      	str	r3, [r5, #20]
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7fa:	2320      	movs	r3, #32
 800f7fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f800:	f8cd 800c 	str.w	r8, [sp, #12]
 800f804:	2330      	movs	r3, #48	; 0x30
 800f806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f9b0 <_svfiprintf_r+0x1ec>
 800f80a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f80e:	f04f 0901 	mov.w	r9, #1
 800f812:	4623      	mov	r3, r4
 800f814:	469a      	mov	sl, r3
 800f816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f81a:	b10a      	cbz	r2, 800f820 <_svfiprintf_r+0x5c>
 800f81c:	2a25      	cmp	r2, #37	; 0x25
 800f81e:	d1f9      	bne.n	800f814 <_svfiprintf_r+0x50>
 800f820:	ebba 0b04 	subs.w	fp, sl, r4
 800f824:	d00b      	beq.n	800f83e <_svfiprintf_r+0x7a>
 800f826:	465b      	mov	r3, fp
 800f828:	4622      	mov	r2, r4
 800f82a:	4629      	mov	r1, r5
 800f82c:	4638      	mov	r0, r7
 800f82e:	f7ff ff6d 	bl	800f70c <__ssputs_r>
 800f832:	3001      	adds	r0, #1
 800f834:	f000 80aa 	beq.w	800f98c <_svfiprintf_r+0x1c8>
 800f838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f83a:	445a      	add	r2, fp
 800f83c:	9209      	str	r2, [sp, #36]	; 0x24
 800f83e:	f89a 3000 	ldrb.w	r3, [sl]
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 80a2 	beq.w	800f98c <_svfiprintf_r+0x1c8>
 800f848:	2300      	movs	r3, #0
 800f84a:	f04f 32ff 	mov.w	r2, #4294967295
 800f84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f852:	f10a 0a01 	add.w	sl, sl, #1
 800f856:	9304      	str	r3, [sp, #16]
 800f858:	9307      	str	r3, [sp, #28]
 800f85a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f85e:	931a      	str	r3, [sp, #104]	; 0x68
 800f860:	4654      	mov	r4, sl
 800f862:	2205      	movs	r2, #5
 800f864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f868:	4851      	ldr	r0, [pc, #324]	; (800f9b0 <_svfiprintf_r+0x1ec>)
 800f86a:	f7f0 fd41 	bl	80002f0 <memchr>
 800f86e:	9a04      	ldr	r2, [sp, #16]
 800f870:	b9d8      	cbnz	r0, 800f8aa <_svfiprintf_r+0xe6>
 800f872:	06d0      	lsls	r0, r2, #27
 800f874:	bf44      	itt	mi
 800f876:	2320      	movmi	r3, #32
 800f878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f87c:	0711      	lsls	r1, r2, #28
 800f87e:	bf44      	itt	mi
 800f880:	232b      	movmi	r3, #43	; 0x2b
 800f882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f886:	f89a 3000 	ldrb.w	r3, [sl]
 800f88a:	2b2a      	cmp	r3, #42	; 0x2a
 800f88c:	d015      	beq.n	800f8ba <_svfiprintf_r+0xf6>
 800f88e:	9a07      	ldr	r2, [sp, #28]
 800f890:	4654      	mov	r4, sl
 800f892:	2000      	movs	r0, #0
 800f894:	f04f 0c0a 	mov.w	ip, #10
 800f898:	4621      	mov	r1, r4
 800f89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f89e:	3b30      	subs	r3, #48	; 0x30
 800f8a0:	2b09      	cmp	r3, #9
 800f8a2:	d94e      	bls.n	800f942 <_svfiprintf_r+0x17e>
 800f8a4:	b1b0      	cbz	r0, 800f8d4 <_svfiprintf_r+0x110>
 800f8a6:	9207      	str	r2, [sp, #28]
 800f8a8:	e014      	b.n	800f8d4 <_svfiprintf_r+0x110>
 800f8aa:	eba0 0308 	sub.w	r3, r0, r8
 800f8ae:	fa09 f303 	lsl.w	r3, r9, r3
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	9304      	str	r3, [sp, #16]
 800f8b6:	46a2      	mov	sl, r4
 800f8b8:	e7d2      	b.n	800f860 <_svfiprintf_r+0x9c>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	1d19      	adds	r1, r3, #4
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	9103      	str	r1, [sp, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	bfbb      	ittet	lt
 800f8c6:	425b      	neglt	r3, r3
 800f8c8:	f042 0202 	orrlt.w	r2, r2, #2
 800f8cc:	9307      	strge	r3, [sp, #28]
 800f8ce:	9307      	strlt	r3, [sp, #28]
 800f8d0:	bfb8      	it	lt
 800f8d2:	9204      	strlt	r2, [sp, #16]
 800f8d4:	7823      	ldrb	r3, [r4, #0]
 800f8d6:	2b2e      	cmp	r3, #46	; 0x2e
 800f8d8:	d10c      	bne.n	800f8f4 <_svfiprintf_r+0x130>
 800f8da:	7863      	ldrb	r3, [r4, #1]
 800f8dc:	2b2a      	cmp	r3, #42	; 0x2a
 800f8de:	d135      	bne.n	800f94c <_svfiprintf_r+0x188>
 800f8e0:	9b03      	ldr	r3, [sp, #12]
 800f8e2:	1d1a      	adds	r2, r3, #4
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	9203      	str	r2, [sp, #12]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	bfb8      	it	lt
 800f8ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8f0:	3402      	adds	r4, #2
 800f8f2:	9305      	str	r3, [sp, #20]
 800f8f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f9c0 <_svfiprintf_r+0x1fc>
 800f8f8:	7821      	ldrb	r1, [r4, #0]
 800f8fa:	2203      	movs	r2, #3
 800f8fc:	4650      	mov	r0, sl
 800f8fe:	f7f0 fcf7 	bl	80002f0 <memchr>
 800f902:	b140      	cbz	r0, 800f916 <_svfiprintf_r+0x152>
 800f904:	2340      	movs	r3, #64	; 0x40
 800f906:	eba0 000a 	sub.w	r0, r0, sl
 800f90a:	fa03 f000 	lsl.w	r0, r3, r0
 800f90e:	9b04      	ldr	r3, [sp, #16]
 800f910:	4303      	orrs	r3, r0
 800f912:	3401      	adds	r4, #1
 800f914:	9304      	str	r3, [sp, #16]
 800f916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f91a:	4826      	ldr	r0, [pc, #152]	; (800f9b4 <_svfiprintf_r+0x1f0>)
 800f91c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f920:	2206      	movs	r2, #6
 800f922:	f7f0 fce5 	bl	80002f0 <memchr>
 800f926:	2800      	cmp	r0, #0
 800f928:	d038      	beq.n	800f99c <_svfiprintf_r+0x1d8>
 800f92a:	4b23      	ldr	r3, [pc, #140]	; (800f9b8 <_svfiprintf_r+0x1f4>)
 800f92c:	bb1b      	cbnz	r3, 800f976 <_svfiprintf_r+0x1b2>
 800f92e:	9b03      	ldr	r3, [sp, #12]
 800f930:	3307      	adds	r3, #7
 800f932:	f023 0307 	bic.w	r3, r3, #7
 800f936:	3308      	adds	r3, #8
 800f938:	9303      	str	r3, [sp, #12]
 800f93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f93c:	4433      	add	r3, r6
 800f93e:	9309      	str	r3, [sp, #36]	; 0x24
 800f940:	e767      	b.n	800f812 <_svfiprintf_r+0x4e>
 800f942:	fb0c 3202 	mla	r2, ip, r2, r3
 800f946:	460c      	mov	r4, r1
 800f948:	2001      	movs	r0, #1
 800f94a:	e7a5      	b.n	800f898 <_svfiprintf_r+0xd4>
 800f94c:	2300      	movs	r3, #0
 800f94e:	3401      	adds	r4, #1
 800f950:	9305      	str	r3, [sp, #20]
 800f952:	4619      	mov	r1, r3
 800f954:	f04f 0c0a 	mov.w	ip, #10
 800f958:	4620      	mov	r0, r4
 800f95a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f95e:	3a30      	subs	r2, #48	; 0x30
 800f960:	2a09      	cmp	r2, #9
 800f962:	d903      	bls.n	800f96c <_svfiprintf_r+0x1a8>
 800f964:	2b00      	cmp	r3, #0
 800f966:	d0c5      	beq.n	800f8f4 <_svfiprintf_r+0x130>
 800f968:	9105      	str	r1, [sp, #20]
 800f96a:	e7c3      	b.n	800f8f4 <_svfiprintf_r+0x130>
 800f96c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f970:	4604      	mov	r4, r0
 800f972:	2301      	movs	r3, #1
 800f974:	e7f0      	b.n	800f958 <_svfiprintf_r+0x194>
 800f976:	ab03      	add	r3, sp, #12
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	462a      	mov	r2, r5
 800f97c:	4b0f      	ldr	r3, [pc, #60]	; (800f9bc <_svfiprintf_r+0x1f8>)
 800f97e:	a904      	add	r1, sp, #16
 800f980:	4638      	mov	r0, r7
 800f982:	f7fe f869 	bl	800da58 <_printf_float>
 800f986:	1c42      	adds	r2, r0, #1
 800f988:	4606      	mov	r6, r0
 800f98a:	d1d6      	bne.n	800f93a <_svfiprintf_r+0x176>
 800f98c:	89ab      	ldrh	r3, [r5, #12]
 800f98e:	065b      	lsls	r3, r3, #25
 800f990:	f53f af2c 	bmi.w	800f7ec <_svfiprintf_r+0x28>
 800f994:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f996:	b01d      	add	sp, #116	; 0x74
 800f998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f99c:	ab03      	add	r3, sp, #12
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	462a      	mov	r2, r5
 800f9a2:	4b06      	ldr	r3, [pc, #24]	; (800f9bc <_svfiprintf_r+0x1f8>)
 800f9a4:	a904      	add	r1, sp, #16
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f7fe fae2 	bl	800df70 <_printf_i>
 800f9ac:	e7eb      	b.n	800f986 <_svfiprintf_r+0x1c2>
 800f9ae:	bf00      	nop
 800f9b0:	08011454 	.word	0x08011454
 800f9b4:	0801145e 	.word	0x0801145e
 800f9b8:	0800da59 	.word	0x0800da59
 800f9bc:	0800f70d 	.word	0x0800f70d
 800f9c0:	0801145a 	.word	0x0801145a

0800f9c4 <_sbrk_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4d06      	ldr	r5, [pc, #24]	; (800f9e0 <_sbrk_r+0x1c>)
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	602b      	str	r3, [r5, #0]
 800f9d0:	f7f2 f906 	bl	8001be0 <_sbrk>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	d102      	bne.n	800f9de <_sbrk_r+0x1a>
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	b103      	cbz	r3, 800f9de <_sbrk_r+0x1a>
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	bd38      	pop	{r3, r4, r5, pc}
 800f9e0:	2400541c 	.word	0x2400541c

0800f9e4 <__assert_func>:
 800f9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9e6:	4614      	mov	r4, r2
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <__assert_func+0x2c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4605      	mov	r5, r0
 800f9f0:	68d8      	ldr	r0, [r3, #12]
 800f9f2:	b14c      	cbz	r4, 800fa08 <__assert_func+0x24>
 800f9f4:	4b07      	ldr	r3, [pc, #28]	; (800fa14 <__assert_func+0x30>)
 800f9f6:	9100      	str	r1, [sp, #0]
 800f9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9fc:	4906      	ldr	r1, [pc, #24]	; (800fa18 <__assert_func+0x34>)
 800f9fe:	462b      	mov	r3, r5
 800fa00:	f000 f80e 	bl	800fa20 <fiprintf>
 800fa04:	f000 faa4 	bl	800ff50 <abort>
 800fa08:	4b04      	ldr	r3, [pc, #16]	; (800fa1c <__assert_func+0x38>)
 800fa0a:	461c      	mov	r4, r3
 800fa0c:	e7f3      	b.n	800f9f6 <__assert_func+0x12>
 800fa0e:	bf00      	nop
 800fa10:	24000010 	.word	0x24000010
 800fa14:	08011465 	.word	0x08011465
 800fa18:	08011472 	.word	0x08011472
 800fa1c:	080114a0 	.word	0x080114a0

0800fa20 <fiprintf>:
 800fa20:	b40e      	push	{r1, r2, r3}
 800fa22:	b503      	push	{r0, r1, lr}
 800fa24:	4601      	mov	r1, r0
 800fa26:	ab03      	add	r3, sp, #12
 800fa28:	4805      	ldr	r0, [pc, #20]	; (800fa40 <fiprintf+0x20>)
 800fa2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa2e:	6800      	ldr	r0, [r0, #0]
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	f000 f88f 	bl	800fb54 <_vfiprintf_r>
 800fa36:	b002      	add	sp, #8
 800fa38:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa3c:	b003      	add	sp, #12
 800fa3e:	4770      	bx	lr
 800fa40:	24000010 	.word	0x24000010

0800fa44 <__ascii_mbtowc>:
 800fa44:	b082      	sub	sp, #8
 800fa46:	b901      	cbnz	r1, 800fa4a <__ascii_mbtowc+0x6>
 800fa48:	a901      	add	r1, sp, #4
 800fa4a:	b142      	cbz	r2, 800fa5e <__ascii_mbtowc+0x1a>
 800fa4c:	b14b      	cbz	r3, 800fa62 <__ascii_mbtowc+0x1e>
 800fa4e:	7813      	ldrb	r3, [r2, #0]
 800fa50:	600b      	str	r3, [r1, #0]
 800fa52:	7812      	ldrb	r2, [r2, #0]
 800fa54:	1e10      	subs	r0, r2, #0
 800fa56:	bf18      	it	ne
 800fa58:	2001      	movne	r0, #1
 800fa5a:	b002      	add	sp, #8
 800fa5c:	4770      	bx	lr
 800fa5e:	4610      	mov	r0, r2
 800fa60:	e7fb      	b.n	800fa5a <__ascii_mbtowc+0x16>
 800fa62:	f06f 0001 	mvn.w	r0, #1
 800fa66:	e7f8      	b.n	800fa5a <__ascii_mbtowc+0x16>

0800fa68 <memmove>:
 800fa68:	4288      	cmp	r0, r1
 800fa6a:	b510      	push	{r4, lr}
 800fa6c:	eb01 0402 	add.w	r4, r1, r2
 800fa70:	d902      	bls.n	800fa78 <memmove+0x10>
 800fa72:	4284      	cmp	r4, r0
 800fa74:	4623      	mov	r3, r4
 800fa76:	d807      	bhi.n	800fa88 <memmove+0x20>
 800fa78:	1e43      	subs	r3, r0, #1
 800fa7a:	42a1      	cmp	r1, r4
 800fa7c:	d008      	beq.n	800fa90 <memmove+0x28>
 800fa7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa86:	e7f8      	b.n	800fa7a <memmove+0x12>
 800fa88:	4402      	add	r2, r0
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	428a      	cmp	r2, r1
 800fa8e:	d100      	bne.n	800fa92 <memmove+0x2a>
 800fa90:	bd10      	pop	{r4, pc}
 800fa92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa9a:	e7f7      	b.n	800fa8c <memmove+0x24>

0800fa9c <__malloc_lock>:
 800fa9c:	4801      	ldr	r0, [pc, #4]	; (800faa4 <__malloc_lock+0x8>)
 800fa9e:	f000 bc17 	b.w	80102d0 <__retarget_lock_acquire_recursive>
 800faa2:	bf00      	nop
 800faa4:	24005424 	.word	0x24005424

0800faa8 <__malloc_unlock>:
 800faa8:	4801      	ldr	r0, [pc, #4]	; (800fab0 <__malloc_unlock+0x8>)
 800faaa:	f000 bc12 	b.w	80102d2 <__retarget_lock_release_recursive>
 800faae:	bf00      	nop
 800fab0:	24005424 	.word	0x24005424

0800fab4 <_realloc_r>:
 800fab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab6:	4607      	mov	r7, r0
 800fab8:	4614      	mov	r4, r2
 800faba:	460e      	mov	r6, r1
 800fabc:	b921      	cbnz	r1, 800fac8 <_realloc_r+0x14>
 800fabe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fac2:	4611      	mov	r1, r2
 800fac4:	f7ff bdc8 	b.w	800f658 <_malloc_r>
 800fac8:	b922      	cbnz	r2, 800fad4 <_realloc_r+0x20>
 800faca:	f7ff fd75 	bl	800f5b8 <_free_r>
 800face:	4625      	mov	r5, r4
 800fad0:	4628      	mov	r0, r5
 800fad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fad4:	f000 fc62 	bl	801039c <_malloc_usable_size_r>
 800fad8:	42a0      	cmp	r0, r4
 800fada:	d20f      	bcs.n	800fafc <_realloc_r+0x48>
 800fadc:	4621      	mov	r1, r4
 800fade:	4638      	mov	r0, r7
 800fae0:	f7ff fdba 	bl	800f658 <_malloc_r>
 800fae4:	4605      	mov	r5, r0
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d0f2      	beq.n	800fad0 <_realloc_r+0x1c>
 800faea:	4631      	mov	r1, r6
 800faec:	4622      	mov	r2, r4
 800faee:	f7fd ff0b 	bl	800d908 <memcpy>
 800faf2:	4631      	mov	r1, r6
 800faf4:	4638      	mov	r0, r7
 800faf6:	f7ff fd5f 	bl	800f5b8 <_free_r>
 800fafa:	e7e9      	b.n	800fad0 <_realloc_r+0x1c>
 800fafc:	4635      	mov	r5, r6
 800fafe:	e7e7      	b.n	800fad0 <_realloc_r+0x1c>

0800fb00 <__sfputc_r>:
 800fb00:	6893      	ldr	r3, [r2, #8]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	b410      	push	{r4}
 800fb08:	6093      	str	r3, [r2, #8]
 800fb0a:	da08      	bge.n	800fb1e <__sfputc_r+0x1e>
 800fb0c:	6994      	ldr	r4, [r2, #24]
 800fb0e:	42a3      	cmp	r3, r4
 800fb10:	db01      	blt.n	800fb16 <__sfputc_r+0x16>
 800fb12:	290a      	cmp	r1, #10
 800fb14:	d103      	bne.n	800fb1e <__sfputc_r+0x1e>
 800fb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb1a:	f000 b94b 	b.w	800fdb4 <__swbuf_r>
 800fb1e:	6813      	ldr	r3, [r2, #0]
 800fb20:	1c58      	adds	r0, r3, #1
 800fb22:	6010      	str	r0, [r2, #0]
 800fb24:	7019      	strb	r1, [r3, #0]
 800fb26:	4608      	mov	r0, r1
 800fb28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <__sfputs_r>:
 800fb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	4614      	mov	r4, r2
 800fb36:	18d5      	adds	r5, r2, r3
 800fb38:	42ac      	cmp	r4, r5
 800fb3a:	d101      	bne.n	800fb40 <__sfputs_r+0x12>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	e007      	b.n	800fb50 <__sfputs_r+0x22>
 800fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb44:	463a      	mov	r2, r7
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7ff ffda 	bl	800fb00 <__sfputc_r>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	d1f3      	bne.n	800fb38 <__sfputs_r+0xa>
 800fb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb54 <_vfiprintf_r>:
 800fb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	460d      	mov	r5, r1
 800fb5a:	b09d      	sub	sp, #116	; 0x74
 800fb5c:	4614      	mov	r4, r2
 800fb5e:	4698      	mov	r8, r3
 800fb60:	4606      	mov	r6, r0
 800fb62:	b118      	cbz	r0, 800fb6c <_vfiprintf_r+0x18>
 800fb64:	6983      	ldr	r3, [r0, #24]
 800fb66:	b90b      	cbnz	r3, 800fb6c <_vfiprintf_r+0x18>
 800fb68:	f000 fb14 	bl	8010194 <__sinit>
 800fb6c:	4b89      	ldr	r3, [pc, #548]	; (800fd94 <_vfiprintf_r+0x240>)
 800fb6e:	429d      	cmp	r5, r3
 800fb70:	d11b      	bne.n	800fbaa <_vfiprintf_r+0x56>
 800fb72:	6875      	ldr	r5, [r6, #4]
 800fb74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb76:	07d9      	lsls	r1, r3, #31
 800fb78:	d405      	bmi.n	800fb86 <_vfiprintf_r+0x32>
 800fb7a:	89ab      	ldrh	r3, [r5, #12]
 800fb7c:	059a      	lsls	r2, r3, #22
 800fb7e:	d402      	bmi.n	800fb86 <_vfiprintf_r+0x32>
 800fb80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb82:	f000 fba5 	bl	80102d0 <__retarget_lock_acquire_recursive>
 800fb86:	89ab      	ldrh	r3, [r5, #12]
 800fb88:	071b      	lsls	r3, r3, #28
 800fb8a:	d501      	bpl.n	800fb90 <_vfiprintf_r+0x3c>
 800fb8c:	692b      	ldr	r3, [r5, #16]
 800fb8e:	b9eb      	cbnz	r3, 800fbcc <_vfiprintf_r+0x78>
 800fb90:	4629      	mov	r1, r5
 800fb92:	4630      	mov	r0, r6
 800fb94:	f000 f96e 	bl	800fe74 <__swsetup_r>
 800fb98:	b1c0      	cbz	r0, 800fbcc <_vfiprintf_r+0x78>
 800fb9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb9c:	07dc      	lsls	r4, r3, #31
 800fb9e:	d50e      	bpl.n	800fbbe <_vfiprintf_r+0x6a>
 800fba0:	f04f 30ff 	mov.w	r0, #4294967295
 800fba4:	b01d      	add	sp, #116	; 0x74
 800fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbaa:	4b7b      	ldr	r3, [pc, #492]	; (800fd98 <_vfiprintf_r+0x244>)
 800fbac:	429d      	cmp	r5, r3
 800fbae:	d101      	bne.n	800fbb4 <_vfiprintf_r+0x60>
 800fbb0:	68b5      	ldr	r5, [r6, #8]
 800fbb2:	e7df      	b.n	800fb74 <_vfiprintf_r+0x20>
 800fbb4:	4b79      	ldr	r3, [pc, #484]	; (800fd9c <_vfiprintf_r+0x248>)
 800fbb6:	429d      	cmp	r5, r3
 800fbb8:	bf08      	it	eq
 800fbba:	68f5      	ldreq	r5, [r6, #12]
 800fbbc:	e7da      	b.n	800fb74 <_vfiprintf_r+0x20>
 800fbbe:	89ab      	ldrh	r3, [r5, #12]
 800fbc0:	0598      	lsls	r0, r3, #22
 800fbc2:	d4ed      	bmi.n	800fba0 <_vfiprintf_r+0x4c>
 800fbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbc6:	f000 fb84 	bl	80102d2 <__retarget_lock_release_recursive>
 800fbca:	e7e9      	b.n	800fba0 <_vfiprintf_r+0x4c>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	9309      	str	r3, [sp, #36]	; 0x24
 800fbd0:	2320      	movs	r3, #32
 800fbd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbda:	2330      	movs	r3, #48	; 0x30
 800fbdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fda0 <_vfiprintf_r+0x24c>
 800fbe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbe4:	f04f 0901 	mov.w	r9, #1
 800fbe8:	4623      	mov	r3, r4
 800fbea:	469a      	mov	sl, r3
 800fbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbf0:	b10a      	cbz	r2, 800fbf6 <_vfiprintf_r+0xa2>
 800fbf2:	2a25      	cmp	r2, #37	; 0x25
 800fbf4:	d1f9      	bne.n	800fbea <_vfiprintf_r+0x96>
 800fbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800fbfa:	d00b      	beq.n	800fc14 <_vfiprintf_r+0xc0>
 800fbfc:	465b      	mov	r3, fp
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4629      	mov	r1, r5
 800fc02:	4630      	mov	r0, r6
 800fc04:	f7ff ff93 	bl	800fb2e <__sfputs_r>
 800fc08:	3001      	adds	r0, #1
 800fc0a:	f000 80aa 	beq.w	800fd62 <_vfiprintf_r+0x20e>
 800fc0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc10:	445a      	add	r2, fp
 800fc12:	9209      	str	r2, [sp, #36]	; 0x24
 800fc14:	f89a 3000 	ldrb.w	r3, [sl]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f000 80a2 	beq.w	800fd62 <_vfiprintf_r+0x20e>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f04f 32ff 	mov.w	r2, #4294967295
 800fc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc28:	f10a 0a01 	add.w	sl, sl, #1
 800fc2c:	9304      	str	r3, [sp, #16]
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc34:	931a      	str	r3, [sp, #104]	; 0x68
 800fc36:	4654      	mov	r4, sl
 800fc38:	2205      	movs	r2, #5
 800fc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc3e:	4858      	ldr	r0, [pc, #352]	; (800fda0 <_vfiprintf_r+0x24c>)
 800fc40:	f7f0 fb56 	bl	80002f0 <memchr>
 800fc44:	9a04      	ldr	r2, [sp, #16]
 800fc46:	b9d8      	cbnz	r0, 800fc80 <_vfiprintf_r+0x12c>
 800fc48:	06d1      	lsls	r1, r2, #27
 800fc4a:	bf44      	itt	mi
 800fc4c:	2320      	movmi	r3, #32
 800fc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc52:	0713      	lsls	r3, r2, #28
 800fc54:	bf44      	itt	mi
 800fc56:	232b      	movmi	r3, #43	; 0x2b
 800fc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc60:	2b2a      	cmp	r3, #42	; 0x2a
 800fc62:	d015      	beq.n	800fc90 <_vfiprintf_r+0x13c>
 800fc64:	9a07      	ldr	r2, [sp, #28]
 800fc66:	4654      	mov	r4, sl
 800fc68:	2000      	movs	r0, #0
 800fc6a:	f04f 0c0a 	mov.w	ip, #10
 800fc6e:	4621      	mov	r1, r4
 800fc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc74:	3b30      	subs	r3, #48	; 0x30
 800fc76:	2b09      	cmp	r3, #9
 800fc78:	d94e      	bls.n	800fd18 <_vfiprintf_r+0x1c4>
 800fc7a:	b1b0      	cbz	r0, 800fcaa <_vfiprintf_r+0x156>
 800fc7c:	9207      	str	r2, [sp, #28]
 800fc7e:	e014      	b.n	800fcaa <_vfiprintf_r+0x156>
 800fc80:	eba0 0308 	sub.w	r3, r0, r8
 800fc84:	fa09 f303 	lsl.w	r3, r9, r3
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	46a2      	mov	sl, r4
 800fc8e:	e7d2      	b.n	800fc36 <_vfiprintf_r+0xe2>
 800fc90:	9b03      	ldr	r3, [sp, #12]
 800fc92:	1d19      	adds	r1, r3, #4
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	9103      	str	r1, [sp, #12]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	bfbb      	ittet	lt
 800fc9c:	425b      	neglt	r3, r3
 800fc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800fca2:	9307      	strge	r3, [sp, #28]
 800fca4:	9307      	strlt	r3, [sp, #28]
 800fca6:	bfb8      	it	lt
 800fca8:	9204      	strlt	r2, [sp, #16]
 800fcaa:	7823      	ldrb	r3, [r4, #0]
 800fcac:	2b2e      	cmp	r3, #46	; 0x2e
 800fcae:	d10c      	bne.n	800fcca <_vfiprintf_r+0x176>
 800fcb0:	7863      	ldrb	r3, [r4, #1]
 800fcb2:	2b2a      	cmp	r3, #42	; 0x2a
 800fcb4:	d135      	bne.n	800fd22 <_vfiprintf_r+0x1ce>
 800fcb6:	9b03      	ldr	r3, [sp, #12]
 800fcb8:	1d1a      	adds	r2, r3, #4
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	9203      	str	r2, [sp, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	bfb8      	it	lt
 800fcc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcc6:	3402      	adds	r4, #2
 800fcc8:	9305      	str	r3, [sp, #20]
 800fcca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fdb0 <_vfiprintf_r+0x25c>
 800fcce:	7821      	ldrb	r1, [r4, #0]
 800fcd0:	2203      	movs	r2, #3
 800fcd2:	4650      	mov	r0, sl
 800fcd4:	f7f0 fb0c 	bl	80002f0 <memchr>
 800fcd8:	b140      	cbz	r0, 800fcec <_vfiprintf_r+0x198>
 800fcda:	2340      	movs	r3, #64	; 0x40
 800fcdc:	eba0 000a 	sub.w	r0, r0, sl
 800fce0:	fa03 f000 	lsl.w	r0, r3, r0
 800fce4:	9b04      	ldr	r3, [sp, #16]
 800fce6:	4303      	orrs	r3, r0
 800fce8:	3401      	adds	r4, #1
 800fcea:	9304      	str	r3, [sp, #16]
 800fcec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcf0:	482c      	ldr	r0, [pc, #176]	; (800fda4 <_vfiprintf_r+0x250>)
 800fcf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcf6:	2206      	movs	r2, #6
 800fcf8:	f7f0 fafa 	bl	80002f0 <memchr>
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d03f      	beq.n	800fd80 <_vfiprintf_r+0x22c>
 800fd00:	4b29      	ldr	r3, [pc, #164]	; (800fda8 <_vfiprintf_r+0x254>)
 800fd02:	bb1b      	cbnz	r3, 800fd4c <_vfiprintf_r+0x1f8>
 800fd04:	9b03      	ldr	r3, [sp, #12]
 800fd06:	3307      	adds	r3, #7
 800fd08:	f023 0307 	bic.w	r3, r3, #7
 800fd0c:	3308      	adds	r3, #8
 800fd0e:	9303      	str	r3, [sp, #12]
 800fd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd12:	443b      	add	r3, r7
 800fd14:	9309      	str	r3, [sp, #36]	; 0x24
 800fd16:	e767      	b.n	800fbe8 <_vfiprintf_r+0x94>
 800fd18:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	2001      	movs	r0, #1
 800fd20:	e7a5      	b.n	800fc6e <_vfiprintf_r+0x11a>
 800fd22:	2300      	movs	r3, #0
 800fd24:	3401      	adds	r4, #1
 800fd26:	9305      	str	r3, [sp, #20]
 800fd28:	4619      	mov	r1, r3
 800fd2a:	f04f 0c0a 	mov.w	ip, #10
 800fd2e:	4620      	mov	r0, r4
 800fd30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd34:	3a30      	subs	r2, #48	; 0x30
 800fd36:	2a09      	cmp	r2, #9
 800fd38:	d903      	bls.n	800fd42 <_vfiprintf_r+0x1ee>
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d0c5      	beq.n	800fcca <_vfiprintf_r+0x176>
 800fd3e:	9105      	str	r1, [sp, #20]
 800fd40:	e7c3      	b.n	800fcca <_vfiprintf_r+0x176>
 800fd42:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd46:	4604      	mov	r4, r0
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e7f0      	b.n	800fd2e <_vfiprintf_r+0x1da>
 800fd4c:	ab03      	add	r3, sp, #12
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	462a      	mov	r2, r5
 800fd52:	4b16      	ldr	r3, [pc, #88]	; (800fdac <_vfiprintf_r+0x258>)
 800fd54:	a904      	add	r1, sp, #16
 800fd56:	4630      	mov	r0, r6
 800fd58:	f7fd fe7e 	bl	800da58 <_printf_float>
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	1c78      	adds	r0, r7, #1
 800fd60:	d1d6      	bne.n	800fd10 <_vfiprintf_r+0x1bc>
 800fd62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd64:	07d9      	lsls	r1, r3, #31
 800fd66:	d405      	bmi.n	800fd74 <_vfiprintf_r+0x220>
 800fd68:	89ab      	ldrh	r3, [r5, #12]
 800fd6a:	059a      	lsls	r2, r3, #22
 800fd6c:	d402      	bmi.n	800fd74 <_vfiprintf_r+0x220>
 800fd6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd70:	f000 faaf 	bl	80102d2 <__retarget_lock_release_recursive>
 800fd74:	89ab      	ldrh	r3, [r5, #12]
 800fd76:	065b      	lsls	r3, r3, #25
 800fd78:	f53f af12 	bmi.w	800fba0 <_vfiprintf_r+0x4c>
 800fd7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd7e:	e711      	b.n	800fba4 <_vfiprintf_r+0x50>
 800fd80:	ab03      	add	r3, sp, #12
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	462a      	mov	r2, r5
 800fd86:	4b09      	ldr	r3, [pc, #36]	; (800fdac <_vfiprintf_r+0x258>)
 800fd88:	a904      	add	r1, sp, #16
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7fe f8f0 	bl	800df70 <_printf_i>
 800fd90:	e7e4      	b.n	800fd5c <_vfiprintf_r+0x208>
 800fd92:	bf00      	nop
 800fd94:	080115cc 	.word	0x080115cc
 800fd98:	080115ec 	.word	0x080115ec
 800fd9c:	080115ac 	.word	0x080115ac
 800fda0:	08011454 	.word	0x08011454
 800fda4:	0801145e 	.word	0x0801145e
 800fda8:	0800da59 	.word	0x0800da59
 800fdac:	0800fb2f 	.word	0x0800fb2f
 800fdb0:	0801145a 	.word	0x0801145a

0800fdb4 <__swbuf_r>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	460e      	mov	r6, r1
 800fdb8:	4614      	mov	r4, r2
 800fdba:	4605      	mov	r5, r0
 800fdbc:	b118      	cbz	r0, 800fdc6 <__swbuf_r+0x12>
 800fdbe:	6983      	ldr	r3, [r0, #24]
 800fdc0:	b90b      	cbnz	r3, 800fdc6 <__swbuf_r+0x12>
 800fdc2:	f000 f9e7 	bl	8010194 <__sinit>
 800fdc6:	4b21      	ldr	r3, [pc, #132]	; (800fe4c <__swbuf_r+0x98>)
 800fdc8:	429c      	cmp	r4, r3
 800fdca:	d12b      	bne.n	800fe24 <__swbuf_r+0x70>
 800fdcc:	686c      	ldr	r4, [r5, #4]
 800fdce:	69a3      	ldr	r3, [r4, #24]
 800fdd0:	60a3      	str	r3, [r4, #8]
 800fdd2:	89a3      	ldrh	r3, [r4, #12]
 800fdd4:	071a      	lsls	r2, r3, #28
 800fdd6:	d52f      	bpl.n	800fe38 <__swbuf_r+0x84>
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	b36b      	cbz	r3, 800fe38 <__swbuf_r+0x84>
 800fddc:	6923      	ldr	r3, [r4, #16]
 800fdde:	6820      	ldr	r0, [r4, #0]
 800fde0:	1ac0      	subs	r0, r0, r3
 800fde2:	6963      	ldr	r3, [r4, #20]
 800fde4:	b2f6      	uxtb	r6, r6
 800fde6:	4283      	cmp	r3, r0
 800fde8:	4637      	mov	r7, r6
 800fdea:	dc04      	bgt.n	800fdf6 <__swbuf_r+0x42>
 800fdec:	4621      	mov	r1, r4
 800fdee:	4628      	mov	r0, r5
 800fdf0:	f000 f93c 	bl	801006c <_fflush_r>
 800fdf4:	bb30      	cbnz	r0, 800fe44 <__swbuf_r+0x90>
 800fdf6:	68a3      	ldr	r3, [r4, #8]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	60a3      	str	r3, [r4, #8]
 800fdfc:	6823      	ldr	r3, [r4, #0]
 800fdfe:	1c5a      	adds	r2, r3, #1
 800fe00:	6022      	str	r2, [r4, #0]
 800fe02:	701e      	strb	r6, [r3, #0]
 800fe04:	6963      	ldr	r3, [r4, #20]
 800fe06:	3001      	adds	r0, #1
 800fe08:	4283      	cmp	r3, r0
 800fe0a:	d004      	beq.n	800fe16 <__swbuf_r+0x62>
 800fe0c:	89a3      	ldrh	r3, [r4, #12]
 800fe0e:	07db      	lsls	r3, r3, #31
 800fe10:	d506      	bpl.n	800fe20 <__swbuf_r+0x6c>
 800fe12:	2e0a      	cmp	r6, #10
 800fe14:	d104      	bne.n	800fe20 <__swbuf_r+0x6c>
 800fe16:	4621      	mov	r1, r4
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f000 f927 	bl	801006c <_fflush_r>
 800fe1e:	b988      	cbnz	r0, 800fe44 <__swbuf_r+0x90>
 800fe20:	4638      	mov	r0, r7
 800fe22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe24:	4b0a      	ldr	r3, [pc, #40]	; (800fe50 <__swbuf_r+0x9c>)
 800fe26:	429c      	cmp	r4, r3
 800fe28:	d101      	bne.n	800fe2e <__swbuf_r+0x7a>
 800fe2a:	68ac      	ldr	r4, [r5, #8]
 800fe2c:	e7cf      	b.n	800fdce <__swbuf_r+0x1a>
 800fe2e:	4b09      	ldr	r3, [pc, #36]	; (800fe54 <__swbuf_r+0xa0>)
 800fe30:	429c      	cmp	r4, r3
 800fe32:	bf08      	it	eq
 800fe34:	68ec      	ldreq	r4, [r5, #12]
 800fe36:	e7ca      	b.n	800fdce <__swbuf_r+0x1a>
 800fe38:	4621      	mov	r1, r4
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	f000 f81a 	bl	800fe74 <__swsetup_r>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	d0cb      	beq.n	800fddc <__swbuf_r+0x28>
 800fe44:	f04f 37ff 	mov.w	r7, #4294967295
 800fe48:	e7ea      	b.n	800fe20 <__swbuf_r+0x6c>
 800fe4a:	bf00      	nop
 800fe4c:	080115cc 	.word	0x080115cc
 800fe50:	080115ec 	.word	0x080115ec
 800fe54:	080115ac 	.word	0x080115ac

0800fe58 <__ascii_wctomb>:
 800fe58:	b149      	cbz	r1, 800fe6e <__ascii_wctomb+0x16>
 800fe5a:	2aff      	cmp	r2, #255	; 0xff
 800fe5c:	bf85      	ittet	hi
 800fe5e:	238a      	movhi	r3, #138	; 0x8a
 800fe60:	6003      	strhi	r3, [r0, #0]
 800fe62:	700a      	strbls	r2, [r1, #0]
 800fe64:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe68:	bf98      	it	ls
 800fe6a:	2001      	movls	r0, #1
 800fe6c:	4770      	bx	lr
 800fe6e:	4608      	mov	r0, r1
 800fe70:	4770      	bx	lr
	...

0800fe74 <__swsetup_r>:
 800fe74:	4b32      	ldr	r3, [pc, #200]	; (800ff40 <__swsetup_r+0xcc>)
 800fe76:	b570      	push	{r4, r5, r6, lr}
 800fe78:	681d      	ldr	r5, [r3, #0]
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	b125      	cbz	r5, 800fe8a <__swsetup_r+0x16>
 800fe80:	69ab      	ldr	r3, [r5, #24]
 800fe82:	b913      	cbnz	r3, 800fe8a <__swsetup_r+0x16>
 800fe84:	4628      	mov	r0, r5
 800fe86:	f000 f985 	bl	8010194 <__sinit>
 800fe8a:	4b2e      	ldr	r3, [pc, #184]	; (800ff44 <__swsetup_r+0xd0>)
 800fe8c:	429c      	cmp	r4, r3
 800fe8e:	d10f      	bne.n	800feb0 <__swsetup_r+0x3c>
 800fe90:	686c      	ldr	r4, [r5, #4]
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe98:	0719      	lsls	r1, r3, #28
 800fe9a:	d42c      	bmi.n	800fef6 <__swsetup_r+0x82>
 800fe9c:	06dd      	lsls	r5, r3, #27
 800fe9e:	d411      	bmi.n	800fec4 <__swsetup_r+0x50>
 800fea0:	2309      	movs	r3, #9
 800fea2:	6033      	str	r3, [r6, #0]
 800fea4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	f04f 30ff 	mov.w	r0, #4294967295
 800feae:	e03e      	b.n	800ff2e <__swsetup_r+0xba>
 800feb0:	4b25      	ldr	r3, [pc, #148]	; (800ff48 <__swsetup_r+0xd4>)
 800feb2:	429c      	cmp	r4, r3
 800feb4:	d101      	bne.n	800feba <__swsetup_r+0x46>
 800feb6:	68ac      	ldr	r4, [r5, #8]
 800feb8:	e7eb      	b.n	800fe92 <__swsetup_r+0x1e>
 800feba:	4b24      	ldr	r3, [pc, #144]	; (800ff4c <__swsetup_r+0xd8>)
 800febc:	429c      	cmp	r4, r3
 800febe:	bf08      	it	eq
 800fec0:	68ec      	ldreq	r4, [r5, #12]
 800fec2:	e7e6      	b.n	800fe92 <__swsetup_r+0x1e>
 800fec4:	0758      	lsls	r0, r3, #29
 800fec6:	d512      	bpl.n	800feee <__swsetup_r+0x7a>
 800fec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800feca:	b141      	cbz	r1, 800fede <__swsetup_r+0x6a>
 800fecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fed0:	4299      	cmp	r1, r3
 800fed2:	d002      	beq.n	800feda <__swsetup_r+0x66>
 800fed4:	4630      	mov	r0, r6
 800fed6:	f7ff fb6f 	bl	800f5b8 <_free_r>
 800feda:	2300      	movs	r3, #0
 800fedc:	6363      	str	r3, [r4, #52]	; 0x34
 800fede:	89a3      	ldrh	r3, [r4, #12]
 800fee0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fee4:	81a3      	strh	r3, [r4, #12]
 800fee6:	2300      	movs	r3, #0
 800fee8:	6063      	str	r3, [r4, #4]
 800feea:	6923      	ldr	r3, [r4, #16]
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	f043 0308 	orr.w	r3, r3, #8
 800fef4:	81a3      	strh	r3, [r4, #12]
 800fef6:	6923      	ldr	r3, [r4, #16]
 800fef8:	b94b      	cbnz	r3, 800ff0e <__swsetup_r+0x9a>
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff04:	d003      	beq.n	800ff0e <__swsetup_r+0x9a>
 800ff06:	4621      	mov	r1, r4
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f000 fa07 	bl	801031c <__smakebuf_r>
 800ff0e:	89a0      	ldrh	r0, [r4, #12]
 800ff10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff14:	f010 0301 	ands.w	r3, r0, #1
 800ff18:	d00a      	beq.n	800ff30 <__swsetup_r+0xbc>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	60a3      	str	r3, [r4, #8]
 800ff1e:	6963      	ldr	r3, [r4, #20]
 800ff20:	425b      	negs	r3, r3
 800ff22:	61a3      	str	r3, [r4, #24]
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	b943      	cbnz	r3, 800ff3a <__swsetup_r+0xc6>
 800ff28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff2c:	d1ba      	bne.n	800fea4 <__swsetup_r+0x30>
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	0781      	lsls	r1, r0, #30
 800ff32:	bf58      	it	pl
 800ff34:	6963      	ldrpl	r3, [r4, #20]
 800ff36:	60a3      	str	r3, [r4, #8]
 800ff38:	e7f4      	b.n	800ff24 <__swsetup_r+0xb0>
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	e7f7      	b.n	800ff2e <__swsetup_r+0xba>
 800ff3e:	bf00      	nop
 800ff40:	24000010 	.word	0x24000010
 800ff44:	080115cc 	.word	0x080115cc
 800ff48:	080115ec 	.word	0x080115ec
 800ff4c:	080115ac 	.word	0x080115ac

0800ff50 <abort>:
 800ff50:	b508      	push	{r3, lr}
 800ff52:	2006      	movs	r0, #6
 800ff54:	f000 fa52 	bl	80103fc <raise>
 800ff58:	2001      	movs	r0, #1
 800ff5a:	f7f1 fdc9 	bl	8001af0 <_exit>
	...

0800ff60 <__sflush_r>:
 800ff60:	898a      	ldrh	r2, [r1, #12]
 800ff62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff66:	4605      	mov	r5, r0
 800ff68:	0710      	lsls	r0, r2, #28
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	d458      	bmi.n	8010020 <__sflush_r+0xc0>
 800ff6e:	684b      	ldr	r3, [r1, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	dc05      	bgt.n	800ff80 <__sflush_r+0x20>
 800ff74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	dc02      	bgt.n	800ff80 <__sflush_r+0x20>
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff82:	2e00      	cmp	r6, #0
 800ff84:	d0f9      	beq.n	800ff7a <__sflush_r+0x1a>
 800ff86:	2300      	movs	r3, #0
 800ff88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff8c:	682f      	ldr	r7, [r5, #0]
 800ff8e:	602b      	str	r3, [r5, #0]
 800ff90:	d032      	beq.n	800fff8 <__sflush_r+0x98>
 800ff92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	075a      	lsls	r2, r3, #29
 800ff98:	d505      	bpl.n	800ffa6 <__sflush_r+0x46>
 800ff9a:	6863      	ldr	r3, [r4, #4]
 800ff9c:	1ac0      	subs	r0, r0, r3
 800ff9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffa0:	b10b      	cbz	r3, 800ffa6 <__sflush_r+0x46>
 800ffa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffa4:	1ac0      	subs	r0, r0, r3
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffac:	6a21      	ldr	r1, [r4, #32]
 800ffae:	4628      	mov	r0, r5
 800ffb0:	47b0      	blx	r6
 800ffb2:	1c43      	adds	r3, r0, #1
 800ffb4:	89a3      	ldrh	r3, [r4, #12]
 800ffb6:	d106      	bne.n	800ffc6 <__sflush_r+0x66>
 800ffb8:	6829      	ldr	r1, [r5, #0]
 800ffba:	291d      	cmp	r1, #29
 800ffbc:	d82c      	bhi.n	8010018 <__sflush_r+0xb8>
 800ffbe:	4a2a      	ldr	r2, [pc, #168]	; (8010068 <__sflush_r+0x108>)
 800ffc0:	40ca      	lsrs	r2, r1
 800ffc2:	07d6      	lsls	r6, r2, #31
 800ffc4:	d528      	bpl.n	8010018 <__sflush_r+0xb8>
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	6062      	str	r2, [r4, #4]
 800ffca:	04d9      	lsls	r1, r3, #19
 800ffcc:	6922      	ldr	r2, [r4, #16]
 800ffce:	6022      	str	r2, [r4, #0]
 800ffd0:	d504      	bpl.n	800ffdc <__sflush_r+0x7c>
 800ffd2:	1c42      	adds	r2, r0, #1
 800ffd4:	d101      	bne.n	800ffda <__sflush_r+0x7a>
 800ffd6:	682b      	ldr	r3, [r5, #0]
 800ffd8:	b903      	cbnz	r3, 800ffdc <__sflush_r+0x7c>
 800ffda:	6560      	str	r0, [r4, #84]	; 0x54
 800ffdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffde:	602f      	str	r7, [r5, #0]
 800ffe0:	2900      	cmp	r1, #0
 800ffe2:	d0ca      	beq.n	800ff7a <__sflush_r+0x1a>
 800ffe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffe8:	4299      	cmp	r1, r3
 800ffea:	d002      	beq.n	800fff2 <__sflush_r+0x92>
 800ffec:	4628      	mov	r0, r5
 800ffee:	f7ff fae3 	bl	800f5b8 <_free_r>
 800fff2:	2000      	movs	r0, #0
 800fff4:	6360      	str	r0, [r4, #52]	; 0x34
 800fff6:	e7c1      	b.n	800ff7c <__sflush_r+0x1c>
 800fff8:	6a21      	ldr	r1, [r4, #32]
 800fffa:	2301      	movs	r3, #1
 800fffc:	4628      	mov	r0, r5
 800fffe:	47b0      	blx	r6
 8010000:	1c41      	adds	r1, r0, #1
 8010002:	d1c7      	bne.n	800ff94 <__sflush_r+0x34>
 8010004:	682b      	ldr	r3, [r5, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0c4      	beq.n	800ff94 <__sflush_r+0x34>
 801000a:	2b1d      	cmp	r3, #29
 801000c:	d001      	beq.n	8010012 <__sflush_r+0xb2>
 801000e:	2b16      	cmp	r3, #22
 8010010:	d101      	bne.n	8010016 <__sflush_r+0xb6>
 8010012:	602f      	str	r7, [r5, #0]
 8010014:	e7b1      	b.n	800ff7a <__sflush_r+0x1a>
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801001c:	81a3      	strh	r3, [r4, #12]
 801001e:	e7ad      	b.n	800ff7c <__sflush_r+0x1c>
 8010020:	690f      	ldr	r7, [r1, #16]
 8010022:	2f00      	cmp	r7, #0
 8010024:	d0a9      	beq.n	800ff7a <__sflush_r+0x1a>
 8010026:	0793      	lsls	r3, r2, #30
 8010028:	680e      	ldr	r6, [r1, #0]
 801002a:	bf08      	it	eq
 801002c:	694b      	ldreq	r3, [r1, #20]
 801002e:	600f      	str	r7, [r1, #0]
 8010030:	bf18      	it	ne
 8010032:	2300      	movne	r3, #0
 8010034:	eba6 0807 	sub.w	r8, r6, r7
 8010038:	608b      	str	r3, [r1, #8]
 801003a:	f1b8 0f00 	cmp.w	r8, #0
 801003e:	dd9c      	ble.n	800ff7a <__sflush_r+0x1a>
 8010040:	6a21      	ldr	r1, [r4, #32]
 8010042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010044:	4643      	mov	r3, r8
 8010046:	463a      	mov	r2, r7
 8010048:	4628      	mov	r0, r5
 801004a:	47b0      	blx	r6
 801004c:	2800      	cmp	r0, #0
 801004e:	dc06      	bgt.n	801005e <__sflush_r+0xfe>
 8010050:	89a3      	ldrh	r3, [r4, #12]
 8010052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010056:	81a3      	strh	r3, [r4, #12]
 8010058:	f04f 30ff 	mov.w	r0, #4294967295
 801005c:	e78e      	b.n	800ff7c <__sflush_r+0x1c>
 801005e:	4407      	add	r7, r0
 8010060:	eba8 0800 	sub.w	r8, r8, r0
 8010064:	e7e9      	b.n	801003a <__sflush_r+0xda>
 8010066:	bf00      	nop
 8010068:	20400001 	.word	0x20400001

0801006c <_fflush_r>:
 801006c:	b538      	push	{r3, r4, r5, lr}
 801006e:	690b      	ldr	r3, [r1, #16]
 8010070:	4605      	mov	r5, r0
 8010072:	460c      	mov	r4, r1
 8010074:	b913      	cbnz	r3, 801007c <_fflush_r+0x10>
 8010076:	2500      	movs	r5, #0
 8010078:	4628      	mov	r0, r5
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	b118      	cbz	r0, 8010086 <_fflush_r+0x1a>
 801007e:	6983      	ldr	r3, [r0, #24]
 8010080:	b90b      	cbnz	r3, 8010086 <_fflush_r+0x1a>
 8010082:	f000 f887 	bl	8010194 <__sinit>
 8010086:	4b14      	ldr	r3, [pc, #80]	; (80100d8 <_fflush_r+0x6c>)
 8010088:	429c      	cmp	r4, r3
 801008a:	d11b      	bne.n	80100c4 <_fflush_r+0x58>
 801008c:	686c      	ldr	r4, [r5, #4]
 801008e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d0ef      	beq.n	8010076 <_fflush_r+0xa>
 8010096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010098:	07d0      	lsls	r0, r2, #31
 801009a:	d404      	bmi.n	80100a6 <_fflush_r+0x3a>
 801009c:	0599      	lsls	r1, r3, #22
 801009e:	d402      	bmi.n	80100a6 <_fflush_r+0x3a>
 80100a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100a2:	f000 f915 	bl	80102d0 <__retarget_lock_acquire_recursive>
 80100a6:	4628      	mov	r0, r5
 80100a8:	4621      	mov	r1, r4
 80100aa:	f7ff ff59 	bl	800ff60 <__sflush_r>
 80100ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100b0:	07da      	lsls	r2, r3, #31
 80100b2:	4605      	mov	r5, r0
 80100b4:	d4e0      	bmi.n	8010078 <_fflush_r+0xc>
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	059b      	lsls	r3, r3, #22
 80100ba:	d4dd      	bmi.n	8010078 <_fflush_r+0xc>
 80100bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100be:	f000 f908 	bl	80102d2 <__retarget_lock_release_recursive>
 80100c2:	e7d9      	b.n	8010078 <_fflush_r+0xc>
 80100c4:	4b05      	ldr	r3, [pc, #20]	; (80100dc <_fflush_r+0x70>)
 80100c6:	429c      	cmp	r4, r3
 80100c8:	d101      	bne.n	80100ce <_fflush_r+0x62>
 80100ca:	68ac      	ldr	r4, [r5, #8]
 80100cc:	e7df      	b.n	801008e <_fflush_r+0x22>
 80100ce:	4b04      	ldr	r3, [pc, #16]	; (80100e0 <_fflush_r+0x74>)
 80100d0:	429c      	cmp	r4, r3
 80100d2:	bf08      	it	eq
 80100d4:	68ec      	ldreq	r4, [r5, #12]
 80100d6:	e7da      	b.n	801008e <_fflush_r+0x22>
 80100d8:	080115cc 	.word	0x080115cc
 80100dc:	080115ec 	.word	0x080115ec
 80100e0:	080115ac 	.word	0x080115ac

080100e4 <std>:
 80100e4:	2300      	movs	r3, #0
 80100e6:	b510      	push	{r4, lr}
 80100e8:	4604      	mov	r4, r0
 80100ea:	e9c0 3300 	strd	r3, r3, [r0]
 80100ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100f2:	6083      	str	r3, [r0, #8]
 80100f4:	8181      	strh	r1, [r0, #12]
 80100f6:	6643      	str	r3, [r0, #100]	; 0x64
 80100f8:	81c2      	strh	r2, [r0, #14]
 80100fa:	6183      	str	r3, [r0, #24]
 80100fc:	4619      	mov	r1, r3
 80100fe:	2208      	movs	r2, #8
 8010100:	305c      	adds	r0, #92	; 0x5c
 8010102:	f7fd fc0f 	bl	800d924 <memset>
 8010106:	4b05      	ldr	r3, [pc, #20]	; (801011c <std+0x38>)
 8010108:	6263      	str	r3, [r4, #36]	; 0x24
 801010a:	4b05      	ldr	r3, [pc, #20]	; (8010120 <std+0x3c>)
 801010c:	62a3      	str	r3, [r4, #40]	; 0x28
 801010e:	4b05      	ldr	r3, [pc, #20]	; (8010124 <std+0x40>)
 8010110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010112:	4b05      	ldr	r3, [pc, #20]	; (8010128 <std+0x44>)
 8010114:	6224      	str	r4, [r4, #32]
 8010116:	6323      	str	r3, [r4, #48]	; 0x30
 8010118:	bd10      	pop	{r4, pc}
 801011a:	bf00      	nop
 801011c:	08010435 	.word	0x08010435
 8010120:	08010457 	.word	0x08010457
 8010124:	0801048f 	.word	0x0801048f
 8010128:	080104b3 	.word	0x080104b3

0801012c <_cleanup_r>:
 801012c:	4901      	ldr	r1, [pc, #4]	; (8010134 <_cleanup_r+0x8>)
 801012e:	f000 b8af 	b.w	8010290 <_fwalk_reent>
 8010132:	bf00      	nop
 8010134:	0801006d 	.word	0x0801006d

08010138 <__sfmoreglue>:
 8010138:	b570      	push	{r4, r5, r6, lr}
 801013a:	1e4a      	subs	r2, r1, #1
 801013c:	2568      	movs	r5, #104	; 0x68
 801013e:	4355      	muls	r5, r2
 8010140:	460e      	mov	r6, r1
 8010142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010146:	f7ff fa87 	bl	800f658 <_malloc_r>
 801014a:	4604      	mov	r4, r0
 801014c:	b140      	cbz	r0, 8010160 <__sfmoreglue+0x28>
 801014e:	2100      	movs	r1, #0
 8010150:	e9c0 1600 	strd	r1, r6, [r0]
 8010154:	300c      	adds	r0, #12
 8010156:	60a0      	str	r0, [r4, #8]
 8010158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801015c:	f7fd fbe2 	bl	800d924 <memset>
 8010160:	4620      	mov	r0, r4
 8010162:	bd70      	pop	{r4, r5, r6, pc}

08010164 <__sfp_lock_acquire>:
 8010164:	4801      	ldr	r0, [pc, #4]	; (801016c <__sfp_lock_acquire+0x8>)
 8010166:	f000 b8b3 	b.w	80102d0 <__retarget_lock_acquire_recursive>
 801016a:	bf00      	nop
 801016c:	24005428 	.word	0x24005428

08010170 <__sfp_lock_release>:
 8010170:	4801      	ldr	r0, [pc, #4]	; (8010178 <__sfp_lock_release+0x8>)
 8010172:	f000 b8ae 	b.w	80102d2 <__retarget_lock_release_recursive>
 8010176:	bf00      	nop
 8010178:	24005428 	.word	0x24005428

0801017c <__sinit_lock_acquire>:
 801017c:	4801      	ldr	r0, [pc, #4]	; (8010184 <__sinit_lock_acquire+0x8>)
 801017e:	f000 b8a7 	b.w	80102d0 <__retarget_lock_acquire_recursive>
 8010182:	bf00      	nop
 8010184:	24005423 	.word	0x24005423

08010188 <__sinit_lock_release>:
 8010188:	4801      	ldr	r0, [pc, #4]	; (8010190 <__sinit_lock_release+0x8>)
 801018a:	f000 b8a2 	b.w	80102d2 <__retarget_lock_release_recursive>
 801018e:	bf00      	nop
 8010190:	24005423 	.word	0x24005423

08010194 <__sinit>:
 8010194:	b510      	push	{r4, lr}
 8010196:	4604      	mov	r4, r0
 8010198:	f7ff fff0 	bl	801017c <__sinit_lock_acquire>
 801019c:	69a3      	ldr	r3, [r4, #24]
 801019e:	b11b      	cbz	r3, 80101a8 <__sinit+0x14>
 80101a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a4:	f7ff bff0 	b.w	8010188 <__sinit_lock_release>
 80101a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80101ac:	6523      	str	r3, [r4, #80]	; 0x50
 80101ae:	4b13      	ldr	r3, [pc, #76]	; (80101fc <__sinit+0x68>)
 80101b0:	4a13      	ldr	r2, [pc, #76]	; (8010200 <__sinit+0x6c>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80101b6:	42a3      	cmp	r3, r4
 80101b8:	bf04      	itt	eq
 80101ba:	2301      	moveq	r3, #1
 80101bc:	61a3      	streq	r3, [r4, #24]
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 f820 	bl	8010204 <__sfp>
 80101c4:	6060      	str	r0, [r4, #4]
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 f81c 	bl	8010204 <__sfp>
 80101cc:	60a0      	str	r0, [r4, #8]
 80101ce:	4620      	mov	r0, r4
 80101d0:	f000 f818 	bl	8010204 <__sfp>
 80101d4:	2200      	movs	r2, #0
 80101d6:	60e0      	str	r0, [r4, #12]
 80101d8:	2104      	movs	r1, #4
 80101da:	6860      	ldr	r0, [r4, #4]
 80101dc:	f7ff ff82 	bl	80100e4 <std>
 80101e0:	68a0      	ldr	r0, [r4, #8]
 80101e2:	2201      	movs	r2, #1
 80101e4:	2109      	movs	r1, #9
 80101e6:	f7ff ff7d 	bl	80100e4 <std>
 80101ea:	68e0      	ldr	r0, [r4, #12]
 80101ec:	2202      	movs	r2, #2
 80101ee:	2112      	movs	r1, #18
 80101f0:	f7ff ff78 	bl	80100e4 <std>
 80101f4:	2301      	movs	r3, #1
 80101f6:	61a3      	str	r3, [r4, #24]
 80101f8:	e7d2      	b.n	80101a0 <__sinit+0xc>
 80101fa:	bf00      	nop
 80101fc:	08011228 	.word	0x08011228
 8010200:	0801012d 	.word	0x0801012d

08010204 <__sfp>:
 8010204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010206:	4607      	mov	r7, r0
 8010208:	f7ff ffac 	bl	8010164 <__sfp_lock_acquire>
 801020c:	4b1e      	ldr	r3, [pc, #120]	; (8010288 <__sfp+0x84>)
 801020e:	681e      	ldr	r6, [r3, #0]
 8010210:	69b3      	ldr	r3, [r6, #24]
 8010212:	b913      	cbnz	r3, 801021a <__sfp+0x16>
 8010214:	4630      	mov	r0, r6
 8010216:	f7ff ffbd 	bl	8010194 <__sinit>
 801021a:	3648      	adds	r6, #72	; 0x48
 801021c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010220:	3b01      	subs	r3, #1
 8010222:	d503      	bpl.n	801022c <__sfp+0x28>
 8010224:	6833      	ldr	r3, [r6, #0]
 8010226:	b30b      	cbz	r3, 801026c <__sfp+0x68>
 8010228:	6836      	ldr	r6, [r6, #0]
 801022a:	e7f7      	b.n	801021c <__sfp+0x18>
 801022c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010230:	b9d5      	cbnz	r5, 8010268 <__sfp+0x64>
 8010232:	4b16      	ldr	r3, [pc, #88]	; (801028c <__sfp+0x88>)
 8010234:	60e3      	str	r3, [r4, #12]
 8010236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801023a:	6665      	str	r5, [r4, #100]	; 0x64
 801023c:	f000 f847 	bl	80102ce <__retarget_lock_init_recursive>
 8010240:	f7ff ff96 	bl	8010170 <__sfp_lock_release>
 8010244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801024c:	6025      	str	r5, [r4, #0]
 801024e:	61a5      	str	r5, [r4, #24]
 8010250:	2208      	movs	r2, #8
 8010252:	4629      	mov	r1, r5
 8010254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010258:	f7fd fb64 	bl	800d924 <memset>
 801025c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010264:	4620      	mov	r0, r4
 8010266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010268:	3468      	adds	r4, #104	; 0x68
 801026a:	e7d9      	b.n	8010220 <__sfp+0x1c>
 801026c:	2104      	movs	r1, #4
 801026e:	4638      	mov	r0, r7
 8010270:	f7ff ff62 	bl	8010138 <__sfmoreglue>
 8010274:	4604      	mov	r4, r0
 8010276:	6030      	str	r0, [r6, #0]
 8010278:	2800      	cmp	r0, #0
 801027a:	d1d5      	bne.n	8010228 <__sfp+0x24>
 801027c:	f7ff ff78 	bl	8010170 <__sfp_lock_release>
 8010280:	230c      	movs	r3, #12
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	e7ee      	b.n	8010264 <__sfp+0x60>
 8010286:	bf00      	nop
 8010288:	08011228 	.word	0x08011228
 801028c:	ffff0001 	.word	0xffff0001

08010290 <_fwalk_reent>:
 8010290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010294:	4606      	mov	r6, r0
 8010296:	4688      	mov	r8, r1
 8010298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801029c:	2700      	movs	r7, #0
 801029e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80102a2:	f1b9 0901 	subs.w	r9, r9, #1
 80102a6:	d505      	bpl.n	80102b4 <_fwalk_reent+0x24>
 80102a8:	6824      	ldr	r4, [r4, #0]
 80102aa:	2c00      	cmp	r4, #0
 80102ac:	d1f7      	bne.n	801029e <_fwalk_reent+0xe>
 80102ae:	4638      	mov	r0, r7
 80102b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b4:	89ab      	ldrh	r3, [r5, #12]
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d907      	bls.n	80102ca <_fwalk_reent+0x3a>
 80102ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102be:	3301      	adds	r3, #1
 80102c0:	d003      	beq.n	80102ca <_fwalk_reent+0x3a>
 80102c2:	4629      	mov	r1, r5
 80102c4:	4630      	mov	r0, r6
 80102c6:	47c0      	blx	r8
 80102c8:	4307      	orrs	r7, r0
 80102ca:	3568      	adds	r5, #104	; 0x68
 80102cc:	e7e9      	b.n	80102a2 <_fwalk_reent+0x12>

080102ce <__retarget_lock_init_recursive>:
 80102ce:	4770      	bx	lr

080102d0 <__retarget_lock_acquire_recursive>:
 80102d0:	4770      	bx	lr

080102d2 <__retarget_lock_release_recursive>:
 80102d2:	4770      	bx	lr

080102d4 <__swhatbuf_r>:
 80102d4:	b570      	push	{r4, r5, r6, lr}
 80102d6:	460e      	mov	r6, r1
 80102d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102dc:	2900      	cmp	r1, #0
 80102de:	b096      	sub	sp, #88	; 0x58
 80102e0:	4614      	mov	r4, r2
 80102e2:	461d      	mov	r5, r3
 80102e4:	da07      	bge.n	80102f6 <__swhatbuf_r+0x22>
 80102e6:	2300      	movs	r3, #0
 80102e8:	602b      	str	r3, [r5, #0]
 80102ea:	89b3      	ldrh	r3, [r6, #12]
 80102ec:	061a      	lsls	r2, r3, #24
 80102ee:	d410      	bmi.n	8010312 <__swhatbuf_r+0x3e>
 80102f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102f4:	e00e      	b.n	8010314 <__swhatbuf_r+0x40>
 80102f6:	466a      	mov	r2, sp
 80102f8:	f000 f902 	bl	8010500 <_fstat_r>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	dbf2      	blt.n	80102e6 <__swhatbuf_r+0x12>
 8010300:	9a01      	ldr	r2, [sp, #4]
 8010302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801030a:	425a      	negs	r2, r3
 801030c:	415a      	adcs	r2, r3
 801030e:	602a      	str	r2, [r5, #0]
 8010310:	e7ee      	b.n	80102f0 <__swhatbuf_r+0x1c>
 8010312:	2340      	movs	r3, #64	; 0x40
 8010314:	2000      	movs	r0, #0
 8010316:	6023      	str	r3, [r4, #0]
 8010318:	b016      	add	sp, #88	; 0x58
 801031a:	bd70      	pop	{r4, r5, r6, pc}

0801031c <__smakebuf_r>:
 801031c:	898b      	ldrh	r3, [r1, #12]
 801031e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010320:	079d      	lsls	r5, r3, #30
 8010322:	4606      	mov	r6, r0
 8010324:	460c      	mov	r4, r1
 8010326:	d507      	bpl.n	8010338 <__smakebuf_r+0x1c>
 8010328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	6123      	str	r3, [r4, #16]
 8010330:	2301      	movs	r3, #1
 8010332:	6163      	str	r3, [r4, #20]
 8010334:	b002      	add	sp, #8
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	ab01      	add	r3, sp, #4
 801033a:	466a      	mov	r2, sp
 801033c:	f7ff ffca 	bl	80102d4 <__swhatbuf_r>
 8010340:	9900      	ldr	r1, [sp, #0]
 8010342:	4605      	mov	r5, r0
 8010344:	4630      	mov	r0, r6
 8010346:	f7ff f987 	bl	800f658 <_malloc_r>
 801034a:	b948      	cbnz	r0, 8010360 <__smakebuf_r+0x44>
 801034c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010350:	059a      	lsls	r2, r3, #22
 8010352:	d4ef      	bmi.n	8010334 <__smakebuf_r+0x18>
 8010354:	f023 0303 	bic.w	r3, r3, #3
 8010358:	f043 0302 	orr.w	r3, r3, #2
 801035c:	81a3      	strh	r3, [r4, #12]
 801035e:	e7e3      	b.n	8010328 <__smakebuf_r+0xc>
 8010360:	4b0d      	ldr	r3, [pc, #52]	; (8010398 <__smakebuf_r+0x7c>)
 8010362:	62b3      	str	r3, [r6, #40]	; 0x28
 8010364:	89a3      	ldrh	r3, [r4, #12]
 8010366:	6020      	str	r0, [r4, #0]
 8010368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801036c:	81a3      	strh	r3, [r4, #12]
 801036e:	9b00      	ldr	r3, [sp, #0]
 8010370:	6163      	str	r3, [r4, #20]
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	6120      	str	r0, [r4, #16]
 8010376:	b15b      	cbz	r3, 8010390 <__smakebuf_r+0x74>
 8010378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801037c:	4630      	mov	r0, r6
 801037e:	f000 f8d1 	bl	8010524 <_isatty_r>
 8010382:	b128      	cbz	r0, 8010390 <__smakebuf_r+0x74>
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	f023 0303 	bic.w	r3, r3, #3
 801038a:	f043 0301 	orr.w	r3, r3, #1
 801038e:	81a3      	strh	r3, [r4, #12]
 8010390:	89a0      	ldrh	r0, [r4, #12]
 8010392:	4305      	orrs	r5, r0
 8010394:	81a5      	strh	r5, [r4, #12]
 8010396:	e7cd      	b.n	8010334 <__smakebuf_r+0x18>
 8010398:	0801012d 	.word	0x0801012d

0801039c <_malloc_usable_size_r>:
 801039c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103a0:	1f18      	subs	r0, r3, #4
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	bfbc      	itt	lt
 80103a6:	580b      	ldrlt	r3, [r1, r0]
 80103a8:	18c0      	addlt	r0, r0, r3
 80103aa:	4770      	bx	lr

080103ac <_raise_r>:
 80103ac:	291f      	cmp	r1, #31
 80103ae:	b538      	push	{r3, r4, r5, lr}
 80103b0:	4604      	mov	r4, r0
 80103b2:	460d      	mov	r5, r1
 80103b4:	d904      	bls.n	80103c0 <_raise_r+0x14>
 80103b6:	2316      	movs	r3, #22
 80103b8:	6003      	str	r3, [r0, #0]
 80103ba:	f04f 30ff 	mov.w	r0, #4294967295
 80103be:	bd38      	pop	{r3, r4, r5, pc}
 80103c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103c2:	b112      	cbz	r2, 80103ca <_raise_r+0x1e>
 80103c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103c8:	b94b      	cbnz	r3, 80103de <_raise_r+0x32>
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 f830 	bl	8010430 <_getpid_r>
 80103d0:	462a      	mov	r2, r5
 80103d2:	4601      	mov	r1, r0
 80103d4:	4620      	mov	r0, r4
 80103d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103da:	f000 b817 	b.w	801040c <_kill_r>
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d00a      	beq.n	80103f8 <_raise_r+0x4c>
 80103e2:	1c59      	adds	r1, r3, #1
 80103e4:	d103      	bne.n	80103ee <_raise_r+0x42>
 80103e6:	2316      	movs	r3, #22
 80103e8:	6003      	str	r3, [r0, #0]
 80103ea:	2001      	movs	r0, #1
 80103ec:	e7e7      	b.n	80103be <_raise_r+0x12>
 80103ee:	2400      	movs	r4, #0
 80103f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103f4:	4628      	mov	r0, r5
 80103f6:	4798      	blx	r3
 80103f8:	2000      	movs	r0, #0
 80103fa:	e7e0      	b.n	80103be <_raise_r+0x12>

080103fc <raise>:
 80103fc:	4b02      	ldr	r3, [pc, #8]	; (8010408 <raise+0xc>)
 80103fe:	4601      	mov	r1, r0
 8010400:	6818      	ldr	r0, [r3, #0]
 8010402:	f7ff bfd3 	b.w	80103ac <_raise_r>
 8010406:	bf00      	nop
 8010408:	24000010 	.word	0x24000010

0801040c <_kill_r>:
 801040c:	b538      	push	{r3, r4, r5, lr}
 801040e:	4d07      	ldr	r5, [pc, #28]	; (801042c <_kill_r+0x20>)
 8010410:	2300      	movs	r3, #0
 8010412:	4604      	mov	r4, r0
 8010414:	4608      	mov	r0, r1
 8010416:	4611      	mov	r1, r2
 8010418:	602b      	str	r3, [r5, #0]
 801041a:	f7f1 fb59 	bl	8001ad0 <_kill>
 801041e:	1c43      	adds	r3, r0, #1
 8010420:	d102      	bne.n	8010428 <_kill_r+0x1c>
 8010422:	682b      	ldr	r3, [r5, #0]
 8010424:	b103      	cbz	r3, 8010428 <_kill_r+0x1c>
 8010426:	6023      	str	r3, [r4, #0]
 8010428:	bd38      	pop	{r3, r4, r5, pc}
 801042a:	bf00      	nop
 801042c:	2400541c 	.word	0x2400541c

08010430 <_getpid_r>:
 8010430:	f7f1 bb46 	b.w	8001ac0 <_getpid>

08010434 <__sread>:
 8010434:	b510      	push	{r4, lr}
 8010436:	460c      	mov	r4, r1
 8010438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801043c:	f000 f894 	bl	8010568 <_read_r>
 8010440:	2800      	cmp	r0, #0
 8010442:	bfab      	itete	ge
 8010444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010446:	89a3      	ldrhlt	r3, [r4, #12]
 8010448:	181b      	addge	r3, r3, r0
 801044a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801044e:	bfac      	ite	ge
 8010450:	6563      	strge	r3, [r4, #84]	; 0x54
 8010452:	81a3      	strhlt	r3, [r4, #12]
 8010454:	bd10      	pop	{r4, pc}

08010456 <__swrite>:
 8010456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801045a:	461f      	mov	r7, r3
 801045c:	898b      	ldrh	r3, [r1, #12]
 801045e:	05db      	lsls	r3, r3, #23
 8010460:	4605      	mov	r5, r0
 8010462:	460c      	mov	r4, r1
 8010464:	4616      	mov	r6, r2
 8010466:	d505      	bpl.n	8010474 <__swrite+0x1e>
 8010468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046c:	2302      	movs	r3, #2
 801046e:	2200      	movs	r2, #0
 8010470:	f000 f868 	bl	8010544 <_lseek_r>
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801047a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801047e:	81a3      	strh	r3, [r4, #12]
 8010480:	4632      	mov	r2, r6
 8010482:	463b      	mov	r3, r7
 8010484:	4628      	mov	r0, r5
 8010486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801048a:	f000 b817 	b.w	80104bc <_write_r>

0801048e <__sseek>:
 801048e:	b510      	push	{r4, lr}
 8010490:	460c      	mov	r4, r1
 8010492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010496:	f000 f855 	bl	8010544 <_lseek_r>
 801049a:	1c43      	adds	r3, r0, #1
 801049c:	89a3      	ldrh	r3, [r4, #12]
 801049e:	bf15      	itete	ne
 80104a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80104a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104aa:	81a3      	strheq	r3, [r4, #12]
 80104ac:	bf18      	it	ne
 80104ae:	81a3      	strhne	r3, [r4, #12]
 80104b0:	bd10      	pop	{r4, pc}

080104b2 <__sclose>:
 80104b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b6:	f000 b813 	b.w	80104e0 <_close_r>
	...

080104bc <_write_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d07      	ldr	r5, [pc, #28]	; (80104dc <_write_r+0x20>)
 80104c0:	4604      	mov	r4, r0
 80104c2:	4608      	mov	r0, r1
 80104c4:	4611      	mov	r1, r2
 80104c6:	2200      	movs	r2, #0
 80104c8:	602a      	str	r2, [r5, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	f7f1 fb37 	bl	8001b3e <_write>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <_write_r+0x1e>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	b103      	cbz	r3, 80104da <_write_r+0x1e>
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	2400541c 	.word	0x2400541c

080104e0 <_close_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	4d06      	ldr	r5, [pc, #24]	; (80104fc <_close_r+0x1c>)
 80104e4:	2300      	movs	r3, #0
 80104e6:	4604      	mov	r4, r0
 80104e8:	4608      	mov	r0, r1
 80104ea:	602b      	str	r3, [r5, #0]
 80104ec:	f7f1 fb43 	bl	8001b76 <_close>
 80104f0:	1c43      	adds	r3, r0, #1
 80104f2:	d102      	bne.n	80104fa <_close_r+0x1a>
 80104f4:	682b      	ldr	r3, [r5, #0]
 80104f6:	b103      	cbz	r3, 80104fa <_close_r+0x1a>
 80104f8:	6023      	str	r3, [r4, #0]
 80104fa:	bd38      	pop	{r3, r4, r5, pc}
 80104fc:	2400541c 	.word	0x2400541c

08010500 <_fstat_r>:
 8010500:	b538      	push	{r3, r4, r5, lr}
 8010502:	4d07      	ldr	r5, [pc, #28]	; (8010520 <_fstat_r+0x20>)
 8010504:	2300      	movs	r3, #0
 8010506:	4604      	mov	r4, r0
 8010508:	4608      	mov	r0, r1
 801050a:	4611      	mov	r1, r2
 801050c:	602b      	str	r3, [r5, #0]
 801050e:	f7f1 fb3e 	bl	8001b8e <_fstat>
 8010512:	1c43      	adds	r3, r0, #1
 8010514:	d102      	bne.n	801051c <_fstat_r+0x1c>
 8010516:	682b      	ldr	r3, [r5, #0]
 8010518:	b103      	cbz	r3, 801051c <_fstat_r+0x1c>
 801051a:	6023      	str	r3, [r4, #0]
 801051c:	bd38      	pop	{r3, r4, r5, pc}
 801051e:	bf00      	nop
 8010520:	2400541c 	.word	0x2400541c

08010524 <_isatty_r>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4d06      	ldr	r5, [pc, #24]	; (8010540 <_isatty_r+0x1c>)
 8010528:	2300      	movs	r3, #0
 801052a:	4604      	mov	r4, r0
 801052c:	4608      	mov	r0, r1
 801052e:	602b      	str	r3, [r5, #0]
 8010530:	f7f1 fb3d 	bl	8001bae <_isatty>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d102      	bne.n	801053e <_isatty_r+0x1a>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	b103      	cbz	r3, 801053e <_isatty_r+0x1a>
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	2400541c 	.word	0x2400541c

08010544 <_lseek_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d07      	ldr	r5, [pc, #28]	; (8010564 <_lseek_r+0x20>)
 8010548:	4604      	mov	r4, r0
 801054a:	4608      	mov	r0, r1
 801054c:	4611      	mov	r1, r2
 801054e:	2200      	movs	r2, #0
 8010550:	602a      	str	r2, [r5, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	f7f1 fb36 	bl	8001bc4 <_lseek>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_lseek_r+0x1e>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_lseek_r+0x1e>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	2400541c 	.word	0x2400541c

08010568 <_read_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	4d07      	ldr	r5, [pc, #28]	; (8010588 <_read_r+0x20>)
 801056c:	4604      	mov	r4, r0
 801056e:	4608      	mov	r0, r1
 8010570:	4611      	mov	r1, r2
 8010572:	2200      	movs	r2, #0
 8010574:	602a      	str	r2, [r5, #0]
 8010576:	461a      	mov	r2, r3
 8010578:	f7f1 fac4 	bl	8001b04 <_read>
 801057c:	1c43      	adds	r3, r0, #1
 801057e:	d102      	bne.n	8010586 <_read_r+0x1e>
 8010580:	682b      	ldr	r3, [r5, #0]
 8010582:	b103      	cbz	r3, 8010586 <_read_r+0x1e>
 8010584:	6023      	str	r3, [r4, #0]
 8010586:	bd38      	pop	{r3, r4, r5, pc}
 8010588:	2400541c 	.word	0x2400541c

0801058c <_init>:
 801058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801058e:	bf00      	nop
 8010590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010592:	bc08      	pop	{r3}
 8010594:	469e      	mov	lr, r3
 8010596:	4770      	bx	lr

08010598 <_fini>:
 8010598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059a:	bf00      	nop
 801059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801059e:	bc08      	pop	{r3}
 80105a0:	469e      	mov	lr, r3
 80105a2:	4770      	bx	lr
