
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d85c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e130  0800e130  0001e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e138  0800e138  0001e138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e13c  0800e13c  0001e13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800e140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000525c  24000074  0800e1b4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240052d0  0800e1b4  000252d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fc3d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e5f  00000000  00000000  0004fcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  00054b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001498  00000000  00000000  00056180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad0d  00000000  00000000  00057618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001df97  00000000  00000000  00092325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001674e1  00000000  00000000  000b02bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021779d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000060f0  00000000  00000000  002177f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dae4 	.word	0x0800dae4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800dae4 	.word	0x0800dae4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f001 fc42 	bl	8001f10 <HAL_FDCAN_RegisterRxFifo0Callback>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 8000692:	f000 fd3d 	bl	8001110 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 fc6a 	bl	8001f70 <HAL_FDCAN_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80006a2:	f000 fd35 	bl	8001110 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f001 fdfa 	bl	80022a4 <HAL_FDCAN_ActivateNotification>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 80006b6:	f000 fd2b 	bl	8001110 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006cc:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <init_CAN+0x10>)
 80006fa:	f000 faaf 	bl	8000c5c <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	240030c8 	.word	0x240030c8

08000708 <SD_Create_File>:
int count = 0;
uint8_t _datalog_flag = 0;


FRESULT SD_Create_File(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	FRESULT fresult;
	uint8_t contFile = 0;	/*enumerate the file*/
 800070e:	2300      	movs	r3, #0
 8000710:	71fb      	strb	r3, [r7, #7]
	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 8000712:	2200      	movs	r2, #0
 8000714:	491a      	ldr	r1, [pc, #104]	; (8000780 <SD_Create_File+0x78>)
 8000716:	481b      	ldr	r0, [pc, #108]	; (8000784 <SD_Create_File+0x7c>)
 8000718:	f00b fd82 	bl	800c220 <f_mount>
 800071c:	4603      	mov	r3, r0
 800071e:	71bb      	strb	r3, [r7, #6]
	do
	{
		sprintf(bufferFile, "ARQ%02d.txt", contFile);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	461a      	mov	r2, r3
 8000724:	4918      	ldr	r1, [pc, #96]	; (8000788 <SD_Create_File+0x80>)
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <SD_Create_File+0x84>)
 8000728:	f00c fdbc 	bl	800d2a4 <siprintf>
		fresult = f_stat(bufferFile, &file);
 800072c:	4918      	ldr	r1, [pc, #96]	; (8000790 <SD_Create_File+0x88>)
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <SD_Create_File+0x84>)
 8000730:	f00c fbe8 	bl	800cf04 <f_stat>
 8000734:	4603      	mov	r3, r0
 8000736:	71bb      	strb	r3, [r7, #6]
		contFile++;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	3301      	adds	r3, #1
 800073c:	71fb      	strb	r3, [r7, #7]
	} while(fresult != FR_NO_FILE);
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b04      	cmp	r3, #4
 8000742:	d1ed      	bne.n	8000720 <SD_Create_File+0x18>
	contFile = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	71fb      	strb	r3, [r7, #7]
	fresult = f_open(&file, bufferFile, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 8000748:	2208      	movs	r2, #8
 800074a:	4910      	ldr	r1, [pc, #64]	; (800078c <SD_Create_File+0x84>)
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <SD_Create_File+0x88>)
 800074e:	f00b fdad 	bl	800c2ac <f_open>
 8000752:	4603      	mov	r3, r0
 8000754:	71bb      	strb	r3, [r7, #6]
	fresult = f_close(&file);
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <SD_Create_File+0x88>)
 8000758:	f00c f986 	bl	800ca68 <f_close>
 800075c:	4603      	mov	r3, r0
 800075e:	71bb      	strb	r3, [r7, #6]
	if(fresult == FR_OK){
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d103      	bne.n	800076e <SD_Create_File+0x66>
		//HAL_GPIO_TogglePin(DATALOG_LED_GPIO_Port, DATALOG_LED_Pin); //Blinks the led to indicate that there was no erros
		_datalog_flag  = 1;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <SD_Create_File+0x8c>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e002      	b.n	8000774 <SD_Create_File+0x6c>
	}
	else _datalog_flag = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <SD_Create_File+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	return fresult;
 8000774:	79bb      	ldrb	r3, [r7, #6]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	0800dafc 	.word	0x0800dafc
 8000784:	24000090 	.word	0x24000090
 8000788:	0800db00 	.word	0x0800db00
 800078c:	24002378 	.word	0x24002378
 8000790:	24001344 	.word	0x24001344
 8000794:	240010c8 	.word	0x240010c8

08000798 <writeSD>:
void writeSD(void)
{
 8000798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079a:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 800079e:	af3e      	add	r7, sp, #248	; 0xf8
	UINT bytes_written; //(ver live expression)
	FRESULT fresult;
	char buffer_log[256]; //(ver live expression)
	uint8_t block[512];
	uint32_t time = HAL_GetTick();
 80007a0:	f001 f814 	bl	80017cc <HAL_GetTick>
 80007a4:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
			"%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t"	//4//AccelZ\GiroX\GiroY\GiroZ\Temp_Ambiente\MLX_0\MLX_1\MLX_2
			"%d\t%u\t%u\t%u\t%X\t%X\t%u\t%u\t"	//5//MLX_3\Sensor_Pressao_1\ADC_1\T_Disco_1\Extensometro_1\Extensometro_2\Sensor_Pressao_2\ADC_2
			"%u\t%X\t%X\t%X\t%u\t%u\t%u\t%u\t"	//6//T_Disco_2\Extensometro_3\Extensometro_4\Extensometro_5\ADC_3\Tensao_GLV\Tensao_Total\Temp_Media_Banco
			"%u\t%u\t%d\t%u\t%u\t%u\t%u\t%u\t"	//7//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
			"%u\t%u\t%d\t%u\t%u\t%u\t%u\n",	//8//Temp_Pack_12\Temp_Pack_21\Temp_Pack_22\Temp_Pack_31\Temp_Pack_32\Temp_Pack_41\Temp_Pack_42\Temp_Pack_51\Temp_Pack_52\test
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007a8:	4baa      	ldr	r3, [pc, #680]	; (8000a54 <writeSD+0x2bc>)
 80007aa:	895b      	ldrh	r3, [r3, #10]
	int len = snprintf((char*) block, sizeof(block),
 80007ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007b0:	4ba8      	ldr	r3, [pc, #672]	; (8000a54 <writeSD+0x2bc>)
 80007b2:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
	int len = snprintf((char*) block, sizeof(block),
 80007b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007ba:	4ba6      	ldr	r3, [pc, #664]	; (8000a54 <writeSD+0x2bc>)
 80007bc:	891b      	ldrh	r3, [r3, #8]
 80007be:	b25b      	sxtb	r3, r3
	int len = snprintf((char*) block, sizeof(block),
 80007c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007c4:	4ba3      	ldr	r3, [pc, #652]	; (8000a54 <writeSD+0x2bc>)
 80007c6:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
	int len = snprintf((char*) block, sizeof(block),
 80007ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007ce:	4ba1      	ldr	r3, [pc, #644]	; (8000a54 <writeSD+0x2bc>)
 80007d0:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
	int len = snprintf((char*) block, sizeof(block),
 80007d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007d8:	4b9e      	ldr	r3, [pc, #632]	; (8000a54 <writeSD+0x2bc>)
 80007da:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	int len = snprintf((char*) block, sizeof(block),
 80007de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	/*1	*/	time,can_vector[1].word_1, can_vector[101].word_3, (int8_t)can_vector[1].word_0, can_vector[101].word_1, can_vector[101].word_2,can_vector[102].word_2,can_vector[102].word_3,
 80007e2:	4b9c      	ldr	r3, [pc, #624]	; (8000a54 <writeSD+0x2bc>)
 80007e4:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
	int len = snprintf((char*) block, sizeof(block),
 80007e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 80007ec:	4b99      	ldr	r3, [pc, #612]	; (8000a54 <writeSD+0x2bc>)
 80007ee:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
	int len = snprintf((char*) block, sizeof(block),
 80007f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 80007f6:	4b97      	ldr	r3, [pc, #604]	; (8000a54 <writeSD+0x2bc>)
 80007f8:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
	int len = snprintf((char*) block, sizeof(block),
 80007fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 8000800:	4b94      	ldr	r3, [pc, #592]	; (8000a54 <writeSD+0x2bc>)
 8000802:	f8b3 333c 	ldrh.w	r3, [r3, #828]	; 0x33c
	int len = snprintf((char*) block, sizeof(block),
 8000806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 800080a:	4b92      	ldr	r3, [pc, #584]	; (8000a54 <writeSD+0x2bc>)
 800080c:	f8b3 333c 	ldrh.w	r3, [r3, #828]	; 0x33c
	int len = snprintf((char*) block, sizeof(block),
 8000810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 8000814:	4b8f      	ldr	r3, [pc, #572]	; (8000a54 <writeSD+0x2bc>)
 8000816:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	int len = snprintf((char*) block, sizeof(block),
 800081a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 800081e:	4b8d      	ldr	r3, [pc, #564]	; (8000a54 <writeSD+0x2bc>)
 8000820:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
	int len = snprintf((char*) block, sizeof(block),
 8000824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 8000828:	4b8a      	ldr	r3, [pc, #552]	; (8000a54 <writeSD+0x2bc>)
 800082a:	f8b3 3344 	ldrh.w	r3, [r3, #836]	; 0x344
	int len = snprintf((char*) block, sizeof(block),
 800082e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_2,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[105].word_0,
 8000832:	4b88      	ldr	r3, [pc, #544]	; (8000a54 <writeSD+0x2bc>)
 8000834:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
	int len = snprintf((char*) block, sizeof(block),
 8000838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	/*3	*/	can_vector[105].word_1,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,can_vector[107].word_2,accelX,accelY,
 800083c:	4b85      	ldr	r3, [pc, #532]	; (8000a54 <writeSD+0x2bc>)
 800083e:	f8b3 334a 	ldrh.w	r3, [r3, #842]	; 0x34a
	int len = snprintf((char*) block, sizeof(block),
 8000842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	/*3	*/	can_vector[105].word_1,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,can_vector[107].word_2,accelX,accelY,
 8000846:	4b83      	ldr	r3, [pc, #524]	; (8000a54 <writeSD+0x2bc>)
 8000848:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
	int len = snprintf((char*) block, sizeof(block),
 800084c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	/*3	*/	can_vector[105].word_1,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,can_vector[107].word_2,accelX,accelY,
 8000850:	4b80      	ldr	r3, [pc, #512]	; (8000a54 <writeSD+0x2bc>)
 8000852:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
	int len = snprintf((char*) block, sizeof(block),
 8000856:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/*3	*/	can_vector[105].word_1,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,can_vector[107].word_2,accelX,accelY,
 800085a:	4b7e      	ldr	r3, [pc, #504]	; (8000a54 <writeSD+0x2bc>)
 800085c:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
	int len = snprintf((char*) block, sizeof(block),
 8000860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/*3	*/	can_vector[105].word_1,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,can_vector[107].word_2,accelX,accelY,
 8000864:	4b7b      	ldr	r3, [pc, #492]	; (8000a54 <writeSD+0x2bc>)
 8000866:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
	int len = snprintf((char*) block, sizeof(block),
 800086a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/*3	*/	can_vector[105].word_1,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,can_vector[107].word_2,accelX,accelY,
 800086e:	4b79      	ldr	r3, [pc, #484]	; (8000a54 <writeSD+0x2bc>)
 8000870:	f8b3 335c 	ldrh.w	r3, [r3, #860]	; 0x35c
	int len = snprintf((char*) block, sizeof(block),
 8000874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000878:	4b77      	ldr	r3, [pc, #476]	; (8000a58 <writeSD+0x2c0>)
 800087a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000882:	4b76      	ldr	r3, [pc, #472]	; (8000a5c <writeSD+0x2c4>)
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800088c:	4b74      	ldr	r3, [pc, #464]	; (8000a60 <writeSD+0x2c8>)
 800088e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000896:	4b73      	ldr	r3, [pc, #460]	; (8000a64 <writeSD+0x2cc>)
 8000898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <writeSD+0x2d0>)
 80008a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80008a6:	4b71      	ldr	r3, [pc, #452]	; (8000a6c <writeSD+0x2d4>)
 80008a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ac:	677b      	str	r3, [r7, #116]	; 0x74
 80008ae:	4b70      	ldr	r3, [pc, #448]	; (8000a70 <writeSD+0x2d8>)
 80008b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70
	/*4	*/	accelZ,gyroX,gyroY,gyroZ,temp,(int16_t)can_vector[156].word_0,(int16_t)can_vector[156].word_1,(int16_t)can_vector[156].word_2,
 80008b6:	4b67      	ldr	r3, [pc, #412]	; (8000a54 <writeSD+0x2bc>)
 80008b8:	f8b3 34e0 	ldrh.w	r3, [r3, #1248]	; 0x4e0
 80008bc:	b21b      	sxth	r3, r3
	int len = snprintf((char*) block, sizeof(block),
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c
	/*4	*/	accelZ,gyroX,gyroY,gyroZ,temp,(int16_t)can_vector[156].word_0,(int16_t)can_vector[156].word_1,(int16_t)can_vector[156].word_2,
 80008c0:	4b64      	ldr	r3, [pc, #400]	; (8000a54 <writeSD+0x2bc>)
 80008c2:	f8b3 34e2 	ldrh.w	r3, [r3, #1250]	; 0x4e2
 80008c6:	b21b      	sxth	r3, r3
	int len = snprintf((char*) block, sizeof(block),
 80008c8:	66bb      	str	r3, [r7, #104]	; 0x68
	/*4	*/	accelZ,gyroX,gyroY,gyroZ,temp,(int16_t)can_vector[156].word_0,(int16_t)can_vector[156].word_1,(int16_t)can_vector[156].word_2,
 80008ca:	4b62      	ldr	r3, [pc, #392]	; (8000a54 <writeSD+0x2bc>)
 80008cc:	f8b3 34e4 	ldrh.w	r3, [r3, #1252]	; 0x4e4
 80008d0:	b21b      	sxth	r3, r3
	int len = snprintf((char*) block, sizeof(block),
 80008d2:	667b      	str	r3, [r7, #100]	; 0x64
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 80008d4:	4b5f      	ldr	r3, [pc, #380]	; (8000a54 <writeSD+0x2bc>)
 80008d6:	f8b3 34e6 	ldrh.w	r3, [r3, #1254]	; 0x4e6
 80008da:	b21b      	sxth	r3, r3
	int len = snprintf((char*) block, sizeof(block),
 80008dc:	663b      	str	r3, [r7, #96]	; 0x60
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 80008de:	4b5d      	ldr	r3, [pc, #372]	; (8000a54 <writeSD+0x2bc>)
 80008e0:	f8b3 3550 	ldrh.w	r3, [r3, #1360]	; 0x550
	int len = snprintf((char*) block, sizeof(block),
 80008e4:	65fb      	str	r3, [r7, #92]	; 0x5c
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 80008e6:	4b5b      	ldr	r3, [pc, #364]	; (8000a54 <writeSD+0x2bc>)
 80008e8:	f8b3 3552 	ldrh.w	r3, [r3, #1362]	; 0x552
	int len = snprintf((char*) block, sizeof(block),
 80008ec:	65bb      	str	r3, [r7, #88]	; 0x58
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 80008ee:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <writeSD+0x2bc>)
 80008f0:	f8b3 3554 	ldrh.w	r3, [r3, #1364]	; 0x554
	int len = snprintf((char*) block, sizeof(block),
 80008f4:	657b      	str	r3, [r7, #84]	; 0x54
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <writeSD+0x2dc>)
	int len = snprintf((char*) block, sizeof(block),
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	653a      	str	r2, [r7, #80]	; 0x50
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 80008fc:	4b55      	ldr	r3, [pc, #340]	; (8000a54 <writeSD+0x2bc>)
 80008fe:	f8b3 355a 	ldrh.w	r3, [r3, #1370]	; 0x55a
	int len = snprintf((char*) block, sizeof(block),
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 8000904:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <writeSD+0x2bc>)
 8000906:	f8b3 3560 	ldrh.w	r3, [r3, #1376]	; 0x560
	int len = snprintf((char*) block, sizeof(block),
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
	/*5	*/	(int16_t)can_vector[156].word_3,can_vector[170].word_0,can_vector[170].word_1,can_vector[170].word_2,*(uint32_t*)(&(can_vector[171].word_0)),(uint32_t)(can_vector[171].word_1),can_vector[172].word_0,can_vector[172].word_1,
 800090c:	4b51      	ldr	r3, [pc, #324]	; (8000a54 <writeSD+0x2bc>)
 800090e:	f8b3 3562 	ldrh.w	r3, [r3, #1378]	; 0x562
	int len = snprintf((char*) block, sizeof(block),
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 8000914:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <writeSD+0x2bc>)
 8000916:	f8b3 3564 	ldrh.w	r3, [r3, #1380]	; 0x564
	int len = snprintf((char*) block, sizeof(block),
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <writeSD+0x2bc>)
 800091e:	f8b3 3568 	ldrh.w	r3, [r3, #1384]	; 0x568
	int len = snprintf((char*) block, sizeof(block),
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 8000924:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <writeSD+0x2bc>)
 8000926:	f8b3 3590 	ldrh.w	r3, [r3, #1424]	; 0x590
	int len = snprintf((char*) block, sizeof(block),
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 800092c:	4b49      	ldr	r3, [pc, #292]	; (8000a54 <writeSD+0x2bc>)
 800092e:	f8b3 3594 	ldrh.w	r3, [r3, #1428]	; 0x594
	int len = snprintf((char*) block, sizeof(block),
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <writeSD+0x2bc>)
 8000936:	f8b3 3598 	ldrh.w	r3, [r3, #1432]	; 0x598
	int len = snprintf((char*) block, sizeof(block),
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 800093c:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <writeSD+0x2bc>)
 800093e:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	; 0x1a0
	int len = snprintf((char*) block, sizeof(block),
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 8000944:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <writeSD+0x2bc>)
 8000946:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
	int len = snprintf((char*) block, sizeof(block),
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
	/*6	*/	can_vector[172].word_2,(uint32_t)(can_vector[173].word_0),(uint32_t)(can_vector[178].word_0),(uint32_t)(can_vector[178].word_2),can_vector[179].word_0,can_vector[52].word_0,can_vector[53].word_1,can_vector[53].word_2,
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <writeSD+0x2bc>)
 800094e:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
	int len = snprintf((char*) block, sizeof(block),
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 8000954:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <writeSD+0x2bc>)
 8000956:	f8b3 31ae 	ldrh.w	r3, [r3, #430]	; 0x1ae
	int len = snprintf((char*) block, sizeof(block),
 800095a:	623b      	str	r3, [r7, #32]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 800095c:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <writeSD+0x2bc>)
 800095e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
	int len = snprintf((char*) block, sizeof(block),
 8000962:	61fb      	str	r3, [r7, #28]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <writeSD+0x2bc>)
 8000966:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
	int len = snprintf((char*) block, sizeof(block),
 800096a:	61bb      	str	r3, [r7, #24]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 800096c:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <writeSD+0x2bc>)
 800096e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
	int len = snprintf((char*) block, sizeof(block),
 8000972:	617b      	str	r3, [r7, #20]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 8000974:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <writeSD+0x2bc>)
 8000976:	f8b3 319e 	ldrh.w	r3, [r3, #414]	; 0x19e
	int len = snprintf((char*) block, sizeof(block),
 800097a:	613b      	str	r3, [r7, #16]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <writeSD+0x2bc>)
 800097e:	f8b3 383a 	ldrh.w	r3, [r3, #2106]	; 0x83a
	int len = snprintf((char*) block, sizeof(block),
 8000982:	60fb      	str	r3, [r7, #12]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <writeSD+0x2bc>)
 8000986:	f8b3 383c 	ldrh.w	r3, [r3, #2108]	; 0x83c
	int len = snprintf((char*) block, sizeof(block),
 800098a:	60bb      	str	r3, [r7, #8]
	/*7	*/	can_vector[53].word_3,can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_2,can_vector[51].word_3,can_vector[263].word_1,can_vector[263].word_2,can_vector[268].word_1,
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <writeSD+0x2bc>)
 800098e:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
	int len = snprintf((char*) block, sizeof(block),
 8000992:	607b      	str	r3, [r7, #4]
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <writeSD+0x2bc>)
 8000996:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
	int len = snprintf((char*) block, sizeof(block),
 800099a:	461e      	mov	r6, r3
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <writeSD+0x2bc>)
 800099e:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
	int len = snprintf((char*) block, sizeof(block),
 80009a2:	461d      	mov	r5, r3
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <writeSD+0x2bc>)
 80009a6:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
	int len = snprintf((char*) block, sizeof(block),
 80009aa:	461c      	mov	r4, r3
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <writeSD+0x2bc>)
 80009ae:	f8b3 38b2 	ldrh.w	r3, [r3, #2226]	; 0x8b2
	int len = snprintf((char*) block, sizeof(block),
 80009b2:	4618      	mov	r0, r3
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <writeSD+0x2bc>)
 80009b6:	f8b3 38b4 	ldrh.w	r3, [r3, #2228]	; 0x8b4
	int len = snprintf((char*) block, sizeof(block),
 80009ba:	4619      	mov	r1, r3
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <writeSD+0x2bc>)
 80009be:	f8b3 38da 	ldrh.w	r3, [r3, #2266]	; 0x8da
	int len = snprintf((char*) block, sizeof(block),
 80009c2:	461a      	mov	r2, r3
	/*8	*/	can_vector[268].word_2,can_vector[273].word_1,can_vector[273].word_2,can_vector[278].word_1,can_vector[278].word_2,can_vector[283].word_1,can_vector[288].word_2);
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <writeSD+0x2bc>)
 80009c6:	f8b3 3904 	ldrh.w	r3, [r3, #2308]	; 0x904
	int len = snprintf((char*) block, sizeof(block),
 80009ca:	f107 0ce0 	add.w	ip, r7, #224	; 0xe0
 80009ce:	933d      	str	r3, [sp, #244]	; 0xf4
 80009d0:	923c      	str	r2, [sp, #240]	; 0xf0
 80009d2:	913b      	str	r1, [sp, #236]	; 0xec
 80009d4:	903a      	str	r0, [sp, #232]	; 0xe8
 80009d6:	9439      	str	r4, [sp, #228]	; 0xe4
 80009d8:	9538      	str	r5, [sp, #224]	; 0xe0
 80009da:	9637      	str	r6, [sp, #220]	; 0xdc
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	9136      	str	r1, [sp, #216]	; 0xd8
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	9135      	str	r1, [sp, #212]	; 0xd4
 80009e4:	68f9      	ldr	r1, [r7, #12]
 80009e6:	9134      	str	r1, [sp, #208]	; 0xd0
 80009e8:	6939      	ldr	r1, [r7, #16]
 80009ea:	9133      	str	r1, [sp, #204]	; 0xcc
 80009ec:	6979      	ldr	r1, [r7, #20]
 80009ee:	9132      	str	r1, [sp, #200]	; 0xc8
 80009f0:	69b9      	ldr	r1, [r7, #24]
 80009f2:	9131      	str	r1, [sp, #196]	; 0xc4
 80009f4:	69f9      	ldr	r1, [r7, #28]
 80009f6:	9130      	str	r1, [sp, #192]	; 0xc0
 80009f8:	6a39      	ldr	r1, [r7, #32]
 80009fa:	912f      	str	r1, [sp, #188]	; 0xbc
 80009fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009fe:	912e      	str	r1, [sp, #184]	; 0xb8
 8000a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a02:	912d      	str	r1, [sp, #180]	; 0xb4
 8000a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a06:	912c      	str	r1, [sp, #176]	; 0xb0
 8000a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a0a:	912b      	str	r1, [sp, #172]	; 0xac
 8000a0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a0e:	912a      	str	r1, [sp, #168]	; 0xa8
 8000a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000a12:	9129      	str	r1, [sp, #164]	; 0xa4
 8000a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a16:	9128      	str	r1, [sp, #160]	; 0xa0
 8000a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000a1a:	9127      	str	r1, [sp, #156]	; 0x9c
 8000a1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000a1e:	9126      	str	r1, [sp, #152]	; 0x98
 8000a20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000a22:	9125      	str	r1, [sp, #148]	; 0x94
 8000a24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a26:	9124      	str	r1, [sp, #144]	; 0x90
 8000a28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a2a:	9223      	str	r2, [sp, #140]	; 0x8c
 8000a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a2e:	9222      	str	r2, [sp, #136]	; 0x88
 8000a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a32:	9221      	str	r2, [sp, #132]	; 0x84
 8000a34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a36:	9220      	str	r2, [sp, #128]	; 0x80
 8000a38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a3a:	921f      	str	r2, [sp, #124]	; 0x7c
 8000a3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a3e:	921e      	str	r2, [sp, #120]	; 0x78
 8000a40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a42:	921d      	str	r2, [sp, #116]	; 0x74
 8000a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000a46:	921c      	str	r2, [sp, #112]	; 0x70
 8000a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8000a4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a4e:	921a      	str	r2, [sp, #104]	; 0x68
 8000a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000a52:	e011      	b.n	8000a78 <writeSD+0x2e0>
 8000a54:	24002390 	.word	0x24002390
 8000a58:	2400133e 	.word	0x2400133e
 8000a5c:	2400133c 	.word	0x2400133c
 8000a60:	2400238c 	.word	0x2400238c
 8000a64:	24001340 	.word	0x24001340
 8000a68:	2400238e 	.word	0x2400238e
 8000a6c:	24002374 	.word	0x24002374
 8000a70:	24001342 	.word	0x24001342
 8000a74:	240028e8 	.word	0x240028e8
 8000a78:	9219      	str	r2, [sp, #100]	; 0x64
 8000a7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a7c:	9218      	str	r2, [sp, #96]	; 0x60
 8000a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a82:	9217      	str	r2, [sp, #92]	; 0x5c
 8000a84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000a88:	9216      	str	r2, [sp, #88]	; 0x58
 8000a8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000a8e:	9215      	str	r2, [sp, #84]	; 0x54
 8000a90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a94:	9214      	str	r2, [sp, #80]	; 0x50
 8000a96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000a9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8000a9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000aa0:	9212      	str	r2, [sp, #72]	; 0x48
 8000aa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000aa6:	9211      	str	r2, [sp, #68]	; 0x44
 8000aa8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000aac:	9210      	str	r2, [sp, #64]	; 0x40
 8000aae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000ab2:	920f      	str	r2, [sp, #60]	; 0x3c
 8000ab4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000ab8:	920e      	str	r2, [sp, #56]	; 0x38
 8000aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000abe:	920d      	str	r2, [sp, #52]	; 0x34
 8000ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ac4:	920c      	str	r2, [sp, #48]	; 0x30
 8000ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000aca:	920b      	str	r2, [sp, #44]	; 0x2c
 8000acc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000ad0:	920a      	str	r2, [sp, #40]	; 0x28
 8000ad2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ad8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000adc:	9208      	str	r2, [sp, #32]
 8000ade:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000ae2:	9207      	str	r2, [sp, #28]
 8000ae4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ae8:	9206      	str	r2, [sp, #24]
 8000aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000aee:	9205      	str	r2, [sp, #20]
 8000af0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000af4:	9204      	str	r2, [sp, #16]
 8000af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000afa:	9203      	str	r2, [sp, #12]
 8000afc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000b00:	9202      	str	r2, [sp, #8]
 8000b02:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000b06:	9201      	str	r2, [sp, #4]
 8000b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8000b12:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <writeSD+0x3f0>)
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4660      	mov	r0, ip
 8000b1a:	f00c fb8f 	bl	800d23c <sniprintf>
 8000b1e:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write
 8000b22:	2212      	movs	r2, #18
 8000b24:	4919      	ldr	r1, [pc, #100]	; (8000b8c <writeSD+0x3f4>)
 8000b26:	481a      	ldr	r0, [pc, #104]	; (8000b90 <writeSD+0x3f8>)
 8000b28:	f00b fbc0 	bl	800c2ac <f_open>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7
	fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <writeSD+0x3f8>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4815      	ldr	r0, [pc, #84]	; (8000b90 <writeSD+0x3f8>)
 8000b3a:	f00b ffbf 	bl	800cabc <f_lseek>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7
	fresult = f_write(&file, block/*buffer_log*/, len, &bytes_written);     //write data to the file
 8000b44:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8000b48:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8000b4c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <writeSD+0x3f8>)
 8000b52:	f00b fd77 	bl	800c644 <f_write>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7

	//len = sprintf(buffer_log, "\r%u\n",HAL_GetTick()); //isso é pra imprimir o tempo dnv pra ver qnt tempo demorou pra escrever
	//fresult = f_write(&file,block /*buffer_log*/, len, &bytes_written);     //write data to the file
	fresult = f_close(&file);//closes the file
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <writeSD+0x3f8>)
 8000b5e:	f00b ff83 	bl	800ca68 <f_close>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7
	if(fresult == FR_OK){
 8000b68:	f897 33e7 	ldrb.w	r3, [r7, #999]	; 0x3e7
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <writeSD+0x3e0>
		//HAL_GPIO_TogglePin(DATALOG_LED_GPIO_Port, DATALOG_LED_Pin); //Blinks the led to indicate that there was no erros
		_datalog_flag  = 1;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <writeSD+0x3fc>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
	}
	else _datalog_flag = 0;
}
 8000b76:	e002      	b.n	8000b7e <writeSD+0x3e6>
	else _datalog_flag = 0;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <writeSD+0x3fc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b88:	0800db0c 	.word	0x0800db0c
 8000b8c:	24002378 	.word	0x24002378
 8000b90:	24001344 	.word	0x24001344
 8000b94:	240010c8 	.word	0x240010c8

08000b98 <Clean_CAN_Struct>:

CanIdData_t can_vector[CAN_IDS_NUMBER];



void Clean_CAN_Struct(void) {
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	80fb      	strh	r3, [r7, #6]
 8000ba2:	e019      	b.n	8000bd8 <Clean_CAN_Struct+0x40>
		can_vector[i].word_0 = 0;
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <Clean_CAN_Struct+0x58>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <Clean_CAN_Struct+0x58>)
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <Clean_CAN_Struct+0x58>)
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <Clean_CAN_Struct+0x58>)
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	2200      	movs	r2, #0
 8000bd0:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	80fb      	strh	r3, [r7, #6]
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000bde:	d3e1      	bcc.n	8000ba4 <Clean_CAN_Struct+0xc>
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	24002390 	.word	0x24002390

08000bf4 <canMessageReceived>:

void canMessageReceived(uint16_t id, uint8_t *data) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	80fb      	strh	r3, [r7, #6]
	if (id > CAN_IDS_NUMBER - 1)
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c06:	d220      	bcs.n	8000c4a <canMessageReceived+0x56>
		return;

	uint16_t *data_word = (uint16_t*) data;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	60fb      	str	r3, [r7, #12]
	can_vector[id].word_0 = data_word[0];
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	8811      	ldrh	r1, [r2, #0]
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <canMessageReceived+0x64>)
 8000c14:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[id].word_1 = data_word[1];
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	8851      	ldrh	r1, [r2, #2]
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <canMessageReceived+0x64>)
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	4413      	add	r3, r2
 8000c24:	460a      	mov	r2, r1
 8000c26:	805a      	strh	r2, [r3, #2]
	can_vector[id].word_2 = data_word[2];
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	8891      	ldrh	r1, [r2, #4]
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <canMessageReceived+0x64>)
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4413      	add	r3, r2
 8000c34:	460a      	mov	r2, r1
 8000c36:	809a      	strh	r2, [r3, #4]
	can_vector[id].word_3 = data_word[3];
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	88d1      	ldrh	r1, [r2, #6]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <canMessageReceived+0x64>)
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4413      	add	r3, r2
 8000c44:	460a      	mov	r2, r1
 8000c46:	80da      	strh	r2, [r3, #6]
 8000c48:	e000      	b.n	8000c4c <canMessageReceived+0x58>
		return;
 8000c4a:	bf00      	nop
}
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24002390 	.word	0x24002390

08000c5c <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <initialize_general_CAN+0x24>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <initialize_general_CAN+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <initialize_general_CAN+0x28>)
 8000c70:	4905      	ldr	r1, [pc, #20]	; (8000c88 <initialize_general_CAN+0x2c>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd00 	bl	8000678 <initialize_CAN>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240010cc 	.word	0x240010cc
 8000c84:	240010d0 	.word	0x240010d0
 8000c88:	08000c8d 	.word	0x08000c8d

08000c8c <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d043      	beq.n	8000d28 <CAN_general_receive_callback+0x9c>

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <CAN_general_receive_callback+0xa4>)
 8000ca2:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <CAN_general_receive_callback+0xa8>)
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f001 f98e 	bl	8001fc8 <HAL_FDCAN_GetRxMessage>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 8000cb2:	f000 fa2d 	bl	8001110 <Error_Handler>
		}

		idgeneral = RxHeader.Identifier;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <CAN_general_receive_callback+0xa8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <CAN_general_receive_callback+0xac>)
 8000cbc:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	e019      	b.n	8000cf8 <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <CAN_general_receive_callback+0xa4>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b219      	sxth	r1, r3
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <CAN_general_receive_callback+0xa4>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	da00      	bge.n	8000ce2 <CAN_general_receive_callback+0x56>
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	105b      	asrs	r3, r3, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	ea41 0302 	orr.w	r3, r1, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <CAN_general_receive_callback+0xb0>)
 8000cee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	dde2      	ble.n	8000cc4 <CAN_general_receive_callback+0x38>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	480f      	ldr	r0, [pc, #60]	; (8000d40 <CAN_general_receive_callback+0xb4>)
 8000d02:	f002 f9e6 	bl	80030d2 <HAL_GPIO_TogglePin>
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas
		canMessageReceived(idgeneral, datageneral);
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <CAN_general_receive_callback+0xac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	490b      	ldr	r1, [pc, #44]	; (8000d3c <CAN_general_receive_callback+0xb0>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff70 	bl	8000bf4 <canMessageReceived>

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000d14:	2200      	movs	r2, #0
 8000d16:	2101      	movs	r1, #1
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f001 fac3 	bl	80022a4 <HAL_FDCAN_ActivateNotification>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <CAN_general_receive_callback+0x9c>
			/* Notification Error */
			Error_Handler();
 8000d24:	f000 f9f4 	bl	8001110 <Error_Handler>
		}
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2400301c 	.word	0x2400301c
 8000d34:	24003024 	.word	0x24003024
 8000d38:	24003010 	.word	0x24003010
 8000d3c:	24003014 	.word	0x24003014
 8000d40:	58020c00 	.word	0x58020c00

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 fcb9 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f819 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 f95f 	bl	8001014 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000d56:	f000 f88f 	bl	8000e78 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000d5a:	f000 f90f 	bl	8000f7c <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 8000d5e:	f000 f8ef 	bl	8000f40 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000d62:	f008 fd51 	bl	8009808 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 8000d66:	f7ff fcc5 	bl	80006f4 <init_CAN>
  SD_Create_File();
 8000d6a:	f7ff fccd 	bl	8000708 <SD_Create_File>
  Clean_CAN_Struct();
 8000d6e:	f7ff ff13 	bl	8000b98 <Clean_CAN_Struct>
  uint16_t vet_tx[4]={0,0,0,0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
  uint16_t id = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	81fb      	strh	r3, [r7, #14]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  writeSD();
 8000d7e:	f7ff fd0b 	bl	8000798 <writeSD>
 8000d82:	e7fc      	b.n	8000d7e <main+0x3a>

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09c      	sub	sp, #112	; 0x70
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	224c      	movs	r2, #76	; 0x4c
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00c fa4a 	bl	800d22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00c fa44 	bl	800d22c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000da4:	2002      	movs	r0, #2
 8000da6:	f002 f9af 	bl	8003108 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <SystemClock_Config+0xec>)
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <SystemClock_Config+0xec>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <SystemClock_Config+0xec>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <SystemClock_Config+0xf0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	; (8000e74 <SystemClock_Config+0xf0>)
 8000dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <SystemClock_Config+0xf0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ddc:	bf00      	nop
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <SystemClock_Config+0xf0>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dea:	d1f8      	bne.n	8000dde <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e12:	230c      	movs	r3, #12
 8000e14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 f9aa 	bl	800317c <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e2e:	f000 f96f 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	233f      	movs	r3, #63	; 0x3f
 8000e34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2303      	movs	r3, #3
 8000e38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e50:	2340      	movs	r3, #64	; 0x40
 8000e52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fd9f 	bl	800399c <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000e64:	f000 f954 	bl	8001110 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3770      	adds	r7, #112	; 0x70
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58000400 	.word	0x58000400
 8000e74:	58024800 	.word	0x58024800

08000e78 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <MX_FDCAN1_Init+0xc4>)
 8000e80:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000eae:	220d      	movs	r2, #13
 8000eb0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ec6:	220d      	movs	r2, #13
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000eea:	2204      	movs	r2, #4
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000efc:	2220      	movs	r2, #32
 8000efe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f08:	2220      	movs	r2, #32
 8000f0a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f0e:	2220      	movs	r2, #32
 8000f10:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f14:	2220      	movs	r2, #32
 8000f16:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_FDCAN1_Init+0xc0>)
 8000f26:	f000 fd9d 	bl	8001a64 <HAL_FDCAN_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000f30:	f000 f8ee 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	240030c8 	.word	0x240030c8
 8000f3c:	4000a000 	.word	0x4000a000

08000f40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_SDMMC1_SD_Init+0x34>)
 8000f46:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <MX_SDMMC1_SD_Init+0x38>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_SDMMC1_SD_Init+0x34>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_SDMMC1_SD_Init+0x34>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_SDMMC1_SD_Init+0x34>)
 8000f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MX_SDMMC1_SD_Init+0x34>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <MX_SDMMC1_SD_Init+0x34>)
 8000f66:	2204      	movs	r2, #4
 8000f68:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	2400304c 	.word	0x2400304c
 8000f78:	52007000 	.word	0x52007000

08000f7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_UART4_Init+0x90>)
 8000f82:	4a23      	ldr	r2, [pc, #140]	; (8001010 <MX_UART4_Init+0x94>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <MX_UART4_Init+0x90>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_UART4_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_UART4_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_UART4_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_UART4_Init+0x90>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_UART4_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_UART4_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_UART4_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_UART4_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_UART4_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fc4:	4811      	ldr	r0, [pc, #68]	; (800100c <MX_UART4_Init+0x90>)
 8000fc6:	f006 fe35 	bl	8007c34 <HAL_UART_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fd0:	f000 f89e 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_UART4_Init+0x90>)
 8000fd8:	f007 fd82 	bl	8008ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fe2:	f000 f895 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <MX_UART4_Init+0x90>)
 8000fea:	f007 fdb7 	bl	8008b5c <HAL_UARTEx_SetRxFifoThreshold>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ff4:	f000 f88c 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_UART4_Init+0x90>)
 8000ffa:	f007 fd38 	bl	8008a6e <HAL_UARTEx_DisableFifoMode>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001004:	f000 f884 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	240031bc 	.word	0x240031bc
 8001010:	40004c00 	.word	0x40004c00

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	4b37      	ldr	r3, [pc, #220]	; (8001108 <MX_GPIO_Init+0xf4>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	4a35      	ldr	r2, [pc, #212]	; (8001108 <MX_GPIO_Init+0xf4>)
 8001032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103a:	4b33      	ldr	r3, [pc, #204]	; (8001108 <MX_GPIO_Init+0xf4>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <MX_GPIO_Init+0xf4>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <MX_GPIO_Init+0xf4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_GPIO_Init+0xf4>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <MX_GPIO_Init+0xf4>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <MX_GPIO_Init+0xf4>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_GPIO_Init+0xf4>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <MX_GPIO_Init+0xf4>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <MX_GPIO_Init+0xf4>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_GPIO_Init+0xf4>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_GPIO_Init+0xf4>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <MX_GPIO_Init+0xf4>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_GPIO_Init+0xf4>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_GPIO_Init+0xf8>)
 80010c6:	f001 ffeb 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_GPIO_Init+0xf8>)
 80010de:	f001 fe17 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_GPIO_Init+0xf8>)
 80010fa:	f001 fe09 	bl	8002d10 <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	58024400 	.word	0x58024400
 800110c:	58020c00 	.word	0x58020c00

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_MspInit+0x30>)
 8001124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_MspInit+0x30>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_MspInit+0x30>)
 8001134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0b8      	sub	sp, #224	; 0xe0
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	22bc      	movs	r2, #188	; 0xbc
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00c f85b 	bl	800d22c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <HAL_FDCAN_MspInit+0xe0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d152      	bne.n	8001226 <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001184:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001186:	2300      	movs	r3, #0
 8001188:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f002 ff90 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 800119a:	f7ff ffb9 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_FDCAN_MspInit+0xe4>)
 80011a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011a4:	4a23      	ldr	r2, [pc, #140]	; (8001234 <HAL_FDCAN_MspInit+0xe4>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_FDCAN_MspInit+0xe4>)
 80011b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_FDCAN_MspInit+0xe4>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_FDCAN_MspInit+0xe4>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_FDCAN_MspInit+0xe4>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011f4:	2309      	movs	r3, #9
 80011f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011fe:	4619      	mov	r1, r3
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <HAL_FDCAN_MspInit+0xe8>)
 8001202:	f001 fd85 	bl	8002d10 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2013      	movs	r0, #19
 800120c:	f000 fbf5 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001210:	2013      	movs	r0, #19
 8001212:	f000 fc0c 	bl	8001a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2015      	movs	r0, #21
 800121c:	f000 fbed 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001220:	2015      	movs	r0, #21
 8001222:	f000 fc04 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	37e0      	adds	r7, #224	; 0xe0
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	4000a000 	.word	0x4000a000
 8001234:	58024400 	.word	0x58024400
 8001238:	58020400 	.word	0x58020400

0800123c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ba      	sub	sp, #232	; 0xe8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	22bc      	movs	r2, #188	; 0xbc
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f00b ffe5 	bl	800d22c <memset>
  if(hsd->Instance==SDMMC1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_SD_MspInit+0x144>)
 8001268:	4293      	cmp	r3, r2
 800126a:	f040 8085 	bne.w	8001378 <HAL_SD_MspInit+0x13c>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800126e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001272:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001274:	2300      	movs	r3, #0
 8001276:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f002 ff19 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001288:	f7ff ff42 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_SD_MspInit+0x148>)
 800128e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001292:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <HAL_SD_MspInit+0x148>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_SD_MspInit+0x148>)
 800129e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_SD_MspInit+0x148>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	4a34      	ldr	r2, [pc, #208]	; (8001384 <HAL_SD_MspInit+0x148>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_SD_MspInit+0x148>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_SD_MspInit+0x148>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <HAL_SD_MspInit+0x148>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_SD_MspInit+0x148>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80012e6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001300:	230c      	movs	r3, #12
 8001302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <HAL_SD_MspInit+0x14c>)
 800130e:	f001 fcff 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800132c:	230c      	movs	r3, #12
 800132e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001336:	4619      	mov	r1, r3
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <HAL_SD_MspInit+0x14c>)
 800133a:	f001 fce9 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800133e:	2304      	movs	r3, #4
 8001340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134a:	2301      	movs	r3, #1
 800134c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001356:	230c      	movs	r3, #12
 8001358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001360:	4619      	mov	r1, r3
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <HAL_SD_MspInit+0x150>)
 8001364:	f001 fcd4 	bl	8002d10 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2031      	movs	r0, #49	; 0x31
 800136e:	f000 fb44 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001372:	2031      	movs	r0, #49	; 0x31
 8001374:	f000 fb5b 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	37e8      	adds	r7, #232	; 0xe8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	52007000 	.word	0x52007000
 8001384:	58024400 	.word	0x58024400
 8001388:	58020800 	.word	0x58020800
 800138c:	58020c00 	.word	0x58020c00

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0b8      	sub	sp, #224	; 0xe0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	22bc      	movs	r2, #188	; 0xbc
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00b ff3b 	bl	800d22c <memset>
  if(huart->Instance==UART4)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_UART_MspInit+0xbc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d141      	bne.n	8001444 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013c0:	2302      	movs	r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fe70 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013da:	f7ff fe99 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_UART_MspInit+0xc0>)
 80013e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_UART_MspInit+0xc0>)
 80013e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_UART_MspInit+0xc0>)
 80013f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_UART_MspInit+0xc0>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <HAL_UART_MspInit+0xc0>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_UART_MspInit+0xc0>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001432:	2308      	movs	r3, #8
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_UART_MspInit+0xc4>)
 8001440:	f001 fc66 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	37e0      	adds	r7, #224	; 0xe0
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40004c00 	.word	0x40004c00
 8001450:	58024400 	.word	0x58024400
 8001454:	58020000 	.word	0x58020000

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800145c:	e7fe      	b.n	800145c <NMI_Handler+0x4>

0800145e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <MemManage_Handler+0x4>

0800146a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <UsageFault_Handler+0x4>

08001476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a4:	f000 f97e 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <FDCAN1_IT0_IRQHandler+0x10>)
 80014b2:	f000 ff71 	bl	8002398 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	240030c8 	.word	0x240030c8

080014c0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <FDCAN1_IT1_IRQHandler+0x10>)
 80014c6:	f000 ff67 	bl	8002398 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	240030c8 	.word	0x240030c8

080014d4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <SDMMC1_IRQHandler+0x10>)
 80014da:	f005 f9d9 	bl	8006890 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2400304c 	.word	0x2400304c

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f00b fe50 	bl	800d1bc <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	24080000 	.word	0x24080000
 8001548:	00000800 	.word	0x00000800
 800154c:	240010f4 	.word	0x240010f4
 8001550:	240052d0 	.word	0x240052d0

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <SystemInit+0xec>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a38      	ldr	r2, [pc, #224]	; (8001640 <SystemInit+0xec>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <SystemInit+0xf0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	2b06      	cmp	r3, #6
 8001572:	d807      	bhi.n	8001584 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <SystemInit+0xf0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 030f 	bic.w	r3, r3, #15
 800157c:	4a31      	ldr	r2, [pc, #196]	; (8001644 <SystemInit+0xf0>)
 800157e:	f043 0307 	orr.w	r3, r3, #7
 8001582:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <SystemInit+0xf4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <SystemInit+0xf4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <SystemInit+0xf4>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <SystemInit+0xf4>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	492b      	ldr	r1, [pc, #172]	; (8001648 <SystemInit+0xf4>)
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <SystemInit+0xf8>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <SystemInit+0xf0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <SystemInit+0xf0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 030f 	bic.w	r3, r3, #15
 80015b6:	4a23      	ldr	r2, [pc, #140]	; (8001644 <SystemInit+0xf0>)
 80015b8:	f043 0307 	orr.w	r3, r3, #7
 80015bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <SystemInit+0xf4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <SystemInit+0xf4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <SystemInit+0xf4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <SystemInit+0xf4>)
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <SystemInit+0xfc>)
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <SystemInit+0xf4>)
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <SystemInit+0x100>)
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <SystemInit+0xf4>)
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <SystemInit+0x104>)
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <SystemInit+0xf4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <SystemInit+0xf4>)
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <SystemInit+0x104>)
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <SystemInit+0xf4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <SystemInit+0xf4>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <SystemInit+0x104>)
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <SystemInit+0xf4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <SystemInit+0xf4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <SystemInit+0xf4>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <SystemInit+0xf4>)
 800160e:	2200      	movs	r2, #0
 8001610:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0x108>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <SystemInit+0x10c>)
 8001618:	4013      	ands	r3, r2
 800161a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800161e:	d202      	bcs.n	8001626 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <SystemInit+0x110>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <SystemInit+0x114>)
 8001628:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800162c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SystemInit+0xec>)
 8001630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001634:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	52002000 	.word	0x52002000
 8001648:	58024400 	.word	0x58024400
 800164c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001650:	02020200 	.word	0x02020200
 8001654:	01ff0000 	.word	0x01ff0000
 8001658:	01010280 	.word	0x01010280
 800165c:	5c001000 	.word	0x5c001000
 8001660:	ffff0000 	.word	0xffff0000
 8001664:	51008108 	.word	0x51008108
 8001668:	52004000 	.word	0x52004000

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001670:	f7ff ff70 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f00b fd95 	bl	800d1c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fb51 	bl	8000d44 <main>
  bx  lr
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016ac:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80016b0:	0800e140 	.word	0x0800e140
  ldr r2, =_sbss
 80016b4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80016b8:	240052d0 	.word	0x240052d0

080016bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC3_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c6:	2003      	movs	r0, #3
 80016c8:	f000 f98c 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016cc:	f002 fb1c 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_Init+0x68>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	4913      	ldr	r1, [pc, #76]	; (800172c <HAL_Init+0x6c>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_Init+0x68>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_Init+0x6c>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_Init+0x70>)
 8001702:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_Init+0x74>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f814 	bl	8001738 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e002      	b.n	8001720 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800171a:	f7ff fcff 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58024400 	.word	0x58024400
 800172c:	0800dc60 	.word	0x0800dc60
 8001730:	24000004 	.word	0x24000004
 8001734:	24000000 	.word	0x24000000

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_InitTick+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e021      	b.n	8001790 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_InitTick+0x64>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_InitTick+0x60>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f971 	bl	8001a4a <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f000 f93b 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_InitTick+0x68>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2400000c 	.word	0x2400000c
 800179c:	24000000 	.word	0x24000000
 80017a0:	24000008 	.word	0x24000008

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2400000c 	.word	0x2400000c
 80017c8:	2400324c 	.word	0x2400324c

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2400324c 	.word	0x2400324c

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2400000c 	.word	0x2400000c

0800182c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetREVID+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1b      	lsrs	r3, r3, #16
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	5c001000 	.word	0x5c001000

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	4313      	orrs	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	05fa0000 	.word	0x05fa0000

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff40 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff33 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa4 	bl	80019a0 <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b098      	sub	sp, #96	; 0x60
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001a6c:	4a99      	ldr	r2, [pc, #612]	; (8001cd4 <HAL_FDCAN_Init+0x270>)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4611      	mov	r1, r2
 8001a74:	224c      	movs	r2, #76	; 0x4c
 8001a76:	4618      	mov	r0, r3
 8001a78:	f00b fbca 	bl	800d210 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e23d      	b.n	8001f02 <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a93      	ldr	r2, [pc, #588]	; (8001cd8 <HAL_FDCAN_Init+0x274>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d106      	bne.n	8001a9e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a98:	461a      	mov	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d155      	bne.n	8001b56 <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a89      	ldr	r2, [pc, #548]	; (8001cdc <HAL_FDCAN_Init+0x278>)
 8001ab6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a88      	ldr	r2, [pc, #544]	; (8001ce0 <HAL_FDCAN_Init+0x27c>)
 8001abe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a87      	ldr	r2, [pc, #540]	; (8001ce4 <HAL_FDCAN_Init+0x280>)
 8001ac6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a86      	ldr	r2, [pc, #536]	; (8001ce8 <HAL_FDCAN_Init+0x284>)
 8001ace:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a85      	ldr	r2, [pc, #532]	; (8001cec <HAL_FDCAN_Init+0x288>)
 8001ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a84      	ldr	r2, [pc, #528]	; (8001cf0 <HAL_FDCAN_Init+0x28c>)
 8001ade:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a83      	ldr	r2, [pc, #524]	; (8001cf4 <HAL_FDCAN_Init+0x290>)
 8001ae6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a82      	ldr	r2, [pc, #520]	; (8001cf8 <HAL_FDCAN_Init+0x294>)
 8001aee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a81      	ldr	r2, [pc, #516]	; (8001cfc <HAL_FDCAN_Init+0x298>)
 8001af6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a80      	ldr	r2, [pc, #512]	; (8001d00 <HAL_FDCAN_Init+0x29c>)
 8001afe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_FDCAN_Init+0x2a0>)
 8001b06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a7e      	ldr	r2, [pc, #504]	; (8001d08 <HAL_FDCAN_Init+0x2a4>)
 8001b0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a7d      	ldr	r2, [pc, #500]	; (8001d0c <HAL_FDCAN_Init+0x2a8>)
 8001b16:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	; (8001d10 <HAL_FDCAN_Init+0x2ac>)
 8001b1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <HAL_FDCAN_Init+0x2b0>)
 8001b26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <HAL_FDCAN_Init+0x2b4>)
 8001b2e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a79      	ldr	r2, [pc, #484]	; (8001d1c <HAL_FDCAN_Init+0x2b8>)
 8001b36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a76      	ldr	r2, [pc, #472]	; (8001d20 <HAL_FDCAN_Init+0x2bc>)
 8001b48:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0210 	bic.w	r2, r2, #16
 8001b64:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b66:	f7ff fe31 	bl	80017cc <HAL_GetTick>
 8001b6a:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b6c:	e014      	b.n	8001b98 <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b6e:	f7ff fe2d 	bl	80017cc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b0a      	cmp	r3, #10
 8001b7a:	d90d      	bls.n	8001b98 <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e1b4      	b.n	8001f02 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d0e3      	beq.n	8001b6e <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb6:	f7ff fe09 	bl	80017cc <HAL_GetTick>
 8001bba:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001bbc:	e014      	b.n	8001be8 <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001bbe:	f7ff fe05 	bl	80017cc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d90d      	bls.n	8001be8 <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2203      	movs	r2, #3
 8001be0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e18c      	b.n	8001f02 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0e3      	beq.n	8001bbe <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0202 	orr.w	r2, r2, #2
 8001c04:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7c1b      	ldrb	r3, [r3, #16]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c1c:	619a      	str	r2, [r3, #24]
 8001c1e:	e007      	b.n	8001c30 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c5b      	ldrb	r3, [r3, #17]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d108      	bne.n	8001c4a <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c46:	619a      	str	r2, [r3, #24]
 8001c48:	e007      	b.n	8001c5a <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c58:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7c9b      	ldrb	r3, [r3, #18]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	e007      	b.n	8001c84 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c82:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001ca8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0210 	bic.w	r2, r2, #16
 8001cb8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d130      	bne.n	8001d24 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0204 	orr.w	r2, r2, #4
 8001cd0:	619a      	str	r2, [r3, #24]
 8001cd2:	e054      	b.n	8001d7e <HAL_FDCAN_Init+0x31a>
 8001cd4:	0800dbcc 	.word	0x0800dbcc
 8001cd8:	4000a000 	.word	0x4000a000
 8001cdc:	08002899 	.word	0x08002899
 8001ce0:	080028af 	.word	0x080028af
 8001ce4:	080028c5 	.word	0x080028c5
 8001ce8:	080028db 	.word	0x080028db
 8001cec:	080028f1 	.word	0x080028f1
 8001cf0:	08002905 	.word	0x08002905
 8001cf4:	0800291b 	.word	0x0800291b
 8001cf8:	08002931 	.word	0x08002931
 8001cfc:	0800296d 	.word	0x0800296d
 8001d00:	08002945 	.word	0x08002945
 8001d04:	08002959 	.word	0x08002959
 8001d08:	08002981 	.word	0x08002981
 8001d0c:	08002995 	.word	0x08002995
 8001d10:	080029ab 	.word	0x080029ab
 8001d14:	080029c1 	.word	0x080029c1
 8001d18:	080029d7 	.word	0x080029d7
 8001d1c:	080029ef 	.word	0x080029ef
 8001d20:	08001151 	.word	0x08001151
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d028      	beq.n	8001d7e <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d01c      	beq.n	8001d6e <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d42:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0210 	orr.w	r2, r2, #16
 8001d52:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d110      	bne.n	8001d7e <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	619a      	str	r2, [r3, #24]
 8001d6c:	e007      	b.n	8001d7e <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001d8e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001d96:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001da6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001da8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001db2:	d115      	bne.n	8001de0 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001dc2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001ddc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001dde:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e06:	4413      	add	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e14:	f023 0107 	bic.w	r1, r3, #7
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e22:	4413      	add	r3, r2
 8001e24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001e42:	f023 0107 	bic.w	r1, r3, #7
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e50:	4413      	add	r3, r2
 8001e52:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001e70:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e7e:	4413      	add	r3, r2
 8001e80:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001e84:	011a      	lsls	r2, r3, #4
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ea0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001eae:	4413      	add	r3, r2
 8001eb0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_FDCAN_Init+0x4a8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d107      	bne.n	8001eda <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f022 0203 	bic.w	r2, r2, #3
 8001ed8:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fd86 	bl	8002a04 <FDCAN_CalcultateRamBlockAddresses>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001efe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3760      	adds	r7, #96	; 0x60
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	4000a000 	.word	0x4000a000

08001f10 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e015      	b.n	8001f64 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d104      	bne.n	8001f4e <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001f4c:	e009      	b.n	8001f62 <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d111      	bne.n	8001fa8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e008      	b.n	8001fba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fae:	f043 0204 	orr.w	r2, r3, #4
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b08b      	sub	sp, #44	; 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fe0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001fe2:	7efb      	ldrb	r3, [r7, #27]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	f040 814b 	bne.w	8002280 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d14d      	bne.n	800208c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ff8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e13e      	b.n	8002292 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800201c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800202a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e12c      	b.n	8002292 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002040:	0e1b      	lsrs	r3, r3, #24
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d10b      	bne.n	8002062 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002052:	0fdb      	lsrs	r3, r3, #31
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800205c:	d101      	bne.n	8002062 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	4413      	add	r3, r2
 8002074:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	69f9      	ldr	r1, [r7, #28]
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e069      	b.n	8002160 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b41      	cmp	r3, #65	; 0x41
 8002090:	d14d      	bne.n	800212e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800209a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a8:	f043 0220 	orr.w	r2, r3, #32
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0ed      	b.n	8002292 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80020be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0db      	b.n	8002292 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80020e2:	0e1b      	lsrs	r3, r3, #24
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d10b      	bne.n	8002104 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020f4:	0fdb      	lsrs	r3, r3, #31
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020fe:	d101      	bne.n	8002104 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002100:	2301      	movs	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	69f9      	ldr	r1, [r7, #28]
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	e018      	b.n	8002160 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	429a      	cmp	r2, r3
 8002136:	d309      	bcc.n	800214c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0a2      	b.n	8002292 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0c9b      	lsrs	r3, r3, #18
 800217a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	e005      	b.n	8002190 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3304      	adds	r3, #4
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e1b      	lsrs	r3, r3, #24
 80021e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0fda      	lsrs	r2, r3, #31
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3304      	adds	r3, #4
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	e00a      	b.n	800221a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	441a      	add	r2, r3
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	440b      	add	r3, r1
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	3301      	adds	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	461a      	mov	r2, r3
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	4293      	cmp	r3, r2
 800222a:	d3eb      	bcc.n	8002204 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d105      	bne.n	800223e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800223c:	e01e      	b.n	800227c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b41      	cmp	r3, #65	; 0x41
 8002242:	d105      	bne.n	8002250 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800224e:	e015      	b.n	800227c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b1f      	cmp	r3, #31
 8002254:	d808      	bhi.n	8002268 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	fa01 f202 	lsl.w	r2, r1, r2
 8002262:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002266:	e009      	b.n	800227c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e008      	b.n	8002292 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002286:	f043 0208 	orr.w	r2, r3, #8
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
  }
}
 8002292:	4618      	mov	r0, r3
 8002294:	372c      	adds	r7, #44	; 0x2c
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	0800dc70 	.word	0x0800dc70

080022a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d002      	beq.n	80022c4 <HAL_FDCAN_ActivateNotification+0x20>
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d155      	bne.n	8002370 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80022e2:	e014      	b.n	800230e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4013      	ands	r3, r2
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d108      	bne.n	8002306 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0202 	orr.w	r2, r2, #2
 8002302:	65da      	str	r2, [r3, #92]	; 0x5c
 8002304:	e003      	b.n	800230e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2203      	movs	r2, #3
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	430a      	orrs	r2, r1
 8002328:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	430a      	orrs	r2, r1
 8002346:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_FDCAN_ActivateNotification+0xec>)
 8002354:	4013      	ands	r3, r2
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	430b      	orrs	r3, r1
 800235c:	6553      	str	r3, [r2, #84]	; 0x54
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0f9b      	lsrs	r3, r3, #30
 8002366:	490b      	ldr	r1, [pc, #44]	; (8002394 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e008      	b.n	8002382 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002376:	f043 0202 	orr.w	r2, r3, #2
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	3fcfffff 	.word	0x3fcfffff
 8002394:	4000a800 	.word	0x4000a800

08002398 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b092      	sub	sp, #72	; 0x48
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80023a0:	4b98      	ldr	r3, [pc, #608]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	079b      	lsls	r3, r3, #30
 80023a6:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80023a8:	4b96      	ldr	r3, [pc, #600]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	079b      	lsls	r3, r3, #30
 80023ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023b0:	4013      	ands	r3, r2
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023c8:	4013      	ands	r3, r2
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023e0:	4013      	ands	r3, r2
 80023e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f8:	4013      	ands	r3, r2
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002410:	4013      	ands	r3, r2
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002428:	4013      	ands	r3, r2
 800242a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d013      	beq.n	8002462 <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002450:	651a      	str	r2, [r3, #80]	; 0x50
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002492:	4013      	ands	r3, r2
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80024ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80024b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00f      	beq.n	80024d8 <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024be:	4b52      	ldr	r3, [pc, #328]	; (8002608 <HAL_FDCAN_IRQHandler+0x270>)
 80024c0:	400b      	ands	r3, r1
 80024c2:	6513      	str	r3, [r2, #80]	; 0x50
 80024c4:	4a4f      	ldr	r2, [pc, #316]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80024c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c8:	0f9b      	lsrs	r3, r3, #30
 80024ca:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80024d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80024d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00f      	beq.n	80024fe <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024e4:	4b48      	ldr	r3, [pc, #288]	; (8002608 <HAL_FDCAN_IRQHandler+0x270>)
 80024e6:	400b      	ands	r3, r1
 80024e8:	6513      	str	r3, [r2, #80]	; 0x50
 80024ea:	4a46      	ldr	r2, [pc, #280]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80024ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ee:	0f9b      	lsrs	r3, r3, #30
 80024f0:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80024fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00f      	beq.n	8002524 <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_FDCAN_IRQHandler+0x270>)
 800250c:	400b      	ands	r3, r1
 800250e:	6513      	str	r3, [r2, #80]	; 0x50
 8002510:	4a3c      	ldr	r2, [pc, #240]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 8002512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002514:	0f9b      	lsrs	r3, r3, #30
 8002516:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800251e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00f      	beq.n	800254a <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002530:	4b35      	ldr	r3, [pc, #212]	; (8002608 <HAL_FDCAN_IRQHandler+0x270>)
 8002532:	400b      	ands	r3, r1
 8002534:	6513      	str	r3, [r2, #80]	; 0x50
 8002536:	4a33      	ldr	r2, [pc, #204]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	0f9b      	lsrs	r3, r3, #30
 800253c:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800256e:	651a      	str	r2, [r3, #80]	; 0x50
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002598:	2b00      	cmp	r3, #0
 800259a:	d019      	beq.n	80025d0 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b0:	4013      	ands	r3, r2
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025bc:	651a      	str	r2, [r3, #80]	; 0x50
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80025ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d011      	beq.n	8002610 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025f4:	651a      	str	r2, [r3, #80]	; 0x50
 80025f6:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_FDCAN_IRQHandler+0x26c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002602:	e003      	b.n	800260c <HAL_FDCAN_IRQHandler+0x274>
 8002604:	4000a800 	.word	0x4000a800
 8002608:	3fcfffff 	.word	0x3fcfffff
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002634:	651a      	str	r2, [r3, #80]	; 0x50
 8002636:	4b95      	ldr	r3, [pc, #596]	; (800288c <HAL_FDCAN_IRQHandler+0x4f4>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
 800266c:	4b87      	ldr	r3, [pc, #540]	; (800288c <HAL_FDCAN_IRQHandler+0x4f4>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a0:	651a      	str	r2, [r3, #80]	; 0x50
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_FDCAN_IRQHandler+0x4f4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00f      	beq.n	80026de <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c4:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_FDCAN_IRQHandler+0x4f8>)
 80026c6:	400b      	ands	r3, r1
 80026c8:	6513      	str	r3, [r2, #80]	; 0x50
 80026ca:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_FDCAN_IRQHandler+0x4f4>)
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	0f9b      	lsrs	r3, r3, #30
 80026d0:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80026d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026ea:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_FDCAN_IRQHandler+0x4f8>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	6513      	str	r3, [r2, #80]	; 0x50
 80026f0:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_FDCAN_IRQHandler+0x4f4>)
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	0f9b      	lsrs	r3, r3, #30
 80026f6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a61      	ldr	r2, [pc, #388]	; (8002894 <HAL_FDCAN_IRQHandler+0x4fc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	f040 80ae 	bne.w	8002870 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80a6 	beq.w	8002870 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	4013      	ands	r3, r2
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002746:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	4013      	ands	r3, r2
 8002752:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800275e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	4013      	ands	r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002776:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800278e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ca:	6a39      	ldr	r1, [r7, #32]
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01d      	beq.n	800281a <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d016      	beq.n	800281a <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002802:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	6939      	ldr	r1, [r7, #16]
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282e:	69f9      	ldr	r1, [r7, #28]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002884:	bf00      	nop
 8002886:	3748      	adds	r7, #72	; 0x48
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	4000a800 	.word	0x4000a800
 8002890:	3fcfffff 	.word	0x3fcfffff
 8002894:	4000a000 	.word	0x4000a000

08002898 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a1a:	4ba7      	ldr	r3, [pc, #668]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	0091      	lsls	r1, r2, #2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	430b      	orrs	r3, r1
 8002a28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a34:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a5a:	4b97      	ldr	r3, [pc, #604]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	0091      	lsls	r1, r2, #2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	430b      	orrs	r3, r1
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4413      	add	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	0091      	lsls	r1, r2, #2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ab6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	041a      	lsls	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4413      	add	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ae4:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	0091      	lsls	r1, r2, #2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002afe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b06:	041a      	lsls	r2, r3, #16
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	0091      	lsls	r1, r2, #2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002b58:	4b57      	ldr	r3, [pc, #348]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	0091      	lsls	r1, r2, #2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b72:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	041a      	lsls	r2, r3, #16
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	0091      	lsls	r1, r2, #2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bb4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	041a      	lsls	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bd0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	061a      	lsls	r2, r3, #24
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be8:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002bea:	4413      	add	r3, r2
 8002bec:	009a      	lsls	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d915      	bls.n	8002ce0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002cb4:	e006      	b.n	8002cc4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002cb6:	bf00      	nop
 8002cb8:	ffff0003 	.word	0xffff0003
 8002cbc:	10002b00 	.word	0x10002b00
 8002cc0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e010      	b.n	8002d02 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e005      	b.n	8002cf4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3f3      	bcc.n	8002ce8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d1e:	4b89      	ldr	r3, [pc, #548]	; (8002f44 <HAL_GPIO_Init+0x234>)
 8002d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d22:	e194      	b.n	800304e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8186 	beq.w	8003048 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d00b      	beq.n	8002d5c <HAL_GPIO_Init+0x4c>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d50:	2b11      	cmp	r3, #17
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d130      	bne.n	8002dbe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d92:	2201      	movs	r2, #1
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0201 	and.w	r2, r3, #1
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0xee>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d123      	bne.n	8002e46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	69b9      	ldr	r1, [r7, #24]
 8002e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80e0 	beq.w	8003048 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e88:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_GPIO_Init+0x238>)
 8002e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e8e:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <HAL_GPIO_Init+0x238>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_GPIO_Init+0x238>)
 8002e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <HAL_GPIO_Init+0x23c>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <HAL_GPIO_Init+0x240>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d052      	beq.n	8002f78 <HAL_GPIO_Init+0x268>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <HAL_GPIO_Init+0x244>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <HAL_GPIO_Init+0x248>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_GPIO_Init+0x24c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_GPIO_Init+0x250>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_GPIO_Init+0x254>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_GPIO_Init+0x258>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_GPIO_Init+0x25c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x216>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_GPIO_Init+0x260>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x212>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_GPIO_Init+0x264>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x20e>
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	e02d      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f1e:	230a      	movs	r3, #10
 8002f20:	e02b      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e029      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e027      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e025      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e023      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e021      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e01f      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e01d      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e01b      	b.n	8002f7a <HAL_GPIO_Init+0x26a>
 8002f42:	bf00      	nop
 8002f44:	58000080 	.word	0x58000080
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	58000400 	.word	0x58000400
 8002f50:	58020000 	.word	0x58020000
 8002f54:	58020400 	.word	0x58020400
 8002f58:	58020800 	.word	0x58020800
 8002f5c:	58020c00 	.word	0x58020c00
 8002f60:	58021000 	.word	0x58021000
 8002f64:	58021400 	.word	0x58021400
 8002f68:	58021800 	.word	0x58021800
 8002f6c:	58021c00 	.word	0x58021c00
 8002f70:	58022000 	.word	0x58022000
 8002f74:	58022400 	.word	0x58022400
 8002f78:	2300      	movs	r3, #0
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	f002 0203 	and.w	r2, r2, #3
 8002f80:	0092      	lsls	r2, r2, #2
 8002f82:	4093      	lsls	r3, r2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8a:	4938      	ldr	r1, [pc, #224]	; (800306c <HAL_GPIO_Init+0x35c>)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3302      	adds	r3, #2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f ae63 	bne.w	8002d24 <HAL_GPIO_Init+0x14>
  }
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	3724      	adds	r7, #36	; 0x24
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	58000400 	.word	0x58000400

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e4:	887a      	ldrh	r2, [r7, #2]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	041a      	lsls	r2, r3, #16
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	400b      	ands	r3, r1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_PWREx_ConfigSupply+0x70>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d00a      	beq.n	8003132 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800311c:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_PWREx_ConfigSupply+0x70>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d001      	beq.n	800312e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e01f      	b.n	800316e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e01d      	b.n	800316e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_PWREx_ConfigSupply+0x70>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 0207 	bic.w	r2, r3, #7
 800313a:	490f      	ldr	r1, [pc, #60]	; (8003178 <HAL_PWREx_ConfigSupply+0x70>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4313      	orrs	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003142:	f7fe fb43 	bl	80017cc <HAL_GetTick>
 8003146:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003148:	e009      	b.n	800315e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800314a:	f7fe fb3f 	bl	80017cc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003158:	d901      	bls.n	800315e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_PWREx_ConfigSupply+0x70>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316a:	d1ee      	bne.n	800314a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	58024800 	.word	0x58024800

0800317c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3ff      	b.n	800398e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8087 	beq.w	80032aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319c:	4b99      	ldr	r3, [pc, #612]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031a6:	4b97      	ldr	r3, [pc, #604]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d007      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46>
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	2b18      	cmp	r3, #24
 80031b6:	d110      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d10b      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	4b90      	ldr	r3, [pc, #576]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x12c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d168      	bne.n	80032a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e3d9      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x76>
 80031e4:	4b87      	ldr	r3, [pc, #540]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a86      	ldr	r2, [pc, #536]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e02e      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a81      	ldr	r2, [pc, #516]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7e      	ldr	r2, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0xbc>
 800321e:	4b79      	ldr	r3, [pc, #484]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a78      	ldr	r2, [pc, #480]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003238:	4b72      	ldr	r3, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fab8 	bl	80017cc <HAL_GetTick>
 800325c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fab4 	bl	80017cc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e38d      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xe4>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe faa4 	bl	80017cc <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe faa0 	bl	80017cc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e379      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800329a:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x10c>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80ae 	beq.w	8003414 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b8:	4b52      	ldr	r3, [pc, #328]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032c2:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_RCC_OscConfig+0x162>
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2b18      	cmp	r3, #24
 80032d2:	d13a      	bne.n	800334a <HAL_RCC_OscConfig+0x1ce>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d135      	bne.n	800334a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032de:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_RCC_OscConfig+0x17a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e34b      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	f7fe fa99 	bl	800182c <HAL_GetREVID>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003300:	4293      	cmp	r3, r2
 8003302:	d817      	bhi.n	8003334 <HAL_RCC_OscConfig+0x1b8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d108      	bne.n	800331e <HAL_RCC_OscConfig+0x1a2>
 800330c:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003314:	4a3b      	ldr	r2, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331c:	e07a      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	031b      	lsls	r3, r3, #12
 800332c:	4935      	ldr	r1, [pc, #212]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003332:	e06f      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	4930      	ldr	r1, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003348:	e064      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d045      	beq.n	80033de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0219 	bic.w	r2, r3, #25
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4929      	ldr	r1, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fa32 	bl	80017cc <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe fa2e 	bl	80017cc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e307      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338a:	f7fe fa4f 	bl	800182c <HAL_GetREVID>
 800338e:	4603      	mov	r3, r0
 8003390:	f241 0203 	movw	r2, #4099	; 0x1003
 8003394:	4293      	cmp	r3, r2
 8003396:	d817      	bhi.n	80033c8 <HAL_RCC_OscConfig+0x24c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d108      	bne.n	80033b2 <HAL_RCC_OscConfig+0x236>
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033a8:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	6053      	str	r3, [r2, #4]
 80033b0:	e030      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	4910      	ldr	r1, [pc, #64]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
 80033c6:	e025      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
 80033dc:	e01a      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_RCC_OscConfig+0x288>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe f9ef 	bl	80017cc <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe f9eb 	bl	80017cc <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d903      	bls.n	8003408 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e2c4      	b.n	800398e <HAL_RCC_OscConfig+0x812>
 8003404:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003408:	4ba4      	ldr	r3, [pc, #656]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a9 	beq.w	8003574 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003422:	4b9e      	ldr	r3, [pc, #632]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800342c:	4b9b      	ldr	r3, [pc, #620]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d007      	beq.n	8003448 <HAL_RCC_OscConfig+0x2cc>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b18      	cmp	r3, #24
 800343c:	d13a      	bne.n	80034b4 <HAL_RCC_OscConfig+0x338>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d135      	bne.n	80034b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003448:	4b94      	ldr	r3, [pc, #592]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_OscConfig+0x2e4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d001      	beq.n	8003460 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e296      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003460:	f7fe f9e4 	bl	800182c <HAL_GetREVID>
 8003464:	4603      	mov	r3, r0
 8003466:	f241 0203 	movw	r2, #4099	; 0x1003
 800346a:	4293      	cmp	r3, r2
 800346c:	d817      	bhi.n	800349e <HAL_RCC_OscConfig+0x322>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	2b20      	cmp	r3, #32
 8003474:	d108      	bne.n	8003488 <HAL_RCC_OscConfig+0x30c>
 8003476:	4b89      	ldr	r3, [pc, #548]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800347e:	4a87      	ldr	r2, [pc, #540]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003484:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003486:	e075      	b.n	8003574 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003488:	4b84      	ldr	r3, [pc, #528]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	069b      	lsls	r3, r3, #26
 8003496:	4981      	ldr	r1, [pc, #516]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800349c:	e06a      	b.n	8003574 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800349e:	4b7f      	ldr	r3, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	497b      	ldr	r1, [pc, #492]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034b2:	e05f      	b.n	8003574 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d042      	beq.n	8003542 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034bc:	4b77      	ldr	r3, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a76      	ldr	r2, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f980 	bl	80017cc <HAL_GetTick>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034d0:	f7fe f97c 	bl	80017cc <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e255      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034e2:	4b6e      	ldr	r3, [pc, #440]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ee:	f7fe f99d 	bl	800182c <HAL_GetREVID>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d817      	bhi.n	800352c <HAL_RCC_OscConfig+0x3b0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	2b20      	cmp	r3, #32
 8003502:	d108      	bne.n	8003516 <HAL_RCC_OscConfig+0x39a>
 8003504:	4b65      	ldr	r3, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800350c:	4a63      	ldr	r2, [pc, #396]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800350e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003512:	6053      	str	r3, [r2, #4]
 8003514:	e02e      	b.n	8003574 <HAL_RCC_OscConfig+0x3f8>
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	069b      	lsls	r3, r3, #26
 8003524:	495d      	ldr	r1, [pc, #372]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
 800352a:	e023      	b.n	8003574 <HAL_RCC_OscConfig+0x3f8>
 800352c:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	4958      	ldr	r1, [pc, #352]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800353c:	4313      	orrs	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
 8003540:	e018      	b.n	8003574 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a55      	ldr	r2, [pc, #340]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe f93d 	bl	80017cc <HAL_GetTick>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003556:	f7fe f939 	bl	80017cc <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e212      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d036      	beq.n	80035ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d019      	beq.n	80035bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003588:	4b44      	ldr	r3, [pc, #272]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fe f91a 	bl	80017cc <HAL_GetTick>
 8003598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359c:	f7fe f916 	bl	80017cc <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1ef      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80035b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x420>
 80035ba:	e018      	b.n	80035ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035bc:	4b37      	ldr	r3, [pc, #220]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c0:	4a36      	ldr	r2, [pc, #216]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe f900 	bl	80017cc <HAL_GetTick>
 80035cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fe f8fc 	bl	80017cc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1d5      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCC_OscConfig+0x520>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d036      	beq.n	8003668 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d019      	beq.n	8003636 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a25      	ldr	r2, [pc, #148]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800360c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800360e:	f7fe f8dd 	bl	80017cc <HAL_GetTick>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003616:	f7fe f8d9 	bl	80017cc <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1b2      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x49a>
 8003634:	e018      	b.n	8003668 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003636:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_RCC_OscConfig+0x520>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a18      	ldr	r2, [pc, #96]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800363c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003642:	f7fe f8c3 	bl	80017cc <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800364a:	f7fe f8bf 	bl	80017cc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e198      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCC_OscConfig+0x520>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8085 	beq.w	8003780 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_OscConfig+0x524>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x524>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003682:	f7fe f8a3 	bl	80017cc <HAL_GetTick>
 8003686:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003688:	e00c      	b.n	80036a4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe f89f 	bl	80017cc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d905      	bls.n	80036a4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e178      	b.n	800398e <HAL_RCC_OscConfig+0x812>
 800369c:	58024400 	.word	0x58024400
 80036a0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036a4:	4b96      	ldr	r3, [pc, #600]	; (8003900 <HAL_RCC_OscConfig+0x784>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ec      	beq.n	800368a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x54a>
 80036b8:	4b92      	ldr	r3, [pc, #584]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a91      	ldr	r2, [pc, #580]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	e02d      	b.n	8003722 <HAL_RCC_OscConfig+0x5a6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x56c>
 80036ce:	4b8d      	ldr	r3, [pc, #564]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a8c      	ldr	r2, [pc, #560]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	4b8a      	ldr	r3, [pc, #552]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a89      	ldr	r2, [pc, #548]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	e01c      	b.n	8003722 <HAL_RCC_OscConfig+0x5a6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0x58e>
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a83      	ldr	r2, [pc, #524]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a80      	ldr	r2, [pc, #512]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0x5a6>
 800370a:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	4b7b      	ldr	r3, [pc, #492]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a7a      	ldr	r2, [pc, #488]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fe f84f 	bl	80017cc <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe f84b 	bl	80017cc <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e122      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003748:	4b6e      	ldr	r3, [pc, #440]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCC_OscConfig+0x5b6>
 8003754:	e014      	b.n	8003780 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe f839 	bl	80017cc <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe f835 	bl	80017cc <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e10c      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003774:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8101 	beq.w	800398c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800378a:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003792:	2b18      	cmp	r3, #24
 8003794:	f000 80bc 	beq.w	8003910 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2b02      	cmp	r3, #2
 800379e:	f040 8095 	bne.w	80038cc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b58      	ldr	r3, [pc, #352]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a57      	ldr	r2, [pc, #348]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80037a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fe f80d 	bl	80017cc <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fe f809 	bl	80017cc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0e2      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c8:	4b4e      	ldr	r3, [pc, #312]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d4:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80037d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d8:	4b4b      	ldr	r3, [pc, #300]	; (8003908 <HAL_RCC_OscConfig+0x78c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	430a      	orrs	r2, r1
 80037e8:	4946      	ldr	r1, [pc, #280]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	628b      	str	r3, [r1, #40]	; 0x28
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	3b01      	subs	r3, #1
 80037fe:	025b      	lsls	r3, r3, #9
 8003800:	b29b      	uxth	r3, r3
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	3b01      	subs	r3, #1
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800381e:	4939      	ldr	r1, [pc, #228]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003820:	4313      	orrs	r3, r2
 8003822:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003824:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4a36      	ldr	r2, [pc, #216]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003834:	4b35      	ldr	r3, [pc, #212]	; (800390c <HAL_RCC_OscConfig+0x790>)
 8003836:	4013      	ands	r3, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	4931      	ldr	r1, [pc, #196]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003840:	4313      	orrs	r3, r2
 8003842:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	f023 020c 	bic.w	r2, r3, #12
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	492c      	ldr	r1, [pc, #176]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003852:	4313      	orrs	r3, r2
 8003854:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f023 0202 	bic.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4928      	ldr	r1, [pc, #160]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003864:	4313      	orrs	r3, r2
 8003866:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a25      	ldr	r2, [pc, #148]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4b23      	ldr	r3, [pc, #140]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd ff92 	bl	80017cc <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd ff8e 	bl	80017cc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e067      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x730>
 80038ca:	e05f      	b.n	800398c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80038d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd ff78 	bl	80017cc <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd ff74 	bl	80017cc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04d      	b.n	800398e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <HAL_RCC_OscConfig+0x788>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x764>
 80038fe:	e045      	b.n	800398c <HAL_RCC_OscConfig+0x810>
 8003900:	58024800 	.word	0x58024800
 8003904:	58024400 	.word	0x58024400
 8003908:	fffffc0c 	.word	0xfffffc0c
 800390c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_RCC_OscConfig+0x81c>)
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCC_OscConfig+0x81c>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b01      	cmp	r3, #1
 8003922:	d031      	beq.n	8003988 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0203 	and.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d12a      	bne.n	8003988 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d122      	bne.n	8003988 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d11a      	bne.n	8003988 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	0a5b      	lsrs	r3, r3, #9
 8003956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d111      	bne.n	8003988 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d108      	bne.n	8003988 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	0e1b      	lsrs	r3, r3, #24
 800397a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3730      	adds	r7, #48	; 0x30
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400

0800399c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e19c      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d910      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b87      	ldr	r3, [pc, #540]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 020f 	bic.w	r2, r3, #15
 80039c6:	4985      	ldr	r1, [pc, #532]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b83      	ldr	r3, [pc, #524]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e184      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	4b7b      	ldr	r3, [pc, #492]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d908      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039fc:	4b78      	ldr	r3, [pc, #480]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4975      	ldr	r1, [pc, #468]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d010      	beq.n	8003a3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	496a      	ldr	r1, [pc, #424]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d908      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a58:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	495e      	ldr	r1, [pc, #376]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d908      	bls.n	8003a98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a86:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4953      	ldr	r1, [pc, #332]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	4b4d      	ldr	r3, [pc, #308]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d908      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f023 020f 	bic.w	r2, r3, #15
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4947      	ldr	r1, [pc, #284]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d055      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4940      	ldr	r1, [pc, #256]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aec:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d121      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0f6      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d115      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0ea      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b1c:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0de      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0d6      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f023 0207 	bic.w	r2, r3, #7
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fd fe3d 	bl	80017cc <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b56:	f7fd fe39 	bl	80017cc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0be      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d1eb      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d010      	beq.n	8003bac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d208      	bcs.n	8003bac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f023 020f 	bic.w	r2, r3, #15
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	490e      	ldr	r1, [pc, #56]	; (8003be0 <HAL_RCC_ClockConfig+0x244>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d214      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	4906      	ldr	r1, [pc, #24]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_RCC_ClockConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e086      	b.n	8003cea <HAL_RCC_ClockConfig+0x34e>
 8003bdc:	52002000 	.word	0x52002000
 8003be0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d208      	bcs.n	8003c12 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c00:	4b3c      	ldr	r3, [pc, #240]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	4939      	ldr	r1, [pc, #228]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d208      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	492e      	ldr	r1, [pc, #184]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d208      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4922      	ldr	r1, [pc, #136]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d208      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4917      	ldr	r1, [pc, #92]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c9c:	f000 f834 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	4912      	ldr	r1, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x35c>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_RCC_ClockConfig+0x358>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <HAL_RCC_ClockConfig+0x35c>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x360>)
 8003cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <HAL_RCC_ClockConfig+0x364>)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x368>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd fd2a 	bl	8001738 <HAL_InitTick>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	0800dc60 	.word	0x0800dc60
 8003cfc:	24000004 	.word	0x24000004
 8003d00:	24000000 	.word	0x24000000
 8003d04:	24000008 	.word	0x24000008

08003d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d0e:	4bb3      	ldr	r3, [pc, #716]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d16:	2b18      	cmp	r3, #24
 8003d18:	f200 8155 	bhi.w	8003fc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003fc7 	.word	0x08003fc7
 8003d2c:	08003fc7 	.word	0x08003fc7
 8003d30:	08003fc7 	.word	0x08003fc7
 8003d34:	08003fc7 	.word	0x08003fc7
 8003d38:	08003fc7 	.word	0x08003fc7
 8003d3c:	08003fc7 	.word	0x08003fc7
 8003d40:	08003fc7 	.word	0x08003fc7
 8003d44:	08003daf 	.word	0x08003daf
 8003d48:	08003fc7 	.word	0x08003fc7
 8003d4c:	08003fc7 	.word	0x08003fc7
 8003d50:	08003fc7 	.word	0x08003fc7
 8003d54:	08003fc7 	.word	0x08003fc7
 8003d58:	08003fc7 	.word	0x08003fc7
 8003d5c:	08003fc7 	.word	0x08003fc7
 8003d60:	08003fc7 	.word	0x08003fc7
 8003d64:	08003db5 	.word	0x08003db5
 8003d68:	08003fc7 	.word	0x08003fc7
 8003d6c:	08003fc7 	.word	0x08003fc7
 8003d70:	08003fc7 	.word	0x08003fc7
 8003d74:	08003fc7 	.word	0x08003fc7
 8003d78:	08003fc7 	.word	0x08003fc7
 8003d7c:	08003fc7 	.word	0x08003fc7
 8003d80:	08003fc7 	.word	0x08003fc7
 8003d84:	08003dbb 	.word	0x08003dbb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d88:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d94:	4b91      	ldr	r3, [pc, #580]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	08db      	lsrs	r3, r3, #3
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	4a90      	ldr	r2, [pc, #576]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003da6:	e111      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003da8:	4b8d      	ldr	r3, [pc, #564]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003daa:	61bb      	str	r3, [r7, #24]
    break;
 8003dac:	e10e      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003dae:	4b8d      	ldr	r3, [pc, #564]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003db0:	61bb      	str	r3, [r7, #24]
    break;
 8003db2:	e10b      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003db4:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003db6:	61bb      	str	r3, [r7, #24]
    break;
 8003db8:	e108      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dba:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003dc4:	4b85      	ldr	r3, [pc, #532]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dd0:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003dda:	4b80      	ldr	r3, [pc, #512]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	08db      	lsrs	r3, r3, #3
 8003de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80e1 	beq.w	8003fc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	f000 8083 	beq.w	8003f0c <HAL_RCC_GetSysClockFreq+0x204>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f200 80a1 	bhi.w	8003f50 <HAL_RCC_GetSysClockFreq+0x248>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x114>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d056      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e1a:	e099      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d02d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e28:	4b6c      	ldr	r3, [pc, #432]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	4a6b      	ldr	r2, [pc, #428]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b62      	ldr	r3, [pc, #392]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e82:	e087      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ff0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e96:	4b51      	ldr	r3, [pc, #324]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eaa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec6:	e065      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eda:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f0a:	e043      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ff8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1e:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4e:	e021      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f92:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	0a5b      	lsrs	r3, r3, #9
 8003f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	ee17 3a90 	vmov	r3, s15
 8003fbc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
    break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc8:	61bb      	str	r3, [r7, #24]
    break;
 8003fca:	bf00      	nop
  }

  return sysclockfreq;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	03d09000 	.word	0x03d09000
 8003fe4:	003d0900 	.word	0x003d0900
 8003fe8:	007a1200 	.word	0x007a1200
 8003fec:	46000000 	.word	0x46000000
 8003ff0:	4c742400 	.word	0x4c742400
 8003ff4:	4a742400 	.word	0x4a742400
 8003ff8:	4af42400 	.word	0x4af42400

08003ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004002:	f7ff fe81 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCC_GetHCLKFreq+0x50>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490f      	ldr	r1, [pc, #60]	; (8004050 <HAL_RCC_GetHCLKFreq+0x54>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCC_GetHCLKFreq+0x50>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_GetHCLKFreq+0x54>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_RCC_GetHCLKFreq+0x58>)
 8004038:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800403a:	4a07      	ldr	r2, [pc, #28]	; (8004058 <HAL_RCC_GetHCLKFreq+0x5c>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004040:	4b04      	ldr	r3, [pc, #16]	; (8004054 <HAL_RCC_GetHCLKFreq+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	58024400 	.word	0x58024400
 8004050:	0800dc60 	.word	0x0800dc60
 8004054:	24000004 	.word	0x24000004
 8004058:	24000000 	.word	0x24000000

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004060:	f7ff ffcc 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4904      	ldr	r1, [pc, #16]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58024400 	.word	0x58024400
 8004084:	0800dc60 	.word	0x0800dc60

08004088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800408c:	f7ff ffb6 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4904      	ldr	r1, [pc, #16]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	58024400 	.word	0x58024400
 80040b0:	0800dc60 	.word	0x0800dc60

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040bc:	2300      	movs	r3, #0
 80040be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d03f      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040d8:	d02a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040de:	d824      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e4:	d018      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ea:	d81e      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f4:	d007      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040f6:	e018      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4bab      	ldr	r3, [pc, #684]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4aaa      	ldr	r2, [pc, #680]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004104:	e015      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fff3 	bl	80060f8 <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3324      	adds	r3, #36	; 0x24
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f002 f89c 	bl	800625c <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
      break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004138:	4b9b      	ldr	r3, [pc, #620]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004144:	4998      	ldr	r1, [pc, #608]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	650b      	str	r3, [r1, #80]	; 0x50
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d03d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	2b04      	cmp	r3, #4
 8004162:	d826      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004181 	.word	0x08004181
 8004170:	0800418f 	.word	0x0800418f
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b9 	.word	0x080041b9
 800417c:	080041b9 	.word	0x080041b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004180:	4b89      	ldr	r3, [pc, #548]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a88      	ldr	r2, [pc, #544]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800418c:	e015      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f001 ffaf 	bl	80060f8 <RCCEx_PLL2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3324      	adds	r3, #36	; 0x24
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f858 	bl	800625c <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80041b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	f023 0207 	bic.w	r2, r3, #7
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	4976      	ldr	r1, [pc, #472]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	650b      	str	r3, [r1, #80]	; 0x50
 80041d2:	e001      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d042      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ec:	d02b      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d825      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041f4:	2bc0      	cmp	r3, #192	; 0xc0
 80041f6:	d028      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041f8:	2bc0      	cmp	r3, #192	; 0xc0
 80041fa:	d821      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d016      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d81d      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d007      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800420c:	e018      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420e:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800421a:	e017      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f001 ff68 	bl	80060f8 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800422c:	e00e      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f002 f811 	bl	800625c <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800423e:	e005      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e002      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800424a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004252:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004256:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	4952      	ldr	r1, [pc, #328]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004260:	4313      	orrs	r3, r2
 8004262:	650b      	str	r3, [r1, #80]	; 0x50
 8004264:	e001      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	2b00      	cmp	r3, #0
 8004274:	d049      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800427c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004280:	d030      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004286:	d82a      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004288:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800428c:	d02c      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800428e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004292:	d824      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004298:	d018      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800429a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429e:	d81e      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80042a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a8:	d007      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x206>
 80042aa:	e018      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ac:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a3d      	ldr	r2, [pc, #244]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042b8:	e017      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 ff19 	bl	80060f8 <RCCEx_PLL2_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042ca:	e00e      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 ffc2 	bl	800625c <RCCEx_PLL3_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042dc:	e005      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80042e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80042f0:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042fe:	492a      	ldr	r1, [pc, #168]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	658b      	str	r3, [r1, #88]	; 0x58
 8004304:	e001      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04c      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800431c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004320:	d030      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004326:	d82a      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004328:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800432c:	d02c      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800432e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004332:	d824      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004338:	d018      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800433a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800433e:	d81e      	bhi.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004348:	d007      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800434a:	e018      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004358:	e017      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fec9 	bl	80060f8 <RCCEx_PLL2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800436a:	e00e      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3324      	adds	r3, #36	; 0x24
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f001 ff72 	bl	800625c <RCCEx_PLL3_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800437c:	e005      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
      break;
 8004382:	e002      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004384:	bf00      	nop
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10d      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800439e:	4902      	ldr	r1, [pc, #8]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	658b      	str	r3, [r1, #88]	; 0x58
 80043a4:	e004      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80043a6:	bf00      	nop
 80043a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d032      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d01c      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043c4:	2b30      	cmp	r3, #48	; 0x30
 80043c6:	d817      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d00c      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d813      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d016      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d10f      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d8:	4baf      	ldr	r3, [pc, #700]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	4aae      	ldr	r2, [pc, #696]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043e4:	e00e      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fe83 	bl	80060f8 <RCCEx_PLL2_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]
      break;
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800440a:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	49a0      	ldr	r1, [pc, #640]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800441c:	e001      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d047      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004436:	d030      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443c:	d82a      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800443e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004442:	d02c      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004448:	d824      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800444a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444e:	d018      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004454:	d81e      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445e:	d007      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004460:	e018      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a8c      	ldr	r2, [pc, #560]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800446e:	e017      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fe3e 	bl	80060f8 <RCCEx_PLL2_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004480:	e00e      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3324      	adds	r3, #36	; 0x24
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f001 fee7 	bl	800625c <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004492:	e005      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e002      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800449e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80044a6:	4b7c      	ldr	r3, [pc, #496]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b2:	4979      	ldr	r1, [pc, #484]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	650b      	str	r3, [r1, #80]	; 0x50
 80044b8:	e001      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d049      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d2:	d02e      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d8:	d828      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044de:	d02a      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80044e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e4:	d822      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044ea:	d026      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80044ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f0:	d81c      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044f6:	d010      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80044f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fc:	d816      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01d      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d111      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fdf2 	bl	80060f8 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004518:	e012      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3324      	adds	r3, #36	; 0x24
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fe9b 	bl	800625c <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800452a:	e009      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
      break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004532:	bf00      	nop
 8004534:	e004      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800453e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004552:	4951      	ldr	r1, [pc, #324]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004554:	4313      	orrs	r3, r2
 8004556:	650b      	str	r3, [r1, #80]	; 0x50
 8004558:	e001      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d04b      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800457a:	d828      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d02a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d822      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004588:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800458c:	d026      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800458e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004592:	d81c      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004598:	d010      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x508>
 800459a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459e:	d816      	bhi.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01d      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80045a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a8:	d111      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 fda1 	bl	80060f8 <RCCEx_PLL2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045ba:	e012      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3324      	adds	r3, #36	; 0x24
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 fe4a 	bl	800625c <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80045cc:	e009      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
      break;
 80045d2:	e006      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045d4:	bf00      	nop
 80045d6:	e004      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045d8:	bf00      	nop
 80045da:	e002      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045dc:	bf00      	nop
 80045de:	e000      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80045e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045f6:	4928      	ldr	r1, [pc, #160]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	658b      	str	r3, [r1, #88]	; 0x58
 80045fc:	e001      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d02f      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004616:	d00e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461c:	d814      	bhi.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d015      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004626:	d10f      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004634:	e00c      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f001 fd5b 	bl	80060f8 <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
      break;
 800464c:	e000      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800464e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	490d      	ldr	r1, [pc, #52]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	650b      	str	r3, [r1, #80]	; 0x50
 8004668:	e001      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d033      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	2b03      	cmp	r3, #3
 8004680:	d81c      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046c3 	.word	0x080046c3
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046ab 	.word	0x080046ab
 8004694:	080046c3 	.word	0x080046c3
 8004698:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469c:	4bb8      	ldr	r3, [pc, #736]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	4ab7      	ldr	r2, [pc, #732]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046a8:	e00c      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2102      	movs	r1, #2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fd21 	bl	80060f8 <RCCEx_PLL2_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80046ba:	e003      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80046c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046ca:	4bad      	ldr	r3, [pc, #692]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	49aa      	ldr	r1, [pc, #680]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046dc:	e001      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8086 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046f0:	4ba4      	ldr	r3, [pc, #656]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4aa3      	ldr	r2, [pc, #652]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80046f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046fc:	f7fd f866 	bl	80017cc <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004702:	e009      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004704:	f7fd f862 	bl	80017cc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d902      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	75fb      	strb	r3, [r7, #23]
        break;
 8004716:	e005      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004718:	4b9a      	ldr	r3, [pc, #616]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ef      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d166      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800472a:	4b95      	ldr	r3, [pc, #596]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800472c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004734:	4053      	eors	r3, r2
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d013      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800473e:	4b90      	ldr	r3, [pc, #576]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004748:	4b8d      	ldr	r3, [pc, #564]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a8c      	ldr	r2, [pc, #560]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004754:	4b8a      	ldr	r3, [pc, #552]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a89      	ldr	r2, [pc, #548]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800475a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004760:	4a87      	ldr	r2, [pc, #540]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800476c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004770:	d115      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd f82b 	bl	80017cc <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004778:	e00b      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fd f827 	bl	80017cc <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d902      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	75fb      	strb	r3, [r7, #23]
            break;
 8004790:	e005      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004792:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0ed      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d126      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b2:	d10d      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80047b4:	4b72      	ldr	r3, [pc, #456]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047c2:	0919      	lsrs	r1, r3, #4
 80047c4:	4b70      	ldr	r3, [pc, #448]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80047c6:	400b      	ands	r3, r1
 80047c8:	496d      	ldr	r1, [pc, #436]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	610b      	str	r3, [r1, #16]
 80047ce:	e005      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80047d0:	4b6b      	ldr	r3, [pc, #428]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	4a6a      	ldr	r2, [pc, #424]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047da:	6113      	str	r3, [r2, #16]
 80047dc:	4b68      	ldr	r3, [pc, #416]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ea:	4965      	ldr	r1, [pc, #404]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	670b      	str	r3, [r1, #112]	; 0x70
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	75bb      	strb	r3, [r7, #22]
 80047f6:	e001      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d07e      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480c:	2b28      	cmp	r3, #40	; 0x28
 800480e:	d867      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	080048e7 	.word	0x080048e7
 800481c:	080048e1 	.word	0x080048e1
 8004820:	080048e1 	.word	0x080048e1
 8004824:	080048e1 	.word	0x080048e1
 8004828:	080048e1 	.word	0x080048e1
 800482c:	080048e1 	.word	0x080048e1
 8004830:	080048e1 	.word	0x080048e1
 8004834:	080048e1 	.word	0x080048e1
 8004838:	080048bd 	.word	0x080048bd
 800483c:	080048e1 	.word	0x080048e1
 8004840:	080048e1 	.word	0x080048e1
 8004844:	080048e1 	.word	0x080048e1
 8004848:	080048e1 	.word	0x080048e1
 800484c:	080048e1 	.word	0x080048e1
 8004850:	080048e1 	.word	0x080048e1
 8004854:	080048e1 	.word	0x080048e1
 8004858:	080048cf 	.word	0x080048cf
 800485c:	080048e1 	.word	0x080048e1
 8004860:	080048e1 	.word	0x080048e1
 8004864:	080048e1 	.word	0x080048e1
 8004868:	080048e1 	.word	0x080048e1
 800486c:	080048e1 	.word	0x080048e1
 8004870:	080048e1 	.word	0x080048e1
 8004874:	080048e1 	.word	0x080048e1
 8004878:	080048e7 	.word	0x080048e7
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080048e1 	.word	0x080048e1
 8004884:	080048e1 	.word	0x080048e1
 8004888:	080048e1 	.word	0x080048e1
 800488c:	080048e1 	.word	0x080048e1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048e1 	.word	0x080048e1
 8004898:	080048e7 	.word	0x080048e7
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048e1 	.word	0x080048e1
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048e7 	.word	0x080048e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fc18 	bl	80060f8 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3324      	adds	r3, #36	; 0x24
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fcc1 	bl	800625c <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80048de:	e003      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80048e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fa:	4921      	ldr	r1, [pc, #132]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004900:	e001      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d03e      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	2b05      	cmp	r3, #5
 8004918:	d820      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004963 	.word	0x08004963
 8004924:	08004939 	.word	0x08004939
 8004928:	0800494b 	.word	0x0800494b
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f001 fbda 	bl	80060f8 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004948:	e00c      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3324      	adds	r3, #36	; 0x24
 800494e:	2101      	movs	r1, #1
 8004950:	4618      	mov	r0, r3
 8004952:	f001 fc83 	bl	800625c <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800495a:	e003      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	e000      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d110      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	4902      	ldr	r1, [pc, #8]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	654b      	str	r3, [r1, #84]	; 0x54
 800497c:	e008      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	58024800 	.word	0x58024800
 8004988:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d039      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d820      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80049a6:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049ef 	.word	0x080049ef
 80049b0:	080049c5 	.word	0x080049c5
 80049b4:	080049d7 	.word	0x080049d7
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	2101      	movs	r1, #1
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fb94 	bl	80060f8 <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049d4:	e00c      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	2101      	movs	r1, #1
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fc3d 	bl	800625c <RCCEx_PLL3_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80049e6:	e003      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
      break;
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80049ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f6:	4bb7      	ldr	r3, [pc, #732]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	f023 0207 	bic.w	r2, r3, #7
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	49b3      	ldr	r1, [pc, #716]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	658b      	str	r3, [r1, #88]	; 0x58
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d04b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a26:	d02e      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2c:	d828      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a32:	d02a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d822      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a3e:	d026      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004a40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a44:	d81c      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d816      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01d      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a5a:	d111      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fb48 	bl	80060f8 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a6c:	e012      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3324      	adds	r3, #36	; 0x24
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fbf1 	bl	800625c <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a7e:	e009      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75fb      	strb	r3, [r7, #23]
      break;
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a86:	bf00      	nop
 8004a88:	e004      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9a:	4b8e      	ldr	r3, [pc, #568]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa8:	498a      	ldr	r1, [pc, #552]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	654b      	str	r3, [r1, #84]	; 0x54
 8004aae:	e001      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d04b      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004aca:	d02e      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004acc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ad0:	d828      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	d02a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004adc:	d822      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae2:	d026      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae8:	d81c      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d010      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af4:	d816      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01d      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d111      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 faf6 	bl	80060f8 <RCCEx_PLL2_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b10:	e012      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3324      	adds	r3, #36	; 0x24
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fb9f 	bl	800625c <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004b22:	e009      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
      break;
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b3e:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4c:	4961      	ldr	r1, [pc, #388]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	658b      	str	r3, [r1, #88]	; 0x58
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d04b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b6e:	d02e      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004b70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b74:	d828      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7a:	d02a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b80:	d822      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b86:	d026      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004b88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b8c:	d81c      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b92:	d010      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b98:	d816      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01d      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba2:	d111      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 faa4 	bl	80060f8 <RCCEx_PLL2_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bb4:	e012      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3324      	adds	r3, #36	; 0x24
 8004bba:	2102      	movs	r1, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fb4d 	bl	800625c <RCCEx_PLL3_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004bc6:	e009      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
      break;
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e004      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e002      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004be2:	4b3c      	ldr	r3, [pc, #240]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bf0:	4938      	ldr	r1, [pc, #224]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	658b      	str	r3, [r1, #88]	; 0x58
 8004bf6:	e001      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d10a      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	2102      	movs	r1, #2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fb1e 	bl	800625c <RCCEx_PLL3_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c2a:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c38:	4926      	ldr	r1, [pc, #152]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c54:	d10a      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3324      	adds	r3, #36	; 0x24
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 fafd 	bl	800625c <RCCEx_PLL3_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7a:	4916      	ldr	r1, [pc, #88]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d036      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c96:	d01f      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c9c:	d817      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004ca8:	e011      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3304      	adds	r3, #4
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fa21 	bl	80060f8 <RCCEx_PLL2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004cba:	e00e      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 faca 	bl	800625c <RCCEx_PLL3_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ccc:	e005      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004cd4:	58024400 	.word	0x58024400
      break;
 8004cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ce0:	4b93      	ldr	r3, [pc, #588]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cee:	4990      	ldr	r1, [pc, #576]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	658b      	str	r3, [r1, #88]	; 0x58
 8004cf4:	e001      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d033      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d10:	d01c      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004d12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d16:	d816      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d22:	d007      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004d24:	e00f      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d26:	4b82      	ldr	r3, [pc, #520]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4a81      	ldr	r2, [pc, #516]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d32:	e00c      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 fa8e 	bl	800625c <RCCEx_PLL3_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d54:	4b76      	ldr	r3, [pc, #472]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d62:	4973      	ldr	r1, [pc, #460]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	654b      	str	r3, [r1, #84]	; 0x54
 8004d68:	e001      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d029      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d86:	d007      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004d88:	e00f      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8a:	4b69      	ldr	r3, [pc, #420]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	4a68      	ldr	r2, [pc, #416]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d96:	e00b      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 f9aa 	bl	80060f8 <RCCEx_PLL2_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
      break;
 8004dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004db6:	4b5e      	ldr	r3, [pc, #376]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	495b      	ldr	r1, [pc, #364]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dc8:	e001      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	2102      	movs	r1, #2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 fa3b 	bl	800625c <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d030      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e04:	d017      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0a:	d811      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d013      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e16:	d80b      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e20:	d106      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e22:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4a42      	ldr	r2, [pc, #264]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004e2e:	e007      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	e004      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e46:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e52:	4937      	ldr	r1, [pc, #220]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	654b      	str	r3, [r1, #84]	; 0x54
 8004e58:	e001      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	492e      	ldr	r1, [pc, #184]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d009      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e96:	4926      	ldr	r1, [pc, #152]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ea8:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb4:	491e      	ldr	r1, [pc, #120]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ed0:	6113      	str	r3, [r2, #16]
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004edc:	4914      	ldr	r1, [pc, #80]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da08      	bge.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	490e      	ldr	r1, [pc, #56]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	4906      	ldr	r1, [pc, #24]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004f1c:	7dbb      	ldrb	r3, [r7, #22]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	58024400 	.word	0x58024400

08004f34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b090      	sub	sp, #64	; 0x40
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f42:	f040 8095 	bne.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004f46:	4bae      	ldr	r3, [pc, #696]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	f200 8088 	bhi.w	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f75 	.word	0x08004f75
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004fc5 	.word	0x08004fc5
 8004f6c:	08005061 	.word	0x08005061
 8004f70:	08004fed 	.word	0x08004fed

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f74:	4ba2      	ldr	r3, [pc, #648]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f80:	d108      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 ff64 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f90:	f000 bc95 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f98:	f000 bc91 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f9c:	4b98      	ldr	r3, [pc, #608]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa8:	d108      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004faa:	f107 0318 	add.w	r3, r7, #24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fca8 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fb8:	f000 bc81 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc0:	f000 bc7d 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fc4:	4b8e      	ldr	r3, [pc, #568]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd0:	d108      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fd2:	f107 030c 	add.w	r3, r7, #12
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fde8 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fe0:	f000 bc6d 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe8:	f000 bc69 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004fec:	4b84      	ldr	r3, [pc, #528]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d10c      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005008:	4b7d      	ldr	r3, [pc, #500]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	4a7c      	ldr	r2, [pc, #496]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501a:	e01f      	b.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800501c:	4b78      	ldr	r3, [pc, #480]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800502a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005030:	d102      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005032:	4b75      	ldr	r3, [pc, #468]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005036:	e011      	b.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005038:	4b71      	ldr	r3, [pc, #452]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005044:	d106      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800504c:	d102      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800504e:	4b6f      	ldr	r3, [pc, #444]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005052:	e003      	b.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005058:	f000 bc31 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800505c:	f000 bc2f 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005060:	4b6b      	ldr	r3, [pc, #428]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005064:	f000 bc2b 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800506c:	f000 bc27 	b.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005076:	f040 8095 	bne.w	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800507a:	4b61      	ldr	r3, [pc, #388]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005082:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508a:	d04d      	beq.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	f200 8084 	bhi.w	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	2bc0      	cmp	r3, #192	; 0xc0
 800509a:	d07d      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	2bc0      	cmp	r3, #192	; 0xc0
 80050a0:	d87d      	bhi.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d02d      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d877      	bhi.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d012      	beq.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80050ba:	e070      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050bc:	4b50      	ldr	r3, [pc, #320]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c8:	d107      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fec0 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050d8:	e3f1      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050de:	e3ee      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050e0:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ec:	d107      	bne.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ee:	f107 0318 	add.w	r3, r7, #24
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fc06 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050fc:	e3df      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005102:	e3dc      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005104:	4b3e      	ldr	r3, [pc, #248]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005110:	d107      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005112:	f107 030c 	add.w	r3, r7, #12
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fd48 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005120:	e3cd      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005126:	e3ca      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005128:	4b35      	ldr	r3, [pc, #212]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800512a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005130:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d10c      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005144:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005156:	e01e      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005158:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005164:	d106      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800516c:	d102      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005172:	e010      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005174:	4b22      	ldr	r3, [pc, #136]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005180:	d106      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005188:	d102      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518e:	e002      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005194:	e393      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005196:	e392      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800519c:	e38f      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a2:	e38c      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051aa:	f040 80a7 	bne.w	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80051ae:	4b14      	ldr	r3, [pc, #80]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051be:	d05f      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051c6:	f200 8096 	bhi.w	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051d0:	f000 808e 	beq.w	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051da:	f200 808c 	bhi.w	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e4:	d03a      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ec:	f200 8083 	bhi.w	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051fc:	d01c      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80051fe:	e07a      	b.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005200:	58024400 	.word	0x58024400
 8005204:	03d09000 	.word	0x03d09000
 8005208:	003d0900 	.word	0x003d0900
 800520c:	007a1200 	.word	0x007a1200
 8005210:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005214:	4baa      	ldr	r3, [pc, #680]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005220:	d107      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fe14 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005230:	e345      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005236:	e342      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005238:	4ba1      	ldr	r3, [pc, #644]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005244:	d107      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005246:	f107 0318 	add.w	r3, r7, #24
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb5a 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005254:	e333      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800525a:	e330      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800525c:	4b98      	ldr	r3, [pc, #608]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005268:	d107      	bne.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800526a:	f107 030c 	add.w	r3, r7, #12
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc9c 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005278:	e321      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800527e:	e31e      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005280:	4b8f      	ldr	r3, [pc, #572]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005288:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800528a:	4b8d      	ldr	r3, [pc, #564]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800529c:	4b88      	ldr	r3, [pc, #544]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	4a87      	ldr	r2, [pc, #540]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ae:	e01e      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052b0:	4b83      	ldr	r3, [pc, #524]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052bc:	d106      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c4:	d102      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80052c6:	4b80      	ldr	r3, [pc, #512]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ca:	e010      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052cc:	4b7c      	ldr	r3, [pc, #496]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d8:	d106      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e0:	d102      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80052e2:	4b7a      	ldr	r3, [pc, #488]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80052ec:	e2e7      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80052ee:	e2e6      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052f0:	4b77      	ldr	r3, [pc, #476]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f4:	e2e3      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052fa:	e2e0      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	f040 809c 	bne.w	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005306:	4b6e      	ldr	r3, [pc, #440]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800530e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005316:	d054      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800531e:	f200 808b 	bhi.w	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005328:	f000 8083 	beq.w	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005332:	f200 8081 	bhi.w	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800533c:	d02f      	beq.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005344:	d878      	bhi.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005352:	d012      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005354:	e070      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005356:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005362:	d107      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fd73 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005372:	e2a4      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005378:	e2a1      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800537a:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005386:	d107      	bne.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005388:	f107 0318 	add.w	r3, r7, #24
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fab9 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005396:	e292      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800539c:	e28f      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800539e:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d107      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ac:	f107 030c 	add.w	r3, r7, #12
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fbfb 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053ba:	e280      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053c0:	e27d      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80053c2:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053cc:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053de:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	4a36      	ldr	r2, [pc, #216]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f0:	e01e      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053f2:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	d106      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005406:	d102      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005408:	4b2f      	ldr	r3, [pc, #188]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540c:	e010      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541a:	d106      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005422:	d102      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005424:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800542e:	e246      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005430:	e245      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005432:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005436:	e242      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800543c:	e23f      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005444:	f040 80a8 	bne.w	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005458:	d060      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005460:	f200 8097 	bhi.w	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800546a:	f000 808f 	beq.w	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005474:	f200 808d 	bhi.w	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547e:	d03b      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005486:	f200 8084 	bhi.w	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	d01d      	beq.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005498:	e07b      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a6:	d107      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fcd1 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054b6:	e202      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054bc:	e1ff      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80054be:	bf00      	nop
 80054c0:	58024400 	.word	0x58024400
 80054c4:	03d09000 	.word	0x03d09000
 80054c8:	003d0900 	.word	0x003d0900
 80054cc:	007a1200 	.word	0x007a1200
 80054d0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054d4:	4ba3      	ldr	r3, [pc, #652]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e0:	d107      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e2:	f107 0318 	add.w	r3, r7, #24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fa0c 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80054f0:	e1e5      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f6:	e1e2      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054f8:	4b9a      	ldr	r3, [pc, #616]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005504:	d107      	bne.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb4e 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005514:	e1d3      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800551a:	e1d0      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800551c:	4b91      	ldr	r3, [pc, #580]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800551e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005524:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005526:	4b8f      	ldr	r3, [pc, #572]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b04      	cmp	r3, #4
 8005530:	d10c      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005538:	4b8a      	ldr	r3, [pc, #552]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a89      	ldr	r2, [pc, #548]	; (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554a:	e01e      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800554c:	4b85      	ldr	r3, [pc, #532]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005558:	d106      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005560:	d102      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005562:	4b82      	ldr	r3, [pc, #520]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005566:	e010      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005568:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005574:	d106      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d102      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800557e:	4b7c      	ldr	r3, [pc, #496]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005582:	e002      	b.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005588:	e199      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800558a:	e198      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800558c:	4b79      	ldr	r3, [pc, #484]	; (8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005590:	e195      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005596:	e192      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800559e:	d173      	bne.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80055a0:	4b70      	ldr	r3, [pc, #448]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b0:	d02f      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b8:	d863      	bhi.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c6:	d012      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80055c8:	e05b      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ca:	4b66      	ldr	r3, [pc, #408]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d6:	d107      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d8:	f107 0318 	add.w	r3, r7, #24
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f991 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055e6:	e16a      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ec:	e167      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055ee:	4b5d      	ldr	r3, [pc, #372]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fa:	d107      	bne.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fad3 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800560a:	e158      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005610:	e155      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005612:	4b54      	ldr	r3, [pc, #336]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800561a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800561c:	4b51      	ldr	r3, [pc, #324]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d10c      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800562e:	4b4d      	ldr	r3, [pc, #308]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	08db      	lsrs	r3, r3, #3
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	4a4b      	ldr	r2, [pc, #300]	; (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005640:	e01e      	b.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005642:	4b48      	ldr	r3, [pc, #288]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564e:	d106      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005656:	d102      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005658:	4b44      	ldr	r3, [pc, #272]	; (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800565c:	e010      	b.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800565e:	4b41      	ldr	r3, [pc, #260]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800566a:	d106      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005672:	d102      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800567e:	e11e      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005680:	e11d      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005686:	e11a      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d133      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005690:	4b34      	ldr	r3, [pc, #208]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a6:	d012      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80056a8:	e023      	b.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056aa:	4b2e      	ldr	r3, [pc, #184]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056b6:	d107      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fbc9 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056c6:	e0fa      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056cc:	e0f7      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056ce:	4b25      	ldr	r3, [pc, #148]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056da:	d107      	bne.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056dc:	f107 0318 	add.w	r3, r7, #24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f90f 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056ea:	e0e8      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056f0:	e0e5      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056f6:	e0e2      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fe:	f040 808f 	bne.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005702:	4b18      	ldr	r3, [pc, #96]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005712:	d075      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800571a:	d87e      	bhi.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d060      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d876      	bhi.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005732:	d045      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800573a:	d86e      	bhi.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005742:	d02b      	beq.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574a:	d866      	bhi.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005758:	d00e      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800575a:	e05e      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800575c:	f000 f8bc 	bl	80058d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005760:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005762:	e0ac      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005764:	58024400 	.word	0x58024400
 8005768:	03d09000 	.word	0x03d09000
 800576c:	003d0900 	.word	0x003d0900
 8005770:	007a1200 	.word	0x007a1200
 8005774:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005778:	4b53      	ldr	r3, [pc, #332]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005784:	d107      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005786:	f107 0318 	add.w	r3, r7, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f8ba 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005794:	e093      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800579a:	e090      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800579c:	4b4a      	ldr	r3, [pc, #296]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a8:	d107      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057aa:	f107 030c 	add.w	r3, r7, #12
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f9fc 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057b8:	e081      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057be:	e07e      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057c0:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d109      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057cc:	4b3e      	ldr	r3, [pc, #248]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	4a3d      	ldr	r2, [pc, #244]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80057de:	e06e      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057e4:	e06b      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f2:	d102      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057f8:	e061      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057fe:	e05e      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005800:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800580c:	d102      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800580e:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005812:	e054      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005818:	e051      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800581e:	e04e      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005826:	d148      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005830:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005838:	d02a      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005840:	d838      	bhi.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800584e:	d00d      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005850:	e030      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005852:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585e:	d102      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005860:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005864:	e02b      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800586a:	e028      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800586c:	4b16      	ldr	r3, [pc, #88]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005878:	d107      	bne.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800587a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fae8 	bl	8005e54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005888:	e019      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800588e:	e016      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589c:	d107      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800589e:	f107 0318 	add.w	r3, r7, #24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f82e 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80058ac:	e007      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b2:	e004      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b8:	e001      	b.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3740      	adds	r7, #64	; 0x40
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	58024400 	.word	0x58024400
 80058cc:	03d09000 	.word	0x03d09000
 80058d0:	003d0900 	.word	0x003d0900
 80058d4:	007a1200 	.word	0x007a1200

080058d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058dc:	f7fe fb8e 	bl	8003ffc <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4904      	ldr	r1, [pc, #16]	; (8005900 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	58024400 	.word	0x58024400
 8005900:	0800dc60 	.word	0x0800dc60

08005904 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800590c:	4ba1      	ldr	r3, [pc, #644]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005916:	4b9f      	ldr	r3, [pc, #636]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	0b1b      	lsrs	r3, r3, #12
 800591c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005920:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005922:	4b9c      	ldr	r3, [pc, #624]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800592e:	4b99      	ldr	r3, [pc, #612]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	08db      	lsrs	r3, r3, #3
 8005934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8111 	beq.w	8005b74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b02      	cmp	r3, #2
 8005956:	f000 8083 	beq.w	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f200 80a1 	bhi.w	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d056      	beq.n	8005a1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800596e:	e099      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005970:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02d      	beq.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800597c:	4b85      	ldr	r3, [pc, #532]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	08db      	lsrs	r3, r3, #3
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	4a84      	ldr	r2, [pc, #528]	; (8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
 800598c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a6:	4b7b      	ldr	r3, [pc, #492]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059d6:	e087      	b.n	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a1a:	e065      	b.n	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a5e:	e043      	b.n	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b48      	ldr	r3, [pc, #288]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa2:	e021      	b.n	8005ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0e:	ee17 2a90 	vmov	r2, s15
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b16:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3c:	ee17 2a90 	vmov	r2, s15
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6a:	ee17 2a90 	vmov	r2, s15
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b72:	e008      	b.n	8005b86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	609a      	str	r2, [r3, #8]
}
 8005b86:	bf00      	nop
 8005b88:	3724      	adds	r7, #36	; 0x24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	58024400 	.word	0x58024400
 8005b98:	03d09000 	.word	0x03d09000
 8005b9c:	46000000 	.word	0x46000000
 8005ba0:	4c742400 	.word	0x4c742400
 8005ba4:	4a742400 	.word	0x4a742400
 8005ba8:	4af42400 	.word	0x4af42400

08005bac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb4:	4ba1      	ldr	r3, [pc, #644]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005bbe:	4b9f      	ldr	r3, [pc, #636]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	0d1b      	lsrs	r3, r3, #20
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bca:	4b9c      	ldr	r3, [pc, #624]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005bd6:	4b99      	ldr	r3, [pc, #612]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8111 	beq.w	8005e1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	f000 8083 	beq.w	8005d08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	f200 80a1 	bhi.w	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d056      	beq.n	8005cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c16:	e099      	b.n	8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c18:	4b88      	ldr	r3, [pc, #544]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d02d      	beq.n	8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c24:	4b85      	ldr	r3, [pc, #532]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	08db      	lsrs	r3, r3, #3
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	4a84      	ldr	r2, [pc, #528]	; (8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b7b      	ldr	r3, [pc, #492]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c7e:	e087      	b.n	8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b6a      	ldr	r3, [pc, #424]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc2:	e065      	b.n	8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b59      	ldr	r3, [pc, #356]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d06:	e043      	b.n	8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d4a:	e021      	b.n	8005d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	4b37      	ldr	r3, [pc, #220]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005d90:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	0a5b      	lsrs	r3, r3, #9
 8005d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db6:	ee17 2a90 	vmov	r2, s15
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de4:	ee17 2a90 	vmov	r2, s15
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005dec:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e12:	ee17 2a90 	vmov	r2, s15
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e1a:	e008      	b.n	8005e2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	609a      	str	r2, [r3, #8]
}
 8005e2e:	bf00      	nop
 8005e30:	3724      	adds	r7, #36	; 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	03d09000 	.word	0x03d09000
 8005e44:	46000000 	.word	0x46000000
 8005e48:	4c742400 	.word	0x4c742400
 8005e4c:	4a742400 	.word	0x4a742400
 8005e50:	4af42400 	.word	0x4af42400

08005e54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e5c:	4ba0      	ldr	r3, [pc, #640]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005e66:	4b9e      	ldr	r3, [pc, #632]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e72:	4b9b      	ldr	r3, [pc, #620]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e7c:	4b98      	ldr	r3, [pc, #608]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	08db      	lsrs	r3, r3, #3
 8005e82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8111 	beq.w	80060c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	f000 8083 	beq.w	8005fae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	f200 80a1 	bhi.w	8005ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d056      	beq.n	8005f6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005ebc:	e099      	b.n	8005ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebe:	4b88      	ldr	r3, [pc, #544]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d02d      	beq.n	8005f26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eca:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	4a83      	ldr	r2, [pc, #524]	; (80060e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef4:	4b7a      	ldr	r3, [pc, #488]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f08:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f24:	e087      	b.n	8006036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f38:	4b69      	ldr	r3, [pc, #420]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f68:	e065      	b.n	8006036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7c:	4b58      	ldr	r3, [pc, #352]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f90:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fac:	e043      	b.n	8006036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	ee07 3a90 	vmov	s15, r3
 8005fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc0:	4b47      	ldr	r3, [pc, #284]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ff0:	e021      	b.n	8006036 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	ee07 3a90 	vmov	s15, r3
 8005ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006004:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006014:	ed97 6a03 	vldr	s12, [r7, #12]
 8006018:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800601c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006030:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006034:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006036:	4b2a      	ldr	r3, [pc, #168]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	0a5b      	lsrs	r3, r3, #9
 800603c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800604c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006050:	edd7 6a07 	vldr	s13, [r7, #28]
 8006054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605c:	ee17 2a90 	vmov	r2, s15
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006064:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800607a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608a:	ee17 2a90 	vmov	r2, s15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006092:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	0e1b      	lsrs	r3, r3, #24
 8006098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b8:	ee17 2a90 	vmov	r2, s15
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060c0:	e008      	b.n	80060d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	bf00      	nop
 80060d6:	3724      	adds	r7, #36	; 0x24
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	58024400 	.word	0x58024400
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4af42400 	.word	0x4af42400

080060f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006106:	4b53      	ldr	r3, [pc, #332]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d101      	bne.n	8006116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e099      	b.n	800624a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006116:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a4e      	ldr	r2, [pc, #312]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800611c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fb fb53 	bl	80017cc <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800612a:	f7fb fb4f 	bl	80017cc <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e086      	b.n	800624a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	493f      	ldr	r1, [pc, #252]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	628b      	str	r3, [r1, #40]	; 0x28
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	025b      	lsls	r3, r3, #9
 800616e:	b29b      	uxth	r3, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	3b01      	subs	r3, #1
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800618c:	4931      	ldr	r1, [pc, #196]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	492d      	ldr	r1, [pc, #180]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061a4:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f023 0220 	bic.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4928      	ldr	r1, [pc, #160]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	4a26      	ldr	r2, [pc, #152]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	f023 0310 	bic.w	r3, r3, #16
 80061c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <RCCEx_PLL2_Config+0x160>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	69d2      	ldr	r2, [r2, #28]
 80061ce:	00d2      	lsls	r2, r2, #3
 80061d0:	4920      	ldr	r1, [pc, #128]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a19      	ldr	r2, [pc, #100]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061f4:	e00f      	b.n	8006216 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d106      	bne.n	800620a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061fc:	4b15      	ldr	r3, [pc, #84]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006208:	e005      	b.n	8006216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a11      	ldr	r2, [pc, #68]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800621c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006222:	f7fb fad3 	bl	80017cc <HAL_GetTick>
 8006226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006228:	e008      	b.n	800623c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800622a:	f7fb facf 	bl	80017cc <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <RCCEx_PLL2_Config+0x15c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	58024400 	.word	0x58024400
 8006258:	ffff0007 	.word	0xffff0007

0800625c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800626a:	4b53      	ldr	r3, [pc, #332]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b03      	cmp	r3, #3
 8006274:	d101      	bne.n	800627a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e099      	b.n	80063ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800627a:	4b4f      	ldr	r3, [pc, #316]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4e      	ldr	r2, [pc, #312]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006286:	f7fb faa1 	bl	80017cc <HAL_GetTick>
 800628a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800628c:	e008      	b.n	80062a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800628e:	f7fb fa9d 	bl	80017cc <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e086      	b.n	80063ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062a0:	4b45      	ldr	r3, [pc, #276]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062ac:	4b42      	ldr	r3, [pc, #264]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	051b      	lsls	r3, r3, #20
 80062ba:	493f      	ldr	r1, [pc, #252]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	628b      	str	r3, [r1, #40]	; 0x28
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062f0:	4931      	ldr	r1, [pc, #196]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062f6:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	492d      	ldr	r1, [pc, #180]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006308:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	4928      	ldr	r1, [pc, #160]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006316:	4313      	orrs	r3, r2
 8006318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800631a:	4b27      	ldr	r3, [pc, #156]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631e:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006326:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <RCCEx_PLL3_Config+0x160>)
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	69d2      	ldr	r2, [r2, #28]
 8006332:	00d2      	lsls	r2, r2, #3
 8006334:	4920      	ldr	r1, [pc, #128]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800633a:	4b1f      	ldr	r3, [pc, #124]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800634c:	4b1a      	ldr	r3, [pc, #104]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006358:	e00f      	b.n	800637a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006360:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800636a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800636c:	e005      	b.n	800637a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	4a11      	ldr	r2, [pc, #68]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a0e      	ldr	r2, [pc, #56]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006386:	f7fb fa21 	bl	80017cc <HAL_GetTick>
 800638a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800638c:	e008      	b.n	80063a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800638e:	f7fb fa1d 	bl	80017cc <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e006      	b.n	80063ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <RCCEx_PLL3_Config+0x15c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	58024400 	.word	0x58024400
 80063bc:	ffff0007 	.word	0xffff0007

080063c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e075      	b.n	80064be <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fa ff29 	bl	800123c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2203      	movs	r2, #3
 80063ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f868 	bl	80064c8 <HAL_SD_InitCard>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e05d      	b.n	80064be <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006402:	f107 0308 	add.w	r3, r7, #8
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fda5 	bl	8006f58 <HAL_SD_GetCardStatus>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e052      	b.n	80064be <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006418:	7e3b      	ldrb	r3, [r7, #24]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800641e:	7e7b      	ldrb	r3, [r7, #25]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10a      	bne.n	8006442 <HAL_SD_Init+0x82>
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <HAL_SD_Init+0x78>
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	659a      	str	r2, [r3, #88]	; 0x58
 8006440:	e00b      	b.n	800645a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	2b01      	cmp	r3, #1
 8006448:	d104      	bne.n	8006454 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006450:	659a      	str	r2, [r3, #88]	; 0x58
 8006452:	e002      	b.n	800645a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fe5b 	bl	800711c <HAL_SD_ConfigWideBusOperation>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e026      	b.n	80064be <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006470:	f7fb f9ac 	bl	80017cc <HAL_GetTick>
 8006474:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006476:	e011      	b.n	800649c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006478:	f7fb f9a8 	bl	80017cc <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d109      	bne.n	800649c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800648e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e010      	b.n	80064be <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ff4d 	bl	800733c <HAL_SD_GetCardState>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d1e7      	bne.n	8006478 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3728      	adds	r7, #40	; 0x28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b08d      	sub	sp, #52	; 0x34
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064d8:	2300      	movs	r3, #0
 80064da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80064e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80064e4:	f7fe fd26 	bl	8004f34 <HAL_RCCEx_GetPeriphCLKFreq>
 80064e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e06a      	b.n	80065da <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	4a36      	ldr	r2, [pc, #216]	; (80065e4 <HAL_SD_InitCard+0x11c>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	091b      	lsrs	r3, r3, #4
 8006510:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681c      	ldr	r4, [r3, #0]
 8006516:	466a      	mov	r2, sp
 8006518:	f107 0318 	add.w	r3, r7, #24
 800651c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006520:	e882 0003 	stmia.w	r2, {r0, r1}
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800652a:	4620      	mov	r0, r4
 800652c:	f002 fba2 	bl	8008c74 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f002 fbe5 	bl	8008d04 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006546:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <HAL_SD_InitCard+0x120>)
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	3301      	adds	r3, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f7fb f947 	bl	80017e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 ffcc 	bl	80074f4 <SD_PowerON>
 800655c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e02e      	b.n	80065da <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fefd 	bl	800737c <SD_InitCard>
 8006582:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e01b      	b.n	80065da <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065aa:	4618      	mov	r0, r3
 80065ac:	f002 fc40 	bl	8008e30 <SDMMC_CmdBlockLength>
 80065b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00f      	beq.n	80065d8 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <HAL_SD_InitCard+0x124>)
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	372c      	adds	r7, #44	; 0x2c
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd90      	pop	{r4, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	014f8b59 	.word	0x014f8b59
 80065e8:	00012110 	.word	0x00012110
 80065ec:	1fe00fff 	.word	0x1fe00fff

080065f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	; 0x30
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e08d      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 8086 	bne.w	8006732 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800662c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	441a      	add	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006636:	429a      	cmp	r2, r3
 8006638:	d907      	bls.n	800664a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e074      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2203      	movs	r2, #3
 800664e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	025a      	lsls	r2, r3, #9
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	2b01      	cmp	r3, #1
 800666e:	d002      	beq.n	8006676 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	025b      	lsls	r3, r3, #9
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295
 800667a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	025b      	lsls	r3, r3, #9
 8006680:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006682:	2390      	movs	r3, #144	; 0x90
 8006684:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006686:	2302      	movs	r3, #2
 8006688:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800668a:	2300      	movs	r3, #0
 800668c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f107 0210 	add.w	r2, r7, #16
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f002 fb9b 	bl	8008dd8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d90a      	bls.n	80066de <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2282      	movs	r2, #130	; 0x82
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d4:	4618      	mov	r0, r3
 80066d6:	f002 fbf1 	bl	8008ebc <SDMMC_CmdReadMultiBlock>
 80066da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80066dc:	e009      	b.n	80066f2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2281      	movs	r2, #129	; 0x81
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 fbc3 	bl	8008e76 <SDMMC_CmdReadSingleBlock>
 80066f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a0f      	ldr	r2, [pc, #60]	; (800673c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	431a      	orrs	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e00a      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800672c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	e000      	b.n	8006734 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006732:	2302      	movs	r3, #2
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3730      	adds	r7, #48	; 0x30
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	1fe00fff 	.word	0x1fe00fff

08006740 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d107      	bne.n	8006768 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e08d      	b.n	8006884 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 8086 	bne.w	8006882 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006786:	429a      	cmp	r2, r3
 8006788:	d907      	bls.n	800679a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e074      	b.n	8006884 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2203      	movs	r2, #3
 800679e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	025a      	lsls	r2, r3, #9
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d002      	beq.n	80067c6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	025b      	lsls	r3, r3, #9
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067c6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	025b      	lsls	r3, r3, #9
 80067d0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067d2:	2390      	movs	r3, #144	; 0x90
 80067d4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067da:	2300      	movs	r3, #0
 80067dc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80067de:	2300      	movs	r3, #0
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f107 0210 	add.w	r2, r7, #16
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 faf3 	bl	8008dd8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006800:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2201      	movs	r2, #1
 8006810:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d90a      	bls.n	800682e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	22a0      	movs	r2, #160	; 0xa0
 800681c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006824:	4618      	mov	r0, r3
 8006826:	f002 fb8f 	bl	8008f48 <SDMMC_CmdWriteMultiBlock>
 800682a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800682c:	e009      	b.n	8006842 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2290      	movs	r2, #144	; 0x90
 8006832:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fb61 	bl	8008f02 <SDMMC_CmdWriteSingleBlock>
 8006840:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d012      	beq.n	800686e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a0f      	ldr	r2, [pc, #60]	; (800688c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	431a      	orrs	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e00a      	b.n	8006884 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800687c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e000      	b.n	8006884 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
  }
}
 8006884:	4618      	mov	r0, r3
 8006886:	3730      	adds	r7, #48	; 0x30
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	1fe00fff 	.word	0x1fe00fff

08006890 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_SD_IRQHandler+0x2e>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 f904 	bl	8007ac4 <SD_Read_IT>
 80068bc:	e19a      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80ac 	beq.w	8006a26 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4b9d      	ldr	r3, [pc, #628]	; (8006b58 <HAL_SD_IRQHandler+0x2c8>)
 80068e4:	400b      	ands	r3, r1
 80068e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006906:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d038      	beq.n	8006984 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <HAL_SD_IRQHandler+0x96>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f002 fb30 	bl	8008f90 <SDMMC_CmdStopTransfer>
 8006930:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f959 	bl	8006bfc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a83      	ldr	r2, [pc, #524]	; (8006b5c <HAL_SD_IRQHandler+0x2cc>)
 8006950:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <HAL_SD_IRQHandler+0xe4>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 ffe3 	bl	8009940 <HAL_SD_RxCpltCallback>
 800697a:	e13b      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 ffd5 	bl	800992c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006982:	e137      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8132 	beq.w	8006bf4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2200      	movs	r2, #0
 8006996:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2200      	movs	r2, #0
 800699e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2200      	movs	r2, #0
 80069a6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <HAL_SD_IRQHandler+0x12c>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d011      	beq.n	80069e0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 fae5 	bl	8008f90 <SDMMC_CmdStopTransfer>
 80069c6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f90e 	bl	8006bfc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_SD_IRQHandler+0x172>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 ff92 	bl	800992c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <HAL_SD_IRQHandler+0x18e>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80eb 	beq.w	8006bf4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f002 ff8e 	bl	8009940 <HAL_SD_RxCpltCallback>
}
 8006a24:	e0e6      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_SD_IRQHandler+0x1b6>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 f886 	bl	8007b50 <SD_Write_IT>
 8006a44:	e0d6      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a2 	beq.w	8006b9a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	f043 0202 	orr.w	r2, r3, #2
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a82:	f043 0208 	orr.w	r2, r3, #8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	f043 0220 	orr.w	r2, r3, #32
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	f043 0210 	orr.w	r2, r3, #16
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <HAL_SD_IRQHandler+0x2cc>)
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b04:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 fa40 	bl	8008f90 <SDMMC_CmdStopTransfer>
 8006b10:	4602      	mov	r2, r0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b2a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f854 	bl	8006bfc <HAL_SD_ErrorCallback>
}
 8006b54:	e04e      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
 8006b56:	bf00      	nop
 8006b58:	ffff3ec5 	.word	0xffff3ec5
 8006b5c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d044      	beq.n	8006bf4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d040      	beq.n	8006bf4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b80:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f832 	bl	8006bfc <HAL_SD_ErrorCallback>
}
 8006b98:	e02c      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d025      	beq.n	8006bf4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 f828 	bl	8007c20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006bd0:	e010      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 f810 	bl	8007bf8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006bd8:	e00c      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f811 	bl	8007c0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006bea:	e003      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fff9 	bl	8007be4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006bf2:	e7ff      	b.n	8006bf4 <HAL_SD_IRQHandler+0x364>
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1e:	0f9b      	lsrs	r3, r3, #30
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2a:	0e9b      	lsrs	r3, r3, #26
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c70:	0d1b      	lsrs	r3, r3, #20
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8e:	0bdb      	lsrs	r3, r3, #15
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca0:	0b9b      	lsrs	r3, r3, #14
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb2:	0b5b      	lsrs	r3, r3, #13
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc4:	0b1b      	lsrs	r3, r3, #12
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d163      	bne.n	8006da8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	009a      	lsls	r2, r3, #2
 8006ce6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006cea:	4013      	ands	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006cf0:	0f92      	lsrs	r2, r2, #30
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cfc:	0edb      	lsrs	r3, r3, #27
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d0e:	0e1b      	lsrs	r3, r3, #24
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d20:	0d5b      	lsrs	r3, r3, #21
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d32:	0c9b      	lsrs	r3, r3, #18
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d44:	0bdb      	lsrs	r3, r3, #15
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	7e1b      	ldrb	r3, [r3, #24]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	3302      	adds	r3, #2
 8006d68:	2201      	movs	r2, #1
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d72:	fb02 f203 	mul.w	r2, r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	7a1b      	ldrb	r3, [r3, #8]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	2201      	movs	r2, #1
 8006d86:	409a      	lsls	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006d94:	0a52      	lsrs	r2, r2, #9
 8006d96:	fb02 f203 	mul.w	r2, r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da4:	655a      	str	r2, [r3, #84]	; 0x54
 8006da6:	e031      	b.n	8006e0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d11d      	bne.n	8006dec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbe:	0c1b      	lsrs	r3, r3, #16
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	029a      	lsls	r2, r3, #10
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54
 8006dea:	e00f      	b.n	8006e0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a58      	ldr	r2, [pc, #352]	; (8006f54 <HAL_SD_GetCardCSD+0x344>)
 8006df2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e09d      	b.n	8006f48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	0b9b      	lsrs	r3, r3, #14
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e22:	09db      	lsrs	r3, r3, #7
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e44:	0fdb      	lsrs	r3, r3, #31
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e50:	0f5b      	lsrs	r3, r3, #29
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e62:	0e9b      	lsrs	r3, r3, #26
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e74:	0d9b      	lsrs	r3, r3, #22
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e86:	0d5b      	lsrs	r3, r3, #21
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea2:	0c1b      	lsrs	r3, r3, #16
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb6:	0bdb      	lsrs	r3, r3, #15
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eca:	0b9b      	lsrs	r3, r3, #14
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ede:	0b5b      	lsrs	r3, r3, #13
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef2:	0b1b      	lsrs	r3, r3, #12
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f06:	0a9b      	lsrs	r3, r3, #10
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	1fe00fff 	.word	0x1fe00fff

08006f58 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b094      	sub	sp, #80	; 0x50
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006f68:	f107 0308 	add.w	r3, r7, #8
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fb4a 	bl	8007608 <SD_SendSDStatus>
 8006f74:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d011      	beq.n	8006fa0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a4f      	ldr	r2, [pc, #316]	; (80070c0 <HAL_SD_GetCardStatus+0x168>)
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006f9e:	e070      	b.n	8007082 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	0e1b      	lsrs	r3, r3, #24
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	061a      	lsls	r2, r3, #24
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ff0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	b2da      	uxtb	r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	0d1b      	lsrs	r3, r3, #20
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	b2da      	uxtb	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	b29b      	uxth	r3, r3
 8007024:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007028:	b29a      	uxth	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	b29b      	uxth	r3, r3
 800702e:	b2db      	uxtb	r3, r3
 8007030:	b29b      	uxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b29a      	uxth	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	0a9b      	lsrs	r3, r3, #10
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007044:	b2da      	uxtb	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	b2da      	uxtb	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	091b      	lsrs	r3, r3, #4
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 030f 	and.w	r3, r3, #15
 8007064:	b2da      	uxtb	r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	b2da      	uxtb	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	0e1b      	lsrs	r3, r3, #24
 800707c:	b2da      	uxtb	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800708a:	4618      	mov	r0, r3
 800708c:	f001 fed0 	bl	8008e30 <SDMMC_CmdBlockLength>
 8007090:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a08      	ldr	r2, [pc, #32]	; (80070c0 <HAL_SD_GetCardStatus+0x168>)
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80070b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3750      	adds	r7, #80	; 0x50
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	1fe00fff 	.word	0x1fe00fff

080070c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b08d      	sub	sp, #52	; 0x34
 8007120:	af02      	add	r7, sp, #8
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2203      	movs	r2, #3
 8007130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	2b03      	cmp	r3, #3
 800713a:	d02e      	beq.n	800719a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007142:	d106      	bne.n	8007152 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007148:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	635a      	str	r2, [r3, #52]	; 0x34
 8007150:	e029      	b.n	80071a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007158:	d10a      	bne.n	8007170 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb4c 	bl	80077f8 <SD_WideBus_Enable>
 8007160:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	635a      	str	r2, [r3, #52]	; 0x34
 800716e:	e01a      	b.n	80071a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb89 	bl	800788e <SD_WideBus_Disable>
 800717c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	635a      	str	r2, [r3, #52]	; 0x34
 800718a:	e00c      	b.n	80071a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	635a      	str	r2, [r3, #52]	; 0x34
 8007198:	e005      	b.n	80071a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a5e      	ldr	r2, [pc, #376]	; (800732c <HAL_SD_ConfigWideBusOperation+0x210>)
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071bc:	e094      	b.n	80072e8 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80071be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80071c2:	f7fd feb7 	bl	8004f34 <HAL_RCCEx_GetPeriphCLKFreq>
 80071c6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8083 	beq.w	80072d6 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4950      	ldr	r1, [pc, #320]	; (8007330 <HAL_SD_ConfigWideBusOperation+0x214>)
 80071ee:	fba1 1303 	umull	r1, r3, r1, r3
 80071f2:	0e1b      	lsrs	r3, r3, #24
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d303      	bcc.n	8007200 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	e05a      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007208:	d103      	bne.n	8007212 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	e051      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800721a:	d126      	bne.n	800726a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10e      	bne.n	8007242 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4a43      	ldr	r2, [pc, #268]	; (8007334 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d906      	bls.n	800723a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	4a40      	ldr	r2, [pc, #256]	; (8007330 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	0e5b      	lsrs	r3, r3, #25
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	e03d      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e039      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	fbb2 f3f3 	udiv	r3, r2, r3
 800724e:	4a39      	ldr	r2, [pc, #228]	; (8007334 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d906      	bls.n	8007262 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4a36      	ldr	r2, [pc, #216]	; (8007330 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	0e5b      	lsrs	r3, r3, #25
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e029      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	e025      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10e      	bne.n	8007290 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4a30      	ldr	r2, [pc, #192]	; (8007338 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d906      	bls.n	8007288 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4a2c      	ldr	r2, [pc, #176]	; (8007330 <HAL_SD_ConfigWideBusOperation+0x214>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	0e1b      	lsrs	r3, r3, #24
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	e016      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e012      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	4a26      	ldr	r2, [pc, #152]	; (8007338 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d906      	bls.n	80072b0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4a22      	ldr	r2, [pc, #136]	; (8007330 <HAL_SD_ConfigWideBusOperation+0x214>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	0e1b      	lsrs	r3, r3, #24
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e002      	b.n	80072b6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681c      	ldr	r4, [r3, #0]
 80072ba:	466a      	mov	r2, sp
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80072c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072ce:	4620      	mov	r0, r4
 80072d0:	f001 fcd0 	bl	8008c74 <SDMMC_Init>
 80072d4:	e008      	b.n	80072e8 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fd9d 	bl	8008e30 <SDMMC_CmdBlockLength>
 80072f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a0a      	ldr	r2, [pc, #40]	; (800732c <HAL_SD_ConfigWideBusOperation+0x210>)
 8007304:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007324:	4618      	mov	r0, r3
 8007326:	372c      	adds	r7, #44	; 0x2c
 8007328:	46bd      	mov	sp, r7
 800732a:	bd90      	pop	{r4, r7, pc}
 800732c:	1fe00fff 	.word	0x1fe00fff
 8007330:	55e63b89 	.word	0x55e63b89
 8007334:	02faf080 	.word	0x02faf080
 8007338:	017d7840 	.word	0x017d7840

0800733c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007348:	f107 030c 	add.w	r3, r7, #12
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa2a 	bl	80077a8 <SD_SendStatus>
 8007354:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	0a5b      	lsrs	r3, r3, #9
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007372:	693b      	ldr	r3, [r7, #16]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b090      	sub	sp, #64	; 0x40
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007384:	2301      	movs	r3, #1
 8007386:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f001 fcca 	bl	8008d26 <SDMMC_GetPowerState>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007398:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800739c:	e0a5      	b.n	80074ea <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d02e      	beq.n	8007404 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 ff15 	bl	80091da <SDMMC_CmdSendCID>
 80073b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80073b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <SD_InitCard+0x40>
    {
      return errorstate;
 80073b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ba:	e096      	b.n	80074ea <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fcf5 	bl	8008db2 <SDMMC_GetResponse>
 80073c8:	4602      	mov	r2, r0
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2104      	movs	r1, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fcec 	bl	8008db2 <SDMMC_GetResponse>
 80073da:	4602      	mov	r2, r0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2108      	movs	r1, #8
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fce3 	bl	8008db2 <SDMMC_GetResponse>
 80073ec:	4602      	mov	r2, r0
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	210c      	movs	r1, #12
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 fcda 	bl	8008db2 <SDMMC_GetResponse>
 80073fe:	4602      	mov	r2, r0
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	2b03      	cmp	r3, #3
 800740a:	d00d      	beq.n	8007428 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f107 020e 	add.w	r2, r7, #14
 8007414:	4611      	mov	r1, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f001 ff1e 	bl	8009258 <SDMMC_CmdSetRelAdd>
 800741c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <SD_InitCard+0xac>
    {
      return errorstate;
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	e060      	b.n	80074ea <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	2b03      	cmp	r3, #3
 800742e:	d036      	beq.n	800749e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007430:	89fb      	ldrh	r3, [r7, #14]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f001 fee7 	bl	8009218 <SDMMC_CmdSendCSD>
 800744a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800744c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <SD_InitCard+0xda>
    {
      return errorstate;
 8007452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007454:	e049      	b.n	80074ea <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fca8 	bl	8008db2 <SDMMC_GetResponse>
 8007462:	4602      	mov	r2, r0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2104      	movs	r1, #4
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fc9f 	bl	8008db2 <SDMMC_GetResponse>
 8007474:	4602      	mov	r2, r0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2108      	movs	r1, #8
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fc96 	bl	8008db2 <SDMMC_GetResponse>
 8007486:	4602      	mov	r2, r0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	210c      	movs	r1, #12
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fc8d 	bl	8008db2 <SDMMC_GetResponse>
 8007498:	4602      	mov	r2, r0
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2104      	movs	r1, #4
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fc84 	bl	8008db2 <SDMMC_GetResponse>
 80074aa:	4603      	mov	r3, r0
 80074ac:	0d1a      	lsrs	r2, r3, #20
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80074b2:	f107 0310 	add.w	r3, r7, #16
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff fba9 	bl	8006c10 <HAL_SD_GetCardCSD>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074c8:	e00f      	b.n	80074ea <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f001 fd96 	bl	8009008 <SDMMC_CmdSelDesel>
 80074dc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 80074de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <SD_InitCard+0x16c>
  {
    return errorstate;
 80074e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e6:	e000      	b.n	80074ea <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3740      	adds	r7, #64	; 0x40
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f001 fd9e 	bl	800904e <SDMMC_CmdGoIdleState>
 8007512:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <SD_PowerON+0x2a>
  {
    return errorstate;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	e06e      	b.n	80075fc <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f001 fdb1 	bl	800908a <SDMMC_CmdOperCond>
 8007528:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00d      	beq.n	800754c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f001 fd87 	bl	800904e <SDMMC_CmdGoIdleState>
 8007540:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	e057      	b.n	80075fc <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d137      	bne.n	80075ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fdb2 	bl	80090ca <SDMMC_CmdAppCommand>
 8007566:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d02d      	beq.n	80075ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800756e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007572:	e043      	b.n	80075fc <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f001 fda5 	bl	80090ca <SDMMC_CmdAppCommand>
 8007580:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <SD_PowerON+0x98>
    {
      return errorstate;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	e037      	b.n	80075fc <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	491c      	ldr	r1, [pc, #112]	; (8007604 <SD_PowerON+0x110>)
 8007592:	4618      	mov	r0, r3
 8007594:	f001 fdbc 	bl	8009110 <SDMMC_CmdAppOperCommand>
 8007598:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075a4:	e02a      	b.n	80075fc <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fc00 	bl	8008db2 <SDMMC_GetResponse>
 80075b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	0fdb      	lsrs	r3, r3, #31
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <SD_PowerON+0xcc>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <SD_PowerON+0xce>
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]

    count++;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d802      	bhi.n	80075da <SD_PowerON+0xe6>
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0cc      	beq.n	8007574 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d902      	bls.n	80075ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80075e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075e8:	e008      	b.n	80075fc <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	c1100000 	.word	0xc1100000

08007608 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08c      	sub	sp, #48	; 0x30
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007612:	f7fa f8db 	bl	80017cc <HAL_GetTick>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f001 fbc5 	bl	8008db2 <SDMMC_GetResponse>
 8007628:	4603      	mov	r3, r0
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007632:	d102      	bne.n	800763a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007638:	e0b0      	b.n	800779c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2140      	movs	r1, #64	; 0x40
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fbf5 	bl	8008e30 <SDMMC_CmdBlockLength>
 8007646:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	e0a0      	b.n	800779c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f001 fd2f 	bl	80090ca <SDMMC_CmdAppCommand>
 800766c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	e08d      	b.n	800779c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007686:	2340      	movs	r3, #64	; 0x40
 8007688:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800768a:	2360      	movs	r3, #96	; 0x60
 800768c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800768e:	2302      	movs	r3, #2
 8007690:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007692:	2300      	movs	r3, #0
 8007694:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007696:	2301      	movs	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f107 0208 	add.w	r2, r7, #8
 80076a2:	4611      	mov	r1, r2
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fb97 	bl	8008dd8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 fe17 	bl	80092e2 <SDMMC_CmdStatusRegister>
 80076b4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02b      	beq.n	8007714 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	e069      	b.n	800779c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d013      	beq.n	80076fe <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076da:	e00d      	b.n	80076f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 faf1 	bl	8008cc8 <SDMMC_ReadFIFO>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	601a      	str	r2, [r3, #0]
        pData++;
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	3304      	adds	r3, #4
 80076f0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	3301      	adds	r3, #1
 80076f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	2b07      	cmp	r3, #7
 80076fc:	d9ee      	bls.n	80076dc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076fe:	f7fa f865 	bl	80017cc <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770c:	d102      	bne.n	8007714 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800770e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007712:	e043      	b.n	800779c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0d2      	beq.n	80076c8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007730:	2308      	movs	r3, #8
 8007732:	e033      	b.n	800779c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007742:	2302      	movs	r3, #2
 8007744:	e02a      	b.n	800779c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d017      	beq.n	8007784 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007754:	2320      	movs	r3, #32
 8007756:	e021      	b.n	800779c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fab3 	bl	8008cc8 <SDMMC_ReadFIFO>
 8007762:	4602      	mov	r2, r0
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	601a      	str	r2, [r3, #0]
    pData++;
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	3304      	adds	r3, #4
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800776e:	f7fa f82d 	bl	80017cc <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777c:	d102      	bne.n	8007784 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800777e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007782:	e00b      	b.n	800779c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e2      	bne.n	8007758 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a03      	ldr	r2, [pc, #12]	; (80077a4 <SD_SendSDStatus+0x19c>)
 8007798:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3730      	adds	r7, #48	; 0x30
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	18000f3a 	.word	0x18000f3a

080077a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80077b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077bc:	e018      	b.n	80077f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f001 fd66 	bl	800929c <SDMMC_CmdSendStatus>
 80077d0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e009      	b.n	80077f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 fae5 	bl	8008db2 <SDMMC_GetResponse>
 80077e8:	4602      	mov	r2, r0
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f001 facf 	bl	8008db2 <SDMMC_GetResponse>
 8007814:	4603      	mov	r3, r0
 8007816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800781e:	d102      	bne.n	8007826 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007824:	e02f      	b.n	8007886 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007826:	f107 030c 	add.w	r3, r7, #12
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f879 	bl	8007924 <SD_FindSCR>
 8007832:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	e023      	b.n	8007886 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01c      	beq.n	8007882 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f001 fc38 	bl	80090ca <SDMMC_CmdAppCommand>
 800785a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	e00f      	b.n	8007886 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2102      	movs	r1, #2
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fc6f 	bl	8009150 <SDMMC_CmdBusWidth>
 8007872:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	e003      	b.n	8007886 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800787e:	2300      	movs	r3, #0
 8007880:	e001      	b.n	8007886 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007882:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	2300      	movs	r3, #0
 800789c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 fa84 	bl	8008db2 <SDMMC_GetResponse>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078b4:	d102      	bne.n	80078bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80078b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078ba:	e02f      	b.n	800791c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f82e 	bl	8007924 <SD_FindSCR>
 80078c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	e023      	b.n	800791c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01c      	beq.n	8007918 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	041b      	lsls	r3, r3, #16
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f001 fbed 	bl	80090ca <SDMMC_CmdAppCommand>
 80078f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	e00f      	b.n	800791c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2100      	movs	r1, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f001 fc24 	bl	8009150 <SDMMC_CmdBusWidth>
 8007908:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	e003      	b.n	800791c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007914:	2300      	movs	r3, #0
 8007916:	e001      	b.n	800791c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08e      	sub	sp, #56	; 0x38
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800792e:	f7f9 ff4d 	bl	80017cc <HAL_GetTick>
 8007932:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007938:	2300      	movs	r3, #0
 800793a:	60bb      	str	r3, [r7, #8]
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2108      	movs	r1, #8
 800794a:	4618      	mov	r0, r3
 800794c:	f001 fa70 	bl	8008e30 <SDMMC_CmdBlockLength>
 8007950:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	e0ad      	b.n	8007ab8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f001 fbae 	bl	80090ca <SDMMC_CmdAppCommand>
 800796e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	e09e      	b.n	8007ab8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007980:	2308      	movs	r3, #8
 8007982:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007984:	2330      	movs	r3, #48	; 0x30
 8007986:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007988:	2302      	movs	r3, #2
 800798a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800798c:	2300      	movs	r3, #0
 800798e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007990:	2301      	movs	r3, #1
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f107 0210 	add.w	r2, r7, #16
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fa1a 	bl	8008dd8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fbf4 	bl	8009196 <SDMMC_CmdSendSCR>
 80079ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d027      	beq.n	8007a06 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	e07e      	b.n	8007ab8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d113      	bne.n	80079f0 <SD_FindSCR+0xcc>
 80079c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 f978 	bl	8008cc8 <SDMMC_ReadFIFO>
 80079d8:	4603      	mov	r3, r0
 80079da:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 f971 	bl	8008cc8 <SDMMC_ReadFIFO>
 80079e6:	4603      	mov	r3, r0
 80079e8:	60fb      	str	r3, [r7, #12]
      index++;
 80079ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ec:	3301      	adds	r3, #1
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079f0:	f7f9 feec 	bl	80017cc <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d102      	bne.n	8007a06 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a04:	e058      	b.n	8007ab8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a0c:	f240 532a 	movw	r3, #1322	; 0x52a
 8007a10:	4013      	ands	r3, r2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0d1      	beq.n	80079ba <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	e043      	b.n	8007ab8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2202      	movs	r2, #2
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a46:	2302      	movs	r3, #2
 8007a48:	e036      	b.n	8007ab8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007a60:	2320      	movs	r3, #32
 8007a62:	e029      	b.n	8007ab8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <SD_FindSCR+0x19c>)
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	061a      	lsls	r2, r3, #24
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	0a1b      	lsrs	r3, r3, #8
 8007a7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007a82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	0e1b      	lsrs	r3, r3, #24
 8007a88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	601a      	str	r2, [r3, #0]
    scr++;
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	3304      	adds	r3, #4
 8007a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	061a      	lsls	r2, r3, #24
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007aa0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007aaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	0e1b      	lsrs	r3, r3, #24
 8007ab0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3738      	adds	r7, #56	; 0x38
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	18000f3a 	.word	0x18000f3a

08007ac4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	2b1f      	cmp	r3, #31
 8007ad8:	d936      	bls.n	8007b48 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e027      	b.n	8007b30 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f8ef 	bl	8008cc8 <SDMMC_ReadFIFO>
 8007aea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	3301      	adds	r3, #1
 8007af8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	0a1b      	lsrs	r3, r3, #8
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	3301      	adds	r3, #1
 8007b08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	0c1b      	lsrs	r3, r3, #16
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	3301      	adds	r3, #1
 8007b18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	0e1b      	lsrs	r3, r3, #24
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3301      	adds	r3, #1
 8007b28:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2b07      	cmp	r3, #7
 8007b34:	d9d4      	bls.n	8007ae0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f1a3 0220 	sub.w	r2, r3, #32
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	2b1f      	cmp	r3, #31
 8007b64:	d93a      	bls.n	8007bdc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	e02b      	b.n	8007bc4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	021a      	lsls	r2, r3, #8
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3301      	adds	r3, #1
 8007b88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	041a      	lsls	r2, r3, #16
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	061a      	lsls	r2, r3, #24
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	3301      	adds	r3, #1
 8007bac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f107 020c 	add.w	r2, r7, #12
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f892 	bl	8008ce2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b07      	cmp	r3, #7
 8007bc8:	d9d0      	bls.n	8007b6c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	f1a3 0220 	sub.w	r2, r3, #32
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	621a      	str	r2, [r3, #32]
  }
}
 8007bdc:	bf00      	nop
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e042      	b.n	8007ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d106      	bne.n	8007c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7f9 fb99 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2224      	movs	r2, #36	; 0x24
 8007c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f82c 	bl	8007cd4 <UART_SetConfig>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e022      	b.n	8007ccc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fd80 	bl	8008794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fe07 	bl	80088d8 <UART_CheckIdleState>
 8007cca:	4603      	mov	r3, r0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	b5b0      	push	{r4, r5, r7, lr}
 8007cd6:	b08e      	sub	sp, #56	; 0x38
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4bbf      	ldr	r3, [pc, #764]	; (8008000 <UART_SetConfig+0x32c>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6812      	ldr	r2, [r2, #0]
 8007d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4ab5      	ldr	r2, [pc, #724]	; (8008004 <UART_SetConfig+0x330>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d004      	beq.n	8007d3e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	4bb0      	ldr	r3, [pc, #704]	; (8008008 <UART_SetConfig+0x334>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6812      	ldr	r2, [r2, #0]
 8007d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d4e:	430b      	orrs	r3, r1
 8007d50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	f023 010f 	bic.w	r1, r3, #15
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4aa7      	ldr	r2, [pc, #668]	; (800800c <UART_SetConfig+0x338>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d176      	bne.n	8007e60 <UART_SetConfig+0x18c>
 8007d72:	4ba7      	ldr	r3, [pc, #668]	; (8008010 <UART_SetConfig+0x33c>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d7a:	2b28      	cmp	r3, #40	; 0x28
 8007d7c:	d86c      	bhi.n	8007e58 <UART_SetConfig+0x184>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <UART_SetConfig+0xb0>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007e29 	.word	0x08007e29
 8007d88:	08007e59 	.word	0x08007e59
 8007d8c:	08007e59 	.word	0x08007e59
 8007d90:	08007e59 	.word	0x08007e59
 8007d94:	08007e59 	.word	0x08007e59
 8007d98:	08007e59 	.word	0x08007e59
 8007d9c:	08007e59 	.word	0x08007e59
 8007da0:	08007e59 	.word	0x08007e59
 8007da4:	08007e31 	.word	0x08007e31
 8007da8:	08007e59 	.word	0x08007e59
 8007dac:	08007e59 	.word	0x08007e59
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e59 	.word	0x08007e59
 8007db8:	08007e59 	.word	0x08007e59
 8007dbc:	08007e59 	.word	0x08007e59
 8007dc0:	08007e59 	.word	0x08007e59
 8007dc4:	08007e39 	.word	0x08007e39
 8007dc8:	08007e59 	.word	0x08007e59
 8007dcc:	08007e59 	.word	0x08007e59
 8007dd0:	08007e59 	.word	0x08007e59
 8007dd4:	08007e59 	.word	0x08007e59
 8007dd8:	08007e59 	.word	0x08007e59
 8007ddc:	08007e59 	.word	0x08007e59
 8007de0:	08007e59 	.word	0x08007e59
 8007de4:	08007e41 	.word	0x08007e41
 8007de8:	08007e59 	.word	0x08007e59
 8007dec:	08007e59 	.word	0x08007e59
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007e59 	.word	0x08007e59
 8007df8:	08007e59 	.word	0x08007e59
 8007dfc:	08007e59 	.word	0x08007e59
 8007e00:	08007e59 	.word	0x08007e59
 8007e04:	08007e49 	.word	0x08007e49
 8007e08:	08007e59 	.word	0x08007e59
 8007e0c:	08007e59 	.word	0x08007e59
 8007e10:	08007e59 	.word	0x08007e59
 8007e14:	08007e59 	.word	0x08007e59
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e59 	.word	0x08007e59
 8007e20:	08007e59 	.word	0x08007e59
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e2e:	e222      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e30:	2304      	movs	r3, #4
 8007e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e36:	e21e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3e:	e21a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e46:	e216      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e48:	2320      	movs	r3, #32
 8007e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4e:	e212      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e50:	2340      	movs	r3, #64	; 0x40
 8007e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e56:	e20e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e58:	2380      	movs	r3, #128	; 0x80
 8007e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5e:	e20a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6b      	ldr	r2, [pc, #428]	; (8008014 <UART_SetConfig+0x340>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d130      	bne.n	8007ecc <UART_SetConfig+0x1f8>
 8007e6a:	4b69      	ldr	r3, [pc, #420]	; (8008010 <UART_SetConfig+0x33c>)
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	2b05      	cmp	r3, #5
 8007e74:	d826      	bhi.n	8007ec4 <UART_SetConfig+0x1f0>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <UART_SetConfig+0x1a8>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007e95 	.word	0x08007e95
 8007e80:	08007e9d 	.word	0x08007e9d
 8007e84:	08007ea5 	.word	0x08007ea5
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007eb5 	.word	0x08007eb5
 8007e90:	08007ebd 	.word	0x08007ebd
 8007e94:	2300      	movs	r3, #0
 8007e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9a:	e1ec      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007e9c:	2304      	movs	r3, #4
 8007e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea2:	e1e8      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007ea4:	2308      	movs	r3, #8
 8007ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eaa:	e1e4      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007eac:	2310      	movs	r3, #16
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e1e0      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007eb4:	2320      	movs	r3, #32
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e1dc      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007ebc:	2340      	movs	r3, #64	; 0x40
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e1d8      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007ec4:	2380      	movs	r3, #128	; 0x80
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eca:	e1d4      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a51      	ldr	r2, [pc, #324]	; (8008018 <UART_SetConfig+0x344>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d130      	bne.n	8007f38 <UART_SetConfig+0x264>
 8007ed6:	4b4e      	ldr	r3, [pc, #312]	; (8008010 <UART_SetConfig+0x33c>)
 8007ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d826      	bhi.n	8007f30 <UART_SetConfig+0x25c>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <UART_SetConfig+0x214>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f01 	.word	0x08007f01
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	08007f11 	.word	0x08007f11
 8007ef4:	08007f19 	.word	0x08007f19
 8007ef8:	08007f21 	.word	0x08007f21
 8007efc:	08007f29 	.word	0x08007f29
 8007f00:	2300      	movs	r3, #0
 8007f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f06:	e1b6      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0e:	e1b2      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f10:	2308      	movs	r3, #8
 8007f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f16:	e1ae      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1e:	e1aa      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f20:	2320      	movs	r3, #32
 8007f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f26:	e1a6      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f28:	2340      	movs	r3, #64	; 0x40
 8007f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2e:	e1a2      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f30:	2380      	movs	r3, #128	; 0x80
 8007f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f36:	e19e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a37      	ldr	r2, [pc, #220]	; (800801c <UART_SetConfig+0x348>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d130      	bne.n	8007fa4 <UART_SetConfig+0x2d0>
 8007f42:	4b33      	ldr	r3, [pc, #204]	; (8008010 <UART_SetConfig+0x33c>)
 8007f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d826      	bhi.n	8007f9c <UART_SetConfig+0x2c8>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <UART_SetConfig+0x280>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f6d 	.word	0x08007f6d
 8007f58:	08007f75 	.word	0x08007f75
 8007f5c:	08007f7d 	.word	0x08007f7d
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f8d 	.word	0x08007f8d
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f72:	e180      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f74:	2304      	movs	r3, #4
 8007f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7a:	e17c      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f7c:	2308      	movs	r3, #8
 8007f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f82:	e178      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f84:	2310      	movs	r3, #16
 8007f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f8a:	e174      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f92:	e170      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f9a:	e16c      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa2:	e168      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <UART_SetConfig+0x34c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d142      	bne.n	8008034 <UART_SetConfig+0x360>
 8007fae:	4b18      	ldr	r3, [pc, #96]	; (8008010 <UART_SetConfig+0x33c>)
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	d838      	bhi.n	800802c <UART_SetConfig+0x358>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x2ec>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08007fe9 	.word	0x08007fe9
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff9 	.word	0x08007ff9
 8007fd4:	08008025 	.word	0x08008025
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fde:	e14a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe6:	e146      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fee:	e142      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff6:	e13e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ffe:	e13a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008000:	cfff69f3 	.word	0xcfff69f3
 8008004:	58000c00 	.word	0x58000c00
 8008008:	11fff4ff 	.word	0x11fff4ff
 800800c:	40011000 	.word	0x40011000
 8008010:	58024400 	.word	0x58024400
 8008014:	40004400 	.word	0x40004400
 8008018:	40004800 	.word	0x40004800
 800801c:	40004c00 	.word	0x40004c00
 8008020:	40005000 	.word	0x40005000
 8008024:	2340      	movs	r3, #64	; 0x40
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802a:	e124      	b.n	8008276 <UART_SetConfig+0x5a2>
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008032:	e120      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4acc      	ldr	r2, [pc, #816]	; (800836c <UART_SetConfig+0x698>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d176      	bne.n	800812c <UART_SetConfig+0x458>
 800803e:	4bcc      	ldr	r3, [pc, #816]	; (8008370 <UART_SetConfig+0x69c>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008046:	2b28      	cmp	r3, #40	; 0x28
 8008048:	d86c      	bhi.n	8008124 <UART_SetConfig+0x450>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x37c>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	080080f5 	.word	0x080080f5
 8008054:	08008125 	.word	0x08008125
 8008058:	08008125 	.word	0x08008125
 800805c:	08008125 	.word	0x08008125
 8008060:	08008125 	.word	0x08008125
 8008064:	08008125 	.word	0x08008125
 8008068:	08008125 	.word	0x08008125
 800806c:	08008125 	.word	0x08008125
 8008070:	080080fd 	.word	0x080080fd
 8008074:	08008125 	.word	0x08008125
 8008078:	08008125 	.word	0x08008125
 800807c:	08008125 	.word	0x08008125
 8008080:	08008125 	.word	0x08008125
 8008084:	08008125 	.word	0x08008125
 8008088:	08008125 	.word	0x08008125
 800808c:	08008125 	.word	0x08008125
 8008090:	08008105 	.word	0x08008105
 8008094:	08008125 	.word	0x08008125
 8008098:	08008125 	.word	0x08008125
 800809c:	08008125 	.word	0x08008125
 80080a0:	08008125 	.word	0x08008125
 80080a4:	08008125 	.word	0x08008125
 80080a8:	08008125 	.word	0x08008125
 80080ac:	08008125 	.word	0x08008125
 80080b0:	0800810d 	.word	0x0800810d
 80080b4:	08008125 	.word	0x08008125
 80080b8:	08008125 	.word	0x08008125
 80080bc:	08008125 	.word	0x08008125
 80080c0:	08008125 	.word	0x08008125
 80080c4:	08008125 	.word	0x08008125
 80080c8:	08008125 	.word	0x08008125
 80080cc:	08008125 	.word	0x08008125
 80080d0:	08008115 	.word	0x08008115
 80080d4:	08008125 	.word	0x08008125
 80080d8:	08008125 	.word	0x08008125
 80080dc:	08008125 	.word	0x08008125
 80080e0:	08008125 	.word	0x08008125
 80080e4:	08008125 	.word	0x08008125
 80080e8:	08008125 	.word	0x08008125
 80080ec:	08008125 	.word	0x08008125
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fa:	e0bc      	b.n	8008276 <UART_SetConfig+0x5a2>
 80080fc:	2304      	movs	r3, #4
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e0b8      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008104:	2308      	movs	r3, #8
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e0b4      	b.n	8008276 <UART_SetConfig+0x5a2>
 800810c:	2310      	movs	r3, #16
 800810e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008112:	e0b0      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008114:	2320      	movs	r3, #32
 8008116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811a:	e0ac      	b.n	8008276 <UART_SetConfig+0x5a2>
 800811c:	2340      	movs	r3, #64	; 0x40
 800811e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008122:	e0a8      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008124:	2380      	movs	r3, #128	; 0x80
 8008126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812a:	e0a4      	b.n	8008276 <UART_SetConfig+0x5a2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a90      	ldr	r2, [pc, #576]	; (8008374 <UART_SetConfig+0x6a0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d130      	bne.n	8008198 <UART_SetConfig+0x4c4>
 8008136:	4b8e      	ldr	r3, [pc, #568]	; (8008370 <UART_SetConfig+0x69c>)
 8008138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	2b05      	cmp	r3, #5
 8008140:	d826      	bhi.n	8008190 <UART_SetConfig+0x4bc>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <UART_SetConfig+0x474>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	08008161 	.word	0x08008161
 800814c:	08008169 	.word	0x08008169
 8008150:	08008171 	.word	0x08008171
 8008154:	08008179 	.word	0x08008179
 8008158:	08008181 	.word	0x08008181
 800815c:	08008189 	.word	0x08008189
 8008160:	2300      	movs	r3, #0
 8008162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008166:	e086      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008168:	2304      	movs	r3, #4
 800816a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816e:	e082      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008170:	2308      	movs	r3, #8
 8008172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008176:	e07e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008178:	2310      	movs	r3, #16
 800817a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817e:	e07a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008180:	2320      	movs	r3, #32
 8008182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008186:	e076      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800818e:	e072      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008190:	2380      	movs	r3, #128	; 0x80
 8008192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008196:	e06e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a76      	ldr	r2, [pc, #472]	; (8008378 <UART_SetConfig+0x6a4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d130      	bne.n	8008204 <UART_SetConfig+0x530>
 80081a2:	4b73      	ldr	r3, [pc, #460]	; (8008370 <UART_SetConfig+0x69c>)
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	d826      	bhi.n	80081fc <UART_SetConfig+0x528>
 80081ae:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <UART_SetConfig+0x4e0>)
 80081b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b4:	080081cd 	.word	0x080081cd
 80081b8:	080081d5 	.word	0x080081d5
 80081bc:	080081dd 	.word	0x080081dd
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	080081ed 	.word	0x080081ed
 80081c8:	080081f5 	.word	0x080081f5
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d2:	e050      	b.n	8008276 <UART_SetConfig+0x5a2>
 80081d4:	2304      	movs	r3, #4
 80081d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081da:	e04c      	b.n	8008276 <UART_SetConfig+0x5a2>
 80081dc:	2308      	movs	r3, #8
 80081de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e2:	e048      	b.n	8008276 <UART_SetConfig+0x5a2>
 80081e4:	2310      	movs	r3, #16
 80081e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ea:	e044      	b.n	8008276 <UART_SetConfig+0x5a2>
 80081ec:	2320      	movs	r3, #32
 80081ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081f2:	e040      	b.n	8008276 <UART_SetConfig+0x5a2>
 80081f4:	2340      	movs	r3, #64	; 0x40
 80081f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081fa:	e03c      	b.n	8008276 <UART_SetConfig+0x5a2>
 80081fc:	2380      	movs	r3, #128	; 0x80
 80081fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008202:	e038      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a5c      	ldr	r2, [pc, #368]	; (800837c <UART_SetConfig+0x6a8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d130      	bne.n	8008270 <UART_SetConfig+0x59c>
 800820e:	4b58      	ldr	r3, [pc, #352]	; (8008370 <UART_SetConfig+0x69c>)
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	2b05      	cmp	r3, #5
 8008218:	d826      	bhi.n	8008268 <UART_SetConfig+0x594>
 800821a:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <UART_SetConfig+0x54c>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008239 	.word	0x08008239
 8008224:	08008241 	.word	0x08008241
 8008228:	08008249 	.word	0x08008249
 800822c:	08008251 	.word	0x08008251
 8008230:	08008259 	.word	0x08008259
 8008234:	08008261 	.word	0x08008261
 8008238:	2302      	movs	r3, #2
 800823a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823e:	e01a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008246:	e016      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824e:	e012      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008256:	e00e      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008258:	2320      	movs	r3, #32
 800825a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800825e:	e00a      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008266:	e006      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008268:	2380      	movs	r3, #128	; 0x80
 800826a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800826e:	e002      	b.n	8008276 <UART_SetConfig+0x5a2>
 8008270:	2380      	movs	r3, #128	; 0x80
 8008272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a40      	ldr	r2, [pc, #256]	; (800837c <UART_SetConfig+0x6a8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	f040 80ef 	bne.w	8008460 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008282:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008286:	2b20      	cmp	r3, #32
 8008288:	dc46      	bgt.n	8008318 <UART_SetConfig+0x644>
 800828a:	2b02      	cmp	r3, #2
 800828c:	f2c0 8081 	blt.w	8008392 <UART_SetConfig+0x6be>
 8008290:	3b02      	subs	r3, #2
 8008292:	2b1e      	cmp	r3, #30
 8008294:	d87d      	bhi.n	8008392 <UART_SetConfig+0x6be>
 8008296:	a201      	add	r2, pc, #4	; (adr r2, 800829c <UART_SetConfig+0x5c8>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	0800831f 	.word	0x0800831f
 80082a0:	08008393 	.word	0x08008393
 80082a4:	08008327 	.word	0x08008327
 80082a8:	08008393 	.word	0x08008393
 80082ac:	08008393 	.word	0x08008393
 80082b0:	08008393 	.word	0x08008393
 80082b4:	08008337 	.word	0x08008337
 80082b8:	08008393 	.word	0x08008393
 80082bc:	08008393 	.word	0x08008393
 80082c0:	08008393 	.word	0x08008393
 80082c4:	08008393 	.word	0x08008393
 80082c8:	08008393 	.word	0x08008393
 80082cc:	08008393 	.word	0x08008393
 80082d0:	08008393 	.word	0x08008393
 80082d4:	08008347 	.word	0x08008347
 80082d8:	08008393 	.word	0x08008393
 80082dc:	08008393 	.word	0x08008393
 80082e0:	08008393 	.word	0x08008393
 80082e4:	08008393 	.word	0x08008393
 80082e8:	08008393 	.word	0x08008393
 80082ec:	08008393 	.word	0x08008393
 80082f0:	08008393 	.word	0x08008393
 80082f4:	08008393 	.word	0x08008393
 80082f8:	08008393 	.word	0x08008393
 80082fc:	08008393 	.word	0x08008393
 8008300:	08008393 	.word	0x08008393
 8008304:	08008393 	.word	0x08008393
 8008308:	08008393 	.word	0x08008393
 800830c:	08008393 	.word	0x08008393
 8008310:	08008393 	.word	0x08008393
 8008314:	08008385 	.word	0x08008385
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d036      	beq.n	800838a <UART_SetConfig+0x6b6>
 800831c:	e039      	b.n	8008392 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800831e:	f7fd fadb 	bl	80058d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008322:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008324:	e03b      	b.n	800839e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008326:	f107 0314 	add.w	r3, r7, #20
 800832a:	4618      	mov	r0, r3
 800832c:	f7fd faea 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008334:	e033      	b.n	800839e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f7fd fc36 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008344:	e02b      	b.n	800839e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008346:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <UART_SetConfig+0x69c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <UART_SetConfig+0x69c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	08db      	lsrs	r3, r3, #3
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	4a08      	ldr	r2, [pc, #32]	; (8008380 <UART_SetConfig+0x6ac>)
 800835e:	fa22 f303 	lsr.w	r3, r2, r3
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008364:	e01b      	b.n	800839e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <UART_SetConfig+0x6ac>)
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800836a:	e018      	b.n	800839e <UART_SetConfig+0x6ca>
 800836c:	40011400 	.word	0x40011400
 8008370:	58024400 	.word	0x58024400
 8008374:	40007800 	.word	0x40007800
 8008378:	40007c00 	.word	0x40007c00
 800837c:	58000c00 	.word	0x58000c00
 8008380:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008384:	4bc4      	ldr	r3, [pc, #784]	; (8008698 <UART_SetConfig+0x9c4>)
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008388:	e009      	b.n	800839e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008390:	e005      	b.n	800839e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800839c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 81da 	beq.w	800875a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	4abc      	ldr	r2, [pc, #752]	; (800869c <UART_SetConfig+0x9c8>)
 80083ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	4613      	mov	r3, r2
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	4413      	add	r3, r2
 80083c4:	6a3a      	ldr	r2, [r7, #32]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d305      	bcc.n	80083d6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083d0:	6a3a      	ldr	r2, [r7, #32]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d903      	bls.n	80083de <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80083dc:	e1bd      	b.n	800875a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	4618      	mov	r0, r3
 80083e2:	f04f 0100 	mov.w	r1, #0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	4aac      	ldr	r2, [pc, #688]	; (800869c <UART_SetConfig+0x9c8>)
 80083ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f04f 0300 	mov.w	r3, #0
 80083f6:	f7f7 ffc3 	bl	8000380 <__aeabi_uldivmod>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4610      	mov	r0, r2
 8008400:	4619      	mov	r1, r3
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	020b      	lsls	r3, r1, #8
 800840c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008410:	0202      	lsls	r2, r0, #8
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	6849      	ldr	r1, [r1, #4]
 8008416:	0849      	lsrs	r1, r1, #1
 8008418:	4608      	mov	r0, r1
 800841a:	f04f 0100 	mov.w	r1, #0
 800841e:	1814      	adds	r4, r2, r0
 8008420:	eb43 0501 	adc.w	r5, r3, r1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	461a      	mov	r2, r3
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	4620      	mov	r0, r4
 8008430:	4629      	mov	r1, r5
 8008432:	f7f7 ffa5 	bl	8000380 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4613      	mov	r3, r2
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008444:	d308      	bcc.n	8008458 <UART_SetConfig+0x784>
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844c:	d204      	bcs.n	8008458 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008454:	60da      	str	r2, [r3, #12]
 8008456:	e180      	b.n	800875a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800845e:	e17c      	b.n	800875a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008468:	f040 80bf 	bne.w	80085ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800846c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008470:	2b20      	cmp	r3, #32
 8008472:	dc49      	bgt.n	8008508 <UART_SetConfig+0x834>
 8008474:	2b00      	cmp	r3, #0
 8008476:	db7c      	blt.n	8008572 <UART_SetConfig+0x89e>
 8008478:	2b20      	cmp	r3, #32
 800847a:	d87a      	bhi.n	8008572 <UART_SetConfig+0x89e>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <UART_SetConfig+0x7b0>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	0800850f 	.word	0x0800850f
 8008488:	08008517 	.word	0x08008517
 800848c:	08008573 	.word	0x08008573
 8008490:	08008573 	.word	0x08008573
 8008494:	0800851f 	.word	0x0800851f
 8008498:	08008573 	.word	0x08008573
 800849c:	08008573 	.word	0x08008573
 80084a0:	08008573 	.word	0x08008573
 80084a4:	0800852f 	.word	0x0800852f
 80084a8:	08008573 	.word	0x08008573
 80084ac:	08008573 	.word	0x08008573
 80084b0:	08008573 	.word	0x08008573
 80084b4:	08008573 	.word	0x08008573
 80084b8:	08008573 	.word	0x08008573
 80084bc:	08008573 	.word	0x08008573
 80084c0:	08008573 	.word	0x08008573
 80084c4:	0800853f 	.word	0x0800853f
 80084c8:	08008573 	.word	0x08008573
 80084cc:	08008573 	.word	0x08008573
 80084d0:	08008573 	.word	0x08008573
 80084d4:	08008573 	.word	0x08008573
 80084d8:	08008573 	.word	0x08008573
 80084dc:	08008573 	.word	0x08008573
 80084e0:	08008573 	.word	0x08008573
 80084e4:	08008573 	.word	0x08008573
 80084e8:	08008573 	.word	0x08008573
 80084ec:	08008573 	.word	0x08008573
 80084f0:	08008573 	.word	0x08008573
 80084f4:	08008573 	.word	0x08008573
 80084f8:	08008573 	.word	0x08008573
 80084fc:	08008573 	.word	0x08008573
 8008500:	08008573 	.word	0x08008573
 8008504:	08008565 	.word	0x08008565
 8008508:	2b40      	cmp	r3, #64	; 0x40
 800850a:	d02e      	beq.n	800856a <UART_SetConfig+0x896>
 800850c:	e031      	b.n	8008572 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850e:	f7fb fda5 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8008512:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008514:	e033      	b.n	800857e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008516:	f7fb fdb7 	bl	8004088 <HAL_RCC_GetPCLK2Freq>
 800851a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800851c:	e02f      	b.n	800857e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851e:	f107 0314 	add.w	r3, r7, #20
 8008522:	4618      	mov	r0, r3
 8008524:	f7fd f9ee 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800852c:	e027      	b.n	800857e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852e:	f107 0308 	add.w	r3, r7, #8
 8008532:	4618      	mov	r0, r3
 8008534:	f7fd fb3a 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800853c:	e01f      	b.n	800857e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800853e:	4b58      	ldr	r3, [pc, #352]	; (80086a0 <UART_SetConfig+0x9cc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800854a:	4b55      	ldr	r3, [pc, #340]	; (80086a0 <UART_SetConfig+0x9cc>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	08db      	lsrs	r3, r3, #3
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	4a53      	ldr	r2, [pc, #332]	; (80086a4 <UART_SetConfig+0x9d0>)
 8008556:	fa22 f303 	lsr.w	r3, r2, r3
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800855c:	e00f      	b.n	800857e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800855e:	4b51      	ldr	r3, [pc, #324]	; (80086a4 <UART_SetConfig+0x9d0>)
 8008560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008562:	e00c      	b.n	800857e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008564:	4b4c      	ldr	r3, [pc, #304]	; (8008698 <UART_SetConfig+0x9c4>)
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008568:	e009      	b.n	800857e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008570:	e005      	b.n	800857e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800857c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80ea 	beq.w	800875a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	4a44      	ldr	r2, [pc, #272]	; (800869c <UART_SetConfig+0x9c8>)
 800858c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008590:	461a      	mov	r2, r3
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	fbb3 f3f2 	udiv	r3, r3, r2
 8008598:	005a      	lsls	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	441a      	add	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d916      	bls.n	80085e2 <UART_SetConfig+0x90e>
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ba:	d212      	bcs.n	80085e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f023 030f 	bic.w	r3, r3, #15
 80085c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085d4:	4313      	orrs	r3, r2
 80085d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e0bb      	b.n	800875a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085e8:	e0b7      	b.n	800875a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	dc4a      	bgt.n	8008688 <UART_SetConfig+0x9b4>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f2c0 8086 	blt.w	8008704 <UART_SetConfig+0xa30>
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	f200 8083 	bhi.w	8008704 <UART_SetConfig+0xa30>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <UART_SetConfig+0x930>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	0800868f 	.word	0x0800868f
 8008608:	080086a9 	.word	0x080086a9
 800860c:	08008705 	.word	0x08008705
 8008610:	08008705 	.word	0x08008705
 8008614:	080086b1 	.word	0x080086b1
 8008618:	08008705 	.word	0x08008705
 800861c:	08008705 	.word	0x08008705
 8008620:	08008705 	.word	0x08008705
 8008624:	080086c1 	.word	0x080086c1
 8008628:	08008705 	.word	0x08008705
 800862c:	08008705 	.word	0x08008705
 8008630:	08008705 	.word	0x08008705
 8008634:	08008705 	.word	0x08008705
 8008638:	08008705 	.word	0x08008705
 800863c:	08008705 	.word	0x08008705
 8008640:	08008705 	.word	0x08008705
 8008644:	080086d1 	.word	0x080086d1
 8008648:	08008705 	.word	0x08008705
 800864c:	08008705 	.word	0x08008705
 8008650:	08008705 	.word	0x08008705
 8008654:	08008705 	.word	0x08008705
 8008658:	08008705 	.word	0x08008705
 800865c:	08008705 	.word	0x08008705
 8008660:	08008705 	.word	0x08008705
 8008664:	08008705 	.word	0x08008705
 8008668:	08008705 	.word	0x08008705
 800866c:	08008705 	.word	0x08008705
 8008670:	08008705 	.word	0x08008705
 8008674:	08008705 	.word	0x08008705
 8008678:	08008705 	.word	0x08008705
 800867c:	08008705 	.word	0x08008705
 8008680:	08008705 	.word	0x08008705
 8008684:	080086f7 	.word	0x080086f7
 8008688:	2b40      	cmp	r3, #64	; 0x40
 800868a:	d037      	beq.n	80086fc <UART_SetConfig+0xa28>
 800868c:	e03a      	b.n	8008704 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800868e:	f7fb fce5 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8008692:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008694:	e03c      	b.n	8008710 <UART_SetConfig+0xa3c>
 8008696:	bf00      	nop
 8008698:	003d0900 	.word	0x003d0900
 800869c:	0800dc80 	.word	0x0800dc80
 80086a0:	58024400 	.word	0x58024400
 80086a4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a8:	f7fb fcee 	bl	8004088 <HAL_RCC_GetPCLK2Freq>
 80086ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086ae:	e02f      	b.n	8008710 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b0:	f107 0314 	add.w	r3, r7, #20
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fd f925 	bl	8005904 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086be:	e027      	b.n	8008710 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c0:	f107 0308 	add.w	r3, r7, #8
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fd fa71 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086ce:	e01f      	b.n	8008710 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d0:	4b2c      	ldr	r3, [pc, #176]	; (8008784 <UART_SetConfig+0xab0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086dc:	4b29      	ldr	r3, [pc, #164]	; (8008784 <UART_SetConfig+0xab0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	08db      	lsrs	r3, r3, #3
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	4a28      	ldr	r2, [pc, #160]	; (8008788 <UART_SetConfig+0xab4>)
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086ee:	e00f      	b.n	8008710 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80086f0:	4b25      	ldr	r3, [pc, #148]	; (8008788 <UART_SetConfig+0xab4>)
 80086f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086f4:	e00c      	b.n	8008710 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086f6:	4b25      	ldr	r3, [pc, #148]	; (800878c <UART_SetConfig+0xab8>)
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086fa:	e009      	b.n	8008710 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008702:	e005      	b.n	8008710 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800870e:	bf00      	nop
    }

    if (pclk != 0U)
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d021      	beq.n	800875a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	4a1d      	ldr	r2, [pc, #116]	; (8008790 <UART_SetConfig+0xabc>)
 800871c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008720:	461a      	mov	r2, r3
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	fbb3 f2f2 	udiv	r2, r3, r2
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	085b      	lsrs	r3, r3, #1
 800872e:	441a      	add	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	fbb2 f3f3 	udiv	r3, r2, r3
 8008738:	b29b      	uxth	r3, r3
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b0f      	cmp	r3, #15
 8008740:	d908      	bls.n	8008754 <UART_SetConfig+0xa80>
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008748:	d204      	bcs.n	8008754 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	e002      	b.n	800875a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008776:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800877a:	4618      	mov	r0, r3
 800877c:	3738      	adds	r7, #56	; 0x38
 800877e:	46bd      	mov	sp, r7
 8008780:	bdb0      	pop	{r4, r5, r7, pc}
 8008782:	bf00      	nop
 8008784:	58024400 	.word	0x58024400
 8008788:	03d09000 	.word	0x03d09000
 800878c:	003d0900 	.word	0x003d0900
 8008790:	0800dc80 	.word	0x0800dc80

08008794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d01a      	beq.n	80088aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008892:	d10a      	bne.n	80088aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	605a      	str	r2, [r3, #4]
  }
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af02      	add	r7, sp, #8
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088e8:	f7f8 ff70 	bl	80017cc <HAL_GetTick>
 80088ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0308 	and.w	r3, r3, #8
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d10e      	bne.n	800891a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f82f 	bl	800896e <UART_WaitOnFlagUntilTimeout>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e025      	b.n	8008966 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b04      	cmp	r3, #4
 8008926:	d10e      	bne.n	8008946 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f819 	bl	800896e <UART_WaitOnFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e00f      	b.n	8008966 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	4613      	mov	r3, r2
 800897c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800897e:	e062      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d05e      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008988:	f7f8 ff20 	bl	80017cc <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <UART_WaitOnFlagUntilTimeout+0x30>
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d11d      	bne.n	80089da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0201 	bic.w	r2, r2, #1
 80089bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e045      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02e      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f6:	d126      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e00f      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d08d      	beq.n	8008980 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e027      	b.n	8008ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2224      	movs	r2, #36	; 0x24
 8008a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f022 0201 	bic.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e02d      	b.n	8008b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2224      	movs	r2, #36	; 0x24
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0201 	bic.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f84f 	bl	8008bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e02d      	b.n	8008bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2224      	movs	r2, #36	; 0x24
 8008b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f811 	bl	8008bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d108      	bne.n	8008bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bf8:	e031      	b.n	8008c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bfe:	2310      	movs	r3, #16
 8008c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	0e5b      	lsrs	r3, r3, #25
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	0f5b      	lsrs	r3, r3, #29
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0307 	and.w	r3, r3, #7
 8008c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	7b3a      	ldrb	r2, [r7, #12]
 8008c26:	4911      	ldr	r1, [pc, #68]	; (8008c6c <UARTEx_SetNbDataToProcess+0x94>)
 8008c28:	5c8a      	ldrb	r2, [r1, r2]
 8008c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c2e:	7b3a      	ldrb	r2, [r7, #12]
 8008c30:	490f      	ldr	r1, [pc, #60]	; (8008c70 <UARTEx_SetNbDataToProcess+0x98>)
 8008c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	7b7a      	ldrb	r2, [r7, #13]
 8008c44:	4909      	ldr	r1, [pc, #36]	; (8008c6c <UARTEx_SetNbDataToProcess+0x94>)
 8008c46:	5c8a      	ldrb	r2, [r1, r2]
 8008c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c4c:	7b7a      	ldrb	r2, [r7, #13]
 8008c4e:	4908      	ldr	r1, [pc, #32]	; (8008c70 <UARTEx_SetNbDataToProcess+0x98>)
 8008c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c5e:	bf00      	nop
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	0800dc98 	.word	0x0800dc98
 8008c70:	0800dca0 	.word	0x0800dca0

08008c74 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008c74:	b084      	sub	sp, #16
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	f107 001c 	add.w	r0, r7, #28
 8008c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008c8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008c8e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008c92:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008c96:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008c9a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <SDMMC_Init+0x50>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	b004      	add	sp, #16
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	ffc02c00 	.word	0xffc02c00

08008cc8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f043 0203 	orr.w	r2, r3, #3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0303 	and.w	r3, r3, #3
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008d62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008d68:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008d6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <SDMMC_SendCommand+0x50>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	fffee0c0 	.word	0xfffee0c0

08008d98 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	b2db      	uxtb	r3, r3
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3314      	adds	r3, #20
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008dfe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008e04:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008e0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0

}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e3e:	2310      	movs	r3, #16
 8008e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ff73 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e62:	2110      	movs	r1, #16
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fa5f 	bl	8009328 <SDMMC_GetCmdResp1>
 8008e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b088      	sub	sp, #32
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e84:	2311      	movs	r3, #17
 8008e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e98:	f107 0308 	add.w	r3, r7, #8
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ff50 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea8:	2111      	movs	r1, #17
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa3c 	bl	8009328 <SDMMC_GetCmdResp1>
 8008eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb2:	69fb      	ldr	r3, [r7, #28]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008eca:	2312      	movs	r3, #18
 8008ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008edc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff ff2d 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eee:	2112      	movs	r1, #18
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fa19 	bl	8009328 <SDMMC_GetCmdResp1>
 8008ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b088      	sub	sp, #32
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f10:	2318      	movs	r3, #24
 8008f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f24:	f107 0308 	add.w	r3, r7, #8
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff ff0a 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f34:	2118      	movs	r1, #24
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9f6 	bl	8009328 <SDMMC_GetCmdResp1>
 8008f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3720      	adds	r7, #32
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f56:	2319      	movs	r3, #25
 8008f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff fee7 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7a:	2119      	movs	r1, #25
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f9d3 	bl	8009328 <SDMMC_GetCmdResp1>
 8008f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f84:	69fb      	ldr	r3, [r7, #28]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f9c:	230c      	movs	r3, #12
 8008f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff feb8 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008fd4:	4a0b      	ldr	r2, [pc, #44]	; (8009004 <SDMMC_CmdStopTransfer+0x74>)
 8008fd6:	210c      	movs	r1, #12
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f9a5 	bl	8009328 <SDMMC_GetCmdResp1>
 8008fde:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ff2:	d101      	bne.n	8008ff8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3720      	adds	r7, #32
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	05f5e100 	.word	0x05f5e100

08009008 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009016:	2307      	movs	r3, #7
 8009018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800901e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009020:	2300      	movs	r3, #0
 8009022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800902a:	f107 0308 	add.w	r3, r7, #8
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fe87 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009036:	f241 3288 	movw	r2, #5000	; 0x1388
 800903a:	2107      	movs	r1, #7
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f973 	bl	8009328 <SDMMC_GetCmdResp1>
 8009042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009044:	69fb      	ldr	r3, [r7, #28]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b088      	sub	sp, #32
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800906a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800906c:	f107 0308 	add.w	r3, r7, #8
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff fe66 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fb97 	bl	80097ac <SDMMC_GetCmdError>
 800907e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009080:	69fb      	ldr	r3, [r7, #28]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b088      	sub	sp, #32
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009092:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009098:	2308      	movs	r3, #8
 800909a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800909c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ac:	f107 0308 	add.w	r3, r7, #8
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fe46 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fb29 	bl	8009710 <SDMMC_GetCmdResp7>
 80090be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c0:	69fb      	ldr	r3, [r7, #28]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b088      	sub	sp, #32
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090d8:	2337      	movs	r3, #55	; 0x37
 80090da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ec:	f107 0308 	add.w	r3, r7, #8
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7ff fe26 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80090f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fc:	2137      	movs	r1, #55	; 0x37
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f912 	bl	8009328 <SDMMC_GetCmdResp1>
 8009104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009106:	69fb      	ldr	r3, [r7, #28]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800911e:	2329      	movs	r3, #41	; 0x29
 8009120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800912c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009132:	f107 0308 	add.w	r3, r7, #8
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fe03 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa2e 	bl	80095a0 <SDMMC_GetCmdResp3>
 8009144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009146:	69fb      	ldr	r3, [r7, #28]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800915e:	2306      	movs	r3, #6
 8009160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800916c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009170:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff fde3 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800917e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009182:	2106      	movs	r1, #6
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f8cf 	bl	8009328 <SDMMC_GetCmdResp1>
 800918a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800918c:	69fb      	ldr	r3, [r7, #28]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3720      	adds	r7, #32
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b088      	sub	sp, #32
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091a2:	2333      	movs	r3, #51	; 0x33
 80091a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b6:	f107 0308 	add.w	r3, r7, #8
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fdc1 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80091c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c6:	2133      	movs	r1, #51	; 0x33
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f8ad 	bl	8009328 <SDMMC_GetCmdResp1>
 80091ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d0:	69fb      	ldr	r3, [r7, #28]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b088      	sub	sp, #32
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091e6:	2302      	movs	r3, #2
 80091e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80091ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091fa:	f107 0308 	add.w	r3, r7, #8
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff fd9f 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f980 	bl	800950c <SDMMC_GetCmdResp2>
 800920c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800920e:	69fb      	ldr	r3, [r7, #28]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009226:	2309      	movs	r3, #9
 8009228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800922a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800922e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff fd7f 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f960 	bl	800950c <SDMMC_GetCmdResp2>
 800924c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800924e:	69fb      	ldr	r3, [r7, #28]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009266:	2303      	movs	r3, #3
 8009268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800926a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800926e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fd5f 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	2103      	movs	r1, #3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9c8 	bl	8009620 <SDMMC_GetCmdResp6>
 8009290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009292:	69fb      	ldr	r3, [r7, #28]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092aa:	230d      	movs	r3, #13
 80092ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092be:	f107 0308 	add.w	r3, r7, #8
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff fd3d 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80092ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ce:	210d      	movs	r1, #13
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f829 	bl	8009328 <SDMMC_GetCmdResp1>
 80092d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d8:	69fb      	ldr	r3, [r7, #28]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3720      	adds	r7, #32
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b088      	sub	sp, #32
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80092ee:	230d      	movs	r3, #13
 80092f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092f8:	2300      	movs	r3, #0
 80092fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fd1b 	bl	8008d44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800930e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009312:	210d      	movs	r1, #13
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f807 	bl	8009328 <SDMMC_GetCmdResp1>
 800931a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800931c:	69fb      	ldr	r3, [r7, #28]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3720      	adds	r7, #32
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	460b      	mov	r3, r1
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009336:	4b70      	ldr	r3, [pc, #448]	; (80094f8 <SDMMC_GetCmdResp1+0x1d0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a70      	ldr	r2, [pc, #448]	; (80094fc <SDMMC_GetCmdResp1+0x1d4>)
 800933c:	fba2 2303 	umull	r2, r3, r2, r3
 8009340:	0a5a      	lsrs	r2, r3, #9
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	fb02 f303 	mul.w	r3, r2, r3
 8009348:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	1e5a      	subs	r2, r3, #1
 800934e:	61fa      	str	r2, [r7, #28]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009358:	e0c9      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	4b67      	ldr	r3, [pc, #412]	; (8009500 <SDMMC_GetCmdResp1+0x1d8>)
 8009364:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0ef      	beq.n	800934a <SDMMC_GetCmdResp1+0x22>
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1ea      	bne.n	800934a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2204      	movs	r2, #4
 8009384:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009386:	2304      	movs	r3, #4
 8009388:	e0b1      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800939c:	2301      	movs	r3, #1
 800939e:	e0a6      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a58      	ldr	r2, [pc, #352]	; (8009504 <SDMMC_GetCmdResp1+0x1dc>)
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff fcf6 	bl	8008d98 <SDMMC_GetCommandResponse>
 80093ac:	4603      	mov	r3, r0
 80093ae:	461a      	mov	r2, r3
 80093b0:	7afb      	ldrb	r3, [r7, #11]
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d001      	beq.n	80093ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e099      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80093ba:	2100      	movs	r1, #0
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7ff fcf8 	bl	8008db2 <SDMMC_GetResponse>
 80093c2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	4b50      	ldr	r3, [pc, #320]	; (8009508 <SDMMC_GetCmdResp1+0x1e0>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e08d      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da02      	bge.n	80093de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80093d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093dc:	e087      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	e080      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093f6:	2380      	movs	r3, #128	; 0x80
 80093f8:	e079      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009408:	e071      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009418:	e069      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009428:	e061      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009438:	e059      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009448:	e051      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009458:	e049      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009468:	e041      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009478:	e039      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009488:	e031      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009498:	e029      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80094a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094a8:	e021      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80094b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094b8:	e019      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80094c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80094c8:	e011      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80094d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094d8:	e009      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80094e8:	e001      	b.n	80094ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	24000000 	.word	0x24000000
 80094fc:	10624dd3 	.word	0x10624dd3
 8009500:	00200045 	.word	0x00200045
 8009504:	002000c5 	.word	0x002000c5
 8009508:	fdffe008 	.word	0xfdffe008

0800950c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009514:	4b1f      	ldr	r3, [pc, #124]	; (8009594 <SDMMC_GetCmdResp2+0x88>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1f      	ldr	r2, [pc, #124]	; (8009598 <SDMMC_GetCmdResp2+0x8c>)
 800951a:	fba2 2303 	umull	r2, r3, r2, r3
 800951e:	0a5b      	lsrs	r3, r3, #9
 8009520:	f241 3288 	movw	r2, #5000	; 0x1388
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1e5a      	subs	r2, r3, #1
 800952e:	60fa      	str	r2, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009538:	e026      	b.n	8009588 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0ef      	beq.n	800952a <SDMMC_GetCmdResp2+0x1e>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ea      	bne.n	800952a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009566:	2304      	movs	r3, #4
 8009568:	e00e      	b.n	8009588 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957c:	2301      	movs	r3, #1
 800957e:	e003      	b.n	8009588 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a06      	ldr	r2, [pc, #24]	; (800959c <SDMMC_GetCmdResp2+0x90>)
 8009584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	24000000 	.word	0x24000000
 8009598:	10624dd3 	.word	0x10624dd3
 800959c:	002000c5 	.word	0x002000c5

080095a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80095a8:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <SDMMC_GetCmdResp3+0x74>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1a      	ldr	r2, [pc, #104]	; (8009618 <SDMMC_GetCmdResp3+0x78>)
 80095ae:	fba2 2303 	umull	r2, r3, r2, r3
 80095b2:	0a5b      	lsrs	r3, r3, #9
 80095b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b8:	fb02 f303 	mul.w	r3, r2, r3
 80095bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	60fa      	str	r2, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d102      	bne.n	80095ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095cc:	e01b      	b.n	8009606 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0ef      	beq.n	80095be <SDMMC_GetCmdResp3+0x1e>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1ea      	bne.n	80095be <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2204      	movs	r2, #4
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095fa:	2304      	movs	r3, #4
 80095fc:	e003      	b.n	8009606 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a06      	ldr	r2, [pc, #24]	; (800961c <SDMMC_GetCmdResp3+0x7c>)
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	24000000 	.word	0x24000000
 8009618:	10624dd3 	.word	0x10624dd3
 800961c:	002000c5 	.word	0x002000c5

08009620 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	460b      	mov	r3, r1
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800962e:	4b35      	ldr	r3, [pc, #212]	; (8009704 <SDMMC_GetCmdResp6+0xe4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a35      	ldr	r2, [pc, #212]	; (8009708 <SDMMC_GetCmdResp6+0xe8>)
 8009634:	fba2 2303 	umull	r2, r3, r2, r3
 8009638:	0a5b      	lsrs	r3, r3, #9
 800963a:	f241 3288 	movw	r2, #5000	; 0x1388
 800963e:	fb02 f303 	mul.w	r3, r2, r3
 8009642:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	1e5a      	subs	r2, r3, #1
 8009648:	61fa      	str	r2, [r7, #28]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800964e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009652:	e052      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009658:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0ef      	beq.n	8009644 <SDMMC_GetCmdResp6+0x24>
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1ea      	bne.n	8009644 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009672:	f003 0304 	and.w	r3, r3, #4
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2204      	movs	r2, #4
 800967e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009680:	2304      	movs	r3, #4
 8009682:	e03a      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009696:	2301      	movs	r3, #1
 8009698:	e02f      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f7ff fb7c 	bl	8008d98 <SDMMC_GetCommandResponse>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d001      	beq.n	80096ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e025      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4a16      	ldr	r2, [pc, #88]	; (800970c <SDMMC_GetCmdResp6+0xec>)
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80096b4:	2100      	movs	r1, #0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff fb7b 	bl	8008db2 <SDMMC_GetResponse>
 80096bc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	0c1b      	lsrs	r3, r3, #16
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e011      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096e4:	e009      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f4:	e001      	b.n	80096fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	24000000 	.word	0x24000000
 8009708:	10624dd3 	.word	0x10624dd3
 800970c:	002000c5 	.word	0x002000c5

08009710 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009718:	4b22      	ldr	r3, [pc, #136]	; (80097a4 <SDMMC_GetCmdResp7+0x94>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a22      	ldr	r2, [pc, #136]	; (80097a8 <SDMMC_GetCmdResp7+0x98>)
 800971e:	fba2 2303 	umull	r2, r3, r2, r3
 8009722:	0a5b      	lsrs	r3, r3, #9
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	fb02 f303 	mul.w	r3, r2, r3
 800972c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1e5a      	subs	r2, r3, #1
 8009732:	60fa      	str	r2, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800973c:	e02c      	b.n	8009798 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009742:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0ef      	beq.n	800972e <SDMMC_GetCmdResp7+0x1e>
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1ea      	bne.n	800972e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2204      	movs	r2, #4
 8009768:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800976a:	2304      	movs	r3, #4
 800976c:	e014      	b.n	8009798 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009780:	2301      	movs	r3, #1
 8009782:	e009      	b.n	8009798 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2240      	movs	r2, #64	; 0x40
 8009794:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009796:	2300      	movs	r3, #0

}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	24000000 	.word	0x24000000
 80097a8:	10624dd3 	.word	0x10624dd3

080097ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80097b4:	4b11      	ldr	r3, [pc, #68]	; (80097fc <SDMMC_GetCmdError+0x50>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a11      	ldr	r2, [pc, #68]	; (8009800 <SDMMC_GetCmdError+0x54>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	0a5b      	lsrs	r3, r3, #9
 80097c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c4:	fb02 f303 	mul.w	r3, r2, r3
 80097c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	60fa      	str	r2, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097d8:	e009      	b.n	80097ee <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f1      	beq.n	80097ca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a06      	ldr	r2, [pc, #24]	; (8009804 <SDMMC_GetCmdError+0x58>)
 80097ea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	24000000 	.word	0x24000000
 8009800:	10624dd3 	.word	0x10624dd3
 8009804:	002000c5 	.word	0x002000c5

08009808 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800980c:	4904      	ldr	r1, [pc, #16]	; (8009820 <MX_FATFS_Init+0x18>)
 800980e:	4805      	ldr	r0, [pc, #20]	; (8009824 <MX_FATFS_Init+0x1c>)
 8009810:	f003 fbfe 	bl	800d010 <FATFS_LinkDriver>
 8009814:	4603      	mov	r3, r0
 8009816:	461a      	mov	r2, r3
 8009818:	4b03      	ldr	r3, [pc, #12]	; (8009828 <MX_FATFS_Init+0x20>)
 800981a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800981c:	bf00      	nop
 800981e:	bd80      	pop	{r7, pc}
 8009820:	24003254 	.word	0x24003254
 8009824:	0800dca8 	.word	0x0800dca8
 8009828:	24003250 	.word	0x24003250

0800982c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009830:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009832:	4618      	mov	r0, r3
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009846:	f000 f885 	bl	8009954 <BSP_SD_IsDetected>
 800984a:	4603      	mov	r3, r0
 800984c:	2b01      	cmp	r3, #1
 800984e:	d001      	beq.n	8009854 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009850:	2302      	movs	r3, #2
 8009852:	e012      	b.n	800987a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009854:	480b      	ldr	r0, [pc, #44]	; (8009884 <BSP_SD_Init+0x48>)
 8009856:	f7fc fdb3 	bl	80063c0 <HAL_SD_Init>
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009868:	4806      	ldr	r0, [pc, #24]	; (8009884 <BSP_SD_Init+0x48>)
 800986a:	f7fd fc57 	bl	800711c <HAL_SD_ConfigWideBusOperation>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009878:	79fb      	ldrb	r3, [r7, #7]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	2400304c 	.word	0x2400304c

08009888 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	68f9      	ldr	r1, [r7, #12]
 800989e:	4806      	ldr	r0, [pc, #24]	; (80098b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80098a0:	f7fc fea6 	bl	80065f0 <HAL_SD_ReadBlocks_DMA>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	2400304c 	.word	0x2400304c

080098bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	68f9      	ldr	r1, [r7, #12]
 80098d2:	4806      	ldr	r0, [pc, #24]	; (80098ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80098d4:	f7fc ff34 	bl	8006740 <HAL_SD_WriteBlocks_DMA>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	2400304c 	.word	0x2400304c

080098f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <BSP_SD_GetCardState+0x1c>)
 80098f6:	f7fd fd21 	bl	800733c <HAL_SD_GetCardState>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	bf14      	ite	ne
 8009900:	2301      	movne	r3, #1
 8009902:	2300      	moveq	r3, #0
 8009904:	b2db      	uxtb	r3, r3
}
 8009906:	4618      	mov	r0, r3
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	2400304c 	.word	0x2400304c

08009910 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4803      	ldr	r0, [pc, #12]	; (8009928 <BSP_SD_GetCardInfo+0x18>)
 800991c:	f7fd fbd2 	bl	80070c4 <HAL_SD_GetCardInfo>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	2400304c 	.word	0x2400304c

0800992c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009934:	f000 f9a0 	bl	8009c78 <BSP_SD_WriteCpltCallback>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009948:	f000 f9a2 	bl	8009c90 <BSP_SD_ReadCpltCallback>
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800995a:	2301      	movs	r3, #1
 800995c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800995e:	f000 f80b 	bl	8009978 <BSP_PlatformIsDetected>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009968:	2300      	movs	r3, #0
 800996a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	b2db      	uxtb	r3, r3
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800997e:	2301      	movs	r3, #1
 8009980:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009982:	2101      	movs	r1, #1
 8009984:	4806      	ldr	r0, [pc, #24]	; (80099a0 <BSP_PlatformIsDetected+0x28>)
 8009986:	f7f9 fb73 	bl	8003070 <HAL_GPIO_ReadPin>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009990:	2300      	movs	r3, #0
 8009992:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009994:	79fb      	ldrb	r3, [r7, #7]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	58020c00 	.word	0x58020c00

080099a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80099ac:	f7f7 ff0e 	bl	80017cc <HAL_GetTick>
 80099b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80099b2:	e006      	b.n	80099c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80099b4:	f7ff ff9c 	bl	80098f0 <BSP_SD_GetCardState>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	e009      	b.n	80099d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80099c2:	f7f7 ff03 	bl	80017cc <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d8f0      	bhi.n	80099b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80099ea:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <SD_CheckStatus+0x38>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80099f0:	f7ff ff7e 	bl	80098f0 <BSP_SD_GetCardState>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80099fa:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <SD_CheckStatus+0x38>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f023 0301 	bic.w	r3, r3, #1
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <SD_CheckStatus+0x38>)
 8009a08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009a0a:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <SD_CheckStatus+0x38>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b2db      	uxtb	r3, r3
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	2400000d 	.word	0x2400000d

08009a1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009a26:	f7ff ff09 	bl	800983c <BSP_SD_Init>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d107      	bne.n	8009a40 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff ffd4 	bl	80099e0 <SD_CheckStatus>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <SD_initialize+0x34>)
 8009a3e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009a40:	4b03      	ldr	r3, [pc, #12]	; (8009a50 <SD_initialize+0x34>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	b2db      	uxtb	r3, r3
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	2400000d 	.word	0x2400000d

08009a54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ffbd 	bl	80099e0 <SD_CheckStatus>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	607a      	str	r2, [r7, #4]
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a84:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a88:	f7ff ff8c 	bl	80099a4 <SD_CheckStatusWithTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da01      	bge.n	8009a96 <SD_read+0x26>
  {
    return res;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	e03b      	b.n	8009b0e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	68b8      	ldr	r0, [r7, #8]
 8009a9c:	f7ff fef4 	bl	8009888 <BSP_SD_ReadBlocks_DMA>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d132      	bne.n	8009b0c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009aa6:	4b1c      	ldr	r3, [pc, #112]	; (8009b18 <SD_read+0xa8>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009aac:	f7f7 fe8e 	bl	80017cc <HAL_GetTick>
 8009ab0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009ab2:	bf00      	nop
 8009ab4:	4b18      	ldr	r3, [pc, #96]	; (8009b18 <SD_read+0xa8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d108      	bne.n	8009ace <SD_read+0x5e>
 8009abc:	f7f7 fe86 	bl	80017cc <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d9f2      	bls.n	8009ab4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009ace:	4b12      	ldr	r3, [pc, #72]	; (8009b18 <SD_read+0xa8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d102      	bne.n	8009adc <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
 8009ada:	e017      	b.n	8009b0c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009adc:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <SD_read+0xa8>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009ae2:	f7f7 fe73 	bl	80017cc <HAL_GetTick>
 8009ae6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ae8:	e007      	b.n	8009afa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009aea:	f7ff ff01 	bl	80098f0 <BSP_SD_GetCardState>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <SD_read+0x8a>
          {
            res = RES_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009af8:	e008      	b.n	8009b0c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009afa:	f7f7 fe67 	bl	80017cc <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d9ee      	bls.n	8009aea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	240010fc 	.word	0x240010fc

08009b1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <SD_write+0xa8>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009b36:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b3a:	f7ff ff33 	bl	80099a4 <SD_CheckStatusWithTimeout>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da01      	bge.n	8009b48 <SD_write+0x2c>
  {
    return res;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	e038      	b.n	8009bba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	68b8      	ldr	r0, [r7, #8]
 8009b4e:	f7ff feb5 	bl	80098bc <BSP_SD_WriteBlocks_DMA>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d12f      	bne.n	8009bb8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009b58:	f7f7 fe38 	bl	80017cc <HAL_GetTick>
 8009b5c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009b5e:	bf00      	nop
 8009b60:	4b18      	ldr	r3, [pc, #96]	; (8009bc4 <SD_write+0xa8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d108      	bne.n	8009b7a <SD_write+0x5e>
 8009b68:	f7f7 fe30 	bl	80017cc <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d9f2      	bls.n	8009b60 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <SD_write+0xa8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	75fb      	strb	r3, [r7, #23]
 8009b86:	e017      	b.n	8009bb8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009b88:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <SD_write+0xa8>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b8e:	f7f7 fe1d 	bl	80017cc <HAL_GetTick>
 8009b92:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b94:	e007      	b.n	8009ba6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b96:	f7ff feab 	bl	80098f0 <BSP_SD_GetCardState>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <SD_write+0x8a>
          {
            res = RES_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	75fb      	strb	r3, [r7, #23]
            break;
 8009ba4:	e008      	b.n	8009bb8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ba6:	f7f7 fe11 	bl	80017cc <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	f247 522f 	movw	r2, #29999	; 0x752f
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d9ee      	bls.n	8009b96 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	240010f8 	.word	0x240010f8

08009bc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08c      	sub	sp, #48	; 0x30
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	603a      	str	r2, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bde:	4b25      	ldr	r3, [pc, #148]	; (8009c74 <SD_ioctl+0xac>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <SD_ioctl+0x28>
 8009bec:	2303      	movs	r3, #3
 8009bee:	e03c      	b.n	8009c6a <SD_ioctl+0xa2>

  switch (cmd)
 8009bf0:	79bb      	ldrb	r3, [r7, #6]
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d834      	bhi.n	8009c60 <SD_ioctl+0x98>
 8009bf6:	a201      	add	r2, pc, #4	; (adr r2, 8009bfc <SD_ioctl+0x34>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009c15 	.word	0x08009c15
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c47 	.word	0x08009c47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c12:	e028      	b.n	8009c66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c14:	f107 0308 	add.w	r3, r7, #8
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fe79 	bl	8009910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009c1e:	6a3a      	ldr	r2, [r7, #32]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c2a:	e01c      	b.n	8009c66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c2c:	f107 0308 	add.w	r3, r7, #8
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff fe6d 	bl	8009910 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c44:	e00f      	b.n	8009c66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c46:	f107 0308 	add.w	r3, r7, #8
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff fe60 	bl	8009910 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	0a5a      	lsrs	r2, r3, #9
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c5e:	e002      	b.n	8009c66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009c60:	2304      	movs	r3, #4
 8009c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3730      	adds	r7, #48	; 0x30
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2400000d 	.word	0x2400000d

08009c78 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009c7c:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <BSP_SD_WriteCpltCallback+0x14>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	601a      	str	r2, [r3, #0]
}
 8009c82:	bf00      	nop
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	240010f8 	.word	0x240010f8

08009c90 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009c94:	4b03      	ldr	r3, [pc, #12]	; (8009ca4 <BSP_SD_ReadCpltCallback+0x14>)
 8009c96:	2201      	movs	r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	240010fc 	.word	0x240010fc

08009ca8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	4a08      	ldr	r2, [pc, #32]	; (8009cd8 <disk_status+0x30>)
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	79fa      	ldrb	r2, [r7, #7]
 8009cc0:	4905      	ldr	r1, [pc, #20]	; (8009cd8 <disk_status+0x30>)
 8009cc2:	440a      	add	r2, r1
 8009cc4:	7a12      	ldrb	r2, [r2, #8]
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4798      	blx	r3
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	24001328 	.word	0x24001328

08009cdc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	4a0d      	ldr	r2, [pc, #52]	; (8009d24 <disk_initialize+0x48>)
 8009cee:	5cd3      	ldrb	r3, [r2, r3]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d111      	bne.n	8009d18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	4a0b      	ldr	r2, [pc, #44]	; (8009d24 <disk_initialize+0x48>)
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <disk_initialize+0x48>)
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	79fa      	ldrb	r2, [r7, #7]
 8009d0a:	4906      	ldr	r1, [pc, #24]	; (8009d24 <disk_initialize+0x48>)
 8009d0c:	440a      	add	r2, r1
 8009d0e:	7a12      	ldrb	r2, [r2, #8]
 8009d10:	4610      	mov	r0, r2
 8009d12:	4798      	blx	r3
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	24001328 	.word	0x24001328

08009d28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	4a0a      	ldr	r2, [pc, #40]	; (8009d64 <disk_read+0x3c>)
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	689c      	ldr	r4, [r3, #8]
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	4a07      	ldr	r2, [pc, #28]	; (8009d64 <disk_read+0x3c>)
 8009d48:	4413      	add	r3, r2
 8009d4a:	7a18      	ldrb	r0, [r3, #8]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	47a0      	blx	r4
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd90      	pop	{r4, r7, pc}
 8009d62:	bf00      	nop
 8009d64:	24001328 	.word	0x24001328

08009d68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <disk_write+0x3c>)
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	68dc      	ldr	r4, [r3, #12]
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <disk_write+0x3c>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	7a18      	ldrb	r0, [r3, #8]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	47a0      	blx	r4
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd90      	pop	{r4, r7, pc}
 8009da2:	bf00      	nop
 8009da4:	24001328 	.word	0x24001328

08009da8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	603a      	str	r2, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
 8009db4:	460b      	mov	r3, r1
 8009db6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <disk_ioctl+0x38>)
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	79fa      	ldrb	r2, [r7, #7]
 8009dc6:	4906      	ldr	r1, [pc, #24]	; (8009de0 <disk_ioctl+0x38>)
 8009dc8:	440a      	add	r2, r1
 8009dca:	7a10      	ldrb	r0, [r2, #8]
 8009dcc:	79b9      	ldrb	r1, [r7, #6]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4798      	blx	r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	24001328 	.word	0x24001328

08009de4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3301      	adds	r3, #1
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009df4:	89fb      	ldrh	r3, [r7, #14]
 8009df6:	021b      	lsls	r3, r3, #8
 8009df8:	b21a      	sxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	b21b      	sxth	r3, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b21b      	sxth	r3, r3
 8009e04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e06:	89fb      	ldrh	r3, [r7, #14]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3303      	adds	r3, #3
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	3202      	adds	r2, #2
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	3201      	adds	r2, #1
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	021b      	lsls	r3, r3, #8
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	887a      	ldrh	r2, [r7, #2]
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	887b      	ldrh	r3, [r7, #2]
 8009e74:	0a1b      	lsrs	r3, r3, #8
 8009e76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	887a      	ldrh	r2, [r7, #2]
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	701a      	strb	r2, [r3, #0]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	0a1b      	lsrs	r3, r3, #8
 8009eaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	607a      	str	r2, [r7, #4]
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	b2d2      	uxtb	r2, r2
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	0a1b      	lsrs	r3, r3, #8
 8009ebc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	701a      	strb	r2, [r3, #0]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	0a1b      	lsrs	r3, r3, #8
 8009ece:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00d      	beq.n	8009f1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	1c53      	adds	r3, r2, #1
 8009f06:	613b      	str	r3, [r7, #16]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	6179      	str	r1, [r7, #20]
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	607b      	str	r3, [r7, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f1      	bne.n	8009f02 <mem_cpy+0x1a>
	}
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f2a:	b480      	push	{r7}
 8009f2c:	b087      	sub	sp, #28
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	617a      	str	r2, [r7, #20]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	607b      	str	r3, [r7, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1f3      	bne.n	8009f3a <mem_set+0x10>
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f60:	b480      	push	{r7}
 8009f62:	b089      	sub	sp, #36	; 0x24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	61fa      	str	r2, [r7, #28]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4619      	mov	r1, r3
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	61ba      	str	r2, [r7, #24]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	1acb      	subs	r3, r1, r3
 8009f8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <mem_cmp+0x40>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0eb      	beq.n	8009f78 <mem_cmp+0x18>

	return r;
 8009fa0:	697b      	ldr	r3, [r7, #20]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3724      	adds	r7, #36	; 0x24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009fb8:	e002      	b.n	8009fc0 <chk_chr+0x12>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	607b      	str	r3, [r7, #4]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <chk_chr+0x26>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d1f2      	bne.n	8009fba <chk_chr+0xc>
	return *str;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	60fb      	str	r3, [r7, #12]
 8009ff6:	e029      	b.n	800a04c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009ff8:	4a27      	ldr	r2, [pc, #156]	; (800a098 <chk_lock+0xb4>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4413      	add	r3, r2
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d01d      	beq.n	800a042 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a006:	4a24      	ldr	r2, [pc, #144]	; (800a098 <chk_lock+0xb4>)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	4413      	add	r3, r2
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d116      	bne.n	800a046 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a018:	4a1f      	ldr	r2, [pc, #124]	; (800a098 <chk_lock+0xb4>)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	011b      	lsls	r3, r3, #4
 800a01e:	4413      	add	r3, r2
 800a020:	3304      	adds	r3, #4
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a028:	429a      	cmp	r2, r3
 800a02a:	d10c      	bne.n	800a046 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a02c:	4a1a      	ldr	r2, [pc, #104]	; (800a098 <chk_lock+0xb4>)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	4413      	add	r3, r2
 800a034:	3308      	adds	r3, #8
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d102      	bne.n	800a046 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a040:	e007      	b.n	800a052 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a042:	2301      	movs	r3, #1
 800a044:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d9d2      	bls.n	8009ff8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d109      	bne.n	800a06c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d102      	bne.n	800a064 <chk_lock+0x80>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d101      	bne.n	800a068 <chk_lock+0x84>
 800a064:	2300      	movs	r3, #0
 800a066:	e010      	b.n	800a08a <chk_lock+0xa6>
 800a068:	2312      	movs	r3, #18
 800a06a:	e00e      	b.n	800a08a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d108      	bne.n	800a084 <chk_lock+0xa0>
 800a072:	4a09      	ldr	r2, [pc, #36]	; (800a098 <chk_lock+0xb4>)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	4413      	add	r3, r2
 800a07a:	330c      	adds	r3, #12
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a082:	d101      	bne.n	800a088 <chk_lock+0xa4>
 800a084:	2310      	movs	r3, #16
 800a086:	e000      	b.n	800a08a <chk_lock+0xa6>
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	24001108 	.word	0x24001108

0800a09c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	e002      	b.n	800a0ae <enq_lock+0x12>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	607b      	str	r3, [r7, #4]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d806      	bhi.n	800a0c2 <enq_lock+0x26>
 800a0b4:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <enq_lock+0x40>)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	4413      	add	r3, r2
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f2      	bne.n	800a0a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	bf14      	ite	ne
 800a0c8:	2301      	movne	r3, #1
 800a0ca:	2300      	moveq	r3, #0
 800a0cc:	b2db      	uxtb	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	24001108 	.word	0x24001108

0800a0e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	e01f      	b.n	800a130 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a0f0:	4a41      	ldr	r2, [pc, #260]	; (800a1f8 <inc_lock+0x118>)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	011b      	lsls	r3, r3, #4
 800a0f6:	4413      	add	r3, r2
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d113      	bne.n	800a12a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a102:	4a3d      	ldr	r2, [pc, #244]	; (800a1f8 <inc_lock+0x118>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	4413      	add	r3, r2
 800a10a:	3304      	adds	r3, #4
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a112:	429a      	cmp	r2, r3
 800a114:	d109      	bne.n	800a12a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a116:	4a38      	ldr	r2, [pc, #224]	; (800a1f8 <inc_lock+0x118>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	011b      	lsls	r3, r3, #4
 800a11c:	4413      	add	r3, r2
 800a11e:	3308      	adds	r3, #8
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a126:	429a      	cmp	r2, r3
 800a128:	d006      	beq.n	800a138 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d9dc      	bls.n	800a0f0 <inc_lock+0x10>
 800a136:	e000      	b.n	800a13a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a138:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d132      	bne.n	800a1a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	e002      	b.n	800a14c <inc_lock+0x6c>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3301      	adds	r3, #1
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d806      	bhi.n	800a160 <inc_lock+0x80>
 800a152:	4a29      	ldr	r2, [pc, #164]	; (800a1f8 <inc_lock+0x118>)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	011b      	lsls	r3, r3, #4
 800a158:	4413      	add	r3, r2
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1f2      	bne.n	800a146 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b02      	cmp	r3, #2
 800a164:	d101      	bne.n	800a16a <inc_lock+0x8a>
 800a166:	2300      	movs	r3, #0
 800a168:	e040      	b.n	800a1ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4922      	ldr	r1, [pc, #136]	; (800a1f8 <inc_lock+0x118>)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	011b      	lsls	r3, r3, #4
 800a174:	440b      	add	r3, r1
 800a176:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	491e      	ldr	r1, [pc, #120]	; (800a1f8 <inc_lock+0x118>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	440b      	add	r3, r1
 800a184:	3304      	adds	r3, #4
 800a186:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	695a      	ldr	r2, [r3, #20]
 800a18c:	491a      	ldr	r1, [pc, #104]	; (800a1f8 <inc_lock+0x118>)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	440b      	add	r3, r1
 800a194:	3308      	adds	r3, #8
 800a196:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a198:	4a17      	ldr	r2, [pc, #92]	; (800a1f8 <inc_lock+0x118>)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	4413      	add	r3, r2
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <inc_lock+0xe0>
 800a1ac:	4a12      	ldr	r2, [pc, #72]	; (800a1f8 <inc_lock+0x118>)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	4413      	add	r3, r2
 800a1b4:	330c      	adds	r3, #12
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <inc_lock+0xe0>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e015      	b.n	800a1ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d108      	bne.n	800a1d8 <inc_lock+0xf8>
 800a1c6:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <inc_lock+0x118>)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	4413      	add	r3, r2
 800a1ce:	330c      	adds	r3, #12
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	e001      	b.n	800a1dc <inc_lock+0xfc>
 800a1d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1dc:	4906      	ldr	r1, [pc, #24]	; (800a1f8 <inc_lock+0x118>)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	440b      	add	r3, r1
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3301      	adds	r3, #1
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	24001108 	.word	0x24001108

0800a1fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	3b01      	subs	r3, #1
 800a208:	607b      	str	r3, [r7, #4]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d825      	bhi.n	800a25c <dec_lock+0x60>
		n = Files[i].ctr;
 800a210:	4a17      	ldr	r2, [pc, #92]	; (800a270 <dec_lock+0x74>)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	011b      	lsls	r3, r3, #4
 800a216:	4413      	add	r3, r2
 800a218:	330c      	adds	r3, #12
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a21e:	89fb      	ldrh	r3, [r7, #14]
 800a220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a224:	d101      	bne.n	800a22a <dec_lock+0x2e>
 800a226:	2300      	movs	r3, #0
 800a228:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a22a:	89fb      	ldrh	r3, [r7, #14]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <dec_lock+0x3a>
 800a230:	89fb      	ldrh	r3, [r7, #14]
 800a232:	3b01      	subs	r3, #1
 800a234:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a236:	4a0e      	ldr	r2, [pc, #56]	; (800a270 <dec_lock+0x74>)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	4413      	add	r3, r2
 800a23e:	330c      	adds	r3, #12
 800a240:	89fa      	ldrh	r2, [r7, #14]
 800a242:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a244:	89fb      	ldrh	r3, [r7, #14]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d105      	bne.n	800a256 <dec_lock+0x5a>
 800a24a:	4a09      	ldr	r2, [pc, #36]	; (800a270 <dec_lock+0x74>)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	4413      	add	r3, r2
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	737b      	strb	r3, [r7, #13]
 800a25a:	e001      	b.n	800a260 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a25c:	2302      	movs	r3, #2
 800a25e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a260:	7b7b      	ldrb	r3, [r7, #13]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	24001108 	.word	0x24001108

0800a274 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e010      	b.n	800a2a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a282:	4a0d      	ldr	r2, [pc, #52]	; (800a2b8 <clear_lock+0x44>)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	4413      	add	r3, r2
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d105      	bne.n	800a29e <clear_lock+0x2a>
 800a292:	4a09      	ldr	r2, [pc, #36]	; (800a2b8 <clear_lock+0x44>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	4413      	add	r3, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d9eb      	bls.n	800a282 <clear_lock+0xe>
	}
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	24001108 	.word	0x24001108

0800a2bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	78db      	ldrb	r3, [r3, #3]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d034      	beq.n	800a33a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	7858      	ldrb	r0, [r3, #1]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	f7ff fd40 	bl	8009d68 <disk_write>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	73fb      	strb	r3, [r7, #15]
 800a2f2:	e022      	b.n	800a33a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	1ad2      	subs	r2, r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	429a      	cmp	r2, r3
 800a308:	d217      	bcs.n	800a33a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	789b      	ldrb	r3, [r3, #2]
 800a30e:	613b      	str	r3, [r7, #16]
 800a310:	e010      	b.n	800a334 <sync_window+0x78>
					wsect += fs->fsize;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	4413      	add	r3, r2
 800a31a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7858      	ldrb	r0, [r3, #1]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a326:	2301      	movs	r3, #1
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	f7ff fd1d 	bl	8009d68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	3b01      	subs	r3, #1
 800a332:	613b      	str	r3, [r7, #16]
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d8eb      	bhi.n	800a312 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d01b      	beq.n	800a394 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff ffad 	bl	800a2bc <sync_window>
 800a362:	4603      	mov	r3, r0
 800a364:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d113      	bne.n	800a394 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	7858      	ldrb	r0, [r3, #1]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a376:	2301      	movs	r3, #1
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	f7ff fcd5 	bl	8009d28 <disk_read>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a384:	f04f 33ff 	mov.w	r3, #4294967295
 800a388:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff ff87 	bl	800a2bc <sync_window>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d159      	bne.n	800a46c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d149      	bne.n	800a454 <sync_fs+0xb4>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	791b      	ldrb	r3, [r3, #4]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d145      	bne.n	800a454 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	899b      	ldrh	r3, [r3, #12]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f7ff fda8 	bl	8009f2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3338      	adds	r3, #56	; 0x38
 800a3de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3e2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff fd37 	bl	8009e5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3338      	adds	r3, #56	; 0x38
 800a3f0:	4921      	ldr	r1, [pc, #132]	; (800a478 <sync_fs+0xd8>)
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fd4c 	bl	8009e90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3338      	adds	r3, #56	; 0x38
 800a3fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a400:	491e      	ldr	r1, [pc, #120]	; (800a47c <sync_fs+0xdc>)
 800a402:	4618      	mov	r0, r3
 800a404:	f7ff fd44 	bl	8009e90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3338      	adds	r3, #56	; 0x38
 800a40c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f7ff fd3a 	bl	8009e90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3338      	adds	r3, #56	; 0x38
 800a420:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	f7ff fd30 	bl	8009e90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	7858      	ldrb	r0, [r3, #1]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a448:	2301      	movs	r3, #1
 800a44a:	f7ff fc8d 	bl	8009d68 <disk_write>
			fs->fsi_flag = 0;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	785b      	ldrb	r3, [r3, #1]
 800a458:	2200      	movs	r2, #0
 800a45a:	2100      	movs	r1, #0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff fca3 	bl	8009da8 <disk_ioctl>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <sync_fs+0xcc>
 800a468:	2301      	movs	r3, #1
 800a46a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	41615252 	.word	0x41615252
 800a47c:	61417272 	.word	0x61417272

0800a480 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	3b02      	subs	r3, #2
 800a48e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	69db      	ldr	r3, [r3, #28]
 800a494:	3b02      	subs	r3, #2
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d301      	bcc.n	800a4a0 <clust2sect+0x20>
 800a49c:	2300      	movs	r3, #0
 800a49e:	e008      	b.n	800a4b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	895b      	ldrh	r3, [r3, #10]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	fb03 f202 	mul.w	r2, r3, r2
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	4413      	add	r3, r2
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b086      	sub	sp, #24
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d904      	bls.n	800a4de <get_fat+0x20>
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d302      	bcc.n	800a4e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a4de:	2301      	movs	r3, #1
 800a4e0:	617b      	str	r3, [r7, #20]
 800a4e2:	e0bb      	b.n	800a65c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	f000 8083 	beq.w	800a5fa <get_fat+0x13c>
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	f300 80a7 	bgt.w	800a648 <get_fat+0x18a>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d002      	beq.n	800a504 <get_fat+0x46>
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d056      	beq.n	800a5b0 <get_fat+0xf2>
 800a502:	e0a1      	b.n	800a648 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	085b      	lsrs	r3, r3, #1
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	899b      	ldrh	r3, [r3, #12]
 800a51a:	4619      	mov	r1, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a522:	4413      	add	r3, r2
 800a524:	4619      	mov	r1, r3
 800a526:	6938      	ldr	r0, [r7, #16]
 800a528:	f7ff ff0c 	bl	800a344 <move_window>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f040 808d 	bne.w	800a64e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	60fa      	str	r2, [r7, #12]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	8992      	ldrh	r2, [r2, #12]
 800a53e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a542:	fb02 f201 	mul.w	r2, r2, r1
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	4413      	add	r3, r2
 800a54c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a550:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	899b      	ldrh	r3, [r3, #12]
 800a55a:	4619      	mov	r1, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a562:	4413      	add	r3, r2
 800a564:	4619      	mov	r1, r3
 800a566:	6938      	ldr	r0, [r7, #16]
 800a568:	f7ff feec 	bl	800a344 <move_window>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d16f      	bne.n	800a652 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	899b      	ldrh	r3, [r3, #12]
 800a576:	461a      	mov	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a57e:	fb02 f201 	mul.w	r2, r2, r1
 800a582:	1a9b      	subs	r3, r3, r2
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	4413      	add	r3, r2
 800a588:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	461a      	mov	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4313      	orrs	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <get_fat+0xe8>
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	091b      	lsrs	r3, r3, #4
 800a5a4:	e002      	b.n	800a5ac <get_fat+0xee>
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ac:	617b      	str	r3, [r7, #20]
			break;
 800a5ae:	e055      	b.n	800a65c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	899b      	ldrh	r3, [r3, #12]
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	4619      	mov	r1, r3
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6938      	ldr	r0, [r7, #16]
 800a5ca:	f7ff febb 	bl	800a344 <move_window>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d140      	bne.n	800a656 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	8992      	ldrh	r2, [r2, #12]
 800a5e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5e6:	fb02 f200 	mul.w	r2, r2, r0
 800a5ea:	1a9b      	subs	r3, r3, r2
 800a5ec:	440b      	add	r3, r1
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fbf8 	bl	8009de4 <ld_word>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	617b      	str	r3, [r7, #20]
			break;
 800a5f8:	e030      	b.n	800a65c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	899b      	ldrh	r3, [r3, #12]
 800a602:	089b      	lsrs	r3, r3, #2
 800a604:	b29b      	uxth	r3, r3
 800a606:	4619      	mov	r1, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a60e:	4413      	add	r3, r2
 800a610:	4619      	mov	r1, r3
 800a612:	6938      	ldr	r0, [r7, #16]
 800a614:	f7ff fe96 	bl	800a344 <move_window>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d11d      	bne.n	800a65a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	8992      	ldrh	r2, [r2, #12]
 800a62c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a630:	fb02 f200 	mul.w	r2, r2, r0
 800a634:	1a9b      	subs	r3, r3, r2
 800a636:	440b      	add	r3, r1
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff fbeb 	bl	8009e14 <ld_dword>
 800a63e:	4603      	mov	r3, r0
 800a640:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a644:	617b      	str	r3, [r7, #20]
			break;
 800a646:	e009      	b.n	800a65c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a648:	2301      	movs	r3, #1
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	e006      	b.n	800a65c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a64e:	bf00      	nop
 800a650:	e004      	b.n	800a65c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a652:	bf00      	nop
 800a654:	e002      	b.n	800a65c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a656:	bf00      	nop
 800a658:	e000      	b.n	800a65c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a65a:	bf00      	nop
		}
	}

	return val;
 800a65c:	697b      	ldr	r3, [r7, #20]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a666:	b590      	push	{r4, r7, lr}
 800a668:	b089      	sub	sp, #36	; 0x24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a672:	2302      	movs	r3, #2
 800a674:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	f240 8102 	bls.w	800a882 <put_fat+0x21c>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	69db      	ldr	r3, [r3, #28]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	429a      	cmp	r2, r3
 800a686:	f080 80fc 	bcs.w	800a882 <put_fat+0x21c>
		switch (fs->fs_type) {
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b03      	cmp	r3, #3
 800a690:	f000 80b6 	beq.w	800a800 <put_fat+0x19a>
 800a694:	2b03      	cmp	r3, #3
 800a696:	f300 80fd 	bgt.w	800a894 <put_fat+0x22e>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d003      	beq.n	800a6a6 <put_fat+0x40>
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	f000 8083 	beq.w	800a7aa <put_fat+0x144>
 800a6a4:	e0f6      	b.n	800a894 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	61bb      	str	r3, [r7, #24]
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	085b      	lsrs	r3, r3, #1
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	899b      	ldrh	r3, [r3, #12]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7ff fe3b 	bl	800a344 <move_window>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6d2:	7ffb      	ldrb	r3, [r7, #31]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f040 80d6 	bne.w	800a886 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	61ba      	str	r2, [r7, #24]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	8992      	ldrh	r2, [r2, #12]
 800a6ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6ee:	fb02 f200 	mul.w	r2, r2, r0
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	440b      	add	r3, r1
 800a6f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00d      	beq.n	800a71e <put_fat+0xb8>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	b25b      	sxtb	r3, r3
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	b25a      	sxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	011b      	lsls	r3, r3, #4
 800a714:	b25b      	sxtb	r3, r3
 800a716:	4313      	orrs	r3, r2
 800a718:	b25b      	sxtb	r3, r3
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	e001      	b.n	800a722 <put_fat+0xbc>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	899b      	ldrh	r3, [r3, #12]
 800a734:	4619      	mov	r1, r3
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	fbb3 f3f1 	udiv	r3, r3, r1
 800a73c:	4413      	add	r3, r2
 800a73e:	4619      	mov	r1, r3
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff fdff 	bl	800a344 <move_window>
 800a746:	4603      	mov	r3, r0
 800a748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a74a:	7ffb      	ldrb	r3, [r7, #31]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 809c 	bne.w	800a88a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	899b      	ldrh	r3, [r3, #12]
 800a75c:	461a      	mov	r2, r3
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	fbb3 f0f2 	udiv	r0, r3, r2
 800a764:	fb02 f200 	mul.w	r2, r2, r0
 800a768:	1a9b      	subs	r3, r3, r2
 800a76a:	440b      	add	r3, r1
 800a76c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <put_fat+0x11a>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	091b      	lsrs	r3, r3, #4
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	e00e      	b.n	800a79e <put_fat+0x138>
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	b25b      	sxtb	r3, r3
 800a786:	f023 030f 	bic.w	r3, r3, #15
 800a78a:	b25a      	sxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	0a1b      	lsrs	r3, r3, #8
 800a790:	b25b      	sxtb	r3, r3
 800a792:	f003 030f 	and.w	r3, r3, #15
 800a796:	b25b      	sxtb	r3, r3
 800a798:	4313      	orrs	r3, r2
 800a79a:	b25b      	sxtb	r3, r3
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	70da      	strb	r2, [r3, #3]
			break;
 800a7a8:	e074      	b.n	800a894 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	899b      	ldrh	r3, [r3, #12]
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7be:	4413      	add	r3, r2
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff fdbe 	bl	800a344 <move_window>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7cc:	7ffb      	ldrb	r3, [r7, #31]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d15d      	bne.n	800a88e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	8992      	ldrh	r2, [r2, #12]
 800a7e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7e4:	fb02 f200 	mul.w	r2, r2, r0
 800a7e8:	1a9b      	subs	r3, r3, r2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	b292      	uxth	r2, r2
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fb31 	bl	8009e5a <st_word>
			fs->wflag = 1;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	70da      	strb	r2, [r3, #3]
			break;
 800a7fe:	e049      	b.n	800a894 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	899b      	ldrh	r3, [r3, #12]
 800a808:	089b      	lsrs	r3, r3, #2
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	4619      	mov	r1, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	fbb3 f3f1 	udiv	r3, r3, r1
 800a814:	4413      	add	r3, r2
 800a816:	4619      	mov	r1, r3
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f7ff fd93 	bl	800a344 <move_window>
 800a81e:	4603      	mov	r3, r0
 800a820:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a822:	7ffb      	ldrb	r3, [r7, #31]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d134      	bne.n	800a892 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	8992      	ldrh	r2, [r2, #12]
 800a83c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a840:	fb02 f200 	mul.w	r2, r2, r0
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	440b      	add	r3, r1
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff fae3 	bl	8009e14 <ld_dword>
 800a84e:	4603      	mov	r3, r0
 800a850:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a854:	4323      	orrs	r3, r4
 800a856:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	8992      	ldrh	r2, [r2, #12]
 800a866:	fbb3 f0f2 	udiv	r0, r3, r2
 800a86a:	fb02 f200 	mul.w	r2, r2, r0
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	440b      	add	r3, r1
 800a872:	6879      	ldr	r1, [r7, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fb0b 	bl	8009e90 <st_dword>
			fs->wflag = 1;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	70da      	strb	r2, [r3, #3]
			break;
 800a880:	e008      	b.n	800a894 <put_fat+0x22e>
		}
	}
 800a882:	bf00      	nop
 800a884:	e006      	b.n	800a894 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a886:	bf00      	nop
 800a888:	e004      	b.n	800a894 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a88a:	bf00      	nop
 800a88c:	e002      	b.n	800a894 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a88e:	bf00      	nop
 800a890:	e000      	b.n	800a894 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a892:	bf00      	nop
	return res;
 800a894:	7ffb      	ldrb	r3, [r7, #31]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3724      	adds	r7, #36	; 0x24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd90      	pop	{r4, r7, pc}

0800a89e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b088      	sub	sp, #32
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d904      	bls.n	800a8c4 <remove_chain+0x26>
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d301      	bcc.n	800a8c8 <remove_chain+0x2a>
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	e04b      	b.n	800a960 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00c      	beq.n	800a8e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	69b8      	ldr	r0, [r7, #24]
 800a8d6:	f7ff fec6 	bl	800a666 <put_fat>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a8de:	7ffb      	ldrb	r3, [r7, #31]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <remove_chain+0x4a>
 800a8e4:	7ffb      	ldrb	r3, [r7, #31]
 800a8e6:	e03b      	b.n	800a960 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a8e8:	68b9      	ldr	r1, [r7, #8]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff fde7 	bl	800a4be <get_fat>
 800a8f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d031      	beq.n	800a95c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <remove_chain+0x64>
 800a8fe:	2302      	movs	r3, #2
 800a900:	e02e      	b.n	800a960 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a908:	d101      	bne.n	800a90e <remove_chain+0x70>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e028      	b.n	800a960 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a90e:	2200      	movs	r2, #0
 800a910:	68b9      	ldr	r1, [r7, #8]
 800a912:	69b8      	ldr	r0, [r7, #24]
 800a914:	f7ff fea7 	bl	800a666 <put_fat>
 800a918:	4603      	mov	r3, r0
 800a91a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a91c:	7ffb      	ldrb	r3, [r7, #31]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <remove_chain+0x88>
 800a922:	7ffb      	ldrb	r3, [r7, #31]
 800a924:	e01c      	b.n	800a960 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	699a      	ldr	r2, [r3, #24]
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	3b02      	subs	r3, #2
 800a930:	429a      	cmp	r2, r3
 800a932:	d20b      	bcs.n	800a94c <remove_chain+0xae>
			fs->free_clst++;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	791b      	ldrb	r3, [r3, #4]
 800a942:	f043 0301 	orr.w	r3, r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	429a      	cmp	r2, r3
 800a958:	d3c6      	bcc.n	800a8e8 <remove_chain+0x4a>
 800a95a:	e000      	b.n	800a95e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a95c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10d      	bne.n	800a99a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d004      	beq.n	800a994 <create_chain+0x2c>
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	429a      	cmp	r2, r3
 800a992:	d31b      	bcc.n	800a9cc <create_chain+0x64>
 800a994:	2301      	movs	r3, #1
 800a996:	61bb      	str	r3, [r7, #24]
 800a998:	e018      	b.n	800a9cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff fd8e 	bl	800a4be <get_fat>
 800a9a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d801      	bhi.n	800a9ae <create_chain+0x46>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e070      	b.n	800aa90 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d101      	bne.n	800a9ba <create_chain+0x52>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	e06a      	b.n	800aa90 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d201      	bcs.n	800a9c8 <create_chain+0x60>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	e063      	b.n	800aa90 <create_chain+0x128>
		scl = clst;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	69db      	ldr	r3, [r3, #28]
 800a9da:	69fa      	ldr	r2, [r7, #28]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d307      	bcc.n	800a9f0 <create_chain+0x88>
				ncl = 2;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d901      	bls.n	800a9f0 <create_chain+0x88>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	e04f      	b.n	800aa90 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a9f0:	69f9      	ldr	r1, [r7, #28]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fd63 	bl	800a4be <get_fat>
 800a9f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00e      	beq.n	800aa1e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d003      	beq.n	800aa0e <create_chain+0xa6>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d101      	bne.n	800aa12 <create_chain+0xaa>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	e03e      	b.n	800aa90 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d1da      	bne.n	800a9d0 <create_chain+0x68>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e038      	b.n	800aa90 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aa1e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	69f9      	ldr	r1, [r7, #28]
 800aa26:	6938      	ldr	r0, [r7, #16]
 800aa28:	f7ff fe1d 	bl	800a666 <put_fat>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d109      	bne.n	800aa4a <create_chain+0xe2>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d006      	beq.n	800aa4a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa3c:	69fa      	ldr	r2, [r7, #28]
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6938      	ldr	r0, [r7, #16]
 800aa42:	f7ff fe10 	bl	800a666 <put_fat>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d116      	bne.n	800aa7e <create_chain+0x116>
		fs->last_clst = ncl;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	3b02      	subs	r3, #2
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d804      	bhi.n	800aa6e <create_chain+0x106>
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	1e5a      	subs	r2, r3, #1
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	791b      	ldrb	r3, [r3, #4]
 800aa72:	f043 0301 	orr.w	r3, r3, #1
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	711a      	strb	r2, [r3, #4]
 800aa7c:	e007      	b.n	800aa8e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d102      	bne.n	800aa8a <create_chain+0x122>
 800aa84:	f04f 33ff 	mov.w	r3, #4294967295
 800aa88:	e000      	b.n	800aa8c <create_chain+0x124>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aa8e:	69fb      	ldr	r3, [r7, #28]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3720      	adds	r7, #32
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	3304      	adds	r3, #4
 800aaae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	899b      	ldrh	r3, [r3, #12]
 800aab4:	461a      	mov	r2, r3
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	8952      	ldrh	r2, [r2, #10]
 800aac0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aac4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	613a      	str	r2, [r7, #16]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <clmt_clust+0x42>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e010      	b.n	800aafc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d307      	bcc.n	800aaf2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	617b      	str	r3, [r7, #20]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3304      	adds	r3, #4
 800aaee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aaf0:	e7e9      	b.n	800aac6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800aaf2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4413      	add	r3, r2
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	371c      	adds	r7, #28
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab1e:	d204      	bcs.n	800ab2a <dir_sdi+0x22>
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	f003 031f 	and.w	r3, r3, #31
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e071      	b.n	800ac12 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d106      	bne.n	800ab4e <dir_sdi+0x46>
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d902      	bls.n	800ab4e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10c      	bne.n	800ab6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	095b      	lsrs	r3, r3, #5
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	8912      	ldrh	r2, [r2, #8]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d301      	bcc.n	800ab64 <dir_sdi+0x5c>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e056      	b.n	800ac12 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	61da      	str	r2, [r3, #28]
 800ab6c:	e02d      	b.n	800abca <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	895b      	ldrh	r3, [r3, #10]
 800ab72:	461a      	mov	r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	899b      	ldrh	r3, [r3, #12]
 800ab78:	fb03 f302 	mul.w	r3, r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab7e:	e019      	b.n	800abb4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6979      	ldr	r1, [r7, #20]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff fc9a 	bl	800a4be <get_fat>
 800ab8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d101      	bne.n	800ab98 <dir_sdi+0x90>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e03c      	b.n	800ac12 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d904      	bls.n	800aba8 <dir_sdi+0xa0>
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d301      	bcc.n	800abac <dir_sdi+0xa4>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e032      	b.n	800ac12 <dir_sdi+0x10a>
			ofs -= csz;
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d2e1      	bcs.n	800ab80 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800abbc:	6979      	ldr	r1, [r7, #20]
 800abbe:	6938      	ldr	r0, [r7, #16]
 800abc0:	f7ff fc5e 	bl	800a480 <clust2sect>
 800abc4:	4602      	mov	r2, r0
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <dir_sdi+0xd4>
 800abd8:	2302      	movs	r3, #2
 800abda:	e01a      	b.n	800ac12 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	69da      	ldr	r2, [r3, #28]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	899b      	ldrh	r3, [r3, #12]
 800abe4:	4619      	mov	r1, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	fbb3 f3f1 	udiv	r3, r3, r1
 800abec:	441a      	add	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	899b      	ldrh	r3, [r3, #12]
 800abfc:	461a      	mov	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac04:	fb02 f200 	mul.w	r2, r2, r0
 800ac08:	1a9b      	subs	r3, r3, r2
 800ac0a:	18ca      	adds	r2, r1, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3718      	adds	r7, #24
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	3320      	adds	r3, #32
 800ac30:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <dir_next+0x28>
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac40:	d301      	bcc.n	800ac46 <dir_next+0x2c>
 800ac42:	2304      	movs	r3, #4
 800ac44:	e0bb      	b.n	800adbe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	899b      	ldrh	r3, [r3, #12]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac52:	fb02 f201 	mul.w	r2, r2, r1
 800ac56:	1a9b      	subs	r3, r3, r2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f040 809d 	bne.w	800ad98 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10b      	bne.n	800ac88 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	095b      	lsrs	r3, r3, #5
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	8912      	ldrh	r2, [r2, #8]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	f0c0 808d 	bcc.w	800ad98 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	61da      	str	r2, [r3, #28]
 800ac84:	2304      	movs	r3, #4
 800ac86:	e09a      	b.n	800adbe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	899b      	ldrh	r3, [r3, #12]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	8952      	ldrh	r2, [r2, #10]
 800ac98:	3a01      	subs	r2, #1
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d17b      	bne.n	800ad98 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f7ff fc08 	bl	800a4be <get_fat>
 800acae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d801      	bhi.n	800acba <dir_next+0xa0>
 800acb6:	2302      	movs	r3, #2
 800acb8:	e081      	b.n	800adbe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc0:	d101      	bne.n	800acc6 <dir_next+0xac>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e07b      	b.n	800adbe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	429a      	cmp	r2, r3
 800acce:	d359      	bcc.n	800ad84 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d104      	bne.n	800ace0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	61da      	str	r2, [r3, #28]
 800acdc:	2304      	movs	r3, #4
 800acde:	e06e      	b.n	800adbe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7ff fe3d 	bl	800a968 <create_chain>
 800acee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <dir_next+0xe0>
 800acf6:	2307      	movs	r3, #7
 800acf8:	e061      	b.n	800adbe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d101      	bne.n	800ad04 <dir_next+0xea>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e05c      	b.n	800adbe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d101      	bne.n	800ad10 <dir_next+0xf6>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e056      	b.n	800adbe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7ff fad3 	bl	800a2bc <sync_window>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <dir_next+0x106>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e04e      	b.n	800adbe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	899b      	ldrh	r3, [r3, #12]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	f7ff f8fc 	bl	8009f2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad32:	2300      	movs	r3, #0
 800ad34:	613b      	str	r3, [r7, #16]
 800ad36:	6979      	ldr	r1, [r7, #20]
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f7ff fba1 	bl	800a480 <clust2sect>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	635a      	str	r2, [r3, #52]	; 0x34
 800ad44:	e012      	b.n	800ad6c <dir_next+0x152>
						fs->wflag = 1;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff fab5 	bl	800a2bc <sync_window>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <dir_next+0x142>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e030      	b.n	800adbe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	613b      	str	r3, [r7, #16]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	635a      	str	r2, [r3, #52]	; 0x34
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	895b      	ldrh	r3, [r3, #10]
 800ad70:	461a      	mov	r2, r3
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d3e6      	bcc.n	800ad46 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	1ad2      	subs	r2, r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad8a:	6979      	ldr	r1, [r7, #20]
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7ff fb77 	bl	800a480 <clust2sect>
 800ad92:	4602      	mov	r2, r0
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	899b      	ldrh	r3, [r3, #12]
 800ada8:	461a      	mov	r2, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	fbb3 f0f2 	udiv	r0, r3, r2
 800adb0:	fb02 f200 	mul.w	r2, r2, r0
 800adb4:	1a9b      	subs	r3, r3, r2
 800adb6:	18ca      	adds	r2, r1, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b086      	sub	sp, #24
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800add6:	2100      	movs	r1, #0
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff fe95 	bl	800ab08 <dir_sdi>
 800adde:	4603      	mov	r3, r0
 800ade0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d12b      	bne.n	800ae40 <dir_alloc+0x7a>
		n = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	4619      	mov	r1, r3
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff faa6 	bl	800a344 <move_window>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d11d      	bne.n	800ae3e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2be5      	cmp	r3, #229	; 0xe5
 800ae0a:	d004      	beq.n	800ae16 <dir_alloc+0x50>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d107      	bne.n	800ae26 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d102      	bne.n	800ae2a <dir_alloc+0x64>
 800ae24:	e00c      	b.n	800ae40 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae26:	2300      	movs	r3, #0
 800ae28:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fef4 	bl	800ac1a <dir_next>
 800ae32:	4603      	mov	r3, r0
 800ae34:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0d7      	beq.n	800adec <dir_alloc+0x26>
 800ae3c:	e000      	b.n	800ae40 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae3e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d101      	bne.n	800ae4a <dir_alloc+0x84>
 800ae46:	2307      	movs	r3, #7
 800ae48:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	331a      	adds	r3, #26
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe ffbe 	bl	8009de4 <ld_word>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d109      	bne.n	800ae88 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	3314      	adds	r3, #20
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe ffb3 	bl	8009de4 <ld_word>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	041b      	lsls	r3, r3, #16
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ae88:	68fb      	ldr	r3, [r7, #12]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	60f8      	str	r0, [r7, #12]
 800ae9a:	60b9      	str	r1, [r7, #8]
 800ae9c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	331a      	adds	r3, #26
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	b292      	uxth	r2, r2
 800aea6:	4611      	mov	r1, r2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe ffd6 	bl	8009e5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d109      	bne.n	800aeca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	f103 0214 	add.w	r2, r3, #20
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	0c1b      	lsrs	r3, r3, #16
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4619      	mov	r1, r3
 800aec4:	4610      	mov	r0, r2
 800aec6:	f7fe ffc8 	bl	8009e5a <st_word>
	}
}
 800aeca:	bf00      	nop
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aed4:	b590      	push	{r4, r7, lr}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	331a      	adds	r3, #26
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe ff7e 	bl	8009de4 <ld_word>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <cmp_lfn+0x1e>
 800aeee:	2300      	movs	r3, #0
 800aef0:	e059      	b.n	800afa6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aefa:	1e5a      	subs	r2, r3, #1
 800aefc:	4613      	mov	r3, r2
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800af08:	2301      	movs	r3, #1
 800af0a:	81fb      	strh	r3, [r7, #14]
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	e033      	b.n	800af7a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800af12:	4a27      	ldr	r2, [pc, #156]	; (800afb0 <cmp_lfn+0xdc>)
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	4413      	add	r3, r2
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	4413      	add	r3, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe ff5f 	bl	8009de4 <ld_word>
 800af26:	4603      	mov	r3, r0
 800af28:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d01a      	beq.n	800af66 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2bfe      	cmp	r3, #254	; 0xfe
 800af34:	d812      	bhi.n	800af5c <cmp_lfn+0x88>
 800af36:	89bb      	ldrh	r3, [r7, #12]
 800af38:	4618      	mov	r0, r3
 800af3a:	f002 f8b5 	bl	800d0a8 <ff_wtoupper>
 800af3e:	4603      	mov	r3, r0
 800af40:	461c      	mov	r4, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	617a      	str	r2, [r7, #20]
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	4618      	mov	r0, r3
 800af52:	f002 f8a9 	bl	800d0a8 <ff_wtoupper>
 800af56:	4603      	mov	r3, r0
 800af58:	429c      	cmp	r4, r3
 800af5a:	d001      	beq.n	800af60 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800af5c:	2300      	movs	r3, #0
 800af5e:	e022      	b.n	800afa6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800af60:	89bb      	ldrh	r3, [r7, #12]
 800af62:	81fb      	strh	r3, [r7, #14]
 800af64:	e006      	b.n	800af74 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800af66:	89bb      	ldrh	r3, [r7, #12]
 800af68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d001      	beq.n	800af74 <cmp_lfn+0xa0>
 800af70:	2300      	movs	r3, #0
 800af72:	e018      	b.n	800afa6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	3301      	adds	r3, #1
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b0c      	cmp	r3, #12
 800af7e:	d9c8      	bls.n	800af12 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00b      	beq.n	800afa4 <cmp_lfn+0xd0>
 800af8c:	89fb      	ldrh	r3, [r7, #14]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d008      	beq.n	800afa4 <cmp_lfn+0xd0>
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	4413      	add	r3, r2
 800af9a:	881b      	ldrh	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <cmp_lfn+0xd0>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e000      	b.n	800afa6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800afa4:	2301      	movs	r3, #1
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	371c      	adds	r7, #28
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd90      	pop	{r4, r7, pc}
 800afae:	bf00      	nop
 800afb0:	0800dd3c 	.word	0x0800dd3c

0800afb4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4611      	mov	r1, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	460b      	mov	r3, r1
 800afc4:	71fb      	strb	r3, [r7, #7]
 800afc6:	4613      	mov	r3, r2
 800afc8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	330d      	adds	r3, #13
 800afce:	79ba      	ldrb	r2, [r7, #6]
 800afd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	330b      	adds	r3, #11
 800afd6:	220f      	movs	r2, #15
 800afd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	330c      	adds	r3, #12
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	331a      	adds	r3, #26
 800afe6:	2100      	movs	r1, #0
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe ff36 	bl	8009e5a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	1e5a      	subs	r2, r3, #1
 800aff2:	4613      	mov	r3, r2
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	82fb      	strh	r3, [r7, #22]
 800b002:	2300      	movs	r3, #0
 800b004:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b006:	8afb      	ldrh	r3, [r7, #22]
 800b008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d007      	beq.n	800b020 <put_lfn+0x6c>
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	61fa      	str	r2, [r7, #28]
 800b016:	005b      	lsls	r3, r3, #1
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4413      	add	r3, r2
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b020:	4a17      	ldr	r2, [pc, #92]	; (800b080 <put_lfn+0xcc>)
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	4413      	add	r3, r2
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	4413      	add	r3, r2
 800b02e:	8afa      	ldrh	r2, [r7, #22]
 800b030:	4611      	mov	r1, r2
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe ff11 	bl	8009e5a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b038:	8afb      	ldrh	r3, [r7, #22]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <put_lfn+0x90>
 800b03e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b042:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	3301      	adds	r3, #1
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	2b0c      	cmp	r3, #12
 800b04e:	d9da      	bls.n	800b006 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b050:	8afb      	ldrh	r3, [r7, #22]
 800b052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b056:	4293      	cmp	r3, r2
 800b058:	d006      	beq.n	800b068 <put_lfn+0xb4>
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4413      	add	r3, r2
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d103      	bne.n	800b070 <put_lfn+0xbc>
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	79fa      	ldrb	r2, [r7, #7]
 800b074:	701a      	strb	r2, [r3, #0]
}
 800b076:	bf00      	nop
 800b078:	3720      	adds	r7, #32
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	0800dd3c 	.word	0x0800dd3c

0800b084 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08c      	sub	sp, #48	; 0x30
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b092:	220b      	movs	r2, #11
 800b094:	68b9      	ldr	r1, [r7, #8]
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f7fe ff26 	bl	8009ee8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b05      	cmp	r3, #5
 800b0a0:	d929      	bls.n	800b0f6 <gen_numname+0x72>
		sr = seq;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b0a6:	e020      	b.n	800b0ea <gen_numname+0x66>
			wc = *lfn++;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	1c9a      	adds	r2, r3, #2
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0b6:	e015      	b.n	800b0e4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	005a      	lsls	r2, r3, #1
 800b0bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	4413      	add	r3, r2
 800b0c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b0c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0c8:	085b      	lsrs	r3, r3, #1
 800b0ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <gen_numname+0x5a>
 800b0d6:	69fa      	ldr	r2, [r7, #28]
 800b0d8:	4b31      	ldr	r3, [pc, #196]	; (800b1a0 <gen_numname+0x11c>)
 800b0da:	4053      	eors	r3, r2
 800b0dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e6:	2b0f      	cmp	r3, #15
 800b0e8:	d9e6      	bls.n	800b0b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1da      	bne.n	800b0a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b0f6:	2307      	movs	r3, #7
 800b0f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	f003 030f 	and.w	r3, r3, #15
 800b102:	b2db      	uxtb	r3, r3
 800b104:	3330      	adds	r3, #48	; 0x30
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b10a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b10e:	2b39      	cmp	r3, #57	; 0x39
 800b110:	d904      	bls.n	800b11c <gen_numname+0x98>
 800b112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b116:	3307      	adds	r3, #7
 800b118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	1e5a      	subs	r2, r3, #1
 800b120:	62ba      	str	r2, [r7, #40]	; 0x28
 800b122:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b126:	4413      	add	r3, r2
 800b128:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b12c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	091b      	lsrs	r3, r3, #4
 800b134:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1de      	bne.n	800b0fa <gen_numname+0x76>
	ns[i] = '~';
 800b13c:	f107 0214 	add.w	r2, r7, #20
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	4413      	add	r3, r2
 800b144:	227e      	movs	r2, #126	; 0x7e
 800b146:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b148:	2300      	movs	r3, #0
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24
 800b14c:	e002      	b.n	800b154 <gen_numname+0xd0>
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	3301      	adds	r3, #1
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
 800b154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	429a      	cmp	r2, r3
 800b15a:	d205      	bcs.n	800b168 <gen_numname+0xe4>
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	4413      	add	r3, r2
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b20      	cmp	r3, #32
 800b166:	d1f2      	bne.n	800b14e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	2b07      	cmp	r3, #7
 800b16c:	d808      	bhi.n	800b180 <gen_numname+0xfc>
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	62ba      	str	r2, [r7, #40]	; 0x28
 800b174:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b178:	4413      	add	r3, r2
 800b17a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b17e:	e000      	b.n	800b182 <gen_numname+0xfe>
 800b180:	2120      	movs	r1, #32
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	627a      	str	r2, [r7, #36]	; 0x24
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4413      	add	r3, r2
 800b18c:	460a      	mov	r2, r1
 800b18e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	2b07      	cmp	r3, #7
 800b194:	d9e8      	bls.n	800b168 <gen_numname+0xe4>
}
 800b196:	bf00      	nop
 800b198:	bf00      	nop
 800b19a:	3730      	adds	r7, #48	; 0x30
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	00011021 	.word	0x00011021

0800b1a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b1b0:	230b      	movs	r3, #11
 800b1b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	0852      	lsrs	r2, r2, #1
 800b1ba:	01db      	lsls	r3, r3, #7
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	1c59      	adds	r1, r3, #1
 800b1c4:	6079      	str	r1, [r7, #4]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	60bb      	str	r3, [r7, #8]
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1ed      	bne.n	800b1b4 <sum_sfn+0x10>
	return sum;
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff fc86 	bl	800ab08 <dir_sdi>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <dir_find+0x24>
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	e0a9      	b.n	800b35e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b20a:	23ff      	movs	r3, #255	; 0xff
 800b20c:	753b      	strb	r3, [r7, #20]
 800b20e:	7d3b      	ldrb	r3, [r7, #20]
 800b210:	757b      	strb	r3, [r7, #21]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	4619      	mov	r1, r3
 800b220:	6938      	ldr	r0, [r7, #16]
 800b222:	f7ff f88f 	bl	800a344 <move_window>
 800b226:	4603      	mov	r3, r0
 800b228:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f040 8090 	bne.w	800b352 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b23a:	7dbb      	ldrb	r3, [r7, #22]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d102      	bne.n	800b246 <dir_find+0x60>
 800b240:	2304      	movs	r3, #4
 800b242:	75fb      	strb	r3, [r7, #23]
 800b244:	e08a      	b.n	800b35c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	330b      	adds	r3, #11
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b252:	73fb      	strb	r3, [r7, #15]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	7bfa      	ldrb	r2, [r7, #15]
 800b258:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b25a:	7dbb      	ldrb	r3, [r7, #22]
 800b25c:	2be5      	cmp	r3, #229	; 0xe5
 800b25e:	d007      	beq.n	800b270 <dir_find+0x8a>
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	f003 0308 	and.w	r3, r3, #8
 800b266:	2b00      	cmp	r3, #0
 800b268:	d009      	beq.n	800b27e <dir_find+0x98>
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b0f      	cmp	r3, #15
 800b26e:	d006      	beq.n	800b27e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b270:	23ff      	movs	r3, #255	; 0xff
 800b272:	757b      	strb	r3, [r7, #21]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f04f 32ff 	mov.w	r2, #4294967295
 800b27a:	631a      	str	r2, [r3, #48]	; 0x30
 800b27c:	e05e      	b.n	800b33c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	2b0f      	cmp	r3, #15
 800b282:	d136      	bne.n	800b2f2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d154      	bne.n	800b33c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b292:	7dbb      	ldrb	r3, [r7, #22]
 800b294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00d      	beq.n	800b2b8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	7b5b      	ldrb	r3, [r3, #13]
 800b2a2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b2a4:	7dbb      	ldrb	r3, [r7, #22]
 800b2a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2aa:	75bb      	strb	r3, [r7, #22]
 800b2ac:	7dbb      	ldrb	r3, [r7, #22]
 800b2ae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	695a      	ldr	r2, [r3, #20]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b2b8:	7dba      	ldrb	r2, [r7, #22]
 800b2ba:	7d7b      	ldrb	r3, [r7, #21]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d115      	bne.n	800b2ec <dir_find+0x106>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	330d      	adds	r3, #13
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	7d3a      	ldrb	r2, [r7, #20]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d10e      	bne.n	800b2ec <dir_find+0x106>
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	691a      	ldr	r2, [r3, #16]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f7ff fdfb 	bl	800aed4 <cmp_lfn>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <dir_find+0x106>
 800b2e4:	7d7b      	ldrb	r3, [r7, #21]
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	e000      	b.n	800b2ee <dir_find+0x108>
 800b2ec:	23ff      	movs	r3, #255	; 0xff
 800b2ee:	757b      	strb	r3, [r7, #21]
 800b2f0:	e024      	b.n	800b33c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b2f2:	7d7b      	ldrb	r3, [r7, #21]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d109      	bne.n	800b30c <dir_find+0x126>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a1b      	ldr	r3, [r3, #32]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff ff51 	bl	800b1a4 <sum_sfn>
 800b302:	4603      	mov	r3, r0
 800b304:	461a      	mov	r2, r3
 800b306:	7d3b      	ldrb	r3, [r7, #20]
 800b308:	4293      	cmp	r3, r2
 800b30a:	d024      	beq.n	800b356 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10a      	bne.n	800b330 <dir_find+0x14a>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a18      	ldr	r0, [r3, #32]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3324      	adds	r3, #36	; 0x24
 800b322:	220b      	movs	r2, #11
 800b324:	4619      	mov	r1, r3
 800b326:	f7fe fe1b 	bl	8009f60 <mem_cmp>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d014      	beq.n	800b35a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b330:	23ff      	movs	r3, #255	; 0xff
 800b332:	757b      	strb	r3, [r7, #21]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f04f 32ff 	mov.w	r2, #4294967295
 800b33a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b33c:	2100      	movs	r1, #0
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fc6b 	bl	800ac1a <dir_next>
 800b344:	4603      	mov	r3, r0
 800b346:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f43f af65 	beq.w	800b21a <dir_find+0x34>
 800b350:	e004      	b.n	800b35c <dir_find+0x176>
		if (res != FR_OK) break;
 800b352:	bf00      	nop
 800b354:	e002      	b.n	800b35c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b356:	bf00      	nop
 800b358:	e000      	b.n	800b35c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b35a:	bf00      	nop

	return res;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08c      	sub	sp, #48	; 0x30
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b37c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <dir_register+0x20>
 800b384:	2306      	movs	r3, #6
 800b386:	e0e0      	b.n	800b54a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b388:	2300      	movs	r3, #0
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
 800b38c:	e002      	b.n	800b394 <dir_register+0x2c>
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	3301      	adds	r3, #1
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	691a      	ldr	r2, [r3, #16]
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	4413      	add	r3, r2
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1f4      	bne.n	800b38e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b3aa:	f107 030c 	add.w	r3, r7, #12
 800b3ae:	220c      	movs	r2, #12
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fe fd99 	bl	8009ee8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d032      	beq.n	800b426 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2240      	movs	r2, #64	; 0x40
 800b3c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3cc:	e016      	b.n	800b3fc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	691a      	ldr	r2, [r3, #16]
 800b3d8:	f107 010c 	add.w	r1, r7, #12
 800b3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3de:	f7ff fe51 	bl	800b084 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff feff 	bl	800b1e6 <dir_find>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b3ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	2b63      	cmp	r3, #99	; 0x63
 800b400:	d9e5      	bls.n	800b3ce <dir_register+0x66>
 800b402:	e000      	b.n	800b406 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b404:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b408:	2b64      	cmp	r3, #100	; 0x64
 800b40a:	d101      	bne.n	800b410 <dir_register+0xa8>
 800b40c:	2307      	movs	r3, #7
 800b40e:	e09c      	b.n	800b54a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b414:	2b04      	cmp	r3, #4
 800b416:	d002      	beq.n	800b41e <dir_register+0xb6>
 800b418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b41c:	e095      	b.n	800b54a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b41e:	7dfa      	ldrb	r2, [r7, #23]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	f003 0302 	and.w	r3, r3, #2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d007      	beq.n	800b440 <dir_register+0xd8>
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	330c      	adds	r3, #12
 800b434:	4a47      	ldr	r2, [pc, #284]	; (800b554 <dir_register+0x1ec>)
 800b436:	fba2 2303 	umull	r2, r3, r2, r3
 800b43a:	089b      	lsrs	r3, r3, #2
 800b43c:	3301      	adds	r3, #1
 800b43e:	e000      	b.n	800b442 <dir_register+0xda>
 800b440:	2301      	movs	r3, #1
 800b442:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b444:	6a39      	ldr	r1, [r7, #32]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff fcbd 	bl	800adc6 <dir_alloc>
 800b44c:	4603      	mov	r3, r0
 800b44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b456:	2b00      	cmp	r3, #0
 800b458:	d148      	bne.n	800b4ec <dir_register+0x184>
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	623b      	str	r3, [r7, #32]
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d042      	beq.n	800b4ec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	695a      	ldr	r2, [r3, #20]
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	015b      	lsls	r3, r3, #5
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fb48 	bl	800ab08 <dir_sdi>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b47e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b482:	2b00      	cmp	r3, #0
 800b484:	d132      	bne.n	800b4ec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3324      	adds	r3, #36	; 0x24
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff fe8a 	bl	800b1a4 <sum_sfn>
 800b490:	4603      	mov	r3, r0
 800b492:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	4619      	mov	r1, r3
 800b49a:	69f8      	ldr	r0, [r7, #28]
 800b49c:	f7fe ff52 	bl	800a344 <move_window>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d11d      	bne.n	800b4ea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	6918      	ldr	r0, [r3, #16]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a19      	ldr	r1, [r3, #32]
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	7efb      	ldrb	r3, [r7, #27]
 800b4bc:	f7ff fd7a 	bl	800afb4 <put_lfn>
				fs->wflag = 1;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff fba6 	bl	800ac1a <dir_next>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b4d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d107      	bne.n	800b4ec <dir_register+0x184>
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	623b      	str	r3, [r7, #32]
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1d5      	bne.n	800b494 <dir_register+0x12c>
 800b4e8:	e000      	b.n	800b4ec <dir_register+0x184>
				if (res != FR_OK) break;
 800b4ea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b4ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d128      	bne.n	800b546 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	69f8      	ldr	r0, [r7, #28]
 800b4fc:	f7fe ff22 	bl	800a344 <move_window>
 800b500:	4603      	mov	r3, r0
 800b502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d11b      	bne.n	800b546 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	2220      	movs	r2, #32
 800b514:	2100      	movs	r1, #0
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fd07 	bl	8009f2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a18      	ldr	r0, [r3, #32]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3324      	adds	r3, #36	; 0x24
 800b524:	220b      	movs	r2, #11
 800b526:	4619      	mov	r1, r3
 800b528:	f7fe fcde 	bl	8009ee8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	330c      	adds	r3, #12
 800b538:	f002 0218 	and.w	r2, r2, #24
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	2201      	movs	r2, #1
 800b544:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3730      	adds	r7, #48	; 0x30
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	4ec4ec4f 	.word	0x4ec4ec4f

0800b558 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2200      	movs	r2, #0
 800b56c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 80c9 	beq.w	800b70a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b580:	d032      	beq.n	800b5e8 <get_fileinfo+0x90>
			i = j = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	61bb      	str	r3, [r7, #24]
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b58a:	e01b      	b.n	800b5c4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b58c:	89fb      	ldrh	r3, [r7, #14]
 800b58e:	2100      	movs	r1, #0
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fd4d 	bl	800d030 <ff_convert>
 800b596:	4603      	mov	r3, r0
 800b598:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b59a:	89fb      	ldrh	r3, [r7, #14]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <get_fileinfo+0x4e>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	61fb      	str	r3, [r7, #28]
 800b5a4:	e01a      	b.n	800b5dc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	2bfe      	cmp	r3, #254	; 0xfe
 800b5aa:	d902      	bls.n	800b5b2 <get_fileinfo+0x5a>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61fb      	str	r3, [r7, #28]
 800b5b0:	e014      	b.n	800b5dc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	61fa      	str	r2, [r7, #28]
 800b5b8:	89fa      	ldrh	r2, [r7, #14]
 800b5ba:	b2d1      	uxtb	r1, r2
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	4413      	add	r3, r2
 800b5c0:	460a      	mov	r2, r1
 800b5c2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	1c59      	adds	r1, r3, #1
 800b5cc:	61b9      	str	r1, [r7, #24]
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	4413      	add	r3, r2
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	81fb      	strh	r3, [r7, #14]
 800b5d6:	89fb      	ldrh	r3, [r7, #14]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1d7      	bne.n	800b58c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	3316      	adds	r3, #22
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61bb      	str	r3, [r7, #24]
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3316      	adds	r3, #22
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b5fc:	e04c      	b.n	800b698 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1a      	ldr	r2, [r3, #32]
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	1c59      	adds	r1, r3, #1
 800b606:	61f9      	str	r1, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	2b20      	cmp	r3, #32
 800b612:	d100      	bne.n	800b616 <get_fileinfo+0xbe>
 800b614:	e040      	b.n	800b698 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b616:	7dfb      	ldrb	r3, [r7, #23]
 800b618:	2b05      	cmp	r3, #5
 800b61a:	d101      	bne.n	800b620 <get_fileinfo+0xc8>
 800b61c:	23e5      	movs	r3, #229	; 0xe5
 800b61e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	2b09      	cmp	r3, #9
 800b624:	d10f      	bne.n	800b646 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b626:	89bb      	ldrh	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d105      	bne.n	800b638 <get_fileinfo+0xe0>
 800b62c:	683a      	ldr	r2, [r7, #0]
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	4413      	add	r3, r2
 800b632:	3316      	adds	r3, #22
 800b634:	222e      	movs	r2, #46	; 0x2e
 800b636:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	61ba      	str	r2, [r7, #24]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	4413      	add	r3, r2
 800b642:	222e      	movs	r2, #46	; 0x2e
 800b644:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	4413      	add	r3, r2
 800b64c:	3309      	adds	r3, #9
 800b64e:	7dfa      	ldrb	r2, [r7, #23]
 800b650:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b652:	89bb      	ldrh	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11c      	bne.n	800b692 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	2b40      	cmp	r3, #64	; 0x40
 800b65c:	d913      	bls.n	800b686 <get_fileinfo+0x12e>
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	2b5a      	cmp	r3, #90	; 0x5a
 800b662:	d810      	bhi.n	800b686 <get_fileinfo+0x12e>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	330c      	adds	r3, #12
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	2b08      	cmp	r3, #8
 800b672:	d901      	bls.n	800b678 <get_fileinfo+0x120>
 800b674:	2310      	movs	r3, #16
 800b676:	e000      	b.n	800b67a <get_fileinfo+0x122>
 800b678:	2308      	movs	r3, #8
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	3320      	adds	r3, #32
 800b684:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	4413      	add	r3, r2
 800b68c:	3316      	adds	r3, #22
 800b68e:	7dfa      	ldrb	r2, [r7, #23]
 800b690:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	3301      	adds	r3, #1
 800b696:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2b0a      	cmp	r3, #10
 800b69c:	d9af      	bls.n	800b5fe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b69e:	89bb      	ldrh	r3, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10d      	bne.n	800b6c0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3316      	adds	r3, #22
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <get_fileinfo+0x168>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	3309      	adds	r3, #9
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	7ada      	ldrb	r2, [r3, #11]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	331c      	adds	r3, #28
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe fb99 	bl	8009e14 <ld_dword>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	3316      	adds	r3, #22
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fb90 	bl	8009e14 <ld_dword>
 800b6f4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	80da      	strh	r2, [r3, #6]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	0c1b      	lsrs	r3, r3, #16
 800b702:	b29a      	uxth	r2, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	809a      	strh	r2, [r3, #4]
 800b708:	e000      	b.n	800b70c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b70a:	bf00      	nop
}
 800b70c:	3720      	adds	r7, #32
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08a      	sub	sp, #40	; 0x28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	2300      	movs	r3, #0
 800b72e:	617b      	str	r3, [r7, #20]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	61ba      	str	r2, [r7, #24]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	4413      	add	r3, r2
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b744:	2b1f      	cmp	r3, #31
 800b746:	d940      	bls.n	800b7ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b74a:	2b2f      	cmp	r3, #47	; 0x2f
 800b74c:	d006      	beq.n	800b75c <create_name+0x48>
 800b74e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b750:	2b5c      	cmp	r3, #92	; 0x5c
 800b752:	d110      	bne.n	800b776 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b754:	e002      	b.n	800b75c <create_name+0x48>
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	3301      	adds	r3, #1
 800b75a:	61bb      	str	r3, [r7, #24]
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	4413      	add	r3, r2
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b2f      	cmp	r3, #47	; 0x2f
 800b766:	d0f6      	beq.n	800b756 <create_name+0x42>
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	4413      	add	r3, r2
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b5c      	cmp	r3, #92	; 0x5c
 800b772:	d0f0      	beq.n	800b756 <create_name+0x42>
			break;
 800b774:	e02a      	b.n	800b7cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2bfe      	cmp	r3, #254	; 0xfe
 800b77a:	d901      	bls.n	800b780 <create_name+0x6c>
 800b77c:	2306      	movs	r3, #6
 800b77e:	e177      	b.n	800ba70 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b782:	b2db      	uxtb	r3, r3
 800b784:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b788:	2101      	movs	r1, #1
 800b78a:	4618      	mov	r0, r3
 800b78c:	f001 fc50 	bl	800d030 <ff_convert>
 800b790:	4603      	mov	r3, r0
 800b792:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <create_name+0x8a>
 800b79a:	2306      	movs	r3, #6
 800b79c:	e168      	b.n	800ba70 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b79e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7a0:	2b7f      	cmp	r3, #127	; 0x7f
 800b7a2:	d809      	bhi.n	800b7b8 <create_name+0xa4>
 800b7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	48b3      	ldr	r0, [pc, #716]	; (800ba78 <create_name+0x364>)
 800b7aa:	f7fe fc00 	bl	8009fae <chk_chr>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <create_name+0xa4>
 800b7b4:	2306      	movs	r3, #6
 800b7b6:	e15b      	b.n	800ba70 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	617a      	str	r2, [r7, #20]
 800b7be:	005b      	lsls	r3, r3, #1
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b7c8:	e7b4      	b.n	800b734 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b7ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	441a      	add	r2, r3
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b7d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7d8:	2b1f      	cmp	r3, #31
 800b7da:	d801      	bhi.n	800b7e0 <create_name+0xcc>
 800b7dc:	2304      	movs	r3, #4
 800b7de:	e000      	b.n	800b7e2 <create_name+0xce>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b7e6:	e011      	b.n	800b80c <create_name+0xf8>
		w = lfn[di - 1];
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b7ee:	4413      	add	r3, r2
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b7fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	d002      	beq.n	800b806 <create_name+0xf2>
 800b800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b802:	2b2e      	cmp	r3, #46	; 0x2e
 800b804:	d106      	bne.n	800b814 <create_name+0x100>
		di--;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	3b01      	subs	r3, #1
 800b80a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1ea      	bne.n	800b7e8 <create_name+0xd4>
 800b812:	e000      	b.n	800b816 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b814:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <create_name+0x118>
 800b828:	2306      	movs	r3, #6
 800b82a:	e121      	b.n	800ba70 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3324      	adds	r3, #36	; 0x24
 800b830:	220b      	movs	r2, #11
 800b832:	2120      	movs	r1, #32
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fb78 	bl	8009f2a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b83a:	2300      	movs	r3, #0
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	e002      	b.n	800b846 <create_name+0x132>
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	3301      	adds	r3, #1
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	2b20      	cmp	r3, #32
 800b852:	d0f5      	beq.n	800b840 <create_name+0x12c>
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	005b      	lsls	r3, r3, #1
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	2b2e      	cmp	r3, #46	; 0x2e
 800b860:	d0ee      	beq.n	800b840 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d009      	beq.n	800b87c <create_name+0x168>
 800b868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b86c:	f043 0303 	orr.w	r3, r3, #3
 800b870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b874:	e002      	b.n	800b87c <create_name+0x168>
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	3b01      	subs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d009      	beq.n	800b896 <create_name+0x182>
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b888:	4413      	add	r3, r2
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	2b2e      	cmp	r3, #46	; 0x2e
 800b894:	d1ef      	bne.n	800b876 <create_name+0x162>

	i = b = 0; ni = 8;
 800b896:	2300      	movs	r3, #0
 800b898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b89c:	2300      	movs	r3, #0
 800b89e:	623b      	str	r3, [r7, #32]
 800b8a0:	2308      	movs	r3, #8
 800b8a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	61ba      	str	r2, [r7, #24]
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 8090 	beq.w	800b9dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b8bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	d006      	beq.n	800b8d0 <create_name+0x1bc>
 800b8c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8c6:	d10a      	bne.n	800b8de <create_name+0x1ca>
 800b8c8:	69ba      	ldr	r2, [r7, #24]
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d006      	beq.n	800b8de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d4:	f043 0303 	orr.w	r3, r3, #3
 800b8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8dc:	e07d      	b.n	800b9da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b8de:	6a3a      	ldr	r2, [r7, #32]
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d203      	bcs.n	800b8ee <create_name+0x1da>
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d123      	bne.n	800b936 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	2b0b      	cmp	r3, #11
 800b8f2:	d106      	bne.n	800b902 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f8:	f043 0303 	orr.w	r3, r3, #3
 800b8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b900:	e06f      	b.n	800b9e2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b902:	69ba      	ldr	r2, [r7, #24]
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	429a      	cmp	r2, r3
 800b908:	d005      	beq.n	800b916 <create_name+0x202>
 800b90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b90e:	f043 0303 	orr.w	r3, r3, #3
 800b912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d860      	bhi.n	800b9e0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	61bb      	str	r3, [r7, #24]
 800b922:	2308      	movs	r3, #8
 800b924:	623b      	str	r3, [r7, #32]
 800b926:	230b      	movs	r3, #11
 800b928:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b92a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b934:	e051      	b.n	800b9da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b938:	2b7f      	cmp	r3, #127	; 0x7f
 800b93a:	d914      	bls.n	800b966 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b93c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b93e:	2100      	movs	r1, #0
 800b940:	4618      	mov	r0, r3
 800b942:	f001 fb75 	bl	800d030 <ff_convert>
 800b946:	4603      	mov	r3, r0
 800b948:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b94a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d004      	beq.n	800b95a <create_name+0x246>
 800b950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b952:	3b80      	subs	r3, #128	; 0x80
 800b954:	4a49      	ldr	r2, [pc, #292]	; (800ba7c <create_name+0x368>)
 800b956:	5cd3      	ldrb	r3, [r2, r3]
 800b958:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b95a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b95e:	f043 0302 	orr.w	r3, r3, #2
 800b962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d007      	beq.n	800b97c <create_name+0x268>
 800b96c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b96e:	4619      	mov	r1, r3
 800b970:	4843      	ldr	r0, [pc, #268]	; (800ba80 <create_name+0x36c>)
 800b972:	f7fe fb1c 	bl	8009fae <chk_chr>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d008      	beq.n	800b98e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b97c:	235f      	movs	r3, #95	; 0x5f
 800b97e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b984:	f043 0303 	orr.w	r3, r3, #3
 800b988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b98c:	e01b      	b.n	800b9c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b98e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b990:	2b40      	cmp	r3, #64	; 0x40
 800b992:	d909      	bls.n	800b9a8 <create_name+0x294>
 800b994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b996:	2b5a      	cmp	r3, #90	; 0x5a
 800b998:	d806      	bhi.n	800b9a8 <create_name+0x294>
					b |= 2;
 800b99a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b99e:	f043 0302 	orr.w	r3, r3, #2
 800b9a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9a6:	e00e      	b.n	800b9c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9aa:	2b60      	cmp	r3, #96	; 0x60
 800b9ac:	d90b      	bls.n	800b9c6 <create_name+0x2b2>
 800b9ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b0:	2b7a      	cmp	r3, #122	; 0x7a
 800b9b2:	d808      	bhi.n	800b9c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b9b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9b8:	f043 0301 	orr.w	r3, r3, #1
 800b9bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c2:	3b20      	subs	r3, #32
 800b9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	623a      	str	r2, [r7, #32]
 800b9cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9ce:	b2d1      	uxtb	r1, r2
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	460a      	mov	r2, r1
 800b9d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b9da:	e763      	b.n	800b8a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b9dc:	bf00      	nop
 800b9de:	e000      	b.n	800b9e2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b9e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9e8:	2be5      	cmp	r3, #229	; 0xe5
 800b9ea:	d103      	bne.n	800b9f4 <create_name+0x2e0>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2205      	movs	r2, #5
 800b9f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	2b08      	cmp	r3, #8
 800b9f8:	d104      	bne.n	800ba04 <create_name+0x2f0>
 800b9fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ba04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba08:	f003 030c 	and.w	r3, r3, #12
 800ba0c:	2b0c      	cmp	r3, #12
 800ba0e:	d005      	beq.n	800ba1c <create_name+0x308>
 800ba10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba14:	f003 0303 	and.w	r3, r3, #3
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d105      	bne.n	800ba28 <create_name+0x314>
 800ba1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba20:	f043 0302 	orr.w	r3, r3, #2
 800ba24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ba28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d117      	bne.n	800ba64 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ba34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba38:	f003 0303 	and.w	r3, r3, #3
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d105      	bne.n	800ba4c <create_name+0x338>
 800ba40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba44:	f043 0310 	orr.w	r3, r3, #16
 800ba48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ba4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba50:	f003 030c 	and.w	r3, r3, #12
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d105      	bne.n	800ba64 <create_name+0x350>
 800ba58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba5c:	f043 0308 	orr.w	r3, r3, #8
 800ba60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ba6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3728      	adds	r7, #40	; 0x28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	0800dc18 	.word	0x0800dc18
 800ba7c:	0800dcbc 	.word	0x0800dcbc
 800ba80:	0800dc24 	.word	0x0800dc24

0800ba84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ba98:	e002      	b.n	800baa0 <follow_path+0x1c>
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	603b      	str	r3, [r7, #0]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b2f      	cmp	r3, #47	; 0x2f
 800baa6:	d0f8      	beq.n	800ba9a <follow_path+0x16>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b5c      	cmp	r3, #92	; 0x5c
 800baae:	d0f4      	beq.n	800ba9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2200      	movs	r2, #0
 800bab4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b1f      	cmp	r3, #31
 800babc:	d80a      	bhi.n	800bad4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2280      	movs	r2, #128	; 0x80
 800bac2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bac6:	2100      	movs	r1, #0
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff f81d 	bl	800ab08 <dir_sdi>
 800bace:	4603      	mov	r3, r0
 800bad0:	75fb      	strb	r3, [r7, #23]
 800bad2:	e048      	b.n	800bb66 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bad4:	463b      	mov	r3, r7
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff fe1b 	bl	800b714 <create_name>
 800bade:	4603      	mov	r3, r0
 800bae0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d139      	bne.n	800bb5c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f7ff fb7c 	bl	800b1e6 <dir_find>
 800baee:	4603      	mov	r3, r0
 800baf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00a      	beq.n	800bb16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb00:	7dfb      	ldrb	r3, [r7, #23]
 800bb02:	2b04      	cmp	r3, #4
 800bb04:	d12c      	bne.n	800bb60 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb06:	7afb      	ldrb	r3, [r7, #11]
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d127      	bne.n	800bb60 <follow_path+0xdc>
 800bb10:	2305      	movs	r3, #5
 800bb12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb14:	e024      	b.n	800bb60 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb16:	7afb      	ldrb	r3, [r7, #11]
 800bb18:	f003 0304 	and.w	r3, r3, #4
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d121      	bne.n	800bb64 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	799b      	ldrb	r3, [r3, #6]
 800bb24:	f003 0310 	and.w	r3, r3, #16
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bb2c:	2305      	movs	r3, #5
 800bb2e:	75fb      	strb	r3, [r7, #23]
 800bb30:	e019      	b.n	800bb66 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	8992      	ldrh	r2, [r2, #12]
 800bb40:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb44:	fb02 f200 	mul.w	r2, r2, r0
 800bb48:	1a9b      	subs	r3, r3, r2
 800bb4a:	440b      	add	r3, r1
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7ff f980 	bl	800ae54 <ld_clust>
 800bb54:	4602      	mov	r2, r0
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb5a:	e7bb      	b.n	800bad4 <follow_path+0x50>
			if (res != FR_OK) break;
 800bb5c:	bf00      	nop
 800bb5e:	e002      	b.n	800bb66 <follow_path+0xe2>
				break;
 800bb60:	bf00      	nop
 800bb62:	e000      	b.n	800bb66 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb64:	bf00      	nop
			}
		}
	}

	return res;
 800bb66:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bb78:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d031      	beq.n	800bbea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	e002      	b.n	800bb94 <get_ldnumber+0x24>
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	3301      	adds	r3, #1
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b1f      	cmp	r3, #31
 800bb9a:	d903      	bls.n	800bba4 <get_ldnumber+0x34>
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b3a      	cmp	r3, #58	; 0x3a
 800bba2:	d1f4      	bne.n	800bb8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b3a      	cmp	r3, #58	; 0x3a
 800bbaa:	d11c      	bne.n	800bbe6 <get_ldnumber+0x76>
			tp = *path;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	60fa      	str	r2, [r7, #12]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	3b30      	subs	r3, #48	; 0x30
 800bbbc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	2b09      	cmp	r3, #9
 800bbc2:	d80e      	bhi.n	800bbe2 <get_ldnumber+0x72>
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d10a      	bne.n	800bbe2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d107      	bne.n	800bbe2 <get_ldnumber+0x72>
					vol = (int)i;
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	e002      	b.n	800bbec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bbea:	693b      	ldr	r3, [r7, #16]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	371c      	adds	r7, #28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	70da      	strb	r2, [r3, #3]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7fe fb96 	bl	800a344 <move_window>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <check_fs+0x2a>
 800bc1e:	2304      	movs	r3, #4
 800bc20:	e038      	b.n	800bc94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	3338      	adds	r3, #56	; 0x38
 800bc26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe f8da 	bl	8009de4 <ld_word>
 800bc30:	4603      	mov	r3, r0
 800bc32:	461a      	mov	r2, r3
 800bc34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d001      	beq.n	800bc40 <check_fs+0x48>
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e029      	b.n	800bc94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc46:	2be9      	cmp	r3, #233	; 0xe9
 800bc48:	d009      	beq.n	800bc5e <check_fs+0x66>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc50:	2beb      	cmp	r3, #235	; 0xeb
 800bc52:	d11e      	bne.n	800bc92 <check_fs+0x9a>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bc5a:	2b90      	cmp	r3, #144	; 0x90
 800bc5c:	d119      	bne.n	800bc92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3338      	adds	r3, #56	; 0x38
 800bc62:	3336      	adds	r3, #54	; 0x36
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fe f8d5 	bl	8009e14 <ld_dword>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bc70:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <check_fs+0xa4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d101      	bne.n	800bc7a <check_fs+0x82>
 800bc76:	2300      	movs	r3, #0
 800bc78:	e00c      	b.n	800bc94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3338      	adds	r3, #56	; 0x38
 800bc7e:	3352      	adds	r3, #82	; 0x52
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fe f8c7 	bl	8009e14 <ld_dword>
 800bc86:	4603      	mov	r3, r0
 800bc88:	4a05      	ldr	r2, [pc, #20]	; (800bca0 <check_fs+0xa8>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d101      	bne.n	800bc92 <check_fs+0x9a>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e000      	b.n	800bc94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bc92:	2302      	movs	r3, #2
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	00544146 	.word	0x00544146
 800bca0:	33544146 	.word	0x33544146

0800bca4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b096      	sub	sp, #88	; 0x58
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7ff ff59 	bl	800bb70 <get_ldnumber>
 800bcbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da01      	bge.n	800bcca <find_volume+0x26>
 800bcc6:	230b      	movs	r3, #11
 800bcc8:	e268      	b.n	800c19c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bcca:	4ab0      	ldr	r2, [pc, #704]	; (800bf8c <find_volume+0x2e8>)
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <find_volume+0x3a>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	e25e      	b.n	800c19c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bce2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	f023 0301 	bic.w	r3, r3, #1
 800bcea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01a      	beq.n	800bd2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	785b      	ldrb	r3, [r3, #1]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fd ffd5 	bl	8009ca8 <disk_status>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10c      	bne.n	800bd2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d007      	beq.n	800bd26 <find_volume+0x82>
 800bd16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd1a:	f003 0304 	and.w	r3, r3, #4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bd22:	230a      	movs	r3, #10
 800bd24:	e23a      	b.n	800c19c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800bd26:	2300      	movs	r3, #0
 800bd28:	e238      	b.n	800c19c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	785b      	ldrb	r3, [r3, #1]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fd ffcd 	bl	8009cdc <disk_initialize>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bd48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bd54:	2303      	movs	r3, #3
 800bd56:	e221      	b.n	800c19c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bd58:	79fb      	ldrb	r3, [r7, #7]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d007      	beq.n	800bd6e <find_volume+0xca>
 800bd5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bd6a:	230a      	movs	r3, #10
 800bd6c:	e216      	b.n	800c19c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	7858      	ldrb	r0, [r3, #1]
 800bd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd74:	330c      	adds	r3, #12
 800bd76:	461a      	mov	r2, r3
 800bd78:	2102      	movs	r1, #2
 800bd7a:	f7fe f815 	bl	8009da8 <disk_ioctl>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <find_volume+0xe4>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e209      	b.n	800c19c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	899b      	ldrh	r3, [r3, #12]
 800bd8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd90:	d80d      	bhi.n	800bdae <find_volume+0x10a>
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	899b      	ldrh	r3, [r3, #12]
 800bd96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd9a:	d308      	bcc.n	800bdae <find_volume+0x10a>
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	899b      	ldrh	r3, [r3, #12]
 800bda0:	461a      	mov	r2, r3
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	899b      	ldrh	r3, [r3, #12]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	4013      	ands	r3, r2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <find_volume+0x10e>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e1f4      	b.n	800c19c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bdb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdba:	f7ff ff1d 	bl	800bbf8 <check_fs>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bdc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d14b      	bne.n	800be64 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bdcc:	2300      	movs	r3, #0
 800bdce:	643b      	str	r3, [r7, #64]	; 0x40
 800bdd0:	e01f      	b.n	800be12 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bdd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bde0:	4413      	add	r3, r2
 800bde2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	3304      	adds	r3, #4
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <find_volume+0x158>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe f80e 	bl	8009e14 <ld_dword>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	e000      	b.n	800bdfe <find_volume+0x15a>
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800be06:	440b      	add	r3, r1
 800be08:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be0e:	3301      	adds	r3, #1
 800be10:	643b      	str	r3, [r7, #64]	; 0x40
 800be12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be14:	2b03      	cmp	r3, #3
 800be16:	d9dc      	bls.n	800bdd2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be18:	2300      	movs	r3, #0
 800be1a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <find_volume+0x184>
 800be22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be24:	3b01      	subs	r3, #1
 800be26:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800be30:	4413      	add	r3, r2
 800be32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d005      	beq.n	800be4a <find_volume+0x1a6>
 800be3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be42:	f7ff fed9 	bl	800bbf8 <check_fs>
 800be46:	4603      	mov	r3, r0
 800be48:	e000      	b.n	800be4c <find_volume+0x1a8>
 800be4a:	2303      	movs	r3, #3
 800be4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be54:	2b01      	cmp	r3, #1
 800be56:	d905      	bls.n	800be64 <find_volume+0x1c0>
 800be58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5a:	3301      	adds	r3, #1
 800be5c:	643b      	str	r3, [r7, #64]	; 0x40
 800be5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be60:	2b03      	cmp	r3, #3
 800be62:	d9e1      	bls.n	800be28 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be68:	2b04      	cmp	r3, #4
 800be6a:	d101      	bne.n	800be70 <find_volume+0x1cc>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e195      	b.n	800c19c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be74:	2b01      	cmp	r3, #1
 800be76:	d901      	bls.n	800be7c <find_volume+0x1d8>
 800be78:	230d      	movs	r3, #13
 800be7a:	e18f      	b.n	800c19c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	3338      	adds	r3, #56	; 0x38
 800be80:	330b      	adds	r3, #11
 800be82:	4618      	mov	r0, r3
 800be84:	f7fd ffae 	bl	8009de4 <ld_word>
 800be88:	4603      	mov	r3, r0
 800be8a:	461a      	mov	r2, r3
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	899b      	ldrh	r3, [r3, #12]
 800be90:	429a      	cmp	r2, r3
 800be92:	d001      	beq.n	800be98 <find_volume+0x1f4>
 800be94:	230d      	movs	r3, #13
 800be96:	e181      	b.n	800c19c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	3338      	adds	r3, #56	; 0x38
 800be9c:	3316      	adds	r3, #22
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fd ffa0 	bl	8009de4 <ld_word>
 800bea4:	4603      	mov	r3, r0
 800bea6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <find_volume+0x218>
 800beae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb0:	3338      	adds	r3, #56	; 0x38
 800beb2:	3324      	adds	r3, #36	; 0x24
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fd ffad 	bl	8009e14 <ld_dword>
 800beba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bec0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	789b      	ldrb	r3, [r3, #2]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d005      	beq.n	800bee0 <find_volume+0x23c>
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	789b      	ldrb	r3, [r3, #2]
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d001      	beq.n	800bee0 <find_volume+0x23c>
 800bedc:	230d      	movs	r3, #13
 800bede:	e15d      	b.n	800c19c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	789b      	ldrb	r3, [r3, #2]
 800bee4:	461a      	mov	r2, r3
 800bee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee8:	fb02 f303 	mul.w	r3, r2, r3
 800beec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	895b      	ldrh	r3, [r3, #10]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d008      	beq.n	800bf14 <find_volume+0x270>
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	895b      	ldrh	r3, [r3, #10]
 800bf06:	461a      	mov	r2, r3
 800bf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0a:	895b      	ldrh	r3, [r3, #10]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	4013      	ands	r3, r2
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <find_volume+0x274>
 800bf14:	230d      	movs	r3, #13
 800bf16:	e141      	b.n	800c19c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	3338      	adds	r3, #56	; 0x38
 800bf1c:	3311      	adds	r3, #17
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fd ff60 	bl	8009de4 <ld_word>
 800bf24:	4603      	mov	r3, r0
 800bf26:	461a      	mov	r2, r3
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	891b      	ldrh	r3, [r3, #8]
 800bf30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf32:	8992      	ldrh	r2, [r2, #12]
 800bf34:	0952      	lsrs	r2, r2, #5
 800bf36:	b292      	uxth	r2, r2
 800bf38:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf3c:	fb02 f201 	mul.w	r2, r2, r1
 800bf40:	1a9b      	subs	r3, r3, r2
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <find_volume+0x2a8>
 800bf48:	230d      	movs	r3, #13
 800bf4a:	e127      	b.n	800c19c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	3338      	adds	r3, #56	; 0x38
 800bf50:	3313      	adds	r3, #19
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fd ff46 	bl	8009de4 <ld_word>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d106      	bne.n	800bf70 <find_volume+0x2cc>
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	3338      	adds	r3, #56	; 0x38
 800bf66:	3320      	adds	r3, #32
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fd ff53 	bl	8009e14 <ld_dword>
 800bf6e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	3338      	adds	r3, #56	; 0x38
 800bf74:	330e      	adds	r3, #14
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fd ff34 	bl	8009de4 <ld_word>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bf80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d104      	bne.n	800bf90 <find_volume+0x2ec>
 800bf86:	230d      	movs	r3, #13
 800bf88:	e108      	b.n	800c19c <find_volume+0x4f8>
 800bf8a:	bf00      	nop
 800bf8c:	24001100 	.word	0x24001100

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bf90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf94:	4413      	add	r3, r2
 800bf96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf98:	8911      	ldrh	r1, [r2, #8]
 800bf9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf9c:	8992      	ldrh	r2, [r2, #12]
 800bf9e:	0952      	lsrs	r2, r2, #5
 800bfa0:	b292      	uxth	r2, r2
 800bfa2:	fbb1 f2f2 	udiv	r2, r1, r2
 800bfa6:	b292      	uxth	r2, r2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bfac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d201      	bcs.n	800bfb8 <find_volume+0x314>
 800bfb4:	230d      	movs	r3, #13
 800bfb6:	e0f1      	b.n	800c19c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bfb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfc0:	8952      	ldrh	r2, [r2, #10]
 800bfc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d101      	bne.n	800bfd2 <find_volume+0x32e>
 800bfce:	230d      	movs	r3, #13
 800bfd0:	e0e4      	b.n	800c19c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d802      	bhi.n	800bfe8 <find_volume+0x344>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d802      	bhi.n	800bff8 <find_volume+0x354>
 800bff2:	2301      	movs	r3, #1
 800bff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	1c9a      	adds	r2, r3, #2
 800bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c004:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c006:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00a:	441a      	add	r2, r3
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c014:	441a      	add	r2, r3
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c01a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d11e      	bne.n	800c060 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	3338      	adds	r3, #56	; 0x38
 800c026:	332a      	adds	r3, #42	; 0x2a
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fd fedb 	bl	8009de4 <ld_word>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <find_volume+0x394>
 800c034:	230d      	movs	r3, #13
 800c036:	e0b1      	b.n	800c19c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	891b      	ldrh	r3, [r3, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d001      	beq.n	800c044 <find_volume+0x3a0>
 800c040:	230d      	movs	r3, #13
 800c042:	e0ab      	b.n	800c19c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c046:	3338      	adds	r3, #56	; 0x38
 800c048:	332c      	adds	r3, #44	; 0x2c
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd fee2 	bl	8009e14 <ld_dword>
 800c050:	4602      	mov	r2, r0
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	69db      	ldr	r3, [r3, #28]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	647b      	str	r3, [r7, #68]	; 0x44
 800c05e:	e01f      	b.n	800c0a0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	891b      	ldrh	r3, [r3, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <find_volume+0x3c8>
 800c068:	230d      	movs	r3, #13
 800c06a:	e097      	b.n	800c19c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c072:	441a      	add	r2, r3
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d103      	bne.n	800c088 <find_volume+0x3e4>
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	69db      	ldr	r3, [r3, #28]
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	e00a      	b.n	800c09e <find_volume+0x3fa>
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	69da      	ldr	r2, [r3, #28]
 800c08c:	4613      	mov	r3, r2
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	4413      	add	r3, r2
 800c092:	085a      	lsrs	r2, r3, #1
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c09e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	6a1a      	ldr	r2, [r3, #32]
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	899b      	ldrh	r3, [r3, #12]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ac:	440b      	add	r3, r1
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0b2:	8989      	ldrh	r1, [r1, #12]
 800c0b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d201      	bcs.n	800c0c0 <find_volume+0x41c>
 800c0bc:	230d      	movs	r3, #13
 800c0be:	e06d      	b.n	800c19c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c6:	619a      	str	r2, [r3, #24]
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	699a      	ldr	r2, [r3, #24]
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	2280      	movs	r2, #128	; 0x80
 800c0d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c0d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d149      	bne.n	800c172 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	3338      	adds	r3, #56	; 0x38
 800c0e2:	3330      	adds	r3, #48	; 0x30
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fd fe7d 	bl	8009de4 <ld_word>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d140      	bne.n	800c172 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0f8:	f7fe f924 	bl	800a344 <move_window>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d137      	bne.n	800c172 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	2200      	movs	r2, #0
 800c106:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	3338      	adds	r3, #56	; 0x38
 800c10c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c110:	4618      	mov	r0, r3
 800c112:	f7fd fe67 	bl	8009de4 <ld_word>
 800c116:	4603      	mov	r3, r0
 800c118:	461a      	mov	r2, r3
 800c11a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c11e:	429a      	cmp	r2, r3
 800c120:	d127      	bne.n	800c172 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	3338      	adds	r3, #56	; 0x38
 800c126:	4618      	mov	r0, r3
 800c128:	f7fd fe74 	bl	8009e14 <ld_dword>
 800c12c:	4603      	mov	r3, r0
 800c12e:	4a1d      	ldr	r2, [pc, #116]	; (800c1a4 <find_volume+0x500>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d11e      	bne.n	800c172 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	3338      	adds	r3, #56	; 0x38
 800c138:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fd fe69 	bl	8009e14 <ld_dword>
 800c142:	4603      	mov	r3, r0
 800c144:	4a18      	ldr	r2, [pc, #96]	; (800c1a8 <find_volume+0x504>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d113      	bne.n	800c172 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	3338      	adds	r3, #56	; 0x38
 800c14e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c152:	4618      	mov	r0, r3
 800c154:	f7fd fe5e 	bl	8009e14 <ld_dword>
 800c158:	4602      	mov	r2, r0
 800c15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c160:	3338      	adds	r3, #56	; 0x38
 800c162:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c166:	4618      	mov	r0, r3
 800c168:	f7fd fe54 	bl	8009e14 <ld_dword>
 800c16c:	4602      	mov	r2, r0
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c178:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c17a:	4b0c      	ldr	r3, [pc, #48]	; (800c1ac <find_volume+0x508>)
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	3301      	adds	r3, #1
 800c180:	b29a      	uxth	r2, r3
 800c182:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <find_volume+0x508>)
 800c184:	801a      	strh	r2, [r3, #0]
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <find_volume+0x508>)
 800c188:	881a      	ldrh	r2, [r3, #0]
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	4a07      	ldr	r2, [pc, #28]	; (800c1b0 <find_volume+0x50c>)
 800c192:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c196:	f7fe f86d 	bl	800a274 <clear_lock>
#endif
	return FR_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3758      	adds	r7, #88	; 0x58
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	41615252 	.word	0x41615252
 800c1a8:	61417272 	.word	0x61417272
 800c1ac:	24001104 	.word	0x24001104
 800c1b0:	24001128 	.word	0x24001128

0800c1b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c1be:	2309      	movs	r3, #9
 800c1c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d01c      	beq.n	800c202 <validate+0x4e>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d018      	beq.n	800c202 <validate+0x4e>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d013      	beq.n	800c202 <validate+0x4e>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	889a      	ldrh	r2, [r3, #4]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	88db      	ldrh	r3, [r3, #6]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d10c      	bne.n	800c202 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	785b      	ldrb	r3, [r3, #1]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fd fd5a 	bl	8009ca8 <disk_status>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <validate+0x4e>
			res = FR_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d102      	bne.n	800c20e <validate+0x5a>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	e000      	b.n	800c210 <validate+0x5c>
 800c20e:	2300      	movs	r3, #0
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	6013      	str	r3, [r2, #0]
	return res;
 800c214:	7bfb      	ldrb	r3, [r7, #15]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
	...

0800c220 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	4613      	mov	r3, r2
 800c22c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c232:	f107 0310 	add.w	r3, r7, #16
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fc9a 	bl	800bb70 <get_ldnumber>
 800c23c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	2b00      	cmp	r3, #0
 800c242:	da01      	bge.n	800c248 <f_mount+0x28>
 800c244:	230b      	movs	r3, #11
 800c246:	e02b      	b.n	800c2a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c248:	4a17      	ldr	r2, [pc, #92]	; (800c2a8 <f_mount+0x88>)
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c250:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d005      	beq.n	800c264 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c258:	69b8      	ldr	r0, [r7, #24]
 800c25a:	f7fe f80b 	bl	800a274 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	2200      	movs	r2, #0
 800c262:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	490d      	ldr	r1, [pc, #52]	; (800c2a8 <f_mount+0x88>)
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <f_mount+0x66>
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d001      	beq.n	800c28a <f_mount+0x6a>
 800c286:	2300      	movs	r3, #0
 800c288:	e00a      	b.n	800c2a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c28a:	f107 010c 	add.w	r1, r7, #12
 800c28e:	f107 0308 	add.w	r3, r7, #8
 800c292:	2200      	movs	r2, #0
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff fd05 	bl	800bca4 <find_volume>
 800c29a:	4603      	mov	r3, r0
 800c29c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	24001100 	.word	0x24001100

0800c2ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b09a      	sub	sp, #104	; 0x68
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <f_open+0x18>
 800c2c0:	2309      	movs	r3, #9
 800c2c2:	e1bb      	b.n	800c63c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c2c4:	79fb      	ldrb	r3, [r7, #7]
 800c2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c2cc:	79fa      	ldrb	r2, [r7, #7]
 800c2ce:	f107 0114 	add.w	r1, r7, #20
 800c2d2:	f107 0308 	add.w	r3, r7, #8
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff fce4 	bl	800bca4 <find_volume>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c2e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f040 819f 	bne.w	800c62a <f_open+0x37e>
		dj.obj.fs = fs;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	f107 0318 	add.w	r3, r7, #24
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fbc3 	bl	800ba84 <follow_path>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c304:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d11a      	bne.n	800c342 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c30c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c310:	b25b      	sxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	da03      	bge.n	800c31e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c316:	2306      	movs	r3, #6
 800c318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c31c:	e011      	b.n	800c342 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	f023 0301 	bic.w	r3, r3, #1
 800c324:	2b00      	cmp	r3, #0
 800c326:	bf14      	ite	ne
 800c328:	2301      	movne	r3, #1
 800c32a:	2300      	moveq	r3, #0
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	461a      	mov	r2, r3
 800c330:	f107 0318 	add.w	r3, r7, #24
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7fd fe54 	bl	8009fe4 <chk_lock>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c342:	79fb      	ldrb	r3, [r7, #7]
 800c344:	f003 031c 	and.w	r3, r3, #28
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d07f      	beq.n	800c44c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c34c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c350:	2b00      	cmp	r3, #0
 800c352:	d017      	beq.n	800c384 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c354:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d10e      	bne.n	800c37a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c35c:	f7fd fe9e 	bl	800a09c <enq_lock>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d006      	beq.n	800c374 <f_open+0xc8>
 800c366:	f107 0318 	add.w	r3, r7, #24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fffc 	bl	800b368 <dir_register>
 800c370:	4603      	mov	r3, r0
 800c372:	e000      	b.n	800c376 <f_open+0xca>
 800c374:	2312      	movs	r3, #18
 800c376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	f043 0308 	orr.w	r3, r3, #8
 800c380:	71fb      	strb	r3, [r7, #7]
 800c382:	e010      	b.n	800c3a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c384:	7fbb      	ldrb	r3, [r7, #30]
 800c386:	f003 0311 	and.w	r3, r3, #17
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <f_open+0xea>
					res = FR_DENIED;
 800c38e:	2307      	movs	r3, #7
 800c390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c394:	e007      	b.n	800c3a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	f003 0304 	and.w	r3, r3, #4
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <f_open+0xfa>
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d168      	bne.n	800c480 <f_open+0x1d4>
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	f003 0308 	and.w	r3, r3, #8
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d063      	beq.n	800c480 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c3b8:	f7fd fa38 	bl	800982c <get_fattime>
 800c3bc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	330e      	adds	r3, #14
 800c3c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fd fd63 	bl	8009e90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	3316      	adds	r3, #22
 800c3ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fd fd5d 	bl	8009e90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	330b      	adds	r3, #11
 800c3da:	2220      	movs	r2, #32
 800c3dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fd35 	bl	800ae54 <ld_clust>
 800c3ea:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fd4d 	bl	800ae92 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	331c      	adds	r3, #28
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fd fd46 	bl	8009e90 <st_dword>
					fs->wflag = 1;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2201      	movs	r2, #1
 800c408:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c40a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d037      	beq.n	800c480 <f_open+0x1d4>
						dw = fs->winsect;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c414:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c416:	f107 0318 	add.w	r3, r7, #24
 800c41a:	2200      	movs	r2, #0
 800c41c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe fa3d 	bl	800a89e <remove_chain>
 800c424:	4603      	mov	r3, r0
 800c426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c42a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d126      	bne.n	800c480 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c436:	4618      	mov	r0, r3
 800c438:	f7fd ff84 	bl	800a344 <move_window>
 800c43c:	4603      	mov	r3, r0
 800c43e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c446:	3a01      	subs	r2, #1
 800c448:	615a      	str	r2, [r3, #20]
 800c44a:	e019      	b.n	800c480 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c44c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c450:	2b00      	cmp	r3, #0
 800c452:	d115      	bne.n	800c480 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c454:	7fbb      	ldrb	r3, [r7, #30]
 800c456:	f003 0310 	and.w	r3, r3, #16
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d003      	beq.n	800c466 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c45e:	2304      	movs	r3, #4
 800c460:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c464:	e00c      	b.n	800c480 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	f003 0302 	and.w	r3, r3, #2
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d007      	beq.n	800c480 <f_open+0x1d4>
 800c470:	7fbb      	ldrb	r3, [r7, #30]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <f_open+0x1d4>
						res = FR_DENIED;
 800c47a:	2307      	movs	r3, #7
 800c47c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c484:	2b00      	cmp	r3, #0
 800c486:	d128      	bne.n	800c4da <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	f003 0308 	and.w	r3, r3, #8
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c492:	79fb      	ldrb	r3, [r7, #7]
 800c494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c498:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	f023 0301 	bic.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	bf14      	ite	ne
 800c4b2:	2301      	movne	r3, #1
 800c4b4:	2300      	moveq	r3, #0
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	f107 0318 	add.w	r3, r7, #24
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fd fe0d 	bl	800a0e0 <inc_lock>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d102      	bne.n	800c4da <f_open+0x22e>
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c4da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 80a3 	bne.w	800c62a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fcb2 	bl	800ae54 <ld_clust>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	331c      	adds	r3, #28
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fd fc8a 	bl	8009e14 <ld_dword>
 800c500:	4602      	mov	r2, r0
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2200      	movs	r2, #0
 800c50a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	88da      	ldrh	r2, [r3, #6]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	79fa      	ldrb	r2, [r7, #7]
 800c51e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3330      	adds	r3, #48	; 0x30
 800c536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c53a:	2100      	movs	r1, #0
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fd fcf4 	bl	8009f2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	f003 0320 	and.w	r3, r3, #32
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d06e      	beq.n	800c62a <f_open+0x37e>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d06a      	beq.n	800c62a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	68da      	ldr	r2, [r3, #12]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	895b      	ldrh	r3, [r3, #10]
 800c560:	461a      	mov	r2, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	899b      	ldrh	r3, [r3, #12]
 800c566:	fb03 f302 	mul.w	r3, r3, r2
 800c56a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c578:	e016      	b.n	800c5a8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fd ff9d 	bl	800a4be <get_fat>
 800c584:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d802      	bhi.n	800c592 <f_open+0x2e6>
 800c58c:	2302      	movs	r3, #2
 800c58e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d102      	bne.n	800c5a0 <f_open+0x2f4>
 800c59a:	2301      	movs	r3, #1
 800c59c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <f_open+0x30c>
 800c5b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d8e0      	bhi.n	800c57a <f_open+0x2ce>
				}
				fp->clust = clst;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c5be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d131      	bne.n	800c62a <f_open+0x37e>
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	899b      	ldrh	r3, [r3, #12]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5d2:	fb02 f201 	mul.w	r2, r2, r1
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d026      	beq.n	800c62a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fd ff4d 	bl	800a480 <clust2sect>
 800c5e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <f_open+0x34a>
						res = FR_INT_ERR;
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c5f4:	e019      	b.n	800c62a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	899b      	ldrh	r3, [r3, #12]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800c602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c604:	441a      	add	r2, r3
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	7858      	ldrb	r0, [r3, #1]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6a1a      	ldr	r2, [r3, #32]
 800c618:	2301      	movs	r3, #1
 800c61a:	f7fd fb85 	bl	8009d28 <disk_read>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <f_open+0x37e>
 800c624:	2301      	movs	r3, #1
 800c626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c62a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d002      	beq.n	800c638 <f_open+0x38c>
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c638:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3768      	adds	r7, #104	; 0x68
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08c      	sub	sp, #48	; 0x30
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f107 0210 	add.w	r2, r7, #16
 800c662:	4611      	mov	r1, r2
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff fda5 	bl	800c1b4 <validate>
 800c66a:	4603      	mov	r3, r0
 800c66c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c674:	2b00      	cmp	r3, #0
 800c676:	d107      	bne.n	800c688 <f_write+0x44>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	7d5b      	ldrb	r3, [r3, #21]
 800c67c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <f_write+0x4a>
 800c688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c68c:	e16a      	b.n	800c964 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	7d1b      	ldrb	r3, [r3, #20]
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <f_write+0x5a>
 800c69a:	2307      	movs	r3, #7
 800c69c:	e162      	b.n	800c964 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	699a      	ldr	r2, [r3, #24]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	441a      	add	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	f080 814c 	bcs.w	800c948 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	43db      	mvns	r3, r3
 800c6b6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c6b8:	e146      	b.n	800c948 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	8992      	ldrh	r2, [r2, #12]
 800c6c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6c6:	fb02 f201 	mul.w	r2, r2, r1
 800c6ca:	1a9b      	subs	r3, r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f040 80f1 	bne.w	800c8b4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	8992      	ldrh	r2, [r2, #12]
 800c6da:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	8952      	ldrh	r2, [r2, #10]
 800c6e2:	3a01      	subs	r2, #1
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d143      	bne.n	800c776 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10c      	bne.n	800c710 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d11a      	bne.n	800c738 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2100      	movs	r1, #0
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe f92e 	bl	800a968 <create_chain>
 800c70c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c70e:	e013      	b.n	800c738 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d007      	beq.n	800c728 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	4619      	mov	r1, r3
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7fe f9ba 	bl	800aa98 <clmt_clust>
 800c724:	62b8      	str	r0, [r7, #40]	; 0x28
 800c726:	e007      	b.n	800c738 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	69db      	ldr	r3, [r3, #28]
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f7fe f919 	bl	800a968 <create_chain>
 800c736:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 8109 	beq.w	800c952 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	2b01      	cmp	r3, #1
 800c744:	d104      	bne.n	800c750 <f_write+0x10c>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2202      	movs	r2, #2
 800c74a:	755a      	strb	r2, [r3, #21]
 800c74c:	2302      	movs	r3, #2
 800c74e:	e109      	b.n	800c964 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c756:	d104      	bne.n	800c762 <f_write+0x11e>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	755a      	strb	r2, [r3, #21]
 800c75e:	2301      	movs	r3, #1
 800c760:	e100      	b.n	800c964 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c766:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <f_write+0x132>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c774:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da18      	bge.n	800c7b2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	7858      	ldrb	r0, [r3, #1]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6a1a      	ldr	r2, [r3, #32]
 800c78e:	2301      	movs	r3, #1
 800c790:	f7fd faea 	bl	8009d68 <disk_write>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d004      	beq.n	800c7a4 <f_write+0x160>
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2201      	movs	r2, #1
 800c79e:	755a      	strb	r2, [r3, #21]
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e0df      	b.n	800c964 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	7d1b      	ldrb	r3, [r3, #20]
 800c7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7b2:	693a      	ldr	r2, [r7, #16]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	f7fd fe60 	bl	800a480 <clust2sect>
 800c7c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d104      	bne.n	800c7d2 <f_write+0x18e>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	755a      	strb	r2, [r3, #21]
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	e0c8      	b.n	800c964 <f_write+0x320>
			sect += csect;
 800c7d2:	697a      	ldr	r2, [r7, #20]
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	899b      	ldrh	r3, [r3, #12]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d043      	beq.n	800c876 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c7ee:	69ba      	ldr	r2, [r7, #24]
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	8952      	ldrh	r2, [r2, #10]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d905      	bls.n	800c808 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	895b      	ldrh	r3, [r3, #10]
 800c800:	461a      	mov	r2, r3
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	7858      	ldrb	r0, [r3, #1]
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	69f9      	ldr	r1, [r7, #28]
 800c812:	f7fd faa9 	bl	8009d68 <disk_write>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d004      	beq.n	800c826 <f_write+0x1e2>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2201      	movs	r2, #1
 800c820:	755a      	strb	r2, [r3, #21]
 800c822:	2301      	movs	r3, #1
 800c824:	e09e      	b.n	800c964 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6a1a      	ldr	r2, [r3, #32]
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	6a3a      	ldr	r2, [r7, #32]
 800c830:	429a      	cmp	r2, r3
 800c832:	d918      	bls.n	800c866 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a1a      	ldr	r2, [r3, #32]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	8992      	ldrh	r2, [r2, #12]
 800c846:	fb02 f303 	mul.w	r3, r2, r3
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	18d1      	adds	r1, r2, r3
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	899b      	ldrh	r3, [r3, #12]
 800c852:	461a      	mov	r2, r3
 800c854:	f7fd fb48 	bl	8009ee8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c860:	b2da      	uxtb	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	899b      	ldrh	r3, [r3, #12]
 800c86a:	461a      	mov	r2, r3
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	fb02 f303 	mul.w	r3, r2, r3
 800c872:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c874:	e04b      	b.n	800c90e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d016      	beq.n	800c8ae <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	699a      	ldr	r2, [r3, #24]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c888:	429a      	cmp	r2, r3
 800c88a:	d210      	bcs.n	800c8ae <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	7858      	ldrb	r0, [r3, #1]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c896:	2301      	movs	r3, #1
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	f7fd fa45 	bl	8009d28 <disk_read>
 800c89e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d004      	beq.n	800c8ae <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	755a      	strb	r2, [r3, #21]
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e05a      	b.n	800c964 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	899b      	ldrh	r3, [r3, #12]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	693a      	ldr	r2, [r7, #16]
 800c8c0:	8992      	ldrh	r2, [r2, #12]
 800c8c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8c6:	fb02 f201 	mul.w	r2, r2, r1
 800c8ca:	1a9b      	subs	r3, r3, r2
 800c8cc:	1ac3      	subs	r3, r0, r3
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d901      	bls.n	800c8dc <f_write+0x298>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	8992      	ldrh	r2, [r2, #12]
 800c8ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8ee:	fb02 f200 	mul.w	r2, r2, r0
 800c8f2:	1a9b      	subs	r3, r3, r2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f8:	69f9      	ldr	r1, [r7, #28]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fd faf4 	bl	8009ee8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	7d1b      	ldrb	r3, [r3, #20]
 800c904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c90e:	69fa      	ldr	r2, [r7, #28]
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	4413      	add	r3, r2
 800c914:	61fb      	str	r3, [r7, #28]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	699a      	ldr	r2, [r3, #24]
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	441a      	add	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	619a      	str	r2, [r3, #24]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	68da      	ldr	r2, [r3, #12]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	bf38      	it	cc
 800c92e:	461a      	movcc	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	60da      	str	r2, [r3, #12]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	441a      	add	r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f47f aeb5 	bne.w	800c6ba <f_write+0x76>
 800c950:	e000      	b.n	800c954 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c952:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	7d1b      	ldrb	r3, [r3, #20]
 800c958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3730      	adds	r7, #48	; 0x30
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f107 0208 	add.w	r2, r7, #8
 800c97a:	4611      	mov	r1, r2
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff fc19 	bl	800c1b4 <validate>
 800c982:	4603      	mov	r3, r0
 800c984:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c986:	7dfb      	ldrb	r3, [r7, #23]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d168      	bne.n	800ca5e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	7d1b      	ldrb	r3, [r3, #20]
 800c990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c994:	2b00      	cmp	r3, #0
 800c996:	d062      	beq.n	800ca5e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7d1b      	ldrb	r3, [r3, #20]
 800c99c:	b25b      	sxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	da15      	bge.n	800c9ce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	7858      	ldrb	r0, [r3, #1]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1a      	ldr	r2, [r3, #32]
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f7fd f9d9 	bl	8009d68 <disk_write>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <f_sync+0x54>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e04f      	b.n	800ca60 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	7d1b      	ldrb	r3, [r3, #20]
 800c9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c9ce:	f7fc ff2d 	bl	800982c <get_fattime>
 800c9d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	4619      	mov	r1, r3
 800c9dc:	4610      	mov	r0, r2
 800c9de:	f7fd fcb1 	bl	800a344 <move_window>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d138      	bne.n	800ca5e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	330b      	adds	r3, #11
 800c9f6:	781a      	ldrb	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	330b      	adds	r3, #11
 800c9fc:	f042 0220 	orr.w	r2, r2, #32
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	f7fe fa3f 	bl	800ae92 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f103 021c 	add.w	r2, r3, #28
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4610      	mov	r0, r2
 800ca22:	f7fd fa35 	bl	8009e90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3316      	adds	r3, #22
 800ca2a:	6939      	ldr	r1, [r7, #16]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fd fa2f 	bl	8009e90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3312      	adds	r3, #18
 800ca36:	2100      	movs	r1, #0
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fd fa0e 	bl	8009e5a <st_word>
					fs->wflag = 1;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2201      	movs	r2, #1
 800ca42:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fd fcaa 	bl	800a3a0 <sync_fs>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	7d1b      	ldrb	r3, [r3, #20]
 800ca54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ff7b 	bl	800c96c <f_sync>
 800ca76:	4603      	mov	r3, r0
 800ca78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d118      	bne.n	800cab2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f107 0208 	add.w	r2, r7, #8
 800ca86:	4611      	mov	r1, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff fb93 	bl	800c1b4 <validate>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fd fbad 	bl	800a1fc <dec_lock>
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b090      	sub	sp, #64	; 0x40
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f107 0208 	add.w	r2, r7, #8
 800cacc:	4611      	mov	r1, r2
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff fb70 	bl	800c1b4 <validate>
 800cad4:	4603      	mov	r3, r0
 800cad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d103      	bne.n	800caea <f_lseek+0x2e>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7d5b      	ldrb	r3, [r3, #21]
 800cae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800caea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <f_lseek+0x3c>
 800caf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800caf6:	e201      	b.n	800cefc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 80d9 	beq.w	800ccb4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb08:	d15a      	bne.n	800cbc0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	1d1a      	adds	r2, r3, #4
 800cb14:	627a      	str	r2, [r7, #36]	; 0x24
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d03a      	beq.n	800cba0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	613b      	str	r3, [r7, #16]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	3302      	adds	r3, #2
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3e:	3301      	adds	r3, #1
 800cb40:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fd fcb9 	bl	800a4be <get_fat>
 800cb4c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d804      	bhi.n	800cb5e <f_lseek+0xa2>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2202      	movs	r2, #2
 800cb58:	755a      	strb	r2, [r3, #21]
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	e1ce      	b.n	800cefc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb64:	d104      	bne.n	800cb70 <f_lseek+0xb4>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	755a      	strb	r2, [r3, #21]
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e1c5      	b.n	800cefc <f_lseek+0x440>
					} while (cl == pcl + 1);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3301      	adds	r3, #1
 800cb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d0de      	beq.n	800cb38 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cb7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d809      	bhi.n	800cb96 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	1d1a      	adds	r2, r3, #4
 800cb86:	627a      	str	r2, [r7, #36]	; 0x24
 800cb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	1d1a      	adds	r2, r3, #4
 800cb90:	627a      	str	r2, [r7, #36]	; 0x24
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	69db      	ldr	r3, [r3, #28]
 800cb9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d3c4      	bcc.n	800cb2a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d803      	bhi.n	800cbb8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	e19f      	b.n	800cef8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cbb8:	2311      	movs	r3, #17
 800cbba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cbbe:	e19b      	b.n	800cef8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d902      	bls.n	800cbd0 <f_lseek+0x114>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 818d 	beq.w	800cef8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7fd ff57 	bl	800aa98 <clmt_clust>
 800cbea:	4602      	mov	r2, r0
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	f7fd fc41 	bl	800a480 <clust2sect>
 800cbfe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d104      	bne.n	800cc10 <f_lseek+0x154>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2202      	movs	r2, #2
 800cc0a:	755a      	strb	r2, [r3, #21]
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	e175      	b.n	800cefc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	3b01      	subs	r3, #1
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	8992      	ldrh	r2, [r2, #12]
 800cc18:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	8952      	ldrh	r2, [r2, #10]
 800cc20:	3a01      	subs	r2, #1
 800cc22:	4013      	ands	r3, r2
 800cc24:	69ba      	ldr	r2, [r7, #24]
 800cc26:	4413      	add	r3, r2
 800cc28:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	8992      	ldrh	r2, [r2, #12]
 800cc32:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc36:	fb02 f201 	mul.w	r2, r2, r1
 800cc3a:	1a9b      	subs	r3, r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f000 815b 	beq.w	800cef8 <f_lseek+0x43c>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	69ba      	ldr	r2, [r7, #24]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	f000 8155 	beq.w	800cef8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	7d1b      	ldrb	r3, [r3, #20]
 800cc52:	b25b      	sxtb	r3, r3
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da18      	bge.n	800cc8a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	7858      	ldrb	r0, [r3, #1]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1a      	ldr	r2, [r3, #32]
 800cc66:	2301      	movs	r3, #1
 800cc68:	f7fd f87e 	bl	8009d68 <disk_write>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <f_lseek+0x1c0>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	755a      	strb	r2, [r3, #21]
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e13f      	b.n	800cefc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7d1b      	ldrb	r3, [r3, #20]
 800cc80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	7858      	ldrb	r0, [r3, #1]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc94:	2301      	movs	r3, #1
 800cc96:	69ba      	ldr	r2, [r7, #24]
 800cc98:	f7fd f846 	bl	8009d28 <disk_read>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <f_lseek+0x1f0>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	755a      	strb	r2, [r3, #21]
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e127      	b.n	800cefc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	69ba      	ldr	r2, [r7, #24]
 800ccb0:	621a      	str	r2, [r3, #32]
 800ccb2:	e121      	b.n	800cef8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d908      	bls.n	800ccd0 <f_lseek+0x214>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	7d1b      	ldrb	r3, [r3, #20]
 800ccc2:	f003 0302 	and.w	r3, r3, #2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccde:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80b5 	beq.w	800ce52 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	895b      	ldrh	r3, [r3, #10]
 800ccec:	461a      	mov	r2, r3
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	899b      	ldrh	r3, [r3, #12]
 800ccf2:	fb03 f302 	mul.w	r3, r3, r2
 800ccf6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ccf8:	6a3b      	ldr	r3, [r7, #32]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d01b      	beq.n	800cd36 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	1e5a      	subs	r2, r3, #1
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	1e59      	subs	r1, r3, #1
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d30f      	bcc.n	800cd36 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	1e5a      	subs	r2, r3, #1
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	425b      	negs	r3, r3
 800cd1e:	401a      	ands	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	69db      	ldr	r3, [r3, #28]
 800cd32:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd34:	e022      	b.n	800cd7c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d119      	bne.n	800cd76 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2100      	movs	r1, #0
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fd fe0e 	bl	800a968 <create_chain>
 800cd4c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d104      	bne.n	800cd5e <f_lseek+0x2a2>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2202      	movs	r2, #2
 800cd58:	755a      	strb	r2, [r3, #21]
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	e0ce      	b.n	800cefc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd64:	d104      	bne.n	800cd70 <f_lseek+0x2b4>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	755a      	strb	r2, [r3, #21]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e0c5      	b.n	800cefc <f_lseek+0x440>
					fp->obj.sclust = clst;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd74:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd7a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d067      	beq.n	800ce52 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800cd82:	e03a      	b.n	800cdfa <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	603b      	str	r3, [r7, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	699a      	ldr	r2, [r3, #24]
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	441a      	add	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7d1b      	ldrb	r3, [r3, #20]
 800cd9c:	f003 0302 	and.w	r3, r3, #2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fd fddd 	bl	800a968 <create_chain>
 800cdae:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d108      	bne.n	800cdc8 <f_lseek+0x30c>
							ofs = 0; break;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	603b      	str	r3, [r7, #0]
 800cdba:	e022      	b.n	800ce02 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fd fb7c 	bl	800a4be <get_fat>
 800cdc6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdce:	d104      	bne.n	800cdda <f_lseek+0x31e>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	755a      	strb	r2, [r3, #21]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e090      	b.n	800cefc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d904      	bls.n	800cdea <f_lseek+0x32e>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	69db      	ldr	r3, [r3, #28]
 800cde4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d304      	bcc.n	800cdf4 <f_lseek+0x338>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2202      	movs	r2, #2
 800cdee:	755a      	strb	r2, [r3, #21]
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	e083      	b.n	800cefc <f_lseek+0x440>
					fp->clust = clst;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdf8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d8c0      	bhi.n	800cd84 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	699a      	ldr	r2, [r3, #24]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	441a      	add	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	899b      	ldrh	r3, [r3, #12]
 800ce12:	461a      	mov	r2, r3
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce1a:	fb02 f201 	mul.w	r2, r2, r1
 800ce1e:	1a9b      	subs	r3, r3, r2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d016      	beq.n	800ce52 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fd fb29 	bl	800a480 <clust2sect>
 800ce2e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ce30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d104      	bne.n	800ce40 <f_lseek+0x384>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2202      	movs	r2, #2
 800ce3a:	755a      	strb	r2, [r3, #21]
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e05d      	b.n	800cefc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	899b      	ldrh	r3, [r3, #12]
 800ce44:	461a      	mov	r2, r3
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce4e:	4413      	add	r3, r2
 800ce50:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	699a      	ldr	r2, [r3, #24]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d90a      	bls.n	800ce74 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	699a      	ldr	r2, [r3, #24]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	7d1b      	ldrb	r3, [r3, #20]
 800ce6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	8992      	ldrh	r2, [r2, #12]
 800ce7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce80:	fb02 f201 	mul.w	r2, r2, r1
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d036      	beq.n	800cef8 <f_lseek+0x43c>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d031      	beq.n	800cef8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	7d1b      	ldrb	r3, [r3, #20]
 800ce98:	b25b      	sxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	da18      	bge.n	800ced0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	7858      	ldrb	r0, [r3, #1]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a1a      	ldr	r2, [r3, #32]
 800ceac:	2301      	movs	r3, #1
 800ceae:	f7fc ff5b 	bl	8009d68 <disk_write>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d004      	beq.n	800cec2 <f_lseek+0x406>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	755a      	strb	r2, [r3, #21]
 800cebe:	2301      	movs	r3, #1
 800cec0:	e01c      	b.n	800cefc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	7d1b      	ldrb	r3, [r3, #20]
 800cec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	7858      	ldrb	r0, [r3, #1]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceda:	2301      	movs	r3, #1
 800cedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cede:	f7fc ff23 	bl	8009d28 <disk_read>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <f_lseek+0x436>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	755a      	strb	r2, [r3, #21]
 800ceee:	2301      	movs	r3, #1
 800cef0:	e004      	b.n	800cefc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cef6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cef8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3740      	adds	r7, #64	; 0x40
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b090      	sub	sp, #64	; 0x40
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800cf0e:	f107 0108 	add.w	r1, r7, #8
 800cf12:	1d3b      	adds	r3, r7, #4
 800cf14:	2200      	movs	r2, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fe fec4 	bl	800bca4 <find_volume>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800cf22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d11f      	bne.n	800cf6a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	f107 0308 	add.w	r3, r7, #8
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe fda6 	bl	800ba84 <follow_path>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800cf3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d111      	bne.n	800cf6a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800cf46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf4a:	b25b      	sxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	da03      	bge.n	800cf58 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800cf50:	2306      	movs	r3, #6
 800cf52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cf56:	e008      	b.n	800cf6a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <f_stat+0x66>
 800cf5e:	f107 0308 	add.w	r3, r7, #8
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe faf7 	bl	800b558 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800cf6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3740      	adds	r7, #64	; 0x40
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
	...

0800cf78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b087      	sub	sp, #28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cf86:	2301      	movs	r3, #1
 800cf88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cf8e:	4b1f      	ldr	r3, [pc, #124]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cf90:	7a5b      	ldrb	r3, [r3, #9]
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d131      	bne.n	800cffc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cf98:	4b1c      	ldr	r3, [pc, #112]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cf9a:	7a5b      	ldrb	r3, [r3, #9]
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	4b1a      	ldr	r3, [pc, #104]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cfa6:	4b19      	ldr	r3, [pc, #100]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfa8:	7a5b      	ldrb	r3, [r3, #9]
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	4a17      	ldr	r2, [pc, #92]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cfb6:	4b15      	ldr	r3, [pc, #84]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfb8:	7a5b      	ldrb	r3, [r3, #9]
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b13      	ldr	r3, [pc, #76]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfc0:	4413      	add	r3, r2
 800cfc2:	79fa      	ldrb	r2, [r7, #7]
 800cfc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cfc6:	4b11      	ldr	r3, [pc, #68]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfc8:	7a5b      	ldrb	r3, [r3, #9]
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	b2d1      	uxtb	r1, r2
 800cfd0:	4a0e      	ldr	r2, [pc, #56]	; (800d00c <FATFS_LinkDriverEx+0x94>)
 800cfd2:	7251      	strb	r1, [r2, #9]
 800cfd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cfd6:	7dbb      	ldrb	r3, [r7, #22]
 800cfd8:	3330      	adds	r3, #48	; 0x30
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	223a      	movs	r2, #58	; 0x3a
 800cfe6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	3302      	adds	r3, #2
 800cfec:	222f      	movs	r2, #47	; 0x2f
 800cfee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	3303      	adds	r3, #3
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	371c      	adds	r7, #28
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	24001328 	.word	0x24001328

0800d010 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d01a:	2200      	movs	r2, #0
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff ffaa 	bl	800cf78 <FATFS_LinkDriverEx>
 800d024:	4603      	mov	r3, r0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
	...

0800d030 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d03c:	88fb      	ldrh	r3, [r7, #6]
 800d03e:	2b7f      	cmp	r3, #127	; 0x7f
 800d040:	d802      	bhi.n	800d048 <ff_convert+0x18>
		c = chr;
 800d042:	88fb      	ldrh	r3, [r7, #6]
 800d044:	81fb      	strh	r3, [r7, #14]
 800d046:	e025      	b.n	800d094 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00b      	beq.n	800d066 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d04e:	88fb      	ldrh	r3, [r7, #6]
 800d050:	2bff      	cmp	r3, #255	; 0xff
 800d052:	d805      	bhi.n	800d060 <ff_convert+0x30>
 800d054:	88fb      	ldrh	r3, [r7, #6]
 800d056:	3b80      	subs	r3, #128	; 0x80
 800d058:	4a12      	ldr	r2, [pc, #72]	; (800d0a4 <ff_convert+0x74>)
 800d05a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d05e:	e000      	b.n	800d062 <ff_convert+0x32>
 800d060:	2300      	movs	r3, #0
 800d062:	81fb      	strh	r3, [r7, #14]
 800d064:	e016      	b.n	800d094 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d066:	2300      	movs	r3, #0
 800d068:	81fb      	strh	r3, [r7, #14]
 800d06a:	e009      	b.n	800d080 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d06c:	89fb      	ldrh	r3, [r7, #14]
 800d06e:	4a0d      	ldr	r2, [pc, #52]	; (800d0a4 <ff_convert+0x74>)
 800d070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d074:	88fa      	ldrh	r2, [r7, #6]
 800d076:	429a      	cmp	r2, r3
 800d078:	d006      	beq.n	800d088 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d07a:	89fb      	ldrh	r3, [r7, #14]
 800d07c:	3301      	adds	r3, #1
 800d07e:	81fb      	strh	r3, [r7, #14]
 800d080:	89fb      	ldrh	r3, [r7, #14]
 800d082:	2b7f      	cmp	r3, #127	; 0x7f
 800d084:	d9f2      	bls.n	800d06c <ff_convert+0x3c>
 800d086:	e000      	b.n	800d08a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d088:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d08a:	89fb      	ldrh	r3, [r7, #14]
 800d08c:	3380      	adds	r3, #128	; 0x80
 800d08e:	b29b      	uxth	r3, r3
 800d090:	b2db      	uxtb	r3, r3
 800d092:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d094:	89fb      	ldrh	r3, [r7, #14]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	0800dd4c 	.word	0x0800dd4c

0800d0a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d0b2:	88fb      	ldrh	r3, [r7, #6]
 800d0b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0b8:	d201      	bcs.n	800d0be <ff_wtoupper+0x16>
 800d0ba:	4b3e      	ldr	r3, [pc, #248]	; (800d1b4 <ff_wtoupper+0x10c>)
 800d0bc:	e000      	b.n	800d0c0 <ff_wtoupper+0x18>
 800d0be:	4b3e      	ldr	r3, [pc, #248]	; (800d1b8 <ff_wtoupper+0x110>)
 800d0c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	1c9a      	adds	r2, r3, #2
 800d0c6:	617a      	str	r2, [r7, #20]
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d0cc:	8a7b      	ldrh	r3, [r7, #18]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d068      	beq.n	800d1a4 <ff_wtoupper+0xfc>
 800d0d2:	88fa      	ldrh	r2, [r7, #6]
 800d0d4:	8a7b      	ldrh	r3, [r7, #18]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d364      	bcc.n	800d1a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	1c9a      	adds	r2, r3, #2
 800d0de:	617a      	str	r2, [r7, #20]
 800d0e0:	881b      	ldrh	r3, [r3, #0]
 800d0e2:	823b      	strh	r3, [r7, #16]
 800d0e4:	8a3b      	ldrh	r3, [r7, #16]
 800d0e6:	0a1b      	lsrs	r3, r3, #8
 800d0e8:	81fb      	strh	r3, [r7, #14]
 800d0ea:	8a3b      	ldrh	r3, [r7, #16]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d0f0:	88fa      	ldrh	r2, [r7, #6]
 800d0f2:	8a79      	ldrh	r1, [r7, #18]
 800d0f4:	8a3b      	ldrh	r3, [r7, #16]
 800d0f6:	440b      	add	r3, r1
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	da49      	bge.n	800d190 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d0fc:	89fb      	ldrh	r3, [r7, #14]
 800d0fe:	2b08      	cmp	r3, #8
 800d100:	d84f      	bhi.n	800d1a2 <ff_wtoupper+0xfa>
 800d102:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <ff_wtoupper+0x60>)
 800d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d108:	0800d12d 	.word	0x0800d12d
 800d10c:	0800d13f 	.word	0x0800d13f
 800d110:	0800d155 	.word	0x0800d155
 800d114:	0800d15d 	.word	0x0800d15d
 800d118:	0800d165 	.word	0x0800d165
 800d11c:	0800d16d 	.word	0x0800d16d
 800d120:	0800d175 	.word	0x0800d175
 800d124:	0800d17d 	.word	0x0800d17d
 800d128:	0800d185 	.word	0x0800d185
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d12c:	88fa      	ldrh	r2, [r7, #6]
 800d12e:	8a7b      	ldrh	r3, [r7, #18]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	4413      	add	r3, r2
 800d138:	881b      	ldrh	r3, [r3, #0]
 800d13a:	80fb      	strh	r3, [r7, #6]
 800d13c:	e027      	b.n	800d18e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d13e:	88fa      	ldrh	r2, [r7, #6]
 800d140:	8a7b      	ldrh	r3, [r7, #18]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	b29b      	uxth	r3, r3
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	88fa      	ldrh	r2, [r7, #6]
 800d14e:	1ad3      	subs	r3, r2, r3
 800d150:	80fb      	strh	r3, [r7, #6]
 800d152:	e01c      	b.n	800d18e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	3b10      	subs	r3, #16
 800d158:	80fb      	strh	r3, [r7, #6]
 800d15a:	e018      	b.n	800d18e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d15c:	88fb      	ldrh	r3, [r7, #6]
 800d15e:	3b20      	subs	r3, #32
 800d160:	80fb      	strh	r3, [r7, #6]
 800d162:	e014      	b.n	800d18e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d164:	88fb      	ldrh	r3, [r7, #6]
 800d166:	3b30      	subs	r3, #48	; 0x30
 800d168:	80fb      	strh	r3, [r7, #6]
 800d16a:	e010      	b.n	800d18e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	3b1a      	subs	r3, #26
 800d170:	80fb      	strh	r3, [r7, #6]
 800d172:	e00c      	b.n	800d18e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d174:	88fb      	ldrh	r3, [r7, #6]
 800d176:	3308      	adds	r3, #8
 800d178:	80fb      	strh	r3, [r7, #6]
 800d17a:	e008      	b.n	800d18e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d17c:	88fb      	ldrh	r3, [r7, #6]
 800d17e:	3b50      	subs	r3, #80	; 0x50
 800d180:	80fb      	strh	r3, [r7, #6]
 800d182:	e004      	b.n	800d18e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d184:	88fb      	ldrh	r3, [r7, #6]
 800d186:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d18a:	80fb      	strh	r3, [r7, #6]
 800d18c:	bf00      	nop
			}
			break;
 800d18e:	e008      	b.n	800d1a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d190:	89fb      	ldrh	r3, [r7, #14]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d195      	bne.n	800d0c2 <ff_wtoupper+0x1a>
 800d196:	8a3b      	ldrh	r3, [r7, #16]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	4413      	add	r3, r2
 800d19e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d1a0:	e78f      	b.n	800d0c2 <ff_wtoupper+0x1a>
			break;
 800d1a2:	bf00      	nop
	}

	return chr;
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	0800de4c 	.word	0x0800de4c
 800d1b8:	0800e040 	.word	0x0800e040

0800d1bc <__errno>:
 800d1bc:	4b01      	ldr	r3, [pc, #4]	; (800d1c4 <__errno+0x8>)
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	24000010 	.word	0x24000010

0800d1c8 <__libc_init_array>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	4d0d      	ldr	r5, [pc, #52]	; (800d200 <__libc_init_array+0x38>)
 800d1cc:	4c0d      	ldr	r4, [pc, #52]	; (800d204 <__libc_init_array+0x3c>)
 800d1ce:	1b64      	subs	r4, r4, r5
 800d1d0:	10a4      	asrs	r4, r4, #2
 800d1d2:	2600      	movs	r6, #0
 800d1d4:	42a6      	cmp	r6, r4
 800d1d6:	d109      	bne.n	800d1ec <__libc_init_array+0x24>
 800d1d8:	4d0b      	ldr	r5, [pc, #44]	; (800d208 <__libc_init_array+0x40>)
 800d1da:	4c0c      	ldr	r4, [pc, #48]	; (800d20c <__libc_init_array+0x44>)
 800d1dc:	f000 fc82 	bl	800dae4 <_init>
 800d1e0:	1b64      	subs	r4, r4, r5
 800d1e2:	10a4      	asrs	r4, r4, #2
 800d1e4:	2600      	movs	r6, #0
 800d1e6:	42a6      	cmp	r6, r4
 800d1e8:	d105      	bne.n	800d1f6 <__libc_init_array+0x2e>
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f0:	4798      	blx	r3
 800d1f2:	3601      	adds	r6, #1
 800d1f4:	e7ee      	b.n	800d1d4 <__libc_init_array+0xc>
 800d1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1fa:	4798      	blx	r3
 800d1fc:	3601      	adds	r6, #1
 800d1fe:	e7f2      	b.n	800d1e6 <__libc_init_array+0x1e>
 800d200:	0800e138 	.word	0x0800e138
 800d204:	0800e138 	.word	0x0800e138
 800d208:	0800e138 	.word	0x0800e138
 800d20c:	0800e13c 	.word	0x0800e13c

0800d210 <memcpy>:
 800d210:	440a      	add	r2, r1
 800d212:	4291      	cmp	r1, r2
 800d214:	f100 33ff 	add.w	r3, r0, #4294967295
 800d218:	d100      	bne.n	800d21c <memcpy+0xc>
 800d21a:	4770      	bx	lr
 800d21c:	b510      	push	{r4, lr}
 800d21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d226:	4291      	cmp	r1, r2
 800d228:	d1f9      	bne.n	800d21e <memcpy+0xe>
 800d22a:	bd10      	pop	{r4, pc}

0800d22c <memset>:
 800d22c:	4402      	add	r2, r0
 800d22e:	4603      	mov	r3, r0
 800d230:	4293      	cmp	r3, r2
 800d232:	d100      	bne.n	800d236 <memset+0xa>
 800d234:	4770      	bx	lr
 800d236:	f803 1b01 	strb.w	r1, [r3], #1
 800d23a:	e7f9      	b.n	800d230 <memset+0x4>

0800d23c <sniprintf>:
 800d23c:	b40c      	push	{r2, r3}
 800d23e:	b530      	push	{r4, r5, lr}
 800d240:	4b17      	ldr	r3, [pc, #92]	; (800d2a0 <sniprintf+0x64>)
 800d242:	1e0c      	subs	r4, r1, #0
 800d244:	681d      	ldr	r5, [r3, #0]
 800d246:	b09d      	sub	sp, #116	; 0x74
 800d248:	da08      	bge.n	800d25c <sniprintf+0x20>
 800d24a:	238b      	movs	r3, #139	; 0x8b
 800d24c:	602b      	str	r3, [r5, #0]
 800d24e:	f04f 30ff 	mov.w	r0, #4294967295
 800d252:	b01d      	add	sp, #116	; 0x74
 800d254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d258:	b002      	add	sp, #8
 800d25a:	4770      	bx	lr
 800d25c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d260:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d264:	bf14      	ite	ne
 800d266:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d26a:	4623      	moveq	r3, r4
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	9307      	str	r3, [sp, #28]
 800d270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d274:	9002      	str	r0, [sp, #8]
 800d276:	9006      	str	r0, [sp, #24]
 800d278:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d27c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d27e:	ab21      	add	r3, sp, #132	; 0x84
 800d280:	a902      	add	r1, sp, #8
 800d282:	4628      	mov	r0, r5
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	f000 f889 	bl	800d39c <_svfiprintf_r>
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	bfbc      	itt	lt
 800d28e:	238b      	movlt	r3, #139	; 0x8b
 800d290:	602b      	strlt	r3, [r5, #0]
 800d292:	2c00      	cmp	r4, #0
 800d294:	d0dd      	beq.n	800d252 <sniprintf+0x16>
 800d296:	9b02      	ldr	r3, [sp, #8]
 800d298:	2200      	movs	r2, #0
 800d29a:	701a      	strb	r2, [r3, #0]
 800d29c:	e7d9      	b.n	800d252 <sniprintf+0x16>
 800d29e:	bf00      	nop
 800d2a0:	24000010 	.word	0x24000010

0800d2a4 <siprintf>:
 800d2a4:	b40e      	push	{r1, r2, r3}
 800d2a6:	b500      	push	{lr}
 800d2a8:	b09c      	sub	sp, #112	; 0x70
 800d2aa:	ab1d      	add	r3, sp, #116	; 0x74
 800d2ac:	9002      	str	r0, [sp, #8]
 800d2ae:	9006      	str	r0, [sp, #24]
 800d2b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2b4:	4809      	ldr	r0, [pc, #36]	; (800d2dc <siprintf+0x38>)
 800d2b6:	9107      	str	r1, [sp, #28]
 800d2b8:	9104      	str	r1, [sp, #16]
 800d2ba:	4909      	ldr	r1, [pc, #36]	; (800d2e0 <siprintf+0x3c>)
 800d2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2c0:	9105      	str	r1, [sp, #20]
 800d2c2:	6800      	ldr	r0, [r0, #0]
 800d2c4:	9301      	str	r3, [sp, #4]
 800d2c6:	a902      	add	r1, sp, #8
 800d2c8:	f000 f868 	bl	800d39c <_svfiprintf_r>
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	701a      	strb	r2, [r3, #0]
 800d2d2:	b01c      	add	sp, #112	; 0x70
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	b003      	add	sp, #12
 800d2da:	4770      	bx	lr
 800d2dc:	24000010 	.word	0x24000010
 800d2e0:	ffff0208 	.word	0xffff0208

0800d2e4 <__ssputs_r>:
 800d2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e8:	688e      	ldr	r6, [r1, #8]
 800d2ea:	429e      	cmp	r6, r3
 800d2ec:	4682      	mov	sl, r0
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	4690      	mov	r8, r2
 800d2f2:	461f      	mov	r7, r3
 800d2f4:	d838      	bhi.n	800d368 <__ssputs_r+0x84>
 800d2f6:	898a      	ldrh	r2, [r1, #12]
 800d2f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2fc:	d032      	beq.n	800d364 <__ssputs_r+0x80>
 800d2fe:	6825      	ldr	r5, [r4, #0]
 800d300:	6909      	ldr	r1, [r1, #16]
 800d302:	eba5 0901 	sub.w	r9, r5, r1
 800d306:	6965      	ldr	r5, [r4, #20]
 800d308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d30c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d310:	3301      	adds	r3, #1
 800d312:	444b      	add	r3, r9
 800d314:	106d      	asrs	r5, r5, #1
 800d316:	429d      	cmp	r5, r3
 800d318:	bf38      	it	cc
 800d31a:	461d      	movcc	r5, r3
 800d31c:	0553      	lsls	r3, r2, #21
 800d31e:	d531      	bpl.n	800d384 <__ssputs_r+0xa0>
 800d320:	4629      	mov	r1, r5
 800d322:	f000 fb39 	bl	800d998 <_malloc_r>
 800d326:	4606      	mov	r6, r0
 800d328:	b950      	cbnz	r0, 800d340 <__ssputs_r+0x5c>
 800d32a:	230c      	movs	r3, #12
 800d32c:	f8ca 3000 	str.w	r3, [sl]
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	f04f 30ff 	mov.w	r0, #4294967295
 800d33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d340:	6921      	ldr	r1, [r4, #16]
 800d342:	464a      	mov	r2, r9
 800d344:	f7ff ff64 	bl	800d210 <memcpy>
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d352:	81a3      	strh	r3, [r4, #12]
 800d354:	6126      	str	r6, [r4, #16]
 800d356:	6165      	str	r5, [r4, #20]
 800d358:	444e      	add	r6, r9
 800d35a:	eba5 0509 	sub.w	r5, r5, r9
 800d35e:	6026      	str	r6, [r4, #0]
 800d360:	60a5      	str	r5, [r4, #8]
 800d362:	463e      	mov	r6, r7
 800d364:	42be      	cmp	r6, r7
 800d366:	d900      	bls.n	800d36a <__ssputs_r+0x86>
 800d368:	463e      	mov	r6, r7
 800d36a:	4632      	mov	r2, r6
 800d36c:	6820      	ldr	r0, [r4, #0]
 800d36e:	4641      	mov	r1, r8
 800d370:	f000 faa8 	bl	800d8c4 <memmove>
 800d374:	68a3      	ldr	r3, [r4, #8]
 800d376:	6822      	ldr	r2, [r4, #0]
 800d378:	1b9b      	subs	r3, r3, r6
 800d37a:	4432      	add	r2, r6
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	6022      	str	r2, [r4, #0]
 800d380:	2000      	movs	r0, #0
 800d382:	e7db      	b.n	800d33c <__ssputs_r+0x58>
 800d384:	462a      	mov	r2, r5
 800d386:	f000 fb61 	bl	800da4c <_realloc_r>
 800d38a:	4606      	mov	r6, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d1e1      	bne.n	800d354 <__ssputs_r+0x70>
 800d390:	6921      	ldr	r1, [r4, #16]
 800d392:	4650      	mov	r0, sl
 800d394:	f000 fab0 	bl	800d8f8 <_free_r>
 800d398:	e7c7      	b.n	800d32a <__ssputs_r+0x46>
	...

0800d39c <_svfiprintf_r>:
 800d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	4698      	mov	r8, r3
 800d3a2:	898b      	ldrh	r3, [r1, #12]
 800d3a4:	061b      	lsls	r3, r3, #24
 800d3a6:	b09d      	sub	sp, #116	; 0x74
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	460d      	mov	r5, r1
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	d50e      	bpl.n	800d3ce <_svfiprintf_r+0x32>
 800d3b0:	690b      	ldr	r3, [r1, #16]
 800d3b2:	b963      	cbnz	r3, 800d3ce <_svfiprintf_r+0x32>
 800d3b4:	2140      	movs	r1, #64	; 0x40
 800d3b6:	f000 faef 	bl	800d998 <_malloc_r>
 800d3ba:	6028      	str	r0, [r5, #0]
 800d3bc:	6128      	str	r0, [r5, #16]
 800d3be:	b920      	cbnz	r0, 800d3ca <_svfiprintf_r+0x2e>
 800d3c0:	230c      	movs	r3, #12
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c8:	e0d1      	b.n	800d56e <_svfiprintf_r+0x1d2>
 800d3ca:	2340      	movs	r3, #64	; 0x40
 800d3cc:	616b      	str	r3, [r5, #20]
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d2:	2320      	movs	r3, #32
 800d3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3dc:	2330      	movs	r3, #48	; 0x30
 800d3de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d588 <_svfiprintf_r+0x1ec>
 800d3e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3e6:	f04f 0901 	mov.w	r9, #1
 800d3ea:	4623      	mov	r3, r4
 800d3ec:	469a      	mov	sl, r3
 800d3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f2:	b10a      	cbz	r2, 800d3f8 <_svfiprintf_r+0x5c>
 800d3f4:	2a25      	cmp	r2, #37	; 0x25
 800d3f6:	d1f9      	bne.n	800d3ec <_svfiprintf_r+0x50>
 800d3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800d3fc:	d00b      	beq.n	800d416 <_svfiprintf_r+0x7a>
 800d3fe:	465b      	mov	r3, fp
 800d400:	4622      	mov	r2, r4
 800d402:	4629      	mov	r1, r5
 800d404:	4638      	mov	r0, r7
 800d406:	f7ff ff6d 	bl	800d2e4 <__ssputs_r>
 800d40a:	3001      	adds	r0, #1
 800d40c:	f000 80aa 	beq.w	800d564 <_svfiprintf_r+0x1c8>
 800d410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d412:	445a      	add	r2, fp
 800d414:	9209      	str	r2, [sp, #36]	; 0x24
 800d416:	f89a 3000 	ldrb.w	r3, [sl]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 80a2 	beq.w	800d564 <_svfiprintf_r+0x1c8>
 800d420:	2300      	movs	r3, #0
 800d422:	f04f 32ff 	mov.w	r2, #4294967295
 800d426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d42a:	f10a 0a01 	add.w	sl, sl, #1
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	9307      	str	r3, [sp, #28]
 800d432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d436:	931a      	str	r3, [sp, #104]	; 0x68
 800d438:	4654      	mov	r4, sl
 800d43a:	2205      	movs	r2, #5
 800d43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d440:	4851      	ldr	r0, [pc, #324]	; (800d588 <_svfiprintf_r+0x1ec>)
 800d442:	f7f2 ff4d 	bl	80002e0 <memchr>
 800d446:	9a04      	ldr	r2, [sp, #16]
 800d448:	b9d8      	cbnz	r0, 800d482 <_svfiprintf_r+0xe6>
 800d44a:	06d0      	lsls	r0, r2, #27
 800d44c:	bf44      	itt	mi
 800d44e:	2320      	movmi	r3, #32
 800d450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d454:	0711      	lsls	r1, r2, #28
 800d456:	bf44      	itt	mi
 800d458:	232b      	movmi	r3, #43	; 0x2b
 800d45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d45e:	f89a 3000 	ldrb.w	r3, [sl]
 800d462:	2b2a      	cmp	r3, #42	; 0x2a
 800d464:	d015      	beq.n	800d492 <_svfiprintf_r+0xf6>
 800d466:	9a07      	ldr	r2, [sp, #28]
 800d468:	4654      	mov	r4, sl
 800d46a:	2000      	movs	r0, #0
 800d46c:	f04f 0c0a 	mov.w	ip, #10
 800d470:	4621      	mov	r1, r4
 800d472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d476:	3b30      	subs	r3, #48	; 0x30
 800d478:	2b09      	cmp	r3, #9
 800d47a:	d94e      	bls.n	800d51a <_svfiprintf_r+0x17e>
 800d47c:	b1b0      	cbz	r0, 800d4ac <_svfiprintf_r+0x110>
 800d47e:	9207      	str	r2, [sp, #28]
 800d480:	e014      	b.n	800d4ac <_svfiprintf_r+0x110>
 800d482:	eba0 0308 	sub.w	r3, r0, r8
 800d486:	fa09 f303 	lsl.w	r3, r9, r3
 800d48a:	4313      	orrs	r3, r2
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	46a2      	mov	sl, r4
 800d490:	e7d2      	b.n	800d438 <_svfiprintf_r+0x9c>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	1d19      	adds	r1, r3, #4
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	9103      	str	r1, [sp, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	bfbb      	ittet	lt
 800d49e:	425b      	neglt	r3, r3
 800d4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800d4a4:	9307      	strge	r3, [sp, #28]
 800d4a6:	9307      	strlt	r3, [sp, #28]
 800d4a8:	bfb8      	it	lt
 800d4aa:	9204      	strlt	r2, [sp, #16]
 800d4ac:	7823      	ldrb	r3, [r4, #0]
 800d4ae:	2b2e      	cmp	r3, #46	; 0x2e
 800d4b0:	d10c      	bne.n	800d4cc <_svfiprintf_r+0x130>
 800d4b2:	7863      	ldrb	r3, [r4, #1]
 800d4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4b6:	d135      	bne.n	800d524 <_svfiprintf_r+0x188>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	1d1a      	adds	r2, r3, #4
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	9203      	str	r2, [sp, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	bfb8      	it	lt
 800d4c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4c8:	3402      	adds	r4, #2
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d598 <_svfiprintf_r+0x1fc>
 800d4d0:	7821      	ldrb	r1, [r4, #0]
 800d4d2:	2203      	movs	r2, #3
 800d4d4:	4650      	mov	r0, sl
 800d4d6:	f7f2 ff03 	bl	80002e0 <memchr>
 800d4da:	b140      	cbz	r0, 800d4ee <_svfiprintf_r+0x152>
 800d4dc:	2340      	movs	r3, #64	; 0x40
 800d4de:	eba0 000a 	sub.w	r0, r0, sl
 800d4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	4303      	orrs	r3, r0
 800d4ea:	3401      	adds	r4, #1
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f2:	4826      	ldr	r0, [pc, #152]	; (800d58c <_svfiprintf_r+0x1f0>)
 800d4f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4f8:	2206      	movs	r2, #6
 800d4fa:	f7f2 fef1 	bl	80002e0 <memchr>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d038      	beq.n	800d574 <_svfiprintf_r+0x1d8>
 800d502:	4b23      	ldr	r3, [pc, #140]	; (800d590 <_svfiprintf_r+0x1f4>)
 800d504:	bb1b      	cbnz	r3, 800d54e <_svfiprintf_r+0x1b2>
 800d506:	9b03      	ldr	r3, [sp, #12]
 800d508:	3307      	adds	r3, #7
 800d50a:	f023 0307 	bic.w	r3, r3, #7
 800d50e:	3308      	adds	r3, #8
 800d510:	9303      	str	r3, [sp, #12]
 800d512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d514:	4433      	add	r3, r6
 800d516:	9309      	str	r3, [sp, #36]	; 0x24
 800d518:	e767      	b.n	800d3ea <_svfiprintf_r+0x4e>
 800d51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d51e:	460c      	mov	r4, r1
 800d520:	2001      	movs	r0, #1
 800d522:	e7a5      	b.n	800d470 <_svfiprintf_r+0xd4>
 800d524:	2300      	movs	r3, #0
 800d526:	3401      	adds	r4, #1
 800d528:	9305      	str	r3, [sp, #20]
 800d52a:	4619      	mov	r1, r3
 800d52c:	f04f 0c0a 	mov.w	ip, #10
 800d530:	4620      	mov	r0, r4
 800d532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d536:	3a30      	subs	r2, #48	; 0x30
 800d538:	2a09      	cmp	r2, #9
 800d53a:	d903      	bls.n	800d544 <_svfiprintf_r+0x1a8>
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0c5      	beq.n	800d4cc <_svfiprintf_r+0x130>
 800d540:	9105      	str	r1, [sp, #20]
 800d542:	e7c3      	b.n	800d4cc <_svfiprintf_r+0x130>
 800d544:	fb0c 2101 	mla	r1, ip, r1, r2
 800d548:	4604      	mov	r4, r0
 800d54a:	2301      	movs	r3, #1
 800d54c:	e7f0      	b.n	800d530 <_svfiprintf_r+0x194>
 800d54e:	ab03      	add	r3, sp, #12
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	462a      	mov	r2, r5
 800d554:	4b0f      	ldr	r3, [pc, #60]	; (800d594 <_svfiprintf_r+0x1f8>)
 800d556:	a904      	add	r1, sp, #16
 800d558:	4638      	mov	r0, r7
 800d55a:	f3af 8000 	nop.w
 800d55e:	1c42      	adds	r2, r0, #1
 800d560:	4606      	mov	r6, r0
 800d562:	d1d6      	bne.n	800d512 <_svfiprintf_r+0x176>
 800d564:	89ab      	ldrh	r3, [r5, #12]
 800d566:	065b      	lsls	r3, r3, #25
 800d568:	f53f af2c 	bmi.w	800d3c4 <_svfiprintf_r+0x28>
 800d56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d56e:	b01d      	add	sp, #116	; 0x74
 800d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b06      	ldr	r3, [pc, #24]	; (800d594 <_svfiprintf_r+0x1f8>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4638      	mov	r0, r7
 800d580:	f000 f87a 	bl	800d678 <_printf_i>
 800d584:	e7eb      	b.n	800d55e <_svfiprintf_r+0x1c2>
 800d586:	bf00      	nop
 800d588:	0800e0fc 	.word	0x0800e0fc
 800d58c:	0800e106 	.word	0x0800e106
 800d590:	00000000 	.word	0x00000000
 800d594:	0800d2e5 	.word	0x0800d2e5
 800d598:	0800e102 	.word	0x0800e102

0800d59c <_printf_common>:
 800d59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	4699      	mov	r9, r3
 800d5a4:	688a      	ldr	r2, [r1, #8]
 800d5a6:	690b      	ldr	r3, [r1, #16]
 800d5a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	bfb8      	it	lt
 800d5b0:	4613      	movlt	r3, r2
 800d5b2:	6033      	str	r3, [r6, #0]
 800d5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	b10a      	cbz	r2, 800d5c2 <_printf_common+0x26>
 800d5be:	3301      	adds	r3, #1
 800d5c0:	6033      	str	r3, [r6, #0]
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	0699      	lsls	r1, r3, #26
 800d5c6:	bf42      	ittt	mi
 800d5c8:	6833      	ldrmi	r3, [r6, #0]
 800d5ca:	3302      	addmi	r3, #2
 800d5cc:	6033      	strmi	r3, [r6, #0]
 800d5ce:	6825      	ldr	r5, [r4, #0]
 800d5d0:	f015 0506 	ands.w	r5, r5, #6
 800d5d4:	d106      	bne.n	800d5e4 <_printf_common+0x48>
 800d5d6:	f104 0a19 	add.w	sl, r4, #25
 800d5da:	68e3      	ldr	r3, [r4, #12]
 800d5dc:	6832      	ldr	r2, [r6, #0]
 800d5de:	1a9b      	subs	r3, r3, r2
 800d5e0:	42ab      	cmp	r3, r5
 800d5e2:	dc26      	bgt.n	800d632 <_printf_common+0x96>
 800d5e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5e8:	1e13      	subs	r3, r2, #0
 800d5ea:	6822      	ldr	r2, [r4, #0]
 800d5ec:	bf18      	it	ne
 800d5ee:	2301      	movne	r3, #1
 800d5f0:	0692      	lsls	r2, r2, #26
 800d5f2:	d42b      	bmi.n	800d64c <_printf_common+0xb0>
 800d5f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5f8:	4649      	mov	r1, r9
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	47c0      	blx	r8
 800d5fe:	3001      	adds	r0, #1
 800d600:	d01e      	beq.n	800d640 <_printf_common+0xa4>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	68e5      	ldr	r5, [r4, #12]
 800d606:	6832      	ldr	r2, [r6, #0]
 800d608:	f003 0306 	and.w	r3, r3, #6
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	bf08      	it	eq
 800d610:	1aad      	subeq	r5, r5, r2
 800d612:	68a3      	ldr	r3, [r4, #8]
 800d614:	6922      	ldr	r2, [r4, #16]
 800d616:	bf0c      	ite	eq
 800d618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d61c:	2500      	movne	r5, #0
 800d61e:	4293      	cmp	r3, r2
 800d620:	bfc4      	itt	gt
 800d622:	1a9b      	subgt	r3, r3, r2
 800d624:	18ed      	addgt	r5, r5, r3
 800d626:	2600      	movs	r6, #0
 800d628:	341a      	adds	r4, #26
 800d62a:	42b5      	cmp	r5, r6
 800d62c:	d11a      	bne.n	800d664 <_printf_common+0xc8>
 800d62e:	2000      	movs	r0, #0
 800d630:	e008      	b.n	800d644 <_printf_common+0xa8>
 800d632:	2301      	movs	r3, #1
 800d634:	4652      	mov	r2, sl
 800d636:	4649      	mov	r1, r9
 800d638:	4638      	mov	r0, r7
 800d63a:	47c0      	blx	r8
 800d63c:	3001      	adds	r0, #1
 800d63e:	d103      	bne.n	800d648 <_printf_common+0xac>
 800d640:	f04f 30ff 	mov.w	r0, #4294967295
 800d644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d648:	3501      	adds	r5, #1
 800d64a:	e7c6      	b.n	800d5da <_printf_common+0x3e>
 800d64c:	18e1      	adds	r1, r4, r3
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	2030      	movs	r0, #48	; 0x30
 800d652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d656:	4422      	add	r2, r4
 800d658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d65c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d660:	3302      	adds	r3, #2
 800d662:	e7c7      	b.n	800d5f4 <_printf_common+0x58>
 800d664:	2301      	movs	r3, #1
 800d666:	4622      	mov	r2, r4
 800d668:	4649      	mov	r1, r9
 800d66a:	4638      	mov	r0, r7
 800d66c:	47c0      	blx	r8
 800d66e:	3001      	adds	r0, #1
 800d670:	d0e6      	beq.n	800d640 <_printf_common+0xa4>
 800d672:	3601      	adds	r6, #1
 800d674:	e7d9      	b.n	800d62a <_printf_common+0x8e>
	...

0800d678 <_printf_i>:
 800d678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d67c:	460c      	mov	r4, r1
 800d67e:	4691      	mov	r9, r2
 800d680:	7e27      	ldrb	r7, [r4, #24]
 800d682:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d684:	2f78      	cmp	r7, #120	; 0x78
 800d686:	4680      	mov	r8, r0
 800d688:	469a      	mov	sl, r3
 800d68a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d68e:	d807      	bhi.n	800d6a0 <_printf_i+0x28>
 800d690:	2f62      	cmp	r7, #98	; 0x62
 800d692:	d80a      	bhi.n	800d6aa <_printf_i+0x32>
 800d694:	2f00      	cmp	r7, #0
 800d696:	f000 80d8 	beq.w	800d84a <_printf_i+0x1d2>
 800d69a:	2f58      	cmp	r7, #88	; 0x58
 800d69c:	f000 80a3 	beq.w	800d7e6 <_printf_i+0x16e>
 800d6a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d6a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6a8:	e03a      	b.n	800d720 <_printf_i+0xa8>
 800d6aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6ae:	2b15      	cmp	r3, #21
 800d6b0:	d8f6      	bhi.n	800d6a0 <_printf_i+0x28>
 800d6b2:	a001      	add	r0, pc, #4	; (adr r0, 800d6b8 <_printf_i+0x40>)
 800d6b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d6b8:	0800d711 	.word	0x0800d711
 800d6bc:	0800d725 	.word	0x0800d725
 800d6c0:	0800d6a1 	.word	0x0800d6a1
 800d6c4:	0800d6a1 	.word	0x0800d6a1
 800d6c8:	0800d6a1 	.word	0x0800d6a1
 800d6cc:	0800d6a1 	.word	0x0800d6a1
 800d6d0:	0800d725 	.word	0x0800d725
 800d6d4:	0800d6a1 	.word	0x0800d6a1
 800d6d8:	0800d6a1 	.word	0x0800d6a1
 800d6dc:	0800d6a1 	.word	0x0800d6a1
 800d6e0:	0800d6a1 	.word	0x0800d6a1
 800d6e4:	0800d831 	.word	0x0800d831
 800d6e8:	0800d755 	.word	0x0800d755
 800d6ec:	0800d813 	.word	0x0800d813
 800d6f0:	0800d6a1 	.word	0x0800d6a1
 800d6f4:	0800d6a1 	.word	0x0800d6a1
 800d6f8:	0800d853 	.word	0x0800d853
 800d6fc:	0800d6a1 	.word	0x0800d6a1
 800d700:	0800d755 	.word	0x0800d755
 800d704:	0800d6a1 	.word	0x0800d6a1
 800d708:	0800d6a1 	.word	0x0800d6a1
 800d70c:	0800d81b 	.word	0x0800d81b
 800d710:	680b      	ldr	r3, [r1, #0]
 800d712:	1d1a      	adds	r2, r3, #4
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	600a      	str	r2, [r1, #0]
 800d718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d71c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d720:	2301      	movs	r3, #1
 800d722:	e0a3      	b.n	800d86c <_printf_i+0x1f4>
 800d724:	6825      	ldr	r5, [r4, #0]
 800d726:	6808      	ldr	r0, [r1, #0]
 800d728:	062e      	lsls	r6, r5, #24
 800d72a:	f100 0304 	add.w	r3, r0, #4
 800d72e:	d50a      	bpl.n	800d746 <_printf_i+0xce>
 800d730:	6805      	ldr	r5, [r0, #0]
 800d732:	600b      	str	r3, [r1, #0]
 800d734:	2d00      	cmp	r5, #0
 800d736:	da03      	bge.n	800d740 <_printf_i+0xc8>
 800d738:	232d      	movs	r3, #45	; 0x2d
 800d73a:	426d      	negs	r5, r5
 800d73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d740:	485e      	ldr	r0, [pc, #376]	; (800d8bc <_printf_i+0x244>)
 800d742:	230a      	movs	r3, #10
 800d744:	e019      	b.n	800d77a <_printf_i+0x102>
 800d746:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d74a:	6805      	ldr	r5, [r0, #0]
 800d74c:	600b      	str	r3, [r1, #0]
 800d74e:	bf18      	it	ne
 800d750:	b22d      	sxthne	r5, r5
 800d752:	e7ef      	b.n	800d734 <_printf_i+0xbc>
 800d754:	680b      	ldr	r3, [r1, #0]
 800d756:	6825      	ldr	r5, [r4, #0]
 800d758:	1d18      	adds	r0, r3, #4
 800d75a:	6008      	str	r0, [r1, #0]
 800d75c:	0628      	lsls	r0, r5, #24
 800d75e:	d501      	bpl.n	800d764 <_printf_i+0xec>
 800d760:	681d      	ldr	r5, [r3, #0]
 800d762:	e002      	b.n	800d76a <_printf_i+0xf2>
 800d764:	0669      	lsls	r1, r5, #25
 800d766:	d5fb      	bpl.n	800d760 <_printf_i+0xe8>
 800d768:	881d      	ldrh	r5, [r3, #0]
 800d76a:	4854      	ldr	r0, [pc, #336]	; (800d8bc <_printf_i+0x244>)
 800d76c:	2f6f      	cmp	r7, #111	; 0x6f
 800d76e:	bf0c      	ite	eq
 800d770:	2308      	moveq	r3, #8
 800d772:	230a      	movne	r3, #10
 800d774:	2100      	movs	r1, #0
 800d776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d77a:	6866      	ldr	r6, [r4, #4]
 800d77c:	60a6      	str	r6, [r4, #8]
 800d77e:	2e00      	cmp	r6, #0
 800d780:	bfa2      	ittt	ge
 800d782:	6821      	ldrge	r1, [r4, #0]
 800d784:	f021 0104 	bicge.w	r1, r1, #4
 800d788:	6021      	strge	r1, [r4, #0]
 800d78a:	b90d      	cbnz	r5, 800d790 <_printf_i+0x118>
 800d78c:	2e00      	cmp	r6, #0
 800d78e:	d04d      	beq.n	800d82c <_printf_i+0x1b4>
 800d790:	4616      	mov	r6, r2
 800d792:	fbb5 f1f3 	udiv	r1, r5, r3
 800d796:	fb03 5711 	mls	r7, r3, r1, r5
 800d79a:	5dc7      	ldrb	r7, [r0, r7]
 800d79c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7a0:	462f      	mov	r7, r5
 800d7a2:	42bb      	cmp	r3, r7
 800d7a4:	460d      	mov	r5, r1
 800d7a6:	d9f4      	bls.n	800d792 <_printf_i+0x11a>
 800d7a8:	2b08      	cmp	r3, #8
 800d7aa:	d10b      	bne.n	800d7c4 <_printf_i+0x14c>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	07df      	lsls	r7, r3, #31
 800d7b0:	d508      	bpl.n	800d7c4 <_printf_i+0x14c>
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	6861      	ldr	r1, [r4, #4]
 800d7b6:	4299      	cmp	r1, r3
 800d7b8:	bfde      	ittt	le
 800d7ba:	2330      	movle	r3, #48	; 0x30
 800d7bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7c4:	1b92      	subs	r2, r2, r6
 800d7c6:	6122      	str	r2, [r4, #16]
 800d7c8:	f8cd a000 	str.w	sl, [sp]
 800d7cc:	464b      	mov	r3, r9
 800d7ce:	aa03      	add	r2, sp, #12
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	f7ff fee2 	bl	800d59c <_printf_common>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d14c      	bne.n	800d876 <_printf_i+0x1fe>
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	b004      	add	sp, #16
 800d7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e6:	4835      	ldr	r0, [pc, #212]	; (800d8bc <_printf_i+0x244>)
 800d7e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7ec:	6823      	ldr	r3, [r4, #0]
 800d7ee:	680e      	ldr	r6, [r1, #0]
 800d7f0:	061f      	lsls	r7, r3, #24
 800d7f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d7f6:	600e      	str	r6, [r1, #0]
 800d7f8:	d514      	bpl.n	800d824 <_printf_i+0x1ac>
 800d7fa:	07d9      	lsls	r1, r3, #31
 800d7fc:	bf44      	itt	mi
 800d7fe:	f043 0320 	orrmi.w	r3, r3, #32
 800d802:	6023      	strmi	r3, [r4, #0]
 800d804:	b91d      	cbnz	r5, 800d80e <_printf_i+0x196>
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	f023 0320 	bic.w	r3, r3, #32
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	2310      	movs	r3, #16
 800d810:	e7b0      	b.n	800d774 <_printf_i+0xfc>
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	f043 0320 	orr.w	r3, r3, #32
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	2378      	movs	r3, #120	; 0x78
 800d81c:	4828      	ldr	r0, [pc, #160]	; (800d8c0 <_printf_i+0x248>)
 800d81e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d822:	e7e3      	b.n	800d7ec <_printf_i+0x174>
 800d824:	065e      	lsls	r6, r3, #25
 800d826:	bf48      	it	mi
 800d828:	b2ad      	uxthmi	r5, r5
 800d82a:	e7e6      	b.n	800d7fa <_printf_i+0x182>
 800d82c:	4616      	mov	r6, r2
 800d82e:	e7bb      	b.n	800d7a8 <_printf_i+0x130>
 800d830:	680b      	ldr	r3, [r1, #0]
 800d832:	6826      	ldr	r6, [r4, #0]
 800d834:	6960      	ldr	r0, [r4, #20]
 800d836:	1d1d      	adds	r5, r3, #4
 800d838:	600d      	str	r5, [r1, #0]
 800d83a:	0635      	lsls	r5, r6, #24
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	d501      	bpl.n	800d844 <_printf_i+0x1cc>
 800d840:	6018      	str	r0, [r3, #0]
 800d842:	e002      	b.n	800d84a <_printf_i+0x1d2>
 800d844:	0671      	lsls	r1, r6, #25
 800d846:	d5fb      	bpl.n	800d840 <_printf_i+0x1c8>
 800d848:	8018      	strh	r0, [r3, #0]
 800d84a:	2300      	movs	r3, #0
 800d84c:	6123      	str	r3, [r4, #16]
 800d84e:	4616      	mov	r6, r2
 800d850:	e7ba      	b.n	800d7c8 <_printf_i+0x150>
 800d852:	680b      	ldr	r3, [r1, #0]
 800d854:	1d1a      	adds	r2, r3, #4
 800d856:	600a      	str	r2, [r1, #0]
 800d858:	681e      	ldr	r6, [r3, #0]
 800d85a:	6862      	ldr	r2, [r4, #4]
 800d85c:	2100      	movs	r1, #0
 800d85e:	4630      	mov	r0, r6
 800d860:	f7f2 fd3e 	bl	80002e0 <memchr>
 800d864:	b108      	cbz	r0, 800d86a <_printf_i+0x1f2>
 800d866:	1b80      	subs	r0, r0, r6
 800d868:	6060      	str	r0, [r4, #4]
 800d86a:	6863      	ldr	r3, [r4, #4]
 800d86c:	6123      	str	r3, [r4, #16]
 800d86e:	2300      	movs	r3, #0
 800d870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d874:	e7a8      	b.n	800d7c8 <_printf_i+0x150>
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	4632      	mov	r2, r6
 800d87a:	4649      	mov	r1, r9
 800d87c:	4640      	mov	r0, r8
 800d87e:	47d0      	blx	sl
 800d880:	3001      	adds	r0, #1
 800d882:	d0ab      	beq.n	800d7dc <_printf_i+0x164>
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	079b      	lsls	r3, r3, #30
 800d888:	d413      	bmi.n	800d8b2 <_printf_i+0x23a>
 800d88a:	68e0      	ldr	r0, [r4, #12]
 800d88c:	9b03      	ldr	r3, [sp, #12]
 800d88e:	4298      	cmp	r0, r3
 800d890:	bfb8      	it	lt
 800d892:	4618      	movlt	r0, r3
 800d894:	e7a4      	b.n	800d7e0 <_printf_i+0x168>
 800d896:	2301      	movs	r3, #1
 800d898:	4632      	mov	r2, r6
 800d89a:	4649      	mov	r1, r9
 800d89c:	4640      	mov	r0, r8
 800d89e:	47d0      	blx	sl
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	d09b      	beq.n	800d7dc <_printf_i+0x164>
 800d8a4:	3501      	adds	r5, #1
 800d8a6:	68e3      	ldr	r3, [r4, #12]
 800d8a8:	9903      	ldr	r1, [sp, #12]
 800d8aa:	1a5b      	subs	r3, r3, r1
 800d8ac:	42ab      	cmp	r3, r5
 800d8ae:	dcf2      	bgt.n	800d896 <_printf_i+0x21e>
 800d8b0:	e7eb      	b.n	800d88a <_printf_i+0x212>
 800d8b2:	2500      	movs	r5, #0
 800d8b4:	f104 0619 	add.w	r6, r4, #25
 800d8b8:	e7f5      	b.n	800d8a6 <_printf_i+0x22e>
 800d8ba:	bf00      	nop
 800d8bc:	0800e10d 	.word	0x0800e10d
 800d8c0:	0800e11e 	.word	0x0800e11e

0800d8c4 <memmove>:
 800d8c4:	4288      	cmp	r0, r1
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	eb01 0402 	add.w	r4, r1, r2
 800d8cc:	d902      	bls.n	800d8d4 <memmove+0x10>
 800d8ce:	4284      	cmp	r4, r0
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	d807      	bhi.n	800d8e4 <memmove+0x20>
 800d8d4:	1e43      	subs	r3, r0, #1
 800d8d6:	42a1      	cmp	r1, r4
 800d8d8:	d008      	beq.n	800d8ec <memmove+0x28>
 800d8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8e2:	e7f8      	b.n	800d8d6 <memmove+0x12>
 800d8e4:	4402      	add	r2, r0
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	428a      	cmp	r2, r1
 800d8ea:	d100      	bne.n	800d8ee <memmove+0x2a>
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8f6:	e7f7      	b.n	800d8e8 <memmove+0x24>

0800d8f8 <_free_r>:
 800d8f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8fa:	2900      	cmp	r1, #0
 800d8fc:	d048      	beq.n	800d990 <_free_r+0x98>
 800d8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d902:	9001      	str	r0, [sp, #4]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f1a1 0404 	sub.w	r4, r1, #4
 800d90a:	bfb8      	it	lt
 800d90c:	18e4      	addlt	r4, r4, r3
 800d90e:	f000 f8d3 	bl	800dab8 <__malloc_lock>
 800d912:	4a20      	ldr	r2, [pc, #128]	; (800d994 <_free_r+0x9c>)
 800d914:	9801      	ldr	r0, [sp, #4]
 800d916:	6813      	ldr	r3, [r2, #0]
 800d918:	4615      	mov	r5, r2
 800d91a:	b933      	cbnz	r3, 800d92a <_free_r+0x32>
 800d91c:	6063      	str	r3, [r4, #4]
 800d91e:	6014      	str	r4, [r2, #0]
 800d920:	b003      	add	sp, #12
 800d922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d926:	f000 b8cd 	b.w	800dac4 <__malloc_unlock>
 800d92a:	42a3      	cmp	r3, r4
 800d92c:	d90b      	bls.n	800d946 <_free_r+0x4e>
 800d92e:	6821      	ldr	r1, [r4, #0]
 800d930:	1862      	adds	r2, r4, r1
 800d932:	4293      	cmp	r3, r2
 800d934:	bf04      	itt	eq
 800d936:	681a      	ldreq	r2, [r3, #0]
 800d938:	685b      	ldreq	r3, [r3, #4]
 800d93a:	6063      	str	r3, [r4, #4]
 800d93c:	bf04      	itt	eq
 800d93e:	1852      	addeq	r2, r2, r1
 800d940:	6022      	streq	r2, [r4, #0]
 800d942:	602c      	str	r4, [r5, #0]
 800d944:	e7ec      	b.n	800d920 <_free_r+0x28>
 800d946:	461a      	mov	r2, r3
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	b10b      	cbz	r3, 800d950 <_free_r+0x58>
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	d9fa      	bls.n	800d946 <_free_r+0x4e>
 800d950:	6811      	ldr	r1, [r2, #0]
 800d952:	1855      	adds	r5, r2, r1
 800d954:	42a5      	cmp	r5, r4
 800d956:	d10b      	bne.n	800d970 <_free_r+0x78>
 800d958:	6824      	ldr	r4, [r4, #0]
 800d95a:	4421      	add	r1, r4
 800d95c:	1854      	adds	r4, r2, r1
 800d95e:	42a3      	cmp	r3, r4
 800d960:	6011      	str	r1, [r2, #0]
 800d962:	d1dd      	bne.n	800d920 <_free_r+0x28>
 800d964:	681c      	ldr	r4, [r3, #0]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	6053      	str	r3, [r2, #4]
 800d96a:	4421      	add	r1, r4
 800d96c:	6011      	str	r1, [r2, #0]
 800d96e:	e7d7      	b.n	800d920 <_free_r+0x28>
 800d970:	d902      	bls.n	800d978 <_free_r+0x80>
 800d972:	230c      	movs	r3, #12
 800d974:	6003      	str	r3, [r0, #0]
 800d976:	e7d3      	b.n	800d920 <_free_r+0x28>
 800d978:	6825      	ldr	r5, [r4, #0]
 800d97a:	1961      	adds	r1, r4, r5
 800d97c:	428b      	cmp	r3, r1
 800d97e:	bf04      	itt	eq
 800d980:	6819      	ldreq	r1, [r3, #0]
 800d982:	685b      	ldreq	r3, [r3, #4]
 800d984:	6063      	str	r3, [r4, #4]
 800d986:	bf04      	itt	eq
 800d988:	1949      	addeq	r1, r1, r5
 800d98a:	6021      	streq	r1, [r4, #0]
 800d98c:	6054      	str	r4, [r2, #4]
 800d98e:	e7c7      	b.n	800d920 <_free_r+0x28>
 800d990:	b003      	add	sp, #12
 800d992:	bd30      	pop	{r4, r5, pc}
 800d994:	24001334 	.word	0x24001334

0800d998 <_malloc_r>:
 800d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99a:	1ccd      	adds	r5, r1, #3
 800d99c:	f025 0503 	bic.w	r5, r5, #3
 800d9a0:	3508      	adds	r5, #8
 800d9a2:	2d0c      	cmp	r5, #12
 800d9a4:	bf38      	it	cc
 800d9a6:	250c      	movcc	r5, #12
 800d9a8:	2d00      	cmp	r5, #0
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	db01      	blt.n	800d9b2 <_malloc_r+0x1a>
 800d9ae:	42a9      	cmp	r1, r5
 800d9b0:	d903      	bls.n	800d9ba <_malloc_r+0x22>
 800d9b2:	230c      	movs	r3, #12
 800d9b4:	6033      	str	r3, [r6, #0]
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ba:	f000 f87d 	bl	800dab8 <__malloc_lock>
 800d9be:	4921      	ldr	r1, [pc, #132]	; (800da44 <_malloc_r+0xac>)
 800d9c0:	680a      	ldr	r2, [r1, #0]
 800d9c2:	4614      	mov	r4, r2
 800d9c4:	b99c      	cbnz	r4, 800d9ee <_malloc_r+0x56>
 800d9c6:	4f20      	ldr	r7, [pc, #128]	; (800da48 <_malloc_r+0xb0>)
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	b923      	cbnz	r3, 800d9d6 <_malloc_r+0x3e>
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f000 f862 	bl	800da98 <_sbrk_r>
 800d9d4:	6038      	str	r0, [r7, #0]
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f000 f85d 	bl	800da98 <_sbrk_r>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d123      	bne.n	800da2a <_malloc_r+0x92>
 800d9e2:	230c      	movs	r3, #12
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f000 f86c 	bl	800dac4 <__malloc_unlock>
 800d9ec:	e7e3      	b.n	800d9b6 <_malloc_r+0x1e>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	1b5b      	subs	r3, r3, r5
 800d9f2:	d417      	bmi.n	800da24 <_malloc_r+0x8c>
 800d9f4:	2b0b      	cmp	r3, #11
 800d9f6:	d903      	bls.n	800da00 <_malloc_r+0x68>
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	441c      	add	r4, r3
 800d9fc:	6025      	str	r5, [r4, #0]
 800d9fe:	e004      	b.n	800da0a <_malloc_r+0x72>
 800da00:	6863      	ldr	r3, [r4, #4]
 800da02:	42a2      	cmp	r2, r4
 800da04:	bf0c      	ite	eq
 800da06:	600b      	streq	r3, [r1, #0]
 800da08:	6053      	strne	r3, [r2, #4]
 800da0a:	4630      	mov	r0, r6
 800da0c:	f000 f85a 	bl	800dac4 <__malloc_unlock>
 800da10:	f104 000b 	add.w	r0, r4, #11
 800da14:	1d23      	adds	r3, r4, #4
 800da16:	f020 0007 	bic.w	r0, r0, #7
 800da1a:	1ac2      	subs	r2, r0, r3
 800da1c:	d0cc      	beq.n	800d9b8 <_malloc_r+0x20>
 800da1e:	1a1b      	subs	r3, r3, r0
 800da20:	50a3      	str	r3, [r4, r2]
 800da22:	e7c9      	b.n	800d9b8 <_malloc_r+0x20>
 800da24:	4622      	mov	r2, r4
 800da26:	6864      	ldr	r4, [r4, #4]
 800da28:	e7cc      	b.n	800d9c4 <_malloc_r+0x2c>
 800da2a:	1cc4      	adds	r4, r0, #3
 800da2c:	f024 0403 	bic.w	r4, r4, #3
 800da30:	42a0      	cmp	r0, r4
 800da32:	d0e3      	beq.n	800d9fc <_malloc_r+0x64>
 800da34:	1a21      	subs	r1, r4, r0
 800da36:	4630      	mov	r0, r6
 800da38:	f000 f82e 	bl	800da98 <_sbrk_r>
 800da3c:	3001      	adds	r0, #1
 800da3e:	d1dd      	bne.n	800d9fc <_malloc_r+0x64>
 800da40:	e7cf      	b.n	800d9e2 <_malloc_r+0x4a>
 800da42:	bf00      	nop
 800da44:	24001334 	.word	0x24001334
 800da48:	24001338 	.word	0x24001338

0800da4c <_realloc_r>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	4607      	mov	r7, r0
 800da50:	4614      	mov	r4, r2
 800da52:	460e      	mov	r6, r1
 800da54:	b921      	cbnz	r1, 800da60 <_realloc_r+0x14>
 800da56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da5a:	4611      	mov	r1, r2
 800da5c:	f7ff bf9c 	b.w	800d998 <_malloc_r>
 800da60:	b922      	cbnz	r2, 800da6c <_realloc_r+0x20>
 800da62:	f7ff ff49 	bl	800d8f8 <_free_r>
 800da66:	4625      	mov	r5, r4
 800da68:	4628      	mov	r0, r5
 800da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da6c:	f000 f830 	bl	800dad0 <_malloc_usable_size_r>
 800da70:	42a0      	cmp	r0, r4
 800da72:	d20f      	bcs.n	800da94 <_realloc_r+0x48>
 800da74:	4621      	mov	r1, r4
 800da76:	4638      	mov	r0, r7
 800da78:	f7ff ff8e 	bl	800d998 <_malloc_r>
 800da7c:	4605      	mov	r5, r0
 800da7e:	2800      	cmp	r0, #0
 800da80:	d0f2      	beq.n	800da68 <_realloc_r+0x1c>
 800da82:	4631      	mov	r1, r6
 800da84:	4622      	mov	r2, r4
 800da86:	f7ff fbc3 	bl	800d210 <memcpy>
 800da8a:	4631      	mov	r1, r6
 800da8c:	4638      	mov	r0, r7
 800da8e:	f7ff ff33 	bl	800d8f8 <_free_r>
 800da92:	e7e9      	b.n	800da68 <_realloc_r+0x1c>
 800da94:	4635      	mov	r5, r6
 800da96:	e7e7      	b.n	800da68 <_realloc_r+0x1c>

0800da98 <_sbrk_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4d06      	ldr	r5, [pc, #24]	; (800dab4 <_sbrk_r+0x1c>)
 800da9c:	2300      	movs	r3, #0
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	602b      	str	r3, [r5, #0]
 800daa4:	f7f3 fd20 	bl	80014e8 <_sbrk>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d102      	bne.n	800dab2 <_sbrk_r+0x1a>
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	b103      	cbz	r3, 800dab2 <_sbrk_r+0x1a>
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	240052c0 	.word	0x240052c0

0800dab8 <__malloc_lock>:
 800dab8:	4801      	ldr	r0, [pc, #4]	; (800dac0 <__malloc_lock+0x8>)
 800daba:	f000 b811 	b.w	800dae0 <__retarget_lock_acquire_recursive>
 800dabe:	bf00      	nop
 800dac0:	240052c8 	.word	0x240052c8

0800dac4 <__malloc_unlock>:
 800dac4:	4801      	ldr	r0, [pc, #4]	; (800dacc <__malloc_unlock+0x8>)
 800dac6:	f000 b80c 	b.w	800dae2 <__retarget_lock_release_recursive>
 800daca:	bf00      	nop
 800dacc:	240052c8 	.word	0x240052c8

0800dad0 <_malloc_usable_size_r>:
 800dad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad4:	1f18      	subs	r0, r3, #4
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfbc      	itt	lt
 800dada:	580b      	ldrlt	r3, [r1, r0]
 800dadc:	18c0      	addlt	r0, r0, r3
 800dade:	4770      	bx	lr

0800dae0 <__retarget_lock_acquire_recursive>:
 800dae0:	4770      	bx	lr

0800dae2 <__retarget_lock_release_recursive>:
 800dae2:	4770      	bx	lr

0800dae4 <_init>:
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae6:	bf00      	nop
 800dae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daea:	bc08      	pop	{r3}
 800daec:	469e      	mov	lr, r3
 800daee:	4770      	bx	lr

0800daf0 <_fini>:
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	bf00      	nop
 800daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf6:	bc08      	pop	{r3}
 800daf8:	469e      	mov	lr, r3
 800dafa:	4770      	bx	lr
