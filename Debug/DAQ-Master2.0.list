
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001034c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e4  080105f0  080105f0  000205f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080117d4  080117d4  000217d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080117dc  080117dc  000217dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080117e0  080117e0  000217e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  080117e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000061ec  240001e0  080119c4  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240063cc  080119c4  000363cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030cd7  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000512a  00000000  00000000  00060ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016f8  00000000  00000000  00066010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001540  00000000  00000000  00067708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba70  00000000  00000000  00068c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f24d  00000000  00000000  000a46b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168730  00000000  00000000  000c3905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022c035  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f80  00000000  00000000  0022c088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080105d4 	.word	0x080105d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	080105d4 	.word	0x080105d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 ffdc 	bl	8002654 <HAL_FDCAN_RegisterRxFifo0Callback>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80006a2:	f001 f847 	bl	8001734 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f002 f804 	bl	80026b4 <HAL_FDCAN_Start>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80006b2:	f001 f83f 	bl	8001734 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f002 f994 	bl	80029e8 <HAL_FDCAN_ActivateNotification>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 80006c6:	f001 f835 	bl	8001734 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006dc:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <init_CAN+0x10>)
 800070a:	f000 fdbb 	bl	8001284 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	240041c4 	.word	0x240041c4

08000718 <SD_Create_File>:

uint8_t buffer_log[10][400];


FRESULT SD_Create_File(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	FRESULT fresult;
	uint8_t contFile = 0;	/*enumerate the file*/
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]

	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 8000722:	2200      	movs	r2, #0
 8000724:	491c      	ldr	r1, [pc, #112]	; (8000798 <SD_Create_File+0x80>)
 8000726:	481d      	ldr	r0, [pc, #116]	; (800079c <SD_Create_File+0x84>)
 8000728:	f00c f91c 	bl	800c964 <f_mount>
 800072c:	4603      	mov	r3, r0
 800072e:	71bb      	strb	r3, [r7, #6]
	do
	{
		sprintf(bufferFile, "ARQ%02d.txt", contFile);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	461a      	mov	r2, r3
 8000734:	491a      	ldr	r1, [pc, #104]	; (80007a0 <SD_Create_File+0x88>)
 8000736:	481b      	ldr	r0, [pc, #108]	; (80007a4 <SD_Create_File+0x8c>)
 8000738:	f00d fd98 	bl	800e26c <siprintf>
		fresult = f_stat(bufferFile, &file);
 800073c:	491a      	ldr	r1, [pc, #104]	; (80007a8 <SD_Create_File+0x90>)
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <SD_Create_File+0x8c>)
 8000740:	f00c ff82 	bl	800d648 <f_stat>
 8000744:	4603      	mov	r3, r0
 8000746:	71bb      	strb	r3, [r7, #6]
		contFile++;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3301      	adds	r3, #1
 800074c:	71fb      	strb	r3, [r7, #7]
	} while(fresult != FR_NO_FILE);
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	2b04      	cmp	r3, #4
 8000752:	d1ed      	bne.n	8000730 <SD_Create_File+0x18>
	contFile = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	71fb      	strb	r3, [r7, #7]
	fresult = f_open(&file, bufferFile, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 8000758:	2208      	movs	r2, #8
 800075a:	4912      	ldr	r1, [pc, #72]	; (80007a4 <SD_Create_File+0x8c>)
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <SD_Create_File+0x90>)
 800075e:	f00c f947 	bl	800c9f0 <f_open>
 8000762:	4603      	mov	r3, r0
 8000764:	71bb      	strb	r3, [r7, #6]
	fresult = f_close(&file);
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <SD_Create_File+0x90>)
 8000768:	f00c fd20 	bl	800d1ac <f_close>
 800076c:	4603      	mov	r3, r0
 800076e:	71bb      	strb	r3, [r7, #6]
	if(fresult == FR_OK){
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d107      	bne.n	8000786 <SD_Create_File+0x6e>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5); //Blinks the led to indicate that there was no erros
 8000776:	2120      	movs	r1, #32
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <SD_Create_File+0x94>)
 800077a:	f003 f84c 	bl	8003816 <HAL_GPIO_TogglePin>
		_datalog_flag  = 1;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <SD_Create_File+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e002      	b.n	800078c <SD_Create_File+0x74>
	}
	else _datalog_flag = 0;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <SD_Create_File+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]

	return fresult;
 800078c:	79bb      	ldrb	r3, [r7, #6]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	080105f0 	.word	0x080105f0
 800079c:	240001fc 	.word	0x240001fc
 80007a0:	080105f4 	.word	0x080105f4
 80007a4:	240024d8 	.word	0x240024d8
 80007a8:	240014a8 	.word	0x240014a8
 80007ac:	58020c00 	.word	0x58020c00
 80007b0:	24001234 	.word	0x24001234

080007b4 <Cabecalho>:

void Cabecalho(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 80007ba:	af00      	add	r7, sp, #0
	UINT bytes_written;
	FRESULT fresult;

	char cabecalho[1301];
	strcpy(cabecalho, "Timer\tVol\tAccel\tFreio\tModo\tFrenagemReg\tHodometroP\tHodometroT\tTorqueRM\tTorqueLM\tTorqueRefR\tTorqueRefL\tVelRM\tVelLM\tEcuEventId\tEcuEventId\tVelFrontLTie\tVelFrontRTie\tVelBackRTie\tVelBackLTie\tTorqueGain\tTCurrentRM\tTCurrentLM\tTempInversorR1\tTempInversorR2\tTempInversorL1\tTempInversor2L\tAccelX\tAccelY\tAccelZ\tErro\tGyroX\tGyroY\tGyroZ\tErro\tISensor2\tISensor1High\tISensor1Low\tISensor3\tGlvVoltage\tCarga(%)\tAir\tTensaoTot\tTMaxBancoBat\tTensaoMin\tTensaoMax\tVCel400\tVCel401\tVCel402\tVCel403\tVCel404\tVCel405\tVCel406\tVCel407\tVCel408\tVCel409\tVCel410\tVCel411\tVCel412\tTemp400\tTemp401\tTemp302\tTemp403\tTemp404\tVCel500\tVCel501\tVCel502\tVCel53\tVCel504\tVCel505\tVCel506\tVCel507\tVCel508\tVCel509\tVCel510\tVCel511\tVCel512\tTemp500\tTemp501\tTemp502\tTemp503\tTemp504\tVCel300\tVCel301\tVCel302\tVCel303\tVCel304\tVCel305\tVCel306\tVCel307\tVCel308\tVCel309\tVCel310\tVCel311\tVCel312\tTemp300\tTemp301\tTemp302\tTemp303\tTemp304\tVCel200\tVCel201\tVCel202\tVCel203\tVCel204\tVCel205\tVCel206\tVCel207\tVCel208\tVCel209\tVCel210\tVCel211\tVCel212\tTemp200\tTemp201\tTemp202\tTemp203\tTemp204\tVCel100\tVCel101\tVCel102\tVCel103\tVCel104\tVCel105\tVCel106\tVCel107\tVCel108\tVCel109\tVCel110\tVCel111\tVCel112\tTemp100\tTemp101\tTemp102\tTemp103\tTemp104\tVCel000\tVCel001\tVCel002\tVCel003\tVCel004\tVCel005\tVCel006\tVCel007\tVCel008\tVCel009\tVCel010\tVCel011\tVCel012\tTemp000\tTemp001\tTemp002\tTemp003\tTemp004\n");
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <Cabecalho+0x64>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	4611      	mov	r1, r2
 80007c4:	f240 5315 	movw	r3, #1301	; 0x515
 80007c8:	461a      	mov	r2, r3
 80007ca:	f00d f8c3 	bl	800d954 <memcpy>
	int tamanho = strlen(cabecalho);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fd85 	bl	80002e0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write*/
 80007dc:	2212      	movs	r2, #18
 80007de:	490f      	ldr	r1, [pc, #60]	; (800081c <Cabecalho+0x68>)
 80007e0:	480f      	ldr	r0, [pc, #60]	; (8000820 <Cabecalho+0x6c>)
 80007e2:	f00c f905 	bl	800c9f0 <f_open>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f887 3523 	strb.w	r3, [r7, #1315]	; 0x523
	fresult = f_write(&file, cabecalho, tamanho, &bytes_written); //write data to the file
 80007ec:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80007f0:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80007f4:	1d39      	adds	r1, r7, #4
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <Cabecalho+0x6c>)
 80007f8:	f00c fac6 	bl	800cd88 <f_write>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 3523 	strb.w	r3, [r7, #1315]	; 0x523
	fresult = f_close(&file);
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <Cabecalho+0x6c>)
 8000804:	f00c fcd2 	bl	800d1ac <f_close>
 8000808:	4603      	mov	r3, r0
 800080a:	f887 3523 	strb.w	r3, [r7, #1315]	; 0x523
}
 800080e:	bf00      	nop
 8000810:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08010600 	.word	0x08010600
 800081c:	240024d8 	.word	0x240024d8
 8000820:	240014a8 	.word	0x240014a8

08000824 <writeSD>:

void writeSD(void)
{
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	f2ad 6dc4 	subw	sp, sp, #1732	; 0x6c4
 800082a:	af9a      	add	r7, sp, #616	; 0x268
	UINT bytes_written;
	FRESULT fresult;
	//implementar dos dois jeitos, pra ficar fácil de testar e trocar nos testes caso algum falhe
	uint8_t block[512];
	int len;
	uint32_t time = HAL_GetTick();
 800082c:	f001 fb70 	bl	8001f10 <HAL_GetTick>
 8000830:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
			"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//17//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
			"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//18//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
			"%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t"	//19//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11
			"%u\t%u\t%u\t%u\n",					//20//Temp_Max_Banco\I_Sensor_1_H\I_Sensor_2_L\I_Sensor_2\I_Sensor_3\Temp_Pack_01\Temp_Pack_02\Temp_Pack_11

	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000834:	4bd2      	ldr	r3, [pc, #840]	; (8000b80 <writeSD+0x35c>)
 8000836:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
	len = snprintf((char*) block, sizeof(block),
 800083a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 800083e:	4bd0      	ldr	r3, [pc, #832]	; (8000b80 <writeSD+0x35c>)
 8000840:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
	len = snprintf((char*) block, sizeof(block),
 8000844:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000848:	4bcd      	ldr	r3, [pc, #820]	; (8000b80 <writeSD+0x35c>)
 800084a:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
	len = snprintf((char*) block, sizeof(block),
 800084e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000852:	4bcb      	ldr	r3, [pc, #812]	; (8000b80 <writeSD+0x35c>)
 8000854:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8000858:	b25b      	sxtb	r3, r3
	len = snprintf((char*) block, sizeof(block),
 800085a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 800085e:	4bc8      	ldr	r3, [pc, #800]	; (8000b80 <writeSD+0x35c>)
 8000860:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
	len = snprintf((char*) block, sizeof(block),
 8000864:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000868:	4bc5      	ldr	r3, [pc, #788]	; (8000b80 <writeSD+0x35c>)
 800086a:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	len = snprintf((char*) block, sizeof(block),
 800086e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	/*1	*/	time,can_vector[101].word_1, can_vector[101].word_2, can_vector[101].word_3, (int8_t)can_vector[102].word_0, can_vector[102].word_1,can_vector[102].word_2,can_vector[102].word_3,
 8000872:	4bc3      	ldr	r3, [pc, #780]	; (8000b80 <writeSD+0x35c>)
 8000874:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
	len = snprintf((char*) block, sizeof(block),
 8000878:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 800087c:	4bc0      	ldr	r3, [pc, #768]	; (8000b80 <writeSD+0x35c>)
 800087e:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
	len = snprintf((char*) block, sizeof(block),
 8000882:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 8000886:	4bbe      	ldr	r3, [pc, #760]	; (8000b80 <writeSD+0x35c>)
 8000888:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
	len = snprintf((char*) block, sizeof(block),
 800088c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 8000890:	4bbb      	ldr	r3, [pc, #748]	; (8000b80 <writeSD+0x35c>)
 8000892:	f8b3 333c 	ldrh.w	r3, [r3, #828]	; 0x33c
	len = snprintf((char*) block, sizeof(block),
 8000896:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 800089a:	4bb9      	ldr	r3, [pc, #740]	; (8000b80 <writeSD+0x35c>)
 800089c:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	len = snprintf((char*) block, sizeof(block),
 80008a0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008a4:	4bb6      	ldr	r3, [pc, #728]	; (8000b80 <writeSD+0x35c>)
 80008a6:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	len = snprintf((char*) block, sizeof(block),
 80008aa:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008ae:	4bb4      	ldr	r3, [pc, #720]	; (8000b80 <writeSD+0x35c>)
 80008b0:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
	len = snprintf((char*) block, sizeof(block),
 80008b4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008b8:	4bb1      	ldr	r3, [pc, #708]	; (8000b80 <writeSD+0x35c>)
 80008ba:	f8b3 3344 	ldrh.w	r3, [r3, #836]	; 0x344
	len = snprintf((char*) block, sizeof(block),
 80008be:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	/*2	*/	can_vector[103].word_0,can_vector[103].word_1,can_vector[103].word_2,can_vector[103].word_3,can_vector[104].word_0,can_vector[104].word_1,can_vector[104].word_2,can_vector[104].word_3,
 80008c2:	4baf      	ldr	r3, [pc, #700]	; (8000b80 <writeSD+0x35c>)
 80008c4:	f8b3 3346 	ldrh.w	r3, [r3, #838]	; 0x346
	len = snprintf((char*) block, sizeof(block),
 80008c8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008cc:	4bac      	ldr	r3, [pc, #688]	; (8000b80 <writeSD+0x35c>)
 80008ce:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
	len = snprintf((char*) block, sizeof(block),
 80008d2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008d6:	4baa      	ldr	r3, [pc, #680]	; (8000b80 <writeSD+0x35c>)
 80008d8:	f8b3 334a 	ldrh.w	r3, [r3, #842]	; 0x34a
	len = snprintf((char*) block, sizeof(block),
 80008dc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008e0:	4ba7      	ldr	r3, [pc, #668]	; (8000b80 <writeSD+0x35c>)
 80008e2:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
	len = snprintf((char*) block, sizeof(block),
 80008e6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008ea:	4ba5      	ldr	r3, [pc, #660]	; (8000b80 <writeSD+0x35c>)
 80008ec:	f8b3 334e 	ldrh.w	r3, [r3, #846]	; 0x34e
	len = snprintf((char*) block, sizeof(block),
 80008f0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008f4:	4ba2      	ldr	r3, [pc, #648]	; (8000b80 <writeSD+0x35c>)
 80008f6:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
	len = snprintf((char*) block, sizeof(block),
 80008fa:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 80008fe:	4ba0      	ldr	r3, [pc, #640]	; (8000b80 <writeSD+0x35c>)
 8000900:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
	len = snprintf((char*) block, sizeof(block),
 8000904:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 8000908:	4b9d      	ldr	r3, [pc, #628]	; (8000b80 <writeSD+0x35c>)
 800090a:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
	len = snprintf((char*) block, sizeof(block),
 800090e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	/*3	*/	can_vector[105].word_0,can_vector[105].word_1,can_vector[105].word_2,can_vector[105].word_3,can_vector[106].word_0,can_vector[106].word_2,can_vector[106].word_3,can_vector[107].word_0,
 8000912:	4b9b      	ldr	r3, [pc, #620]	; (8000b80 <writeSD+0x35c>)
 8000914:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
	len = snprintf((char*) block, sizeof(block),
 8000918:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 800091c:	4b98      	ldr	r3, [pc, #608]	; (8000b80 <writeSD+0x35c>)
 800091e:	f8b3 335a 	ldrh.w	r3, [r3, #858]	; 0x35a
	len = snprintf((char*) block, sizeof(block),
 8000922:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 8000926:	4b96      	ldr	r3, [pc, #600]	; (8000b80 <writeSD+0x35c>)
 8000928:	f8b3 335c 	ldrh.w	r3, [r3, #860]	; 0x35c
	len = snprintf((char*) block, sizeof(block),
 800092c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 8000930:	4b93      	ldr	r3, [pc, #588]	; (8000b80 <writeSD+0x35c>)
 8000932:	f8b3 335e 	ldrh.w	r3, [r3, #862]	; 0x35e
	len = snprintf((char*) block, sizeof(block),
 8000936:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 800093a:	4b91      	ldr	r3, [pc, #580]	; (8000b80 <writeSD+0x35c>)
 800093c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
	len = snprintf((char*) block, sizeof(block),
 8000940:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 8000944:	4b8e      	ldr	r3, [pc, #568]	; (8000b80 <writeSD+0x35c>)
 8000946:	f8b3 3362 	ldrh.w	r3, [r3, #866]	; 0x362
	len = snprintf((char*) block, sizeof(block),
 800094a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 800094e:	4b8c      	ldr	r3, [pc, #560]	; (8000b80 <writeSD+0x35c>)
 8000950:	f8b3 3364 	ldrh.w	r3, [r3, #868]	; 0x364
	len = snprintf((char*) block, sizeof(block),
 8000954:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	/*4	*/	can_vector[107].word_1,can_vector[107].word_2,can_vector[107].word_3,can_vector[108].word_0,can_vector[108].word_1,can_vector[108].word_2,can_vector[108].word_3,/*can_vector[109].word_0*/
 8000958:	4b89      	ldr	r3, [pc, #548]	; (8000b80 <writeSD+0x35c>)
 800095a:	f8b3 3366 	ldrh.w	r3, [r3, #870]	; 0x366
	len = snprintf((char*) block, sizeof(block),
 800095e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000962:	4b87      	ldr	r3, [pc, #540]	; (8000b80 <writeSD+0x35c>)
 8000964:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
	len = snprintf((char*) block, sizeof(block),
 8000968:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 800096c:	4b84      	ldr	r3, [pc, #528]	; (8000b80 <writeSD+0x35c>)
 800096e:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
	len = snprintf((char*) block, sizeof(block),
 8000972:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000976:	4b82      	ldr	r3, [pc, #520]	; (8000b80 <writeSD+0x35c>)
 8000978:	f8b3 336c 	ldrh.w	r3, [r3, #876]	; 0x36c
	len = snprintf((char*) block, sizeof(block),
 800097c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000980:	4b7f      	ldr	r3, [pc, #508]	; (8000b80 <writeSD+0x35c>)
 8000982:	f8b3 336e 	ldrh.w	r3, [r3, #878]	; 0x36e
	len = snprintf((char*) block, sizeof(block),
 8000986:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 800098a:	4b7d      	ldr	r3, [pc, #500]	; (8000b80 <writeSD+0x35c>)
 800098c:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
	len = snprintf((char*) block, sizeof(block),
 8000990:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 8000994:	4b7a      	ldr	r3, [pc, #488]	; (8000b80 <writeSD+0x35c>)
 8000996:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
	len = snprintf((char*) block, sizeof(block),
 800099a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 800099e:	4b78      	ldr	r3, [pc, #480]	; (8000b80 <writeSD+0x35c>)
 80009a0:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
	len = snprintf((char*) block, sizeof(block),
 80009a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	/*5	*/	can_vector[109].word_0,can_vector[109].word_1,can_vector[109].word_2,can_vector[109].word_3,can_vector[50].word_0,can_vector[50].word_1,can_vector[50].word_2,can_vector[50].word_3,
 80009a8:	4b75      	ldr	r3, [pc, #468]	; (8000b80 <writeSD+0x35c>)
 80009aa:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
	len = snprintf((char*) block, sizeof(block),
 80009ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009b2:	4b73      	ldr	r3, [pc, #460]	; (8000b80 <writeSD+0x35c>)
 80009b4:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
	len = snprintf((char*) block, sizeof(block),
 80009b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009bc:	4b70      	ldr	r3, [pc, #448]	; (8000b80 <writeSD+0x35c>)
 80009be:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
	len = snprintf((char*) block, sizeof(block),
 80009c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009c6:	4b6e      	ldr	r3, [pc, #440]	; (8000b80 <writeSD+0x35c>)
 80009c8:	f8b3 319e 	ldrh.w	r3, [r3, #414]	; 0x19e
	len = snprintf((char*) block, sizeof(block),
 80009cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009d0:	4b6b      	ldr	r3, [pc, #428]	; (8000b80 <writeSD+0x35c>)
 80009d2:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
	len = snprintf((char*) block, sizeof(block),
 80009d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009da:	4b69      	ldr	r3, [pc, #420]	; (8000b80 <writeSD+0x35c>)
 80009dc:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
	len = snprintf((char*) block, sizeof(block),
 80009e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009e4:	4b66      	ldr	r3, [pc, #408]	; (8000b80 <writeSD+0x35c>)
 80009e6:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
	len = snprintf((char*) block, sizeof(block),
 80009ea:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009ee:	4b64      	ldr	r3, [pc, #400]	; (8000b80 <writeSD+0x35c>)
 80009f0:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
	len = snprintf((char*) block, sizeof(block),
 80009f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	/*6	*/	can_vector[51].word_0,can_vector[51].word_1,can_vector[51].word_3,can_vector[52].word_1,can_vector[52].word_3,can_vector[53].word_0,can_vector[53].word_1,can_vector[256].word_0,
 80009f8:	4b61      	ldr	r3, [pc, #388]	; (8000b80 <writeSD+0x35c>)
 80009fa:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
	len = snprintf((char*) block, sizeof(block),
 80009fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a02:	4b5f      	ldr	r3, [pc, #380]	; (8000b80 <writeSD+0x35c>)
 8000a04:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
	len = snprintf((char*) block, sizeof(block),
 8000a08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a0c:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <writeSD+0x35c>)
 8000a0e:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
	len = snprintf((char*) block, sizeof(block),
 8000a12:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a16:	4b5a      	ldr	r3, [pc, #360]	; (8000b80 <writeSD+0x35c>)
 8000a18:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
	len = snprintf((char*) block, sizeof(block),
 8000a1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a20:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <writeSD+0x35c>)
 8000a22:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
	len = snprintf((char*) block, sizeof(block),
 8000a26:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a2a:	4b55      	ldr	r3, [pc, #340]	; (8000b80 <writeSD+0x35c>)
 8000a2c:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
	len = snprintf((char*) block, sizeof(block),
 8000a30:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a34:	4b52      	ldr	r3, [pc, #328]	; (8000b80 <writeSD+0x35c>)
 8000a36:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
	len = snprintf((char*) block, sizeof(block),
 8000a3a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	/*7	*/	/*can_vector[256].word_1*/can_vector[256].word_1,can_vector[256].word_2,can_vector[256].word_3,can_vector[257].word_0,can_vector[257].word_1,can_vector[257].word_2,can_vector[257].word_3,
 8000a3e:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <writeSD+0x35c>)
 8000a40:	f8b3 380e 	ldrh.w	r3, [r3, #2062]	; 0x80e
	len = snprintf((char*) block, sizeof(block),
 8000a44:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a48:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <writeSD+0x35c>)
 8000a4a:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
	len = snprintf((char*) block, sizeof(block),
 8000a4e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a52:	4b4b      	ldr	r3, [pc, #300]	; (8000b80 <writeSD+0x35c>)
 8000a54:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
	len = snprintf((char*) block, sizeof(block),
 8000a58:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a5c:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <writeSD+0x35c>)
 8000a5e:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
	len = snprintf((char*) block, sizeof(block),
 8000a62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a66:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <writeSD+0x35c>)
 8000a68:	f8b3 3816 	ldrh.w	r3, [r3, #2070]	; 0x816
	len = snprintf((char*) block, sizeof(block),
 8000a6c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <writeSD+0x35c>)
 8000a72:	f8b3 3818 	ldrh.w	r3, [r3, #2072]	; 0x818
	len = snprintf((char*) block, sizeof(block),
 8000a76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <writeSD+0x35c>)
 8000a7c:	f8b3 381a 	ldrh.w	r3, [r3, #2074]	; 0x81a
	len = snprintf((char*) block, sizeof(block),
 8000a80:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a84:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <writeSD+0x35c>)
 8000a86:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	; 0x81c
	len = snprintf((char*) block, sizeof(block),
 8000a8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	/*8	*/	can_vector[258].word_0,can_vector[258].word_1,can_vector[258].word_2,can_vector[258].word_3,can_vector[259].word_0,can_vector[259].word_1,can_vector[259].word_2,can_vector[259].word_3,
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <writeSD+0x35c>)
 8000a90:	f8b3 381e 	ldrh.w	r3, [r3, #2078]	; 0x81e
	len = snprintf((char*) block, sizeof(block),
 8000a94:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000a98:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <writeSD+0x35c>)
 8000a9a:	f8b3 3820 	ldrh.w	r3, [r3, #2080]	; 0x820
	len = snprintf((char*) block, sizeof(block),
 8000a9e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <writeSD+0x35c>)
 8000aa4:	f8b3 3822 	ldrh.w	r3, [r3, #2082]	; 0x822
	len = snprintf((char*) block, sizeof(block),
 8000aa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000aac:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <writeSD+0x35c>)
 8000aae:	f8b3 3828 	ldrh.w	r3, [r3, #2088]	; 0x828
	len = snprintf((char*) block, sizeof(block),
 8000ab2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <writeSD+0x35c>)
 8000ab8:	f8b3 382a 	ldrh.w	r3, [r3, #2090]	; 0x82a
	len = snprintf((char*) block, sizeof(block),
 8000abc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <writeSD+0x35c>)
 8000ac2:	f8b3 382c 	ldrh.w	r3, [r3, #2092]	; 0x82c
	len = snprintf((char*) block, sizeof(block),
 8000ac6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <writeSD+0x35c>)
 8000acc:	f8b3 382e 	ldrh.w	r3, [r3, #2094]	; 0x82e
	len = snprintf((char*) block, sizeof(block),
 8000ad0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <writeSD+0x35c>)
 8000ad6:	f8b3 3830 	ldrh.w	r3, [r3, #2096]	; 0x830
	len = snprintf((char*) block, sizeof(block),
 8000ada:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	/*9	*/	can_vector[260].word_0,can_vector[260].word_1,can_vector[261].word_0,can_vector[261].word_1,can_vector[261].word_2,can_vector[261].word_3,can_vector[262].word_0,can_vector[262].word_1,
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <writeSD+0x35c>)
 8000ae0:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
	len = snprintf((char*) block, sizeof(block),
 8000ae4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <writeSD+0x35c>)
 8000aea:	f8b3 3834 	ldrh.w	r3, [r3, #2100]	; 0x834
	len = snprintf((char*) block, sizeof(block),
 8000aee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <writeSD+0x35c>)
 8000af4:	f8b3 3836 	ldrh.w	r3, [r3, #2102]	; 0x836
	len = snprintf((char*) block, sizeof(block),
 8000af8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <writeSD+0x35c>)
 8000afe:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
	len = snprintf((char*) block, sizeof(block),
 8000b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <writeSD+0x35c>)
 8000b08:	f8b3 383a 	ldrh.w	r3, [r3, #2106]	; 0x83a
	len = snprintf((char*) block, sizeof(block),
 8000b0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <writeSD+0x35c>)
 8000b12:	f8b3 383c 	ldrh.w	r3, [r3, #2108]	; 0x83c
	len = snprintf((char*) block, sizeof(block),
 8000b16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <writeSD+0x35c>)
 8000b1c:	f8b3 383e 	ldrh.w	r3, [r3, #2110]	; 0x83e
	len = snprintf((char*) block, sizeof(block),
 8000b20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <writeSD+0x35c>)
 8000b26:	f8b3 3840 	ldrh.w	r3, [r3, #2112]	; 0x840
	len = snprintf((char*) block, sizeof(block),
 8000b2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	/*10*/	can_vector[262].word_2,can_vector[262].word_3,can_vector[263].word_0,can_vector[263].word_1,can_vector[263].word_2,can_vector[263].word_3,can_vector[264].word_0,can_vector[264].word_1,
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <writeSD+0x35c>)
 8000b30:	f8b3 3842 	ldrh.w	r3, [r3, #2114]	; 0x842
	len = snprintf((char*) block, sizeof(block),
 8000b34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <writeSD+0x35c>)
 8000b3a:	f8b3 3844 	ldrh.w	r3, [r3, #2116]	; 0x844
	len = snprintf((char*) block, sizeof(block),
 8000b3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <writeSD+0x35c>)
 8000b44:	f8b3 3846 	ldrh.w	r3, [r3, #2118]	; 0x846
	len = snprintf((char*) block, sizeof(block),
 8000b48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <writeSD+0x35c>)
 8000b4e:	f8b3 3848 	ldrh.w	r3, [r3, #2120]	; 0x848
	len = snprintf((char*) block, sizeof(block),
 8000b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <writeSD+0x35c>)
 8000b58:	f8b3 384a 	ldrh.w	r3, [r3, #2122]	; 0x84a
	len = snprintf((char*) block, sizeof(block),
 8000b5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <writeSD+0x35c>)
 8000b62:	f8b3 3850 	ldrh.w	r3, [r3, #2128]	; 0x850
	len = snprintf((char*) block, sizeof(block),
 8000b66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <writeSD+0x35c>)
 8000b6c:	f8b3 3852 	ldrh.w	r3, [r3, #2130]	; 0x852
	len = snprintf((char*) block, sizeof(block),
 8000b70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <writeSD+0x35c>)
 8000b76:	f8b3 3854 	ldrh.w	r3, [r3, #2132]	; 0x854
	len = snprintf((char*) block, sizeof(block),
 8000b7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000b7e:	e001      	b.n	8000b84 <writeSD+0x360>
 8000b80:	2400348c 	.word	0x2400348c
	/*11*/	can_vector[264].word_2,can_vector[264].word_3,can_vector[265].word_0,can_vector[265].word_1,can_vector[266].word_0,can_vector[266].word_1,can_vector[266].word_2,can_vector[266].word_3,
 8000b84:	4bb2      	ldr	r3, [pc, #712]	; (8000e50 <writeSD+0x62c>)
 8000b86:	f8b3 3856 	ldrh.w	r3, [r3, #2134]	; 0x856
	len = snprintf((char*) block, sizeof(block),
 8000b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000b8e:	4bb0      	ldr	r3, [pc, #704]	; (8000e50 <writeSD+0x62c>)
 8000b90:	f8b3 3858 	ldrh.w	r3, [r3, #2136]	; 0x858
	len = snprintf((char*) block, sizeof(block),
 8000b94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000b98:	4bad      	ldr	r3, [pc, #692]	; (8000e50 <writeSD+0x62c>)
 8000b9a:	f8b3 385a 	ldrh.w	r3, [r3, #2138]	; 0x85a
	len = snprintf((char*) block, sizeof(block),
 8000b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000ba2:	4bab      	ldr	r3, [pc, #684]	; (8000e50 <writeSD+0x62c>)
 8000ba4:	f8b3 385c 	ldrh.w	r3, [r3, #2140]	; 0x85c
	len = snprintf((char*) block, sizeof(block),
 8000ba8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000bac:	4ba8      	ldr	r3, [pc, #672]	; (8000e50 <writeSD+0x62c>)
 8000bae:	f8b3 385e 	ldrh.w	r3, [r3, #2142]	; 0x85e
	len = snprintf((char*) block, sizeof(block),
 8000bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000bb6:	4ba6      	ldr	r3, [pc, #664]	; (8000e50 <writeSD+0x62c>)
 8000bb8:	f8b3 3860 	ldrh.w	r3, [r3, #2144]	; 0x860
	len = snprintf((char*) block, sizeof(block),
 8000bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000bc0:	4ba3      	ldr	r3, [pc, #652]	; (8000e50 <writeSD+0x62c>)
 8000bc2:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
	len = snprintf((char*) block, sizeof(block),
 8000bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000bca:	4ba1      	ldr	r3, [pc, #644]	; (8000e50 <writeSD+0x62c>)
 8000bcc:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
	len = snprintf((char*) block, sizeof(block),
 8000bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	/*12*/	can_vector[267].word_0,can_vector[267].word_1,can_vector[267].word_2,can_vector[267].word_3,can_vector[268].word_0,can_vector[268].word_1,can_vector[268].word_2,can_vector[268].word_3,
 8000bd4:	4b9e      	ldr	r3, [pc, #632]	; (8000e50 <writeSD+0x62c>)
 8000bd6:	f8b3 3866 	ldrh.w	r3, [r3, #2150]	; 0x866
	len = snprintf((char*) block, sizeof(block),
 8000bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000bde:	4b9c      	ldr	r3, [pc, #624]	; (8000e50 <writeSD+0x62c>)
 8000be0:	f8b3 3868 	ldrh.w	r3, [r3, #2152]	; 0x868
	len = snprintf((char*) block, sizeof(block),
 8000be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000be8:	4b99      	ldr	r3, [pc, #612]	; (8000e50 <writeSD+0x62c>)
 8000bea:	f8b3 386a 	ldrh.w	r3, [r3, #2154]	; 0x86a
	len = snprintf((char*) block, sizeof(block),
 8000bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000bf2:	4b97      	ldr	r3, [pc, #604]	; (8000e50 <writeSD+0x62c>)
 8000bf4:	f8b3 386c 	ldrh.w	r3, [r3, #2156]	; 0x86c
	len = snprintf((char*) block, sizeof(block),
 8000bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000bfc:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <writeSD+0x62c>)
 8000bfe:	f8b3 386e 	ldrh.w	r3, [r3, #2158]	; 0x86e
	len = snprintf((char*) block, sizeof(block),
 8000c02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000c06:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <writeSD+0x62c>)
 8000c08:	f8b3 3870 	ldrh.w	r3, [r3, #2160]	; 0x870
	len = snprintf((char*) block, sizeof(block),
 8000c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000c10:	4b8f      	ldr	r3, [pc, #572]	; (8000e50 <writeSD+0x62c>)
 8000c12:	f8b3 3872 	ldrh.w	r3, [r3, #2162]	; 0x872
	len = snprintf((char*) block, sizeof(block),
 8000c16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000c1a:	4b8d      	ldr	r3, [pc, #564]	; (8000e50 <writeSD+0x62c>)
 8000c1c:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
	len = snprintf((char*) block, sizeof(block),
 8000c20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	/*13*/	can_vector[269].word_0,can_vector[269].word_1,can_vector[269].word_2,can_vector[269].word_3,can_vector[270].word_0,can_vector[270].word_1,can_vector[271].word_0,can_vector[271].word_1,
 8000c24:	4b8a      	ldr	r3, [pc, #552]	; (8000e50 <writeSD+0x62c>)
 8000c26:	f8b3 387a 	ldrh.w	r3, [r3, #2170]	; 0x87a
	len = snprintf((char*) block, sizeof(block),
 8000c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c2e:	4b88      	ldr	r3, [pc, #544]	; (8000e50 <writeSD+0x62c>)
 8000c30:	f8b3 387c 	ldrh.w	r3, [r3, #2172]	; 0x87c
	len = snprintf((char*) block, sizeof(block),
 8000c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c38:	4b85      	ldr	r3, [pc, #532]	; (8000e50 <writeSD+0x62c>)
 8000c3a:	f8b3 387e 	ldrh.w	r3, [r3, #2174]	; 0x87e
	len = snprintf((char*) block, sizeof(block),
 8000c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c42:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <writeSD+0x62c>)
 8000c44:	f8b3 3880 	ldrh.w	r3, [r3, #2176]	; 0x880
	len = snprintf((char*) block, sizeof(block),
 8000c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c4c:	4b80      	ldr	r3, [pc, #512]	; (8000e50 <writeSD+0x62c>)
 8000c4e:	f8b3 3882 	ldrh.w	r3, [r3, #2178]	; 0x882
	len = snprintf((char*) block, sizeof(block),
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c56:	4b7e      	ldr	r3, [pc, #504]	; (8000e50 <writeSD+0x62c>)
 8000c58:	f8b3 3884 	ldrh.w	r3, [r3, #2180]	; 0x884
	len = snprintf((char*) block, sizeof(block),
 8000c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c60:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <writeSD+0x62c>)
 8000c62:	f8b3 3886 	ldrh.w	r3, [r3, #2182]	; 0x886
	len = snprintf((char*) block, sizeof(block),
 8000c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c6a:	4b79      	ldr	r3, [pc, #484]	; (8000e50 <writeSD+0x62c>)
 8000c6c:	f8b3 3888 	ldrh.w	r3, [r3, #2184]	; 0x888
	len = snprintf((char*) block, sizeof(block),
 8000c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/*14*/	can_vector[271].word_2,can_vector[271].word_3,can_vector[272].word_0,can_vector[272].word_1,can_vector[272].word_2,can_vector[272].word_3,can_vector[273].word_0,can_vector[273].word_1,
 8000c74:	4b76      	ldr	r3, [pc, #472]	; (8000e50 <writeSD+0x62c>)
 8000c76:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
	len = snprintf((char*) block, sizeof(block),
 8000c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000c7e:	4b74      	ldr	r3, [pc, #464]	; (8000e50 <writeSD+0x62c>)
 8000c80:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
	len = snprintf((char*) block, sizeof(block),
 8000c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000c88:	4b71      	ldr	r3, [pc, #452]	; (8000e50 <writeSD+0x62c>)
 8000c8a:	f8b3 388e 	ldrh.w	r3, [r3, #2190]	; 0x88e
	len = snprintf((char*) block, sizeof(block),
 8000c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000c92:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <writeSD+0x62c>)
 8000c94:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
	len = snprintf((char*) block, sizeof(block),
 8000c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000c9c:	4b6c      	ldr	r3, [pc, #432]	; (8000e50 <writeSD+0x62c>)
 8000c9e:	f8b3 3892 	ldrh.w	r3, [r3, #2194]	; 0x892
	len = snprintf((char*) block, sizeof(block),
 8000ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000ca6:	4b6a      	ldr	r3, [pc, #424]	; (8000e50 <writeSD+0x62c>)
 8000ca8:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
	len = snprintf((char*) block, sizeof(block),
 8000cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000cb0:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <writeSD+0x62c>)
 8000cb2:	f8b3 3896 	ldrh.w	r3, [r3, #2198]	; 0x896
	len = snprintf((char*) block, sizeof(block),
 8000cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000cb8:	4b65      	ldr	r3, [pc, #404]	; (8000e50 <writeSD+0x62c>)
 8000cba:	f8b3 3898 	ldrh.w	r3, [r3, #2200]	; 0x898
	len = snprintf((char*) block, sizeof(block),
 8000cbe:	67bb      	str	r3, [r7, #120]	; 0x78
	/*15*/	can_vector[273].word_2,can_vector[273].word_3,can_vector[274].word_0,can_vector[274].word_1,can_vector[274].word_2,can_vector[274].word_3,can_vector[275].word_0,can_vector[275].word_1,
 8000cc0:	4b63      	ldr	r3, [pc, #396]	; (8000e50 <writeSD+0x62c>)
 8000cc2:	f8b3 389a 	ldrh.w	r3, [r3, #2202]	; 0x89a
	len = snprintf((char*) block, sizeof(block),
 8000cc6:	677b      	str	r3, [r7, #116]	; 0x74
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000cc8:	4b61      	ldr	r3, [pc, #388]	; (8000e50 <writeSD+0x62c>)
 8000cca:	f8b3 38a0 	ldrh.w	r3, [r3, #2208]	; 0x8a0
	len = snprintf((char*) block, sizeof(block),
 8000cce:	673b      	str	r3, [r7, #112]	; 0x70
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000cd0:	4b5f      	ldr	r3, [pc, #380]	; (8000e50 <writeSD+0x62c>)
 8000cd2:	f8b3 38a2 	ldrh.w	r3, [r3, #2210]	; 0x8a2
	len = snprintf((char*) block, sizeof(block),
 8000cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000cd8:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <writeSD+0x62c>)
 8000cda:	f8b3 38a4 	ldrh.w	r3, [r3, #2212]	; 0x8a4
	len = snprintf((char*) block, sizeof(block),
 8000cde:	66bb      	str	r3, [r7, #104]	; 0x68
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000ce0:	4b5b      	ldr	r3, [pc, #364]	; (8000e50 <writeSD+0x62c>)
 8000ce2:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
	len = snprintf((char*) block, sizeof(block),
 8000ce6:	667b      	str	r3, [r7, #100]	; 0x64
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000ce8:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <writeSD+0x62c>)
 8000cea:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
	len = snprintf((char*) block, sizeof(block),
 8000cee:	663b      	str	r3, [r7, #96]	; 0x60
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000cf0:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <writeSD+0x62c>)
 8000cf2:	f8b3 38aa 	ldrh.w	r3, [r3, #2218]	; 0x8aa
	len = snprintf((char*) block, sizeof(block),
 8000cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000cf8:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <writeSD+0x62c>)
 8000cfa:	f8b3 38ac 	ldrh.w	r3, [r3, #2220]	; 0x8ac
	len = snprintf((char*) block, sizeof(block),
 8000cfe:	65bb      	str	r3, [r7, #88]	; 0x58
	/*16*/	can_vector[276].word_0,can_vector[276].word_1,can_vector[276].word_2,can_vector[276].word_3,can_vector[277].word_0,can_vector[277].word_1,can_vector[277].word_2,can_vector[277].word_3,
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <writeSD+0x62c>)
 8000d02:	f8b3 38ae 	ldrh.w	r3, [r3, #2222]	; 0x8ae
	len = snprintf((char*) block, sizeof(block),
 8000d06:	657b      	str	r3, [r7, #84]	; 0x54
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d08:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <writeSD+0x62c>)
 8000d0a:	f8b3 38b0 	ldrh.w	r3, [r3, #2224]	; 0x8b0
	len = snprintf((char*) block, sizeof(block),
 8000d0e:	653b      	str	r3, [r7, #80]	; 0x50
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d10:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <writeSD+0x62c>)
 8000d12:	f8b3 38b2 	ldrh.w	r3, [r3, #2226]	; 0x8b2
	len = snprintf((char*) block, sizeof(block),
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d18:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <writeSD+0x62c>)
 8000d1a:	f8b3 38b4 	ldrh.w	r3, [r3, #2228]	; 0x8b4
	len = snprintf((char*) block, sizeof(block),
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <writeSD+0x62c>)
 8000d22:	f8b3 38b6 	ldrh.w	r3, [r3, #2230]	; 0x8b6
	len = snprintf((char*) block, sizeof(block),
 8000d26:	647b      	str	r3, [r7, #68]	; 0x44
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d28:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <writeSD+0x62c>)
 8000d2a:	f8b3 38b8 	ldrh.w	r3, [r3, #2232]	; 0x8b8
	len = snprintf((char*) block, sizeof(block),
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <writeSD+0x62c>)
 8000d32:	f8b3 38ba 	ldrh.w	r3, [r3, #2234]	; 0x8ba
	len = snprintf((char*) block, sizeof(block),
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <writeSD+0x62c>)
 8000d3a:	f8b3 38bc 	ldrh.w	r3, [r3, #2236]	; 0x8bc
	len = snprintf((char*) block, sizeof(block),
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	/*17*/	can_vector[278].word_0,can_vector[278].word_1,can_vector[278].word_2,can_vector[278].word_3,can_vector[279].word_0,can_vector[279].word_1,can_vector[279].word_2,can_vector[279].word_3,
 8000d40:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <writeSD+0x62c>)
 8000d42:	f8b3 38be 	ldrh.w	r3, [r3, #2238]	; 0x8be
	len = snprintf((char*) block, sizeof(block),
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d48:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <writeSD+0x62c>)
 8000d4a:	f8b3 38c0 	ldrh.w	r3, [r3, #2240]	; 0x8c0
	len = snprintf((char*) block, sizeof(block),
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <writeSD+0x62c>)
 8000d52:	f8b3 38c2 	ldrh.w	r3, [r3, #2242]	; 0x8c2
	len = snprintf((char*) block, sizeof(block),
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d58:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <writeSD+0x62c>)
 8000d5a:	f8b3 38c8 	ldrh.w	r3, [r3, #2248]	; 0x8c8
	len = snprintf((char*) block, sizeof(block),
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <writeSD+0x62c>)
 8000d62:	f8b3 38ca 	ldrh.w	r3, [r3, #2250]	; 0x8ca
	len = snprintf((char*) block, sizeof(block),
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <writeSD+0x62c>)
 8000d6a:	f8b3 38cc 	ldrh.w	r3, [r3, #2252]	; 0x8cc
	len = snprintf((char*) block, sizeof(block),
 8000d6e:	623b      	str	r3, [r7, #32]
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d70:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <writeSD+0x62c>)
 8000d72:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	; 0x8ce
	len = snprintf((char*) block, sizeof(block),
 8000d76:	61fb      	str	r3, [r7, #28]
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <writeSD+0x62c>)
 8000d7a:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
	len = snprintf((char*) block, sizeof(block),
 8000d7e:	61bb      	str	r3, [r7, #24]
	/*18*/	can_vector[280].word_0,can_vector[280].word_1,can_vector[281].word_0,can_vector[281].word_1,can_vector[281].word_2,can_vector[281].word_3,can_vector[282].word_0,can_vector[282].word_1,
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <writeSD+0x62c>)
 8000d82:	f8b3 38d2 	ldrh.w	r3, [r3, #2258]	; 0x8d2
	len = snprintf((char*) block, sizeof(block),
 8000d86:	617b      	str	r3, [r7, #20]
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <writeSD+0x62c>)
 8000d8a:	f8b3 38d4 	ldrh.w	r3, [r3, #2260]	; 0x8d4
	len = snprintf((char*) block, sizeof(block),
 8000d8e:	613b      	str	r3, [r7, #16]
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <writeSD+0x62c>)
 8000d92:	f8b3 38d6 	ldrh.w	r3, [r3, #2262]	; 0x8d6
	len = snprintf((char*) block, sizeof(block),
 8000d96:	60fb      	str	r3, [r7, #12]
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <writeSD+0x62c>)
 8000d9a:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
	len = snprintf((char*) block, sizeof(block),
 8000d9e:	60bb      	str	r3, [r7, #8]
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <writeSD+0x62c>)
 8000da2:	f8b3 38da 	ldrh.w	r3, [r3, #2266]	; 0x8da
	len = snprintf((char*) block, sizeof(block),
 8000da6:	607b      	str	r3, [r7, #4]
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <writeSD+0x62c>)
 8000daa:	f8b3 38dc 	ldrh.w	r3, [r3, #2268]	; 0x8dc
	len = snprintf((char*) block, sizeof(block),
 8000dae:	603b      	str	r3, [r7, #0]
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <writeSD+0x62c>)
 8000db2:	f8b3 38de 	ldrh.w	r3, [r3, #2270]	; 0x8de
	len = snprintf((char*) block, sizeof(block),
 8000db6:	461e      	mov	r6, r3
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000db8:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <writeSD+0x62c>)
 8000dba:	f8b3 38e0 	ldrh.w	r3, [r3, #2272]	; 0x8e0
	len = snprintf((char*) block, sizeof(block),
 8000dbe:	461d      	mov	r5, r3
	/*19*/	can_vector[282].word_2,can_vector[282].word_3,can_vector[283].word_0,can_vector[283].word_1,can_vector[283].word_2,can_vector[283].word_3,can_vector[284].word_0,can_vector[284].word_1,
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <writeSD+0x62c>)
 8000dc2:	f8b3 38e2 	ldrh.w	r3, [r3, #2274]	; 0x8e2
	len = snprintf((char*) block, sizeof(block),
 8000dc6:	461c      	mov	r4, r3
	/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <writeSD+0x62c>)
 8000dca:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
	len = snprintf((char*) block, sizeof(block),
 8000dce:	4618      	mov	r0, r3
	/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <writeSD+0x62c>)
 8000dd2:	f8b3 38e6 	ldrh.w	r3, [r3, #2278]	; 0x8e6
	len = snprintf((char*) block, sizeof(block),
 8000dd6:	4619      	mov	r1, r3
	/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <writeSD+0x62c>)
 8000dda:	f8b3 38e8 	ldrh.w	r3, [r3, #2280]	; 0x8e8
	len = snprintf((char*) block, sizeof(block),
 8000dde:	461a      	mov	r2, r3
	/*20*/	can_vector[284].word_2,can_vector[284].word_3,can_vector[285].word_0,can_vector[285].word_1);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <writeSD+0x62c>)
 8000de2:	f8b3 38ea 	ldrh.w	r3, [r3, #2282]	; 0x8ea
	len = snprintf((char*) block, sizeof(block),
 8000de6:	f507 7c12 	add.w	ip, r7, #584	; 0x248
 8000dea:	9398      	str	r3, [sp, #608]	; 0x260
 8000dec:	9297      	str	r2, [sp, #604]	; 0x25c
 8000dee:	9196      	str	r1, [sp, #600]	; 0x258
 8000df0:	9095      	str	r0, [sp, #596]	; 0x254
 8000df2:	9494      	str	r4, [sp, #592]	; 0x250
 8000df4:	9593      	str	r5, [sp, #588]	; 0x24c
 8000df6:	9692      	str	r6, [sp, #584]	; 0x248
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	9291      	str	r2, [sp, #580]	; 0x244
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	9290      	str	r2, [sp, #576]	; 0x240
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	928f      	str	r2, [sp, #572]	; 0x23c
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	928e      	str	r2, [sp, #568]	; 0x238
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	928d      	str	r2, [sp, #564]	; 0x234
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	928c      	str	r2, [sp, #560]	; 0x230
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	928b      	str	r2, [sp, #556]	; 0x22c
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	928a      	str	r2, [sp, #552]	; 0x228
 8000e18:	6a3a      	ldr	r2, [r7, #32]
 8000e1a:	9289      	str	r2, [sp, #548]	; 0x224
 8000e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1e:	9288      	str	r2, [sp, #544]	; 0x220
 8000e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e22:	9287      	str	r2, [sp, #540]	; 0x21c
 8000e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e26:	9286      	str	r2, [sp, #536]	; 0x218
 8000e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e2a:	9285      	str	r2, [sp, #532]	; 0x214
 8000e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e2e:	9284      	str	r2, [sp, #528]	; 0x210
 8000e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e32:	9283      	str	r2, [sp, #524]	; 0x20c
 8000e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e36:	9282      	str	r2, [sp, #520]	; 0x208
 8000e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e3a:	9281      	str	r2, [sp, #516]	; 0x204
 8000e3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e3e:	9280      	str	r2, [sp, #512]	; 0x200
 8000e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e42:	927f      	str	r2, [sp, #508]	; 0x1fc
 8000e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e46:	927e      	str	r2, [sp, #504]	; 0x1f8
 8000e48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e4a:	927d      	str	r2, [sp, #500]	; 0x1f4
 8000e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e4e:	e001      	b.n	8000e54 <writeSD+0x630>
 8000e50:	2400348c 	.word	0x2400348c
 8000e54:	927c      	str	r2, [sp, #496]	; 0x1f0
 8000e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e58:	927b      	str	r2, [sp, #492]	; 0x1ec
 8000e5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e5c:	927a      	str	r2, [sp, #488]	; 0x1e8
 8000e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e60:	9279      	str	r2, [sp, #484]	; 0x1e4
 8000e62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e64:	9278      	str	r2, [sp, #480]	; 0x1e0
 8000e66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e68:	9277      	str	r2, [sp, #476]	; 0x1dc
 8000e6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e6c:	9276      	str	r2, [sp, #472]	; 0x1d8
 8000e6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e70:	9275      	str	r2, [sp, #468]	; 0x1d4
 8000e72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e74:	9274      	str	r2, [sp, #464]	; 0x1d0
 8000e76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e78:	9273      	str	r2, [sp, #460]	; 0x1cc
 8000e7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e7c:	9272      	str	r2, [sp, #456]	; 0x1c8
 8000e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000e82:	9271      	str	r2, [sp, #452]	; 0x1c4
 8000e84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000e88:	9270      	str	r2, [sp, #448]	; 0x1c0
 8000e8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000e8e:	926f      	str	r2, [sp, #444]	; 0x1bc
 8000e90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000e94:	926e      	str	r2, [sp, #440]	; 0x1b8
 8000e96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000e9a:	926d      	str	r2, [sp, #436]	; 0x1b4
 8000e9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ea0:	926c      	str	r2, [sp, #432]	; 0x1b0
 8000ea2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ea6:	926b      	str	r2, [sp, #428]	; 0x1ac
 8000ea8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000eac:	926a      	str	r2, [sp, #424]	; 0x1a8
 8000eae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000eb2:	9269      	str	r2, [sp, #420]	; 0x1a4
 8000eb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000eb8:	9268      	str	r2, [sp, #416]	; 0x1a0
 8000eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000ebe:	9267      	str	r2, [sp, #412]	; 0x19c
 8000ec0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ec4:	9266      	str	r2, [sp, #408]	; 0x198
 8000ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000eca:	9265      	str	r2, [sp, #404]	; 0x194
 8000ecc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000ed0:	9264      	str	r2, [sp, #400]	; 0x190
 8000ed2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000ed6:	9263      	str	r2, [sp, #396]	; 0x18c
 8000ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000edc:	9262      	str	r2, [sp, #392]	; 0x188
 8000ede:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000ee2:	9261      	str	r2, [sp, #388]	; 0x184
 8000ee4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ee8:	9260      	str	r2, [sp, #384]	; 0x180
 8000eea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000eee:	925f      	str	r2, [sp, #380]	; 0x17c
 8000ef0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000ef4:	925e      	str	r2, [sp, #376]	; 0x178
 8000ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000efa:	925d      	str	r2, [sp, #372]	; 0x174
 8000efc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000f00:	925c      	str	r2, [sp, #368]	; 0x170
 8000f02:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000f06:	925b      	str	r2, [sp, #364]	; 0x16c
 8000f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f0c:	925a      	str	r2, [sp, #360]	; 0x168
 8000f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f12:	9259      	str	r2, [sp, #356]	; 0x164
 8000f14:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f18:	9258      	str	r2, [sp, #352]	; 0x160
 8000f1a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f1e:	9257      	str	r2, [sp, #348]	; 0x15c
 8000f20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000f24:	9256      	str	r2, [sp, #344]	; 0x158
 8000f26:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000f2a:	9255      	str	r2, [sp, #340]	; 0x154
 8000f2c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000f30:	9254      	str	r2, [sp, #336]	; 0x150
 8000f32:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000f36:	9253      	str	r2, [sp, #332]	; 0x14c
 8000f38:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000f3c:	9252      	str	r2, [sp, #328]	; 0x148
 8000f3e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000f42:	9251      	str	r2, [sp, #324]	; 0x144
 8000f44:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000f48:	9250      	str	r2, [sp, #320]	; 0x140
 8000f4a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000f4e:	924f      	str	r2, [sp, #316]	; 0x13c
 8000f50:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000f54:	924e      	str	r2, [sp, #312]	; 0x138
 8000f56:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000f5a:	924d      	str	r2, [sp, #308]	; 0x134
 8000f5c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000f60:	924c      	str	r2, [sp, #304]	; 0x130
 8000f62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f66:	924b      	str	r2, [sp, #300]	; 0x12c
 8000f68:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f6c:	924a      	str	r2, [sp, #296]	; 0x128
 8000f6e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000f72:	9249      	str	r2, [sp, #292]	; 0x124
 8000f74:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000f78:	9248      	str	r2, [sp, #288]	; 0x120
 8000f7a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000f7e:	9247      	str	r2, [sp, #284]	; 0x11c
 8000f80:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f84:	9246      	str	r2, [sp, #280]	; 0x118
 8000f86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8000f8a:	9245      	str	r2, [sp, #276]	; 0x114
 8000f8c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000f90:	9244      	str	r2, [sp, #272]	; 0x110
 8000f92:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000f96:	9243      	str	r2, [sp, #268]	; 0x10c
 8000f98:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000f9c:	9242      	str	r2, [sp, #264]	; 0x108
 8000f9e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000fa2:	9241      	str	r2, [sp, #260]	; 0x104
 8000fa4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fa8:	9240      	str	r2, [sp, #256]	; 0x100
 8000faa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fae:	923f      	str	r2, [sp, #252]	; 0xfc
 8000fb0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000fb4:	923e      	str	r2, [sp, #248]	; 0xf8
 8000fb6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000fba:	923d      	str	r2, [sp, #244]	; 0xf4
 8000fbc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000fc0:	923c      	str	r2, [sp, #240]	; 0xf0
 8000fc2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8000fc6:	923b      	str	r2, [sp, #236]	; 0xec
 8000fc8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000fcc:	923a      	str	r2, [sp, #232]	; 0xe8
 8000fce:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000fd2:	9239      	str	r2, [sp, #228]	; 0xe4
 8000fd4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8000fd8:	9238      	str	r2, [sp, #224]	; 0xe0
 8000fda:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000fde:	9237      	str	r2, [sp, #220]	; 0xdc
 8000fe0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000fe4:	9236      	str	r2, [sp, #216]	; 0xd8
 8000fe6:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000fea:	9235      	str	r2, [sp, #212]	; 0xd4
 8000fec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ff0:	9234      	str	r2, [sp, #208]	; 0xd0
 8000ff2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ff6:	9233      	str	r2, [sp, #204]	; 0xcc
 8000ff8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ffc:	9232      	str	r2, [sp, #200]	; 0xc8
 8000ffe:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001002:	9231      	str	r2, [sp, #196]	; 0xc4
 8001004:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001008:	9230      	str	r2, [sp, #192]	; 0xc0
 800100a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800100e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001010:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8001014:	922e      	str	r2, [sp, #184]	; 0xb8
 8001016:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800101a:	922d      	str	r2, [sp, #180]	; 0xb4
 800101c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001020:	922c      	str	r2, [sp, #176]	; 0xb0
 8001022:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001026:	922b      	str	r2, [sp, #172]	; 0xac
 8001028:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800102c:	922a      	str	r2, [sp, #168]	; 0xa8
 800102e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001032:	9229      	str	r2, [sp, #164]	; 0xa4
 8001034:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001038:	9228      	str	r2, [sp, #160]	; 0xa0
 800103a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800103e:	9227      	str	r2, [sp, #156]	; 0x9c
 8001040:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001044:	9226      	str	r2, [sp, #152]	; 0x98
 8001046:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800104a:	9225      	str	r2, [sp, #148]	; 0x94
 800104c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001050:	9224      	str	r2, [sp, #144]	; 0x90
 8001052:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001056:	9223      	str	r2, [sp, #140]	; 0x8c
 8001058:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800105c:	9222      	str	r2, [sp, #136]	; 0x88
 800105e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001062:	9221      	str	r2, [sp, #132]	; 0x84
 8001064:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8001068:	9220      	str	r2, [sp, #128]	; 0x80
 800106a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800106e:	921f      	str	r2, [sp, #124]	; 0x7c
 8001070:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8001074:	921e      	str	r2, [sp, #120]	; 0x78
 8001076:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800107a:	921d      	str	r2, [sp, #116]	; 0x74
 800107c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001080:	921c      	str	r2, [sp, #112]	; 0x70
 8001082:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001086:	921b      	str	r2, [sp, #108]	; 0x6c
 8001088:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800108c:	921a      	str	r2, [sp, #104]	; 0x68
 800108e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001092:	9219      	str	r2, [sp, #100]	; 0x64
 8001094:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8001098:	9218      	str	r2, [sp, #96]	; 0x60
 800109a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800109e:	9217      	str	r2, [sp, #92]	; 0x5c
 80010a0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80010a4:	9216      	str	r2, [sp, #88]	; 0x58
 80010a6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80010aa:	9215      	str	r2, [sp, #84]	; 0x54
 80010ac:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80010b0:	9214      	str	r2, [sp, #80]	; 0x50
 80010b2:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80010b6:	9213      	str	r2, [sp, #76]	; 0x4c
 80010b8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80010bc:	9212      	str	r2, [sp, #72]	; 0x48
 80010be:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80010c2:	9211      	str	r2, [sp, #68]	; 0x44
 80010c4:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80010c8:	9210      	str	r2, [sp, #64]	; 0x40
 80010ca:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80010ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80010d0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80010d4:	920e      	str	r2, [sp, #56]	; 0x38
 80010d6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80010da:	920d      	str	r2, [sp, #52]	; 0x34
 80010dc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80010e0:	920c      	str	r2, [sp, #48]	; 0x30
 80010e2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80010e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80010e8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80010ec:	920a      	str	r2, [sp, #40]	; 0x28
 80010ee:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80010f2:	9209      	str	r2, [sp, #36]	; 0x24
 80010f4:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80010f8:	9208      	str	r2, [sp, #32]
 80010fa:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80010fe:	9207      	str	r2, [sp, #28]
 8001100:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001104:	9206      	str	r2, [sp, #24]
 8001106:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 800110a:	9205      	str	r2, [sp, #20]
 800110c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8001110:	9204      	str	r2, [sp, #16]
 8001112:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8001116:	9203      	str	r2, [sp, #12]
 8001118:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800111c:	9202      	str	r2, [sp, #8]
 800111e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <writeSD+0x988>)
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	4660      	mov	r0, ip
 8001136:	f00d f865 	bl	800e204 <sniprintf>
 800113a:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450

	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write*/
 800113e:	2212      	movs	r2, #18
 8001140:	491b      	ldr	r1, [pc, #108]	; (80011b0 <writeSD+0x98c>)
 8001142:	481c      	ldr	r0, [pc, #112]	; (80011b4 <writeSD+0x990>)
 8001144:	f00b fc54 	bl	800c9f0 <f_open>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
	fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <writeSD+0x990>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	4619      	mov	r1, r3
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <writeSD+0x990>)
 8001156:	f00c f853 	bl	800d200 <f_lseek>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
	fresult = f_write(&file, block, len, &bytes_written);//write data to the file
 8001160:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8001164:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001168:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <writeSD+0x990>)
 800116e:	f00b fe0b 	bl	800cd88 <f_write>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
	fresult = f_close(&file);//closes the file
 8001178:	480e      	ldr	r0, [pc, #56]	; (80011b4 <writeSD+0x990>)
 800117a:	f00c f817 	bl	800d1ac <f_close>
 800117e:	4603      	mov	r3, r0
 8001180:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f

	if(fresult == FR_OK){
 8001184:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <writeSD+0x970>
		_datalog_flag  = 1;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <writeSD+0x994>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e002      	b.n	800119a <writeSD+0x976>
	}
	else _datalog_flag = 0;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <writeSD+0x994>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 800119a:	2120      	movs	r1, #32
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <writeSD+0x998>)
 800119e:	f002 fb3a 	bl	8003816 <HAL_GPIO_TogglePin>
}
 80011a2:	bf00      	nop
 80011a4:	f207 475c 	addw	r7, r7, #1116	; 0x45c
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ac:	08010b18 	.word	0x08010b18
 80011b0:	240024d8 	.word	0x240024d8
 80011b4:	240014a8 	.word	0x240014a8
 80011b8:	24001234 	.word	0x24001234
 80011bc:	58020c00 	.word	0x58020c00

080011c0 <Clean_CAN_Struct>:

CanIdData_t can_vector[CAN_IDS_NUMBER];



void Clean_CAN_Struct(void) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	80fb      	strh	r3, [r7, #6]
 80011ca:	e019      	b.n	8001200 <Clean_CAN_Struct+0x40>
		can_vector[i].word_0 = 0;
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <Clean_CAN_Struct+0x58>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <Clean_CAN_Struct+0x58>)
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <Clean_CAN_Struct+0x58>)
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	2200      	movs	r2, #0
 80011ec:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <Clean_CAN_Struct+0x58>)
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	2200      	movs	r2, #0
 80011f8:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	3301      	adds	r3, #1
 80011fe:	80fb      	strh	r3, [r7, #6]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001206:	d3e1      	bcc.n	80011cc <Clean_CAN_Struct+0xc>
	}
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	2400348c 	.word	0x2400348c

0800121c <canMessageReceived>:

void canMessageReceived(uint16_t id, uint8_t *data) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	80fb      	strh	r3, [r7, #6]
	if (id > CAN_IDS_NUMBER - 1)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800122e:	d220      	bcs.n	8001272 <canMessageReceived+0x56>
		return;

	uint16_t *data_word = (uint16_t*) data;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	60fb      	str	r3, [r7, #12]
	can_vector[id].word_0 = data_word[0];
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	8811      	ldrh	r1, [r2, #0]
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <canMessageReceived+0x64>)
 800123c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[id].word_1 = data_word[1];
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	8851      	ldrh	r1, [r2, #2]
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <canMessageReceived+0x64>)
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	460a      	mov	r2, r1
 800124e:	805a      	strh	r2, [r3, #2]
	can_vector[id].word_2 = data_word[2];
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	8891      	ldrh	r1, [r2, #4]
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <canMessageReceived+0x64>)
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	460a      	mov	r2, r1
 800125e:	809a      	strh	r2, [r3, #4]
	can_vector[id].word_3 = data_word[3];
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	88d1      	ldrh	r1, [r2, #6]
 8001266:	4a06      	ldr	r2, [pc, #24]	; (8001280 <canMessageReceived+0x64>)
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	460a      	mov	r2, r1
 800126e:	80da      	strh	r2, [r3, #6]
 8001270:	e000      	b.n	8001274 <canMessageReceived+0x58>
		return;
 8001272:	bf00      	nop
}
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2400348c 	.word	0x2400348c

08001284 <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <initialize_general_CAN+0x24>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <initialize_general_CAN+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <initialize_general_CAN+0x28>)
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <initialize_general_CAN+0x2c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f9f4 	bl	8000688 <initialize_CAN>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24001238 	.word	0x24001238
 80012ac:	2400123c 	.word	0x2400123c
 80012b0:	080012b5 	.word	0x080012b5

080012b4 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d043      	beq.n	8001350 <CAN_general_receive_callback+0x9c>
		//piscar LED da CAN PD3
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <CAN_general_receive_callback+0xa4>)
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <CAN_general_receive_callback+0xa8>)
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f001 fa1c 	bl	800270c <HAL_FDCAN_GetRxMessage>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 80012da:	f000 fa2b 	bl	8001734 <Error_Handler>
		}

		idgeneral = RxHeader.Identifier;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <CAN_general_receive_callback+0xa8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <CAN_general_receive_callback+0xac>)
 80012e4:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e019      	b.n	8001320 <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <CAN_general_receive_callback+0xa4>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b219      	sxth	r1, r3
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <CAN_general_receive_callback+0xa4>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b21a      	sxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	da00      	bge.n	800130a <CAN_general_receive_callback+0x56>
 8001308:	3301      	adds	r3, #1
 800130a:	105b      	asrs	r3, r3, #1
 800130c:	4618      	mov	r0, r3
 800130e:	ea41 0302 	orr.w	r3, r1, r2
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <CAN_general_receive_callback+0xb0>)
 8001316:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3302      	adds	r3, #2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b07      	cmp	r3, #7
 8001324:	dde2      	ble.n	80012ec <CAN_general_receive_callback+0x38>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6); //A LED DA CAN (PIN 3, TÁ QUEIMADA)
 8001326:	2140      	movs	r1, #64	; 0x40
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <CAN_general_receive_callback+0xb4>)
 800132a:	f002 fa74 	bl	8003816 <HAL_GPIO_TogglePin>
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas
		canMessageReceived(idgeneral, datageneral);
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <CAN_general_receive_callback+0xac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	490b      	ldr	r1, [pc, #44]	; (8001364 <CAN_general_receive_callback+0xb0>)
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff70 	bl	800121c <canMessageReceived>

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f001 fb51 	bl	80029e8 <HAL_FDCAN_ActivateNotification>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <CAN_general_receive_callback+0x9c>
			/* Notification Error */
			Error_Handler();
 800134c:	f000 f9f2 	bl	8001734 <Error_Handler>
		}
	}
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24004118 	.word	0x24004118
 800135c:	24004120 	.word	0x24004120
 8001360:	2400410c 	.word	0x2400410c
 8001364:	24004110 	.word	0x24004110
 8001368:	58020c00 	.word	0x58020c00

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001372:	f000 fd47 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001376:	f000 f817 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137a:	f000 f95d 	bl	8001638 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800137e:	f000 f88d 	bl	800149c <MX_FDCAN1_Init>
  MX_UART4_Init();
 8001382:	f000 f90d 	bl	80015a0 <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 8001386:	f000 f8ed 	bl	8001564 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800138a:	f008 fddf 	bl	8009f4c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 800138e:	f7ff f9b9 	bl	8000704 <init_CAN>
  SD_Create_File();
 8001392:	f7ff f9c1 	bl	8000718 <SD_Create_File>
  Cabecalho();
 8001396:	f7ff fa0d 	bl	80007b4 <Cabecalho>
  Clean_CAN_Struct();
 800139a:	f7ff ff11 	bl	80011c0 <Clean_CAN_Struct>
  //uint16_t vet_tx[4]={0,0,0,0};
  uint16_t id = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  writeSD();
 80013a2:	f7ff fa3f 	bl	8000824 <writeSD>
 80013a6:	e7fc      	b.n	80013a2 <main+0x36>

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09c      	sub	sp, #112	; 0x70
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	224c      	movs	r2, #76	; 0x4c
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00c fada 	bl	800d970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00c fad4 	bl	800d970 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f002 fa3f 	bl	800384c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <SystemClock_Config+0xec>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <SystemClock_Config+0xec>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <SystemClock_Config+0xec>)
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <SystemClock_Config+0xf0>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a2a      	ldr	r2, [pc, #168]	; (8001498 <SystemClock_Config+0xf0>)
 80013ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <SystemClock_Config+0xf0>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001400:	bf00      	nop
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <SystemClock_Config+0xf0>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140e:	d1f8      	bne.n	8001402 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001410:	2301      	movs	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001436:	230c      	movs	r3, #12
 8001438:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800143a:	2300      	movs	r3, #0
 800143c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fa3a 	bl	80038c0 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001452:	f000 f96f 	bl	8001734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	233f      	movs	r3, #63	; 0x3f
 8001458:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001462:	2308      	movs	r3, #8
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2102      	movs	r1, #2
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fe2f 	bl	80040e0 <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001488:	f000 f954 	bl	8001734 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3770      	adds	r7, #112	; 0x70
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58000400 	.word	0x58000400
 8001498:	58024800 	.word	0x58024800

0800149c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014cc:	2202      	movs	r2, #2
 80014ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014d2:	220d      	movs	r2, #13
 80014d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014d8:	2202      	movs	r2, #2
 80014da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014de:	2201      	movs	r2, #1
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014ea:	220d      	movs	r2, #13
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001502:	2200      	movs	r2, #0
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001508:	2220      	movs	r2, #32
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800150e:	2204      	movs	r2, #4
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001514:	2220      	movs	r2, #32
 8001516:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800151a:	2204      	movs	r2, #4
 800151c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001520:	2220      	movs	r2, #32
 8001522:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001526:	2204      	movs	r2, #4
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800152c:	2220      	movs	r2, #32
 800152e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001532:	2220      	movs	r2, #32
 8001534:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001538:	2220      	movs	r2, #32
 800153a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001544:	2204      	movs	r2, #4
 8001546:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800154a:	f000 fe2d 	bl	80021a8 <HAL_FDCAN_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001554:	f000 f8ee 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	240041c4 	.word	0x240041c4
 8001560:	4000a000 	.word	0x4000a000

08001564 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_SDMMC1_SD_Init+0x34>)
 800156a:	4a0c      	ldr	r2, [pc, #48]	; (800159c <MX_SDMMC1_SD_Init+0x38>)
 800156c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_SDMMC1_SD_Init+0x34>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_SDMMC1_SD_Init+0x34>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <MX_SDMMC1_SD_Init+0x34>)
 800157c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001580:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <MX_SDMMC1_SD_Init+0x34>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <MX_SDMMC1_SD_Init+0x34>)
 800158a:	2204      	movs	r2, #4
 800158c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	24004148 	.word	0x24004148
 800159c:	52007000 	.word	0x52007000

080015a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_UART4_Init+0x90>)
 80015a6:	4a23      	ldr	r2, [pc, #140]	; (8001634 <MX_UART4_Init+0x94>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <MX_UART4_Init+0x90>)
 80015ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_UART4_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_UART4_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_UART4_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_UART4_Init+0x90>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_UART4_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_UART4_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_UART4_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_UART4_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_UART4_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <MX_UART4_Init+0x90>)
 80015ea:	f006 fec5 	bl	8008378 <HAL_UART_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015f4:	f000 f89e 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_UART4_Init+0x90>)
 80015fc:	f007 fe12 	bl	8009224 <HAL_UARTEx_SetTxFifoThreshold>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001606:	f000 f895 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4808      	ldr	r0, [pc, #32]	; (8001630 <MX_UART4_Init+0x90>)
 800160e:	f007 fe47 	bl	80092a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001618:	f000 f88c 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_UART4_Init+0x90>)
 800161e:	f007 fdc8 	bl	80091b2 <HAL_UARTEx_DisableFifoMode>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001628:	f000 f884 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	240042b8 	.word	0x240042b8
 8001634:	40004c00 	.word	0x40004c00

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <MX_GPIO_Init+0xf4>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	4a35      	ldr	r2, [pc, #212]	; (800172c <MX_GPIO_Init+0xf4>)
 8001656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <MX_GPIO_Init+0xf4>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <MX_GPIO_Init+0xf4>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	4a2e      	ldr	r2, [pc, #184]	; (800172c <MX_GPIO_Init+0xf4>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <MX_GPIO_Init+0xf4>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <MX_GPIO_Init+0xf4>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <MX_GPIO_Init+0xf4>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <MX_GPIO_Init+0xf4>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_GPIO_Init+0xf4>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <MX_GPIO_Init+0xf4>)
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_GPIO_Init+0xf4>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_GPIO_Init+0xf4>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <MX_GPIO_Init+0xf4>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <MX_GPIO_Init+0xf4>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAN_LED_Pin|DATALOG_LED_Pin|ACCEL_LED_Pin, GPIO_PIN_SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2168      	movs	r1, #104	; 0x68
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_GPIO_Init+0xf8>)
 80016ea:	f002 f87b 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <MX_GPIO_Init+0xf8>)
 8001702:	f001 fea7 	bl	8003454 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_LED_Pin DATALOG_LED_Pin ACCEL_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin|DATALOG_LED_Pin|ACCEL_LED_Pin;
 8001706:	2368      	movs	r3, #104	; 0x68
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_GPIO_Init+0xf8>)
 800171e:	f001 fe99 	bl	8003454 <HAL_GPIO_Init>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	58024400 	.word	0x58024400
 8001730:	58020c00 	.word	0x58020c00

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_MspInit+0x30>)
 8001748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800174c:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_MspInit+0x30>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_MspInit+0x30>)
 8001758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	58024400 	.word	0x58024400

08001774 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b8      	sub	sp, #224	; 0xe0
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	22bc      	movs	r2, #188	; 0xbc
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f00c f8eb 	bl	800d970 <memset>
  if(hfdcan->Instance==FDCAN1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <HAL_FDCAN_MspInit+0xe0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d152      	bne.n	800184a <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 f820 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 80017be:	f7ff ffb9 	bl	8001734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_FDCAN_MspInit+0xe4>)
 80017c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_FDCAN_MspInit+0xe4>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_FDCAN_MspInit+0xe4>)
 80017d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_FDCAN_MspInit+0xe4>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <HAL_FDCAN_MspInit+0xe4>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_FDCAN_MspInit+0xe4>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001802:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001818:	2309      	movs	r3, #9
 800181a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001822:	4619      	mov	r1, r3
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <HAL_FDCAN_MspInit+0xe8>)
 8001826:	f001 fe15 	bl	8003454 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2013      	movs	r0, #19
 8001830:	f000 fc85 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001834:	2013      	movs	r0, #19
 8001836:	f000 fc9c 	bl	8002172 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2015      	movs	r0, #21
 8001840:	f000 fc7d 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001844:	2015      	movs	r0, #21
 8001846:	f000 fc94 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	37e0      	adds	r7, #224	; 0xe0
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	4000a000 	.word	0x4000a000
 8001858:	58024400 	.word	0x58024400
 800185c:	58020400 	.word	0x58020400

08001860 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0ba      	sub	sp, #232	; 0xe8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	22bc      	movs	r2, #188	; 0xbc
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f00c f875 	bl	800d970 <memset>
  if(hsd->Instance==SDMMC1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a46      	ldr	r2, [pc, #280]	; (80019a4 <HAL_SD_MspInit+0x144>)
 800188c:	4293      	cmp	r3, r2
 800188e:	f040 8085 	bne.w	800199c <HAL_SD_MspInit+0x13c>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001896:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001898:	2300      	movs	r3, #0
 800189a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 ffa9 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 80018ac:	f7ff ff42 	bl	8001734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018b0:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018b6:	4a3c      	ldr	r2, [pc, #240]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_SD_MspInit+0x148>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800190a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800190e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001924:	230c      	movs	r3, #12
 8001926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800192e:	4619      	mov	r1, r3
 8001930:	481e      	ldr	r0, [pc, #120]	; (80019ac <HAL_SD_MspInit+0x14c>)
 8001932:	f001 fd8f 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001950:	230c      	movs	r3, #12
 8001952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800195a:	4619      	mov	r1, r3
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <HAL_SD_MspInit+0x14c>)
 800195e:	f001 fd79 	bl	8003454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001962:	2304      	movs	r3, #4
 8001964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800197a:	230c      	movs	r3, #12
 800197c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001984:	4619      	mov	r1, r3
 8001986:	480a      	ldr	r0, [pc, #40]	; (80019b0 <HAL_SD_MspInit+0x150>)
 8001988:	f001 fd64 	bl	8003454 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2031      	movs	r0, #49	; 0x31
 8001992:	f000 fbd4 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001996:	2031      	movs	r0, #49	; 0x31
 8001998:	f000 fbeb 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	37e8      	adds	r7, #232	; 0xe8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	52007000 	.word	0x52007000
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58020800 	.word	0x58020800
 80019b0:	58020c00 	.word	0x58020c00

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0b8      	sub	sp, #224	; 0xe0
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	22bc      	movs	r2, #188	; 0xbc
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00b ffcb 	bl	800d970 <memset>
  if(huart->Instance==UART4)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <HAL_UART_MspInit+0xbc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d141      	bne.n	8001a68 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff00 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019fe:	f7ff fe99 	bl	8001734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_UART_MspInit+0xc0>)
 8001a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a08:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <HAL_UART_MspInit+0xc0>)
 8001a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_UART_MspInit+0xc0>)
 8001a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_UART_MspInit+0xc0>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <HAL_UART_MspInit+0xc0>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_UART_MspInit+0xc0>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a56:	2308      	movs	r3, #8
 8001a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a60:	4619      	mov	r1, r3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <HAL_UART_MspInit+0xc4>)
 8001a64:	f001 fcf6 	bl	8003454 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	37e0      	adds	r7, #224	; 0xe0
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40004c00 	.word	0x40004c00
 8001a74:	58024400 	.word	0x58024400
 8001a78:	58020000 	.word	0x58020000

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 fa0e 	bl	8001ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <FDCAN1_IT0_IRQHandler+0x10>)
 8001ad6:	f001 f801 	bl	8002adc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	240041c4 	.word	0x240041c4

08001ae4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <FDCAN1_IT1_IRQHandler+0x10>)
 8001aea:	f000 fff7 	bl	8002adc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	240041c4 	.word	0x240041c4

08001af8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <SDMMC1_IRQHandler+0x10>)
 8001afe:	f005 fa69 	bl	8006fd4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	24004148 	.word	0x24004148

08001b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_kill>:

int _kill(int pid, int sig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b26:	f00b feeb 	bl	800d900 <__errno>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2216      	movs	r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_exit>:

void _exit (int status)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffe7 	bl	8001b1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b4e:	e7fe      	b.n	8001b4e <_exit+0x12>

08001b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b62:	f3af 8000 	nop.w
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
	}

return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e009      	b.n	8001bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf1      	blt.n	8001b9c <_write+0x12>
	}
	return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_close>:

int _close(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_isatty>:

int _isatty(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f00b fe50 	bl	800d900 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	24080000 	.word	0x24080000
 8001c8c:	00000800 	.word	0x00000800
 8001c90:	24001260 	.word	0x24001260
 8001c94:	240063d0 	.word	0x240063d0

08001c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <SystemInit+0xec>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <SystemInit+0xec>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <SystemInit+0xf0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	2b06      	cmp	r3, #6
 8001cb6:	d807      	bhi.n	8001cc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <SystemInit+0xf0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 030f 	bic.w	r3, r3, #15
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <SystemInit+0xf0>)
 8001cc2:	f043 0307 	orr.w	r3, r3, #7
 8001cc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <SystemInit+0xf4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <SystemInit+0xf4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <SystemInit+0xf4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <SystemInit+0xf4>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	492b      	ldr	r1, [pc, #172]	; (8001d8c <SystemInit+0xf4>)
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <SystemInit+0xf8>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <SystemInit+0xf0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <SystemInit+0xf0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 030f 	bic.w	r3, r3, #15
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <SystemInit+0xf0>)
 8001cfc:	f043 0307 	orr.w	r3, r3, #7
 8001d00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <SystemInit+0xf4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <SystemInit+0xf4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <SystemInit+0xf4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <SystemInit+0xf4>)
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <SystemInit+0xfc>)
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <SystemInit+0xf4>)
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <SystemInit+0x100>)
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <SystemInit+0xf4>)
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <SystemInit+0x104>)
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <SystemInit+0xf4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <SystemInit+0xf4>)
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <SystemInit+0x104>)
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <SystemInit+0xf4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <SystemInit+0xf4>)
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <SystemInit+0x104>)
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <SystemInit+0xf4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <SystemInit+0xf4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <SystemInit+0xf4>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <SystemInit+0xf4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <SystemInit+0x108>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <SystemInit+0x10c>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d62:	d202      	bcs.n	8001d6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <SystemInit+0x110>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <SystemInit+0x114>)
 8001d6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0xec>)
 8001d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	52002000 	.word	0x52002000
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d94:	02020200 	.word	0x02020200
 8001d98:	01ff0000 	.word	0x01ff0000
 8001d9c:	01010280 	.word	0x01010280
 8001da0:	5c001000 	.word	0x5c001000
 8001da4:	ffff0000 	.word	0xffff0000
 8001da8:	51008108 	.word	0x51008108
 8001dac:	52004000 	.word	0x52004000

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db4:	f7ff ff70 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f00b fd95 	bl	800d90c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff fac3 	bl	800136c <main>
  bx  lr
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001df0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001df4:	080117e4 	.word	0x080117e4
  ldr r2, =_sbss
 8001df8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001dfc:	240063cc 	.word	0x240063cc

08001e00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC3_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	f000 f98c 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e10:	f002 fb1c 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_Init+0x68>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	4913      	ldr	r1, [pc, #76]	; (8001e70 <HAL_Init+0x6c>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_Init+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_Init+0x6c>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_Init+0x70>)
 8001e46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e48:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_Init+0x74>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f000 f814 	bl	8001e7c <HAL_InitTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e002      	b.n	8001e64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fc6f 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	08010f54 	.word	0x08010f54
 8001e74:	24000004 	.word	0x24000004
 8001e78:	24000000 	.word	0x24000000

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_InitTick+0x60>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e021      	b.n	8001ed4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_InitTick+0x64>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_InitTick+0x60>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f971 	bl	800218e <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00e      	b.n	8001ed4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d80a      	bhi.n	8001ed2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f000 f93b 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_InitTick+0x68>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2400000c 	.word	0x2400000c
 8001ee0:	24000000 	.word	0x24000000
 8001ee4:	24000008 	.word	0x24000008

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2400000c 	.word	0x2400000c
 8001f0c:	24004348 	.word	0x24004348

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	24004348 	.word	0x24004348

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2400000c 	.word	0x2400000c

08001f70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetREVID+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0c1b      	lsrs	r3, r3, #16
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	5c001000 	.word	0x5c001000

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	05fa0000 	.word	0x05fa0000

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff40 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff90 	bl	800207c <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5f 	bl	8002028 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff33 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa4 	bl	80020e4 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b098      	sub	sp, #96	; 0x60
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80021b0:	4a99      	ldr	r2, [pc, #612]	; (8002418 <HAL_FDCAN_Init+0x270>)
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	4611      	mov	r1, r2
 80021b8:	224c      	movs	r2, #76	; 0x4c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00b fbca 	bl	800d954 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e23d      	b.n	8002646 <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a93      	ldr	r2, [pc, #588]	; (800241c <HAL_FDCAN_Init+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d106      	bne.n	80021e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d155      	bne.n	800229a <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a89      	ldr	r2, [pc, #548]	; (8002420 <HAL_FDCAN_Init+0x278>)
 80021fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a88      	ldr	r2, [pc, #544]	; (8002424 <HAL_FDCAN_Init+0x27c>)
 8002202:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a87      	ldr	r2, [pc, #540]	; (8002428 <HAL_FDCAN_Init+0x280>)
 800220a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a86      	ldr	r2, [pc, #536]	; (800242c <HAL_FDCAN_Init+0x284>)
 8002212:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a85      	ldr	r2, [pc, #532]	; (8002430 <HAL_FDCAN_Init+0x288>)
 800221a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a84      	ldr	r2, [pc, #528]	; (8002434 <HAL_FDCAN_Init+0x28c>)
 8002222:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a83      	ldr	r2, [pc, #524]	; (8002438 <HAL_FDCAN_Init+0x290>)
 800222a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a82      	ldr	r2, [pc, #520]	; (800243c <HAL_FDCAN_Init+0x294>)
 8002232:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a81      	ldr	r2, [pc, #516]	; (8002440 <HAL_FDCAN_Init+0x298>)
 800223a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a80      	ldr	r2, [pc, #512]	; (8002444 <HAL_FDCAN_Init+0x29c>)
 8002242:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a7f      	ldr	r2, [pc, #508]	; (8002448 <HAL_FDCAN_Init+0x2a0>)
 800224a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a7e      	ldr	r2, [pc, #504]	; (800244c <HAL_FDCAN_Init+0x2a4>)
 8002252:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a7d      	ldr	r2, [pc, #500]	; (8002450 <HAL_FDCAN_Init+0x2a8>)
 800225a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a7c      	ldr	r2, [pc, #496]	; (8002454 <HAL_FDCAN_Init+0x2ac>)
 8002262:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a7b      	ldr	r2, [pc, #492]	; (8002458 <HAL_FDCAN_Init+0x2b0>)
 800226a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_FDCAN_Init+0x2b4>)
 8002272:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a79      	ldr	r2, [pc, #484]	; (8002460 <HAL_FDCAN_Init+0x2b8>)
 800227a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a76      	ldr	r2, [pc, #472]	; (8002464 <HAL_FDCAN_Init+0x2bc>)
 800228c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0210 	bic.w	r2, r2, #16
 80022a8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022aa:	f7ff fe31 	bl	8001f10 <HAL_GetTick>
 80022ae:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022b0:	e014      	b.n	80022dc <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022b2:	f7ff fe2d 	bl	8001f10 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b0a      	cmp	r3, #10
 80022be:	d90d      	bls.n	80022dc <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e1b4      	b.n	8002646 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d0e3      	beq.n	80022b2 <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022fa:	f7ff fe09 	bl	8001f10 <HAL_GetTick>
 80022fe:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002300:	e014      	b.n	800232c <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002302:	f7ff fe05 	bl	8001f10 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d90d      	bls.n	800232c <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2203      	movs	r2, #3
 8002324:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e18c      	b.n	8002646 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0e3      	beq.n	8002302 <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0202 	orr.w	r2, r2, #2
 8002348:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7c1b      	ldrb	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002360:	619a      	str	r2, [r3, #24]
 8002362:	e007      	b.n	8002374 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002372:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7c5b      	ldrb	r3, [r3, #17]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d108      	bne.n	800238e <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800238a:	619a      	str	r2, [r3, #24]
 800238c:	e007      	b.n	800239e <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800239c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7c9b      	ldrb	r3, [r3, #18]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	e007      	b.n	80023c8 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023c6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80023ec:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0210 	bic.w	r2, r2, #16
 80023fc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d130      	bne.n	8002468 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699a      	ldr	r2, [r3, #24]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0204 	orr.w	r2, r2, #4
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	e054      	b.n	80024c2 <HAL_FDCAN_Init+0x31a>
 8002418:	08010ec0 	.word	0x08010ec0
 800241c:	4000a000 	.word	0x4000a000
 8002420:	08002fdd 	.word	0x08002fdd
 8002424:	08002ff3 	.word	0x08002ff3
 8002428:	08003009 	.word	0x08003009
 800242c:	0800301f 	.word	0x0800301f
 8002430:	08003035 	.word	0x08003035
 8002434:	08003049 	.word	0x08003049
 8002438:	0800305f 	.word	0x0800305f
 800243c:	08003075 	.word	0x08003075
 8002440:	080030b1 	.word	0x080030b1
 8002444:	08003089 	.word	0x08003089
 8002448:	0800309d 	.word	0x0800309d
 800244c:	080030c5 	.word	0x080030c5
 8002450:	080030d9 	.word	0x080030d9
 8002454:	080030ef 	.word	0x080030ef
 8002458:	08003105 	.word	0x08003105
 800245c:	0800311b 	.word	0x0800311b
 8002460:	08003133 	.word	0x08003133
 8002464:	08001775 	.word	0x08001775
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d028      	beq.n	80024c2 <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d01c      	beq.n	80024b2 <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002486:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0210 	orr.w	r2, r2, #16
 8002496:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d110      	bne.n	80024c2 <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	619a      	str	r2, [r3, #24]
 80024b0:	e007      	b.n	80024c2 <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0220 	orr.w	r2, r2, #32
 80024c0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024d2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80024da:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80024ea:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80024ec:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024f6:	d115      	bne.n	8002524 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	3b01      	subs	r3, #1
 8002504:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002506:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	3b01      	subs	r3, #1
 800250e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002510:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	3b01      	subs	r3, #1
 800251a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002520:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002522:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	4413      	add	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d012      	beq.n	8002576 <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002558:	f023 0107 	bic.w	r1, r3, #7
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002566:	4413      	add	r3, r2
 8002568:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002586:	f023 0107 	bic.w	r1, r3, #7
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002594:	4413      	add	r3, r2
 8002596:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80025b4:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025c2:	4413      	add	r3, r2
 80025c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80025c8:	011a      	lsls	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80025e4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025f2:	4413      	add	r3, r2
 80025f4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_FDCAN_Init+0x4a8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d107      	bne.n	800261e <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f022 0203 	bic.w	r2, r2, #3
 800261c:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fd86 	bl	8003148 <FDCAN_CalcultateRamBlockAddresses>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002642:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002646:	4618      	mov	r0, r3
 8002648:	3760      	adds	r7, #96	; 0x60
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	4000a000 	.word	0x4000a000

08002654 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800266e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e015      	b.n	80026a8 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d104      	bne.n	8002692 <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002690:	e009      	b.n	80026a6 <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d111      	bne.n	80026ec <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e008      	b.n	80026fe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800270c:	b480      	push	{r7}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002724:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8002726:	7efb      	ldrb	r3, [r7, #27]
 8002728:	2b02      	cmp	r3, #2
 800272a:	f040 814b 	bne.w	80029c4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d14d      	bne.n	80027d0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800273c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e13e      	b.n	80029d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800276e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e12c      	b.n	80029d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d10b      	bne.n	80027a6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002796:	0fdb      	lsrs	r3, r3, #31
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a0:	d101      	bne.n	80027a6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	4413      	add	r3, r2
 80027b8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e069      	b.n	80028a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b41      	cmp	r3, #65	; 0x41
 80027d4:	d14d      	bne.n	8002872 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0ed      	b.n	80029d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0db      	b.n	80029d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002826:	0e1b      	lsrs	r3, r3, #24
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10b      	bne.n	8002848 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002838:	0fdb      	lsrs	r3, r3, #31
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002842:	d101      	bne.n	8002848 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002844:	2301      	movs	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	69f9      	ldr	r1, [r7, #28]
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	e018      	b.n	80028a4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d309      	bcc.n	8002890 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0a2      	b.n	80029d6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0c9b      	lsrs	r3, r3, #18
 80028be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e005      	b.n	80028d4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	3304      	adds	r3, #4
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e1b      	lsrs	r3, r3, #24
 8002926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0fda      	lsrs	r2, r3, #31
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	3304      	adds	r3, #4
 800293c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	e00a      	b.n	800295e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	441a      	add	r2, r3
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	440b      	add	r3, r1
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	3301      	adds	r3, #1
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	461a      	mov	r2, r3
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	4293      	cmp	r3, r2
 800296e:	d3eb      	bcc.n	8002948 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d105      	bne.n	8002982 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002980:	e01e      	b.n	80029c0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b41      	cmp	r3, #65	; 0x41
 8002986:	d105      	bne.n	8002994 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002992:	e015      	b.n	80029c0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b1f      	cmp	r3, #31
 8002998:	d808      	bhi.n	80029ac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2101      	movs	r1, #1
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80029aa:	e009      	b.n	80029c0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2101      	movs	r1, #1
 80029b8:	fa01 f202 	lsl.w	r2, r1, r2
 80029bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e008      	b.n	80029d6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	372c      	adds	r7, #44	; 0x2c
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	08010f64 	.word	0x08010f64

080029e8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80029fa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d002      	beq.n	8002a08 <HAL_FDCAN_ActivateNotification+0x20>
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d155      	bne.n	8002ab4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a26:	e014      	b.n	8002a52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d108      	bne.n	8002a4a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0202 	orr.w	r2, r2, #2
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a48:	e003      	b.n	8002a52 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_FDCAN_ActivateNotification+0xec>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6553      	str	r3, [r2, #84]	; 0x54
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0f9b      	lsrs	r3, r3, #30
 8002aaa:	490b      	ldr	r1, [pc, #44]	; (8002ad8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e008      	b.n	8002ac6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	3fcfffff 	.word	0x3fcfffff
 8002ad8:	4000a800 	.word	0x4000a800

08002adc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b092      	sub	sp, #72	; 0x48
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002ae4:	4b98      	ldr	r3, [pc, #608]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	079b      	lsls	r3, r3, #30
 8002aea:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002aec:	4b96      	ldr	r3, [pc, #600]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	079b      	lsls	r3, r3, #30
 8002af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002af4:	4013      	ands	r3, r2
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b02:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b24:	4013      	ands	r3, r2
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b54:	4013      	ands	r3, r2
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	651a      	str	r2, [r3, #80]	; 0x50
 8002b96:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be2:	651a      	str	r2, [r3, #80]	; 0x50
 8002be4:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00f      	beq.n	8002c1c <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c02:	4b52      	ldr	r3, [pc, #328]	; (8002d4c <HAL_FDCAN_IRQHandler+0x270>)
 8002c04:	400b      	ands	r3, r1
 8002c06:	6513      	str	r3, [r2, #80]	; 0x50
 8002c08:	4a4f      	ldr	r2, [pc, #316]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0c:	0f9b      	lsrs	r3, r3, #30
 8002c0e:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00f      	beq.n	8002c42 <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_FDCAN_IRQHandler+0x270>)
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	6513      	str	r3, [r2, #80]	; 0x50
 8002c2e:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c32:	0f9b      	lsrs	r3, r3, #30
 8002c34:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00f      	beq.n	8002c68 <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_FDCAN_IRQHandler+0x270>)
 8002c50:	400b      	ands	r3, r1
 8002c52:	6513      	str	r3, [r2, #80]	; 0x50
 8002c54:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	0f9b      	lsrs	r3, r3, #30
 8002c5a:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00f      	beq.n	8002c8e <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c74:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <HAL_FDCAN_IRQHandler+0x270>)
 8002c76:	400b      	ands	r3, r1
 8002c78:	6513      	str	r3, [r2, #80]	; 0x50
 8002c7a:	4a33      	ldr	r2, [pc, #204]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	0f9b      	lsrs	r3, r3, #30
 8002c80:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb2:	651a      	str	r2, [r3, #80]	; 0x50
 8002cb4:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d020      	beq.n	8002d14 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d019      	beq.n	8002d14 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d011      	beq.n	8002d54 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d38:	651a      	str	r2, [r3, #80]	; 0x50
 8002d3a:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_FDCAN_IRQHandler+0x26c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d46:	e003      	b.n	8002d50 <HAL_FDCAN_IRQHandler+0x274>
 8002d48:	4000a800 	.word	0x4000a800
 8002d4c:	3fcfffff 	.word	0x3fcfffff
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d013      	beq.n	8002d8a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00c      	beq.n	8002d8a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d78:	651a      	str	r2, [r3, #80]	; 0x50
 8002d7a:	4b95      	ldr	r3, [pc, #596]	; (8002fd0 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002dae:	651a      	str	r2, [r3, #80]	; 0x50
 8002db0:	4b87      	ldr	r3, [pc, #540]	; (8002fd0 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00f      	beq.n	8002dfc <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002de4:	651a      	str	r2, [r3, #80]	; 0x50
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e08:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_FDCAN_IRQHandler+0x4f8>)
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6513      	str	r3, [r2, #80]	; 0x50
 8002e0e:	4a70      	ldr	r2, [pc, #448]	; (8002fd0 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	0f9b      	lsrs	r3, r3, #30
 8002e14:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e2e:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <HAL_FDCAN_IRQHandler+0x4f8>)
 8002e30:	400b      	ands	r3, r1
 8002e32:	6513      	str	r3, [r2, #80]	; 0x50
 8002e34:	4a66      	ldr	r2, [pc, #408]	; (8002fd0 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	0f9b      	lsrs	r3, r3, #30
 8002e3a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a61      	ldr	r2, [pc, #388]	; (8002fd8 <HAL_FDCAN_IRQHandler+0x4fc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f040 80ae 	bne.w	8002fb4 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80a6 	beq.w	8002fb4 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e8a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	4013      	ands	r3, r2
 8002e96:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002ea2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002eba:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002ed2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4013      	ands	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f0e:	6a39      	ldr	r1, [r7, #32]
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01d      	beq.n	8002f5e <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f46:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6939      	ldr	r1, [r7, #16]
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	69f9      	ldr	r1, [r7, #28]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3748      	adds	r7, #72	; 0x48
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	4000a800 	.word	0x4000a800
 8002fd4:	3fcfffff 	.word	0x3fcfffff
 8002fd8:	4000a000 	.word	0x4000a000

08002fdc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800315e:	4ba7      	ldr	r3, [pc, #668]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003160:	4013      	ands	r3, r2
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	0091      	lsls	r1, r2, #2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	430b      	orrs	r3, r1
 800316c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003178:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4413      	add	r3, r2
 8003194:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800319e:	4b97      	ldr	r3, [pc, #604]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	0091      	lsls	r1, r2, #2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80031e0:	4b86      	ldr	r3, [pc, #536]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	0091      	lsls	r1, r2, #2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031fa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	041a      	lsls	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	4413      	add	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003228:	4b74      	ldr	r3, [pc, #464]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800322a:	4013      	ands	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	0091      	lsls	r1, r2, #2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003242:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	041a      	lsls	r2, r3, #16
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4413      	add	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003270:	4b62      	ldr	r3, [pc, #392]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003272:	4013      	ands	r3, r2
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	0091      	lsls	r1, r2, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4413      	add	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800329c:	4b57      	ldr	r3, [pc, #348]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	0091      	lsls	r1, r2, #2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032b6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	041a      	lsls	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4413      	add	r3, r2
 80032d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	0091      	lsls	r1, r2, #2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	430b      	orrs	r3, r1
 80032ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032f8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003314:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	061a      	lsls	r2, r3, #24
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800332e:	4413      	add	r3, r2
 8003330:	009a      	lsls	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	4a04      	ldr	r2, [pc, #16]	; (8003404 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d915      	bls.n	8003424 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80033f8:	e006      	b.n	8003408 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80033fa:	bf00      	nop
 80033fc:	ffff0003 	.word	0xffff0003
 8003400:	10002b00 	.word	0x10002b00
 8003404:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2203      	movs	r2, #3
 800341c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e010      	b.n	8003446 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e005      	b.n	8003438 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3304      	adds	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d3f3      	bcc.n	800342c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003462:	4b89      	ldr	r3, [pc, #548]	; (8003688 <HAL_GPIO_Init+0x234>)
 8003464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003466:	e194      	b.n	8003792 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8186 	beq.w	800378c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00b      	beq.n	80034a0 <HAL_GPIO_Init+0x4c>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d007      	beq.n	80034a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003494:	2b11      	cmp	r3, #17
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b12      	cmp	r3, #18
 800349e:	d130      	bne.n	8003502 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d6:	2201      	movs	r2, #1
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	f003 0201 	and.w	r2, r3, #1
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0xee>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b12      	cmp	r3, #18
 8003540:	d123      	bne.n	800358a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	08da      	lsrs	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3208      	adds	r2, #8
 800354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	220f      	movs	r2, #15
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	2203      	movs	r2, #3
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0203 	and.w	r2, r3, #3
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80e0 	beq.w	800378c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035cc:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_GPIO_Init+0x238>)
 80035ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035d2:	4a2e      	ldr	r2, [pc, #184]	; (800368c <HAL_GPIO_Init+0x238>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_GPIO_Init+0x238>)
 80035de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ea:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_GPIO_Init+0x23c>)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a20      	ldr	r2, [pc, #128]	; (8003694 <HAL_GPIO_Init+0x240>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d052      	beq.n	80036bc <HAL_GPIO_Init+0x268>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <HAL_GPIO_Init+0x244>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d031      	beq.n	8003682 <HAL_GPIO_Init+0x22e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_GPIO_Init+0x248>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d02b      	beq.n	800367e <HAL_GPIO_Init+0x22a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_GPIO_Init+0x24c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d025      	beq.n	800367a <HAL_GPIO_Init+0x226>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_GPIO_Init+0x250>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <HAL_GPIO_Init+0x222>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_GPIO_Init+0x254>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d019      	beq.n	8003672 <HAL_GPIO_Init+0x21e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_GPIO_Init+0x258>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_GPIO_Init+0x21a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_GPIO_Init+0x25c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00d      	beq.n	800366a <HAL_GPIO_Init+0x216>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_GPIO_Init+0x260>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <HAL_GPIO_Init+0x212>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_GPIO_Init+0x264>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_GPIO_Init+0x20e>
 800365e:	2309      	movs	r3, #9
 8003660:	e02d      	b.n	80036be <HAL_GPIO_Init+0x26a>
 8003662:	230a      	movs	r3, #10
 8003664:	e02b      	b.n	80036be <HAL_GPIO_Init+0x26a>
 8003666:	2308      	movs	r3, #8
 8003668:	e029      	b.n	80036be <HAL_GPIO_Init+0x26a>
 800366a:	2307      	movs	r3, #7
 800366c:	e027      	b.n	80036be <HAL_GPIO_Init+0x26a>
 800366e:	2306      	movs	r3, #6
 8003670:	e025      	b.n	80036be <HAL_GPIO_Init+0x26a>
 8003672:	2305      	movs	r3, #5
 8003674:	e023      	b.n	80036be <HAL_GPIO_Init+0x26a>
 8003676:	2304      	movs	r3, #4
 8003678:	e021      	b.n	80036be <HAL_GPIO_Init+0x26a>
 800367a:	2303      	movs	r3, #3
 800367c:	e01f      	b.n	80036be <HAL_GPIO_Init+0x26a>
 800367e:	2302      	movs	r3, #2
 8003680:	e01d      	b.n	80036be <HAL_GPIO_Init+0x26a>
 8003682:	2301      	movs	r3, #1
 8003684:	e01b      	b.n	80036be <HAL_GPIO_Init+0x26a>
 8003686:	bf00      	nop
 8003688:	58000080 	.word	0x58000080
 800368c:	58024400 	.word	0x58024400
 8003690:	58000400 	.word	0x58000400
 8003694:	58020000 	.word	0x58020000
 8003698:	58020400 	.word	0x58020400
 800369c:	58020800 	.word	0x58020800
 80036a0:	58020c00 	.word	0x58020c00
 80036a4:	58021000 	.word	0x58021000
 80036a8:	58021400 	.word	0x58021400
 80036ac:	58021800 	.word	0x58021800
 80036b0:	58021c00 	.word	0x58021c00
 80036b4:	58022000 	.word	0x58022000
 80036b8:	58022400 	.word	0x58022400
 80036bc:	2300      	movs	r3, #0
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	f002 0203 	and.w	r2, r2, #3
 80036c4:	0092      	lsls	r2, r2, #2
 80036c6:	4093      	lsls	r3, r2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ce:	4938      	ldr	r1, [pc, #224]	; (80037b0 <HAL_GPIO_Init+0x35c>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3301      	adds	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f47f ae63 	bne.w	8003468 <HAL_GPIO_Init+0x14>
  }
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	3724      	adds	r7, #36	; 0x24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	58000400 	.word	0x58000400

080037b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e001      	b.n	80037d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003800:	e003      	b.n	800380a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	041a      	lsls	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003828:	887a      	ldrh	r2, [r7, #2]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	041a      	lsls	r2, r3, #16
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	43d9      	mvns	r1, r3
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	400b      	ands	r3, r1
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_PWREx_ConfigSupply+0x70>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00a      	beq.n	8003876 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <HAL_PWREx_ConfigSupply+0x70>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d001      	beq.n	8003872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e01f      	b.n	80038b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e01d      	b.n	80038b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <HAL_PWREx_ConfigSupply+0x70>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 0207 	bic.w	r2, r3, #7
 800387e:	490f      	ldr	r1, [pc, #60]	; (80038bc <HAL_PWREx_ConfigSupply+0x70>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003886:	f7fe fb43 	bl	8001f10 <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800388c:	e009      	b.n	80038a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800388e:	f7fe fb3f 	bl	8001f10 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800389c:	d901      	bls.n	80038a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e007      	b.n	80038b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_PWREx_ConfigSupply+0x70>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	d1ee      	bne.n	800388e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	58024800 	.word	0x58024800

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e3ff      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8087 	beq.w	80039ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e0:	4b99      	ldr	r3, [pc, #612]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d007      	beq.n	8003906 <HAL_RCC_OscConfig+0x46>
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	2b18      	cmp	r3, #24
 80038fa:	d110      	bne.n	800391e <HAL_RCC_OscConfig+0x5e>
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d10b      	bne.n	800391e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003906:	4b90      	ldr	r3, [pc, #576]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d06c      	beq.n	80039ec <HAL_RCC_OscConfig+0x12c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d168      	bne.n	80039ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e3d9      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x76>
 8003928:	4b87      	ldr	r3, [pc, #540]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a86      	ldr	r2, [pc, #536]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	e02e      	b.n	8003994 <HAL_RCC_OscConfig+0xd4>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x98>
 800393e:	4b82      	ldr	r3, [pc, #520]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a81      	ldr	r2, [pc, #516]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b7f      	ldr	r3, [pc, #508]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7e      	ldr	r2, [pc, #504]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e01d      	b.n	8003994 <HAL_RCC_OscConfig+0xd4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0xbc>
 8003962:	4b79      	ldr	r3, [pc, #484]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a78      	ldr	r2, [pc, #480]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a75      	ldr	r2, [pc, #468]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e00b      	b.n	8003994 <HAL_RCC_OscConfig+0xd4>
 800397c:	4b72      	ldr	r3, [pc, #456]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a71      	ldr	r2, [pc, #452]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b6f      	ldr	r3, [pc, #444]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 800398e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fab8 	bl	8001f10 <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fab4 	bl	8001f10 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e38d      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b6:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe4>
 80039c2:	e014      	b.n	80039ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe faa4 	bl	8001f10 <HAL_GetTick>
 80039c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe faa0 	bl	8001f10 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e379      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039de:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x10c>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80ae 	beq.w	8003b58 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fc:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a06:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_RCC_OscConfig+0x162>
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2b18      	cmp	r3, #24
 8003a16:	d13a      	bne.n	8003a8e <HAL_RCC_OscConfig+0x1ce>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d135      	bne.n	8003a8e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a22:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_RCC_OscConfig+0x17a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e34b      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3a:	f7fe fa99 	bl	8001f70 <HAL_GetREVID>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d817      	bhi.n	8003a78 <HAL_RCC_OscConfig+0x1b8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d108      	bne.n	8003a62 <HAL_RCC_OscConfig+0x1a2>
 8003a50:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a58:	4a3b      	ldr	r2, [pc, #236]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a60:	e07a      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	031b      	lsls	r3, r3, #12
 8003a70:	4935      	ldr	r1, [pc, #212]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a76:	e06f      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	4930      	ldr	r1, [pc, #192]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a8c:	e064      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d045      	beq.n	8003b22 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a96:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0219 	bic.w	r2, r3, #25
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	4929      	ldr	r1, [pc, #164]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fa32 	bl	8001f10 <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fa2e 	bl	8001f10 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e307      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	f7fe fa4f 	bl	8001f70 <HAL_GetREVID>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d817      	bhi.n	8003b0c <HAL_RCC_OscConfig+0x24c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d108      	bne.n	8003af6 <HAL_RCC_OscConfig+0x236>
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003aec:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af2:	6053      	str	r3, [r2, #4]
 8003af4:	e030      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	031b      	lsls	r3, r3, #12
 8003b04:	4910      	ldr	r1, [pc, #64]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
 8003b0a:	e025      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	490b      	ldr	r1, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
 8003b20:	e01a      	b.n	8003b58 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <HAL_RCC_OscConfig+0x288>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2e:	f7fe f9ef 	bl	8001f10 <HAL_GetTick>
 8003b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe f9eb 	bl	8001f10 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d903      	bls.n	8003b4c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e2c4      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
 8003b48:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b4c:	4ba4      	ldr	r3, [pc, #656]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ee      	bne.n	8003b36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a9 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b66:	4b9e      	ldr	r3, [pc, #632]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b70:	4b9b      	ldr	r3, [pc, #620]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d007      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2cc>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b18      	cmp	r3, #24
 8003b80:	d13a      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x338>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d135      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b8c:	4b94      	ldr	r3, [pc, #592]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2e4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e296      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba4:	f7fe f9e4 	bl	8001f70 <HAL_GetREVID>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d817      	bhi.n	8003be2 <HAL_RCC_OscConfig+0x322>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d108      	bne.n	8003bcc <HAL_RCC_OscConfig+0x30c>
 8003bba:	4b89      	ldr	r3, [pc, #548]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bc2:	4a87      	ldr	r2, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bca:	e075      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	069b      	lsls	r3, r3, #26
 8003bda:	4981      	ldr	r1, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be0:	e06a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be2:	4b7f      	ldr	r3, [pc, #508]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	497b      	ldr	r1, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bf6:	e05f      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d042      	beq.n	8003c86 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c00:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a76      	ldr	r2, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f980 	bl	8001f10 <HAL_GetTick>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c14:	f7fe f97c 	bl	8001f10 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e255      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c26:	4b6e      	ldr	r3, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c32:	f7fe f99d 	bl	8001f70 <HAL_GetREVID>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d817      	bhi.n	8003c70 <HAL_RCC_OscConfig+0x3b0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d108      	bne.n	8003c5a <HAL_RCC_OscConfig+0x39a>
 8003c48:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c50:	4a63      	ldr	r2, [pc, #396]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c56:	6053      	str	r3, [r2, #4]
 8003c58:	e02e      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3f8>
 8003c5a:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	069b      	lsls	r3, r3, #26
 8003c68:	495d      	ldr	r1, [pc, #372]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
 8003c6e:	e023      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3f8>
 8003c70:	4b5b      	ldr	r3, [pc, #364]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	4958      	ldr	r1, [pc, #352]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60cb      	str	r3, [r1, #12]
 8003c84:	e018      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a55      	ldr	r2, [pc, #340]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fe f93d 	bl	8001f10 <HAL_GetTick>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c9a:	f7fe f939 	bl	8001f10 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e212      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cac:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f0      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d036      	beq.n	8003d32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d019      	beq.n	8003d00 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ccc:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	4a43      	ldr	r2, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fe f91a 	bl	8001f10 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fe f916 	bl	8001f10 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1ef      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cf2:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x420>
 8003cfe:	e018      	b.n	8003d32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d00:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d04:	4a36      	ldr	r2, [pc, #216]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe f900 	bl	8001f10 <HAL_GetTick>
 8003d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fe f8fc 	bl	8001f10 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1d5      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d036      	beq.n	8003dac <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d019      	beq.n	8003d7a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d52:	f7fe f8dd 	bl	8001f10 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d5a:	f7fe f8d9 	bl	8001f10 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1b2      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d6c:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x49a>
 8003d78:	e018      	b.n	8003dac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d7a:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d86:	f7fe f8c3 	bl	8001f10 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d8e:	f7fe f8bf 	bl	8001f10 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e198      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_RCC_OscConfig+0x520>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8085 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_RCC_OscConfig+0x524>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_RCC_OscConfig+0x524>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc6:	f7fe f8a3 	bl	8001f10 <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dcc:	e00c      	b.n	8003de8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dce:	f7fe f89f 	bl	8001f10 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d905      	bls.n	8003de8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e178      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de8:	4b96      	ldr	r3, [pc, #600]	; (8004044 <HAL_RCC_OscConfig+0x784>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ec      	beq.n	8003dce <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x54a>
 8003dfc:	4b92      	ldr	r3, [pc, #584]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a91      	ldr	r2, [pc, #580]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e02d      	b.n	8003e66 <HAL_RCC_OscConfig+0x5a6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x56c>
 8003e12:	4b8d      	ldr	r3, [pc, #564]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a8c      	ldr	r2, [pc, #560]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b8a      	ldr	r3, [pc, #552]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a89      	ldr	r2, [pc, #548]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x5a6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x58e>
 8003e34:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a83      	ldr	r2, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x5a6>
 8003e4e:	4b7e      	ldr	r3, [pc, #504]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a7d      	ldr	r2, [pc, #500]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a7a      	ldr	r2, [pc, #488]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fe f84f 	bl	8001f10 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fe f84b 	bl	8001f10 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e122      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8c:	4b6e      	ldr	r3, [pc, #440]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x5b6>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fe f839 	bl	8001f10 <HAL_GetTick>
 8003e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe f835 	bl	8001f10 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e10c      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb8:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8101 	beq.w	80040d0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ece:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed6:	2b18      	cmp	r3, #24
 8003ed8:	f000 80bc 	beq.w	8004054 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	f040 8095 	bne.w	8004010 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b58      	ldr	r3, [pc, #352]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fe f80d 	bl	8001f10 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe f809 	bl	8001f10 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0e2      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f0c:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f18:	4b4b      	ldr	r3, [pc, #300]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <HAL_RCC_OscConfig+0x78c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	4946      	ldr	r1, [pc, #280]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	628b      	str	r3, [r1, #40]	; 0x28
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	3b01      	subs	r3, #1
 8003f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	3b01      	subs	r3, #1
 8003f42:	025b      	lsls	r3, r3, #9
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f62:	4939      	ldr	r1, [pc, #228]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	4a36      	ldr	r2, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f74:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <HAL_RCC_OscConfig+0x790>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f80:	00d2      	lsls	r2, r2, #3
 8003f82:	4931      	ldr	r1, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f88:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f023 020c 	bic.w	r2, r3, #12
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	492c      	ldr	r1, [pc, #176]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f023 0202 	bic.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4928      	ldr	r1, [pc, #160]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fac:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	4a25      	ldr	r2, [pc, #148]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb8:	4b23      	ldr	r3, [pc, #140]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd ff92 	bl	8001f10 <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd ff8e 	bl	8001f10 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e067      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x730>
 800400e:	e05f      	b.n	80040d0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8004016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd ff78 	bl	8001f10 <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd ff74 	bl	8001f10 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e04d      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <HAL_RCC_OscConfig+0x788>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x764>
 8004042:	e045      	b.n	80040d0 <HAL_RCC_OscConfig+0x810>
 8004044:	58024800 	.word	0x58024800
 8004048:	58024400 	.word	0x58024400
 800404c:	fffffc0c 	.word	0xfffffc0c
 8004050:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <HAL_RCC_OscConfig+0x81c>)
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_RCC_OscConfig+0x81c>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	d031      	beq.n	80040cc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0203 	and.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d12a      	bne.n	80040cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d122      	bne.n	80040cc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d11a      	bne.n	80040cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	0a5b      	lsrs	r3, r3, #9
 800409a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d111      	bne.n	80040cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d108      	bne.n	80040cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0e1b      	lsrs	r3, r3, #24
 80040be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3730      	adds	r7, #48	; 0x30
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	58024400 	.word	0x58024400

080040e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e19c      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b8a      	ldr	r3, [pc, #552]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d910      	bls.n	8004124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b87      	ldr	r3, [pc, #540]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 020f 	bic.w	r2, r3, #15
 800410a:	4985      	ldr	r1, [pc, #532]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b83      	ldr	r3, [pc, #524]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e184      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	4b7b      	ldr	r3, [pc, #492]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004140:	4b78      	ldr	r3, [pc, #480]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4975      	ldr	r1, [pc, #468]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800414e:	4313      	orrs	r3, r2
 8004150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	4b70      	ldr	r3, [pc, #448]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800416a:	429a      	cmp	r2, r3
 800416c:	d908      	bls.n	8004180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800416e:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	496a      	ldr	r1, [pc, #424]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800417c:	4313      	orrs	r3, r2
 800417e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	4b64      	ldr	r3, [pc, #400]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	495e      	ldr	r1, [pc, #376]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	4b59      	ldr	r3, [pc, #356]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d908      	bls.n	80041dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4953      	ldr	r1, [pc, #332]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d908      	bls.n	800420a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4947      	ldr	r1, [pc, #284]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004206:	4313      	orrs	r3, r2
 8004208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d055      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004216:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4940      	ldr	r1, [pc, #256]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004224:	4313      	orrs	r3, r2
 8004226:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d107      	bne.n	8004240 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004230:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d121      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0f6      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d115      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0ea      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004260:	4b30      	ldr	r3, [pc, #192]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0de      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d6      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004280:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 0207 	bic.w	r2, r3, #7
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4925      	ldr	r1, [pc, #148]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fd fe3d 	bl	8001f10 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fd fe39 	bl	8001f10 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0be      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1eb      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	429a      	cmp	r2, r3
 80042dc:	d208      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042de:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f023 020f 	bic.w	r2, r3, #15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	490e      	ldr	r1, [pc, #56]	; (8004324 <HAL_RCC_ClockConfig+0x244>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d214      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 020f 	bic.w	r2, r3, #15
 8004306:	4906      	ldr	r1, [pc, #24]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_ClockConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e086      	b.n	800442e <HAL_RCC_ClockConfig+0x34e>
 8004320:	52002000 	.word	0x52002000
 8004324:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004344:	4b3c      	ldr	r3, [pc, #240]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4939      	ldr	r1, [pc, #228]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	4b34      	ldr	r3, [pc, #208]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436e:	429a      	cmp	r2, r3
 8004370:	d208      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	492e      	ldr	r1, [pc, #184]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004380:	4313      	orrs	r3, r2
 8004382:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800439c:	429a      	cmp	r2, r3
 800439e:	d208      	bcs.n	80043b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	4922      	ldr	r1, [pc, #136]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d208      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4917      	ldr	r1, [pc, #92]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043e0:	f000 f834 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	4912      	ldr	r1, [pc, #72]	; (800443c <HAL_RCC_ClockConfig+0x35c>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
 80043fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCC_ClockConfig+0x358>)
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	4a0d      	ldr	r2, [pc, #52]	; (800443c <HAL_RCC_ClockConfig+0x35c>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x360>)
 8004416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x364>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_RCC_ClockConfig+0x368>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fd2a 	bl	8001e7c <HAL_InitTick>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	58024400 	.word	0x58024400
 800443c:	08010f54 	.word	0x08010f54
 8004440:	24000004 	.word	0x24000004
 8004444:	24000000 	.word	0x24000000
 8004448:	24000008 	.word	0x24000008

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004452:	4bb3      	ldr	r3, [pc, #716]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800445a:	2b18      	cmp	r3, #24
 800445c:	f200 8155 	bhi.w	800470a <HAL_RCC_GetSysClockFreq+0x2be>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	080044cd 	.word	0x080044cd
 800446c:	0800470b 	.word	0x0800470b
 8004470:	0800470b 	.word	0x0800470b
 8004474:	0800470b 	.word	0x0800470b
 8004478:	0800470b 	.word	0x0800470b
 800447c:	0800470b 	.word	0x0800470b
 8004480:	0800470b 	.word	0x0800470b
 8004484:	0800470b 	.word	0x0800470b
 8004488:	080044f3 	.word	0x080044f3
 800448c:	0800470b 	.word	0x0800470b
 8004490:	0800470b 	.word	0x0800470b
 8004494:	0800470b 	.word	0x0800470b
 8004498:	0800470b 	.word	0x0800470b
 800449c:	0800470b 	.word	0x0800470b
 80044a0:	0800470b 	.word	0x0800470b
 80044a4:	0800470b 	.word	0x0800470b
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	0800470b 	.word	0x0800470b
 80044b0:	0800470b 	.word	0x0800470b
 80044b4:	0800470b 	.word	0x0800470b
 80044b8:	0800470b 	.word	0x0800470b
 80044bc:	0800470b 	.word	0x0800470b
 80044c0:	0800470b 	.word	0x0800470b
 80044c4:	0800470b 	.word	0x0800470b
 80044c8:	080044ff 	.word	0x080044ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044cc:	4b94      	ldr	r3, [pc, #592]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d8:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4a90      	ldr	r2, [pc, #576]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80044ea:	e111      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044ec:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044ee:	61bb      	str	r3, [r7, #24]
    break;
 80044f0:	e10e      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044f2:	4b8d      	ldr	r3, [pc, #564]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f4:	61bb      	str	r3, [r7, #24]
    break;
 80044f6:	e10b      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044f8:	4b8c      	ldr	r3, [pc, #560]	; (800472c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044fa:	61bb      	str	r3, [r7, #24]
    break;
 80044fc:	e108      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fe:	4b88      	ldr	r3, [pc, #544]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004508:	4b85      	ldr	r3, [pc, #532]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004512:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004514:	4b82      	ldr	r3, [pc, #520]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800451e:	4b80      	ldr	r3, [pc, #512]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80e1 	beq.w	8004704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b02      	cmp	r3, #2
 8004546:	f000 8083 	beq.w	8004650 <HAL_RCC_GetSysClockFreq+0x204>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b02      	cmp	r3, #2
 800454e:	f200 80a1 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x248>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x114>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d056      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x1c0>
 800455e:	e099      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004560:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d02d      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800456c:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	4a6b      	ldr	r2, [pc, #428]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b62      	ldr	r3, [pc, #392]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045c6:	e087      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b51      	ldr	r3, [pc, #324]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460a:	e065      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b40      	ldr	r3, [pc, #256]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464e:	e043      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800473c <HAL_RCC_GetSysClockFreq+0x2f0>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a02 	vldr	s12, [r7, #8]
 8004676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004692:	e021      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e2:	3301      	adds	r3, #1
 80046e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fc:	ee17 3a90 	vmov	r3, s15
 8004700:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004702:	e005      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
    break;
 8004708:	e002      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800470c:	61bb      	str	r3, [r7, #24]
    break;
 800470e:	bf00      	nop
  }

  return sysclockfreq;
 8004710:	69bb      	ldr	r3, [r7, #24]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3724      	adds	r7, #36	; 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
 8004724:	03d09000 	.word	0x03d09000
 8004728:	003d0900 	.word	0x003d0900
 800472c:	007a1200 	.word	0x007a1200
 8004730:	46000000 	.word	0x46000000
 8004734:	4c742400 	.word	0x4c742400
 8004738:	4a742400 	.word	0x4a742400
 800473c:	4af42400 	.word	0x4af42400

08004740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004746:	f7ff fe81 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCC_GetHCLKFreq+0x50>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490f      	ldr	r1, [pc, #60]	; (8004794 <HAL_RCC_GetHCLKFreq+0x54>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <HAL_RCC_GetHCLKFreq+0x50>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_RCC_GetHCLKFreq+0x54>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_RCC_GetHCLKFreq+0x58>)
 800477c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_GetHCLKFreq+0x58>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	58024400 	.word	0x58024400
 8004794:	08010f54 	.word	0x08010f54
 8004798:	24000004 	.word	0x24000004
 800479c:	24000000 	.word	0x24000000

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a4:	f7ff ffcc 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4904      	ldr	r1, [pc, #16]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58024400 	.word	0x58024400
 80047c8:	08010f54 	.word	0x08010f54

080047cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047d0:	f7ff ffb6 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	58024400 	.word	0x58024400
 80047f4:	08010f54 	.word	0x08010f54

080047f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004800:	2300      	movs	r3, #0
 8004802:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004804:	2300      	movs	r3, #0
 8004806:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d03f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800481c:	d02a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800481e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004822:	d824      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004828:	d018      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800482a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800482e:	d81e      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004838:	d007      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800483a:	e018      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4bab      	ldr	r3, [pc, #684]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4aaa      	ldr	r2, [pc, #680]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004848:	e015      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	2102      	movs	r1, #2
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fff3 	bl	800683c <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800485a:	e00c      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3324      	adds	r3, #36	; 0x24
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f002 f89c 	bl	80069a0 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	75fb      	strb	r3, [r7, #23]
      break;
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800487c:	4b9b      	ldr	r3, [pc, #620]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004888:	4998      	ldr	r1, [pc, #608]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	650b      	str	r3, [r1, #80]	; 0x50
 800488e:	e001      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d03d      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d826      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c5 	.word	0x080048c5
 80048b4:	080048d3 	.word	0x080048d3
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048fd 	.word	0x080048fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b89      	ldr	r3, [pc, #548]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a88      	ldr	r2, [pc, #544]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048d0:	e015      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 ffaf 	bl	800683c <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048e2:	e00c      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f002 f858 	bl	80069a0 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048f4:	e003      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
      break;
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80048fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004904:	4b79      	ldr	r3, [pc, #484]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	f023 0207 	bic.w	r2, r3, #7
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	4976      	ldr	r1, [pc, #472]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	650b      	str	r3, [r1, #80]	; 0x50
 8004916:	e001      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004924:	2b00      	cmp	r3, #0
 8004926:	d042      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004930:	d02b      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004936:	d825      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004938:	2bc0      	cmp	r3, #192	; 0xc0
 800493a:	d028      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800493c:	2bc0      	cmp	r3, #192	; 0xc0
 800493e:	d821      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d016      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	d81d      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d007      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004950:	e018      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004952:	4b66      	ldr	r3, [pc, #408]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a65      	ldr	r2, [pc, #404]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800495e:	e017      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 ff68 	bl	800683c <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004970:	e00e      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f002 f811 	bl	80069a0 <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004982:	e005      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
      break;
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800498e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004996:	4b55      	ldr	r3, [pc, #340]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	4952      	ldr	r1, [pc, #328]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	650b      	str	r3, [r1, #80]	; 0x50
 80049a8:	e001      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d049      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c4:	d030      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80049c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ca:	d82a      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049d0:	d02c      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80049d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049d6:	d824      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049dc:	d018      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e2:	d81e      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80049e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ec:	d007      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80049ee:	e018      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f0:	4b3e      	ldr	r3, [pc, #248]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	4a3d      	ldr	r2, [pc, #244]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049fc:	e017      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 ff19 	bl	800683c <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a0e:	e00e      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3324      	adds	r3, #36	; 0x24
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 ffc2 	bl	80069a0 <RCCEx_PLL3_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a20:	e005      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
      break;
 8004a26:	e002      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a34:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a42:	492a      	ldr	r1, [pc, #168]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	658b      	str	r3, [r1, #88]	; 0x58
 8004a48:	e001      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d04c      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a64:	d030      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a6a:	d82a      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a70:	d02c      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a76:	d824      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7c:	d018      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a82:	d81e      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a8c:	d007      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a8e:	e018      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a9c:	e017      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fec9 	bl	800683c <RCCEx_PLL2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004aae:	e00e      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3324      	adds	r3, #36	; 0x24
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 ff72 	bl	80069a0 <RCCEx_PLL3_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ac0:	e005      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10d      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ae2:	4902      	ldr	r1, [pc, #8]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ae8:	e004      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004aea:	bf00      	nop
 8004aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d032      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b04:	2b30      	cmp	r3, #48	; 0x30
 8004b06:	d01c      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b08:	2b30      	cmp	r3, #48	; 0x30
 8004b0a:	d817      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d00c      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d813      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d016      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d10f      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4baf      	ldr	r3, [pc, #700]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4aae      	ldr	r2, [pc, #696]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b28:	e00e      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 fe83 	bl	800683c <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b3a:	e005      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	e002      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b4e:	4ba3      	ldr	r3, [pc, #652]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	49a0      	ldr	r1, [pc, #640]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b60:	e001      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d047      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7a:	d030      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b80:	d82a      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b86:	d02c      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b8c:	d824      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b92:	d018      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b98:	d81e      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d007      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004ba4:	e018      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba6:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	4a8c      	ldr	r2, [pc, #560]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bb2:	e017      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fe3e 	bl	800683c <RCCEx_PLL2_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bc4:	e00e      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3324      	adds	r3, #36	; 0x24
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 fee7 	bl	80069a0 <RCCEx_PLL3_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004bd6:	e005      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
      break;
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bea:	4b7c      	ldr	r3, [pc, #496]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	4979      	ldr	r1, [pc, #484]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	650b      	str	r3, [r1, #80]	; 0x50
 8004bfc:	e001      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d049      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c16:	d02e      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d828      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c22:	d02a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c28:	d822      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c2e:	d026      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c34:	d81c      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c40:	d816      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fdf2 	bl	800683c <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c5c:	e012      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3324      	adds	r3, #36	; 0x24
 8004c62:	2101      	movs	r1, #1
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fe9b 	bl	80069a0 <RCCEx_PLL3_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c6e:	e009      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	e006      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c76:	bf00      	nop
 8004c78:	e004      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e002      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e000      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c8a:	4b54      	ldr	r3, [pc, #336]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c96:	4951      	ldr	r1, [pc, #324]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	650b      	str	r3, [r1, #80]	; 0x50
 8004c9c:	e001      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d04b      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cb8:	d02e      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cbe:	d828      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc4:	d02a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d822      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cd0:	d026      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004cd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cd6:	d81c      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cdc:	d010      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce2:	d816      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01d      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cec:	d111      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 fda1 	bl	800683c <RCCEx_PLL2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004cfe:	e012      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3324      	adds	r3, #36	; 0x24
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 fe4a 	bl	80069a0 <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d10:	e009      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
      break;
 8004d16:	e006      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d18:	bf00      	nop
 8004d1a:	e004      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d3a:	4928      	ldr	r1, [pc, #160]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	658b      	str	r3, [r1, #88]	; 0x58
 8004d40:	e001      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d02f      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5a:	d00e      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d60:	d814      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d015      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6a:	d10f      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d78:	e00c      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fd5b 	bl	800683c <RCCEx_PLL2_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e000      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da6:	490d      	ldr	r1, [pc, #52]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	650b      	str	r3, [r1, #80]	; 0x50
 8004dac:	e001      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d033      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d81c      	bhi.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e07 	.word	0x08004e07
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004def 	.word	0x08004def
 8004dd8:	08004e07 	.word	0x08004e07
 8004ddc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de0:	4bb8      	ldr	r3, [pc, #736]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4ab7      	ldr	r2, [pc, #732]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004dec:	e00c      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 fd21 	bl	800683c <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e0e:	4bad      	ldr	r3, [pc, #692]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	49aa      	ldr	r1, [pc, #680]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e20:	e001      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8086 	beq.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e34:	4ba4      	ldr	r3, [pc, #656]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4aa3      	ldr	r2, [pc, #652]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e40:	f7fd f866 	bl	8001f10 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e46:	e009      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e48:	f7fd f862 	bl	8001f10 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d902      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	75fb      	strb	r3, [r7, #23]
        break;
 8004e5a:	e005      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e5c:	4b9a      	ldr	r3, [pc, #616]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0ef      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d166      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e6e:	4b95      	ldr	r3, [pc, #596]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e78:	4053      	eors	r3, r2
 8004e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d013      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e82:	4b90      	ldr	r3, [pc, #576]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e8c:	4b8d      	ldr	r3, [pc, #564]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a8c      	ldr	r2, [pc, #560]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e98:	4b8a      	ldr	r3, [pc, #552]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a89      	ldr	r2, [pc, #548]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ea4:	4a87      	ldr	r2, [pc, #540]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb4:	d115      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd f82b 	bl	8001f10 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fd f827 	bl	8001f10 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d902      	bls.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ed4:	e005      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed6:	4b7b      	ldr	r3, [pc, #492]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0ed      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d126      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004ef8:	4b72      	ldr	r3, [pc, #456]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f06:	0919      	lsrs	r1, r3, #4
 8004f08:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	496d      	ldr	r1, [pc, #436]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
 8004f12:	e005      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f14:	4b6b      	ldr	r3, [pc, #428]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	4a6a      	ldr	r2, [pc, #424]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f1e:	6113      	str	r3, [r2, #16]
 8004f20:	4b68      	ldr	r3, [pc, #416]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2e:	4965      	ldr	r1, [pc, #404]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	670b      	str	r3, [r1, #112]	; 0x70
 8004f34:	e004      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	75bb      	strb	r3, [r7, #22]
 8004f3a:	e001      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d07e      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f50:	2b28      	cmp	r3, #40	; 0x28
 8004f52:	d867      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	0800502b 	.word	0x0800502b
 8004f60:	08005025 	.word	0x08005025
 8004f64:	08005025 	.word	0x08005025
 8004f68:	08005025 	.word	0x08005025
 8004f6c:	08005025 	.word	0x08005025
 8004f70:	08005025 	.word	0x08005025
 8004f74:	08005025 	.word	0x08005025
 8004f78:	08005025 	.word	0x08005025
 8004f7c:	08005001 	.word	0x08005001
 8004f80:	08005025 	.word	0x08005025
 8004f84:	08005025 	.word	0x08005025
 8004f88:	08005025 	.word	0x08005025
 8004f8c:	08005025 	.word	0x08005025
 8004f90:	08005025 	.word	0x08005025
 8004f94:	08005025 	.word	0x08005025
 8004f98:	08005025 	.word	0x08005025
 8004f9c:	08005013 	.word	0x08005013
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	08005025 	.word	0x08005025
 8004fa8:	08005025 	.word	0x08005025
 8004fac:	08005025 	.word	0x08005025
 8004fb0:	08005025 	.word	0x08005025
 8004fb4:	08005025 	.word	0x08005025
 8004fb8:	08005025 	.word	0x08005025
 8004fbc:	0800502b 	.word	0x0800502b
 8004fc0:	08005025 	.word	0x08005025
 8004fc4:	08005025 	.word	0x08005025
 8004fc8:	08005025 	.word	0x08005025
 8004fcc:	08005025 	.word	0x08005025
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	08005025 	.word	0x08005025
 8004fd8:	08005025 	.word	0x08005025
 8004fdc:	0800502b 	.word	0x0800502b
 8004fe0:	08005025 	.word	0x08005025
 8004fe4:	08005025 	.word	0x08005025
 8004fe8:	08005025 	.word	0x08005025
 8004fec:	08005025 	.word	0x08005025
 8004ff0:	08005025 	.word	0x08005025
 8004ff4:	08005025 	.word	0x08005025
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	0800502b 	.word	0x0800502b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	2101      	movs	r1, #1
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fc18 	bl	800683c <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005010:	e00c      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fcc1 	bl	80069a0 <RCCEx_PLL3_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005022:	e003      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	75fb      	strb	r3, [r7, #23]
      break;
 8005028:	e000      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800502a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800503e:	4921      	ldr	r1, [pc, #132]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	654b      	str	r3, [r1, #84]	; 0x54
 8005044:	e001      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03e      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505a:	2b05      	cmp	r3, #5
 800505c:	d820      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	080050a7 	.word	0x080050a7
 8005068:	0800507d 	.word	0x0800507d
 800506c:	0800508f 	.word	0x0800508f
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050a7 	.word	0x080050a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	2101      	movs	r1, #1
 8005082:	4618      	mov	r0, r3
 8005084:	f001 fbda 	bl	800683c <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800508c:	e00c      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3324      	adds	r3, #36	; 0x24
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f001 fc83 	bl	80069a0 <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	75fb      	strb	r3, [r7, #23]
      break;
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80050a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d110      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f023 0207 	bic.w	r2, r3, #7
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ba:	4902      	ldr	r1, [pc, #8]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	654b      	str	r3, [r1, #84]	; 0x54
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
 80050c8:	58024800 	.word	0x58024800
 80050cc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d039      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	2b05      	cmp	r3, #5
 80050e8:	d820      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80050ea:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005133 	.word	0x08005133
 80050f4:	08005109 	.word	0x08005109
 80050f8:	0800511b 	.word	0x0800511b
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005133 	.word	0x08005133
 8005104:	08005133 	.word	0x08005133
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	2101      	movs	r1, #1
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fb94 	bl	800683c <RCCEx_PLL2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005118:	e00c      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3324      	adds	r3, #36	; 0x24
 800511e:	2101      	movs	r1, #1
 8005120:	4618      	mov	r0, r3
 8005122:	f001 fc3d 	bl	80069a0 <RCCEx_PLL3_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
      break;
 8005130:	e000      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800513a:	4bb7      	ldr	r3, [pc, #732]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f023 0207 	bic.w	r2, r3, #7
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	49b3      	ldr	r1, [pc, #716]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800514a:	4313      	orrs	r3, r2
 800514c:	658b      	str	r3, [r1, #88]	; 0x58
 800514e:	e001      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d04b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800516a:	d02e      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800516c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005170:	d828      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d02a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d822      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800517e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005182:	d026      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005184:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005188:	d81c      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d010      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005194:	d816      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01d      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800519a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519e:	d111      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 fb48 	bl	800683c <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051b0:	e012      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	2102      	movs	r1, #2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fbf1 	bl	80069a0 <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      break;
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80051ca:	bf00      	nop
 80051cc:	e004      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80051ce:	bf00      	nop
 80051d0:	e002      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80051d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051de:	4b8e      	ldr	r3, [pc, #568]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ec:	498a      	ldr	r1, [pc, #552]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	654b      	str	r3, [r1, #84]	; 0x54
 80051f2:	e001      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d04b      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800520a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800520e:	d02e      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005210:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005214:	d828      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521a:	d02a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800521c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005220:	d822      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005226:	d026      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005228:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800522c:	d81c      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005232:	d010      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005238:	d816      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01d      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005242:	d111      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f001 faf6 	bl	800683c <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005254:	e012      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3324      	adds	r3, #36	; 0x24
 800525a:	2102      	movs	r1, #2
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fb9f 	bl	80069a0 <RCCEx_PLL3_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005266:	e009      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
      break;
 800526c:	e006      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800526e:	bf00      	nop
 8005270:	e004      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800527a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005290:	4961      	ldr	r1, [pc, #388]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005292:	4313      	orrs	r3, r2
 8005294:	658b      	str	r3, [r1, #88]	; 0x58
 8005296:	e001      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d04b      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052b2:	d02e      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80052b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052b8:	d828      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052be:	d02a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c4:	d822      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052ca:	d026      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80052cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052d0:	d81c      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d6:	d010      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80052d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052dc:	d816      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01d      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	d111      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 faa4 	bl	800683c <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80052f8:	e012      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2102      	movs	r1, #2
 8005300:	4618      	mov	r0, r3
 8005302:	f001 fb4d 	bl	80069a0 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800530a:	e009      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005312:	bf00      	nop
 8005314:	e004      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800531e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005326:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005334:	4938      	ldr	r1, [pc, #224]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005336:	4313      	orrs	r3, r2
 8005338:	658b      	str	r3, [r1, #88]	; 0x58
 800533a:	e001      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005356:	d10a      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3324      	adds	r3, #36	; 0x24
 800535c:	2102      	movs	r1, #2
 800535e:	4618      	mov	r0, r3
 8005360:	f001 fb1e 	bl	80069a0 <RCCEx_PLL3_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800536e:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537c:	4926      	ldr	r1, [pc, #152]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800537e:	4313      	orrs	r3, r2
 8005380:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005398:	d10a      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	2102      	movs	r1, #2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fafd 	bl	80069a0 <RCCEx_PLL3_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053be:	4916      	ldr	r1, [pc, #88]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d036      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053da:	d01f      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80053dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053e0:	d817      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80053e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ea:	d009      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80053ec:	e011      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3304      	adds	r3, #4
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 fa21 	bl	800683c <RCCEx_PLL2_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80053fe:	e00e      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3324      	adds	r3, #36	; 0x24
 8005404:	2102      	movs	r1, #2
 8005406:	4618      	mov	r0, r3
 8005408:	f001 faca 	bl	80069a0 <RCCEx_PLL3_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005410:	e005      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	75fb      	strb	r3, [r7, #23]
      break;
 8005416:	e002      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005418:	58024400 	.word	0x58024400
      break;
 800541c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005424:	4b93      	ldr	r3, [pc, #588]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005432:	4990      	ldr	r1, [pc, #576]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005434:	4313      	orrs	r3, r2
 8005436:	658b      	str	r3, [r1, #88]	; 0x58
 8005438:	e001      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d033      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005454:	d01c      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800545a:	d816      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800545c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005460:	d003      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005466:	d007      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005468:	e00f      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546a:	4b82      	ldr	r3, [pc, #520]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a81      	ldr	r2, [pc, #516]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005476:	e00c      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3324      	adds	r3, #36	; 0x24
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fa8e 	bl	80069a0 <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
      break;
 800548e:	e000      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005498:	4b76      	ldr	r3, [pc, #472]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a6:	4973      	ldr	r1, [pc, #460]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	654b      	str	r3, [r1, #84]	; 0x54
 80054ac:	e001      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d029      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80054c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ca:	d007      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80054cc:	e00f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ce:	4b69      	ldr	r3, [pc, #420]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	4a68      	ldr	r2, [pc, #416]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054da:	e00b      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	2102      	movs	r1, #2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f9aa 	bl	800683c <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80054fa:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	495b      	ldr	r1, [pc, #364]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800550c:	e001      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	2102      	movs	r1, #2
 8005524:	4618      	mov	r0, r3
 8005526:	f001 fa3b 	bl	80069a0 <RCCEx_PLL3_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d030      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005548:	d017      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800554a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800554e:	d811      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d013      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555a:	d80b      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d106      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005566:	4b43      	ldr	r3, [pc, #268]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	4a42      	ldr	r2, [pc, #264]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800556c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005572:	e007      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
      break;
 8005578:	e004      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800558a:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005596:	4937      	ldr	r1, [pc, #220]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	654b      	str	r3, [r1, #84]	; 0x54
 800559c:	e001      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055ae:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	492e      	ldr	r1, [pc, #184]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80055cc:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055da:	4926      	ldr	r1, [pc, #152]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ec:	4b21      	ldr	r3, [pc, #132]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f8:	491e      	ldr	r1, [pc, #120]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800560a:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	4a19      	ldr	r2, [pc, #100]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005610:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005614:	6113      	str	r3, [r2, #16]
 8005616:	4b17      	ldr	r3, [pc, #92]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005620:	4914      	ldr	r1, [pc, #80]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005622:	4313      	orrs	r3, r2
 8005624:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	da08      	bge.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005632:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	490e      	ldr	r1, [pc, #56]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	4906      	ldr	r1, [pc, #24]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005660:	7dbb      	ldrb	r3, [r7, #22]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	58024400 	.word	0x58024400

08005678 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b090      	sub	sp, #64	; 0x40
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	f040 8095 	bne.w	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800568a:	4bae      	ldr	r3, [pc, #696]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800568c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	633b      	str	r3, [r7, #48]	; 0x30
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	2b04      	cmp	r3, #4
 8005698:	f200 8088 	bhi.w	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b9 	.word	0x080056b9
 80056a8:	080056e1 	.word	0x080056e1
 80056ac:	08005709 	.word	0x08005709
 80056b0:	080057a5 	.word	0x080057a5
 80056b4:	08005731 	.word	0x08005731

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056b8:	4ba2      	ldr	r3, [pc, #648]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c4:	d108      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 ff64 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056d4:	f000 bc95 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056dc:	f000 bc91 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056e0:	4b98      	ldr	r3, [pc, #608]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ec:	d108      	bne.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ee:	f107 0318 	add.w	r3, r7, #24
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fca8 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056fc:	f000 bc81 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005704:	f000 bc7d 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005708:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005714:	d108      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005716:	f107 030c 	add.w	r3, r7, #12
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fde8 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005724:	f000 bc6d 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800572c:	f000 bc69 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005730:	4b84      	ldr	r3, [pc, #528]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005738:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800573a:	4b82      	ldr	r3, [pc, #520]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d10c      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800574c:	4b7d      	ldr	r3, [pc, #500]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	4a7c      	ldr	r2, [pc, #496]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800575e:	e01f      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005760:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576c:	d106      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005774:	d102      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005776:	4b75      	ldr	r3, [pc, #468]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800577a:	e011      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800577c:	4b71      	ldr	r3, [pc, #452]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005788:	d106      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005790:	d102      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005792:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005796:	e003      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800579c:	f000 bc31 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80057a0:	f000 bc2f 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057a4:	4b6b      	ldr	r3, [pc, #428]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80057a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a8:	f000 bc2b 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b0:	f000 bc27 	b.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ba:	f040 8095 	bne.w	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80057be:	4b61      	ldr	r3, [pc, #388]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80057c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d04d      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d6:	f200 8084 	bhi.w	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2bc0      	cmp	r3, #192	; 0xc0
 80057de:	d07d      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2bc0      	cmp	r3, #192	; 0xc0
 80057e4:	d87d      	bhi.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d02d      	beq.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d877      	bhi.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d012      	beq.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80057fe:	e070      	b.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005800:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800580c:	d107      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800580e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fec0 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800581c:	e3f1      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005822:	e3ee      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005824:	4b47      	ldr	r3, [pc, #284]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800582c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005830:	d107      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005832:	f107 0318 	add.w	r3, r7, #24
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fc06 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005840:	e3df      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005846:	e3dc      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005848:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005854:	d107      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005856:	f107 030c 	add.w	r3, r7, #12
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fd48 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005864:	e3cd      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800586a:	e3ca      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005874:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b04      	cmp	r3, #4
 8005880:	d10c      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005888:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	08db      	lsrs	r3, r3, #3
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	4a2d      	ldr	r2, [pc, #180]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589a:	e01e      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800589c:	4b29      	ldr	r3, [pc, #164]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058a8:	d106      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b0:	d102      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	e010      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058b8:	4b22      	ldr	r3, [pc, #136]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c4:	d106      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058cc:	d102      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058ce:	4b20      	ldr	r3, [pc, #128]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	e002      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058d8:	e393      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80058da:	e392      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e0:	e38f      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e6:	e38c      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	f040 80a7 	bne.w	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80058fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005902:	d05f      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800590a:	f200 8096 	bhi.w	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005914:	f000 808e 	beq.w	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800591e:	f200 808c 	bhi.w	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005928:	d03a      	beq.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005930:	f200 8083 	bhi.w	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005940:	d01c      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005942:	e07a      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005944:	58024400 	.word	0x58024400
 8005948:	03d09000 	.word	0x03d09000
 800594c:	003d0900 	.word	0x003d0900
 8005950:	007a1200 	.word	0x007a1200
 8005954:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005958:	4baa      	ldr	r3, [pc, #680]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005964:	d107      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fe14 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005974:	e345      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597a:	e342      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800597c:	4ba1      	ldr	r3, [pc, #644]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d107      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fb5a 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005998:	e333      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599e:	e330      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059a0:	4b98      	ldr	r3, [pc, #608]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ac:	d107      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fc9c 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059bc:	e321      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059c2:	e31e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059c4:	4b8f      	ldr	r3, [pc, #572]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ce:	4b8d      	ldr	r3, [pc, #564]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059e0:	4b88      	ldr	r3, [pc, #544]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	08db      	lsrs	r3, r3, #3
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	4a87      	ldr	r2, [pc, #540]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f2:	e01e      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059f4:	4b83      	ldr	r3, [pc, #524]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a00:	d106      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a08:	d102      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a0a:	4b80      	ldr	r3, [pc, #512]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0e:	e010      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a10:	4b7c      	ldr	r3, [pc, #496]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a24:	d102      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a26:	4b7a      	ldr	r3, [pc, #488]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2a:	e002      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a30:	e2e7      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005a32:	e2e6      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a34:	4b77      	ldr	r3, [pc, #476]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a38:	e2e3      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a3e:	e2e0      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a46:	f040 809c 	bne.w	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005a4a:	4b6e      	ldr	r3, [pc, #440]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a5a:	d054      	beq.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a62:	f200 808b 	bhi.w	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a6c:	f000 8083 	beq.w	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a76:	f200 8081 	bhi.w	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a80:	d02f      	beq.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a88:	d878      	bhi.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a96:	d012      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005a98:	e070      	b.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a9a:	4b5a      	ldr	r3, [pc, #360]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fd73 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ab6:	e2a4      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005abc:	e2a1      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005abe:	4b51      	ldr	r3, [pc, #324]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aca:	d107      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005acc:	f107 0318 	add.w	r3, r7, #24
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fab9 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005ada:	e292      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ae0:	e28f      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ae2:	4b48      	ldr	r3, [pc, #288]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aee:	d107      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fbfb 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005afe:	e280      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b04:	e27d      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b06:	4b3f      	ldr	r3, [pc, #252]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b0e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b10:	4b3c      	ldr	r3, [pc, #240]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d10c      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b22:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	08db      	lsrs	r3, r3, #3
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	4a36      	ldr	r2, [pc, #216]	; (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b34:	e01e      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b42:	d106      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b4a:	d102      	bne.n	8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b50:	e010      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b52:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b66:	d102      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b68:	4b29      	ldr	r3, [pc, #164]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b72:	e246      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005b74:	e245      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b76:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7a:	e242      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b80:	e23f      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	f040 80a8 	bne.w	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005b8c:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b9c:	d060      	beq.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba4:	f200 8097 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bae:	f000 808f 	beq.w	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bb8:	f200 808d 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc2:	d03b      	beq.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bca:	f200 8084 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	d01d      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005bdc:	e07b      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bea:	d107      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fcd1 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bfa:	e202      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c00:	e1ff      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005c02:	bf00      	nop
 8005c04:	58024400 	.word	0x58024400
 8005c08:	03d09000 	.word	0x03d09000
 8005c0c:	003d0900 	.word	0x003d0900
 8005c10:	007a1200 	.word	0x007a1200
 8005c14:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c18:	4ba3      	ldr	r3, [pc, #652]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c24:	d107      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c26:	f107 0318 	add.w	r3, r7, #24
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fa0c 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c34:	e1e5      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c3a:	e1e2      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c3c:	4b9a      	ldr	r3, [pc, #616]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c48:	d107      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fb4e 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c58:	e1d3      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c5e:	e1d0      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c60:	4b91      	ldr	r3, [pc, #580]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c6a:	4b8f      	ldr	r3, [pc, #572]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c7c:	4b8a      	ldr	r3, [pc, #552]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	08db      	lsrs	r3, r3, #3
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	4a89      	ldr	r2, [pc, #548]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8e:	e01e      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c90:	4b85      	ldr	r3, [pc, #532]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9c:	d106      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca4:	d102      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ca6:	4b82      	ldr	r3, [pc, #520]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005caa:	e010      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cac:	4b7e      	ldr	r3, [pc, #504]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc0:	d102      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cc2:	4b7c      	ldr	r3, [pc, #496]	; (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc6:	e002      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ccc:	e199      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005cce:	e198      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cd0:	4b79      	ldr	r3, [pc, #484]	; (8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cd4:	e195      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cda:	e192      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ce2:	d173      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005ce4:	4b70      	ldr	r3, [pc, #448]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf4:	d02f      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cfc:	d863      	bhi.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d0a:	d012      	beq.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005d0c:	e05b      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d0e:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d1c:	f107 0318 	add.w	r3, r7, #24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 f991 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d2a:	e16a      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d30:	e167      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d32:	4b5d      	ldr	r3, [pc, #372]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fad3 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d4e:	e158      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d54:	e155      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d56:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d60:	4b51      	ldr	r3, [pc, #324]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d10c      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d72:	4b4d      	ldr	r3, [pc, #308]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	08db      	lsrs	r3, r3, #3
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	4a4b      	ldr	r2, [pc, #300]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d84:	e01e      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d86:	4b48      	ldr	r3, [pc, #288]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d92:	d106      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d9a:	d102      	bne.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d9c:	4b44      	ldr	r3, [pc, #272]	; (8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005da0:	e010      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dae:	d106      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db6:	d102      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005db8:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005dc2:	e11e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005dc4:	e11d      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dca:	e11a      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd2:	d133      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005dd4:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ddc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dea:	d012      	beq.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005dec:	e023      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dee:	4b2e      	ldr	r3, [pc, #184]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dfa:	d107      	bne.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fbc9 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e0a:	e0fa      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e10:	e0f7      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e12:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e20:	f107 0318 	add.w	r3, r7, #24
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 f90f 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e2e:	e0e8      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e34:	e0e5      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e3a:	e0e2      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e42:	f040 808f 	bne.w	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005e46:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e56:	d075      	beq.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e5e:	d87e      	bhi.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e66:	d060      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d876      	bhi.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e76:	d045      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e7e:	d86e      	bhi.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e86:	d02b      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8e:	d866      	bhi.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e9c:	d00e      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005e9e:	e05e      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ea0:	f000 f8bc 	bl	800601c <HAL_RCCEx_GetD3PCLK1Freq>
 8005ea4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005ea6:	e0ac      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005ea8:	58024400 	.word	0x58024400
 8005eac:	03d09000 	.word	0x03d09000
 8005eb0:	003d0900 	.word	0x003d0900
 8005eb4:	007a1200 	.word	0x007a1200
 8005eb8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ebc:	4b53      	ldr	r3, [pc, #332]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec8:	d107      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eca:	f107 0318 	add.w	r3, r7, #24
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f8ba 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ed8:	e093      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ede:	e090      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ee0:	4b4a      	ldr	r3, [pc, #296]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eec:	d107      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 f9fc 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005efc:	e081      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f02:	e07e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f04:	4b41      	ldr	r3, [pc, #260]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d109      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f10:	4b3e      	ldr	r3, [pc, #248]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	08db      	lsrs	r3, r3, #3
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f22:	e06e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f28:	e06b      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f2a:	4b38      	ldr	r3, [pc, #224]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f36:	d102      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005f38:	4b36      	ldr	r3, [pc, #216]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f3c:	e061      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f42:	e05e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f44:	4b31      	ldr	r3, [pc, #196]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f50:	d102      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8005f52:	4b31      	ldr	r3, [pc, #196]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f56:	e054      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f5c:	e051      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f62:	e04e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d148      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005f6c:	4b27      	ldr	r3, [pc, #156]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f7c:	d02a      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f84:	d838      	bhi.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f92:	d00d      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8005f94:	e030      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa2:	d102      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8005fa4:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fa8:	e02b      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fae:	e028      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fbc:	d107      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fae8 	bl	8006598 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fcc:	e019      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fd2:	e016      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe2:	f107 0318 	add.w	r3, r7, #24
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f82e 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ff0:	e007      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ff6:	e004      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ffc:	e001      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006004:	4618      	mov	r0, r3
 8006006:	3740      	adds	r7, #64	; 0x40
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	03d09000 	.word	0x03d09000
 8006014:	003d0900 	.word	0x003d0900
 8006018:	007a1200 	.word	0x007a1200

0800601c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006020:	f7fe fb8e 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4904      	ldr	r1, [pc, #16]	; (8006044 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	58024400 	.word	0x58024400
 8006044:	08010f54 	.word	0x08010f54

08006048 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	; 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006050:	4ba1      	ldr	r3, [pc, #644]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800605a:	4b9f      	ldr	r3, [pc, #636]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	0b1b      	lsrs	r3, r3, #12
 8006060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006064:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006066:	4b9c      	ldr	r3, [pc, #624]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006072:	4b99      	ldr	r3, [pc, #612]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8111 	beq.w	80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b02      	cmp	r3, #2
 800609a:	f000 8083 	beq.w	80061a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f200 80a1 	bhi.w	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d056      	beq.n	8006160 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80060b2:	e099      	b.n	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060b4:	4b88      	ldr	r3, [pc, #544]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02d      	beq.n	800611c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060c0:	4b85      	ldr	r3, [pc, #532]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	08db      	lsrs	r3, r3, #3
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	4a84      	ldr	r2, [pc, #528]	; (80062dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b7b      	ldr	r3, [pc, #492]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800611a:	e087      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b6a      	ldr	r3, [pc, #424]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006142:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615e:	e065      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a03 	vldr	s12, [r7, #12]
 8006186:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061a2:	e043      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b48      	ldr	r3, [pc, #288]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e6:	e021      	b.n	800622c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b37      	ldr	r3, [pc, #220]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a03 	vldr	s12, [r7, #12]
 800620e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800622a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800622c:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	0a5b      	lsrs	r3, r3, #9
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006246:	edd7 6a07 	vldr	s13, [r7, #28]
 800624a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006252:	ee17 2a90 	vmov	r2, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	0c1b      	lsrs	r3, r3, #16
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006274:	edd7 6a07 	vldr	s13, [r7, #28]
 8006278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006280:	ee17 2a90 	vmov	r2, s15
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	0e1b      	lsrs	r3, r3, #24
 800628e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ae:	ee17 2a90 	vmov	r2, s15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80062b6:	e008      	b.n	80062ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	bf00      	nop
 80062cc:	3724      	adds	r7, #36	; 0x24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	58024400 	.word	0x58024400
 80062dc:	03d09000 	.word	0x03d09000
 80062e0:	46000000 	.word	0x46000000
 80062e4:	4c742400 	.word	0x4c742400
 80062e8:	4a742400 	.word	0x4a742400
 80062ec:	4af42400 	.word	0x4af42400

080062f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062f8:	4ba1      	ldr	r3, [pc, #644]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006302:	4b9f      	ldr	r3, [pc, #636]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	0d1b      	lsrs	r3, r3, #20
 8006308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800630e:	4b9c      	ldr	r3, [pc, #624]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800631a:	4b99      	ldr	r3, [pc, #612]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	fb02 f303 	mul.w	r3, r2, r3
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8111 	beq.w	8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b02      	cmp	r3, #2
 8006342:	f000 8083 	beq.w	800644c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b02      	cmp	r3, #2
 800634a:	f200 80a1 	bhi.w	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d056      	beq.n	8006408 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800635a:	e099      	b.n	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635c:	4b88      	ldr	r3, [pc, #544]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02d      	beq.n	80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006368:	4b85      	ldr	r3, [pc, #532]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	08db      	lsrs	r3, r3, #3
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	4a84      	ldr	r2, [pc, #528]	; (8006584 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063c2:	e087      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800658c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80063d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d6:	4b6a      	ldr	r3, [pc, #424]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006406:	e065      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006412:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641a:	4b59      	ldr	r3, [pc, #356]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642a:	ed97 6a03 	vldr	s12, [r7, #12]
 800642e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800644a:	e043      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006594 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800645a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645e:	4b48      	ldr	r3, [pc, #288]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006472:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800647a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800648e:	e021      	b.n	80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800649e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064a2:	4b37      	ldr	r3, [pc, #220]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006588 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	0a5b      	lsrs	r3, r3, #9
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fa:	ee17 2a90 	vmov	r2, s15
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006502:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800651c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006528:	ee17 2a90 	vmov	r2, s15
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	0e1b      	lsrs	r3, r3, #24
 8006536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800654a:	edd7 6a07 	vldr	s13, [r7, #28]
 800654e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006556:	ee17 2a90 	vmov	r2, s15
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800655e:	e008      	b.n	8006572 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
}
 8006572:	bf00      	nop
 8006574:	3724      	adds	r7, #36	; 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	03d09000 	.word	0x03d09000
 8006588:	46000000 	.word	0x46000000
 800658c:	4c742400 	.word	0x4c742400
 8006590:	4a742400 	.word	0x4a742400
 8006594:	4af42400 	.word	0x4af42400

08006598 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	; 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065a0:	4ba0      	ldr	r3, [pc, #640]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80065aa:	4b9e      	ldr	r3, [pc, #632]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80065b6:	4b9b      	ldr	r3, [pc, #620]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80065c0:	4b98      	ldr	r3, [pc, #608]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	08db      	lsrs	r3, r3, #3
 80065c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8111 	beq.w	8006806 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	f000 8083 	beq.w	80066f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	f200 80a1 	bhi.w	8006736 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d056      	beq.n	80066ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006600:	e099      	b.n	8006736 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006602:	4b88      	ldr	r3, [pc, #544]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d02d      	beq.n	800666a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800660e:	4b85      	ldr	r3, [pc, #532]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	08db      	lsrs	r3, r3, #3
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	4a83      	ldr	r2, [pc, #524]	; (8006828 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006638:	4b7a      	ldr	r3, [pc, #488]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	ed97 6a03 	vldr	s12, [r7, #12]
 800664c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800665c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006668:	e087      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006830 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667c:	4b69      	ldr	r3, [pc, #420]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006690:	eddf 5a66 	vldr	s11, [pc, #408]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066ac:	e065      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006834 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80066bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066c0:	4b58      	ldr	r3, [pc, #352]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066f0:	e043      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006838 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006704:	4b47      	ldr	r3, [pc, #284]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006714:	ed97 6a03 	vldr	s12, [r7, #12]
 8006718:	eddf 5a44 	vldr	s11, [pc, #272]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800671c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800672c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006730:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006734:	e021      	b.n	800677a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006740:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006830 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006748:	4b36      	ldr	r3, [pc, #216]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006758:	ed97 6a03 	vldr	s12, [r7, #12]
 800675c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800682c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006778:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800677a:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	0a5b      	lsrs	r3, r3, #9
 8006780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006794:	edd7 6a07 	vldr	s13, [r7, #28]
 8006798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a0:	ee17 2a90 	vmov	r2, s15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80067a8:	4b1e      	ldr	r3, [pc, #120]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ce:	ee17 2a90 	vmov	r2, s15
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	0e1b      	lsrs	r3, r3, #24
 80067dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fc:	ee17 2a90 	vmov	r2, s15
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006804:	e008      	b.n	8006818 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	3724      	adds	r7, #36	; 0x24
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	58024400 	.word	0x58024400
 8006828:	03d09000 	.word	0x03d09000
 800682c:	46000000 	.word	0x46000000
 8006830:	4c742400 	.word	0x4c742400
 8006834:	4a742400 	.word	0x4a742400
 8006838:	4af42400 	.word	0x4af42400

0800683c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800684a:	4b53      	ldr	r3, [pc, #332]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d101      	bne.n	800685a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e099      	b.n	800698e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800685a:	4b4f      	ldr	r3, [pc, #316]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4e      	ldr	r2, [pc, #312]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006866:	f7fb fb53 	bl	8001f10 <HAL_GetTick>
 800686a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800686c:	e008      	b.n	8006880 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800686e:	f7fb fb4f 	bl	8001f10 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e086      	b.n	800698e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006880:	4b45      	ldr	r3, [pc, #276]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f0      	bne.n	800686e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800688c:	4b42      	ldr	r3, [pc, #264]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	493f      	ldr	r1, [pc, #252]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800689c:	4313      	orrs	r3, r2
 800689e:	628b      	str	r3, [r1, #40]	; 0x28
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	025b      	lsls	r3, r3, #9
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	061b      	lsls	r3, r3, #24
 80068cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068d0:	4931      	ldr	r1, [pc, #196]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	492d      	ldr	r1, [pc, #180]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068e8:	4b2b      	ldr	r3, [pc, #172]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	f023 0220 	bic.w	r2, r3, #32
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	4928      	ldr	r1, [pc, #160]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068fa:	4b27      	ldr	r3, [pc, #156]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	4a26      	ldr	r2, [pc, #152]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006900:	f023 0310 	bic.w	r3, r3, #16
 8006904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690a:	4b24      	ldr	r3, [pc, #144]	; (800699c <RCCEx_PLL2_Config+0x160>)
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	69d2      	ldr	r2, [r2, #28]
 8006912:	00d2      	lsls	r2, r2, #3
 8006914:	4920      	ldr	r1, [pc, #128]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800691a:	4b1f      	ldr	r3, [pc, #124]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006920:	f043 0310 	orr.w	r3, r3, #16
 8006924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a19      	ldr	r2, [pc, #100]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006938:	e00f      	b.n	800695a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d106      	bne.n	800694e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	4a14      	ldr	r2, [pc, #80]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800694c:	e005      	b.n	800695a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	4a11      	ldr	r2, [pc, #68]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a0e      	ldr	r2, [pc, #56]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006966:	f7fb fad3 	bl	8001f10 <HAL_GetTick>
 800696a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800696c:	e008      	b.n	8006980 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800696e:	f7fb facf 	bl	8001f10 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e006      	b.n	800698e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <RCCEx_PLL2_Config+0x15c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
 800699c:	ffff0007 	.word	0xffff0007

080069a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ae:	4b53      	ldr	r3, [pc, #332]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d101      	bne.n	80069be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e099      	b.n	8006af2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069be:	4b4f      	ldr	r3, [pc, #316]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4e      	ldr	r2, [pc, #312]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ca:	f7fb faa1 	bl	8001f10 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069d0:	e008      	b.n	80069e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069d2:	f7fb fa9d 	bl	8001f10 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e086      	b.n	8006af2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069e4:	4b45      	ldr	r3, [pc, #276]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069f0:	4b42      	ldr	r3, [pc, #264]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	493f      	ldr	r1, [pc, #252]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	628b      	str	r3, [r1, #40]	; 0x28
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	025b      	lsls	r3, r3, #9
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a34:	4931      	ldr	r1, [pc, #196]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a3a:	4b30      	ldr	r3, [pc, #192]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	492d      	ldr	r1, [pc, #180]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	4928      	ldr	r1, [pc, #160]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a5e:	4b27      	ldr	r3, [pc, #156]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	4a26      	ldr	r2, [pc, #152]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a6a:	4b24      	ldr	r3, [pc, #144]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <RCCEx_PLL3_Config+0x160>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	69d2      	ldr	r2, [r2, #28]
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	4920      	ldr	r1, [pc, #128]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a9c:	e00f      	b.n	8006abe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d106      	bne.n	8006ab2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006aa4:	4b15      	ldr	r3, [pc, #84]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	4a14      	ldr	r2, [pc, #80]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006aaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006aae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ab0:	e005      	b.n	8006abe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	4a11      	ldr	r2, [pc, #68]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006abc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a0e      	ldr	r2, [pc, #56]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aca:	f7fb fa21 	bl	8001f10 <HAL_GetTick>
 8006ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ad0:	e008      	b.n	8006ae4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ad2:	f7fb fa1d 	bl	8001f10 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e006      	b.n	8006af2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <RCCEx_PLL3_Config+0x15c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400
 8006b00:	ffff0007 	.word	0xffff0007

08006b04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	; 0x28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e075      	b.n	8006c02 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fa fe99 	bl	8001860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2203      	movs	r2, #3
 8006b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f868 	bl	8006c0c <HAL_SD_InitCard>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e05d      	b.n	8006c02 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006b46:	f107 0308 	add.w	r3, r7, #8
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fda5 	bl	800769c <HAL_SD_GetCardStatus>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e052      	b.n	8006c02 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006b5c:	7e3b      	ldrb	r3, [r7, #24]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006b62:	7e7b      	ldrb	r3, [r7, #25]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d10a      	bne.n	8006b86 <HAL_SD_Init+0x82>
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <HAL_SD_Init+0x78>
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b82:	659a      	str	r2, [r3, #88]	; 0x58
 8006b84:	e00b      	b.n	8006b9e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d104      	bne.n	8006b98 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b94:	659a      	str	r2, [r3, #88]	; 0x58
 8006b96:	e002      	b.n	8006b9e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fe5b 	bl	8007860 <HAL_SD_ConfigWideBusOperation>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e026      	b.n	8006c02 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006bb4:	f7fb f9ac 	bl	8001f10 <HAL_GetTick>
 8006bb8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006bba:	e011      	b.n	8006be0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bbc:	f7fb f9a8 	bl	8001f10 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d109      	bne.n	8006be0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e010      	b.n	8006c02 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 ff4d 	bl	8007a80 <HAL_SD_GetCardState>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d1e7      	bne.n	8006bbc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b08d      	sub	sp, #52	; 0x34
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c24:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c28:	f7fe fd26 	bl	8005678 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c2c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c42:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e06a      	b.n	8006d1e <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	4a36      	ldr	r2, [pc, #216]	; (8006d28 <HAL_SD_InitCard+0x11c>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681c      	ldr	r4, [r3, #0]
 8006c5a:	466a      	mov	r2, sp
 8006c5c:	f107 0318 	add.w	r3, r7, #24
 8006c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006c64:	e882 0003 	stmia.w	r2, {r0, r1}
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f002 fba2 	bl	80093b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f002 fbe5 	bl	8009448 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006c8a:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <HAL_SD_InitCard+0x120>)
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	3301      	adds	r3, #1
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fb f947 	bl	8001f28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 ffcc 	bl	8007c38 <SD_PowerON>
 8006ca0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e02e      	b.n	8006d1e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fefd 	bl	8007ac0 <SD_InitCard>
 8006cc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e01b      	b.n	8006d1e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f002 fc40 	bl	8009574 <SDMMC_CmdBlockLength>
 8006cf4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00f      	beq.n	8006d1c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a0b      	ldr	r2, [pc, #44]	; (8006d30 <HAL_SD_InitCard+0x124>)
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	372c      	adds	r7, #44	; 0x2c
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd90      	pop	{r4, r7, pc}
 8006d26:	bf00      	nop
 8006d28:	014f8b59 	.word	0x014f8b59
 8006d2c:	00012110 	.word	0x00012110
 8006d30:	1fe00fff 	.word	0x1fe00fff

08006d34 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e08d      	b.n	8006e78 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	f040 8086 	bne.w	8006e76 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d907      	bls.n	8006d8e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e074      	b.n	8006e78 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2203      	movs	r2, #3
 8006d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	025a      	lsls	r2, r3, #9
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d002      	beq.n	8006dba <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	025b      	lsls	r3, r3, #9
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006dba:	f04f 33ff 	mov.w	r3, #4294967295
 8006dbe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	025b      	lsls	r3, r3, #9
 8006dc4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006dc6:	2390      	movs	r3, #144	; 0x90
 8006dc8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f107 0210 	add.w	r2, r7, #16
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f002 fb9b 	bl	800951c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2201      	movs	r2, #1
 8006e04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d90a      	bls.n	8006e22 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2282      	movs	r2, #130	; 0x82
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f002 fbf1 	bl	8009600 <SDMMC_CmdReadMultiBlock>
 8006e1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e20:	e009      	b.n	8006e36 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2281      	movs	r2, #129	; 0x81
 8006e26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f002 fbc3 	bl	80095ba <SDMMC_CmdReadSingleBlock>
 8006e34:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d012      	beq.n	8006e62 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a0f      	ldr	r2, [pc, #60]	; (8006e80 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e00a      	b.n	8006e78 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006e70:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e000      	b.n	8006e78 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3730      	adds	r7, #48	; 0x30
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	1fe00fff 	.word	0x1fe00fff

08006e84 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d107      	bne.n	8006eac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e08d      	b.n	8006fc8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 8086 	bne.w	8006fc6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	441a      	add	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d907      	bls.n	8006ede <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e074      	b.n	8006fc8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	025a      	lsls	r2, r3, #9
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d002      	beq.n	8006f0a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	025b      	lsls	r3, r3, #9
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	025b      	lsls	r3, r3, #9
 8006f14:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f16:	2390      	movs	r3, #144	; 0x90
 8006f18:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f107 0210 	add.w	r2, r7, #16
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 faf3 	bl	800951c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f44:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2201      	movs	r2, #1
 8006f54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d90a      	bls.n	8006f72 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	22a0      	movs	r2, #160	; 0xa0
 8006f60:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f002 fb8f 	bl	800968c <SDMMC_CmdWriteMultiBlock>
 8006f6e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f70:	e009      	b.n	8006f86 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2290      	movs	r2, #144	; 0x90
 8006f76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f002 fb61 	bl	8009646 <SDMMC_CmdWriteSingleBlock>
 8006f84:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e00a      	b.n	8006fc8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3730      	adds	r7, #48	; 0x30
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	1fe00fff 	.word	0x1fe00fff

08006fd4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_SD_IRQHandler+0x2e>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f904 	bl	8008208 <SD_Read_IT>
 8007000:	e19a      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80ac 	beq.w	800716a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b9d      	ldr	r3, [pc, #628]	; (800729c <HAL_SD_IRQHandler+0x2c8>)
 8007028:	400b      	ands	r3, r1
 800702a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800703a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	2b00      	cmp	r3, #0
 8007054:	d038      	beq.n	80070c8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d104      	bne.n	800706a <HAL_SD_IRQHandler+0x96>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d011      	beq.n	800708e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f002 fb30 	bl	80096d4 <SDMMC_CmdStopTransfer>
 8007074:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d008      	beq.n	800708e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f959 	bl	8007340 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a83      	ldr	r2, [pc, #524]	; (80072a0 <HAL_SD_IRQHandler+0x2cc>)
 8007094:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <HAL_SD_IRQHandler+0xe4>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f002 ffe3 	bl	800a084 <HAL_SD_RxCpltCallback>
 80070be:	e13b      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f002 ffd5 	bl	800a070 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070c6:	e137      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8132 	beq.w	8007338 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2200      	movs	r2, #0
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <HAL_SD_IRQHandler+0x12c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d011      	beq.n	8007124 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f002 fae5 	bl	80096d4 <SDMMC_CmdStopTransfer>
 800710a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f90e 	bl	8007340 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 0310 	and.w	r3, r3, #16
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <HAL_SD_IRQHandler+0x172>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f002 ff92 	bl	800a070 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_SD_IRQHandler+0x18e>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 80eb 	beq.w	8007338 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f002 ff8e 	bl	800a084 <HAL_SD_RxCpltCallback>
}
 8007168:	e0e6      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_SD_IRQHandler+0x1b6>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 f886 	bl	8008294 <SD_Write_IT>
 8007188:	e0d6      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a2 	beq.w	80072de <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f043 0202 	orr.w	r2, r3, #2
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	f043 0208 	orr.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e0:	f043 0220 	orr.w	r2, r3, #32
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	f043 0210 	orr.w	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <HAL_SD_IRQHandler+0x2cc>)
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007218:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007228:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007238:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007248:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f002 fa40 	bl	80096d4 <SDMMC_CmdStopTransfer>
 8007254:	4602      	mov	r2, r0
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800726e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00f      	beq.n	80072a4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f854 	bl	8007340 <HAL_SD_ErrorCallback>
}
 8007298:	e04e      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
 800729a:	bf00      	nop
 800729c:	ffff3ec5 	.word	0xffff3ec5
 80072a0:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d044      	beq.n	8007338 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d040      	beq.n	8007338 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072c4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f832 	bl	8007340 <HAL_SD_ErrorCallback>
}
 80072dc:	e02c      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d025      	beq.n	8007338 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10c      	bne.n	800731e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f828 	bl	8008364 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007314:	e010      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 f810 	bl	800833c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800731c:	e00c      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 f811 	bl	8008350 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800732e:	e003      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fff9 	bl	8008328 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007336:	e7ff      	b.n	8007338 <HAL_SD_IRQHandler+0x364>
 8007338:	bf00      	nop
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	0f9b      	lsrs	r3, r3, #30
 8007364:	b2da      	uxtb	r2, r3
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736e:	0e9b      	lsrs	r3, r3, #26
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	b2da      	uxtb	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007380:	0e1b      	lsrs	r3, r3, #24
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	b2da      	uxtb	r2, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007392:	0c1b      	lsrs	r3, r3, #16
 8007394:	b2da      	uxtb	r2, r3
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b4:	0d1b      	lsrs	r3, r3, #20
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c0:	0c1b      	lsrs	r3, r3, #16
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d2:	0bdb      	lsrs	r3, r3, #15
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e4:	0b9b      	lsrs	r3, r3, #14
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f6:	0b5b      	lsrs	r3, r3, #13
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007408:	0b1b      	lsrs	r3, r3, #12
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	b2da      	uxtb	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2200      	movs	r2, #0
 800741a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d163      	bne.n	80074ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007428:	009a      	lsls	r2, r3, #2
 800742a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800742e:	4013      	ands	r3, r2
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007434:	0f92      	lsrs	r2, r2, #30
 8007436:	431a      	orrs	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007440:	0edb      	lsrs	r3, r3, #27
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	b2da      	uxtb	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007452:	0e1b      	lsrs	r3, r3, #24
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	b2da      	uxtb	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007464:	0d5b      	lsrs	r3, r3, #21
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	b2da      	uxtb	r2, r3
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007476:	0c9b      	lsrs	r3, r3, #18
 8007478:	b2db      	uxtb	r3, r3
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	b2da      	uxtb	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007488:	0bdb      	lsrs	r3, r3, #15
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	b2da      	uxtb	r2, r3
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	7e1b      	ldrb	r3, [r3, #24]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	3302      	adds	r3, #2
 80074ac:	2201      	movs	r2, #1
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074b6:	fb02 f203 	mul.w	r2, r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	7a1b      	ldrb	r3, [r3, #8]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	2201      	movs	r2, #1
 80074ca:	409a      	lsls	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80074d8:	0a52      	lsrs	r2, r2, #9
 80074da:	fb02 f203 	mul.w	r2, r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
 80074ea:	e031      	b.n	8007550 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d11d      	bne.n	8007530 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f8:	041b      	lsls	r3, r3, #16
 80074fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	431a      	orrs	r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	3301      	adds	r3, #1
 8007510:	029a      	lsls	r2, r3, #10
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007524:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	655a      	str	r2, [r3, #84]	; 0x54
 800752e:	e00f      	b.n	8007550 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a58      	ldr	r2, [pc, #352]	; (8007698 <HAL_SD_GetCardCSD+0x344>)
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e09d      	b.n	800768c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007554:	0b9b      	lsrs	r3, r3, #14
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	b2da      	uxtb	r2, r3
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007566:	09db      	lsrs	r3, r3, #7
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756e:	b2da      	uxtb	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007588:	0fdb      	lsrs	r3, r3, #31
 800758a:	b2da      	uxtb	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007594:	0f5b      	lsrs	r3, r3, #29
 8007596:	b2db      	uxtb	r3, r3
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	b2da      	uxtb	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a6:	0e9b      	lsrs	r3, r3, #26
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b8:	0d9b      	lsrs	r3, r3, #22
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ca:	0d5b      	lsrs	r3, r3, #21
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075fa:	0bdb      	lsrs	r3, r3, #15
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800760e:	0b9b      	lsrs	r3, r3, #14
 8007610:	b2db      	uxtb	r3, r3
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	b2da      	uxtb	r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007622:	0b5b      	lsrs	r3, r3, #13
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	b2da      	uxtb	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007636:	0b1b      	lsrs	r3, r3, #12
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764a:	0a9b      	lsrs	r3, r3, #10
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	b2da      	uxtb	r2, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800765e:	0a1b      	lsrs	r3, r3, #8
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	b2da      	uxtb	r2, r3
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	1fe00fff 	.word	0x1fe00fff

0800769c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b094      	sub	sp, #80	; 0x50
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80076ac:	f107 0308 	add.w	r3, r7, #8
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fb4a 	bl	8007d4c <SD_SendSDStatus>
 80076b8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80076ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d011      	beq.n	80076e4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a4f      	ldr	r2, [pc, #316]	; (8007804 <HAL_SD_GetCardStatus+0x168>)
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80076e2:	e070      	b.n	80077c6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	099b      	lsrs	r3, r3, #6
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	0a1b      	lsrs	r3, r3, #8
 8007708:	b29b      	uxth	r3, r3
 800770a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800770e:	b29a      	uxth	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	0e1b      	lsrs	r3, r3, #24
 8007714:	b29b      	uxth	r3, r3
 8007716:	4313      	orrs	r3, r2
 8007718:	b29a      	uxth	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	061a      	lsls	r2, r3, #24
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800772a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007734:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	0e1b      	lsrs	r3, r3, #24
 800773a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	b2da      	uxtb	r2, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	0d1b      	lsrs	r3, r3, #20
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	b2da      	uxtb	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	b29b      	uxth	r3, r3
 8007768:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800776c:	b29a      	uxth	r2, r3
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	b29b      	uxth	r3, r3
 8007772:	b2db      	uxtb	r3, r3
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	0a9b      	lsrs	r3, r3, #10
 8007782:	b2db      	uxtb	r3, r3
 8007784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007788:	b2da      	uxtb	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	b2da      	uxtb	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	0e1b      	lsrs	r3, r3, #24
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fed0 	bl	8009574 <SDMMC_CmdBlockLength>
 80077d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80077d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00d      	beq.n	80077f8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a08      	ldr	r2, [pc, #32]	; (8007804 <HAL_SD_GetCardStatus+0x168>)
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077e8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80077f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3750      	adds	r7, #80	; 0x50
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	1fe00fff 	.word	0x1fe00fff

08007808 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b08d      	sub	sp, #52	; 0x34
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2203      	movs	r2, #3
 8007874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	2b03      	cmp	r3, #3
 800787e:	d02e      	beq.n	80078de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007886:	d106      	bne.n	8007896 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	635a      	str	r2, [r3, #52]	; 0x34
 8007894:	e029      	b.n	80078ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800789c:	d10a      	bne.n	80078b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fb4c 	bl	8007f3c <SD_WideBus_Enable>
 80078a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	635a      	str	r2, [r3, #52]	; 0x34
 80078b2:	e01a      	b.n	80078ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb89 	bl	8007fd2 <SD_WideBus_Disable>
 80078c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	635a      	str	r2, [r3, #52]	; 0x34
 80078ce:	e00c      	b.n	80078ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	635a      	str	r2, [r3, #52]	; 0x34
 80078dc:	e005      	b.n	80078ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a5e      	ldr	r2, [pc, #376]	; (8007a70 <HAL_SD_ConfigWideBusOperation+0x210>)
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007900:	e094      	b.n	8007a2c <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007902:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007906:	f7fd feb7 	bl	8005678 <HAL_RCCEx_GetPeriphCLKFreq>
 800790a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8083 	beq.w	8007a1a <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695a      	ldr	r2, [r3, #20]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4950      	ldr	r1, [pc, #320]	; (8007a74 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007932:	fba1 1303 	umull	r1, r3, r1, r3
 8007936:	0e1b      	lsrs	r3, r3, #24
 8007938:	429a      	cmp	r2, r3
 800793a:	d303      	bcc.n	8007944 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	e05a      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794c:	d103      	bne.n	8007956 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	e051      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795e:	d126      	bne.n	80079ae <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10e      	bne.n	8007986 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4a43      	ldr	r2, [pc, #268]	; (8007a78 <HAL_SD_ConfigWideBusOperation+0x218>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d906      	bls.n	800797e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4a40      	ldr	r2, [pc, #256]	; (8007a74 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	0e5b      	lsrs	r3, r3, #25
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	e03d      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	e039      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007992:	4a39      	ldr	r2, [pc, #228]	; (8007a78 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d906      	bls.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	4a36      	ldr	r2, [pc, #216]	; (8007a74 <HAL_SD_ConfigWideBusOperation+0x214>)
 800799c:	fba2 2303 	umull	r2, r3, r2, r3
 80079a0:	0e5b      	lsrs	r3, r3, #25
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	e029      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	61bb      	str	r3, [r7, #24]
 80079ac:	e025      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10e      	bne.n	80079d4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4a30      	ldr	r2, [pc, #192]	; (8007a7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d906      	bls.n	80079cc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4a2c      	ldr	r2, [pc, #176]	; (8007a74 <HAL_SD_ConfigWideBusOperation+0x214>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	0e1b      	lsrs	r3, r3, #24
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	e016      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e012      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e0:	4a26      	ldr	r2, [pc, #152]	; (8007a7c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d906      	bls.n	80079f4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <HAL_SD_ConfigWideBusOperation+0x214>)
 80079ea:	fba2 2303 	umull	r2, r3, r2, r3
 80079ee:	0e1b      	lsrs	r3, r3, #24
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e002      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681c      	ldr	r4, [r3, #0]
 80079fe:	466a      	mov	r2, sp
 8007a00:	f107 0314 	add.w	r3, r7, #20
 8007a04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a08:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a12:	4620      	mov	r0, r4
 8007a14:	f001 fcd0 	bl	80093b8 <SDMMC_Init>
 8007a18:	e008      	b.n	8007a2c <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 fd9d 	bl	8009574 <SDMMC_CmdBlockLength>
 8007a3a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00c      	beq.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <HAL_SD_ConfigWideBusOperation+0x210>)
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	372c      	adds	r7, #44	; 0x2c
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd90      	pop	{r4, r7, pc}
 8007a70:	1fe00fff 	.word	0x1fe00fff
 8007a74:	55e63b89 	.word	0x55e63b89
 8007a78:	02faf080 	.word	0x02faf080
 8007a7c:	017d7840 	.word	0x017d7840

08007a80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa2a 	bl	8007eec <SD_SendStatus>
 8007a98:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	0a5b      	lsrs	r3, r3, #9
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007ab6:	693b      	ldr	r3, [r7, #16]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b090      	sub	sp, #64	; 0x40
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 fcca 	bl	800946a <SDMMC_GetPowerState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d102      	bne.n	8007ae2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007adc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007ae0:	e0a5      	b.n	8007c2e <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d02e      	beq.n	8007b48 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 ff15 	bl	800991e <SDMMC_CmdSendCID>
 8007af4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <SD_InitCard+0x40>
    {
      return errorstate;
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afe:	e096      	b.n	8007c2e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fcf5 	bl	80094f6 <SDMMC_GetResponse>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2104      	movs	r1, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f001 fcec 	bl	80094f6 <SDMMC_GetResponse>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2108      	movs	r1, #8
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 fce3 	bl	80094f6 <SDMMC_GetResponse>
 8007b30:	4602      	mov	r2, r0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	210c      	movs	r1, #12
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 fcda 	bl	80094f6 <SDMMC_GetResponse>
 8007b42:	4602      	mov	r2, r0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d00d      	beq.n	8007b6c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f107 020e 	add.w	r2, r7, #14
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 ff1e 	bl	800999c <SDMMC_CmdSetRelAdd>
 8007b60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <SD_InitCard+0xac>
    {
      return errorstate;
 8007b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6a:	e060      	b.n	8007c2e <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d036      	beq.n	8007be2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f001 fee7 	bl	800995c <SDMMC_CmdSendCSD>
 8007b8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <SD_InitCard+0xda>
    {
      return errorstate;
 8007b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b98:	e049      	b.n	8007c2e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fca8 	bl	80094f6 <SDMMC_GetResponse>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2104      	movs	r1, #4
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 fc9f 	bl	80094f6 <SDMMC_GetResponse>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2108      	movs	r1, #8
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fc96 	bl	80094f6 <SDMMC_GetResponse>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	210c      	movs	r1, #12
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 fc8d 	bl	80094f6 <SDMMC_GetResponse>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2104      	movs	r1, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 fc84 	bl	80094f6 <SDMMC_GetResponse>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	0d1a      	lsrs	r2, r3, #20
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007bf6:	f107 0310 	add.w	r3, r7, #16
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fba9 	bl	8007354 <HAL_SD_GetCardCSD>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c0c:	e00f      	b.n	8007c2e <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c16:	041b      	lsls	r3, r3, #16
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f001 fd96 	bl	800974c <SDMMC_CmdSelDesel>
 8007c20:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <SD_InitCard+0x16c>
  {
    return errorstate;
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	e000      	b.n	8007c2e <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3740      	adds	r7, #64	; 0x40
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 fd9e 	bl	8009792 <SDMMC_CmdGoIdleState>
 8007c56:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	e06e      	b.n	8007d40 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fdb1 	bl	80097ce <SDMMC_CmdOperCond>
 8007c6c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00d      	beq.n	8007c90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f001 fd87 	bl	8009792 <SDMMC_CmdGoIdleState>
 8007c84:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	e057      	b.n	8007d40 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d137      	bne.n	8007d0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 fdb2 	bl	800980e <SDMMC_CmdAppCommand>
 8007caa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d02d      	beq.n	8007d0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cb6:	e043      	b.n	8007d40 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 fda5 	bl	800980e <SDMMC_CmdAppCommand>
 8007cc4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <SD_PowerON+0x98>
    {
      return errorstate;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	e037      	b.n	8007d40 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	491c      	ldr	r1, [pc, #112]	; (8007d48 <SD_PowerON+0x110>)
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 fdbc 	bl	8009854 <SDMMC_CmdAppOperCommand>
 8007cdc:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ce8:	e02a      	b.n	8007d40 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fc00 	bl	80094f6 <SDMMC_GetResponse>
 8007cf6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0fdb      	lsrs	r3, r3, #31
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <SD_PowerON+0xcc>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e000      	b.n	8007d06 <SD_PowerON+0xce>
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]

    count++;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d802      	bhi.n	8007d1e <SD_PowerON+0xe6>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0cc      	beq.n	8007cb8 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d902      	bls.n	8007d2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d2c:	e008      	b.n	8007d40 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	c1100000 	.word	0xc1100000

08007d4c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08c      	sub	sp, #48	; 0x30
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d56:	f7fa f8db 	bl	8001f10 <HAL_GetTick>
 8007d5a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2100      	movs	r1, #0
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 fbc5 	bl	80094f6 <SDMMC_GetResponse>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d76:	d102      	bne.n	8007d7e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d7c:	e0b0      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2140      	movs	r1, #64	; 0x40
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fbf5 	bl	8009574 <SDMMC_CmdBlockLength>
 8007d8a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	e0a0      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f001 fd2f 	bl	800980e <SDMMC_CmdAppCommand>
 8007db0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	e08d      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007dca:	2340      	movs	r3, #64	; 0x40
 8007dcc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007dce:	2360      	movs	r3, #96	; 0x60
 8007dd0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f107 0208 	add.w	r2, r7, #8
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 fb97 	bl	800951c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fe17 	bl	8009a26 <SDMMC_CmdStatusRegister>
 8007df8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d02b      	beq.n	8007e58 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	e069      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d013      	beq.n	8007e42 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e1e:	e00d      	b.n	8007e3c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 faf1 	bl	800940c <SDMMC_ReadFIFO>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	601a      	str	r2, [r3, #0]
        pData++;
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	3304      	adds	r3, #4
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	3301      	adds	r3, #1
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b07      	cmp	r3, #7
 8007e40:	d9ee      	bls.n	8007e20 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e42:	f7fa f865 	bl	8001f10 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d102      	bne.n	8007e58 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e56:	e043      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0d2      	beq.n	8007e0c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e74:	2308      	movs	r3, #8
 8007e76:	e033      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e02a      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d017      	beq.n	8007ec8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e98:	2320      	movs	r3, #32
 8007e9a:	e021      	b.n	8007ee0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fab3 	bl	800940c <SDMMC_ReadFIFO>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	601a      	str	r2, [r3, #0]
    pData++;
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	3304      	adds	r3, #4
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007eb2:	f7fa f82d 	bl	8001f10 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec0:	d102      	bne.n	8007ec8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ec2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ec6:	e00b      	b.n	8007ee0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e2      	bne.n	8007e9c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a03      	ldr	r2, [pc, #12]	; (8007ee8 <SD_SendSDStatus+0x19c>)
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3730      	adds	r7, #48	; 0x30
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	18000f3a 	.word	0x18000f3a

08007eec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007efc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f00:	e018      	b.n	8007f34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f001 fd66 	bl	80099e0 <SDMMC_CmdSendStatus>
 8007f14:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	e009      	b.n	8007f34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 fae5 	bl	80094f6 <SDMMC_GetResponse>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2100      	movs	r1, #0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 facf 	bl	80094f6 <SDMMC_GetResponse>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f62:	d102      	bne.n	8007f6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f68:	e02f      	b.n	8007fca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f879 	bl	8008068 <SD_FindSCR>
 8007f76:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	e023      	b.n	8007fca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01c      	beq.n	8007fc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f94:	041b      	lsls	r3, r3, #16
 8007f96:	4619      	mov	r1, r3
 8007f98:	4610      	mov	r0, r2
 8007f9a:	f001 fc38 	bl	800980e <SDMMC_CmdAppCommand>
 8007f9e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	e00f      	b.n	8007fca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2102      	movs	r1, #2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fc6f 	bl	8009894 <SDMMC_CmdBusWidth>
 8007fb6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	e003      	b.n	8007fca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e001      	b.n	8007fca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b086      	sub	sp, #24
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fa84 	bl	80094f6 <SDMMC_GetResponse>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff8:	d102      	bne.n	8008000 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ffe:	e02f      	b.n	8008060 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f82e 	bl	8008068 <SD_FindSCR>
 800800c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	e023      	b.n	8008060 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01c      	beq.n	800805c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802a:	041b      	lsls	r3, r3, #16
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f001 fbed 	bl	800980e <SDMMC_CmdAppCommand>
 8008034:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	e00f      	b.n	8008060 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fc24 	bl	8009894 <SDMMC_CmdBusWidth>
 800804c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	e003      	b.n	8008060 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008058:	2300      	movs	r3, #0
 800805a:	e001      	b.n	8008060 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800805c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08e      	sub	sp, #56	; 0x38
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008072:	f7f9 ff4d 	bl	8001f10 <HAL_GetTick>
 8008076:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2108      	movs	r1, #8
 800808e:	4618      	mov	r0, r3
 8008090:	f001 fa70 	bl	8009574 <SDMMC_CmdBlockLength>
 8008094:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	e0ad      	b.n	80081fc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f001 fbae 	bl	800980e <SDMMC_CmdAppCommand>
 80080b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <SD_FindSCR+0x56>
  {
    return errorstate;
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	e09e      	b.n	80081fc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080be:	f04f 33ff 	mov.w	r3, #4294967295
 80080c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80080c4:	2308      	movs	r3, #8
 80080c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80080c8:	2330      	movs	r3, #48	; 0x30
 80080ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080cc:	2302      	movs	r3, #2
 80080ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f107 0210 	add.w	r2, r7, #16
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fa1a 	bl	800951c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fbf4 	bl	80098da <SDMMC_CmdSendSCR>
 80080f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d027      	beq.n	800814a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	e07e      	b.n	80081fc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d113      	bne.n	8008134 <SD_FindSCR+0xcc>
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	2b00      	cmp	r3, #0
 8008110:	d110      	bne.n	8008134 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f001 f978 	bl	800940c <SDMMC_ReadFIFO>
 800811c:	4603      	mov	r3, r0
 800811e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f001 f971 	bl	800940c <SDMMC_ReadFIFO>
 800812a:	4603      	mov	r3, r0
 800812c:	60fb      	str	r3, [r7, #12]
      index++;
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	3301      	adds	r3, #1
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008134:	f7f9 feec 	bl	8001f10 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d102      	bne.n	800814a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008148:	e058      	b.n	80081fc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008150:	f240 532a 	movw	r3, #1322	; 0x52a
 8008154:	4013      	ands	r3, r2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0d1      	beq.n	80080fe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2208      	movs	r2, #8
 800816e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008170:	2308      	movs	r3, #8
 8008172:	e043      	b.n	80081fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2202      	movs	r2, #2
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800818a:	2302      	movs	r3, #2
 800818c:	e036      	b.n	80081fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2220      	movs	r2, #32
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80081a4:	2320      	movs	r3, #32
 80081a6:	e029      	b.n	80081fc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a15      	ldr	r2, [pc, #84]	; (8008204 <SD_FindSCR+0x19c>)
 80081ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	061a      	lsls	r2, r3, #24
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	0a1b      	lsrs	r3, r3, #8
 80081c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80081c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	0e1b      	lsrs	r3, r3, #24
 80081cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	601a      	str	r2, [r3, #0]
    scr++;
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	3304      	adds	r3, #4
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	061a      	lsls	r2, r3, #24
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	021b      	lsls	r3, r3, #8
 80081e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	0a1b      	lsrs	r3, r3, #8
 80081ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	0e1b      	lsrs	r3, r3, #24
 80081f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3738      	adds	r7, #56	; 0x38
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	18000f3a 	.word	0x18000f3a

08008208 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	2b1f      	cmp	r3, #31
 800821c:	d936      	bls.n	800828c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e027      	b.n	8008274 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f001 f8ef 	bl	800940c <SDMMC_ReadFIFO>
 800822e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	3301      	adds	r3, #1
 800823c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	0a1b      	lsrs	r3, r3, #8
 8008242:	b2da      	uxtb	r2, r3
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3301      	adds	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	b2da      	uxtb	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3301      	adds	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	0e1b      	lsrs	r3, r3, #24
 8008262:	b2da      	uxtb	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3301      	adds	r3, #1
 800826c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	3301      	adds	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b07      	cmp	r3, #7
 8008278:	d9d4      	bls.n	8008224 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008284:	f1a3 0220 	sub.w	r2, r3, #32
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800828c:	bf00      	nop
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	2b1f      	cmp	r3, #31
 80082a8:	d93a      	bls.n	8008320 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	e02b      	b.n	8008308 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3301      	adds	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	021a      	lsls	r2, r3, #8
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3301      	adds	r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	041a      	lsls	r2, r3, #16
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3301      	adds	r3, #1
 80082de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	061a      	lsls	r2, r3, #24
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
      tmp++;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	3301      	adds	r3, #1
 80082f0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f107 020c 	add.w	r2, r7, #12
 80082fa:	4611      	mov	r1, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 f892 	bl	8009426 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	3301      	adds	r3, #1
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b07      	cmp	r3, #7
 800830c:	d9d0      	bls.n	80082b0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	f1a3 0220 	sub.w	r2, r3, #32
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	621a      	str	r2, [r3, #32]
  }
}
 8008320:	bf00      	nop
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e042      	b.n	8008410 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7f9 fb09 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2224      	movs	r2, #36	; 0x24
 80083a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f82c 	bl	8008418 <UART_SetConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e022      	b.n	8008410 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd80 	bl	8008ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fe07 	bl	800901c <UART_CheckIdleState>
 800840e:	4603      	mov	r3, r0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008418:	b5b0      	push	{r4, r5, r7, lr}
 800841a:	b08e      	sub	sp, #56	; 0x38
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	4313      	orrs	r3, r2
 800843c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	4bbf      	ldr	r3, [pc, #764]	; (8008744 <UART_SetConfig+0x32c>)
 8008446:	4013      	ands	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800844e:	430b      	orrs	r3, r1
 8008450:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4ab5      	ldr	r2, [pc, #724]	; (8008748 <UART_SetConfig+0x330>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d004      	beq.n	8008482 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800847e:	4313      	orrs	r3, r2
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	4bb0      	ldr	r3, [pc, #704]	; (800874c <UART_SetConfig+0x334>)
 800848a:	4013      	ands	r3, r2
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008492:	430b      	orrs	r3, r1
 8008494:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	f023 010f 	bic.w	r1, r3, #15
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4aa7      	ldr	r2, [pc, #668]	; (8008750 <UART_SetConfig+0x338>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d176      	bne.n	80085a4 <UART_SetConfig+0x18c>
 80084b6:	4ba7      	ldr	r3, [pc, #668]	; (8008754 <UART_SetConfig+0x33c>)
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084be:	2b28      	cmp	r3, #40	; 0x28
 80084c0:	d86c      	bhi.n	800859c <UART_SetConfig+0x184>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0xb0>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	0800856d 	.word	0x0800856d
 80084cc:	0800859d 	.word	0x0800859d
 80084d0:	0800859d 	.word	0x0800859d
 80084d4:	0800859d 	.word	0x0800859d
 80084d8:	0800859d 	.word	0x0800859d
 80084dc:	0800859d 	.word	0x0800859d
 80084e0:	0800859d 	.word	0x0800859d
 80084e4:	0800859d 	.word	0x0800859d
 80084e8:	08008575 	.word	0x08008575
 80084ec:	0800859d 	.word	0x0800859d
 80084f0:	0800859d 	.word	0x0800859d
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	0800859d 	.word	0x0800859d
 80084fc:	0800859d 	.word	0x0800859d
 8008500:	0800859d 	.word	0x0800859d
 8008504:	0800859d 	.word	0x0800859d
 8008508:	0800857d 	.word	0x0800857d
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800859d 	.word	0x0800859d
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	08008585 	.word	0x08008585
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	0800859d 	.word	0x0800859d
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800858d 	.word	0x0800858d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	08008595 	.word	0x08008595
 800856c:	2301      	movs	r3, #1
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e222      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008574:	2304      	movs	r3, #4
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e21e      	b.n	80089ba <UART_SetConfig+0x5a2>
 800857c:	2308      	movs	r3, #8
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e21a      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008584:	2310      	movs	r3, #16
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858a:	e216      	b.n	80089ba <UART_SetConfig+0x5a2>
 800858c:	2320      	movs	r3, #32
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	e212      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008594:	2340      	movs	r3, #64	; 0x40
 8008596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859a:	e20e      	b.n	80089ba <UART_SetConfig+0x5a2>
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a2:	e20a      	b.n	80089ba <UART_SetConfig+0x5a2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a6b      	ldr	r2, [pc, #428]	; (8008758 <UART_SetConfig+0x340>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d130      	bne.n	8008610 <UART_SetConfig+0x1f8>
 80085ae:	4b69      	ldr	r3, [pc, #420]	; (8008754 <UART_SetConfig+0x33c>)
 80085b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d826      	bhi.n	8008608 <UART_SetConfig+0x1f0>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0x1a8>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085d9 	.word	0x080085d9
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	080085f1 	.word	0x080085f1
 80085d0:	080085f9 	.word	0x080085f9
 80085d4:	08008601 	.word	0x08008601
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085de:	e1ec      	b.n	80089ba <UART_SetConfig+0x5a2>
 80085e0:	2304      	movs	r3, #4
 80085e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e6:	e1e8      	b.n	80089ba <UART_SetConfig+0x5a2>
 80085e8:	2308      	movs	r3, #8
 80085ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ee:	e1e4      	b.n	80089ba <UART_SetConfig+0x5a2>
 80085f0:	2310      	movs	r3, #16
 80085f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085f6:	e1e0      	b.n	80089ba <UART_SetConfig+0x5a2>
 80085f8:	2320      	movs	r3, #32
 80085fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fe:	e1dc      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008606:	e1d8      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008608:	2380      	movs	r3, #128	; 0x80
 800860a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860e:	e1d4      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a51      	ldr	r2, [pc, #324]	; (800875c <UART_SetConfig+0x344>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d130      	bne.n	800867c <UART_SetConfig+0x264>
 800861a:	4b4e      	ldr	r3, [pc, #312]	; (8008754 <UART_SetConfig+0x33c>)
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b05      	cmp	r3, #5
 8008624:	d826      	bhi.n	8008674 <UART_SetConfig+0x25c>
 8008626:	a201      	add	r2, pc, #4	; (adr r2, 800862c <UART_SetConfig+0x214>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	08008645 	.word	0x08008645
 8008630:	0800864d 	.word	0x0800864d
 8008634:	08008655 	.word	0x08008655
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008665 	.word	0x08008665
 8008640:	0800866d 	.word	0x0800866d
 8008644:	2300      	movs	r3, #0
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864a:	e1b6      	b.n	80089ba <UART_SetConfig+0x5a2>
 800864c:	2304      	movs	r3, #4
 800864e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008652:	e1b2      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008654:	2308      	movs	r3, #8
 8008656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865a:	e1ae      	b.n	80089ba <UART_SetConfig+0x5a2>
 800865c:	2310      	movs	r3, #16
 800865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008662:	e1aa      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008664:	2320      	movs	r3, #32
 8008666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866a:	e1a6      	b.n	80089ba <UART_SetConfig+0x5a2>
 800866c:	2340      	movs	r3, #64	; 0x40
 800866e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008672:	e1a2      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008674:	2380      	movs	r3, #128	; 0x80
 8008676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867a:	e19e      	b.n	80089ba <UART_SetConfig+0x5a2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a37      	ldr	r2, [pc, #220]	; (8008760 <UART_SetConfig+0x348>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d130      	bne.n	80086e8 <UART_SetConfig+0x2d0>
 8008686:	4b33      	ldr	r3, [pc, #204]	; (8008754 <UART_SetConfig+0x33c>)
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	2b05      	cmp	r3, #5
 8008690:	d826      	bhi.n	80086e0 <UART_SetConfig+0x2c8>
 8008692:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <UART_SetConfig+0x280>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086b1 	.word	0x080086b1
 800869c:	080086b9 	.word	0x080086b9
 80086a0:	080086c1 	.word	0x080086c1
 80086a4:	080086c9 	.word	0x080086c9
 80086a8:	080086d1 	.word	0x080086d1
 80086ac:	080086d9 	.word	0x080086d9
 80086b0:	2300      	movs	r3, #0
 80086b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b6:	e180      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086b8:	2304      	movs	r3, #4
 80086ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086be:	e17c      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086c0:	2308      	movs	r3, #8
 80086c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c6:	e178      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086c8:	2310      	movs	r3, #16
 80086ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ce:	e174      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086d0:	2320      	movs	r3, #32
 80086d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d6:	e170      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086d8:	2340      	movs	r3, #64	; 0x40
 80086da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086de:	e16c      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086e0:	2380      	movs	r3, #128	; 0x80
 80086e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086e6:	e168      	b.n	80089ba <UART_SetConfig+0x5a2>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1d      	ldr	r2, [pc, #116]	; (8008764 <UART_SetConfig+0x34c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d142      	bne.n	8008778 <UART_SetConfig+0x360>
 80086f2:	4b18      	ldr	r3, [pc, #96]	; (8008754 <UART_SetConfig+0x33c>)
 80086f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	d838      	bhi.n	8008770 <UART_SetConfig+0x358>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <UART_SetConfig+0x2ec>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	0800871d 	.word	0x0800871d
 8008708:	08008725 	.word	0x08008725
 800870c:	0800872d 	.word	0x0800872d
 8008710:	08008735 	.word	0x08008735
 8008714:	0800873d 	.word	0x0800873d
 8008718:	08008769 	.word	0x08008769
 800871c:	2300      	movs	r3, #0
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	e14a      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008724:	2304      	movs	r3, #4
 8008726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800872a:	e146      	b.n	80089ba <UART_SetConfig+0x5a2>
 800872c:	2308      	movs	r3, #8
 800872e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008732:	e142      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008734:	2310      	movs	r3, #16
 8008736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873a:	e13e      	b.n	80089ba <UART_SetConfig+0x5a2>
 800873c:	2320      	movs	r3, #32
 800873e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008742:	e13a      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008744:	cfff69f3 	.word	0xcfff69f3
 8008748:	58000c00 	.word	0x58000c00
 800874c:	11fff4ff 	.word	0x11fff4ff
 8008750:	40011000 	.word	0x40011000
 8008754:	58024400 	.word	0x58024400
 8008758:	40004400 	.word	0x40004400
 800875c:	40004800 	.word	0x40004800
 8008760:	40004c00 	.word	0x40004c00
 8008764:	40005000 	.word	0x40005000
 8008768:	2340      	movs	r3, #64	; 0x40
 800876a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876e:	e124      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008770:	2380      	movs	r3, #128	; 0x80
 8008772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008776:	e120      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4acc      	ldr	r2, [pc, #816]	; (8008ab0 <UART_SetConfig+0x698>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d176      	bne.n	8008870 <UART_SetConfig+0x458>
 8008782:	4bcc      	ldr	r3, [pc, #816]	; (8008ab4 <UART_SetConfig+0x69c>)
 8008784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800878a:	2b28      	cmp	r3, #40	; 0x28
 800878c:	d86c      	bhi.n	8008868 <UART_SetConfig+0x450>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <UART_SetConfig+0x37c>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	08008839 	.word	0x08008839
 8008798:	08008869 	.word	0x08008869
 800879c:	08008869 	.word	0x08008869
 80087a0:	08008869 	.word	0x08008869
 80087a4:	08008869 	.word	0x08008869
 80087a8:	08008869 	.word	0x08008869
 80087ac:	08008869 	.word	0x08008869
 80087b0:	08008869 	.word	0x08008869
 80087b4:	08008841 	.word	0x08008841
 80087b8:	08008869 	.word	0x08008869
 80087bc:	08008869 	.word	0x08008869
 80087c0:	08008869 	.word	0x08008869
 80087c4:	08008869 	.word	0x08008869
 80087c8:	08008869 	.word	0x08008869
 80087cc:	08008869 	.word	0x08008869
 80087d0:	08008869 	.word	0x08008869
 80087d4:	08008849 	.word	0x08008849
 80087d8:	08008869 	.word	0x08008869
 80087dc:	08008869 	.word	0x08008869
 80087e0:	08008869 	.word	0x08008869
 80087e4:	08008869 	.word	0x08008869
 80087e8:	08008869 	.word	0x08008869
 80087ec:	08008869 	.word	0x08008869
 80087f0:	08008869 	.word	0x08008869
 80087f4:	08008851 	.word	0x08008851
 80087f8:	08008869 	.word	0x08008869
 80087fc:	08008869 	.word	0x08008869
 8008800:	08008869 	.word	0x08008869
 8008804:	08008869 	.word	0x08008869
 8008808:	08008869 	.word	0x08008869
 800880c:	08008869 	.word	0x08008869
 8008810:	08008869 	.word	0x08008869
 8008814:	08008859 	.word	0x08008859
 8008818:	08008869 	.word	0x08008869
 800881c:	08008869 	.word	0x08008869
 8008820:	08008869 	.word	0x08008869
 8008824:	08008869 	.word	0x08008869
 8008828:	08008869 	.word	0x08008869
 800882c:	08008869 	.word	0x08008869
 8008830:	08008869 	.word	0x08008869
 8008834:	08008861 	.word	0x08008861
 8008838:	2301      	movs	r3, #1
 800883a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800883e:	e0bc      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008840:	2304      	movs	r3, #4
 8008842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008846:	e0b8      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008848:	2308      	movs	r3, #8
 800884a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800884e:	e0b4      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008850:	2310      	movs	r3, #16
 8008852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008856:	e0b0      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008858:	2320      	movs	r3, #32
 800885a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800885e:	e0ac      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008860:	2340      	movs	r3, #64	; 0x40
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e0a8      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008868:	2380      	movs	r3, #128	; 0x80
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e0a4      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a90      	ldr	r2, [pc, #576]	; (8008ab8 <UART_SetConfig+0x6a0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d130      	bne.n	80088dc <UART_SetConfig+0x4c4>
 800887a:	4b8e      	ldr	r3, [pc, #568]	; (8008ab4 <UART_SetConfig+0x69c>)
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b05      	cmp	r3, #5
 8008884:	d826      	bhi.n	80088d4 <UART_SetConfig+0x4bc>
 8008886:	a201      	add	r2, pc, #4	; (adr r2, 800888c <UART_SetConfig+0x474>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088a5 	.word	0x080088a5
 8008890:	080088ad 	.word	0x080088ad
 8008894:	080088b5 	.word	0x080088b5
 8008898:	080088bd 	.word	0x080088bd
 800889c:	080088c5 	.word	0x080088c5
 80088a0:	080088cd 	.word	0x080088cd
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088aa:	e086      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088ac:	2304      	movs	r3, #4
 80088ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088b2:	e082      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088b4:	2308      	movs	r3, #8
 80088b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ba:	e07e      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088bc:	2310      	movs	r3, #16
 80088be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088c2:	e07a      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088c4:	2320      	movs	r3, #32
 80088c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ca:	e076      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088cc:	2340      	movs	r3, #64	; 0x40
 80088ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d2:	e072      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088d4:	2380      	movs	r3, #128	; 0x80
 80088d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088da:	e06e      	b.n	80089ba <UART_SetConfig+0x5a2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a76      	ldr	r2, [pc, #472]	; (8008abc <UART_SetConfig+0x6a4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d130      	bne.n	8008948 <UART_SetConfig+0x530>
 80088e6:	4b73      	ldr	r3, [pc, #460]	; (8008ab4 <UART_SetConfig+0x69c>)
 80088e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	2b05      	cmp	r3, #5
 80088f0:	d826      	bhi.n	8008940 <UART_SetConfig+0x528>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <UART_SetConfig+0x4e0>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	08008911 	.word	0x08008911
 80088fc:	08008919 	.word	0x08008919
 8008900:	08008921 	.word	0x08008921
 8008904:	08008929 	.word	0x08008929
 8008908:	08008931 	.word	0x08008931
 800890c:	08008939 	.word	0x08008939
 8008910:	2300      	movs	r3, #0
 8008912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008916:	e050      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008918:	2304      	movs	r3, #4
 800891a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891e:	e04c      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008920:	2308      	movs	r3, #8
 8008922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008926:	e048      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008928:	2310      	movs	r3, #16
 800892a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800892e:	e044      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008930:	2320      	movs	r3, #32
 8008932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008936:	e040      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008938:	2340      	movs	r3, #64	; 0x40
 800893a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800893e:	e03c      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008940:	2380      	movs	r3, #128	; 0x80
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e038      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a5c      	ldr	r2, [pc, #368]	; (8008ac0 <UART_SetConfig+0x6a8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d130      	bne.n	80089b4 <UART_SetConfig+0x59c>
 8008952:	4b58      	ldr	r3, [pc, #352]	; (8008ab4 <UART_SetConfig+0x69c>)
 8008954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b05      	cmp	r3, #5
 800895c:	d826      	bhi.n	80089ac <UART_SetConfig+0x594>
 800895e:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <UART_SetConfig+0x54c>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	0800897d 	.word	0x0800897d
 8008968:	08008985 	.word	0x08008985
 800896c:	0800898d 	.word	0x0800898d
 8008970:	08008995 	.word	0x08008995
 8008974:	0800899d 	.word	0x0800899d
 8008978:	080089a5 	.word	0x080089a5
 800897c:	2302      	movs	r3, #2
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	e01a      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008984:	2304      	movs	r3, #4
 8008986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898a:	e016      	b.n	80089ba <UART_SetConfig+0x5a2>
 800898c:	2308      	movs	r3, #8
 800898e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008992:	e012      	b.n	80089ba <UART_SetConfig+0x5a2>
 8008994:	2310      	movs	r3, #16
 8008996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800899a:	e00e      	b.n	80089ba <UART_SetConfig+0x5a2>
 800899c:	2320      	movs	r3, #32
 800899e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089a2:	e00a      	b.n	80089ba <UART_SetConfig+0x5a2>
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089aa:	e006      	b.n	80089ba <UART_SetConfig+0x5a2>
 80089ac:	2380      	movs	r3, #128	; 0x80
 80089ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b2:	e002      	b.n	80089ba <UART_SetConfig+0x5a2>
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a40      	ldr	r2, [pc, #256]	; (8008ac0 <UART_SetConfig+0x6a8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	f040 80ef 	bne.w	8008ba4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	dc46      	bgt.n	8008a5c <UART_SetConfig+0x644>
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	f2c0 8081 	blt.w	8008ad6 <UART_SetConfig+0x6be>
 80089d4:	3b02      	subs	r3, #2
 80089d6:	2b1e      	cmp	r3, #30
 80089d8:	d87d      	bhi.n	8008ad6 <UART_SetConfig+0x6be>
 80089da:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <UART_SetConfig+0x5c8>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a63 	.word	0x08008a63
 80089e4:	08008ad7 	.word	0x08008ad7
 80089e8:	08008a6b 	.word	0x08008a6b
 80089ec:	08008ad7 	.word	0x08008ad7
 80089f0:	08008ad7 	.word	0x08008ad7
 80089f4:	08008ad7 	.word	0x08008ad7
 80089f8:	08008a7b 	.word	0x08008a7b
 80089fc:	08008ad7 	.word	0x08008ad7
 8008a00:	08008ad7 	.word	0x08008ad7
 8008a04:	08008ad7 	.word	0x08008ad7
 8008a08:	08008ad7 	.word	0x08008ad7
 8008a0c:	08008ad7 	.word	0x08008ad7
 8008a10:	08008ad7 	.word	0x08008ad7
 8008a14:	08008ad7 	.word	0x08008ad7
 8008a18:	08008a8b 	.word	0x08008a8b
 8008a1c:	08008ad7 	.word	0x08008ad7
 8008a20:	08008ad7 	.word	0x08008ad7
 8008a24:	08008ad7 	.word	0x08008ad7
 8008a28:	08008ad7 	.word	0x08008ad7
 8008a2c:	08008ad7 	.word	0x08008ad7
 8008a30:	08008ad7 	.word	0x08008ad7
 8008a34:	08008ad7 	.word	0x08008ad7
 8008a38:	08008ad7 	.word	0x08008ad7
 8008a3c:	08008ad7 	.word	0x08008ad7
 8008a40:	08008ad7 	.word	0x08008ad7
 8008a44:	08008ad7 	.word	0x08008ad7
 8008a48:	08008ad7 	.word	0x08008ad7
 8008a4c:	08008ad7 	.word	0x08008ad7
 8008a50:	08008ad7 	.word	0x08008ad7
 8008a54:	08008ad7 	.word	0x08008ad7
 8008a58:	08008ac9 	.word	0x08008ac9
 8008a5c:	2b40      	cmp	r3, #64	; 0x40
 8008a5e:	d036      	beq.n	8008ace <UART_SetConfig+0x6b6>
 8008a60:	e039      	b.n	8008ad6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a62:	f7fd fadb 	bl	800601c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a68:	e03b      	b.n	8008ae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6a:	f107 0314 	add.w	r3, r7, #20
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fd faea 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a78:	e033      	b.n	8008ae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fd fc36 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a88:	e02b      	b.n	8008ae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <UART_SetConfig+0x69c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a96:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <UART_SetConfig+0x69c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	4a08      	ldr	r2, [pc, #32]	; (8008ac4 <UART_SetConfig+0x6ac>)
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008aa8:	e01b      	b.n	8008ae2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <UART_SetConfig+0x6ac>)
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aae:	e018      	b.n	8008ae2 <UART_SetConfig+0x6ca>
 8008ab0:	40011400 	.word	0x40011400
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	40007800 	.word	0x40007800
 8008abc:	40007c00 	.word	0x40007c00
 8008ac0:	58000c00 	.word	0x58000c00
 8008ac4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ac8:	4bc4      	ldr	r3, [pc, #784]	; (8008ddc <UART_SetConfig+0x9c4>)
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008acc:	e009      	b.n	8008ae2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ad4:	e005      	b.n	8008ae2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 81da 	beq.w	8008e9e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	4abc      	ldr	r2, [pc, #752]	; (8008de0 <UART_SetConfig+0x9c8>)
 8008af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af4:	461a      	mov	r2, r3
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008afc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	6a3a      	ldr	r2, [r7, #32]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d305      	bcc.n	8008b1a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d903      	bls.n	8008b22 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008b20:	e1bd      	b.n	8008e9e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b24:	4618      	mov	r0, r3
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	4aac      	ldr	r2, [pc, #688]	; (8008de0 <UART_SetConfig+0x9c8>)
 8008b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	f7f7 fc29 	bl	8000390 <__aeabi_uldivmod>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4610      	mov	r0, r2
 8008b44:	4619      	mov	r1, r3
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	020b      	lsls	r3, r1, #8
 8008b50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b54:	0202      	lsls	r2, r0, #8
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	6849      	ldr	r1, [r1, #4]
 8008b5a:	0849      	lsrs	r1, r1, #1
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	f04f 0100 	mov.w	r1, #0
 8008b62:	1814      	adds	r4, r2, r0
 8008b64:	eb43 0501 	adc.w	r5, r3, r1
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f04f 0300 	mov.w	r3, #0
 8008b72:	4620      	mov	r0, r4
 8008b74:	4629      	mov	r1, r5
 8008b76:	f7f7 fc0b 	bl	8000390 <__aeabi_uldivmod>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4613      	mov	r3, r2
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b88:	d308      	bcc.n	8008b9c <UART_SetConfig+0x784>
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b90:	d204      	bcs.n	8008b9c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	e180      	b.n	8008e9e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ba2:	e17c      	b.n	8008e9e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bac:	f040 80bf 	bne.w	8008d2e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	dc49      	bgt.n	8008c4c <UART_SetConfig+0x834>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	db7c      	blt.n	8008cb6 <UART_SetConfig+0x89e>
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d87a      	bhi.n	8008cb6 <UART_SetConfig+0x89e>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x7b0>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008c53 	.word	0x08008c53
 8008bcc:	08008c5b 	.word	0x08008c5b
 8008bd0:	08008cb7 	.word	0x08008cb7
 8008bd4:	08008cb7 	.word	0x08008cb7
 8008bd8:	08008c63 	.word	0x08008c63
 8008bdc:	08008cb7 	.word	0x08008cb7
 8008be0:	08008cb7 	.word	0x08008cb7
 8008be4:	08008cb7 	.word	0x08008cb7
 8008be8:	08008c73 	.word	0x08008c73
 8008bec:	08008cb7 	.word	0x08008cb7
 8008bf0:	08008cb7 	.word	0x08008cb7
 8008bf4:	08008cb7 	.word	0x08008cb7
 8008bf8:	08008cb7 	.word	0x08008cb7
 8008bfc:	08008cb7 	.word	0x08008cb7
 8008c00:	08008cb7 	.word	0x08008cb7
 8008c04:	08008cb7 	.word	0x08008cb7
 8008c08:	08008c83 	.word	0x08008c83
 8008c0c:	08008cb7 	.word	0x08008cb7
 8008c10:	08008cb7 	.word	0x08008cb7
 8008c14:	08008cb7 	.word	0x08008cb7
 8008c18:	08008cb7 	.word	0x08008cb7
 8008c1c:	08008cb7 	.word	0x08008cb7
 8008c20:	08008cb7 	.word	0x08008cb7
 8008c24:	08008cb7 	.word	0x08008cb7
 8008c28:	08008cb7 	.word	0x08008cb7
 8008c2c:	08008cb7 	.word	0x08008cb7
 8008c30:	08008cb7 	.word	0x08008cb7
 8008c34:	08008cb7 	.word	0x08008cb7
 8008c38:	08008cb7 	.word	0x08008cb7
 8008c3c:	08008cb7 	.word	0x08008cb7
 8008c40:	08008cb7 	.word	0x08008cb7
 8008c44:	08008cb7 	.word	0x08008cb7
 8008c48:	08008ca9 	.word	0x08008ca9
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d02e      	beq.n	8008cae <UART_SetConfig+0x896>
 8008c50:	e031      	b.n	8008cb6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c52:	f7fb fda5 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8008c56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c58:	e033      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c5a:	f7fb fdb7 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8008c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c60:	e02f      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c62:	f107 0314 	add.w	r3, r7, #20
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fd f9ee 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c70:	e027      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c72:	f107 0308 	add.w	r3, r7, #8
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fd fb3a 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c80:	e01f      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c82:	4b58      	ldr	r3, [pc, #352]	; (8008de4 <UART_SetConfig+0x9cc>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c8e:	4b55      	ldr	r3, [pc, #340]	; (8008de4 <UART_SetConfig+0x9cc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	08db      	lsrs	r3, r3, #3
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	4a53      	ldr	r2, [pc, #332]	; (8008de8 <UART_SetConfig+0x9d0>)
 8008c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ca0:	e00f      	b.n	8008cc2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008ca2:	4b51      	ldr	r3, [pc, #324]	; (8008de8 <UART_SetConfig+0x9d0>)
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ca6:	e00c      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ca8:	4b4c      	ldr	r3, [pc, #304]	; (8008ddc <UART_SetConfig+0x9c4>)
 8008caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cac:	e009      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cb4:	e005      	b.n	8008cc2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 80ea 	beq.w	8008e9e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	4a44      	ldr	r2, [pc, #272]	; (8008de0 <UART_SetConfig+0x9c8>)
 8008cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cdc:	005a      	lsls	r2, r3, #1
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	441a      	add	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	2b0f      	cmp	r3, #15
 8008cf6:	d916      	bls.n	8008d26 <UART_SetConfig+0x90e>
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfe:	d212      	bcs.n	8008d26 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f023 030f 	bic.w	r3, r3, #15
 8008d08:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d22:	60da      	str	r2, [r3, #12]
 8008d24:	e0bb      	b.n	8008e9e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d2c:	e0b7      	b.n	8008e9e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	dc4a      	bgt.n	8008dcc <UART_SetConfig+0x9b4>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f2c0 8086 	blt.w	8008e48 <UART_SetConfig+0xa30>
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	f200 8083 	bhi.w	8008e48 <UART_SetConfig+0xa30>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0x930>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008dd3 	.word	0x08008dd3
 8008d4c:	08008ded 	.word	0x08008ded
 8008d50:	08008e49 	.word	0x08008e49
 8008d54:	08008e49 	.word	0x08008e49
 8008d58:	08008df5 	.word	0x08008df5
 8008d5c:	08008e49 	.word	0x08008e49
 8008d60:	08008e49 	.word	0x08008e49
 8008d64:	08008e49 	.word	0x08008e49
 8008d68:	08008e05 	.word	0x08008e05
 8008d6c:	08008e49 	.word	0x08008e49
 8008d70:	08008e49 	.word	0x08008e49
 8008d74:	08008e49 	.word	0x08008e49
 8008d78:	08008e49 	.word	0x08008e49
 8008d7c:	08008e49 	.word	0x08008e49
 8008d80:	08008e49 	.word	0x08008e49
 8008d84:	08008e49 	.word	0x08008e49
 8008d88:	08008e15 	.word	0x08008e15
 8008d8c:	08008e49 	.word	0x08008e49
 8008d90:	08008e49 	.word	0x08008e49
 8008d94:	08008e49 	.word	0x08008e49
 8008d98:	08008e49 	.word	0x08008e49
 8008d9c:	08008e49 	.word	0x08008e49
 8008da0:	08008e49 	.word	0x08008e49
 8008da4:	08008e49 	.word	0x08008e49
 8008da8:	08008e49 	.word	0x08008e49
 8008dac:	08008e49 	.word	0x08008e49
 8008db0:	08008e49 	.word	0x08008e49
 8008db4:	08008e49 	.word	0x08008e49
 8008db8:	08008e49 	.word	0x08008e49
 8008dbc:	08008e49 	.word	0x08008e49
 8008dc0:	08008e49 	.word	0x08008e49
 8008dc4:	08008e49 	.word	0x08008e49
 8008dc8:	08008e3b 	.word	0x08008e3b
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d037      	beq.n	8008e40 <UART_SetConfig+0xa28>
 8008dd0:	e03a      	b.n	8008e48 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7fb fce5 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8008dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008dd8:	e03c      	b.n	8008e54 <UART_SetConfig+0xa3c>
 8008dda:	bf00      	nop
 8008ddc:	003d0900 	.word	0x003d0900
 8008de0:	08010f74 	.word	0x08010f74
 8008de4:	58024400 	.word	0x58024400
 8008de8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dec:	f7fb fcee 	bl	80047cc <HAL_RCC_GetPCLK2Freq>
 8008df0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008df2:	e02f      	b.n	8008e54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fd f925 	bl	8006048 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e02:	e027      	b.n	8008e54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e04:	f107 0308 	add.w	r3, r7, #8
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fd fa71 	bl	80062f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e12:	e01f      	b.n	8008e54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e14:	4b2c      	ldr	r3, [pc, #176]	; (8008ec8 <UART_SetConfig+0xab0>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d009      	beq.n	8008e34 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e20:	4b29      	ldr	r3, [pc, #164]	; (8008ec8 <UART_SetConfig+0xab0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	08db      	lsrs	r3, r3, #3
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <UART_SetConfig+0xab4>)
 8008e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e32:	e00f      	b.n	8008e54 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008e34:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <UART_SetConfig+0xab4>)
 8008e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e38:	e00c      	b.n	8008e54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e3a:	4b25      	ldr	r3, [pc, #148]	; (8008ed0 <UART_SetConfig+0xab8>)
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e3e:	e009      	b.n	8008e54 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008e46:	e005      	b.n	8008e54 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008e52:	bf00      	nop
    }

    if (pclk != 0U)
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d021      	beq.n	8008e9e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ed4 <UART_SetConfig+0xabc>)
 8008e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e64:	461a      	mov	r2, r3
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	085b      	lsrs	r3, r3, #1
 8008e72:	441a      	add	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	2b0f      	cmp	r3, #15
 8008e84:	d908      	bls.n	8008e98 <UART_SetConfig+0xa80>
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8c:	d204      	bcs.n	8008e98 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e94:	60da      	str	r2, [r3, #12]
 8008e96:	e002      	b.n	8008e9e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008eba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3738      	adds	r7, #56	; 0x38
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	003d0900 	.word	0x003d0900
 8008ed4:	08010f74 	.word	0x08010f74

08008ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01a      	beq.n	8008fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd6:	d10a      	bne.n	8008fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	605a      	str	r2, [r3, #4]
  }
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800902c:	f7f8 ff70 	bl	8001f10 <HAL_GetTick>
 8009030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b08      	cmp	r3, #8
 800903e:	d10e      	bne.n	800905e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f82f 	bl	80090b2 <UART_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e025      	b.n	80090aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b04      	cmp	r3, #4
 800906a:	d10e      	bne.n	800908a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800906c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f819 	bl	80090b2 <UART_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e00f      	b.n	80090aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	603b      	str	r3, [r7, #0]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c2:	e062      	b.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d05e      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090cc:	f7f8 ff20 	bl	8001f10 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d302      	bcc.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11d      	bne.n	800911e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2220      	movs	r2, #32
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e045      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d02e      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800913a:	d126      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009144:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009154:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f022 0201 	bic.w	r2, r2, #1
 8009164:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e00f      	b.n	80091aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4013      	ands	r3, r2
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	429a      	cmp	r2, r3
 8009198:	bf0c      	ite	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	2300      	movne	r3, #0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d08d      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e027      	b.n	8009218 <HAL_UARTEx_DisableFifoMode+0x66>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2224      	movs	r2, #36	; 0x24
 80091d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009238:	2302      	movs	r3, #2
 800923a:	e02d      	b.n	8009298 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2224      	movs	r2, #36	; 0x24
 8009248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0201 	bic.w	r2, r2, #1
 8009262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f84f 	bl	800931c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e02d      	b.n	8009314 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2224      	movs	r2, #36	; 0x24
 80092c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0201 	bic.w	r2, r2, #1
 80092de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f811 	bl	800931c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009328:	2b00      	cmp	r3, #0
 800932a:	d108      	bne.n	800933e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800933c:	e031      	b.n	80093a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800933e:	2310      	movs	r3, #16
 8009340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009342:	2310      	movs	r3, #16
 8009344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	0e5b      	lsrs	r3, r3, #25
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	0f5b      	lsrs	r3, r3, #29
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	7b3a      	ldrb	r2, [r7, #12]
 800936a:	4911      	ldr	r1, [pc, #68]	; (80093b0 <UARTEx_SetNbDataToProcess+0x94>)
 800936c:	5c8a      	ldrb	r2, [r1, r2]
 800936e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009372:	7b3a      	ldrb	r2, [r7, #12]
 8009374:	490f      	ldr	r1, [pc, #60]	; (80093b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009378:	fb93 f3f2 	sdiv	r3, r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	7b7a      	ldrb	r2, [r7, #13]
 8009388:	4909      	ldr	r1, [pc, #36]	; (80093b0 <UARTEx_SetNbDataToProcess+0x94>)
 800938a:	5c8a      	ldrb	r2, [r1, r2]
 800938c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009390:	7b7a      	ldrb	r2, [r7, #13]
 8009392:	4908      	ldr	r1, [pc, #32]	; (80093b4 <UARTEx_SetNbDataToProcess+0x98>)
 8009394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009396:	fb93 f3f2 	sdiv	r3, r3, r2
 800939a:	b29a      	uxth	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093a2:	bf00      	nop
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	08010f8c 	.word	0x08010f8c
 80093b4:	08010f94 	.word	0x08010f94

080093b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80093b8:	b084      	sub	sp, #16
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	f107 001c 	add.w	r0, r7, #28
 80093c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80093ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80093d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80093d2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80093d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80093da:	431a      	orrs	r2, r3
             Init.ClockDiv
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80093de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	4b07      	ldr	r3, [pc, #28]	; (8009408 <SDMMC_Init+0x50>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	b004      	add	sp, #16
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	ffc02c00 	.word	0xffc02c00

0800940c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f043 0203 	orr.w	r2, r3, #3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0303 	and.w	r3, r3, #3
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
	...

08009488 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80094a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80094ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80094b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <SDMMC_SendCommand+0x50>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	431a      	orrs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	fffee0c0 	.word	0xfffee0c0

080094dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	b2db      	uxtb	r3, r3
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3314      	adds	r3, #20
 8009504:	461a      	mov	r2, r3
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	4413      	add	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009542:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009548:	431a      	orrs	r2, r3
                       Data->DPSM);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800954e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009566:	2300      	movs	r3, #0

}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009582:	2310      	movs	r3, #16
 8009584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800958a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009594:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009596:	f107 0308 	add.w	r3, r7, #8
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff ff73 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80095a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095a6:	2110      	movs	r1, #16
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fa5f 	bl	8009a6c <SDMMC_GetCmdResp1>
 80095ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095b0:	69fb      	ldr	r3, [r7, #28]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b088      	sub	sp, #32
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80095c8:	2311      	movs	r3, #17
 80095ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ff50 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80095e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ec:	2111      	movs	r1, #17
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa3c 	bl	8009a6c <SDMMC_GetCmdResp1>
 80095f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095f6:	69fb      	ldr	r3, [r7, #28]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3720      	adds	r7, #32
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800960e:	2312      	movs	r3, #18
 8009610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800961c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009620:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff ff2d 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800962e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009632:	2112      	movs	r1, #18
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fa19 	bl	8009a6c <SDMMC_GetCmdResp1>
 800963a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800963c:	69fb      	ldr	r3, [r7, #28]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b088      	sub	sp, #32
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009654:	2318      	movs	r3, #24
 8009656:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009666:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff ff0a 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009674:	f241 3288 	movw	r2, #5000	; 0x1388
 8009678:	2118      	movs	r1, #24
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f9f6 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009682:	69fb      	ldr	r3, [r7, #28]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800969a:	2319      	movs	r3, #25
 800969c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800969e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ae:	f107 0308 	add.w	r3, r7, #8
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff fee7 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80096ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80096be:	2119      	movs	r1, #25
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f9d3 	bl	8009a6c <SDMMC_GetCmdResp1>
 80096c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096c8:	69fb      	ldr	r3, [r7, #28]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80096e0:	230c      	movs	r3, #12
 80096e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff feb8 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009718:	4a0b      	ldr	r2, [pc, #44]	; (8009748 <SDMMC_CmdStopTransfer+0x74>)
 800971a:	210c      	movs	r1, #12
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f9a5 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009722:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009736:	d101      	bne.n	800973c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800973c:	69fb      	ldr	r3, [r7, #28]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	05f5e100 	.word	0x05f5e100

0800974c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800975a:	2307      	movs	r3, #7
 800975c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800975e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800976c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800976e:	f107 0308 	add.w	r3, r7, #8
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fe87 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800977a:	f241 3288 	movw	r2, #5000	; 0x1388
 800977e:	2107      	movs	r1, #7
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f973 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009788:	69fb      	ldr	r3, [r7, #28]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3720      	adds	r7, #32
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b088      	sub	sp, #32
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80097a2:	2300      	movs	r3, #0
 80097a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097a6:	2300      	movs	r3, #0
 80097a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fe66 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fb97 	bl	8009ef0 <SDMMC_GetCmdError>
 80097c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097c4:	69fb      	ldr	r3, [r7, #28]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3720      	adds	r7, #32
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b088      	sub	sp, #32
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80097d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80097da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80097dc:	2308      	movs	r3, #8
 80097de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097e6:	2300      	movs	r3, #0
 80097e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff fe46 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fb29 	bl	8009e54 <SDMMC_GetCmdResp7>
 8009802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009804:	69fb      	ldr	r3, [r7, #28]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b088      	sub	sp, #32
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800981c:	2337      	movs	r3, #55	; 0x37
 800981e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009826:	2300      	movs	r3, #0
 8009828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800982a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800982e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009830:	f107 0308 	add.w	r3, r7, #8
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff fe26 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800983c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009840:	2137      	movs	r1, #55	; 0x37
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f912 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800984a:	69fb      	ldr	r3, [r7, #28]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3720      	adds	r7, #32
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009862:	2329      	movs	r3, #41	; 0x29
 8009864:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800986a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009874:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009876:	f107 0308 	add.w	r3, r7, #8
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff fe03 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa2e 	bl	8009ce4 <SDMMC_GetCmdResp3>
 8009888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800988a:	69fb      	ldr	r3, [r7, #28]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3720      	adds	r7, #32
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80098a2:	2306      	movs	r3, #6
 80098a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098ac:	2300      	movs	r3, #0
 80098ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098b6:	f107 0308 	add.w	r3, r7, #8
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff fde3 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80098c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c6:	2106      	movs	r1, #6
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f8cf 	bl	8009a6c <SDMMC_GetCmdResp1>
 80098ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d0:	69fb      	ldr	r3, [r7, #28]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3720      	adds	r7, #32
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b088      	sub	sp, #32
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80098e6:	2333      	movs	r3, #51	; 0x33
 80098e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098fa:	f107 0308 	add.w	r3, r7, #8
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff fdc1 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009906:	f241 3288 	movw	r2, #5000	; 0x1388
 800990a:	2133      	movs	r1, #51	; 0x33
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f8ad 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009914:	69fb      	ldr	r3, [r7, #28]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3720      	adds	r7, #32
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b088      	sub	sp, #32
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800992a:	2302      	movs	r3, #2
 800992c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800992e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800993c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800993e:	f107 0308 	add.w	r3, r7, #8
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff fd9f 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f980 	bl	8009c50 <SDMMC_GetCmdResp2>
 8009950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009952:	69fb      	ldr	r3, [r7, #28]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800996a:	2309      	movs	r3, #9
 800996c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800996e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800997c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800997e:	f107 0308 	add.w	r3, r7, #8
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff fd7f 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f960 	bl	8009c50 <SDMMC_GetCmdResp2>
 8009990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009992:	69fb      	ldr	r3, [r7, #28]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80099aa:	2303      	movs	r3, #3
 80099ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff fd5f 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	2103      	movs	r1, #3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9c8 	bl	8009d64 <SDMMC_GetCmdResp6>
 80099d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d6:	69fb      	ldr	r3, [r7, #28]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80099ee:	230d      	movs	r3, #13
 80099f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a02:	f107 0308 	add.w	r3, r7, #8
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff fd3d 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a12:	210d      	movs	r1, #13
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f829 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b088      	sub	sp, #32
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009a32:	230d      	movs	r3, #13
 8009a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a46:	f107 0308 	add.w	r3, r7, #8
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff fd1b 	bl	8009488 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a56:	210d      	movs	r1, #13
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f807 	bl	8009a6c <SDMMC_GetCmdResp1>
 8009a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a60:	69fb      	ldr	r3, [r7, #28]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3720      	adds	r7, #32
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	460b      	mov	r3, r1
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a7a:	4b70      	ldr	r3, [pc, #448]	; (8009c3c <SDMMC_GetCmdResp1+0x1d0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a70      	ldr	r2, [pc, #448]	; (8009c40 <SDMMC_GetCmdResp1+0x1d4>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	0a5a      	lsrs	r2, r3, #9
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	fb02 f303 	mul.w	r3, r2, r3
 8009a8c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	1e5a      	subs	r2, r3, #1
 8009a92:	61fa      	str	r2, [r7, #28]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a9c:	e0c9      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	4b67      	ldr	r3, [pc, #412]	; (8009c44 <SDMMC_GetCmdResp1+0x1d8>)
 8009aa8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0ef      	beq.n	8009a8e <SDMMC_GetCmdResp1+0x22>
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1ea      	bne.n	8009a8e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2204      	movs	r2, #4
 8009ac8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009aca:	2304      	movs	r3, #4
 8009acc:	e0b1      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0a6      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a58      	ldr	r2, [pc, #352]	; (8009c48 <SDMMC_GetCmdResp1+0x1dc>)
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fcf6 	bl	80094dc <SDMMC_GetCommandResponse>
 8009af0:	4603      	mov	r3, r0
 8009af2:	461a      	mov	r2, r3
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d001      	beq.n	8009afe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e099      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009afe:	2100      	movs	r1, #0
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fcf8 	bl	80094f6 <SDMMC_GetResponse>
 8009b06:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	4b50      	ldr	r3, [pc, #320]	; (8009c4c <SDMMC_GetCmdResp1+0x1e0>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009b12:	2300      	movs	r3, #0
 8009b14:	e08d      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da02      	bge.n	8009b22 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b20:	e087      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009b2c:	2340      	movs	r3, #64	; 0x40
 8009b2e:	e080      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009b3a:	2380      	movs	r3, #128	; 0x80
 8009b3c:	e079      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b4c:	e071      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b5c:	e069      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b6c:	e061      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b7c:	e059      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b8c:	e051      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b9c:	e049      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ba8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009bac:	e041      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bbc:	e039      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009bcc:	e031      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009bd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009bdc:	e029      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009be8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009bec:	e021      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009bf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009bfc:	e019      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c0c:	e011      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c1c:	e009      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c2c:	e001      	b.n	8009c32 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	24000000 	.word	0x24000000
 8009c40:	10624dd3 	.word	0x10624dd3
 8009c44:	00200045 	.word	0x00200045
 8009c48:	002000c5 	.word	0x002000c5
 8009c4c:	fdffe008 	.word	0xfdffe008

08009c50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c58:	4b1f      	ldr	r3, [pc, #124]	; (8009cd8 <SDMMC_GetCmdResp2+0x88>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a1f      	ldr	r2, [pc, #124]	; (8009cdc <SDMMC_GetCmdResp2+0x8c>)
 8009c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c62:	0a5b      	lsrs	r3, r3, #9
 8009c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c68:	fb02 f303 	mul.w	r3, r2, r3
 8009c6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	1e5a      	subs	r2, r3, #1
 8009c72:	60fa      	str	r2, [r7, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d102      	bne.n	8009c7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c7c:	e026      	b.n	8009ccc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0ef      	beq.n	8009c6e <SDMMC_GetCmdResp2+0x1e>
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1ea      	bne.n	8009c6e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d004      	beq.n	8009cae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2204      	movs	r2, #4
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009caa:	2304      	movs	r3, #4
 8009cac:	e00e      	b.n	8009ccc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d004      	beq.n	8009cc4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e003      	b.n	8009ccc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a06      	ldr	r2, [pc, #24]	; (8009ce0 <SDMMC_GetCmdResp2+0x90>)
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	24000000 	.word	0x24000000
 8009cdc:	10624dd3 	.word	0x10624dd3
 8009ce0:	002000c5 	.word	0x002000c5

08009ce4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009cec:	4b1a      	ldr	r3, [pc, #104]	; (8009d58 <SDMMC_GetCmdResp3+0x74>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <SDMMC_GetCmdResp3+0x78>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	0a5b      	lsrs	r3, r3, #9
 8009cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfc:	fb02 f303 	mul.w	r3, r2, r3
 8009d00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1e5a      	subs	r2, r3, #1
 8009d06:	60fa      	str	r2, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d10:	e01b      	b.n	8009d4a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0ef      	beq.n	8009d02 <SDMMC_GetCmdResp3+0x1e>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1ea      	bne.n	8009d02 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d004      	beq.n	8009d42 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2204      	movs	r2, #4
 8009d3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d3e:	2304      	movs	r3, #4
 8009d40:	e003      	b.n	8009d4a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <SDMMC_GetCmdResp3+0x7c>)
 8009d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	24000000 	.word	0x24000000
 8009d5c:	10624dd3 	.word	0x10624dd3
 8009d60:	002000c5 	.word	0x002000c5

08009d64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d72:	4b35      	ldr	r3, [pc, #212]	; (8009e48 <SDMMC_GetCmdResp6+0xe4>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a35      	ldr	r2, [pc, #212]	; (8009e4c <SDMMC_GetCmdResp6+0xe8>)
 8009d78:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7c:	0a5b      	lsrs	r3, r3, #9
 8009d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d82:	fb02 f303 	mul.w	r3, r2, r3
 8009d86:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	1e5a      	subs	r2, r3, #1
 8009d8c:	61fa      	str	r2, [r7, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d96:	e052      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0ef      	beq.n	8009d88 <SDMMC_GetCmdResp6+0x24>
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1ea      	bne.n	8009d88 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	e03a      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e02f      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff fb7c 	bl	80094dc <SDMMC_GetCommandResponse>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	7afb      	ldrb	r3, [r7, #11]
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d001      	beq.n	8009df2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e025      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4a16      	ldr	r2, [pc, #88]	; (8009e50 <SDMMC_GetCmdResp6+0xec>)
 8009df6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009df8:	2100      	movs	r1, #0
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff fb7b 	bl	80094f6 <SDMMC_GetResponse>
 8009e00:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	0c1b      	lsrs	r3, r3, #16
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	e011      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e28:	e009      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e38:	e001      	b.n	8009e3e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	24000000 	.word	0x24000000
 8009e4c:	10624dd3 	.word	0x10624dd3
 8009e50:	002000c5 	.word	0x002000c5

08009e54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e5c:	4b22      	ldr	r3, [pc, #136]	; (8009ee8 <SDMMC_GetCmdResp7+0x94>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a22      	ldr	r2, [pc, #136]	; (8009eec <SDMMC_GetCmdResp7+0x98>)
 8009e62:	fba2 2303 	umull	r2, r3, r2, r3
 8009e66:	0a5b      	lsrs	r3, r3, #9
 8009e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e6c:	fb02 f303 	mul.w	r3, r2, r3
 8009e70:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	1e5a      	subs	r2, r3, #1
 8009e76:	60fa      	str	r2, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e80:	e02c      	b.n	8009edc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e86:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0ef      	beq.n	8009e72 <SDMMC_GetCmdResp7+0x1e>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1ea      	bne.n	8009e72 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eae:	2304      	movs	r3, #4
 8009eb0:	e014      	b.n	8009edc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e009      	b.n	8009edc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2240      	movs	r2, #64	; 0x40
 8009ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009eda:	2300      	movs	r3, #0

}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	24000000 	.word	0x24000000
 8009eec:	10624dd3 	.word	0x10624dd3

08009ef0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ef8:	4b11      	ldr	r3, [pc, #68]	; (8009f40 <SDMMC_GetCmdError+0x50>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a11      	ldr	r2, [pc, #68]	; (8009f44 <SDMMC_GetCmdError+0x54>)
 8009efe:	fba2 2303 	umull	r2, r3, r2, r3
 8009f02:	0a5b      	lsrs	r3, r3, #9
 8009f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f08:	fb02 f303 	mul.w	r3, r2, r3
 8009f0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1e5a      	subs	r2, r3, #1
 8009f12:	60fa      	str	r2, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f1c:	e009      	b.n	8009f32 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0f1      	beq.n	8009f0e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a06      	ldr	r2, [pc, #24]	; (8009f48 <SDMMC_GetCmdError+0x58>)
 8009f2e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	24000000 	.word	0x24000000
 8009f44:	10624dd3 	.word	0x10624dd3
 8009f48:	002000c5 	.word	0x002000c5

08009f4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f50:	4904      	ldr	r1, [pc, #16]	; (8009f64 <MX_FATFS_Init+0x18>)
 8009f52:	4805      	ldr	r0, [pc, #20]	; (8009f68 <MX_FATFS_Init+0x1c>)
 8009f54:	f003 fbfe 	bl	800d754 <FATFS_LinkDriver>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <MX_FATFS_Init+0x20>)
 8009f5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f60:	bf00      	nop
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	24004350 	.word	0x24004350
 8009f68:	08010f9c 	.word	0x08010f9c
 8009f6c:	2400434c 	.word	0x2400434c

08009f70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009f74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f8a:	f000 f885 	bl	800a098 <BSP_SD_IsDetected>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d001      	beq.n	8009f98 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009f94:	2302      	movs	r3, #2
 8009f96:	e012      	b.n	8009fbe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009f98:	480b      	ldr	r0, [pc, #44]	; (8009fc8 <BSP_SD_Init+0x48>)
 8009f9a:	f7fc fdb3 	bl	8006b04 <HAL_SD_Init>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d109      	bne.n	8009fbc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fac:	4806      	ldr	r0, [pc, #24]	; (8009fc8 <BSP_SD_Init+0x48>)
 8009fae:	f7fd fc57 	bl	8007860 <HAL_SD_ConfigWideBusOperation>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	24004148 	.word	0x24004148

08009fcc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	68f9      	ldr	r1, [r7, #12]
 8009fe2:	4806      	ldr	r0, [pc, #24]	; (8009ffc <BSP_SD_ReadBlocks_DMA+0x30>)
 8009fe4:	f7fc fea6 	bl	8006d34 <HAL_SD_ReadBlocks_DMA>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	24004148 	.word	0x24004148

0800a000 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	68f9      	ldr	r1, [r7, #12]
 800a016:	4806      	ldr	r0, [pc, #24]	; (800a030 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a018:	f7fc ff34 	bl	8006e84 <HAL_SD_WriteBlocks_DMA>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a026:	7dfb      	ldrb	r3, [r7, #23]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	24004148 	.word	0x24004148

0800a034 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a038:	4805      	ldr	r0, [pc, #20]	; (800a050 <BSP_SD_GetCardState+0x1c>)
 800a03a:	f7fd fd21 	bl	8007a80 <HAL_SD_GetCardState>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b04      	cmp	r3, #4
 800a042:	bf14      	ite	ne
 800a044:	2301      	movne	r3, #1
 800a046:	2300      	moveq	r3, #0
 800a048:	b2db      	uxtb	r3, r3
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	24004148 	.word	0x24004148

0800a054 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	4803      	ldr	r0, [pc, #12]	; (800a06c <BSP_SD_GetCardInfo+0x18>)
 800a060:	f7fd fbd2 	bl	8007808 <HAL_SD_GetCardInfo>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	24004148 	.word	0x24004148

0800a070 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a078:	f000 f9a0 	bl	800a3bc <BSP_SD_WriteCpltCallback>
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a08c:	f000 f9a2 	bl	800a3d4 <BSP_SD_ReadCpltCallback>
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a0a2:	f000 f80b 	bl	800a0bc <BSP_PlatformIsDetected>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	b2db      	uxtb	r3, r3
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <BSP_PlatformIsDetected+0x28>)
 800a0ca:	f7f9 fb73 	bl	80037b4 <HAL_GPIO_ReadPin>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	58020c00 	.word	0x58020c00

0800a0e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a0f0:	f7f7 ff0e 	bl	8001f10 <HAL_GetTick>
 800a0f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a0f6:	e006      	b.n	800a106 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a0f8:	f7ff ff9c 	bl	800a034 <BSP_SD_GetCardState>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a102:	2300      	movs	r3, #0
 800a104:	e009      	b.n	800a11a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a106:	f7f7 ff03 	bl	8001f10 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	429a      	cmp	r2, r3
 800a114:	d8f0      	bhi.n	800a0f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	4603      	mov	r3, r0
 800a12c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <SD_CheckStatus+0x38>)
 800a130:	2201      	movs	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a134:	f7ff ff7e 	bl	800a034 <BSP_SD_GetCardState>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d107      	bne.n	800a14e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a13e:	4b07      	ldr	r3, [pc, #28]	; (800a15c <SD_CheckStatus+0x38>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	f023 0301 	bic.w	r3, r3, #1
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	4b04      	ldr	r3, [pc, #16]	; (800a15c <SD_CheckStatus+0x38>)
 800a14c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <SD_CheckStatus+0x38>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b2db      	uxtb	r3, r3
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	2400000d 	.word	0x2400000d

0800a160 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a16a:	f7ff ff09 	bl	8009f80 <BSP_SD_Init>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d107      	bne.n	800a184 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff ffd4 	bl	800a124 <SD_CheckStatus>
 800a17c:	4603      	mov	r3, r0
 800a17e:	461a      	mov	r2, r3
 800a180:	4b04      	ldr	r3, [pc, #16]	; (800a194 <SD_initialize+0x34>)
 800a182:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <SD_initialize+0x34>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	b2db      	uxtb	r3, r3
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	2400000d 	.word	0x2400000d

0800a198 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff ffbd 	bl	800a124 <SD_CheckStatus>
 800a1aa:	4603      	mov	r3, r0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	603b      	str	r3, [r7, #0]
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a1c8:	f247 5030 	movw	r0, #30000	; 0x7530
 800a1cc:	f7ff ff8c 	bl	800a0e8 <SD_CheckStatusWithTimeout>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da01      	bge.n	800a1da <SD_read+0x26>
  {
    return res;
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	e03b      	b.n	800a252 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	68b8      	ldr	r0, [r7, #8]
 800a1e0:	f7ff fef4 	bl	8009fcc <BSP_SD_ReadBlocks_DMA>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d132      	bne.n	800a250 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a1ea:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <SD_read+0xa8>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a1f0:	f7f7 fe8e 	bl	8001f10 <HAL_GetTick>
 800a1f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a1f6:	bf00      	nop
 800a1f8:	4b18      	ldr	r3, [pc, #96]	; (800a25c <SD_read+0xa8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d108      	bne.n	800a212 <SD_read+0x5e>
 800a200:	f7f7 fe86 	bl	8001f10 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a20e:	4293      	cmp	r3, r2
 800a210:	d9f2      	bls.n	800a1f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <SD_read+0xa8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	75fb      	strb	r3, [r7, #23]
 800a21e:	e017      	b.n	800a250 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a220:	4b0e      	ldr	r3, [pc, #56]	; (800a25c <SD_read+0xa8>)
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a226:	f7f7 fe73 	bl	8001f10 <HAL_GetTick>
 800a22a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a22c:	e007      	b.n	800a23e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a22e:	f7ff ff01 	bl	800a034 <BSP_SD_GetCardState>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <SD_read+0x8a>
          {
            res = RES_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a23c:	e008      	b.n	800a250 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a23e:	f7f7 fe67 	bl	8001f10 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	f247 522f 	movw	r2, #29999	; 0x752f
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d9ee      	bls.n	800a22e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	24001268 	.word	0x24001268

0800a260 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a274:	4b24      	ldr	r3, [pc, #144]	; (800a308 <SD_write+0xa8>)
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a27a:	f247 5030 	movw	r0, #30000	; 0x7530
 800a27e:	f7ff ff33 	bl	800a0e8 <SD_CheckStatusWithTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	da01      	bge.n	800a28c <SD_write+0x2c>
  {
    return res;
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	e038      	b.n	800a2fe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	68b8      	ldr	r0, [r7, #8]
 800a292:	f7ff feb5 	bl	800a000 <BSP_SD_WriteBlocks_DMA>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d12f      	bne.n	800a2fc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a29c:	f7f7 fe38 	bl	8001f10 <HAL_GetTick>
 800a2a0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a2a2:	bf00      	nop
 800a2a4:	4b18      	ldr	r3, [pc, #96]	; (800a308 <SD_write+0xa8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d108      	bne.n	800a2be <SD_write+0x5e>
 800a2ac:	f7f7 fe30 	bl	8001f10 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d9f2      	bls.n	800a2a4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <SD_write+0xa8>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	75fb      	strb	r3, [r7, #23]
 800a2ca:	e017      	b.n	800a2fc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <SD_write+0xa8>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a2d2:	f7f7 fe1d 	bl	8001f10 <HAL_GetTick>
 800a2d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a2d8:	e007      	b.n	800a2ea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a2da:	f7ff feab 	bl	800a034 <BSP_SD_GetCardState>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d102      	bne.n	800a2ea <SD_write+0x8a>
          {
            res = RES_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	75fb      	strb	r3, [r7, #23]
            break;
 800a2e8:	e008      	b.n	800a2fc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a2ea:	f7f7 fe11 	bl	8001f10 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d9ee      	bls.n	800a2da <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	24001264 	.word	0x24001264

0800a30c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08c      	sub	sp, #48	; 0x30
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	603a      	str	r2, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
 800a318:	460b      	mov	r3, r1
 800a31a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a322:	4b25      	ldr	r3, [pc, #148]	; (800a3b8 <SD_ioctl+0xac>)
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <SD_ioctl+0x28>
 800a330:	2303      	movs	r3, #3
 800a332:	e03c      	b.n	800a3ae <SD_ioctl+0xa2>

  switch (cmd)
 800a334:	79bb      	ldrb	r3, [r7, #6]
 800a336:	2b03      	cmp	r3, #3
 800a338:	d834      	bhi.n	800a3a4 <SD_ioctl+0x98>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <SD_ioctl+0x34>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a359 	.word	0x0800a359
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a38b 	.word	0x0800a38b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a356:	e028      	b.n	800a3aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a358:	f107 0308 	add.w	r3, r7, #8
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fe79 	bl	800a054 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a36e:	e01c      	b.n	800a3aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a370:	f107 0308 	add.w	r3, r7, #8
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff fe6d 	bl	800a054 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a388:	e00f      	b.n	800a3aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a38a:	f107 0308 	add.w	r3, r7, #8
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fe60 	bl	800a054 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	0a5a      	lsrs	r2, r3, #9
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3a2:	e002      	b.n	800a3aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3730      	adds	r7, #48	; 0x30
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	2400000d 	.word	0x2400000d

0800a3bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a3c0:	4b03      	ldr	r3, [pc, #12]	; (800a3d0 <BSP_SD_WriteCpltCallback+0x14>)
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	24001264 	.word	0x24001264

0800a3d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a3d8:	4b03      	ldr	r3, [pc, #12]	; (800a3e8 <BSP_SD_ReadCpltCallback+0x14>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	24001268 	.word	0x24001268

0800a3ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	4a08      	ldr	r2, [pc, #32]	; (800a41c <disk_status+0x30>)
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	79fa      	ldrb	r2, [r7, #7]
 800a404:	4905      	ldr	r1, [pc, #20]	; (800a41c <disk_status+0x30>)
 800a406:	440a      	add	r2, r1
 800a408:	7a12      	ldrb	r2, [r2, #8]
 800a40a:	4610      	mov	r0, r2
 800a40c:	4798      	blx	r3
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	24001494 	.word	0x24001494

0800a420 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	4a0d      	ldr	r2, [pc, #52]	; (800a468 <disk_initialize+0x48>)
 800a432:	5cd3      	ldrb	r3, [r2, r3]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d111      	bne.n	800a45c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <disk_initialize+0x48>)
 800a43c:	2101      	movs	r1, #1
 800a43e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <disk_initialize+0x48>)
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	79fa      	ldrb	r2, [r7, #7]
 800a44e:	4906      	ldr	r1, [pc, #24]	; (800a468 <disk_initialize+0x48>)
 800a450:	440a      	add	r2, r1
 800a452:	7a12      	ldrb	r2, [r2, #8]
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	24001494 	.word	0x24001494

0800a46c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a46c:	b590      	push	{r4, r7, lr}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	4a0a      	ldr	r2, [pc, #40]	; (800a4a8 <disk_read+0x3c>)
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	689c      	ldr	r4, [r3, #8]
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	4a07      	ldr	r2, [pc, #28]	; (800a4a8 <disk_read+0x3c>)
 800a48c:	4413      	add	r3, r2
 800a48e:	7a18      	ldrb	r0, [r3, #8]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	47a0      	blx	r4
 800a498:	4603      	mov	r3, r0
 800a49a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd90      	pop	{r4, r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	24001494 	.word	0x24001494

0800a4ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a4ac:	b590      	push	{r4, r7, lr}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	4a0a      	ldr	r2, [pc, #40]	; (800a4e8 <disk_write+0x3c>)
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	68dc      	ldr	r4, [r3, #12]
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	4a07      	ldr	r2, [pc, #28]	; (800a4e8 <disk_write+0x3c>)
 800a4cc:	4413      	add	r3, r2
 800a4ce:	7a18      	ldrb	r0, [r3, #8]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	47a0      	blx	r4
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd90      	pop	{r4, r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	24001494 	.word	0x24001494

0800a4ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	603a      	str	r2, [r7, #0]
 800a4f6:	71fb      	strb	r3, [r7, #7]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	4a09      	ldr	r2, [pc, #36]	; (800a524 <disk_ioctl+0x38>)
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	79fa      	ldrb	r2, [r7, #7]
 800a50a:	4906      	ldr	r1, [pc, #24]	; (800a524 <disk_ioctl+0x38>)
 800a50c:	440a      	add	r2, r1
 800a50e:	7a10      	ldrb	r0, [r2, #8]
 800a510:	79b9      	ldrb	r1, [r7, #6]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	4798      	blx	r3
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]
  return res;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	24001494 	.word	0x24001494

0800a528 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3301      	adds	r3, #1
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a538:	89fb      	ldrh	r3, [r7, #14]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	b21a      	sxth	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b21b      	sxth	r3, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	b21b      	sxth	r3, r3
 800a548:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a54a:	89fb      	ldrh	r3, [r7, #14]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3303      	adds	r3, #3
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	3202      	adds	r2, #2
 800a570:	7812      	ldrb	r2, [r2, #0]
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	3201      	adds	r2, #1
 800a57e:	7812      	ldrb	r2, [r2, #0]
 800a580:	4313      	orrs	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	7812      	ldrb	r2, [r2, #0]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a590:	68fb      	ldr	r3, [r7, #12]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	887a      	ldrh	r2, [r7, #2]
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	887b      	ldrh	r3, [r7, #2]
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	607a      	str	r2, [r7, #4]
 800a5c2:	887a      	ldrh	r2, [r7, #2]
 800a5c4:	b2d2      	uxtb	r2, r2
 800a5c6:	701a      	strb	r2, [r3, #0]
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	607a      	str	r2, [r7, #4]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	607a      	str	r2, [r7, #4]
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	b2d2      	uxtb	r2, r2
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	0a1b      	lsrs	r3, r3, #8
 800a600:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	0a1b      	lsrs	r3, r3, #8
 800a612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	b2d2      	uxtb	r2, r2
 800a61e:	701a      	strb	r2, [r3, #0]
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00d      	beq.n	800a662 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	1c53      	adds	r3, r2, #1
 800a64a:	613b      	str	r3, [r7, #16]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	1c59      	adds	r1, r3, #1
 800a650:	6179      	str	r1, [r7, #20]
 800a652:	7812      	ldrb	r2, [r2, #0]
 800a654:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3b01      	subs	r3, #1
 800a65a:	607b      	str	r3, [r7, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1f1      	bne.n	800a646 <mem_cpy+0x1a>
	}
}
 800a662:	bf00      	nop
 800a664:	371c      	adds	r7, #28
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a66e:	b480      	push	{r7}
 800a670:	b087      	sub	sp, #28
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	617a      	str	r2, [r7, #20]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	b2d2      	uxtb	r2, r2
 800a688:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	607b      	str	r3, [r7, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f3      	bne.n	800a67e <mem_set+0x10>
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a6a4:	b480      	push	{r7}
 800a6a6:	b089      	sub	sp, #36	; 0x24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	61fb      	str	r3, [r7, #28]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	61fa      	str	r2, [r7, #28]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	61ba      	str	r2, [r7, #24]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	1acb      	subs	r3, r1, r3
 800a6d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	607b      	str	r3, [r7, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <mem_cmp+0x40>
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0eb      	beq.n	800a6bc <mem_cmp+0x18>

	return r;
 800a6e4:	697b      	ldr	r3, [r7, #20]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3724      	adds	r7, #36	; 0x24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a6fc:	e002      	b.n	800a704 <chk_chr+0x12>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3301      	adds	r3, #1
 800a702:	607b      	str	r3, [r7, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <chk_chr+0x26>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	4293      	cmp	r3, r2
 800a716:	d1f2      	bne.n	800a6fe <chk_chr+0xc>
	return *str;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	781b      	ldrb	r3, [r3, #0]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a732:	2300      	movs	r3, #0
 800a734:	60bb      	str	r3, [r7, #8]
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	e029      	b.n	800a790 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a73c:	4a27      	ldr	r2, [pc, #156]	; (800a7dc <chk_lock+0xb4>)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	4413      	add	r3, r2
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d01d      	beq.n	800a786 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a74a:	4a24      	ldr	r2, [pc, #144]	; (800a7dc <chk_lock+0xb4>)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	011b      	lsls	r3, r3, #4
 800a750:	4413      	add	r3, r2
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d116      	bne.n	800a78a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a75c:	4a1f      	ldr	r2, [pc, #124]	; (800a7dc <chk_lock+0xb4>)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	4413      	add	r3, r2
 800a764:	3304      	adds	r3, #4
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d10c      	bne.n	800a78a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a770:	4a1a      	ldr	r2, [pc, #104]	; (800a7dc <chk_lock+0xb4>)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	4413      	add	r3, r2
 800a778:	3308      	adds	r3, #8
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a780:	429a      	cmp	r2, r3
 800a782:	d102      	bne.n	800a78a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a784:	e007      	b.n	800a796 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a786:	2301      	movs	r3, #1
 800a788:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3301      	adds	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d9d2      	bls.n	800a73c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d109      	bne.n	800a7b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d102      	bne.n	800a7a8 <chk_lock+0x80>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d101      	bne.n	800a7ac <chk_lock+0x84>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e010      	b.n	800a7ce <chk_lock+0xa6>
 800a7ac:	2312      	movs	r3, #18
 800a7ae:	e00e      	b.n	800a7ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d108      	bne.n	800a7c8 <chk_lock+0xa0>
 800a7b6:	4a09      	ldr	r2, [pc, #36]	; (800a7dc <chk_lock+0xb4>)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	4413      	add	r3, r2
 800a7be:	330c      	adds	r3, #12
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c6:	d101      	bne.n	800a7cc <chk_lock+0xa4>
 800a7c8:	2310      	movs	r3, #16
 800a7ca:	e000      	b.n	800a7ce <chk_lock+0xa6>
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	24001274 	.word	0x24001274

0800a7e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	607b      	str	r3, [r7, #4]
 800a7ea:	e002      	b.n	800a7f2 <enq_lock+0x12>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	607b      	str	r3, [r7, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d806      	bhi.n	800a806 <enq_lock+0x26>
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <enq_lock+0x40>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	011b      	lsls	r3, r3, #4
 800a7fe:	4413      	add	r3, r2
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f2      	bne.n	800a7ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	bf14      	ite	ne
 800a80c:	2301      	movne	r3, #1
 800a80e:	2300      	moveq	r3, #0
 800a810:	b2db      	uxtb	r3, r3
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	24001274 	.word	0x24001274

0800a824 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a82e:	2300      	movs	r3, #0
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	e01f      	b.n	800a874 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a834:	4a41      	ldr	r2, [pc, #260]	; (800a93c <inc_lock+0x118>)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	011b      	lsls	r3, r3, #4
 800a83a:	4413      	add	r3, r2
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d113      	bne.n	800a86e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a846:	4a3d      	ldr	r2, [pc, #244]	; (800a93c <inc_lock+0x118>)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	4413      	add	r3, r2
 800a84e:	3304      	adds	r3, #4
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a856:	429a      	cmp	r2, r3
 800a858:	d109      	bne.n	800a86e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a85a:	4a38      	ldr	r2, [pc, #224]	; (800a93c <inc_lock+0x118>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	4413      	add	r3, r2
 800a862:	3308      	adds	r3, #8
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d006      	beq.n	800a87c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d9dc      	bls.n	800a834 <inc_lock+0x10>
 800a87a:	e000      	b.n	800a87e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a87c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d132      	bne.n	800a8ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	e002      	b.n	800a890 <inc_lock+0x6c>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d806      	bhi.n	800a8a4 <inc_lock+0x80>
 800a896:	4a29      	ldr	r2, [pc, #164]	; (800a93c <inc_lock+0x118>)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	4413      	add	r3, r2
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1f2      	bne.n	800a88a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d101      	bne.n	800a8ae <inc_lock+0x8a>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e040      	b.n	800a930 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	4922      	ldr	r1, [pc, #136]	; (800a93c <inc_lock+0x118>)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	440b      	add	r3, r1
 800a8ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	491e      	ldr	r1, [pc, #120]	; (800a93c <inc_lock+0x118>)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	695a      	ldr	r2, [r3, #20]
 800a8d0:	491a      	ldr	r1, [pc, #104]	; (800a93c <inc_lock+0x118>)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	011b      	lsls	r3, r3, #4
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3308      	adds	r3, #8
 800a8da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8dc:	4a17      	ldr	r2, [pc, #92]	; (800a93c <inc_lock+0x118>)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	011b      	lsls	r3, r3, #4
 800a8e2:	4413      	add	r3, r2
 800a8e4:	330c      	adds	r3, #12
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <inc_lock+0xe0>
 800a8f0:	4a12      	ldr	r2, [pc, #72]	; (800a93c <inc_lock+0x118>)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	4413      	add	r3, r2
 800a8f8:	330c      	adds	r3, #12
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <inc_lock+0xe0>
 800a900:	2300      	movs	r3, #0
 800a902:	e015      	b.n	800a930 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d108      	bne.n	800a91c <inc_lock+0xf8>
 800a90a:	4a0c      	ldr	r2, [pc, #48]	; (800a93c <inc_lock+0x118>)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	011b      	lsls	r3, r3, #4
 800a910:	4413      	add	r3, r2
 800a912:	330c      	adds	r3, #12
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	3301      	adds	r3, #1
 800a918:	b29a      	uxth	r2, r3
 800a91a:	e001      	b.n	800a920 <inc_lock+0xfc>
 800a91c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a920:	4906      	ldr	r1, [pc, #24]	; (800a93c <inc_lock+0x118>)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	011b      	lsls	r3, r3, #4
 800a926:	440b      	add	r3, r1
 800a928:	330c      	adds	r3, #12
 800a92a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3301      	adds	r3, #1
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	24001274 	.word	0x24001274

0800a940 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	607b      	str	r3, [r7, #4]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d825      	bhi.n	800a9a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a954:	4a17      	ldr	r2, [pc, #92]	; (800a9b4 <dec_lock+0x74>)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	011b      	lsls	r3, r3, #4
 800a95a:	4413      	add	r3, r2
 800a95c:	330c      	adds	r3, #12
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a962:	89fb      	ldrh	r3, [r7, #14]
 800a964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a968:	d101      	bne.n	800a96e <dec_lock+0x2e>
 800a96a:	2300      	movs	r3, #0
 800a96c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a96e:	89fb      	ldrh	r3, [r7, #14]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <dec_lock+0x3a>
 800a974:	89fb      	ldrh	r3, [r7, #14]
 800a976:	3b01      	subs	r3, #1
 800a978:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a97a:	4a0e      	ldr	r2, [pc, #56]	; (800a9b4 <dec_lock+0x74>)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	011b      	lsls	r3, r3, #4
 800a980:	4413      	add	r3, r2
 800a982:	330c      	adds	r3, #12
 800a984:	89fa      	ldrh	r2, [r7, #14]
 800a986:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a988:	89fb      	ldrh	r3, [r7, #14]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d105      	bne.n	800a99a <dec_lock+0x5a>
 800a98e:	4a09      	ldr	r2, [pc, #36]	; (800a9b4 <dec_lock+0x74>)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	4413      	add	r3, r2
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	737b      	strb	r3, [r7, #13]
 800a99e:	e001      	b.n	800a9a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a9a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	24001274 	.word	0x24001274

0800a9b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	e010      	b.n	800a9e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9c6:	4a0d      	ldr	r2, [pc, #52]	; (800a9fc <clear_lock+0x44>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	4413      	add	r3, r2
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d105      	bne.n	800a9e2 <clear_lock+0x2a>
 800a9d6:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <clear_lock+0x44>)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	011b      	lsls	r3, r3, #4
 800a9dc:	4413      	add	r3, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d9eb      	bls.n	800a9c6 <clear_lock+0xe>
	}
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	24001274 	.word	0x24001274

0800aa00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	78db      	ldrb	r3, [r3, #3]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d034      	beq.n	800aa7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	7858      	ldrb	r0, [r3, #1]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa24:	2301      	movs	r3, #1
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	f7ff fd40 	bl	800a4ac <disk_write>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	73fb      	strb	r3, [r7, #15]
 800aa36:	e022      	b.n	800aa7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	1ad2      	subs	r2, r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d217      	bcs.n	800aa7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	789b      	ldrb	r3, [r3, #2]
 800aa52:	613b      	str	r3, [r7, #16]
 800aa54:	e010      	b.n	800aa78 <sync_window+0x78>
					wsect += fs->fsize;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	7858      	ldrb	r0, [r3, #1]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	f7ff fd1d 	bl	800a4ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d8eb      	bhi.n	800aa56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d01b      	beq.n	800aad8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff ffad 	bl	800aa00 <sync_window>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d113      	bne.n	800aad8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	7858      	ldrb	r0, [r3, #1]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aaba:	2301      	movs	r3, #1
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	f7ff fcd5 	bl	800a46c <disk_read>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d004      	beq.n	800aad2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff ff87 	bl	800aa00 <sync_window>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d159      	bne.n	800abb0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d149      	bne.n	800ab98 <sync_fs+0xb4>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	791b      	ldrb	r3, [r3, #4]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d145      	bne.n	800ab98 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	899b      	ldrh	r3, [r3, #12]
 800ab16:	461a      	mov	r2, r3
 800ab18:	2100      	movs	r1, #0
 800ab1a:	f7ff fda8 	bl	800a66e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3338      	adds	r3, #56	; 0x38
 800ab22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab26:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fd37 	bl	800a59e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3338      	adds	r3, #56	; 0x38
 800ab34:	4921      	ldr	r1, [pc, #132]	; (800abbc <sync_fs+0xd8>)
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff fd4c 	bl	800a5d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3338      	adds	r3, #56	; 0x38
 800ab40:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab44:	491e      	ldr	r1, [pc, #120]	; (800abc0 <sync_fs+0xdc>)
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7ff fd44 	bl	800a5d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3338      	adds	r3, #56	; 0x38
 800ab50:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	f7ff fd3a 	bl	800a5d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3338      	adds	r3, #56	; 0x38
 800ab64:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7ff fd30 	bl	800a5d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	7858      	ldrb	r0, [r3, #1]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f7ff fc8d 	bl	800a4ac <disk_write>
			fs->fsi_flag = 0;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	785b      	ldrb	r3, [r3, #1]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2100      	movs	r1, #0
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff fca3 	bl	800a4ec <disk_ioctl>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <sync_fs+0xcc>
 800abac:	2301      	movs	r3, #1
 800abae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	41615252 	.word	0x41615252
 800abc0:	61417272 	.word	0x61417272

0800abc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	3b02      	subs	r3, #2
 800abd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	3b02      	subs	r3, #2
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d301      	bcc.n	800abe4 <clust2sect+0x20>
 800abe0:	2300      	movs	r3, #0
 800abe2:	e008      	b.n	800abf6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	895b      	ldrh	r3, [r3, #10]
 800abe8:	461a      	mov	r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	fb03 f202 	mul.w	r2, r3, r2
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf4:	4413      	add	r3, r2
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d904      	bls.n	800ac22 <get_fat+0x20>
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d302      	bcc.n	800ac28 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ac22:	2301      	movs	r3, #1
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	e0bb      	b.n	800ada0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac28:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	f000 8083 	beq.w	800ad3e <get_fat+0x13c>
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	f300 80a7 	bgt.w	800ad8c <get_fat+0x18a>
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d002      	beq.n	800ac48 <get_fat+0x46>
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d056      	beq.n	800acf4 <get_fat+0xf2>
 800ac46:	e0a1      	b.n	800ad8c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	899b      	ldrh	r3, [r3, #12]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac66:	4413      	add	r3, r2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6938      	ldr	r0, [r7, #16]
 800ac6c:	f7ff ff0c 	bl	800aa88 <move_window>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 808d 	bne.w	800ad92 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	60fa      	str	r2, [r7, #12]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	8992      	ldrh	r2, [r2, #12]
 800ac82:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac86:	fb02 f201 	mul.w	r2, r2, r1
 800ac8a:	1a9b      	subs	r3, r3, r2
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	899b      	ldrh	r3, [r3, #12]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aca6:	4413      	add	r3, r2
 800aca8:	4619      	mov	r1, r3
 800acaa:	6938      	ldr	r0, [r7, #16]
 800acac:	f7ff feec 	bl	800aa88 <move_window>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d16f      	bne.n	800ad96 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	899b      	ldrh	r3, [r3, #12]
 800acba:	461a      	mov	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800acc2:	fb02 f201 	mul.w	r2, r2, r1
 800acc6:	1a9b      	subs	r3, r3, r2
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	4413      	add	r3, r2
 800accc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800acd0:	021b      	lsls	r3, r3, #8
 800acd2:	461a      	mov	r2, r3
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	f003 0301 	and.w	r3, r3, #1
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <get_fat+0xe8>
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	091b      	lsrs	r3, r3, #4
 800ace8:	e002      	b.n	800acf0 <get_fat+0xee>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acf0:	617b      	str	r3, [r7, #20]
			break;
 800acf2:	e055      	b.n	800ada0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	899b      	ldrh	r3, [r3, #12]
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4619      	mov	r1, r3
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad08:	4413      	add	r3, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6938      	ldr	r0, [r7, #16]
 800ad0e:	f7ff febb 	bl	800aa88 <move_window>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d140      	bne.n	800ad9a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	8992      	ldrh	r2, [r2, #12]
 800ad26:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad2a:	fb02 f200 	mul.w	r2, r2, r0
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	440b      	add	r3, r1
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff fbf8 	bl	800a528 <ld_word>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	617b      	str	r3, [r7, #20]
			break;
 800ad3c:	e030      	b.n	800ada0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	899b      	ldrh	r3, [r3, #12]
 800ad46:	089b      	lsrs	r3, r3, #2
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad52:	4413      	add	r3, r2
 800ad54:	4619      	mov	r1, r3
 800ad56:	6938      	ldr	r0, [r7, #16]
 800ad58:	f7ff fe96 	bl	800aa88 <move_window>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d11d      	bne.n	800ad9e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	8992      	ldrh	r2, [r2, #12]
 800ad70:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad74:	fb02 f200 	mul.w	r2, r2, r0
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff fbeb 	bl	800a558 <ld_dword>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad88:	617b      	str	r3, [r7, #20]
			break;
 800ad8a:	e009      	b.n	800ada0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	e006      	b.n	800ada0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad92:	bf00      	nop
 800ad94:	e004      	b.n	800ada0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad96:	bf00      	nop
 800ad98:	e002      	b.n	800ada0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad9a:	bf00      	nop
 800ad9c:	e000      	b.n	800ada0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad9e:	bf00      	nop
		}
	}

	return val;
 800ada0:	697b      	ldr	r3, [r7, #20]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800adaa:	b590      	push	{r4, r7, lr}
 800adac:	b089      	sub	sp, #36	; 0x24
 800adae:	af00      	add	r7, sp, #0
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800adb6:	2302      	movs	r3, #2
 800adb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	f240 8102 	bls.w	800afc6 <put_fat+0x21c>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	429a      	cmp	r2, r3
 800adca:	f080 80fc 	bcs.w	800afc6 <put_fat+0x21c>
		switch (fs->fs_type) {
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b03      	cmp	r3, #3
 800add4:	f000 80b6 	beq.w	800af44 <put_fat+0x19a>
 800add8:	2b03      	cmp	r3, #3
 800adda:	f300 80fd 	bgt.w	800afd8 <put_fat+0x22e>
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d003      	beq.n	800adea <put_fat+0x40>
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	f000 8083 	beq.w	800aeee <put_fat+0x144>
 800ade8:	e0f6      	b.n	800afd8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	085b      	lsrs	r3, r3, #1
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	4413      	add	r3, r2
 800adf6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	899b      	ldrh	r3, [r3, #12]
 800ae00:	4619      	mov	r1, r3
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae08:	4413      	add	r3, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7ff fe3b 	bl	800aa88 <move_window>
 800ae12:	4603      	mov	r3, r0
 800ae14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae16:	7ffb      	ldrb	r3, [r7, #31]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f040 80d6 	bne.w	800afca <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	61ba      	str	r2, [r7, #24]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	8992      	ldrh	r2, [r2, #12]
 800ae2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae32:	fb02 f200 	mul.w	r2, r2, r0
 800ae36:	1a9b      	subs	r3, r3, r2
 800ae38:	440b      	add	r3, r1
 800ae3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00d      	beq.n	800ae62 <put_fat+0xb8>
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	b25b      	sxtb	r3, r3
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	b25a      	sxtb	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	011b      	lsls	r3, r3, #4
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	b25b      	sxtb	r3, r3
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	e001      	b.n	800ae66 <put_fat+0xbc>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	899b      	ldrh	r3, [r3, #12]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae80:	4413      	add	r3, r2
 800ae82:	4619      	mov	r1, r3
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7ff fdff 	bl	800aa88 <move_window>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae8e:	7ffb      	ldrb	r3, [r7, #31]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f040 809c 	bne.w	800afce <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	461a      	mov	r2, r3
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	fbb3 f0f2 	udiv	r0, r3, r2
 800aea8:	fb02 f200 	mul.w	r2, r2, r0
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	440b      	add	r3, r1
 800aeb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <put_fat+0x11a>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	091b      	lsrs	r3, r3, #4
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	e00e      	b.n	800aee2 <put_fat+0x138>
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	b25b      	sxtb	r3, r3
 800aeca:	f023 030f 	bic.w	r3, r3, #15
 800aece:	b25a      	sxtb	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	0a1b      	lsrs	r3, r3, #8
 800aed4:	b25b      	sxtb	r3, r3
 800aed6:	f003 030f 	and.w	r3, r3, #15
 800aeda:	b25b      	sxtb	r3, r3
 800aedc:	4313      	orrs	r3, r2
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2201      	movs	r2, #1
 800aeea:	70da      	strb	r2, [r3, #3]
			break;
 800aeec:	e074      	b.n	800afd8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	899b      	ldrh	r3, [r3, #12]
 800aef6:	085b      	lsrs	r3, r3, #1
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4619      	mov	r1, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	fbb3 f3f1 	udiv	r3, r3, r1
 800af02:	4413      	add	r3, r2
 800af04:	4619      	mov	r1, r3
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff fdbe 	bl	800aa88 <move_window>
 800af0c:	4603      	mov	r3, r0
 800af0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d15d      	bne.n	800afd2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	8992      	ldrh	r2, [r2, #12]
 800af24:	fbb3 f0f2 	udiv	r0, r3, r2
 800af28:	fb02 f200 	mul.w	r2, r2, r0
 800af2c:	1a9b      	subs	r3, r3, r2
 800af2e:	440b      	add	r3, r1
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	b292      	uxth	r2, r2
 800af34:	4611      	mov	r1, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f7ff fb31 	bl	800a59e <st_word>
			fs->wflag = 1;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2201      	movs	r2, #1
 800af40:	70da      	strb	r2, [r3, #3]
			break;
 800af42:	e049      	b.n	800afd8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	899b      	ldrh	r3, [r3, #12]
 800af4c:	089b      	lsrs	r3, r3, #2
 800af4e:	b29b      	uxth	r3, r3
 800af50:	4619      	mov	r1, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	fbb3 f3f1 	udiv	r3, r3, r1
 800af58:	4413      	add	r3, r2
 800af5a:	4619      	mov	r1, r3
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f7ff fd93 	bl	800aa88 <move_window>
 800af62:	4603      	mov	r3, r0
 800af64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af66:	7ffb      	ldrb	r3, [r7, #31]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d134      	bne.n	800afd6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	8992      	ldrh	r2, [r2, #12]
 800af80:	fbb3 f0f2 	udiv	r0, r3, r2
 800af84:	fb02 f200 	mul.w	r2, r2, r0
 800af88:	1a9b      	subs	r3, r3, r2
 800af8a:	440b      	add	r3, r1
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff fae3 	bl	800a558 <ld_dword>
 800af92:	4603      	mov	r3, r0
 800af94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af98:	4323      	orrs	r3, r4
 800af9a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	8992      	ldrh	r2, [r2, #12]
 800afaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800afae:	fb02 f200 	mul.w	r2, r2, r0
 800afb2:	1a9b      	subs	r3, r3, r2
 800afb4:	440b      	add	r3, r1
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fb0b 	bl	800a5d4 <st_dword>
			fs->wflag = 1;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	70da      	strb	r2, [r3, #3]
			break;
 800afc4:	e008      	b.n	800afd8 <put_fat+0x22e>
		}
	}
 800afc6:	bf00      	nop
 800afc8:	e006      	b.n	800afd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800afca:	bf00      	nop
 800afcc:	e004      	b.n	800afd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800afce:	bf00      	nop
 800afd0:	e002      	b.n	800afd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800afd2:	bf00      	nop
 800afd4:	e000      	b.n	800afd8 <put_fat+0x22e>
			if (res != FR_OK) break;
 800afd6:	bf00      	nop
	return res;
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3724      	adds	r7, #36	; 0x24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd90      	pop	{r4, r7, pc}

0800afe2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b088      	sub	sp, #32
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800afee:	2300      	movs	r3, #0
 800aff0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d904      	bls.n	800b008 <remove_chain+0x26>
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	429a      	cmp	r2, r3
 800b006:	d301      	bcc.n	800b00c <remove_chain+0x2a>
 800b008:	2302      	movs	r3, #2
 800b00a:	e04b      	b.n	800b0a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00c      	beq.n	800b02c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b012:	f04f 32ff 	mov.w	r2, #4294967295
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	69b8      	ldr	r0, [r7, #24]
 800b01a:	f7ff fec6 	bl	800adaa <put_fat>
 800b01e:	4603      	mov	r3, r0
 800b020:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b022:	7ffb      	ldrb	r3, [r7, #31]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <remove_chain+0x4a>
 800b028:	7ffb      	ldrb	r3, [r7, #31]
 800b02a:	e03b      	b.n	800b0a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff fde7 	bl	800ac02 <get_fat>
 800b034:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d031      	beq.n	800b0a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d101      	bne.n	800b046 <remove_chain+0x64>
 800b042:	2302      	movs	r3, #2
 800b044:	e02e      	b.n	800b0a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d101      	bne.n	800b052 <remove_chain+0x70>
 800b04e:	2301      	movs	r3, #1
 800b050:	e028      	b.n	800b0a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b052:	2200      	movs	r2, #0
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	69b8      	ldr	r0, [r7, #24]
 800b058:	f7ff fea7 	bl	800adaa <put_fat>
 800b05c:	4603      	mov	r3, r0
 800b05e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b060:	7ffb      	ldrb	r3, [r7, #31]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <remove_chain+0x88>
 800b066:	7ffb      	ldrb	r3, [r7, #31]
 800b068:	e01c      	b.n	800b0a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	3b02      	subs	r3, #2
 800b074:	429a      	cmp	r2, r3
 800b076:	d20b      	bcs.n	800b090 <remove_chain+0xae>
			fs->free_clst++;
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	f043 0301 	orr.w	r3, r3, #1
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	69db      	ldr	r3, [r3, #28]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d3c6      	bcc.n	800b02c <remove_chain+0x4a>
 800b09e:	e000      	b.n	800b0a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b0a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3720      	adds	r7, #32
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b088      	sub	sp, #32
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d10d      	bne.n	800b0de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d004      	beq.n	800b0d8 <create_chain+0x2c>
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d31b      	bcc.n	800b110 <create_chain+0x64>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	61bb      	str	r3, [r7, #24]
 800b0dc:	e018      	b.n	800b110 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff fd8e 	bl	800ac02 <get_fat>
 800b0e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d801      	bhi.n	800b0f2 <create_chain+0x46>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e070      	b.n	800b1d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d101      	bne.n	800b0fe <create_chain+0x52>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	e06a      	b.n	800b1d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	429a      	cmp	r2, r3
 800b106:	d201      	bcs.n	800b10c <create_chain+0x60>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	e063      	b.n	800b1d4 <create_chain+0x128>
		scl = clst;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	3301      	adds	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	429a      	cmp	r2, r3
 800b122:	d307      	bcc.n	800b134 <create_chain+0x88>
				ncl = 2;
 800b124:	2302      	movs	r3, #2
 800b126:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d901      	bls.n	800b134 <create_chain+0x88>
 800b130:	2300      	movs	r3, #0
 800b132:	e04f      	b.n	800b1d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b134:	69f9      	ldr	r1, [r7, #28]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff fd63 	bl	800ac02 <get_fat>
 800b13c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00e      	beq.n	800b162 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d003      	beq.n	800b152 <create_chain+0xa6>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b150:	d101      	bne.n	800b156 <create_chain+0xaa>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	e03e      	b.n	800b1d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b156:	69fa      	ldr	r2, [r7, #28]
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d1da      	bne.n	800b114 <create_chain+0x68>
 800b15e:	2300      	movs	r3, #0
 800b160:	e038      	b.n	800b1d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b162:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b164:	f04f 32ff 	mov.w	r2, #4294967295
 800b168:	69f9      	ldr	r1, [r7, #28]
 800b16a:	6938      	ldr	r0, [r7, #16]
 800b16c:	f7ff fe1d 	bl	800adaa <put_fat>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b174:	7dfb      	ldrb	r3, [r7, #23]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <create_chain+0xe2>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d006      	beq.n	800b18e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b180:	69fa      	ldr	r2, [r7, #28]
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6938      	ldr	r0, [r7, #16]
 800b186:	f7ff fe10 	bl	800adaa <put_fat>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d116      	bne.n	800b1c2 <create_chain+0x116>
		fs->last_clst = ncl;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	69fa      	ldr	r2, [r7, #28]
 800b198:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	699a      	ldr	r2, [r3, #24]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	69db      	ldr	r3, [r3, #28]
 800b1a2:	3b02      	subs	r3, #2
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d804      	bhi.n	800b1b2 <create_chain+0x106>
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	1e5a      	subs	r2, r3, #1
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	791b      	ldrb	r3, [r3, #4]
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	711a      	strb	r2, [r3, #4]
 800b1c0:	e007      	b.n	800b1d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d102      	bne.n	800b1ce <create_chain+0x122>
 800b1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1cc:	e000      	b.n	800b1d0 <create_chain+0x124>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b1d2:	69fb      	ldr	r3, [r7, #28]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3720      	adds	r7, #32
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b087      	sub	sp, #28
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	899b      	ldrh	r3, [r3, #12]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	8952      	ldrh	r2, [r2, #10]
 800b204:	fbb3 f3f2 	udiv	r3, r3, r2
 800b208:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	1d1a      	adds	r2, r3, #4
 800b20e:	613a      	str	r2, [r7, #16]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <clmt_clust+0x42>
 800b21a:	2300      	movs	r3, #0
 800b21c:	e010      	b.n	800b240 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	429a      	cmp	r2, r3
 800b224:	d307      	bcc.n	800b236 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	617b      	str	r3, [r7, #20]
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3304      	adds	r3, #4
 800b232:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b234:	e7e9      	b.n	800b20a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b236:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	4413      	add	r3, r2
}
 800b240:	4618      	mov	r0, r3
 800b242:	371c      	adds	r7, #28
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b262:	d204      	bcs.n	800b26e <dir_sdi+0x22>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	f003 031f 	and.w	r3, r3, #31
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b26e:	2302      	movs	r3, #2
 800b270:	e071      	b.n	800b356 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <dir_sdi+0x46>
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d902      	bls.n	800b292 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10c      	bne.n	800b2b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	095b      	lsrs	r3, r3, #5
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	8912      	ldrh	r2, [r2, #8]
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d301      	bcc.n	800b2a8 <dir_sdi+0x5c>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e056      	b.n	800b356 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	61da      	str	r2, [r3, #28]
 800b2b0:	e02d      	b.n	800b30e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	895b      	ldrh	r3, [r3, #10]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	899b      	ldrh	r3, [r3, #12]
 800b2bc:	fb03 f302 	mul.w	r3, r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2c2:	e019      	b.n	800b2f8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6979      	ldr	r1, [r7, #20]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff fc9a 	bl	800ac02 <get_fat>
 800b2ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d101      	bne.n	800b2dc <dir_sdi+0x90>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e03c      	b.n	800b356 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d904      	bls.n	800b2ec <dir_sdi+0xa0>
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d301      	bcc.n	800b2f0 <dir_sdi+0xa4>
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e032      	b.n	800b356 <dir_sdi+0x10a>
			ofs -= csz;
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d2e1      	bcs.n	800b2c4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b300:	6979      	ldr	r1, [r7, #20]
 800b302:	6938      	ldr	r0, [r7, #16]
 800b304:	f7ff fc5e 	bl	800abc4 <clust2sect>
 800b308:	4602      	mov	r2, r0
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <dir_sdi+0xd4>
 800b31c:	2302      	movs	r3, #2
 800b31e:	e01a      	b.n	800b356 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	899b      	ldrh	r3, [r3, #12]
 800b328:	4619      	mov	r1, r3
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b330:	441a      	add	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	899b      	ldrh	r3, [r3, #12]
 800b340:	461a      	mov	r2, r3
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	fbb3 f0f2 	udiv	r0, r3, r2
 800b348:	fb02 f200 	mul.w	r2, r2, r0
 800b34c:	1a9b      	subs	r3, r3, r2
 800b34e:	18ca      	adds	r2, r1, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b086      	sub	sp, #24
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	3320      	adds	r3, #32
 800b374:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <dir_next+0x28>
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b384:	d301      	bcc.n	800b38a <dir_next+0x2c>
 800b386:	2304      	movs	r3, #4
 800b388:	e0bb      	b.n	800b502 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	899b      	ldrh	r3, [r3, #12]
 800b38e:	461a      	mov	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	fbb3 f1f2 	udiv	r1, r3, r2
 800b396:	fb02 f201 	mul.w	r2, r2, r1
 800b39a:	1a9b      	subs	r3, r3, r2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f040 809d 	bne.w	800b4dc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10b      	bne.n	800b3cc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	095b      	lsrs	r3, r3, #5
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	8912      	ldrh	r2, [r2, #8]
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	f0c0 808d 	bcc.w	800b4dc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	61da      	str	r2, [r3, #28]
 800b3c8:	2304      	movs	r3, #4
 800b3ca:	e09a      	b.n	800b502 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	899b      	ldrh	r3, [r3, #12]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	8952      	ldrh	r2, [r2, #10]
 800b3dc:	3a01      	subs	r2, #1
 800b3de:	4013      	ands	r3, r2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d17b      	bne.n	800b4dc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	4610      	mov	r0, r2
 800b3ee:	f7ff fc08 	bl	800ac02 <get_fat>
 800b3f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d801      	bhi.n	800b3fe <dir_next+0xa0>
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e081      	b.n	800b502 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b404:	d101      	bne.n	800b40a <dir_next+0xac>
 800b406:	2301      	movs	r3, #1
 800b408:	e07b      	b.n	800b502 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	429a      	cmp	r2, r3
 800b412:	d359      	bcc.n	800b4c8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	61da      	str	r2, [r3, #28]
 800b420:	2304      	movs	r3, #4
 800b422:	e06e      	b.n	800b502 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f7ff fe3d 	bl	800b0ac <create_chain>
 800b432:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <dir_next+0xe0>
 800b43a:	2307      	movs	r3, #7
 800b43c:	e061      	b.n	800b502 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <dir_next+0xea>
 800b444:	2302      	movs	r3, #2
 800b446:	e05c      	b.n	800b502 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44e:	d101      	bne.n	800b454 <dir_next+0xf6>
 800b450:	2301      	movs	r3, #1
 800b452:	e056      	b.n	800b502 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff fad3 	bl	800aa00 <sync_window>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <dir_next+0x106>
 800b460:	2301      	movs	r3, #1
 800b462:	e04e      	b.n	800b502 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	899b      	ldrh	r3, [r3, #12]
 800b46e:	461a      	mov	r2, r3
 800b470:	2100      	movs	r1, #0
 800b472:	f7ff f8fc 	bl	800a66e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b476:	2300      	movs	r3, #0
 800b478:	613b      	str	r3, [r7, #16]
 800b47a:	6979      	ldr	r1, [r7, #20]
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f7ff fba1 	bl	800abc4 <clust2sect>
 800b482:	4602      	mov	r2, r0
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	635a      	str	r2, [r3, #52]	; 0x34
 800b488:	e012      	b.n	800b4b0 <dir_next+0x152>
						fs->wflag = 1;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2201      	movs	r2, #1
 800b48e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f7ff fab5 	bl	800aa00 <sync_window>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <dir_next+0x142>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e030      	b.n	800b502 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	635a      	str	r2, [r3, #52]	; 0x34
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	895b      	ldrh	r3, [r3, #10]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d3e6      	bcc.n	800b48a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	1ad2      	subs	r2, r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b4ce:	6979      	ldr	r1, [r7, #20]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff fb77 	bl	800abc4 <clust2sect>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	899b      	ldrh	r3, [r3, #12]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4f4:	fb02 f200 	mul.w	r2, r2, r0
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	18ca      	adds	r2, r1, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b086      	sub	sp, #24
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b51a:	2100      	movs	r1, #0
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff fe95 	bl	800b24c <dir_sdi>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d12b      	bne.n	800b584 <dir_alloc+0x7a>
		n = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	4619      	mov	r1, r3
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff faa6 	bl	800aa88 <move_window>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d11d      	bne.n	800b582 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2be5      	cmp	r3, #229	; 0xe5
 800b54e:	d004      	beq.n	800b55a <dir_alloc+0x50>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a1b      	ldr	r3, [r3, #32]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d107      	bne.n	800b56a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	3301      	adds	r3, #1
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	d102      	bne.n	800b56e <dir_alloc+0x64>
 800b568:	e00c      	b.n	800b584 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b56a:	2300      	movs	r3, #0
 800b56c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b56e:	2101      	movs	r1, #1
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7ff fef4 	bl	800b35e <dir_next>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d0d7      	beq.n	800b530 <dir_alloc+0x26>
 800b580:	e000      	b.n	800b584 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b582:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b584:	7dfb      	ldrb	r3, [r7, #23]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d101      	bne.n	800b58e <dir_alloc+0x84>
 800b58a:	2307      	movs	r3, #7
 800b58c:	75fb      	strb	r3, [r7, #23]
	return res;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	331a      	adds	r3, #26
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe ffbe 	bl	800a528 <ld_word>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d109      	bne.n	800b5cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fe ffb3 	bl	800a528 <ld_word>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	041b      	lsls	r3, r3, #16
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	60f8      	str	r0, [r7, #12]
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	331a      	adds	r3, #26
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	b292      	uxth	r2, r2
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fe ffd6 	bl	800a59e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d109      	bne.n	800b60e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f103 0214 	add.w	r2, r3, #20
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	0c1b      	lsrs	r3, r3, #16
 800b604:	b29b      	uxth	r3, r3
 800b606:	4619      	mov	r1, r3
 800b608:	4610      	mov	r0, r2
 800b60a:	f7fe ffc8 	bl	800a59e <st_word>
	}
}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	331a      	adds	r3, #26
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe ff7e 	bl	800a528 <ld_word>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <cmp_lfn+0x1e>
 800b632:	2300      	movs	r3, #0
 800b634:	e059      	b.n	800b6ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b63e:	1e5a      	subs	r2, r3, #1
 800b640:	4613      	mov	r3, r2
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b64c:	2301      	movs	r3, #1
 800b64e:	81fb      	strh	r3, [r7, #14]
 800b650:	2300      	movs	r3, #0
 800b652:	613b      	str	r3, [r7, #16]
 800b654:	e033      	b.n	800b6be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b656:	4a27      	ldr	r2, [pc, #156]	; (800b6f4 <cmp_lfn+0xdc>)
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	4413      	add	r3, r2
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	4413      	add	r3, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe ff5f 	bl	800a528 <ld_word>
 800b66a:	4603      	mov	r3, r0
 800b66c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b66e:	89fb      	ldrh	r3, [r7, #14]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d01a      	beq.n	800b6aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2bfe      	cmp	r3, #254	; 0xfe
 800b678:	d812      	bhi.n	800b6a0 <cmp_lfn+0x88>
 800b67a:	89bb      	ldrh	r3, [r7, #12]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f002 f8b5 	bl	800d7ec <ff_wtoupper>
 800b682:	4603      	mov	r3, r0
 800b684:	461c      	mov	r4, r3
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	617a      	str	r2, [r7, #20]
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	4413      	add	r3, r2
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f002 f8a9 	bl	800d7ec <ff_wtoupper>
 800b69a:	4603      	mov	r3, r0
 800b69c:	429c      	cmp	r4, r3
 800b69e:	d001      	beq.n	800b6a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e022      	b.n	800b6ea <cmp_lfn+0xd2>
			}
			wc = uc;
 800b6a4:	89bb      	ldrh	r3, [r7, #12]
 800b6a6:	81fb      	strh	r3, [r7, #14]
 800b6a8:	e006      	b.n	800b6b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b6aa:	89bb      	ldrh	r3, [r7, #12]
 800b6ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d001      	beq.n	800b6b8 <cmp_lfn+0xa0>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e018      	b.n	800b6ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	613b      	str	r3, [r7, #16]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b0c      	cmp	r3, #12
 800b6c2:	d9c8      	bls.n	800b656 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00b      	beq.n	800b6e8 <cmp_lfn+0xd0>
 800b6d0:	89fb      	ldrh	r3, [r7, #14]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <cmp_lfn+0xd0>
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	4413      	add	r3, r2
 800b6de:	881b      	ldrh	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <cmp_lfn+0xd0>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e000      	b.n	800b6ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b6e8:	2301      	movs	r3, #1
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	371c      	adds	r7, #28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd90      	pop	{r4, r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	08011030 	.word	0x08011030

0800b6f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	4611      	mov	r1, r2
 800b704:	461a      	mov	r2, r3
 800b706:	460b      	mov	r3, r1
 800b708:	71fb      	strb	r3, [r7, #7]
 800b70a:	4613      	mov	r3, r2
 800b70c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	330d      	adds	r3, #13
 800b712:	79ba      	ldrb	r2, [r7, #6]
 800b714:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	330b      	adds	r3, #11
 800b71a:	220f      	movs	r2, #15
 800b71c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	330c      	adds	r3, #12
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	331a      	adds	r3, #26
 800b72a:	2100      	movs	r1, #0
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe ff36 	bl	800a59e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	1e5a      	subs	r2, r3, #1
 800b736:	4613      	mov	r3, r2
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	82fb      	strh	r3, [r7, #22]
 800b746:	2300      	movs	r3, #0
 800b748:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b74a:	8afb      	ldrh	r3, [r7, #22]
 800b74c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b750:	4293      	cmp	r3, r2
 800b752:	d007      	beq.n	800b764 <put_lfn+0x6c>
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	61fa      	str	r2, [r7, #28]
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b764:	4a17      	ldr	r2, [pc, #92]	; (800b7c4 <put_lfn+0xcc>)
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	4413      	add	r3, r2
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4413      	add	r3, r2
 800b772:	8afa      	ldrh	r2, [r7, #22]
 800b774:	4611      	mov	r1, r2
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe ff11 	bl	800a59e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b77c:	8afb      	ldrh	r3, [r7, #22]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d102      	bne.n	800b788 <put_lfn+0x90>
 800b782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b786:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	3301      	adds	r3, #1
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	2b0c      	cmp	r3, #12
 800b792:	d9da      	bls.n	800b74a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b794:	8afb      	ldrh	r3, [r7, #22]
 800b796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d006      	beq.n	800b7ac <put_lfn+0xb4>
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <put_lfn+0xbc>
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	79fa      	ldrb	r2, [r7, #7]
 800b7b8:	701a      	strb	r2, [r3, #0]
}
 800b7ba:	bf00      	nop
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	08011030 	.word	0x08011030

0800b7c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08c      	sub	sp, #48	; 0x30
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b7d6:	220b      	movs	r2, #11
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f7fe ff26 	bl	800a62c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b05      	cmp	r3, #5
 800b7e4:	d929      	bls.n	800b83a <gen_numname+0x72>
		sr = seq;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b7ea:	e020      	b.n	800b82e <gen_numname+0x66>
			wc = *lfn++;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	1c9a      	adds	r2, r3, #2
 800b7f0:	607a      	str	r2, [r7, #4]
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7fa:	e015      	b.n	800b828 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	005a      	lsls	r2, r3, #1
 800b800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	4413      	add	r3, r2
 800b808:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b80a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b80c:	085b      	lsrs	r3, r3, #1
 800b80e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <gen_numname+0x5a>
 800b81a:	69fa      	ldr	r2, [r7, #28]
 800b81c:	4b31      	ldr	r3, [pc, #196]	; (800b8e4 <gen_numname+0x11c>)
 800b81e:	4053      	eors	r3, r2
 800b820:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	3301      	adds	r3, #1
 800b826:	62bb      	str	r3, [r7, #40]	; 0x28
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	2b0f      	cmp	r3, #15
 800b82c:	d9e6      	bls.n	800b7fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	881b      	ldrh	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1da      	bne.n	800b7ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b83a:	2307      	movs	r3, #7
 800b83c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	f003 030f 	and.w	r3, r3, #15
 800b846:	b2db      	uxtb	r3, r3
 800b848:	3330      	adds	r3, #48	; 0x30
 800b84a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b84e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b852:	2b39      	cmp	r3, #57	; 0x39
 800b854:	d904      	bls.n	800b860 <gen_numname+0x98>
 800b856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b85a:	3307      	adds	r3, #7
 800b85c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	1e5a      	subs	r2, r3, #1
 800b864:	62ba      	str	r2, [r7, #40]	; 0x28
 800b866:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b86a:	4413      	add	r3, r2
 800b86c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b870:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	091b      	lsrs	r3, r3, #4
 800b878:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1de      	bne.n	800b83e <gen_numname+0x76>
	ns[i] = '~';
 800b880:	f107 0214 	add.w	r2, r7, #20
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	4413      	add	r3, r2
 800b888:	227e      	movs	r2, #126	; 0x7e
 800b88a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b88c:	2300      	movs	r3, #0
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
 800b890:	e002      	b.n	800b898 <gen_numname+0xd0>
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	3301      	adds	r3, #1
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
 800b898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d205      	bcs.n	800b8ac <gen_numname+0xe4>
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	4413      	add	r3, r2
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b20      	cmp	r3, #32
 800b8aa:	d1f2      	bne.n	800b892 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	2b07      	cmp	r3, #7
 800b8b0:	d808      	bhi.n	800b8c4 <gen_numname+0xfc>
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	62ba      	str	r2, [r7, #40]	; 0x28
 800b8b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b8bc:	4413      	add	r3, r2
 800b8be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b8c2:	e000      	b.n	800b8c6 <gen_numname+0xfe>
 800b8c4:	2120      	movs	r1, #32
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	627a      	str	r2, [r7, #36]	; 0x24
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	460a      	mov	r2, r1
 800b8d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	2b07      	cmp	r3, #7
 800b8d8:	d9e8      	bls.n	800b8ac <gen_numname+0xe4>
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	3730      	adds	r7, #48	; 0x30
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	00011021 	.word	0x00011021

0800b8e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b8f4:	230b      	movs	r3, #11
 800b8f6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	0852      	lsrs	r2, r2, #1
 800b8fe:	01db      	lsls	r3, r3, #7
 800b900:	4313      	orrs	r3, r2
 800b902:	b2da      	uxtb	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	1c59      	adds	r1, r3, #1
 800b908:	6079      	str	r1, [r7, #4]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	4413      	add	r3, r2
 800b90e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	3b01      	subs	r3, #1
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1ed      	bne.n	800b8f8 <sum_sfn+0x10>
	return sum;
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b086      	sub	sp, #24
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b938:	2100      	movs	r1, #0
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff fc86 	bl	800b24c <dir_sdi>
 800b940:	4603      	mov	r3, r0
 800b942:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <dir_find+0x24>
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
 800b94c:	e0a9      	b.n	800baa2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b94e:	23ff      	movs	r3, #255	; 0xff
 800b950:	753b      	strb	r3, [r7, #20]
 800b952:	7d3b      	ldrb	r3, [r7, #20]
 800b954:	757b      	strb	r3, [r7, #21]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	4619      	mov	r1, r3
 800b964:	6938      	ldr	r0, [r7, #16]
 800b966:	f7ff f88f 	bl	800aa88 <move_window>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f040 8090 	bne.w	800ba96 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b97e:	7dbb      	ldrb	r3, [r7, #22]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <dir_find+0x60>
 800b984:	2304      	movs	r3, #4
 800b986:	75fb      	strb	r3, [r7, #23]
 800b988:	e08a      	b.n	800baa0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a1b      	ldr	r3, [r3, #32]
 800b98e:	330b      	adds	r3, #11
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b996:	73fb      	strb	r3, [r7, #15]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7bfa      	ldrb	r2, [r7, #15]
 800b99c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b99e:	7dbb      	ldrb	r3, [r7, #22]
 800b9a0:	2be5      	cmp	r3, #229	; 0xe5
 800b9a2:	d007      	beq.n	800b9b4 <dir_find+0x8a>
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	f003 0308 	and.w	r3, r3, #8
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d009      	beq.n	800b9c2 <dir_find+0x98>
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	2b0f      	cmp	r3, #15
 800b9b2:	d006      	beq.n	800b9c2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9b4:	23ff      	movs	r3, #255	; 0xff
 800b9b6:	757b      	strb	r3, [r7, #21]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b9be:	631a      	str	r2, [r3, #48]	; 0x30
 800b9c0:	e05e      	b.n	800ba80 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b0f      	cmp	r3, #15
 800b9c6:	d136      	bne.n	800ba36 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d154      	bne.n	800ba80 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b9d6:	7dbb      	ldrb	r3, [r7, #22]
 800b9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00d      	beq.n	800b9fc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	7b5b      	ldrb	r3, [r3, #13]
 800b9e6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b9e8:	7dbb      	ldrb	r3, [r7, #22]
 800b9ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9ee:	75bb      	strb	r3, [r7, #22]
 800b9f0:	7dbb      	ldrb	r3, [r7, #22]
 800b9f2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695a      	ldr	r2, [r3, #20]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9fc:	7dba      	ldrb	r2, [r7, #22]
 800b9fe:	7d7b      	ldrb	r3, [r7, #21]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d115      	bne.n	800ba30 <dir_find+0x106>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	330d      	adds	r3, #13
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	7d3a      	ldrb	r2, [r7, #20]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d10e      	bne.n	800ba30 <dir_find+0x106>
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	691a      	ldr	r2, [r3, #16]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	f7ff fdfb 	bl	800b618 <cmp_lfn>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <dir_find+0x106>
 800ba28:	7d7b      	ldrb	r3, [r7, #21]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	e000      	b.n	800ba32 <dir_find+0x108>
 800ba30:	23ff      	movs	r3, #255	; 0xff
 800ba32:	757b      	strb	r3, [r7, #21]
 800ba34:	e024      	b.n	800ba80 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba36:	7d7b      	ldrb	r3, [r7, #21]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d109      	bne.n	800ba50 <dir_find+0x126>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff ff51 	bl	800b8e8 <sum_sfn>
 800ba46:	4603      	mov	r3, r0
 800ba48:	461a      	mov	r2, r3
 800ba4a:	7d3b      	ldrb	r3, [r7, #20]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d024      	beq.n	800ba9a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <dir_find+0x14a>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a18      	ldr	r0, [r3, #32]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	3324      	adds	r3, #36	; 0x24
 800ba66:	220b      	movs	r2, #11
 800ba68:	4619      	mov	r1, r3
 800ba6a:	f7fe fe1b 	bl	800a6a4 <mem_cmp>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d014      	beq.n	800ba9e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba74:	23ff      	movs	r3, #255	; 0xff
 800ba76:	757b      	strb	r3, [r7, #21]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba80:	2100      	movs	r1, #0
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff fc6b 	bl	800b35e <dir_next>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f43f af65 	beq.w	800b95e <dir_find+0x34>
 800ba94:	e004      	b.n	800baa0 <dir_find+0x176>
		if (res != FR_OK) break;
 800ba96:	bf00      	nop
 800ba98:	e002      	b.n	800baa0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba9a:	bf00      	nop
 800ba9c:	e000      	b.n	800baa0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba9e:	bf00      	nop

	return res;
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08c      	sub	sp, #48	; 0x30
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bac0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <dir_register+0x20>
 800bac8:	2306      	movs	r3, #6
 800baca:	e0e0      	b.n	800bc8e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bacc:	2300      	movs	r3, #0
 800bace:	627b      	str	r3, [r7, #36]	; 0x24
 800bad0:	e002      	b.n	800bad8 <dir_register+0x2c>
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	3301      	adds	r3, #1
 800bad6:	627b      	str	r3, [r7, #36]	; 0x24
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	691a      	ldr	r2, [r3, #16]
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1f4      	bne.n	800bad2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800baee:	f107 030c 	add.w	r3, r7, #12
 800baf2:	220c      	movs	r2, #12
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fd99 	bl	800a62c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d032      	beq.n	800bb6a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2240      	movs	r2, #64	; 0x40
 800bb08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb10:	e016      	b.n	800bb40 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	691a      	ldr	r2, [r3, #16]
 800bb1c:	f107 010c 	add.w	r1, r7, #12
 800bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb22:	f7ff fe51 	bl	800b7c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff feff 	bl	800b92a <dir_find>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bb32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	2b63      	cmp	r3, #99	; 0x63
 800bb44:	d9e5      	bls.n	800bb12 <dir_register+0x66>
 800bb46:	e000      	b.n	800bb4a <dir_register+0x9e>
			if (res != FR_OK) break;
 800bb48:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	2b64      	cmp	r3, #100	; 0x64
 800bb4e:	d101      	bne.n	800bb54 <dir_register+0xa8>
 800bb50:	2307      	movs	r3, #7
 800bb52:	e09c      	b.n	800bc8e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bb54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb58:	2b04      	cmp	r3, #4
 800bb5a:	d002      	beq.n	800bb62 <dir_register+0xb6>
 800bb5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb60:	e095      	b.n	800bc8e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bb62:	7dfa      	ldrb	r2, [r7, #23]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d007      	beq.n	800bb84 <dir_register+0xd8>
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	330c      	adds	r3, #12
 800bb78:	4a47      	ldr	r2, [pc, #284]	; (800bc98 <dir_register+0x1ec>)
 800bb7a:	fba2 2303 	umull	r2, r3, r2, r3
 800bb7e:	089b      	lsrs	r3, r3, #2
 800bb80:	3301      	adds	r3, #1
 800bb82:	e000      	b.n	800bb86 <dir_register+0xda>
 800bb84:	2301      	movs	r3, #1
 800bb86:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bb88:	6a39      	ldr	r1, [r7, #32]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fcbd 	bl	800b50a <dir_alloc>
 800bb90:	4603      	mov	r3, r0
 800bb92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bb96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d148      	bne.n	800bc30 <dir_register+0x184>
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	623b      	str	r3, [r7, #32]
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d042      	beq.n	800bc30 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	695a      	ldr	r2, [r3, #20]
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	015b      	lsls	r3, r3, #5
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fb48 	bl	800b24c <dir_sdi>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d132      	bne.n	800bc30 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3324      	adds	r3, #36	; 0x24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7ff fe8a 	bl	800b8e8 <sum_sfn>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	69db      	ldr	r3, [r3, #28]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	69f8      	ldr	r0, [r7, #28]
 800bbe0:	f7fe ff52 	bl	800aa88 <move_window>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bbea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d11d      	bne.n	800bc2e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	6918      	ldr	r0, [r3, #16]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a19      	ldr	r1, [r3, #32]
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	7efb      	ldrb	r3, [r7, #27]
 800bc00:	f7ff fd7a 	bl	800b6f8 <put_lfn>
				fs->wflag = 1;
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	2201      	movs	r2, #1
 800bc08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff fba6 	bl	800b35e <dir_next>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bc18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d107      	bne.n	800bc30 <dir_register+0x184>
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	623b      	str	r3, [r7, #32]
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1d5      	bne.n	800bbd8 <dir_register+0x12c>
 800bc2c:	e000      	b.n	800bc30 <dir_register+0x184>
				if (res != FR_OK) break;
 800bc2e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bc30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d128      	bne.n	800bc8a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	69f8      	ldr	r0, [r7, #28]
 800bc40:	f7fe ff22 	bl	800aa88 <move_window>
 800bc44:	4603      	mov	r3, r0
 800bc46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bc4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d11b      	bne.n	800bc8a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	2220      	movs	r2, #32
 800bc58:	2100      	movs	r1, #0
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fd07 	bl	800a66e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a18      	ldr	r0, [r3, #32]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3324      	adds	r3, #36	; 0x24
 800bc68:	220b      	movs	r2, #11
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	f7fe fcde 	bl	800a62c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	330c      	adds	r3, #12
 800bc7c:	f002 0218 	and.w	r2, r2, #24
 800bc80:	b2d2      	uxtb	r2, r2
 800bc82:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	2201      	movs	r2, #1
 800bc88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3730      	adds	r7, #48	; 0x30
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	4ec4ec4f 	.word	0x4ec4ec4f

0800bc9c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80c9 	beq.w	800be4e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc4:	d032      	beq.n	800bd2c <get_fileinfo+0x90>
			i = j = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	61bb      	str	r3, [r7, #24]
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bcce:	e01b      	b.n	800bd08 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bcd0:	89fb      	ldrh	r3, [r7, #14]
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f001 fd4d 	bl	800d774 <ff_convert>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bcde:	89fb      	ldrh	r3, [r7, #14]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d102      	bne.n	800bcea <get_fileinfo+0x4e>
 800bce4:	2300      	movs	r3, #0
 800bce6:	61fb      	str	r3, [r7, #28]
 800bce8:	e01a      	b.n	800bd20 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	2bfe      	cmp	r3, #254	; 0xfe
 800bcee:	d902      	bls.n	800bcf6 <get_fileinfo+0x5a>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	e014      	b.n	800bd20 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	61fa      	str	r2, [r7, #28]
 800bcfc:	89fa      	ldrh	r2, [r7, #14]
 800bcfe:	b2d1      	uxtb	r1, r2
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	4413      	add	r3, r2
 800bd04:	460a      	mov	r2, r1
 800bd06:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	1c59      	adds	r1, r3, #1
 800bd10:	61b9      	str	r1, [r7, #24]
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	4413      	add	r3, r2
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	81fb      	strh	r3, [r7, #14]
 800bd1a:	89fb      	ldrh	r3, [r7, #14]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1d7      	bne.n	800bcd0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	4413      	add	r3, r2
 800bd26:	3316      	adds	r3, #22
 800bd28:	2200      	movs	r2, #0
 800bd2a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61bb      	str	r3, [r7, #24]
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3316      	adds	r3, #22
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800bd40:	e04c      	b.n	800bddc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a1a      	ldr	r2, [r3, #32]
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	1c59      	adds	r1, r3, #1
 800bd4a:	61f9      	str	r1, [r7, #28]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	d100      	bne.n	800bd5a <get_fileinfo+0xbe>
 800bd58:	e040      	b.n	800bddc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	2b05      	cmp	r3, #5
 800bd5e:	d101      	bne.n	800bd64 <get_fileinfo+0xc8>
 800bd60:	23e5      	movs	r3, #229	; 0xe5
 800bd62:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	2b09      	cmp	r3, #9
 800bd68:	d10f      	bne.n	800bd8a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800bd6a:	89bb      	ldrh	r3, [r7, #12]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d105      	bne.n	800bd7c <get_fileinfo+0xe0>
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	4413      	add	r3, r2
 800bd76:	3316      	adds	r3, #22
 800bd78:	222e      	movs	r2, #46	; 0x2e
 800bd7a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	61ba      	str	r2, [r7, #24]
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	4413      	add	r3, r2
 800bd86:	222e      	movs	r2, #46	; 0x2e
 800bd88:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	4413      	add	r3, r2
 800bd90:	3309      	adds	r3, #9
 800bd92:	7dfa      	ldrb	r2, [r7, #23]
 800bd94:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800bd96:	89bb      	ldrh	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d11c      	bne.n	800bdd6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	2b40      	cmp	r3, #64	; 0x40
 800bda0:	d913      	bls.n	800bdca <get_fileinfo+0x12e>
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	2b5a      	cmp	r3, #90	; 0x5a
 800bda6:	d810      	bhi.n	800bdca <get_fileinfo+0x12e>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	330c      	adds	r3, #12
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	2b08      	cmp	r3, #8
 800bdb6:	d901      	bls.n	800bdbc <get_fileinfo+0x120>
 800bdb8:	2310      	movs	r3, #16
 800bdba:	e000      	b.n	800bdbe <get_fileinfo+0x122>
 800bdbc:	2308      	movs	r3, #8
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
 800bdc6:	3320      	adds	r3, #32
 800bdc8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	4413      	add	r3, r2
 800bdd0:	3316      	adds	r3, #22
 800bdd2:	7dfa      	ldrb	r2, [r7, #23]
 800bdd4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	2b0a      	cmp	r3, #10
 800bde0:	d9af      	bls.n	800bd42 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800bde2:	89bb      	ldrh	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10d      	bne.n	800be04 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	4413      	add	r3, r2
 800bdee:	3316      	adds	r3, #22
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	330c      	adds	r3, #12
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <get_fileinfo+0x168>
 800be00:	2300      	movs	r3, #0
 800be02:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	4413      	add	r3, r2
 800be0a:	3309      	adds	r3, #9
 800be0c:	2200      	movs	r2, #0
 800be0e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	7ada      	ldrb	r2, [r3, #11]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	331c      	adds	r3, #28
 800be20:	4618      	mov	r0, r3
 800be22:	f7fe fb99 	bl	800a558 <ld_dword>
 800be26:	4602      	mov	r2, r0
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	3316      	adds	r3, #22
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fb90 	bl	800a558 <ld_dword>
 800be38:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	80da      	strh	r2, [r3, #6]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	0c1b      	lsrs	r3, r3, #16
 800be46:	b29a      	uxth	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	809a      	strh	r2, [r3, #4]
 800be4c:	e000      	b.n	800be50 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800be4e:	bf00      	nop
}
 800be50:	3720      	adds	r7, #32
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
	...

0800be58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08a      	sub	sp, #40	; 0x28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	613b      	str	r3, [r7, #16]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	61ba      	str	r2, [r7, #24]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	4413      	add	r3, r2
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800be86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be88:	2b1f      	cmp	r3, #31
 800be8a:	d940      	bls.n	800bf0e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800be8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be8e:	2b2f      	cmp	r3, #47	; 0x2f
 800be90:	d006      	beq.n	800bea0 <create_name+0x48>
 800be92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be94:	2b5c      	cmp	r3, #92	; 0x5c
 800be96:	d110      	bne.n	800beba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be98:	e002      	b.n	800bea0 <create_name+0x48>
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	3301      	adds	r3, #1
 800be9e:	61bb      	str	r3, [r7, #24]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	4413      	add	r3, r2
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	2b2f      	cmp	r3, #47	; 0x2f
 800beaa:	d0f6      	beq.n	800be9a <create_name+0x42>
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	4413      	add	r3, r2
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b5c      	cmp	r3, #92	; 0x5c
 800beb6:	d0f0      	beq.n	800be9a <create_name+0x42>
			break;
 800beb8:	e02a      	b.n	800bf10 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2bfe      	cmp	r3, #254	; 0xfe
 800bebe:	d901      	bls.n	800bec4 <create_name+0x6c>
 800bec0:	2306      	movs	r3, #6
 800bec2:	e177      	b.n	800c1b4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800beca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800becc:	2101      	movs	r1, #1
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 fc50 	bl	800d774 <ff_convert>
 800bed4:	4603      	mov	r3, r0
 800bed6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <create_name+0x8a>
 800bede:	2306      	movs	r3, #6
 800bee0:	e168      	b.n	800c1b4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee4:	2b7f      	cmp	r3, #127	; 0x7f
 800bee6:	d809      	bhi.n	800befc <create_name+0xa4>
 800bee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beea:	4619      	mov	r1, r3
 800beec:	48b3      	ldr	r0, [pc, #716]	; (800c1bc <create_name+0x364>)
 800beee:	f7fe fc00 	bl	800a6f2 <chk_chr>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <create_name+0xa4>
 800bef8:	2306      	movs	r3, #6
 800befa:	e15b      	b.n	800c1b4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	617a      	str	r2, [r7, #20]
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bf0c:	e7b4      	b.n	800be78 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bf0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	441a      	add	r2, r3
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf1c:	2b1f      	cmp	r3, #31
 800bf1e:	d801      	bhi.n	800bf24 <create_name+0xcc>
 800bf20:	2304      	movs	r3, #4
 800bf22:	e000      	b.n	800bf26 <create_name+0xce>
 800bf24:	2300      	movs	r3, #0
 800bf26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf2a:	e011      	b.n	800bf50 <create_name+0xf8>
		w = lfn[di - 1];
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bf32:	4413      	add	r3, r2
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4413      	add	r3, r2
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bf3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf40:	2b20      	cmp	r3, #32
 800bf42:	d002      	beq.n	800bf4a <create_name+0xf2>
 800bf44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf46:	2b2e      	cmp	r3, #46	; 0x2e
 800bf48:	d106      	bne.n	800bf58 <create_name+0x100>
		di--;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1ea      	bne.n	800bf2c <create_name+0xd4>
 800bf56:	e000      	b.n	800bf5a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bf58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	005b      	lsls	r3, r3, #1
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	4413      	add	r3, r2
 800bf62:	2200      	movs	r2, #0
 800bf64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <create_name+0x118>
 800bf6c:	2306      	movs	r3, #6
 800bf6e:	e121      	b.n	800c1b4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3324      	adds	r3, #36	; 0x24
 800bf74:	220b      	movs	r2, #11
 800bf76:	2120      	movs	r1, #32
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fe fb78 	bl	800a66e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bf7e:	2300      	movs	r3, #0
 800bf80:	61bb      	str	r3, [r7, #24]
 800bf82:	e002      	b.n	800bf8a <create_name+0x132>
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	3301      	adds	r3, #1
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	4413      	add	r3, r2
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d0f5      	beq.n	800bf84 <create_name+0x12c>
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfa4:	d0ee      	beq.n	800bf84 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d009      	beq.n	800bfc0 <create_name+0x168>
 800bfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb0:	f043 0303 	orr.w	r3, r3, #3
 800bfb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bfb8:	e002      	b.n	800bfc0 <create_name+0x168>
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d009      	beq.n	800bfda <create_name+0x182>
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bfcc:	4413      	add	r3, r2
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	2b2e      	cmp	r3, #46	; 0x2e
 800bfd8:	d1ef      	bne.n	800bfba <create_name+0x162>

	i = b = 0; ni = 8;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	623b      	str	r3, [r7, #32]
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	61ba      	str	r2, [r7, #24]
 800bfee:	005b      	lsls	r3, r3, #1
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8090 	beq.w	800c120 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c002:	2b20      	cmp	r3, #32
 800c004:	d006      	beq.n	800c014 <create_name+0x1bc>
 800c006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c008:	2b2e      	cmp	r3, #46	; 0x2e
 800c00a:	d10a      	bne.n	800c022 <create_name+0x1ca>
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	429a      	cmp	r2, r3
 800c012:	d006      	beq.n	800c022 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c018:	f043 0303 	orr.w	r3, r3, #3
 800c01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c020:	e07d      	b.n	800c11e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c022:	6a3a      	ldr	r2, [r7, #32]
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	429a      	cmp	r2, r3
 800c028:	d203      	bcs.n	800c032 <create_name+0x1da>
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d123      	bne.n	800c07a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	2b0b      	cmp	r3, #11
 800c036:	d106      	bne.n	800c046 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03c:	f043 0303 	orr.w	r3, r3, #3
 800c040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c044:	e06f      	b.n	800c126 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c046:	69ba      	ldr	r2, [r7, #24]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d005      	beq.n	800c05a <create_name+0x202>
 800c04e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c052:	f043 0303 	orr.w	r3, r3, #3
 800c056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d860      	bhi.n	800c124 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	61bb      	str	r3, [r7, #24]
 800c066:	2308      	movs	r3, #8
 800c068:	623b      	str	r3, [r7, #32]
 800c06a:	230b      	movs	r3, #11
 800c06c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c06e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c078:	e051      	b.n	800c11e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c07a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c07c:	2b7f      	cmp	r3, #127	; 0x7f
 800c07e:	d914      	bls.n	800c0aa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c082:	2100      	movs	r1, #0
 800c084:	4618      	mov	r0, r3
 800c086:	f001 fb75 	bl	800d774 <ff_convert>
 800c08a:	4603      	mov	r3, r0
 800c08c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <create_name+0x246>
 800c094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c096:	3b80      	subs	r3, #128	; 0x80
 800c098:	4a49      	ldr	r2, [pc, #292]	; (800c1c0 <create_name+0x368>)
 800c09a:	5cd3      	ldrb	r3, [r2, r3]
 800c09c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c09e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a2:	f043 0302 	orr.w	r3, r3, #2
 800c0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d007      	beq.n	800c0c0 <create_name+0x268>
 800c0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4843      	ldr	r0, [pc, #268]	; (800c1c4 <create_name+0x36c>)
 800c0b6:	f7fe fb1c 	bl	800a6f2 <chk_chr>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d008      	beq.n	800c0d2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c0c0:	235f      	movs	r3, #95	; 0x5f
 800c0c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c8:	f043 0303 	orr.w	r3, r3, #3
 800c0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0d0:	e01b      	b.n	800c10a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c0d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0d4:	2b40      	cmp	r3, #64	; 0x40
 800c0d6:	d909      	bls.n	800c0ec <create_name+0x294>
 800c0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0da:	2b5a      	cmp	r3, #90	; 0x5a
 800c0dc:	d806      	bhi.n	800c0ec <create_name+0x294>
					b |= 2;
 800c0de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0e2:	f043 0302 	orr.w	r3, r3, #2
 800c0e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0ea:	e00e      	b.n	800c10a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c0ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ee:	2b60      	cmp	r3, #96	; 0x60
 800c0f0:	d90b      	bls.n	800c10a <create_name+0x2b2>
 800c0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0f4:	2b7a      	cmp	r3, #122	; 0x7a
 800c0f6:	d808      	bhi.n	800c10a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0fc:	f043 0301 	orr.w	r3, r3, #1
 800c100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c104:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c106:	3b20      	subs	r3, #32
 800c108:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	623a      	str	r2, [r7, #32]
 800c110:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c112:	b2d1      	uxtb	r1, r2
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	4413      	add	r3, r2
 800c118:	460a      	mov	r2, r1
 800c11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c11e:	e763      	b.n	800bfe8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c120:	bf00      	nop
 800c122:	e000      	b.n	800c126 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c124:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c12c:	2be5      	cmp	r3, #229	; 0xe5
 800c12e:	d103      	bne.n	800c138 <create_name+0x2e0>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2205      	movs	r2, #5
 800c134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	2b08      	cmp	r3, #8
 800c13c:	d104      	bne.n	800c148 <create_name+0x2f0>
 800c13e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c14c:	f003 030c 	and.w	r3, r3, #12
 800c150:	2b0c      	cmp	r3, #12
 800c152:	d005      	beq.n	800c160 <create_name+0x308>
 800c154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c158:	f003 0303 	and.w	r3, r3, #3
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	d105      	bne.n	800c16c <create_name+0x314>
 800c160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c164:	f043 0302 	orr.w	r3, r3, #2
 800c168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d117      	bne.n	800c1a8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c17c:	f003 0303 	and.w	r3, r3, #3
 800c180:	2b01      	cmp	r3, #1
 800c182:	d105      	bne.n	800c190 <create_name+0x338>
 800c184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c188:	f043 0310 	orr.w	r3, r3, #16
 800c18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c194:	f003 030c 	and.w	r3, r3, #12
 800c198:	2b04      	cmp	r3, #4
 800c19a:	d105      	bne.n	800c1a8 <create_name+0x350>
 800c19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a0:	f043 0308 	orr.w	r3, r3, #8
 800c1a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c1ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c1b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3728      	adds	r7, #40	; 0x28
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	08010f0c 	.word	0x08010f0c
 800c1c0:	08010fb0 	.word	0x08010fb0
 800c1c4:	08010f18 	.word	0x08010f18

0800c1c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c1dc:	e002      	b.n	800c1e4 <follow_path+0x1c>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	2b2f      	cmp	r3, #47	; 0x2f
 800c1ea:	d0f8      	beq.n	800c1de <follow_path+0x16>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c1f2:	d0f4      	beq.n	800c1de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b1f      	cmp	r3, #31
 800c200:	d80a      	bhi.n	800c218 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2280      	movs	r2, #128	; 0x80
 800c206:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c20a:	2100      	movs	r1, #0
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff f81d 	bl	800b24c <dir_sdi>
 800c212:	4603      	mov	r3, r0
 800c214:	75fb      	strb	r3, [r7, #23]
 800c216:	e048      	b.n	800c2aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c218:	463b      	mov	r3, r7
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff fe1b 	bl	800be58 <create_name>
 800c222:	4603      	mov	r3, r0
 800c224:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c226:	7dfb      	ldrb	r3, [r7, #23]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d139      	bne.n	800c2a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fb7c 	bl	800b92a <dir_find>
 800c232:	4603      	mov	r3, r0
 800c234:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c23c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00a      	beq.n	800c25a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	2b04      	cmp	r3, #4
 800c248:	d12c      	bne.n	800c2a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c24a:	7afb      	ldrb	r3, [r7, #11]
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b00      	cmp	r3, #0
 800c252:	d127      	bne.n	800c2a4 <follow_path+0xdc>
 800c254:	2305      	movs	r3, #5
 800c256:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c258:	e024      	b.n	800c2a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c25a:	7afb      	ldrb	r3, [r7, #11]
 800c25c:	f003 0304 	and.w	r3, r3, #4
 800c260:	2b00      	cmp	r3, #0
 800c262:	d121      	bne.n	800c2a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	799b      	ldrb	r3, [r3, #6]
 800c268:	f003 0310 	and.w	r3, r3, #16
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d102      	bne.n	800c276 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c270:	2305      	movs	r3, #5
 800c272:	75fb      	strb	r3, [r7, #23]
 800c274:	e019      	b.n	800c2aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	695b      	ldr	r3, [r3, #20]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	8992      	ldrh	r2, [r2, #12]
 800c284:	fbb3 f0f2 	udiv	r0, r3, r2
 800c288:	fb02 f200 	mul.w	r2, r2, r0
 800c28c:	1a9b      	subs	r3, r3, r2
 800c28e:	440b      	add	r3, r1
 800c290:	4619      	mov	r1, r3
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff f980 	bl	800b598 <ld_clust>
 800c298:	4602      	mov	r2, r0
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c29e:	e7bb      	b.n	800c218 <follow_path+0x50>
			if (res != FR_OK) break;
 800c2a0:	bf00      	nop
 800c2a2:	e002      	b.n	800c2aa <follow_path+0xe2>
				break;
 800c2a4:	bf00      	nop
 800c2a6:	e000      	b.n	800c2aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c2a8:	bf00      	nop
			}
		}
	}

	return res;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d031      	beq.n	800c32e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e002      	b.n	800c2d8 <get_ldnumber+0x24>
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	617b      	str	r3, [r7, #20]
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	2b1f      	cmp	r3, #31
 800c2de:	d903      	bls.n	800c2e8 <get_ldnumber+0x34>
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b3a      	cmp	r3, #58	; 0x3a
 800c2e6:	d1f4      	bne.n	800c2d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b3a      	cmp	r3, #58	; 0x3a
 800c2ee:	d11c      	bne.n	800c32a <get_ldnumber+0x76>
			tp = *path;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	60fa      	str	r2, [r7, #12]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	3b30      	subs	r3, #48	; 0x30
 800c300:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b09      	cmp	r3, #9
 800c306:	d80e      	bhi.n	800c326 <get_ldnumber+0x72>
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d10a      	bne.n	800c326 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d107      	bne.n	800c326 <get_ldnumber+0x72>
					vol = (int)i;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	3301      	adds	r3, #1
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	e002      	b.n	800c330 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c32a:	2300      	movs	r3, #0
 800c32c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c32e:	693b      	ldr	r3, [r7, #16]
}
 800c330:	4618      	mov	r0, r3
 800c332:	371c      	adds	r7, #28
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	70da      	strb	r2, [r3, #3]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f04f 32ff 	mov.w	r2, #4294967295
 800c352:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7fe fb96 	bl	800aa88 <move_window>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <check_fs+0x2a>
 800c362:	2304      	movs	r3, #4
 800c364:	e038      	b.n	800c3d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	3338      	adds	r3, #56	; 0x38
 800c36a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe f8da 	bl	800a528 <ld_word>
 800c374:	4603      	mov	r3, r0
 800c376:	461a      	mov	r2, r3
 800c378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d001      	beq.n	800c384 <check_fs+0x48>
 800c380:	2303      	movs	r3, #3
 800c382:	e029      	b.n	800c3d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c38a:	2be9      	cmp	r3, #233	; 0xe9
 800c38c:	d009      	beq.n	800c3a2 <check_fs+0x66>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c394:	2beb      	cmp	r3, #235	; 0xeb
 800c396:	d11e      	bne.n	800c3d6 <check_fs+0x9a>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c39e:	2b90      	cmp	r3, #144	; 0x90
 800c3a0:	d119      	bne.n	800c3d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3338      	adds	r3, #56	; 0x38
 800c3a6:	3336      	adds	r3, #54	; 0x36
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe f8d5 	bl	800a558 <ld_dword>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3b4:	4a0a      	ldr	r2, [pc, #40]	; (800c3e0 <check_fs+0xa4>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d101      	bne.n	800c3be <check_fs+0x82>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e00c      	b.n	800c3d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3338      	adds	r3, #56	; 0x38
 800c3c2:	3352      	adds	r3, #82	; 0x52
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fe f8c7 	bl	800a558 <ld_dword>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4a05      	ldr	r2, [pc, #20]	; (800c3e4 <check_fs+0xa8>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d101      	bne.n	800c3d6 <check_fs+0x9a>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e000      	b.n	800c3d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c3d6:	2302      	movs	r3, #2
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	00544146 	.word	0x00544146
 800c3e4:	33544146 	.word	0x33544146

0800c3e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b096      	sub	sp, #88	; 0x58
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff ff59 	bl	800c2b4 <get_ldnumber>
 800c402:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c406:	2b00      	cmp	r3, #0
 800c408:	da01      	bge.n	800c40e <find_volume+0x26>
 800c40a:	230b      	movs	r3, #11
 800c40c:	e268      	b.n	800c8e0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c40e:	4ab0      	ldr	r2, [pc, #704]	; (800c6d0 <find_volume+0x2e8>)
 800c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c416:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <find_volume+0x3a>
 800c41e:	230c      	movs	r3, #12
 800c420:	e25e      	b.n	800c8e0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c426:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c428:	79fb      	ldrb	r3, [r7, #7]
 800c42a:	f023 0301 	bic.w	r3, r3, #1
 800c42e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01a      	beq.n	800c46e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fd ffd5 	bl	800a3ec <disk_status>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10c      	bne.n	800c46e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <find_volume+0x82>
 800c45a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c45e:	f003 0304 	and.w	r3, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c466:	230a      	movs	r3, #10
 800c468:	e23a      	b.n	800c8e0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800c46a:	2300      	movs	r3, #0
 800c46c:	e238      	b.n	800c8e0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	2200      	movs	r2, #0
 800c472:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c476:	b2da      	uxtb	r2, r3
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	4618      	mov	r0, r3
 800c482:	f7fd ffcd 	bl	800a420 <disk_initialize>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c48c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d001      	beq.n	800c49c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c498:	2303      	movs	r3, #3
 800c49a:	e221      	b.n	800c8e0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c49c:	79fb      	ldrb	r3, [r7, #7]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <find_volume+0xca>
 800c4a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4a6:	f003 0304 	and.w	r3, r3, #4
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c4ae:	230a      	movs	r3, #10
 800c4b0:	e216      	b.n	800c8e0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	7858      	ldrb	r0, [r3, #1]
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	330c      	adds	r3, #12
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	2102      	movs	r1, #2
 800c4be:	f7fe f815 	bl	800a4ec <disk_ioctl>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <find_volume+0xe4>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e209      	b.n	800c8e0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	899b      	ldrh	r3, [r3, #12]
 800c4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4d4:	d80d      	bhi.n	800c4f2 <find_volume+0x10a>
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d8:	899b      	ldrh	r3, [r3, #12]
 800c4da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4de:	d308      	bcc.n	800c4f2 <find_volume+0x10a>
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	899b      	ldrh	r3, [r3, #12]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e8:	899b      	ldrh	r3, [r3, #12]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d001      	beq.n	800c4f6 <find_volume+0x10e>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e1f4      	b.n	800c8e0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c4fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4fe:	f7ff ff1d 	bl	800c33c <check_fs>
 800c502:	4603      	mov	r3, r0
 800c504:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d14b      	bne.n	800c5a8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c510:	2300      	movs	r3, #0
 800c512:	643b      	str	r3, [r7, #64]	; 0x40
 800c514:	e01f      	b.n	800c556 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51e:	011b      	lsls	r3, r3, #4
 800c520:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c524:	4413      	add	r3, r2
 800c526:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	3304      	adds	r3, #4
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d006      	beq.n	800c540 <find_volume+0x158>
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	3308      	adds	r3, #8
 800c536:	4618      	mov	r0, r3
 800c538:	f7fe f80e 	bl	800a558 <ld_dword>
 800c53c:	4602      	mov	r2, r0
 800c53e:	e000      	b.n	800c542 <find_volume+0x15a>
 800c540:	2200      	movs	r2, #0
 800c542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c54a:	440b      	add	r3, r1
 800c54c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	3301      	adds	r3, #1
 800c554:	643b      	str	r3, [r7, #64]	; 0x40
 800c556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d9dc      	bls.n	800c516 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c55c:	2300      	movs	r3, #0
 800c55e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <find_volume+0x184>
 800c566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c568:	3b01      	subs	r3, #1
 800c56a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c574:	4413      	add	r3, r2
 800c576:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c57a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d005      	beq.n	800c58e <find_volume+0x1a6>
 800c582:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c586:	f7ff fed9 	bl	800c33c <check_fs>
 800c58a:	4603      	mov	r3, r0
 800c58c:	e000      	b.n	800c590 <find_volume+0x1a8>
 800c58e:	2303      	movs	r3, #3
 800c590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d905      	bls.n	800c5a8 <find_volume+0x1c0>
 800c59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c59e:	3301      	adds	r3, #1
 800c5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a4:	2b03      	cmp	r3, #3
 800c5a6:	d9e1      	bls.n	800c56c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c5a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	d101      	bne.n	800c5b4 <find_volume+0x1cc>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e195      	b.n	800c8e0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d901      	bls.n	800c5c0 <find_volume+0x1d8>
 800c5bc:	230d      	movs	r3, #13
 800c5be:	e18f      	b.n	800c8e0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	3338      	adds	r3, #56	; 0x38
 800c5c4:	330b      	adds	r3, #11
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fd ffae 	bl	800a528 <ld_word>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	899b      	ldrh	r3, [r3, #12]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d001      	beq.n	800c5dc <find_volume+0x1f4>
 800c5d8:	230d      	movs	r3, #13
 800c5da:	e181      	b.n	800c8e0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	3338      	adds	r3, #56	; 0x38
 800c5e0:	3316      	adds	r3, #22
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fd ffa0 	bl	800a528 <ld_word>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <find_volume+0x218>
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	3338      	adds	r3, #56	; 0x38
 800c5f6:	3324      	adds	r3, #36	; 0x24
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7fd ffad 	bl	800a558 <ld_dword>
 800c5fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c604:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	789b      	ldrb	r3, [r3, #2]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d005      	beq.n	800c624 <find_volume+0x23c>
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	789b      	ldrb	r3, [r3, #2]
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d001      	beq.n	800c624 <find_volume+0x23c>
 800c620:	230d      	movs	r3, #13
 800c622:	e15d      	b.n	800c8e0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	789b      	ldrb	r3, [r3, #2]
 800c628:	461a      	mov	r2, r3
 800c62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c62c:	fb02 f303 	mul.w	r3, r2, r3
 800c630:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c638:	b29a      	uxth	r2, r3
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	895b      	ldrh	r3, [r3, #10]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d008      	beq.n	800c658 <find_volume+0x270>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	895b      	ldrh	r3, [r3, #10]
 800c64a:	461a      	mov	r2, r3
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	895b      	ldrh	r3, [r3, #10]
 800c650:	3b01      	subs	r3, #1
 800c652:	4013      	ands	r3, r2
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <find_volume+0x274>
 800c658:	230d      	movs	r3, #13
 800c65a:	e141      	b.n	800c8e0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	3338      	adds	r3, #56	; 0x38
 800c660:	3311      	adds	r3, #17
 800c662:	4618      	mov	r0, r3
 800c664:	f7fd ff60 	bl	800a528 <ld_word>
 800c668:	4603      	mov	r3, r0
 800c66a:	461a      	mov	r2, r3
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c672:	891b      	ldrh	r3, [r3, #8]
 800c674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c676:	8992      	ldrh	r2, [r2, #12]
 800c678:	0952      	lsrs	r2, r2, #5
 800c67a:	b292      	uxth	r2, r2
 800c67c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c680:	fb02 f201 	mul.w	r2, r2, r1
 800c684:	1a9b      	subs	r3, r3, r2
 800c686:	b29b      	uxth	r3, r3
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <find_volume+0x2a8>
 800c68c:	230d      	movs	r3, #13
 800c68e:	e127      	b.n	800c8e0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	3338      	adds	r3, #56	; 0x38
 800c694:	3313      	adds	r3, #19
 800c696:	4618      	mov	r0, r3
 800c698:	f7fd ff46 	bl	800a528 <ld_word>
 800c69c:	4603      	mov	r3, r0
 800c69e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <find_volume+0x2cc>
 800c6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a8:	3338      	adds	r3, #56	; 0x38
 800c6aa:	3320      	adds	r3, #32
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fd ff53 	bl	800a558 <ld_dword>
 800c6b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	3338      	adds	r3, #56	; 0x38
 800c6b8:	330e      	adds	r3, #14
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fd ff34 	bl	800a528 <ld_word>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d104      	bne.n	800c6d4 <find_volume+0x2ec>
 800c6ca:	230d      	movs	r3, #13
 800c6cc:	e108      	b.n	800c8e0 <find_volume+0x4f8>
 800c6ce:	bf00      	nop
 800c6d0:	2400126c 	.word	0x2400126c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c6d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6d8:	4413      	add	r3, r2
 800c6da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6dc:	8911      	ldrh	r1, [r2, #8]
 800c6de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6e0:	8992      	ldrh	r2, [r2, #12]
 800c6e2:	0952      	lsrs	r2, r2, #5
 800c6e4:	b292      	uxth	r2, r2
 800c6e6:	fbb1 f2f2 	udiv	r2, r1, r2
 800c6ea:	b292      	uxth	r2, r2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c6f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d201      	bcs.n	800c6fc <find_volume+0x314>
 800c6f8:	230d      	movs	r3, #13
 800c6fa:	e0f1      	b.n	800c8e0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c6fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c704:	8952      	ldrh	r2, [r2, #10]
 800c706:	fbb3 f3f2 	udiv	r3, r3, r2
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <find_volume+0x32e>
 800c712:	230d      	movs	r3, #13
 800c714:	e0e4      	b.n	800c8e0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800c716:	2303      	movs	r3, #3
 800c718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c722:	4293      	cmp	r3, r2
 800c724:	d802      	bhi.n	800c72c <find_volume+0x344>
 800c726:	2302      	movs	r3, #2
 800c728:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c732:	4293      	cmp	r3, r2
 800c734:	d802      	bhi.n	800c73c <find_volume+0x354>
 800c736:	2301      	movs	r3, #1
 800c738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	1c9a      	adds	r2, r3, #2
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c748:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c74a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c74e:	441a      	add	r2, r3
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	441a      	add	r2, r3
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c75e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c762:	2b03      	cmp	r3, #3
 800c764:	d11e      	bne.n	800c7a4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c768:	3338      	adds	r3, #56	; 0x38
 800c76a:	332a      	adds	r3, #42	; 0x2a
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fd fedb 	bl	800a528 <ld_word>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <find_volume+0x394>
 800c778:	230d      	movs	r3, #13
 800c77a:	e0b1      	b.n	800c8e0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77e:	891b      	ldrh	r3, [r3, #8]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <find_volume+0x3a0>
 800c784:	230d      	movs	r3, #13
 800c786:	e0ab      	b.n	800c8e0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78a:	3338      	adds	r3, #56	; 0x38
 800c78c:	332c      	adds	r3, #44	; 0x2c
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fd fee2 	bl	800a558 <ld_dword>
 800c794:	4602      	mov	r2, r0
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a2:	e01f      	b.n	800c7e4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	891b      	ldrh	r3, [r3, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d101      	bne.n	800c7b0 <find_volume+0x3c8>
 800c7ac:	230d      	movs	r3, #13
 800c7ae:	e097      	b.n	800c8e0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b6:	441a      	add	r2, r3
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c7bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d103      	bne.n	800c7cc <find_volume+0x3e4>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	e00a      	b.n	800c7e2 <find_volume+0x3fa>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	69da      	ldr	r2, [r3, #28]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	085a      	lsrs	r2, r3, #1
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c7e2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	6a1a      	ldr	r2, [r3, #32]
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	899b      	ldrh	r3, [r3, #12]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7f6:	8989      	ldrh	r1, [r1, #12]
 800c7f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d201      	bcs.n	800c804 <find_volume+0x41c>
 800c800:	230d      	movs	r3, #13
 800c802:	e06d      	b.n	800c8e0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	f04f 32ff 	mov.w	r2, #4294967295
 800c80a:	619a      	str	r2, [r3, #24]
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	699a      	ldr	r2, [r3, #24]
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	2280      	movs	r2, #128	; 0x80
 800c818:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c81a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d149      	bne.n	800c8b6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	3338      	adds	r3, #56	; 0x38
 800c826:	3330      	adds	r3, #48	; 0x30
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fd fe7d 	bl	800a528 <ld_word>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b01      	cmp	r3, #1
 800c832:	d140      	bne.n	800c8b6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c836:	3301      	adds	r3, #1
 800c838:	4619      	mov	r1, r3
 800c83a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c83c:	f7fe f924 	bl	800aa88 <move_window>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d137      	bne.n	800c8b6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	2200      	movs	r2, #0
 800c84a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	3338      	adds	r3, #56	; 0x38
 800c850:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c854:	4618      	mov	r0, r3
 800c856:	f7fd fe67 	bl	800a528 <ld_word>
 800c85a:	4603      	mov	r3, r0
 800c85c:	461a      	mov	r2, r3
 800c85e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c862:	429a      	cmp	r2, r3
 800c864:	d127      	bne.n	800c8b6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	3338      	adds	r3, #56	; 0x38
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fd fe74 	bl	800a558 <ld_dword>
 800c870:	4603      	mov	r3, r0
 800c872:	4a1d      	ldr	r2, [pc, #116]	; (800c8e8 <find_volume+0x500>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d11e      	bne.n	800c8b6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	3338      	adds	r3, #56	; 0x38
 800c87c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c880:	4618      	mov	r0, r3
 800c882:	f7fd fe69 	bl	800a558 <ld_dword>
 800c886:	4603      	mov	r3, r0
 800c888:	4a18      	ldr	r2, [pc, #96]	; (800c8ec <find_volume+0x504>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d113      	bne.n	800c8b6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c890:	3338      	adds	r3, #56	; 0x38
 800c892:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c896:	4618      	mov	r0, r3
 800c898:	f7fd fe5e 	bl	800a558 <ld_dword>
 800c89c:	4602      	mov	r2, r0
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a4:	3338      	adds	r3, #56	; 0x38
 800c8a6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fd fe54 	bl	800a558 <ld_dword>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c8bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c8be:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <find_volume+0x508>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <find_volume+0x508>)
 800c8c8:	801a      	strh	r2, [r3, #0]
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <find_volume+0x508>)
 800c8cc:	881a      	ldrh	r2, [r3, #0]
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	4a07      	ldr	r2, [pc, #28]	; (800c8f4 <find_volume+0x50c>)
 800c8d6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c8d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8da:	f7fe f86d 	bl	800a9b8 <clear_lock>
#endif
	return FR_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3758      	adds	r7, #88	; 0x58
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	41615252 	.word	0x41615252
 800c8ec:	61417272 	.word	0x61417272
 800c8f0:	24001270 	.word	0x24001270
 800c8f4:	24001294 	.word	0x24001294

0800c8f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c902:	2309      	movs	r3, #9
 800c904:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01c      	beq.n	800c946 <validate+0x4e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d018      	beq.n	800c946 <validate+0x4e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d013      	beq.n	800c946 <validate+0x4e>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	889a      	ldrh	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	88db      	ldrh	r3, [r3, #6]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d10c      	bne.n	800c946 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	785b      	ldrb	r3, [r3, #1]
 800c932:	4618      	mov	r0, r3
 800c934:	f7fd fd5a 	bl	800a3ec <disk_status>
 800c938:	4603      	mov	r3, r0
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <validate+0x4e>
			res = FR_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d102      	bne.n	800c952 <validate+0x5a>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	e000      	b.n	800c954 <validate+0x5c>
 800c952:	2300      	movs	r3, #0
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	6013      	str	r3, [r2, #0]
	return res;
 800c958:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
	...

0800c964 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	4613      	mov	r3, r2
 800c970:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c976:	f107 0310 	add.w	r3, r7, #16
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff fc9a 	bl	800c2b4 <get_ldnumber>
 800c980:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	2b00      	cmp	r3, #0
 800c986:	da01      	bge.n	800c98c <f_mount+0x28>
 800c988:	230b      	movs	r3, #11
 800c98a:	e02b      	b.n	800c9e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c98c:	4a17      	ldr	r2, [pc, #92]	; (800c9ec <f_mount+0x88>)
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c994:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d005      	beq.n	800c9a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c99c:	69b8      	ldr	r0, [r7, #24]
 800c99e:	f7fe f80b 	bl	800a9b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d002      	beq.n	800c9b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	490d      	ldr	r1, [pc, #52]	; (800c9ec <f_mount+0x88>)
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <f_mount+0x66>
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d001      	beq.n	800c9ce <f_mount+0x6a>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e00a      	b.n	800c9e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c9ce:	f107 010c 	add.w	r1, r7, #12
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7ff fd05 	bl	800c3e8 <find_volume>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3720      	adds	r7, #32
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	2400126c 	.word	0x2400126c

0800c9f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b09a      	sub	sp, #104	; 0x68
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <f_open+0x18>
 800ca04:	2309      	movs	r3, #9
 800ca06:	e1bb      	b.n	800cd80 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ca08:	79fb      	ldrb	r3, [r7, #7]
 800ca0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ca10:	79fa      	ldrb	r2, [r7, #7]
 800ca12:	f107 0114 	add.w	r1, r7, #20
 800ca16:	f107 0308 	add.w	r3, r7, #8
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff fce4 	bl	800c3e8 <find_volume>
 800ca20:	4603      	mov	r3, r0
 800ca22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ca26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f040 819f 	bne.w	800cd6e <f_open+0x37e>
		dj.obj.fs = fs;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	f107 0318 	add.w	r3, r7, #24
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7ff fbc3 	bl	800c1c8 <follow_path>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ca48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d11a      	bne.n	800ca86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca54:	b25b      	sxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	da03      	bge.n	800ca62 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca5a:	2306      	movs	r3, #6
 800ca5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ca60:	e011      	b.n	800ca86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	f023 0301 	bic.w	r3, r3, #1
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	bf14      	ite	ne
 800ca6c:	2301      	movne	r3, #1
 800ca6e:	2300      	moveq	r3, #0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	461a      	mov	r2, r3
 800ca74:	f107 0318 	add.w	r3, r7, #24
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fd fe54 	bl	800a728 <chk_lock>
 800ca80:	4603      	mov	r3, r0
 800ca82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	f003 031c 	and.w	r3, r3, #28
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d07f      	beq.n	800cb90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ca90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d017      	beq.n	800cac8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ca9c:	2b04      	cmp	r3, #4
 800ca9e:	d10e      	bne.n	800cabe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800caa0:	f7fd fe9e 	bl	800a7e0 <enq_lock>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <f_open+0xc8>
 800caaa:	f107 0318 	add.w	r3, r7, #24
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fe fffc 	bl	800baac <dir_register>
 800cab4:	4603      	mov	r3, r0
 800cab6:	e000      	b.n	800caba <f_open+0xca>
 800cab8:	2312      	movs	r3, #18
 800caba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cabe:	79fb      	ldrb	r3, [r7, #7]
 800cac0:	f043 0308 	orr.w	r3, r3, #8
 800cac4:	71fb      	strb	r3, [r7, #7]
 800cac6:	e010      	b.n	800caea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cac8:	7fbb      	ldrb	r3, [r7, #30]
 800caca:	f003 0311 	and.w	r3, r3, #17
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d003      	beq.n	800cada <f_open+0xea>
					res = FR_DENIED;
 800cad2:	2307      	movs	r3, #7
 800cad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cad8:	e007      	b.n	800caea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cada:	79fb      	ldrb	r3, [r7, #7]
 800cadc:	f003 0304 	and.w	r3, r3, #4
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <f_open+0xfa>
 800cae4:	2308      	movs	r3, #8
 800cae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800caea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d168      	bne.n	800cbc4 <f_open+0x1d4>
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	f003 0308 	and.w	r3, r3, #8
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d063      	beq.n	800cbc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cafc:	f7fd fa38 	bl	8009f70 <get_fattime>
 800cb00:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	330e      	adds	r3, #14
 800cb06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd fd63 	bl	800a5d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	3316      	adds	r3, #22
 800cb12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fd fd5d 	bl	800a5d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1c:	330b      	adds	r3, #11
 800cb1e:	2220      	movs	r2, #32
 800cb20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb26:	4611      	mov	r1, r2
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fd35 	bl	800b598 <ld_clust>
 800cb2e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb34:	2200      	movs	r2, #0
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fe fd4d 	bl	800b5d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	331c      	adds	r3, #28
 800cb40:	2100      	movs	r1, #0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fd fd46 	bl	800a5d4 <st_dword>
					fs->wflag = 1;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d037      	beq.n	800cbc4 <f_open+0x1d4>
						dw = fs->winsect;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb58:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cb5a:	f107 0318 	add.w	r3, r7, #24
 800cb5e:	2200      	movs	r2, #0
 800cb60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe fa3d 	bl	800afe2 <remove_chain>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cb6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d126      	bne.n	800cbc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fd ff84 	bl	800aa88 <move_window>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb8a:	3a01      	subs	r2, #1
 800cb8c:	615a      	str	r2, [r3, #20]
 800cb8e:	e019      	b.n	800cbc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d115      	bne.n	800cbc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb98:	7fbb      	ldrb	r3, [r7, #30]
 800cb9a:	f003 0310 	and.w	r3, r3, #16
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <f_open+0x1ba>
					res = FR_NO_FILE;
 800cba2:	2304      	movs	r3, #4
 800cba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cba8:	e00c      	b.n	800cbc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <f_open+0x1d4>
 800cbb4:	7fbb      	ldrb	r3, [r7, #30]
 800cbb6:	f003 0301 	and.w	r3, r3, #1
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <f_open+0x1d4>
						res = FR_DENIED;
 800cbbe:	2307      	movs	r3, #7
 800cbc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cbc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d128      	bne.n	800cc1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	f003 0308 	and.w	r3, r3, #8
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cbe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	f023 0301 	bic.w	r3, r3, #1
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bf14      	ite	ne
 800cbf6:	2301      	movne	r3, #1
 800cbf8:	2300      	moveq	r3, #0
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f107 0318 	add.w	r3, r7, #24
 800cc02:	4611      	mov	r1, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fd fe0d 	bl	800a824 <inc_lock>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <f_open+0x22e>
 800cc18:	2302      	movs	r3, #2
 800cc1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cc1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f040 80a3 	bne.w	800cd6e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fcb2 	bl	800b598 <ld_clust>
 800cc34:	4602      	mov	r2, r0
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	331c      	adds	r3, #28
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fd fc8a 	bl	800a558 <ld_dword>
 800cc44:	4602      	mov	r2, r0
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	88da      	ldrh	r2, [r3, #6]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	79fa      	ldrb	r2, [r7, #7]
 800cc62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3330      	adds	r3, #48	; 0x30
 800cc7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fd fcf4 	bl	800a66e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	f003 0320 	and.w	r3, r3, #32
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d06e      	beq.n	800cd6e <f_open+0x37e>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d06a      	beq.n	800cd6e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	895b      	ldrh	r3, [r3, #10]
 800cca4:	461a      	mov	r2, r3
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	899b      	ldrh	r3, [r3, #12]
 800ccaa:	fb03 f302 	mul.w	r3, r3, r2
 800ccae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccbc:	e016      	b.n	800ccec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fd ff9d 	bl	800ac02 <get_fat>
 800ccc8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ccca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d802      	bhi.n	800ccd6 <f_open+0x2e6>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ccd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccdc:	d102      	bne.n	800cce4 <f_open+0x2f4>
 800ccde:	2301      	movs	r3, #1
 800cce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d103      	bne.n	800ccfc <f_open+0x30c>
 800ccf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d8e0      	bhi.n	800ccbe <f_open+0x2ce>
				}
				fp->clust = clst;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cd02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d131      	bne.n	800cd6e <f_open+0x37e>
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	899b      	ldrh	r3, [r3, #12]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd12:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd16:	fb02 f201 	mul.w	r2, r2, r1
 800cd1a:	1a9b      	subs	r3, r3, r2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d026      	beq.n	800cd6e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fd ff4d 	bl	800abc4 <clust2sect>
 800cd2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cd2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d103      	bne.n	800cd3a <f_open+0x34a>
						res = FR_INT_ERR;
 800cd32:	2302      	movs	r3, #2
 800cd34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd38:	e019      	b.n	800cd6e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	899b      	ldrh	r3, [r3, #12]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd42:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd48:	441a      	add	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	7858      	ldrb	r0, [r3, #1]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6a1a      	ldr	r2, [r3, #32]
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	f7fd fb85 	bl	800a46c <disk_read>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d002      	beq.n	800cd6e <f_open+0x37e>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <f_open+0x38c>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3768      	adds	r7, #104	; 0x68
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08c      	sub	sp, #48	; 0x30
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f107 0210 	add.w	r2, r7, #16
 800cda6:	4611      	mov	r1, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff fda5 	bl	800c8f8 <validate>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cdb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d107      	bne.n	800cdcc <f_write+0x44>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7d5b      	ldrb	r3, [r3, #21]
 800cdc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cdc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <f_write+0x4a>
 800cdcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdd0:	e16a      	b.n	800d0a8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	7d1b      	ldrb	r3, [r3, #20]
 800cdd6:	f003 0302 	and.w	r3, r3, #2
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d101      	bne.n	800cde2 <f_write+0x5a>
 800cdde:	2307      	movs	r3, #7
 800cde0:	e162      	b.n	800d0a8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	699a      	ldr	r2, [r3, #24]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	441a      	add	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	699b      	ldr	r3, [r3, #24]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	f080 814c 	bcs.w	800d08c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	43db      	mvns	r3, r3
 800cdfa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cdfc:	e146      	b.n	800d08c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	8992      	ldrh	r2, [r2, #12]
 800ce06:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce0a:	fb02 f201 	mul.w	r2, r2, r1
 800ce0e:	1a9b      	subs	r3, r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f040 80f1 	bne.w	800cff8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	8992      	ldrh	r2, [r2, #12]
 800ce1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce22:	693a      	ldr	r2, [r7, #16]
 800ce24:	8952      	ldrh	r2, [r2, #10]
 800ce26:	3a01      	subs	r2, #1
 800ce28:	4013      	ands	r3, r2
 800ce2a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d143      	bne.n	800ceba <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10c      	bne.n	800ce54 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d11a      	bne.n	800ce7c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fe f92e 	bl	800b0ac <create_chain>
 800ce50:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce52:	e013      	b.n	800ce7c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	4619      	mov	r1, r3
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7fe f9ba 	bl	800b1dc <clmt_clust>
 800ce68:	62b8      	str	r0, [r7, #40]	; 0x28
 800ce6a:	e007      	b.n	800ce7c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	69db      	ldr	r3, [r3, #28]
 800ce72:	4619      	mov	r1, r3
 800ce74:	4610      	mov	r0, r2
 800ce76:	f7fe f919 	bl	800b0ac <create_chain>
 800ce7a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f000 8109 	beq.w	800d096 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d104      	bne.n	800ce94 <f_write+0x10c>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	755a      	strb	r2, [r3, #21]
 800ce90:	2302      	movs	r3, #2
 800ce92:	e109      	b.n	800d0a8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9a:	d104      	bne.n	800cea6 <f_write+0x11e>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	755a      	strb	r2, [r3, #21]
 800cea2:	2301      	movs	r3, #1
 800cea4:	e100      	b.n	800d0a8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceaa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d102      	bne.n	800ceba <f_write+0x132>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	7d1b      	ldrb	r3, [r3, #20]
 800cebe:	b25b      	sxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	da18      	bge.n	800cef6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	7858      	ldrb	r0, [r3, #1]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6a1a      	ldr	r2, [r3, #32]
 800ced2:	2301      	movs	r3, #1
 800ced4:	f7fd faea 	bl	800a4ac <disk_write>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d004      	beq.n	800cee8 <f_write+0x160>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2201      	movs	r2, #1
 800cee2:	755a      	strb	r2, [r3, #21]
 800cee4:	2301      	movs	r3, #1
 800cee6:	e0df      	b.n	800d0a8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	7d1b      	ldrb	r3, [r3, #20]
 800ceec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cef0:	b2da      	uxtb	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	69db      	ldr	r3, [r3, #28]
 800cefc:	4619      	mov	r1, r3
 800cefe:	4610      	mov	r0, r2
 800cf00:	f7fd fe60 	bl	800abc4 <clust2sect>
 800cf04:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d104      	bne.n	800cf16 <f_write+0x18e>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2202      	movs	r2, #2
 800cf10:	755a      	strb	r2, [r3, #21]
 800cf12:	2302      	movs	r3, #2
 800cf14:	e0c8      	b.n	800d0a8 <f_write+0x320>
			sect += csect;
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	899b      	ldrh	r3, [r3, #12]
 800cf22:	461a      	mov	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf2a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d043      	beq.n	800cfba <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cf32:	69ba      	ldr	r2, [r7, #24]
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	4413      	add	r3, r2
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	8952      	ldrh	r2, [r2, #10]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d905      	bls.n	800cf4c <f_write+0x1c4>
					cc = fs->csize - csect;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	895b      	ldrh	r3, [r3, #10]
 800cf44:	461a      	mov	r2, r3
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	7858      	ldrb	r0, [r3, #1]
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	69f9      	ldr	r1, [r7, #28]
 800cf56:	f7fd faa9 	bl	800a4ac <disk_write>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d004      	beq.n	800cf6a <f_write+0x1e2>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2201      	movs	r2, #1
 800cf64:	755a      	strb	r2, [r3, #21]
 800cf66:	2301      	movs	r3, #1
 800cf68:	e09e      	b.n	800d0a8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6a1a      	ldr	r2, [r3, #32]
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	6a3a      	ldr	r2, [r7, #32]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d918      	bls.n	800cfaa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6a1a      	ldr	r2, [r3, #32]
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	8992      	ldrh	r2, [r2, #12]
 800cf8a:	fb02 f303 	mul.w	r3, r2, r3
 800cf8e:	69fa      	ldr	r2, [r7, #28]
 800cf90:	18d1      	adds	r1, r2, r3
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	899b      	ldrh	r3, [r3, #12]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f7fd fb48 	bl	800a62c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	7d1b      	ldrb	r3, [r3, #20]
 800cfa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	899b      	ldrh	r3, [r3, #12]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6a3b      	ldr	r3, [r7, #32]
 800cfb2:	fb02 f303 	mul.w	r3, r2, r3
 800cfb6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cfb8:	e04b      	b.n	800d052 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d016      	beq.n	800cff2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	699a      	ldr	r2, [r3, #24]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d210      	bcs.n	800cff2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	7858      	ldrb	r0, [r3, #1]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfda:	2301      	movs	r3, #1
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	f7fd fa45 	bl	800a46c <disk_read>
 800cfe2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d004      	beq.n	800cff2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2201      	movs	r2, #1
 800cfec:	755a      	strb	r2, [r3, #21]
 800cfee:	2301      	movs	r3, #1
 800cff0:	e05a      	b.n	800d0a8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	899b      	ldrh	r3, [r3, #12]
 800cffc:	4618      	mov	r0, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	8992      	ldrh	r2, [r2, #12]
 800d006:	fbb3 f1f2 	udiv	r1, r3, r2
 800d00a:	fb02 f201 	mul.w	r2, r2, r1
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	1ac3      	subs	r3, r0, r3
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d901      	bls.n	800d020 <f_write+0x298>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	8992      	ldrh	r2, [r2, #12]
 800d02e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d032:	fb02 f200 	mul.w	r2, r2, r0
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	440b      	add	r3, r1
 800d03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03c:	69f9      	ldr	r1, [r7, #28]
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fd faf4 	bl	800a62c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	7d1b      	ldrb	r3, [r3, #20]
 800d048:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d052:	69fa      	ldr	r2, [r7, #28]
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	4413      	add	r3, r2
 800d058:	61fb      	str	r3, [r7, #28]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	699a      	ldr	r2, [r3, #24]
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	441a      	add	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	619a      	str	r2, [r3, #24]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	68da      	ldr	r2, [r3, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	429a      	cmp	r2, r3
 800d070:	bf38      	it	cc
 800d072:	461a      	movcc	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	60da      	str	r2, [r3, #12]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	441a      	add	r2, r3
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f47f aeb5 	bne.w	800cdfe <f_write+0x76>
 800d094:	e000      	b.n	800d098 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d096:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	7d1b      	ldrb	r3, [r3, #20]
 800d09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3730      	adds	r7, #48	; 0x30
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b086      	sub	sp, #24
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f107 0208 	add.w	r2, r7, #8
 800d0be:	4611      	mov	r1, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff fc19 	bl	800c8f8 <validate>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d168      	bne.n	800d1a2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	7d1b      	ldrb	r3, [r3, #20]
 800d0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d062      	beq.n	800d1a2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7d1b      	ldrb	r3, [r3, #20]
 800d0e0:	b25b      	sxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da15      	bge.n	800d112 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	7858      	ldrb	r0, [r3, #1]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a1a      	ldr	r2, [r3, #32]
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f7fd f9d9 	bl	800a4ac <disk_write>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <f_sync+0x54>
 800d100:	2301      	movs	r3, #1
 800d102:	e04f      	b.n	800d1a4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	7d1b      	ldrb	r3, [r3, #20]
 800d108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d112:	f7fc ff2d 	bl	8009f70 <get_fattime>
 800d116:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11e:	4619      	mov	r1, r3
 800d120:	4610      	mov	r0, r2
 800d122:	f7fd fcb1 	bl	800aa88 <move_window>
 800d126:	4603      	mov	r3, r0
 800d128:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d138      	bne.n	800d1a2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d134:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	330b      	adds	r3, #11
 800d13a:	781a      	ldrb	r2, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	330b      	adds	r3, #11
 800d140:	f042 0220 	orr.w	r2, r2, #32
 800d144:	b2d2      	uxtb	r2, r2
 800d146:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6818      	ldr	r0, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	461a      	mov	r2, r3
 800d152:	68f9      	ldr	r1, [r7, #12]
 800d154:	f7fe fa3f 	bl	800b5d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f103 021c 	add.w	r2, r3, #28
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fd fa35 	bl	800a5d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	3316      	adds	r3, #22
 800d16e:	6939      	ldr	r1, [r7, #16]
 800d170:	4618      	mov	r0, r3
 800d172:	f7fd fa2f 	bl	800a5d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3312      	adds	r3, #18
 800d17a:	2100      	movs	r1, #0
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fd fa0e 	bl	800a59e <st_word>
					fs->wflag = 1;
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2201      	movs	r2, #1
 800d186:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fd fcaa 	bl	800aae4 <sync_fs>
 800d190:	4603      	mov	r3, r0
 800d192:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	7d1b      	ldrb	r3, [r3, #20]
 800d198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff ff7b 	bl	800d0b0 <f_sync>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d118      	bne.n	800d1f6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f107 0208 	add.w	r2, r7, #8
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff fb93 	bl	800c8f8 <validate>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10c      	bne.n	800d1f6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fd fbad 	bl	800a940 <dec_lock>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b090      	sub	sp, #64	; 0x40
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f107 0208 	add.w	r2, r7, #8
 800d210:	4611      	mov	r1, r2
 800d212:	4618      	mov	r0, r3
 800d214:	f7ff fb70 	bl	800c8f8 <validate>
 800d218:	4603      	mov	r3, r0
 800d21a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d21e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d222:	2b00      	cmp	r3, #0
 800d224:	d103      	bne.n	800d22e <f_lseek+0x2e>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	7d5b      	ldrb	r3, [r3, #21]
 800d22a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d22e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <f_lseek+0x3c>
 800d236:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d23a:	e201      	b.n	800d640 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 80d9 	beq.w	800d3f8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d15a      	bne.n	800d304 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d252:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	1d1a      	adds	r2, r3, #4
 800d258:	627a      	str	r2, [r7, #36]	; 0x24
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	2302      	movs	r3, #2
 800d260:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d03a      	beq.n	800d2e4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	613b      	str	r3, [r7, #16]
 800d272:	2300      	movs	r3, #0
 800d274:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	3302      	adds	r3, #2
 800d27a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	3301      	adds	r3, #1
 800d284:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fd fcb9 	bl	800ac02 <get_fat>
 800d290:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	2b01      	cmp	r3, #1
 800d296:	d804      	bhi.n	800d2a2 <f_lseek+0xa2>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2202      	movs	r2, #2
 800d29c:	755a      	strb	r2, [r3, #21]
 800d29e:	2302      	movs	r3, #2
 800d2a0:	e1ce      	b.n	800d640 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a8:	d104      	bne.n	800d2b4 <f_lseek+0xb4>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	755a      	strb	r2, [r3, #21]
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e1c5      	b.n	800d640 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d0de      	beq.n	800d27c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d809      	bhi.n	800d2da <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	1d1a      	adds	r2, r3, #4
 800d2ca:	627a      	str	r2, [r7, #36]	; 0x24
 800d2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	627a      	str	r2, [r7, #36]	; 0x24
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d3c4      	bcc.n	800d26e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d803      	bhi.n	800d2fc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	e19f      	b.n	800d63c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d2fc:	2311      	movs	r3, #17
 800d2fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d302:	e19b      	b.n	800d63c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d902      	bls.n	800d314 <f_lseek+0x114>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 818d 	beq.w	800d63c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	3b01      	subs	r3, #1
 800d326:	4619      	mov	r1, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7fd ff57 	bl	800b1dc <clmt_clust>
 800d32e:	4602      	mov	r2, r0
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	69db      	ldr	r3, [r3, #28]
 800d33a:	4619      	mov	r1, r3
 800d33c:	4610      	mov	r0, r2
 800d33e:	f7fd fc41 	bl	800abc4 <clust2sect>
 800d342:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d104      	bne.n	800d354 <f_lseek+0x154>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2202      	movs	r2, #2
 800d34e:	755a      	strb	r2, [r3, #21]
 800d350:	2302      	movs	r3, #2
 800d352:	e175      	b.n	800d640 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	3b01      	subs	r3, #1
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	8992      	ldrh	r2, [r2, #12]
 800d35c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	8952      	ldrh	r2, [r2, #10]
 800d364:	3a01      	subs	r2, #1
 800d366:	4013      	ands	r3, r2
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	4413      	add	r3, r2
 800d36c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	699b      	ldr	r3, [r3, #24]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	8992      	ldrh	r2, [r2, #12]
 800d376:	fbb3 f1f2 	udiv	r1, r3, r2
 800d37a:	fb02 f201 	mul.w	r2, r2, r1
 800d37e:	1a9b      	subs	r3, r3, r2
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 815b 	beq.w	800d63c <f_lseek+0x43c>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	69ba      	ldr	r2, [r7, #24]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	f000 8155 	beq.w	800d63c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7d1b      	ldrb	r3, [r3, #20]
 800d396:	b25b      	sxtb	r3, r3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da18      	bge.n	800d3ce <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	7858      	ldrb	r0, [r3, #1]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a1a      	ldr	r2, [r3, #32]
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	f7fd f87e 	bl	800a4ac <disk_write>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <f_lseek+0x1c0>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	755a      	strb	r2, [r3, #21]
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e13f      	b.n	800d640 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	7858      	ldrb	r0, [r3, #1]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3d8:	2301      	movs	r3, #1
 800d3da:	69ba      	ldr	r2, [r7, #24]
 800d3dc:	f7fd f846 	bl	800a46c <disk_read>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <f_lseek+0x1f0>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	755a      	strb	r2, [r3, #21]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e127      	b.n	800d640 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	69ba      	ldr	r2, [r7, #24]
 800d3f4:	621a      	str	r2, [r3, #32]
 800d3f6:	e121      	b.n	800d63c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d908      	bls.n	800d414 <f_lseek+0x214>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	7d1b      	ldrb	r3, [r3, #20]
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	699b      	ldr	r3, [r3, #24]
 800d418:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	637b      	str	r3, [r7, #52]	; 0x34
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d422:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 80b5 	beq.w	800d596 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	895b      	ldrh	r3, [r3, #10]
 800d430:	461a      	mov	r2, r3
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	899b      	ldrh	r3, [r3, #12]
 800d436:	fb03 f302 	mul.w	r3, r3, r2
 800d43a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d01b      	beq.n	800d47a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	1e5a      	subs	r2, r3, #1
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	fbb2 f2f3 	udiv	r2, r2, r3
 800d44c:	6a3b      	ldr	r3, [r7, #32]
 800d44e:	1e59      	subs	r1, r3, #1
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d456:	429a      	cmp	r2, r3
 800d458:	d30f      	bcc.n	800d47a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d45a:	6a3b      	ldr	r3, [r7, #32]
 800d45c:	1e5a      	subs	r2, r3, #1
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	425b      	negs	r3, r3
 800d462:	401a      	ands	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	69db      	ldr	r3, [r3, #28]
 800d476:	63bb      	str	r3, [r7, #56]	; 0x38
 800d478:	e022      	b.n	800d4c0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d482:	2b00      	cmp	r3, #0
 800d484:	d119      	bne.n	800d4ba <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2100      	movs	r1, #0
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fd fe0e 	bl	800b0ac <create_chain>
 800d490:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d494:	2b01      	cmp	r3, #1
 800d496:	d104      	bne.n	800d4a2 <f_lseek+0x2a2>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2202      	movs	r2, #2
 800d49c:	755a      	strb	r2, [r3, #21]
 800d49e:	2302      	movs	r3, #2
 800d4a0:	e0ce      	b.n	800d640 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a8:	d104      	bne.n	800d4b4 <f_lseek+0x2b4>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	755a      	strb	r2, [r3, #21]
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e0c5      	b.n	800d640 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4b8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4be:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d067      	beq.n	800d596 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d4c6:	e03a      	b.n	800d53e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d4c8:	683a      	ldr	r2, [r7, #0]
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	699a      	ldr	r2, [r3, #24]
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	441a      	add	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7d1b      	ldrb	r3, [r3, #20]
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00b      	beq.n	800d500 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fd fddd 	bl	800b0ac <create_chain>
 800d4f2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d108      	bne.n	800d50c <f_lseek+0x30c>
							ofs = 0; break;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	603b      	str	r3, [r7, #0]
 800d4fe:	e022      	b.n	800d546 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d504:	4618      	mov	r0, r3
 800d506:	f7fd fb7c 	bl	800ac02 <get_fat>
 800d50a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d512:	d104      	bne.n	800d51e <f_lseek+0x31e>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	755a      	strb	r2, [r3, #21]
 800d51a:	2301      	movs	r3, #1
 800d51c:	e090      	b.n	800d640 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	2b01      	cmp	r3, #1
 800d522:	d904      	bls.n	800d52e <f_lseek+0x32e>
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	69db      	ldr	r3, [r3, #28]
 800d528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d304      	bcc.n	800d538 <f_lseek+0x338>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2202      	movs	r2, #2
 800d532:	755a      	strb	r2, [r3, #21]
 800d534:	2302      	movs	r3, #2
 800d536:	e083      	b.n	800d640 <f_lseek+0x440>
					fp->clust = clst;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d53c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	429a      	cmp	r2, r3
 800d544:	d8c0      	bhi.n	800d4c8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	441a      	add	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	899b      	ldrh	r3, [r3, #12]
 800d556:	461a      	mov	r2, r3
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d55e:	fb02 f201 	mul.w	r2, r2, r1
 800d562:	1a9b      	subs	r3, r3, r2
 800d564:	2b00      	cmp	r3, #0
 800d566:	d016      	beq.n	800d596 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fd fb29 	bl	800abc4 <clust2sect>
 800d572:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d576:	2b00      	cmp	r3, #0
 800d578:	d104      	bne.n	800d584 <f_lseek+0x384>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2202      	movs	r2, #2
 800d57e:	755a      	strb	r2, [r3, #21]
 800d580:	2302      	movs	r3, #2
 800d582:	e05d      	b.n	800d640 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	899b      	ldrh	r3, [r3, #12]
 800d588:	461a      	mov	r2, r3
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d592:	4413      	add	r3, r2
 800d594:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	699a      	ldr	r2, [r3, #24]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d90a      	bls.n	800d5b8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	699a      	ldr	r2, [r3, #24]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7d1b      	ldrb	r3, [r3, #20]
 800d5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	699b      	ldr	r3, [r3, #24]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	8992      	ldrh	r2, [r2, #12]
 800d5c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5c4:	fb02 f201 	mul.w	r2, r2, r1
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d036      	beq.n	800d63c <f_lseek+0x43c>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d031      	beq.n	800d63c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7d1b      	ldrb	r3, [r3, #20]
 800d5dc:	b25b      	sxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	da18      	bge.n	800d614 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	7858      	ldrb	r0, [r3, #1]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a1a      	ldr	r2, [r3, #32]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f7fc ff5b 	bl	800a4ac <disk_write>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <f_lseek+0x406>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	755a      	strb	r2, [r3, #21]
 800d602:	2301      	movs	r3, #1
 800d604:	e01c      	b.n	800d640 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	7d1b      	ldrb	r3, [r3, #20]
 800d60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	7858      	ldrb	r0, [r3, #1]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d61e:	2301      	movs	r3, #1
 800d620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d622:	f7fc ff23 	bl	800a46c <disk_read>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d004      	beq.n	800d636 <f_lseek+0x436>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	755a      	strb	r2, [r3, #21]
 800d632:	2301      	movs	r3, #1
 800d634:	e004      	b.n	800d640 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d63a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d63c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d640:	4618      	mov	r0, r3
 800d642:	3740      	adds	r7, #64	; 0x40
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b090      	sub	sp, #64	; 0x40
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d652:	f107 0108 	add.w	r1, r7, #8
 800d656:	1d3b      	adds	r3, r7, #4
 800d658:	2200      	movs	r2, #0
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fec4 	bl	800c3e8 <find_volume>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d666:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d11f      	bne.n	800d6ae <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	f107 0308 	add.w	r3, r7, #8
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fda6 	bl	800c1c8 <follow_path>
 800d67c:	4603      	mov	r3, r0
 800d67e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d686:	2b00      	cmp	r3, #0
 800d688:	d111      	bne.n	800d6ae <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d68a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d68e:	b25b      	sxtb	r3, r3
 800d690:	2b00      	cmp	r3, #0
 800d692:	da03      	bge.n	800d69c <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d694:	2306      	movs	r3, #6
 800d696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d69a:	e008      	b.n	800d6ae <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <f_stat+0x66>
 800d6a2:	f107 0308 	add.w	r3, r7, #8
 800d6a6:	6839      	ldr	r1, [r7, #0]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fe faf7 	bl	800bc9c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d6ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3740      	adds	r7, #64	; 0x40
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
	...

0800d6bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b087      	sub	sp, #28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6d2:	4b1f      	ldr	r3, [pc, #124]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d6d4:	7a5b      	ldrb	r3, [r3, #9]
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d131      	bne.n	800d740 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6dc:	4b1c      	ldr	r3, [pc, #112]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d6de:	7a5b      	ldrb	r3, [r3, #9]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4b1a      	ldr	r3, [pc, #104]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6ea:	4b19      	ldr	r3, [pc, #100]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d6ec:	7a5b      	ldrb	r3, [r3, #9]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	4a17      	ldr	r2, [pc, #92]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	4413      	add	r3, r2
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6fa:	4b15      	ldr	r3, [pc, #84]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d6fc:	7a5b      	ldrb	r3, [r3, #9]
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	461a      	mov	r2, r3
 800d702:	4b13      	ldr	r3, [pc, #76]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d704:	4413      	add	r3, r2
 800d706:	79fa      	ldrb	r2, [r7, #7]
 800d708:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d70a:	4b11      	ldr	r3, [pc, #68]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d70c:	7a5b      	ldrb	r3, [r3, #9]
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	1c5a      	adds	r2, r3, #1
 800d712:	b2d1      	uxtb	r1, r2
 800d714:	4a0e      	ldr	r2, [pc, #56]	; (800d750 <FATFS_LinkDriverEx+0x94>)
 800d716:	7251      	strb	r1, [r2, #9]
 800d718:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d71a:	7dbb      	ldrb	r3, [r7, #22]
 800d71c:	3330      	adds	r3, #48	; 0x30
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	3301      	adds	r3, #1
 800d728:	223a      	movs	r2, #58	; 0x3a
 800d72a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	3302      	adds	r3, #2
 800d730:	222f      	movs	r2, #47	; 0x2f
 800d732:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	3303      	adds	r3, #3
 800d738:	2200      	movs	r2, #0
 800d73a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d73c:	2300      	movs	r3, #0
 800d73e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d740:	7dfb      	ldrb	r3, [r7, #23]
}
 800d742:	4618      	mov	r0, r3
 800d744:	371c      	adds	r7, #28
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	24001494 	.word	0x24001494

0800d754 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d75e:	2200      	movs	r2, #0
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff ffaa 	bl	800d6bc <FATFS_LinkDriverEx>
 800d768:	4603      	mov	r3, r0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	4603      	mov	r3, r0
 800d77c:	6039      	str	r1, [r7, #0]
 800d77e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d780:	88fb      	ldrh	r3, [r7, #6]
 800d782:	2b7f      	cmp	r3, #127	; 0x7f
 800d784:	d802      	bhi.n	800d78c <ff_convert+0x18>
		c = chr;
 800d786:	88fb      	ldrh	r3, [r7, #6]
 800d788:	81fb      	strh	r3, [r7, #14]
 800d78a:	e025      	b.n	800d7d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00b      	beq.n	800d7aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d792:	88fb      	ldrh	r3, [r7, #6]
 800d794:	2bff      	cmp	r3, #255	; 0xff
 800d796:	d805      	bhi.n	800d7a4 <ff_convert+0x30>
 800d798:	88fb      	ldrh	r3, [r7, #6]
 800d79a:	3b80      	subs	r3, #128	; 0x80
 800d79c:	4a12      	ldr	r2, [pc, #72]	; (800d7e8 <ff_convert+0x74>)
 800d79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7a2:	e000      	b.n	800d7a6 <ff_convert+0x32>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	81fb      	strh	r3, [r7, #14]
 800d7a8:	e016      	b.n	800d7d8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	81fb      	strh	r3, [r7, #14]
 800d7ae:	e009      	b.n	800d7c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d7b0:	89fb      	ldrh	r3, [r7, #14]
 800d7b2:	4a0d      	ldr	r2, [pc, #52]	; (800d7e8 <ff_convert+0x74>)
 800d7b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7b8:	88fa      	ldrh	r2, [r7, #6]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d006      	beq.n	800d7cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d7be:	89fb      	ldrh	r3, [r7, #14]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	81fb      	strh	r3, [r7, #14]
 800d7c4:	89fb      	ldrh	r3, [r7, #14]
 800d7c6:	2b7f      	cmp	r3, #127	; 0x7f
 800d7c8:	d9f2      	bls.n	800d7b0 <ff_convert+0x3c>
 800d7ca:	e000      	b.n	800d7ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d7cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d7ce:	89fb      	ldrh	r3, [r7, #14]
 800d7d0:	3380      	adds	r3, #128	; 0x80
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d7d8:	89fb      	ldrh	r3, [r7, #14]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	08011040 	.word	0x08011040

0800d7ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b087      	sub	sp, #28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d7f6:	88fb      	ldrh	r3, [r7, #6]
 800d7f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7fc:	d201      	bcs.n	800d802 <ff_wtoupper+0x16>
 800d7fe:	4b3e      	ldr	r3, [pc, #248]	; (800d8f8 <ff_wtoupper+0x10c>)
 800d800:	e000      	b.n	800d804 <ff_wtoupper+0x18>
 800d802:	4b3e      	ldr	r3, [pc, #248]	; (800d8fc <ff_wtoupper+0x110>)
 800d804:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	1c9a      	adds	r2, r3, #2
 800d80a:	617a      	str	r2, [r7, #20]
 800d80c:	881b      	ldrh	r3, [r3, #0]
 800d80e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d810:	8a7b      	ldrh	r3, [r7, #18]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d068      	beq.n	800d8e8 <ff_wtoupper+0xfc>
 800d816:	88fa      	ldrh	r2, [r7, #6]
 800d818:	8a7b      	ldrh	r3, [r7, #18]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d364      	bcc.n	800d8e8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	1c9a      	adds	r2, r3, #2
 800d822:	617a      	str	r2, [r7, #20]
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	823b      	strh	r3, [r7, #16]
 800d828:	8a3b      	ldrh	r3, [r7, #16]
 800d82a:	0a1b      	lsrs	r3, r3, #8
 800d82c:	81fb      	strh	r3, [r7, #14]
 800d82e:	8a3b      	ldrh	r3, [r7, #16]
 800d830:	b2db      	uxtb	r3, r3
 800d832:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d834:	88fa      	ldrh	r2, [r7, #6]
 800d836:	8a79      	ldrh	r1, [r7, #18]
 800d838:	8a3b      	ldrh	r3, [r7, #16]
 800d83a:	440b      	add	r3, r1
 800d83c:	429a      	cmp	r2, r3
 800d83e:	da49      	bge.n	800d8d4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d840:	89fb      	ldrh	r3, [r7, #14]
 800d842:	2b08      	cmp	r3, #8
 800d844:	d84f      	bhi.n	800d8e6 <ff_wtoupper+0xfa>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <ff_wtoupper+0x60>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d871 	.word	0x0800d871
 800d850:	0800d883 	.word	0x0800d883
 800d854:	0800d899 	.word	0x0800d899
 800d858:	0800d8a1 	.word	0x0800d8a1
 800d85c:	0800d8a9 	.word	0x0800d8a9
 800d860:	0800d8b1 	.word	0x0800d8b1
 800d864:	0800d8b9 	.word	0x0800d8b9
 800d868:	0800d8c1 	.word	0x0800d8c1
 800d86c:	0800d8c9 	.word	0x0800d8c9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d870:	88fa      	ldrh	r2, [r7, #6]
 800d872:	8a7b      	ldrh	r3, [r7, #18]
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	4413      	add	r3, r2
 800d87c:	881b      	ldrh	r3, [r3, #0]
 800d87e:	80fb      	strh	r3, [r7, #6]
 800d880:	e027      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d882:	88fa      	ldrh	r2, [r7, #6]
 800d884:	8a7b      	ldrh	r3, [r7, #18]
 800d886:	1ad3      	subs	r3, r2, r3
 800d888:	b29b      	uxth	r3, r3
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	b29b      	uxth	r3, r3
 800d890:	88fa      	ldrh	r2, [r7, #6]
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	80fb      	strh	r3, [r7, #6]
 800d896:	e01c      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d898:	88fb      	ldrh	r3, [r7, #6]
 800d89a:	3b10      	subs	r3, #16
 800d89c:	80fb      	strh	r3, [r7, #6]
 800d89e:	e018      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d8a0:	88fb      	ldrh	r3, [r7, #6]
 800d8a2:	3b20      	subs	r3, #32
 800d8a4:	80fb      	strh	r3, [r7, #6]
 800d8a6:	e014      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d8a8:	88fb      	ldrh	r3, [r7, #6]
 800d8aa:	3b30      	subs	r3, #48	; 0x30
 800d8ac:	80fb      	strh	r3, [r7, #6]
 800d8ae:	e010      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d8b0:	88fb      	ldrh	r3, [r7, #6]
 800d8b2:	3b1a      	subs	r3, #26
 800d8b4:	80fb      	strh	r3, [r7, #6]
 800d8b6:	e00c      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d8b8:	88fb      	ldrh	r3, [r7, #6]
 800d8ba:	3308      	adds	r3, #8
 800d8bc:	80fb      	strh	r3, [r7, #6]
 800d8be:	e008      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d8c0:	88fb      	ldrh	r3, [r7, #6]
 800d8c2:	3b50      	subs	r3, #80	; 0x50
 800d8c4:	80fb      	strh	r3, [r7, #6]
 800d8c6:	e004      	b.n	800d8d2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d8c8:	88fb      	ldrh	r3, [r7, #6]
 800d8ca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d8ce:	80fb      	strh	r3, [r7, #6]
 800d8d0:	bf00      	nop
			}
			break;
 800d8d2:	e008      	b.n	800d8e6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d8d4:	89fb      	ldrh	r3, [r7, #14]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d195      	bne.n	800d806 <ff_wtoupper+0x1a>
 800d8da:	8a3b      	ldrh	r3, [r7, #16]
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d8e4:	e78f      	b.n	800d806 <ff_wtoupper+0x1a>
			break;
 800d8e6:	bf00      	nop
	}

	return chr;
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	371c      	adds	r7, #28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	08011140 	.word	0x08011140
 800d8fc:	08011334 	.word	0x08011334

0800d900 <__errno>:
 800d900:	4b01      	ldr	r3, [pc, #4]	; (800d908 <__errno+0x8>)
 800d902:	6818      	ldr	r0, [r3, #0]
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	24000010 	.word	0x24000010

0800d90c <__libc_init_array>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	4d0d      	ldr	r5, [pc, #52]	; (800d944 <__libc_init_array+0x38>)
 800d910:	4c0d      	ldr	r4, [pc, #52]	; (800d948 <__libc_init_array+0x3c>)
 800d912:	1b64      	subs	r4, r4, r5
 800d914:	10a4      	asrs	r4, r4, #2
 800d916:	2600      	movs	r6, #0
 800d918:	42a6      	cmp	r6, r4
 800d91a:	d109      	bne.n	800d930 <__libc_init_array+0x24>
 800d91c:	4d0b      	ldr	r5, [pc, #44]	; (800d94c <__libc_init_array+0x40>)
 800d91e:	4c0c      	ldr	r4, [pc, #48]	; (800d950 <__libc_init_array+0x44>)
 800d920:	f002 fe58 	bl	80105d4 <_init>
 800d924:	1b64      	subs	r4, r4, r5
 800d926:	10a4      	asrs	r4, r4, #2
 800d928:	2600      	movs	r6, #0
 800d92a:	42a6      	cmp	r6, r4
 800d92c:	d105      	bne.n	800d93a <__libc_init_array+0x2e>
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	f855 3b04 	ldr.w	r3, [r5], #4
 800d934:	4798      	blx	r3
 800d936:	3601      	adds	r6, #1
 800d938:	e7ee      	b.n	800d918 <__libc_init_array+0xc>
 800d93a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d93e:	4798      	blx	r3
 800d940:	3601      	adds	r6, #1
 800d942:	e7f2      	b.n	800d92a <__libc_init_array+0x1e>
 800d944:	080117dc 	.word	0x080117dc
 800d948:	080117dc 	.word	0x080117dc
 800d94c:	080117dc 	.word	0x080117dc
 800d950:	080117e0 	.word	0x080117e0

0800d954 <memcpy>:
 800d954:	440a      	add	r2, r1
 800d956:	4291      	cmp	r1, r2
 800d958:	f100 33ff 	add.w	r3, r0, #4294967295
 800d95c:	d100      	bne.n	800d960 <memcpy+0xc>
 800d95e:	4770      	bx	lr
 800d960:	b510      	push	{r4, lr}
 800d962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d96a:	4291      	cmp	r1, r2
 800d96c:	d1f9      	bne.n	800d962 <memcpy+0xe>
 800d96e:	bd10      	pop	{r4, pc}

0800d970 <memset>:
 800d970:	4402      	add	r2, r0
 800d972:	4603      	mov	r3, r0
 800d974:	4293      	cmp	r3, r2
 800d976:	d100      	bne.n	800d97a <memset+0xa>
 800d978:	4770      	bx	lr
 800d97a:	f803 1b01 	strb.w	r1, [r3], #1
 800d97e:	e7f9      	b.n	800d974 <memset+0x4>

0800d980 <__cvt>:
 800d980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d982:	ed2d 8b02 	vpush	{d8}
 800d986:	eeb0 8b40 	vmov.f64	d8, d0
 800d98a:	b085      	sub	sp, #20
 800d98c:	4617      	mov	r7, r2
 800d98e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d990:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d992:	ee18 2a90 	vmov	r2, s17
 800d996:	f025 0520 	bic.w	r5, r5, #32
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	bfb6      	itet	lt
 800d99e:	222d      	movlt	r2, #45	; 0x2d
 800d9a0:	2200      	movge	r2, #0
 800d9a2:	eeb1 8b40 	vneglt.f64	d8, d0
 800d9a6:	2d46      	cmp	r5, #70	; 0x46
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	701a      	strb	r2, [r3, #0]
 800d9ac:	d004      	beq.n	800d9b8 <__cvt+0x38>
 800d9ae:	2d45      	cmp	r5, #69	; 0x45
 800d9b0:	d100      	bne.n	800d9b4 <__cvt+0x34>
 800d9b2:	3401      	adds	r4, #1
 800d9b4:	2102      	movs	r1, #2
 800d9b6:	e000      	b.n	800d9ba <__cvt+0x3a>
 800d9b8:	2103      	movs	r1, #3
 800d9ba:	ab03      	add	r3, sp, #12
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	ab02      	add	r3, sp, #8
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	4633      	mov	r3, r6
 800d9c6:	eeb0 0b48 	vmov.f64	d0, d8
 800d9ca:	f000 fcfd 	bl	800e3c8 <_dtoa_r>
 800d9ce:	2d47      	cmp	r5, #71	; 0x47
 800d9d0:	d109      	bne.n	800d9e6 <__cvt+0x66>
 800d9d2:	07fb      	lsls	r3, r7, #31
 800d9d4:	d407      	bmi.n	800d9e6 <__cvt+0x66>
 800d9d6:	9b03      	ldr	r3, [sp, #12]
 800d9d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9da:	1a1b      	subs	r3, r3, r0
 800d9dc:	6013      	str	r3, [r2, #0]
 800d9de:	b005      	add	sp, #20
 800d9e0:	ecbd 8b02 	vpop	{d8}
 800d9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e6:	2d46      	cmp	r5, #70	; 0x46
 800d9e8:	eb00 0204 	add.w	r2, r0, r4
 800d9ec:	d10c      	bne.n	800da08 <__cvt+0x88>
 800d9ee:	7803      	ldrb	r3, [r0, #0]
 800d9f0:	2b30      	cmp	r3, #48	; 0x30
 800d9f2:	d107      	bne.n	800da04 <__cvt+0x84>
 800d9f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fc:	bf1c      	itt	ne
 800d9fe:	f1c4 0401 	rsbne	r4, r4, #1
 800da02:	6034      	strne	r4, [r6, #0]
 800da04:	6833      	ldr	r3, [r6, #0]
 800da06:	441a      	add	r2, r3
 800da08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800da0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da10:	bf08      	it	eq
 800da12:	9203      	streq	r2, [sp, #12]
 800da14:	2130      	movs	r1, #48	; 0x30
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	4293      	cmp	r3, r2
 800da1a:	d2dc      	bcs.n	800d9d6 <__cvt+0x56>
 800da1c:	1c5c      	adds	r4, r3, #1
 800da1e:	9403      	str	r4, [sp, #12]
 800da20:	7019      	strb	r1, [r3, #0]
 800da22:	e7f8      	b.n	800da16 <__cvt+0x96>

0800da24 <__exponent>:
 800da24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da26:	4603      	mov	r3, r0
 800da28:	2900      	cmp	r1, #0
 800da2a:	bfb8      	it	lt
 800da2c:	4249      	neglt	r1, r1
 800da2e:	f803 2b02 	strb.w	r2, [r3], #2
 800da32:	bfb4      	ite	lt
 800da34:	222d      	movlt	r2, #45	; 0x2d
 800da36:	222b      	movge	r2, #43	; 0x2b
 800da38:	2909      	cmp	r1, #9
 800da3a:	7042      	strb	r2, [r0, #1]
 800da3c:	dd2a      	ble.n	800da94 <__exponent+0x70>
 800da3e:	f10d 0407 	add.w	r4, sp, #7
 800da42:	46a4      	mov	ip, r4
 800da44:	270a      	movs	r7, #10
 800da46:	46a6      	mov	lr, r4
 800da48:	460a      	mov	r2, r1
 800da4a:	fb91 f6f7 	sdiv	r6, r1, r7
 800da4e:	fb07 1516 	mls	r5, r7, r6, r1
 800da52:	3530      	adds	r5, #48	; 0x30
 800da54:	2a63      	cmp	r2, #99	; 0x63
 800da56:	f104 34ff 	add.w	r4, r4, #4294967295
 800da5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800da5e:	4631      	mov	r1, r6
 800da60:	dcf1      	bgt.n	800da46 <__exponent+0x22>
 800da62:	3130      	adds	r1, #48	; 0x30
 800da64:	f1ae 0502 	sub.w	r5, lr, #2
 800da68:	f804 1c01 	strb.w	r1, [r4, #-1]
 800da6c:	1c44      	adds	r4, r0, #1
 800da6e:	4629      	mov	r1, r5
 800da70:	4561      	cmp	r1, ip
 800da72:	d30a      	bcc.n	800da8a <__exponent+0x66>
 800da74:	f10d 0209 	add.w	r2, sp, #9
 800da78:	eba2 020e 	sub.w	r2, r2, lr
 800da7c:	4565      	cmp	r5, ip
 800da7e:	bf88      	it	hi
 800da80:	2200      	movhi	r2, #0
 800da82:	4413      	add	r3, r2
 800da84:	1a18      	subs	r0, r3, r0
 800da86:	b003      	add	sp, #12
 800da88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800da92:	e7ed      	b.n	800da70 <__exponent+0x4c>
 800da94:	2330      	movs	r3, #48	; 0x30
 800da96:	3130      	adds	r1, #48	; 0x30
 800da98:	7083      	strb	r3, [r0, #2]
 800da9a:	70c1      	strb	r1, [r0, #3]
 800da9c:	1d03      	adds	r3, r0, #4
 800da9e:	e7f1      	b.n	800da84 <__exponent+0x60>

0800daa0 <_printf_float>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	b08b      	sub	sp, #44	; 0x2c
 800daa6:	460c      	mov	r4, r1
 800daa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800daac:	4616      	mov	r6, r2
 800daae:	461f      	mov	r7, r3
 800dab0:	4605      	mov	r5, r0
 800dab2:	f001 fa0b 	bl	800eecc <_localeconv_r>
 800dab6:	f8d0 b000 	ldr.w	fp, [r0]
 800daba:	4658      	mov	r0, fp
 800dabc:	f7f2 fc10 	bl	80002e0 <strlen>
 800dac0:	2300      	movs	r3, #0
 800dac2:	9308      	str	r3, [sp, #32]
 800dac4:	f8d8 3000 	ldr.w	r3, [r8]
 800dac8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dacc:	6822      	ldr	r2, [r4, #0]
 800dace:	3307      	adds	r3, #7
 800dad0:	f023 0307 	bic.w	r3, r3, #7
 800dad4:	f103 0108 	add.w	r1, r3, #8
 800dad8:	f8c8 1000 	str.w	r1, [r8]
 800dadc:	4682      	mov	sl, r0
 800dade:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dae2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800dae6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800dd48 <_printf_float+0x2a8>
 800daea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800daee:	eeb0 6bc0 	vabs.f64	d6, d0
 800daf2:	eeb4 6b47 	vcmp.f64	d6, d7
 800daf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dafa:	dd24      	ble.n	800db46 <_printf_float+0xa6>
 800dafc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800db00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db04:	d502      	bpl.n	800db0c <_printf_float+0x6c>
 800db06:	232d      	movs	r3, #45	; 0x2d
 800db08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db0c:	4b90      	ldr	r3, [pc, #576]	; (800dd50 <_printf_float+0x2b0>)
 800db0e:	4891      	ldr	r0, [pc, #580]	; (800dd54 <_printf_float+0x2b4>)
 800db10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800db14:	bf94      	ite	ls
 800db16:	4698      	movls	r8, r3
 800db18:	4680      	movhi	r8, r0
 800db1a:	2303      	movs	r3, #3
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	f022 0204 	bic.w	r2, r2, #4
 800db22:	2300      	movs	r3, #0
 800db24:	6022      	str	r2, [r4, #0]
 800db26:	9304      	str	r3, [sp, #16]
 800db28:	9700      	str	r7, [sp, #0]
 800db2a:	4633      	mov	r3, r6
 800db2c:	aa09      	add	r2, sp, #36	; 0x24
 800db2e:	4621      	mov	r1, r4
 800db30:	4628      	mov	r0, r5
 800db32:	f000 f9d3 	bl	800dedc <_printf_common>
 800db36:	3001      	adds	r0, #1
 800db38:	f040 808a 	bne.w	800dc50 <_printf_float+0x1b0>
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	b00b      	add	sp, #44	; 0x2c
 800db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db46:	eeb4 0b40 	vcmp.f64	d0, d0
 800db4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4e:	d709      	bvc.n	800db64 <_printf_float+0xc4>
 800db50:	ee10 3a90 	vmov	r3, s1
 800db54:	2b00      	cmp	r3, #0
 800db56:	bfbc      	itt	lt
 800db58:	232d      	movlt	r3, #45	; 0x2d
 800db5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800db5e:	487e      	ldr	r0, [pc, #504]	; (800dd58 <_printf_float+0x2b8>)
 800db60:	4b7e      	ldr	r3, [pc, #504]	; (800dd5c <_printf_float+0x2bc>)
 800db62:	e7d5      	b.n	800db10 <_printf_float+0x70>
 800db64:	6863      	ldr	r3, [r4, #4]
 800db66:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800db6a:	9104      	str	r1, [sp, #16]
 800db6c:	1c59      	adds	r1, r3, #1
 800db6e:	d13c      	bne.n	800dbea <_printf_float+0x14a>
 800db70:	2306      	movs	r3, #6
 800db72:	6063      	str	r3, [r4, #4]
 800db74:	2300      	movs	r3, #0
 800db76:	9303      	str	r3, [sp, #12]
 800db78:	ab08      	add	r3, sp, #32
 800db7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800db7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db82:	ab07      	add	r3, sp, #28
 800db84:	6861      	ldr	r1, [r4, #4]
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	6022      	str	r2, [r4, #0]
 800db8a:	f10d 031b 	add.w	r3, sp, #27
 800db8e:	4628      	mov	r0, r5
 800db90:	f7ff fef6 	bl	800d980 <__cvt>
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	9907      	ldr	r1, [sp, #28]
 800db98:	2b47      	cmp	r3, #71	; 0x47
 800db9a:	4680      	mov	r8, r0
 800db9c:	d108      	bne.n	800dbb0 <_printf_float+0x110>
 800db9e:	1cc8      	adds	r0, r1, #3
 800dba0:	db02      	blt.n	800dba8 <_printf_float+0x108>
 800dba2:	6863      	ldr	r3, [r4, #4]
 800dba4:	4299      	cmp	r1, r3
 800dba6:	dd41      	ble.n	800dc2c <_printf_float+0x18c>
 800dba8:	f1a9 0902 	sub.w	r9, r9, #2
 800dbac:	fa5f f989 	uxtb.w	r9, r9
 800dbb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dbb4:	d820      	bhi.n	800dbf8 <_printf_float+0x158>
 800dbb6:	3901      	subs	r1, #1
 800dbb8:	464a      	mov	r2, r9
 800dbba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dbbe:	9107      	str	r1, [sp, #28]
 800dbc0:	f7ff ff30 	bl	800da24 <__exponent>
 800dbc4:	9a08      	ldr	r2, [sp, #32]
 800dbc6:	9004      	str	r0, [sp, #16]
 800dbc8:	1813      	adds	r3, r2, r0
 800dbca:	2a01      	cmp	r2, #1
 800dbcc:	6123      	str	r3, [r4, #16]
 800dbce:	dc02      	bgt.n	800dbd6 <_printf_float+0x136>
 800dbd0:	6822      	ldr	r2, [r4, #0]
 800dbd2:	07d2      	lsls	r2, r2, #31
 800dbd4:	d501      	bpl.n	800dbda <_printf_float+0x13a>
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	6123      	str	r3, [r4, #16]
 800dbda:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0a2      	beq.n	800db28 <_printf_float+0x88>
 800dbe2:	232d      	movs	r3, #45	; 0x2d
 800dbe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbe8:	e79e      	b.n	800db28 <_printf_float+0x88>
 800dbea:	9904      	ldr	r1, [sp, #16]
 800dbec:	2947      	cmp	r1, #71	; 0x47
 800dbee:	d1c1      	bne.n	800db74 <_printf_float+0xd4>
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1bf      	bne.n	800db74 <_printf_float+0xd4>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e7bc      	b.n	800db72 <_printf_float+0xd2>
 800dbf8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dbfc:	d118      	bne.n	800dc30 <_printf_float+0x190>
 800dbfe:	2900      	cmp	r1, #0
 800dc00:	6863      	ldr	r3, [r4, #4]
 800dc02:	dd0b      	ble.n	800dc1c <_printf_float+0x17c>
 800dc04:	6121      	str	r1, [r4, #16]
 800dc06:	b913      	cbnz	r3, 800dc0e <_printf_float+0x16e>
 800dc08:	6822      	ldr	r2, [r4, #0]
 800dc0a:	07d0      	lsls	r0, r2, #31
 800dc0c:	d502      	bpl.n	800dc14 <_printf_float+0x174>
 800dc0e:	3301      	adds	r3, #1
 800dc10:	440b      	add	r3, r1
 800dc12:	6123      	str	r3, [r4, #16]
 800dc14:	2300      	movs	r3, #0
 800dc16:	65a1      	str	r1, [r4, #88]	; 0x58
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	e7de      	b.n	800dbda <_printf_float+0x13a>
 800dc1c:	b913      	cbnz	r3, 800dc24 <_printf_float+0x184>
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	07d2      	lsls	r2, r2, #31
 800dc22:	d501      	bpl.n	800dc28 <_printf_float+0x188>
 800dc24:	3302      	adds	r3, #2
 800dc26:	e7f4      	b.n	800dc12 <_printf_float+0x172>
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e7f2      	b.n	800dc12 <_printf_float+0x172>
 800dc2c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dc30:	9b08      	ldr	r3, [sp, #32]
 800dc32:	4299      	cmp	r1, r3
 800dc34:	db05      	blt.n	800dc42 <_printf_float+0x1a2>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	6121      	str	r1, [r4, #16]
 800dc3a:	07d8      	lsls	r0, r3, #31
 800dc3c:	d5ea      	bpl.n	800dc14 <_printf_float+0x174>
 800dc3e:	1c4b      	adds	r3, r1, #1
 800dc40:	e7e7      	b.n	800dc12 <_printf_float+0x172>
 800dc42:	2900      	cmp	r1, #0
 800dc44:	bfd4      	ite	le
 800dc46:	f1c1 0202 	rsble	r2, r1, #2
 800dc4a:	2201      	movgt	r2, #1
 800dc4c:	4413      	add	r3, r2
 800dc4e:	e7e0      	b.n	800dc12 <_printf_float+0x172>
 800dc50:	6823      	ldr	r3, [r4, #0]
 800dc52:	055a      	lsls	r2, r3, #21
 800dc54:	d407      	bmi.n	800dc66 <_printf_float+0x1c6>
 800dc56:	6923      	ldr	r3, [r4, #16]
 800dc58:	4642      	mov	r2, r8
 800dc5a:	4631      	mov	r1, r6
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	47b8      	blx	r7
 800dc60:	3001      	adds	r0, #1
 800dc62:	d12a      	bne.n	800dcba <_printf_float+0x21a>
 800dc64:	e76a      	b.n	800db3c <_printf_float+0x9c>
 800dc66:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dc6a:	f240 80e2 	bls.w	800de32 <_printf_float+0x392>
 800dc6e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dc72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc7a:	d133      	bne.n	800dce4 <_printf_float+0x244>
 800dc7c:	4a38      	ldr	r2, [pc, #224]	; (800dd60 <_printf_float+0x2c0>)
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4631      	mov	r1, r6
 800dc82:	4628      	mov	r0, r5
 800dc84:	47b8      	blx	r7
 800dc86:	3001      	adds	r0, #1
 800dc88:	f43f af58 	beq.w	800db3c <_printf_float+0x9c>
 800dc8c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	db02      	blt.n	800dc9a <_printf_float+0x1fa>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	07d8      	lsls	r0, r3, #31
 800dc98:	d50f      	bpl.n	800dcba <_printf_float+0x21a>
 800dc9a:	4653      	mov	r3, sl
 800dc9c:	465a      	mov	r2, fp
 800dc9e:	4631      	mov	r1, r6
 800dca0:	4628      	mov	r0, r5
 800dca2:	47b8      	blx	r7
 800dca4:	3001      	adds	r0, #1
 800dca6:	f43f af49 	beq.w	800db3c <_printf_float+0x9c>
 800dcaa:	f04f 0800 	mov.w	r8, #0
 800dcae:	f104 091a 	add.w	r9, r4, #26
 800dcb2:	9b08      	ldr	r3, [sp, #32]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	4543      	cmp	r3, r8
 800dcb8:	dc09      	bgt.n	800dcce <_printf_float+0x22e>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	079b      	lsls	r3, r3, #30
 800dcbe:	f100 8108 	bmi.w	800ded2 <_printf_float+0x432>
 800dcc2:	68e0      	ldr	r0, [r4, #12]
 800dcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc6:	4298      	cmp	r0, r3
 800dcc8:	bfb8      	it	lt
 800dcca:	4618      	movlt	r0, r3
 800dccc:	e738      	b.n	800db40 <_printf_float+0xa0>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	464a      	mov	r2, r9
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	f43f af2f 	beq.w	800db3c <_printf_float+0x9c>
 800dcde:	f108 0801 	add.w	r8, r8, #1
 800dce2:	e7e6      	b.n	800dcb2 <_printf_float+0x212>
 800dce4:	9b07      	ldr	r3, [sp, #28]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	dc3c      	bgt.n	800dd64 <_printf_float+0x2c4>
 800dcea:	4a1d      	ldr	r2, [pc, #116]	; (800dd60 <_printf_float+0x2c0>)
 800dcec:	2301      	movs	r3, #1
 800dcee:	4631      	mov	r1, r6
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	47b8      	blx	r7
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	f43f af21 	beq.w	800db3c <_printf_float+0x9c>
 800dcfa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	d102      	bne.n	800dd08 <_printf_float+0x268>
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	07d9      	lsls	r1, r3, #31
 800dd06:	d5d8      	bpl.n	800dcba <_printf_float+0x21a>
 800dd08:	4653      	mov	r3, sl
 800dd0a:	465a      	mov	r2, fp
 800dd0c:	4631      	mov	r1, r6
 800dd0e:	4628      	mov	r0, r5
 800dd10:	47b8      	blx	r7
 800dd12:	3001      	adds	r0, #1
 800dd14:	f43f af12 	beq.w	800db3c <_printf_float+0x9c>
 800dd18:	f04f 0900 	mov.w	r9, #0
 800dd1c:	f104 0a1a 	add.w	sl, r4, #26
 800dd20:	9b07      	ldr	r3, [sp, #28]
 800dd22:	425b      	negs	r3, r3
 800dd24:	454b      	cmp	r3, r9
 800dd26:	dc01      	bgt.n	800dd2c <_printf_float+0x28c>
 800dd28:	9b08      	ldr	r3, [sp, #32]
 800dd2a:	e795      	b.n	800dc58 <_printf_float+0x1b8>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	4652      	mov	r2, sl
 800dd30:	4631      	mov	r1, r6
 800dd32:	4628      	mov	r0, r5
 800dd34:	47b8      	blx	r7
 800dd36:	3001      	adds	r0, #1
 800dd38:	f43f af00 	beq.w	800db3c <_printf_float+0x9c>
 800dd3c:	f109 0901 	add.w	r9, r9, #1
 800dd40:	e7ee      	b.n	800dd20 <_printf_float+0x280>
 800dd42:	bf00      	nop
 800dd44:	f3af 8000 	nop.w
 800dd48:	ffffffff 	.word	0xffffffff
 800dd4c:	7fefffff 	.word	0x7fefffff
 800dd50:	080113f4 	.word	0x080113f4
 800dd54:	080113f8 	.word	0x080113f8
 800dd58:	08011400 	.word	0x08011400
 800dd5c:	080113fc 	.word	0x080113fc
 800dd60:	08011404 	.word	0x08011404
 800dd64:	9a08      	ldr	r2, [sp, #32]
 800dd66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	bfa8      	it	ge
 800dd6c:	461a      	movge	r2, r3
 800dd6e:	2a00      	cmp	r2, #0
 800dd70:	4691      	mov	r9, r2
 800dd72:	dc38      	bgt.n	800dde6 <_printf_float+0x346>
 800dd74:	2300      	movs	r3, #0
 800dd76:	9305      	str	r3, [sp, #20]
 800dd78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd7c:	f104 021a 	add.w	r2, r4, #26
 800dd80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd82:	9905      	ldr	r1, [sp, #20]
 800dd84:	9304      	str	r3, [sp, #16]
 800dd86:	eba3 0309 	sub.w	r3, r3, r9
 800dd8a:	428b      	cmp	r3, r1
 800dd8c:	dc33      	bgt.n	800ddf6 <_printf_float+0x356>
 800dd8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	db3c      	blt.n	800de10 <_printf_float+0x370>
 800dd96:	6823      	ldr	r3, [r4, #0]
 800dd98:	07da      	lsls	r2, r3, #31
 800dd9a:	d439      	bmi.n	800de10 <_printf_float+0x370>
 800dd9c:	9a08      	ldr	r2, [sp, #32]
 800dd9e:	9b04      	ldr	r3, [sp, #16]
 800dda0:	9907      	ldr	r1, [sp, #28]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	eba2 0901 	sub.w	r9, r2, r1
 800dda8:	4599      	cmp	r9, r3
 800ddaa:	bfa8      	it	ge
 800ddac:	4699      	movge	r9, r3
 800ddae:	f1b9 0f00 	cmp.w	r9, #0
 800ddb2:	dc35      	bgt.n	800de20 <_printf_float+0x380>
 800ddb4:	f04f 0800 	mov.w	r8, #0
 800ddb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddbc:	f104 0a1a 	add.w	sl, r4, #26
 800ddc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ddc4:	1a9b      	subs	r3, r3, r2
 800ddc6:	eba3 0309 	sub.w	r3, r3, r9
 800ddca:	4543      	cmp	r3, r8
 800ddcc:	f77f af75 	ble.w	800dcba <_printf_float+0x21a>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	4652      	mov	r2, sl
 800ddd4:	4631      	mov	r1, r6
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	47b8      	blx	r7
 800ddda:	3001      	adds	r0, #1
 800dddc:	f43f aeae 	beq.w	800db3c <_printf_float+0x9c>
 800dde0:	f108 0801 	add.w	r8, r8, #1
 800dde4:	e7ec      	b.n	800ddc0 <_printf_float+0x320>
 800dde6:	4613      	mov	r3, r2
 800dde8:	4631      	mov	r1, r6
 800ddea:	4642      	mov	r2, r8
 800ddec:	4628      	mov	r0, r5
 800ddee:	47b8      	blx	r7
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	d1bf      	bne.n	800dd74 <_printf_float+0x2d4>
 800ddf4:	e6a2      	b.n	800db3c <_printf_float+0x9c>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	9204      	str	r2, [sp, #16]
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f ae9b 	beq.w	800db3c <_printf_float+0x9c>
 800de06:	9b05      	ldr	r3, [sp, #20]
 800de08:	9a04      	ldr	r2, [sp, #16]
 800de0a:	3301      	adds	r3, #1
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	e7b7      	b.n	800dd80 <_printf_float+0x2e0>
 800de10:	4653      	mov	r3, sl
 800de12:	465a      	mov	r2, fp
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	47b8      	blx	r7
 800de1a:	3001      	adds	r0, #1
 800de1c:	d1be      	bne.n	800dd9c <_printf_float+0x2fc>
 800de1e:	e68d      	b.n	800db3c <_printf_float+0x9c>
 800de20:	9a04      	ldr	r2, [sp, #16]
 800de22:	464b      	mov	r3, r9
 800de24:	4442      	add	r2, r8
 800de26:	4631      	mov	r1, r6
 800de28:	4628      	mov	r0, r5
 800de2a:	47b8      	blx	r7
 800de2c:	3001      	adds	r0, #1
 800de2e:	d1c1      	bne.n	800ddb4 <_printf_float+0x314>
 800de30:	e684      	b.n	800db3c <_printf_float+0x9c>
 800de32:	9a08      	ldr	r2, [sp, #32]
 800de34:	2a01      	cmp	r2, #1
 800de36:	dc01      	bgt.n	800de3c <_printf_float+0x39c>
 800de38:	07db      	lsls	r3, r3, #31
 800de3a:	d537      	bpl.n	800deac <_printf_float+0x40c>
 800de3c:	2301      	movs	r3, #1
 800de3e:	4642      	mov	r2, r8
 800de40:	4631      	mov	r1, r6
 800de42:	4628      	mov	r0, r5
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	f43f ae78 	beq.w	800db3c <_printf_float+0x9c>
 800de4c:	4653      	mov	r3, sl
 800de4e:	465a      	mov	r2, fp
 800de50:	4631      	mov	r1, r6
 800de52:	4628      	mov	r0, r5
 800de54:	47b8      	blx	r7
 800de56:	3001      	adds	r0, #1
 800de58:	f43f ae70 	beq.w	800db3c <_printf_float+0x9c>
 800de5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800de60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	d01b      	beq.n	800dea2 <_printf_float+0x402>
 800de6a:	9b08      	ldr	r3, [sp, #32]
 800de6c:	f108 0201 	add.w	r2, r8, #1
 800de70:	3b01      	subs	r3, #1
 800de72:	4631      	mov	r1, r6
 800de74:	4628      	mov	r0, r5
 800de76:	47b8      	blx	r7
 800de78:	3001      	adds	r0, #1
 800de7a:	d10e      	bne.n	800de9a <_printf_float+0x3fa>
 800de7c:	e65e      	b.n	800db3c <_printf_float+0x9c>
 800de7e:	2301      	movs	r3, #1
 800de80:	464a      	mov	r2, r9
 800de82:	4631      	mov	r1, r6
 800de84:	4628      	mov	r0, r5
 800de86:	47b8      	blx	r7
 800de88:	3001      	adds	r0, #1
 800de8a:	f43f ae57 	beq.w	800db3c <_printf_float+0x9c>
 800de8e:	f108 0801 	add.w	r8, r8, #1
 800de92:	9b08      	ldr	r3, [sp, #32]
 800de94:	3b01      	subs	r3, #1
 800de96:	4543      	cmp	r3, r8
 800de98:	dcf1      	bgt.n	800de7e <_printf_float+0x3de>
 800de9a:	9b04      	ldr	r3, [sp, #16]
 800de9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dea0:	e6db      	b.n	800dc5a <_printf_float+0x1ba>
 800dea2:	f04f 0800 	mov.w	r8, #0
 800dea6:	f104 091a 	add.w	r9, r4, #26
 800deaa:	e7f2      	b.n	800de92 <_printf_float+0x3f2>
 800deac:	2301      	movs	r3, #1
 800deae:	4642      	mov	r2, r8
 800deb0:	e7df      	b.n	800de72 <_printf_float+0x3d2>
 800deb2:	2301      	movs	r3, #1
 800deb4:	464a      	mov	r2, r9
 800deb6:	4631      	mov	r1, r6
 800deb8:	4628      	mov	r0, r5
 800deba:	47b8      	blx	r7
 800debc:	3001      	adds	r0, #1
 800debe:	f43f ae3d 	beq.w	800db3c <_printf_float+0x9c>
 800dec2:	f108 0801 	add.w	r8, r8, #1
 800dec6:	68e3      	ldr	r3, [r4, #12]
 800dec8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800deca:	1a5b      	subs	r3, r3, r1
 800decc:	4543      	cmp	r3, r8
 800dece:	dcf0      	bgt.n	800deb2 <_printf_float+0x412>
 800ded0:	e6f7      	b.n	800dcc2 <_printf_float+0x222>
 800ded2:	f04f 0800 	mov.w	r8, #0
 800ded6:	f104 0919 	add.w	r9, r4, #25
 800deda:	e7f4      	b.n	800dec6 <_printf_float+0x426>

0800dedc <_printf_common>:
 800dedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee0:	4616      	mov	r6, r2
 800dee2:	4699      	mov	r9, r3
 800dee4:	688a      	ldr	r2, [r1, #8]
 800dee6:	690b      	ldr	r3, [r1, #16]
 800dee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800deec:	4293      	cmp	r3, r2
 800deee:	bfb8      	it	lt
 800def0:	4613      	movlt	r3, r2
 800def2:	6033      	str	r3, [r6, #0]
 800def4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800def8:	4607      	mov	r7, r0
 800defa:	460c      	mov	r4, r1
 800defc:	b10a      	cbz	r2, 800df02 <_printf_common+0x26>
 800defe:	3301      	adds	r3, #1
 800df00:	6033      	str	r3, [r6, #0]
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	0699      	lsls	r1, r3, #26
 800df06:	bf42      	ittt	mi
 800df08:	6833      	ldrmi	r3, [r6, #0]
 800df0a:	3302      	addmi	r3, #2
 800df0c:	6033      	strmi	r3, [r6, #0]
 800df0e:	6825      	ldr	r5, [r4, #0]
 800df10:	f015 0506 	ands.w	r5, r5, #6
 800df14:	d106      	bne.n	800df24 <_printf_common+0x48>
 800df16:	f104 0a19 	add.w	sl, r4, #25
 800df1a:	68e3      	ldr	r3, [r4, #12]
 800df1c:	6832      	ldr	r2, [r6, #0]
 800df1e:	1a9b      	subs	r3, r3, r2
 800df20:	42ab      	cmp	r3, r5
 800df22:	dc26      	bgt.n	800df72 <_printf_common+0x96>
 800df24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df28:	1e13      	subs	r3, r2, #0
 800df2a:	6822      	ldr	r2, [r4, #0]
 800df2c:	bf18      	it	ne
 800df2e:	2301      	movne	r3, #1
 800df30:	0692      	lsls	r2, r2, #26
 800df32:	d42b      	bmi.n	800df8c <_printf_common+0xb0>
 800df34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df38:	4649      	mov	r1, r9
 800df3a:	4638      	mov	r0, r7
 800df3c:	47c0      	blx	r8
 800df3e:	3001      	adds	r0, #1
 800df40:	d01e      	beq.n	800df80 <_printf_common+0xa4>
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	68e5      	ldr	r5, [r4, #12]
 800df46:	6832      	ldr	r2, [r6, #0]
 800df48:	f003 0306 	and.w	r3, r3, #6
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	bf08      	it	eq
 800df50:	1aad      	subeq	r5, r5, r2
 800df52:	68a3      	ldr	r3, [r4, #8]
 800df54:	6922      	ldr	r2, [r4, #16]
 800df56:	bf0c      	ite	eq
 800df58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df5c:	2500      	movne	r5, #0
 800df5e:	4293      	cmp	r3, r2
 800df60:	bfc4      	itt	gt
 800df62:	1a9b      	subgt	r3, r3, r2
 800df64:	18ed      	addgt	r5, r5, r3
 800df66:	2600      	movs	r6, #0
 800df68:	341a      	adds	r4, #26
 800df6a:	42b5      	cmp	r5, r6
 800df6c:	d11a      	bne.n	800dfa4 <_printf_common+0xc8>
 800df6e:	2000      	movs	r0, #0
 800df70:	e008      	b.n	800df84 <_printf_common+0xa8>
 800df72:	2301      	movs	r3, #1
 800df74:	4652      	mov	r2, sl
 800df76:	4649      	mov	r1, r9
 800df78:	4638      	mov	r0, r7
 800df7a:	47c0      	blx	r8
 800df7c:	3001      	adds	r0, #1
 800df7e:	d103      	bne.n	800df88 <_printf_common+0xac>
 800df80:	f04f 30ff 	mov.w	r0, #4294967295
 800df84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df88:	3501      	adds	r5, #1
 800df8a:	e7c6      	b.n	800df1a <_printf_common+0x3e>
 800df8c:	18e1      	adds	r1, r4, r3
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	2030      	movs	r0, #48	; 0x30
 800df92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df96:	4422      	add	r2, r4
 800df98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dfa0:	3302      	adds	r3, #2
 800dfa2:	e7c7      	b.n	800df34 <_printf_common+0x58>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	4622      	mov	r2, r4
 800dfa8:	4649      	mov	r1, r9
 800dfaa:	4638      	mov	r0, r7
 800dfac:	47c0      	blx	r8
 800dfae:	3001      	adds	r0, #1
 800dfb0:	d0e6      	beq.n	800df80 <_printf_common+0xa4>
 800dfb2:	3601      	adds	r6, #1
 800dfb4:	e7d9      	b.n	800df6a <_printf_common+0x8e>
	...

0800dfb8 <_printf_i>:
 800dfb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfbc:	460c      	mov	r4, r1
 800dfbe:	4691      	mov	r9, r2
 800dfc0:	7e27      	ldrb	r7, [r4, #24]
 800dfc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfc4:	2f78      	cmp	r7, #120	; 0x78
 800dfc6:	4680      	mov	r8, r0
 800dfc8:	469a      	mov	sl, r3
 800dfca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfce:	d807      	bhi.n	800dfe0 <_printf_i+0x28>
 800dfd0:	2f62      	cmp	r7, #98	; 0x62
 800dfd2:	d80a      	bhi.n	800dfea <_printf_i+0x32>
 800dfd4:	2f00      	cmp	r7, #0
 800dfd6:	f000 80d8 	beq.w	800e18a <_printf_i+0x1d2>
 800dfda:	2f58      	cmp	r7, #88	; 0x58
 800dfdc:	f000 80a3 	beq.w	800e126 <_printf_i+0x16e>
 800dfe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dfe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dfe8:	e03a      	b.n	800e060 <_printf_i+0xa8>
 800dfea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dfee:	2b15      	cmp	r3, #21
 800dff0:	d8f6      	bhi.n	800dfe0 <_printf_i+0x28>
 800dff2:	a001      	add	r0, pc, #4	; (adr r0, 800dff8 <_printf_i+0x40>)
 800dff4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dff8:	0800e051 	.word	0x0800e051
 800dffc:	0800e065 	.word	0x0800e065
 800e000:	0800dfe1 	.word	0x0800dfe1
 800e004:	0800dfe1 	.word	0x0800dfe1
 800e008:	0800dfe1 	.word	0x0800dfe1
 800e00c:	0800dfe1 	.word	0x0800dfe1
 800e010:	0800e065 	.word	0x0800e065
 800e014:	0800dfe1 	.word	0x0800dfe1
 800e018:	0800dfe1 	.word	0x0800dfe1
 800e01c:	0800dfe1 	.word	0x0800dfe1
 800e020:	0800dfe1 	.word	0x0800dfe1
 800e024:	0800e171 	.word	0x0800e171
 800e028:	0800e095 	.word	0x0800e095
 800e02c:	0800e153 	.word	0x0800e153
 800e030:	0800dfe1 	.word	0x0800dfe1
 800e034:	0800dfe1 	.word	0x0800dfe1
 800e038:	0800e193 	.word	0x0800e193
 800e03c:	0800dfe1 	.word	0x0800dfe1
 800e040:	0800e095 	.word	0x0800e095
 800e044:	0800dfe1 	.word	0x0800dfe1
 800e048:	0800dfe1 	.word	0x0800dfe1
 800e04c:	0800e15b 	.word	0x0800e15b
 800e050:	680b      	ldr	r3, [r1, #0]
 800e052:	1d1a      	adds	r2, r3, #4
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	600a      	str	r2, [r1, #0]
 800e058:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e060:	2301      	movs	r3, #1
 800e062:	e0a3      	b.n	800e1ac <_printf_i+0x1f4>
 800e064:	6825      	ldr	r5, [r4, #0]
 800e066:	6808      	ldr	r0, [r1, #0]
 800e068:	062e      	lsls	r6, r5, #24
 800e06a:	f100 0304 	add.w	r3, r0, #4
 800e06e:	d50a      	bpl.n	800e086 <_printf_i+0xce>
 800e070:	6805      	ldr	r5, [r0, #0]
 800e072:	600b      	str	r3, [r1, #0]
 800e074:	2d00      	cmp	r5, #0
 800e076:	da03      	bge.n	800e080 <_printf_i+0xc8>
 800e078:	232d      	movs	r3, #45	; 0x2d
 800e07a:	426d      	negs	r5, r5
 800e07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e080:	485e      	ldr	r0, [pc, #376]	; (800e1fc <_printf_i+0x244>)
 800e082:	230a      	movs	r3, #10
 800e084:	e019      	b.n	800e0ba <_printf_i+0x102>
 800e086:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e08a:	6805      	ldr	r5, [r0, #0]
 800e08c:	600b      	str	r3, [r1, #0]
 800e08e:	bf18      	it	ne
 800e090:	b22d      	sxthne	r5, r5
 800e092:	e7ef      	b.n	800e074 <_printf_i+0xbc>
 800e094:	680b      	ldr	r3, [r1, #0]
 800e096:	6825      	ldr	r5, [r4, #0]
 800e098:	1d18      	adds	r0, r3, #4
 800e09a:	6008      	str	r0, [r1, #0]
 800e09c:	0628      	lsls	r0, r5, #24
 800e09e:	d501      	bpl.n	800e0a4 <_printf_i+0xec>
 800e0a0:	681d      	ldr	r5, [r3, #0]
 800e0a2:	e002      	b.n	800e0aa <_printf_i+0xf2>
 800e0a4:	0669      	lsls	r1, r5, #25
 800e0a6:	d5fb      	bpl.n	800e0a0 <_printf_i+0xe8>
 800e0a8:	881d      	ldrh	r5, [r3, #0]
 800e0aa:	4854      	ldr	r0, [pc, #336]	; (800e1fc <_printf_i+0x244>)
 800e0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800e0ae:	bf0c      	ite	eq
 800e0b0:	2308      	moveq	r3, #8
 800e0b2:	230a      	movne	r3, #10
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e0ba:	6866      	ldr	r6, [r4, #4]
 800e0bc:	60a6      	str	r6, [r4, #8]
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	bfa2      	ittt	ge
 800e0c2:	6821      	ldrge	r1, [r4, #0]
 800e0c4:	f021 0104 	bicge.w	r1, r1, #4
 800e0c8:	6021      	strge	r1, [r4, #0]
 800e0ca:	b90d      	cbnz	r5, 800e0d0 <_printf_i+0x118>
 800e0cc:	2e00      	cmp	r6, #0
 800e0ce:	d04d      	beq.n	800e16c <_printf_i+0x1b4>
 800e0d0:	4616      	mov	r6, r2
 800e0d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0d6:	fb03 5711 	mls	r7, r3, r1, r5
 800e0da:	5dc7      	ldrb	r7, [r0, r7]
 800e0dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0e0:	462f      	mov	r7, r5
 800e0e2:	42bb      	cmp	r3, r7
 800e0e4:	460d      	mov	r5, r1
 800e0e6:	d9f4      	bls.n	800e0d2 <_printf_i+0x11a>
 800e0e8:	2b08      	cmp	r3, #8
 800e0ea:	d10b      	bne.n	800e104 <_printf_i+0x14c>
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	07df      	lsls	r7, r3, #31
 800e0f0:	d508      	bpl.n	800e104 <_printf_i+0x14c>
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	6861      	ldr	r1, [r4, #4]
 800e0f6:	4299      	cmp	r1, r3
 800e0f8:	bfde      	ittt	le
 800e0fa:	2330      	movle	r3, #48	; 0x30
 800e0fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e100:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e104:	1b92      	subs	r2, r2, r6
 800e106:	6122      	str	r2, [r4, #16]
 800e108:	f8cd a000 	str.w	sl, [sp]
 800e10c:	464b      	mov	r3, r9
 800e10e:	aa03      	add	r2, sp, #12
 800e110:	4621      	mov	r1, r4
 800e112:	4640      	mov	r0, r8
 800e114:	f7ff fee2 	bl	800dedc <_printf_common>
 800e118:	3001      	adds	r0, #1
 800e11a:	d14c      	bne.n	800e1b6 <_printf_i+0x1fe>
 800e11c:	f04f 30ff 	mov.w	r0, #4294967295
 800e120:	b004      	add	sp, #16
 800e122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e126:	4835      	ldr	r0, [pc, #212]	; (800e1fc <_printf_i+0x244>)
 800e128:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	680e      	ldr	r6, [r1, #0]
 800e130:	061f      	lsls	r7, r3, #24
 800e132:	f856 5b04 	ldr.w	r5, [r6], #4
 800e136:	600e      	str	r6, [r1, #0]
 800e138:	d514      	bpl.n	800e164 <_printf_i+0x1ac>
 800e13a:	07d9      	lsls	r1, r3, #31
 800e13c:	bf44      	itt	mi
 800e13e:	f043 0320 	orrmi.w	r3, r3, #32
 800e142:	6023      	strmi	r3, [r4, #0]
 800e144:	b91d      	cbnz	r5, 800e14e <_printf_i+0x196>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	f023 0320 	bic.w	r3, r3, #32
 800e14c:	6023      	str	r3, [r4, #0]
 800e14e:	2310      	movs	r3, #16
 800e150:	e7b0      	b.n	800e0b4 <_printf_i+0xfc>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	f043 0320 	orr.w	r3, r3, #32
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	2378      	movs	r3, #120	; 0x78
 800e15c:	4828      	ldr	r0, [pc, #160]	; (800e200 <_printf_i+0x248>)
 800e15e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e162:	e7e3      	b.n	800e12c <_printf_i+0x174>
 800e164:	065e      	lsls	r6, r3, #25
 800e166:	bf48      	it	mi
 800e168:	b2ad      	uxthmi	r5, r5
 800e16a:	e7e6      	b.n	800e13a <_printf_i+0x182>
 800e16c:	4616      	mov	r6, r2
 800e16e:	e7bb      	b.n	800e0e8 <_printf_i+0x130>
 800e170:	680b      	ldr	r3, [r1, #0]
 800e172:	6826      	ldr	r6, [r4, #0]
 800e174:	6960      	ldr	r0, [r4, #20]
 800e176:	1d1d      	adds	r5, r3, #4
 800e178:	600d      	str	r5, [r1, #0]
 800e17a:	0635      	lsls	r5, r6, #24
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	d501      	bpl.n	800e184 <_printf_i+0x1cc>
 800e180:	6018      	str	r0, [r3, #0]
 800e182:	e002      	b.n	800e18a <_printf_i+0x1d2>
 800e184:	0671      	lsls	r1, r6, #25
 800e186:	d5fb      	bpl.n	800e180 <_printf_i+0x1c8>
 800e188:	8018      	strh	r0, [r3, #0]
 800e18a:	2300      	movs	r3, #0
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	4616      	mov	r6, r2
 800e190:	e7ba      	b.n	800e108 <_printf_i+0x150>
 800e192:	680b      	ldr	r3, [r1, #0]
 800e194:	1d1a      	adds	r2, r3, #4
 800e196:	600a      	str	r2, [r1, #0]
 800e198:	681e      	ldr	r6, [r3, #0]
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	2100      	movs	r1, #0
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f7f2 f8a6 	bl	80002f0 <memchr>
 800e1a4:	b108      	cbz	r0, 800e1aa <_printf_i+0x1f2>
 800e1a6:	1b80      	subs	r0, r0, r6
 800e1a8:	6060      	str	r0, [r4, #4]
 800e1aa:	6863      	ldr	r3, [r4, #4]
 800e1ac:	6123      	str	r3, [r4, #16]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b4:	e7a8      	b.n	800e108 <_printf_i+0x150>
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	4632      	mov	r2, r6
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	4640      	mov	r0, r8
 800e1be:	47d0      	blx	sl
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d0ab      	beq.n	800e11c <_printf_i+0x164>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	079b      	lsls	r3, r3, #30
 800e1c8:	d413      	bmi.n	800e1f2 <_printf_i+0x23a>
 800e1ca:	68e0      	ldr	r0, [r4, #12]
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	4298      	cmp	r0, r3
 800e1d0:	bfb8      	it	lt
 800e1d2:	4618      	movlt	r0, r3
 800e1d4:	e7a4      	b.n	800e120 <_printf_i+0x168>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	4632      	mov	r2, r6
 800e1da:	4649      	mov	r1, r9
 800e1dc:	4640      	mov	r0, r8
 800e1de:	47d0      	blx	sl
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d09b      	beq.n	800e11c <_printf_i+0x164>
 800e1e4:	3501      	adds	r5, #1
 800e1e6:	68e3      	ldr	r3, [r4, #12]
 800e1e8:	9903      	ldr	r1, [sp, #12]
 800e1ea:	1a5b      	subs	r3, r3, r1
 800e1ec:	42ab      	cmp	r3, r5
 800e1ee:	dcf2      	bgt.n	800e1d6 <_printf_i+0x21e>
 800e1f0:	e7eb      	b.n	800e1ca <_printf_i+0x212>
 800e1f2:	2500      	movs	r5, #0
 800e1f4:	f104 0619 	add.w	r6, r4, #25
 800e1f8:	e7f5      	b.n	800e1e6 <_printf_i+0x22e>
 800e1fa:	bf00      	nop
 800e1fc:	08011406 	.word	0x08011406
 800e200:	08011417 	.word	0x08011417

0800e204 <sniprintf>:
 800e204:	b40c      	push	{r2, r3}
 800e206:	b530      	push	{r4, r5, lr}
 800e208:	4b17      	ldr	r3, [pc, #92]	; (800e268 <sniprintf+0x64>)
 800e20a:	1e0c      	subs	r4, r1, #0
 800e20c:	681d      	ldr	r5, [r3, #0]
 800e20e:	b09d      	sub	sp, #116	; 0x74
 800e210:	da08      	bge.n	800e224 <sniprintf+0x20>
 800e212:	238b      	movs	r3, #139	; 0x8b
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	f04f 30ff 	mov.w	r0, #4294967295
 800e21a:	b01d      	add	sp, #116	; 0x74
 800e21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e220:	b002      	add	sp, #8
 800e222:	4770      	bx	lr
 800e224:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e228:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e22c:	bf14      	ite	ne
 800e22e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e232:	4623      	moveq	r3, r4
 800e234:	9304      	str	r3, [sp, #16]
 800e236:	9307      	str	r3, [sp, #28]
 800e238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e23c:	9002      	str	r0, [sp, #8]
 800e23e:	9006      	str	r0, [sp, #24]
 800e240:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e244:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e246:	ab21      	add	r3, sp, #132	; 0x84
 800e248:	a902      	add	r1, sp, #8
 800e24a:	4628      	mov	r0, r5
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	f001 fadd 	bl	800f80c <_svfiprintf_r>
 800e252:	1c43      	adds	r3, r0, #1
 800e254:	bfbc      	itt	lt
 800e256:	238b      	movlt	r3, #139	; 0x8b
 800e258:	602b      	strlt	r3, [r5, #0]
 800e25a:	2c00      	cmp	r4, #0
 800e25c:	d0dd      	beq.n	800e21a <sniprintf+0x16>
 800e25e:	9b02      	ldr	r3, [sp, #8]
 800e260:	2200      	movs	r2, #0
 800e262:	701a      	strb	r2, [r3, #0]
 800e264:	e7d9      	b.n	800e21a <sniprintf+0x16>
 800e266:	bf00      	nop
 800e268:	24000010 	.word	0x24000010

0800e26c <siprintf>:
 800e26c:	b40e      	push	{r1, r2, r3}
 800e26e:	b500      	push	{lr}
 800e270:	b09c      	sub	sp, #112	; 0x70
 800e272:	ab1d      	add	r3, sp, #116	; 0x74
 800e274:	9002      	str	r0, [sp, #8]
 800e276:	9006      	str	r0, [sp, #24]
 800e278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e27c:	4809      	ldr	r0, [pc, #36]	; (800e2a4 <siprintf+0x38>)
 800e27e:	9107      	str	r1, [sp, #28]
 800e280:	9104      	str	r1, [sp, #16]
 800e282:	4909      	ldr	r1, [pc, #36]	; (800e2a8 <siprintf+0x3c>)
 800e284:	f853 2b04 	ldr.w	r2, [r3], #4
 800e288:	9105      	str	r1, [sp, #20]
 800e28a:	6800      	ldr	r0, [r0, #0]
 800e28c:	9301      	str	r3, [sp, #4]
 800e28e:	a902      	add	r1, sp, #8
 800e290:	f001 fabc 	bl	800f80c <_svfiprintf_r>
 800e294:	9b02      	ldr	r3, [sp, #8]
 800e296:	2200      	movs	r2, #0
 800e298:	701a      	strb	r2, [r3, #0]
 800e29a:	b01c      	add	sp, #112	; 0x70
 800e29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2a0:	b003      	add	sp, #12
 800e2a2:	4770      	bx	lr
 800e2a4:	24000010 	.word	0x24000010
 800e2a8:	ffff0208 	.word	0xffff0208

0800e2ac <quorem>:
 800e2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b0:	6903      	ldr	r3, [r0, #16]
 800e2b2:	690c      	ldr	r4, [r1, #16]
 800e2b4:	42a3      	cmp	r3, r4
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	f2c0 8081 	blt.w	800e3be <quorem+0x112>
 800e2bc:	3c01      	subs	r4, #1
 800e2be:	f101 0814 	add.w	r8, r1, #20
 800e2c2:	f100 0514 	add.w	r5, r0, #20
 800e2c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2ca:	9301      	str	r3, [sp, #4]
 800e2cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e2d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e2dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2e4:	d331      	bcc.n	800e34a <quorem+0x9e>
 800e2e6:	f04f 0e00 	mov.w	lr, #0
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	46ac      	mov	ip, r5
 800e2ee:	46f2      	mov	sl, lr
 800e2f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2f4:	b293      	uxth	r3, r2
 800e2f6:	fb06 e303 	mla	r3, r6, r3, lr
 800e2fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	ebaa 0303 	sub.w	r3, sl, r3
 800e304:	0c12      	lsrs	r2, r2, #16
 800e306:	f8dc a000 	ldr.w	sl, [ip]
 800e30a:	fb06 e202 	mla	r2, r6, r2, lr
 800e30e:	fa13 f38a 	uxtah	r3, r3, sl
 800e312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e316:	fa1f fa82 	uxth.w	sl, r2
 800e31a:	f8dc 2000 	ldr.w	r2, [ip]
 800e31e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e322:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e326:	b29b      	uxth	r3, r3
 800e328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e32c:	4581      	cmp	r9, r0
 800e32e:	f84c 3b04 	str.w	r3, [ip], #4
 800e332:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e336:	d2db      	bcs.n	800e2f0 <quorem+0x44>
 800e338:	f855 300b 	ldr.w	r3, [r5, fp]
 800e33c:	b92b      	cbnz	r3, 800e34a <quorem+0x9e>
 800e33e:	9b01      	ldr	r3, [sp, #4]
 800e340:	3b04      	subs	r3, #4
 800e342:	429d      	cmp	r5, r3
 800e344:	461a      	mov	r2, r3
 800e346:	d32e      	bcc.n	800e3a6 <quorem+0xfa>
 800e348:	613c      	str	r4, [r7, #16]
 800e34a:	4638      	mov	r0, r7
 800e34c:	f001 f848 	bl	800f3e0 <__mcmp>
 800e350:	2800      	cmp	r0, #0
 800e352:	db24      	blt.n	800e39e <quorem+0xf2>
 800e354:	3601      	adds	r6, #1
 800e356:	4628      	mov	r0, r5
 800e358:	f04f 0c00 	mov.w	ip, #0
 800e35c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e360:	f8d0 e000 	ldr.w	lr, [r0]
 800e364:	b293      	uxth	r3, r2
 800e366:	ebac 0303 	sub.w	r3, ip, r3
 800e36a:	0c12      	lsrs	r2, r2, #16
 800e36c:	fa13 f38e 	uxtah	r3, r3, lr
 800e370:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e374:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e378:	b29b      	uxth	r3, r3
 800e37a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e37e:	45c1      	cmp	r9, r8
 800e380:	f840 3b04 	str.w	r3, [r0], #4
 800e384:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e388:	d2e8      	bcs.n	800e35c <quorem+0xb0>
 800e38a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e38e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e392:	b922      	cbnz	r2, 800e39e <quorem+0xf2>
 800e394:	3b04      	subs	r3, #4
 800e396:	429d      	cmp	r5, r3
 800e398:	461a      	mov	r2, r3
 800e39a:	d30a      	bcc.n	800e3b2 <quorem+0x106>
 800e39c:	613c      	str	r4, [r7, #16]
 800e39e:	4630      	mov	r0, r6
 800e3a0:	b003      	add	sp, #12
 800e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a6:	6812      	ldr	r2, [r2, #0]
 800e3a8:	3b04      	subs	r3, #4
 800e3aa:	2a00      	cmp	r2, #0
 800e3ac:	d1cc      	bne.n	800e348 <quorem+0x9c>
 800e3ae:	3c01      	subs	r4, #1
 800e3b0:	e7c7      	b.n	800e342 <quorem+0x96>
 800e3b2:	6812      	ldr	r2, [r2, #0]
 800e3b4:	3b04      	subs	r3, #4
 800e3b6:	2a00      	cmp	r2, #0
 800e3b8:	d1f0      	bne.n	800e39c <quorem+0xf0>
 800e3ba:	3c01      	subs	r4, #1
 800e3bc:	e7eb      	b.n	800e396 <quorem+0xea>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	e7ee      	b.n	800e3a0 <quorem+0xf4>
 800e3c2:	0000      	movs	r0, r0
 800e3c4:	0000      	movs	r0, r0
	...

0800e3c8 <_dtoa_r>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	ec59 8b10 	vmov	r8, r9, d0
 800e3d0:	b095      	sub	sp, #84	; 0x54
 800e3d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e3d4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e3d6:	9107      	str	r1, [sp, #28]
 800e3d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e3dc:	4606      	mov	r6, r0
 800e3de:	9209      	str	r2, [sp, #36]	; 0x24
 800e3e0:	9310      	str	r3, [sp, #64]	; 0x40
 800e3e2:	b975      	cbnz	r5, 800e402 <_dtoa_r+0x3a>
 800e3e4:	2010      	movs	r0, #16
 800e3e6:	f000 fd75 	bl	800eed4 <malloc>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6270      	str	r0, [r6, #36]	; 0x24
 800e3ee:	b920      	cbnz	r0, 800e3fa <_dtoa_r+0x32>
 800e3f0:	4bab      	ldr	r3, [pc, #684]	; (800e6a0 <_dtoa_r+0x2d8>)
 800e3f2:	21ea      	movs	r1, #234	; 0xea
 800e3f4:	48ab      	ldr	r0, [pc, #684]	; (800e6a4 <_dtoa_r+0x2dc>)
 800e3f6:	f001 fb19 	bl	800fa2c <__assert_func>
 800e3fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3fe:	6005      	str	r5, [r0, #0]
 800e400:	60c5      	str	r5, [r0, #12]
 800e402:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e404:	6819      	ldr	r1, [r3, #0]
 800e406:	b151      	cbz	r1, 800e41e <_dtoa_r+0x56>
 800e408:	685a      	ldr	r2, [r3, #4]
 800e40a:	604a      	str	r2, [r1, #4]
 800e40c:	2301      	movs	r3, #1
 800e40e:	4093      	lsls	r3, r2
 800e410:	608b      	str	r3, [r1, #8]
 800e412:	4630      	mov	r0, r6
 800e414:	f000 fda6 	bl	800ef64 <_Bfree>
 800e418:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e41a:	2200      	movs	r2, #0
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	f1b9 0300 	subs.w	r3, r9, #0
 800e422:	bfbb      	ittet	lt
 800e424:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e428:	9303      	strlt	r3, [sp, #12]
 800e42a:	2300      	movge	r3, #0
 800e42c:	2201      	movlt	r2, #1
 800e42e:	bfac      	ite	ge
 800e430:	6023      	strge	r3, [r4, #0]
 800e432:	6022      	strlt	r2, [r4, #0]
 800e434:	4b9c      	ldr	r3, [pc, #624]	; (800e6a8 <_dtoa_r+0x2e0>)
 800e436:	9c03      	ldr	r4, [sp, #12]
 800e438:	43a3      	bics	r3, r4
 800e43a:	d11a      	bne.n	800e472 <_dtoa_r+0xaa>
 800e43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e43e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e448:	ea53 0308 	orrs.w	r3, r3, r8
 800e44c:	f000 8512 	beq.w	800ee74 <_dtoa_r+0xaac>
 800e450:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e452:	b953      	cbnz	r3, 800e46a <_dtoa_r+0xa2>
 800e454:	4b95      	ldr	r3, [pc, #596]	; (800e6ac <_dtoa_r+0x2e4>)
 800e456:	e01f      	b.n	800e498 <_dtoa_r+0xd0>
 800e458:	4b95      	ldr	r3, [pc, #596]	; (800e6b0 <_dtoa_r+0x2e8>)
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	3308      	adds	r3, #8
 800e45e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e460:	6013      	str	r3, [r2, #0]
 800e462:	9800      	ldr	r0, [sp, #0]
 800e464:	b015      	add	sp, #84	; 0x54
 800e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46a:	4b90      	ldr	r3, [pc, #576]	; (800e6ac <_dtoa_r+0x2e4>)
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	3303      	adds	r3, #3
 800e470:	e7f5      	b.n	800e45e <_dtoa_r+0x96>
 800e472:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e476:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e482:	d10b      	bne.n	800e49c <_dtoa_r+0xd4>
 800e484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e486:	2301      	movs	r3, #1
 800e488:	6013      	str	r3, [r2, #0]
 800e48a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 84ee 	beq.w	800ee6e <_dtoa_r+0xaa6>
 800e492:	4888      	ldr	r0, [pc, #544]	; (800e6b4 <_dtoa_r+0x2ec>)
 800e494:	6018      	str	r0, [r3, #0]
 800e496:	1e43      	subs	r3, r0, #1
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	e7e2      	b.n	800e462 <_dtoa_r+0x9a>
 800e49c:	a913      	add	r1, sp, #76	; 0x4c
 800e49e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e4a2:	aa12      	add	r2, sp, #72	; 0x48
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f001 f83f 	bl	800f528 <__d2b>
 800e4aa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	d047      	beq.n	800e546 <_dtoa_r+0x17e>
 800e4b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e4b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e4bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4c0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e4c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4c8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e4cc:	2400      	movs	r4, #0
 800e4ce:	ec43 2b16 	vmov	d6, r2, r3
 800e4d2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e4d6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e688 <_dtoa_r+0x2c0>
 800e4da:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e4de:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e690 <_dtoa_r+0x2c8>
 800e4e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e4e6:	eeb0 7b46 	vmov.f64	d7, d6
 800e4ea:	ee06 1a90 	vmov	s13, r1
 800e4ee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e4f2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e698 <_dtoa_r+0x2d0>
 800e4f6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e4fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e4fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e506:	ee16 ba90 	vmov	fp, s13
 800e50a:	9411      	str	r4, [sp, #68]	; 0x44
 800e50c:	d508      	bpl.n	800e520 <_dtoa_r+0x158>
 800e50e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e512:	eeb4 6b47 	vcmp.f64	d6, d7
 800e516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e51a:	bf18      	it	ne
 800e51c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e520:	f1bb 0f16 	cmp.w	fp, #22
 800e524:	d832      	bhi.n	800e58c <_dtoa_r+0x1c4>
 800e526:	4b64      	ldr	r3, [pc, #400]	; (800e6b8 <_dtoa_r+0x2f0>)
 800e528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e52c:	ed93 7b00 	vldr	d7, [r3]
 800e530:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e534:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53c:	d501      	bpl.n	800e542 <_dtoa_r+0x17a>
 800e53e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e542:	2300      	movs	r3, #0
 800e544:	e023      	b.n	800e58e <_dtoa_r+0x1c6>
 800e546:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e548:	4401      	add	r1, r0
 800e54a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e54e:	2b20      	cmp	r3, #32
 800e550:	bfc3      	ittte	gt
 800e552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e556:	fa04 f303 	lslgt.w	r3, r4, r3
 800e55a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e55e:	f1c3 0320 	rsble	r3, r3, #32
 800e562:	bfc6      	itte	gt
 800e564:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e568:	ea43 0308 	orrgt.w	r3, r3, r8
 800e56c:	fa08 f303 	lslle.w	r3, r8, r3
 800e570:	ee07 3a90 	vmov	s15, r3
 800e574:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e578:	3901      	subs	r1, #1
 800e57a:	ed8d 7b00 	vstr	d7, [sp]
 800e57e:	9c01      	ldr	r4, [sp, #4]
 800e580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e584:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e588:	2401      	movs	r4, #1
 800e58a:	e7a0      	b.n	800e4ce <_dtoa_r+0x106>
 800e58c:	2301      	movs	r3, #1
 800e58e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e590:	1a43      	subs	r3, r0, r1
 800e592:	1e5a      	subs	r2, r3, #1
 800e594:	bf45      	ittet	mi
 800e596:	f1c3 0301 	rsbmi	r3, r3, #1
 800e59a:	9305      	strmi	r3, [sp, #20]
 800e59c:	2300      	movpl	r3, #0
 800e59e:	2300      	movmi	r3, #0
 800e5a0:	9206      	str	r2, [sp, #24]
 800e5a2:	bf54      	ite	pl
 800e5a4:	9305      	strpl	r3, [sp, #20]
 800e5a6:	9306      	strmi	r3, [sp, #24]
 800e5a8:	f1bb 0f00 	cmp.w	fp, #0
 800e5ac:	db18      	blt.n	800e5e0 <_dtoa_r+0x218>
 800e5ae:	9b06      	ldr	r3, [sp, #24]
 800e5b0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e5b4:	445b      	add	r3, fp
 800e5b6:	9306      	str	r3, [sp, #24]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	9a07      	ldr	r2, [sp, #28]
 800e5bc:	2a09      	cmp	r2, #9
 800e5be:	d849      	bhi.n	800e654 <_dtoa_r+0x28c>
 800e5c0:	2a05      	cmp	r2, #5
 800e5c2:	bfc4      	itt	gt
 800e5c4:	3a04      	subgt	r2, #4
 800e5c6:	9207      	strgt	r2, [sp, #28]
 800e5c8:	9a07      	ldr	r2, [sp, #28]
 800e5ca:	f1a2 0202 	sub.w	r2, r2, #2
 800e5ce:	bfcc      	ite	gt
 800e5d0:	2400      	movgt	r4, #0
 800e5d2:	2401      	movle	r4, #1
 800e5d4:	2a03      	cmp	r2, #3
 800e5d6:	d848      	bhi.n	800e66a <_dtoa_r+0x2a2>
 800e5d8:	e8df f002 	tbb	[pc, r2]
 800e5dc:	3a2c2e0b 	.word	0x3a2c2e0b
 800e5e0:	9b05      	ldr	r3, [sp, #20]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	eba3 030b 	sub.w	r3, r3, fp
 800e5e8:	9305      	str	r3, [sp, #20]
 800e5ea:	920e      	str	r2, [sp, #56]	; 0x38
 800e5ec:	f1cb 0300 	rsb	r3, fp, #0
 800e5f0:	e7e3      	b.n	800e5ba <_dtoa_r+0x1f2>
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	9208      	str	r2, [sp, #32]
 800e5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	dc39      	bgt.n	800e670 <_dtoa_r+0x2a8>
 800e5fc:	f04f 0a01 	mov.w	sl, #1
 800e600:	46d1      	mov	r9, sl
 800e602:	4652      	mov	r2, sl
 800e604:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e608:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e60a:	2100      	movs	r1, #0
 800e60c:	6079      	str	r1, [r7, #4]
 800e60e:	2004      	movs	r0, #4
 800e610:	f100 0c14 	add.w	ip, r0, #20
 800e614:	4594      	cmp	ip, r2
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	d92f      	bls.n	800e67a <_dtoa_r+0x2b2>
 800e61a:	4630      	mov	r0, r6
 800e61c:	930c      	str	r3, [sp, #48]	; 0x30
 800e61e:	f000 fc61 	bl	800eee4 <_Balloc>
 800e622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e624:	9000      	str	r0, [sp, #0]
 800e626:	4602      	mov	r2, r0
 800e628:	2800      	cmp	r0, #0
 800e62a:	d149      	bne.n	800e6c0 <_dtoa_r+0x2f8>
 800e62c:	4b23      	ldr	r3, [pc, #140]	; (800e6bc <_dtoa_r+0x2f4>)
 800e62e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e632:	e6df      	b.n	800e3f4 <_dtoa_r+0x2c>
 800e634:	2201      	movs	r2, #1
 800e636:	e7dd      	b.n	800e5f4 <_dtoa_r+0x22c>
 800e638:	2200      	movs	r2, #0
 800e63a:	9208      	str	r2, [sp, #32]
 800e63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e63e:	eb0b 0a02 	add.w	sl, fp, r2
 800e642:	f10a 0901 	add.w	r9, sl, #1
 800e646:	464a      	mov	r2, r9
 800e648:	2a01      	cmp	r2, #1
 800e64a:	bfb8      	it	lt
 800e64c:	2201      	movlt	r2, #1
 800e64e:	e7db      	b.n	800e608 <_dtoa_r+0x240>
 800e650:	2201      	movs	r2, #1
 800e652:	e7f2      	b.n	800e63a <_dtoa_r+0x272>
 800e654:	2401      	movs	r4, #1
 800e656:	2200      	movs	r2, #0
 800e658:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e65c:	f04f 3aff 	mov.w	sl, #4294967295
 800e660:	2100      	movs	r1, #0
 800e662:	46d1      	mov	r9, sl
 800e664:	2212      	movs	r2, #18
 800e666:	9109      	str	r1, [sp, #36]	; 0x24
 800e668:	e7ce      	b.n	800e608 <_dtoa_r+0x240>
 800e66a:	2201      	movs	r2, #1
 800e66c:	9208      	str	r2, [sp, #32]
 800e66e:	e7f5      	b.n	800e65c <_dtoa_r+0x294>
 800e670:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e674:	46d1      	mov	r9, sl
 800e676:	4652      	mov	r2, sl
 800e678:	e7c6      	b.n	800e608 <_dtoa_r+0x240>
 800e67a:	3101      	adds	r1, #1
 800e67c:	6079      	str	r1, [r7, #4]
 800e67e:	0040      	lsls	r0, r0, #1
 800e680:	e7c6      	b.n	800e610 <_dtoa_r+0x248>
 800e682:	bf00      	nop
 800e684:	f3af 8000 	nop.w
 800e688:	636f4361 	.word	0x636f4361
 800e68c:	3fd287a7 	.word	0x3fd287a7
 800e690:	8b60c8b3 	.word	0x8b60c8b3
 800e694:	3fc68a28 	.word	0x3fc68a28
 800e698:	509f79fb 	.word	0x509f79fb
 800e69c:	3fd34413 	.word	0x3fd34413
 800e6a0:	08011435 	.word	0x08011435
 800e6a4:	0801144c 	.word	0x0801144c
 800e6a8:	7ff00000 	.word	0x7ff00000
 800e6ac:	08011431 	.word	0x08011431
 800e6b0:	08011428 	.word	0x08011428
 800e6b4:	08011405 	.word	0x08011405
 800e6b8:	08011548 	.word	0x08011548
 800e6bc:	080114ab 	.word	0x080114ab
 800e6c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e6c2:	9900      	ldr	r1, [sp, #0]
 800e6c4:	6011      	str	r1, [r2, #0]
 800e6c6:	f1b9 0f0e 	cmp.w	r9, #14
 800e6ca:	d872      	bhi.n	800e7b2 <_dtoa_r+0x3ea>
 800e6cc:	2c00      	cmp	r4, #0
 800e6ce:	d070      	beq.n	800e7b2 <_dtoa_r+0x3ea>
 800e6d0:	f1bb 0f00 	cmp.w	fp, #0
 800e6d4:	f340 80a6 	ble.w	800e824 <_dtoa_r+0x45c>
 800e6d8:	49ca      	ldr	r1, [pc, #808]	; (800ea04 <_dtoa_r+0x63c>)
 800e6da:	f00b 020f 	and.w	r2, fp, #15
 800e6de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e6e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e6e6:	ed92 7b00 	vldr	d7, [r2]
 800e6ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e6ee:	f000 808d 	beq.w	800e80c <_dtoa_r+0x444>
 800e6f2:	4ac5      	ldr	r2, [pc, #788]	; (800ea08 <_dtoa_r+0x640>)
 800e6f4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e6f8:	ed92 6b08 	vldr	d6, [r2, #32]
 800e6fc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e700:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e704:	f001 010f 	and.w	r1, r1, #15
 800e708:	2203      	movs	r2, #3
 800e70a:	48bf      	ldr	r0, [pc, #764]	; (800ea08 <_dtoa_r+0x640>)
 800e70c:	2900      	cmp	r1, #0
 800e70e:	d17f      	bne.n	800e810 <_dtoa_r+0x448>
 800e710:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e714:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e718:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e71c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e71e:	2900      	cmp	r1, #0
 800e720:	f000 80b2 	beq.w	800e888 <_dtoa_r+0x4c0>
 800e724:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e728:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e72c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e734:	f140 80a8 	bpl.w	800e888 <_dtoa_r+0x4c0>
 800e738:	f1b9 0f00 	cmp.w	r9, #0
 800e73c:	f000 80a4 	beq.w	800e888 <_dtoa_r+0x4c0>
 800e740:	f1ba 0f00 	cmp.w	sl, #0
 800e744:	dd31      	ble.n	800e7aa <_dtoa_r+0x3e2>
 800e746:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e74a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e74e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e752:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e756:	3201      	adds	r2, #1
 800e758:	4650      	mov	r0, sl
 800e75a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e75e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e762:	ee07 2a90 	vmov	s15, r2
 800e766:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e76a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e76e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e772:	9c03      	ldr	r4, [sp, #12]
 800e774:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e778:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e77c:	2800      	cmp	r0, #0
 800e77e:	f040 8086 	bne.w	800e88e <_dtoa_r+0x4c6>
 800e782:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e786:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e78a:	ec42 1b17 	vmov	d7, r1, r2
 800e78e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e796:	f300 8272 	bgt.w	800ec7e <_dtoa_r+0x8b6>
 800e79a:	eeb1 7b47 	vneg.f64	d7, d7
 800e79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a6:	f100 8267 	bmi.w	800ec78 <_dtoa_r+0x8b0>
 800e7aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e7ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e7b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e7b4:	2a00      	cmp	r2, #0
 800e7b6:	f2c0 8129 	blt.w	800ea0c <_dtoa_r+0x644>
 800e7ba:	f1bb 0f0e 	cmp.w	fp, #14
 800e7be:	f300 8125 	bgt.w	800ea0c <_dtoa_r+0x644>
 800e7c2:	4b90      	ldr	r3, [pc, #576]	; (800ea04 <_dtoa_r+0x63c>)
 800e7c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e7c8:	ed93 6b00 	vldr	d6, [r3]
 800e7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f280 80c3 	bge.w	800e95a <_dtoa_r+0x592>
 800e7d4:	f1b9 0f00 	cmp.w	r9, #0
 800e7d8:	f300 80bf 	bgt.w	800e95a <_dtoa_r+0x592>
 800e7dc:	f040 824c 	bne.w	800ec78 <_dtoa_r+0x8b0>
 800e7e0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e7e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e7e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f4:	464c      	mov	r4, r9
 800e7f6:	464f      	mov	r7, r9
 800e7f8:	f280 8222 	bge.w	800ec40 <_dtoa_r+0x878>
 800e7fc:	f8dd 8000 	ldr.w	r8, [sp]
 800e800:	2331      	movs	r3, #49	; 0x31
 800e802:	f808 3b01 	strb.w	r3, [r8], #1
 800e806:	f10b 0b01 	add.w	fp, fp, #1
 800e80a:	e21e      	b.n	800ec4a <_dtoa_r+0x882>
 800e80c:	2202      	movs	r2, #2
 800e80e:	e77c      	b.n	800e70a <_dtoa_r+0x342>
 800e810:	07cc      	lsls	r4, r1, #31
 800e812:	d504      	bpl.n	800e81e <_dtoa_r+0x456>
 800e814:	ed90 6b00 	vldr	d6, [r0]
 800e818:	3201      	adds	r2, #1
 800e81a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e81e:	1049      	asrs	r1, r1, #1
 800e820:	3008      	adds	r0, #8
 800e822:	e773      	b.n	800e70c <_dtoa_r+0x344>
 800e824:	d02e      	beq.n	800e884 <_dtoa_r+0x4bc>
 800e826:	f1cb 0100 	rsb	r1, fp, #0
 800e82a:	4a76      	ldr	r2, [pc, #472]	; (800ea04 <_dtoa_r+0x63c>)
 800e82c:	f001 000f 	and.w	r0, r1, #15
 800e830:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e834:	ed92 7b00 	vldr	d7, [r2]
 800e838:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e83c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e840:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e844:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e848:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e84c:	486e      	ldr	r0, [pc, #440]	; (800ea08 <_dtoa_r+0x640>)
 800e84e:	1109      	asrs	r1, r1, #4
 800e850:	2400      	movs	r4, #0
 800e852:	2202      	movs	r2, #2
 800e854:	b939      	cbnz	r1, 800e866 <_dtoa_r+0x49e>
 800e856:	2c00      	cmp	r4, #0
 800e858:	f43f af60 	beq.w	800e71c <_dtoa_r+0x354>
 800e85c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e864:	e75a      	b.n	800e71c <_dtoa_r+0x354>
 800e866:	07cf      	lsls	r7, r1, #31
 800e868:	d509      	bpl.n	800e87e <_dtoa_r+0x4b6>
 800e86a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e86e:	ed90 7b00 	vldr	d7, [r0]
 800e872:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e876:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e87a:	3201      	adds	r2, #1
 800e87c:	2401      	movs	r4, #1
 800e87e:	1049      	asrs	r1, r1, #1
 800e880:	3008      	adds	r0, #8
 800e882:	e7e7      	b.n	800e854 <_dtoa_r+0x48c>
 800e884:	2202      	movs	r2, #2
 800e886:	e749      	b.n	800e71c <_dtoa_r+0x354>
 800e888:	465f      	mov	r7, fp
 800e88a:	4648      	mov	r0, r9
 800e88c:	e765      	b.n	800e75a <_dtoa_r+0x392>
 800e88e:	ec42 1b17 	vmov	d7, r1, r2
 800e892:	4a5c      	ldr	r2, [pc, #368]	; (800ea04 <_dtoa_r+0x63c>)
 800e894:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e898:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e89c:	9a00      	ldr	r2, [sp, #0]
 800e89e:	1814      	adds	r4, r2, r0
 800e8a0:	9a08      	ldr	r2, [sp, #32]
 800e8a2:	b352      	cbz	r2, 800e8fa <_dtoa_r+0x532>
 800e8a4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e8a8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e8ac:	f8dd 8000 	ldr.w	r8, [sp]
 800e8b0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e8b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e8b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e8bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e8c0:	ee14 2a90 	vmov	r2, s9
 800e8c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e8c8:	3230      	adds	r2, #48	; 0x30
 800e8ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e8ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d6:	f808 2b01 	strb.w	r2, [r8], #1
 800e8da:	d439      	bmi.n	800e950 <_dtoa_r+0x588>
 800e8dc:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e8e0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e8:	d472      	bmi.n	800e9d0 <_dtoa_r+0x608>
 800e8ea:	45a0      	cmp	r8, r4
 800e8ec:	f43f af5d 	beq.w	800e7aa <_dtoa_r+0x3e2>
 800e8f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e8f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e8f8:	e7e0      	b.n	800e8bc <_dtoa_r+0x4f4>
 800e8fa:	f8dd 8000 	ldr.w	r8, [sp]
 800e8fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e902:	4621      	mov	r1, r4
 800e904:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e908:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e90c:	ee14 2a90 	vmov	r2, s9
 800e910:	3230      	adds	r2, #48	; 0x30
 800e912:	f808 2b01 	strb.w	r2, [r8], #1
 800e916:	45a0      	cmp	r8, r4
 800e918:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e91c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e920:	d118      	bne.n	800e954 <_dtoa_r+0x58c>
 800e922:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e926:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e92a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e932:	dc4d      	bgt.n	800e9d0 <_dtoa_r+0x608>
 800e934:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e938:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e940:	f57f af33 	bpl.w	800e7aa <_dtoa_r+0x3e2>
 800e944:	4688      	mov	r8, r1
 800e946:	3901      	subs	r1, #1
 800e948:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e94c:	2b30      	cmp	r3, #48	; 0x30
 800e94e:	d0f9      	beq.n	800e944 <_dtoa_r+0x57c>
 800e950:	46bb      	mov	fp, r7
 800e952:	e02a      	b.n	800e9aa <_dtoa_r+0x5e2>
 800e954:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e958:	e7d6      	b.n	800e908 <_dtoa_r+0x540>
 800e95a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e95e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e962:	f8dd 8000 	ldr.w	r8, [sp]
 800e966:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e96a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e96e:	ee15 3a10 	vmov	r3, s10
 800e972:	3330      	adds	r3, #48	; 0x30
 800e974:	f808 3b01 	strb.w	r3, [r8], #1
 800e978:	9b00      	ldr	r3, [sp, #0]
 800e97a:	eba8 0303 	sub.w	r3, r8, r3
 800e97e:	4599      	cmp	r9, r3
 800e980:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e984:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e988:	d133      	bne.n	800e9f2 <_dtoa_r+0x62a>
 800e98a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e98e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e996:	dc1a      	bgt.n	800e9ce <_dtoa_r+0x606>
 800e998:	eeb4 7b46 	vcmp.f64	d7, d6
 800e99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a0:	d103      	bne.n	800e9aa <_dtoa_r+0x5e2>
 800e9a2:	ee15 3a10 	vmov	r3, s10
 800e9a6:	07d9      	lsls	r1, r3, #31
 800e9a8:	d411      	bmi.n	800e9ce <_dtoa_r+0x606>
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f000 fad9 	bl	800ef64 <_Bfree>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e9b6:	f888 3000 	strb.w	r3, [r8]
 800e9ba:	f10b 0301 	add.w	r3, fp, #1
 800e9be:	6013      	str	r3, [r2, #0]
 800e9c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f43f ad4d 	beq.w	800e462 <_dtoa_r+0x9a>
 800e9c8:	f8c3 8000 	str.w	r8, [r3]
 800e9cc:	e549      	b.n	800e462 <_dtoa_r+0x9a>
 800e9ce:	465f      	mov	r7, fp
 800e9d0:	4643      	mov	r3, r8
 800e9d2:	4698      	mov	r8, r3
 800e9d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9d8:	2a39      	cmp	r2, #57	; 0x39
 800e9da:	d106      	bne.n	800e9ea <_dtoa_r+0x622>
 800e9dc:	9a00      	ldr	r2, [sp, #0]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d1f7      	bne.n	800e9d2 <_dtoa_r+0x60a>
 800e9e2:	9900      	ldr	r1, [sp, #0]
 800e9e4:	2230      	movs	r2, #48	; 0x30
 800e9e6:	3701      	adds	r7, #1
 800e9e8:	700a      	strb	r2, [r1, #0]
 800e9ea:	781a      	ldrb	r2, [r3, #0]
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	701a      	strb	r2, [r3, #0]
 800e9f0:	e7ae      	b.n	800e950 <_dtoa_r+0x588>
 800e9f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e9f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fe:	d1b2      	bne.n	800e966 <_dtoa_r+0x59e>
 800ea00:	e7d3      	b.n	800e9aa <_dtoa_r+0x5e2>
 800ea02:	bf00      	nop
 800ea04:	08011548 	.word	0x08011548
 800ea08:	08011520 	.word	0x08011520
 800ea0c:	9908      	ldr	r1, [sp, #32]
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	f000 80d1 	beq.w	800ebb6 <_dtoa_r+0x7ee>
 800ea14:	9907      	ldr	r1, [sp, #28]
 800ea16:	2901      	cmp	r1, #1
 800ea18:	f300 80b4 	bgt.w	800eb84 <_dtoa_r+0x7bc>
 800ea1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ea1e:	2900      	cmp	r1, #0
 800ea20:	f000 80ac 	beq.w	800eb7c <_dtoa_r+0x7b4>
 800ea24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ea28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ea2c:	461c      	mov	r4, r3
 800ea2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea30:	9b05      	ldr	r3, [sp, #20]
 800ea32:	4413      	add	r3, r2
 800ea34:	9305      	str	r3, [sp, #20]
 800ea36:	9b06      	ldr	r3, [sp, #24]
 800ea38:	2101      	movs	r1, #1
 800ea3a:	4413      	add	r3, r2
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	9306      	str	r3, [sp, #24]
 800ea40:	f000 fb4c 	bl	800f0dc <__i2b>
 800ea44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea46:	4607      	mov	r7, r0
 800ea48:	f1b8 0f00 	cmp.w	r8, #0
 800ea4c:	dd0d      	ble.n	800ea6a <_dtoa_r+0x6a2>
 800ea4e:	9a06      	ldr	r2, [sp, #24]
 800ea50:	2a00      	cmp	r2, #0
 800ea52:	dd0a      	ble.n	800ea6a <_dtoa_r+0x6a2>
 800ea54:	4542      	cmp	r2, r8
 800ea56:	9905      	ldr	r1, [sp, #20]
 800ea58:	bfa8      	it	ge
 800ea5a:	4642      	movge	r2, r8
 800ea5c:	1a89      	subs	r1, r1, r2
 800ea5e:	9105      	str	r1, [sp, #20]
 800ea60:	9906      	ldr	r1, [sp, #24]
 800ea62:	eba8 0802 	sub.w	r8, r8, r2
 800ea66:	1a8a      	subs	r2, r1, r2
 800ea68:	9206      	str	r2, [sp, #24]
 800ea6a:	b303      	cbz	r3, 800eaae <_dtoa_r+0x6e6>
 800ea6c:	9a08      	ldr	r2, [sp, #32]
 800ea6e:	2a00      	cmp	r2, #0
 800ea70:	f000 80a6 	beq.w	800ebc0 <_dtoa_r+0x7f8>
 800ea74:	2c00      	cmp	r4, #0
 800ea76:	dd13      	ble.n	800eaa0 <_dtoa_r+0x6d8>
 800ea78:	4639      	mov	r1, r7
 800ea7a:	4622      	mov	r2, r4
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	930c      	str	r3, [sp, #48]	; 0x30
 800ea80:	f000 fbe8 	bl	800f254 <__pow5mult>
 800ea84:	462a      	mov	r2, r5
 800ea86:	4601      	mov	r1, r0
 800ea88:	4607      	mov	r7, r0
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f000 fb3c 	bl	800f108 <__multiply>
 800ea90:	4629      	mov	r1, r5
 800ea92:	900a      	str	r0, [sp, #40]	; 0x28
 800ea94:	4630      	mov	r0, r6
 800ea96:	f000 fa65 	bl	800ef64 <_Bfree>
 800ea9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea9e:	4615      	mov	r5, r2
 800eaa0:	1b1a      	subs	r2, r3, r4
 800eaa2:	d004      	beq.n	800eaae <_dtoa_r+0x6e6>
 800eaa4:	4629      	mov	r1, r5
 800eaa6:	4630      	mov	r0, r6
 800eaa8:	f000 fbd4 	bl	800f254 <__pow5mult>
 800eaac:	4605      	mov	r5, r0
 800eaae:	2101      	movs	r1, #1
 800eab0:	4630      	mov	r0, r6
 800eab2:	f000 fb13 	bl	800f0dc <__i2b>
 800eab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	4604      	mov	r4, r0
 800eabc:	f340 8082 	ble.w	800ebc4 <_dtoa_r+0x7fc>
 800eac0:	461a      	mov	r2, r3
 800eac2:	4601      	mov	r1, r0
 800eac4:	4630      	mov	r0, r6
 800eac6:	f000 fbc5 	bl	800f254 <__pow5mult>
 800eaca:	9b07      	ldr	r3, [sp, #28]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	4604      	mov	r4, r0
 800ead0:	dd7b      	ble.n	800ebca <_dtoa_r+0x802>
 800ead2:	2300      	movs	r3, #0
 800ead4:	930a      	str	r3, [sp, #40]	; 0x28
 800ead6:	6922      	ldr	r2, [r4, #16]
 800ead8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eadc:	6910      	ldr	r0, [r2, #16]
 800eade:	f000 faad 	bl	800f03c <__hi0bits>
 800eae2:	f1c0 0020 	rsb	r0, r0, #32
 800eae6:	9b06      	ldr	r3, [sp, #24]
 800eae8:	4418      	add	r0, r3
 800eaea:	f010 001f 	ands.w	r0, r0, #31
 800eaee:	f000 808d 	beq.w	800ec0c <_dtoa_r+0x844>
 800eaf2:	f1c0 0220 	rsb	r2, r0, #32
 800eaf6:	2a04      	cmp	r2, #4
 800eaf8:	f340 8086 	ble.w	800ec08 <_dtoa_r+0x840>
 800eafc:	f1c0 001c 	rsb	r0, r0, #28
 800eb00:	9b05      	ldr	r3, [sp, #20]
 800eb02:	4403      	add	r3, r0
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	9b06      	ldr	r3, [sp, #24]
 800eb08:	4403      	add	r3, r0
 800eb0a:	4480      	add	r8, r0
 800eb0c:	9306      	str	r3, [sp, #24]
 800eb0e:	9b05      	ldr	r3, [sp, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	dd05      	ble.n	800eb20 <_dtoa_r+0x758>
 800eb14:	4629      	mov	r1, r5
 800eb16:	461a      	mov	r2, r3
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f000 fbf5 	bl	800f308 <__lshift>
 800eb1e:	4605      	mov	r5, r0
 800eb20:	9b06      	ldr	r3, [sp, #24]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	dd05      	ble.n	800eb32 <_dtoa_r+0x76a>
 800eb26:	4621      	mov	r1, r4
 800eb28:	461a      	mov	r2, r3
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f000 fbec 	bl	800f308 <__lshift>
 800eb30:	4604      	mov	r4, r0
 800eb32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d06b      	beq.n	800ec10 <_dtoa_r+0x848>
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f000 fc50 	bl	800f3e0 <__mcmp>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	da65      	bge.n	800ec10 <_dtoa_r+0x848>
 800eb44:	2300      	movs	r3, #0
 800eb46:	4629      	mov	r1, r5
 800eb48:	220a      	movs	r2, #10
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f000 fa2c 	bl	800efa8 <__multadd>
 800eb50:	9b08      	ldr	r3, [sp, #32]
 800eb52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb56:	4605      	mov	r5, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 8192 	beq.w	800ee82 <_dtoa_r+0xaba>
 800eb5e:	4639      	mov	r1, r7
 800eb60:	2300      	movs	r3, #0
 800eb62:	220a      	movs	r2, #10
 800eb64:	4630      	mov	r0, r6
 800eb66:	f000 fa1f 	bl	800efa8 <__multadd>
 800eb6a:	f1ba 0f00 	cmp.w	sl, #0
 800eb6e:	4607      	mov	r7, r0
 800eb70:	f300 808e 	bgt.w	800ec90 <_dtoa_r+0x8c8>
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	dc51      	bgt.n	800ec1e <_dtoa_r+0x856>
 800eb7a:	e089      	b.n	800ec90 <_dtoa_r+0x8c8>
 800eb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb82:	e751      	b.n	800ea28 <_dtoa_r+0x660>
 800eb84:	f109 34ff 	add.w	r4, r9, #4294967295
 800eb88:	42a3      	cmp	r3, r4
 800eb8a:	bfbf      	itttt	lt
 800eb8c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800eb8e:	1ae3      	sublt	r3, r4, r3
 800eb90:	18d2      	addlt	r2, r2, r3
 800eb92:	4613      	movlt	r3, r2
 800eb94:	bfb7      	itett	lt
 800eb96:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eb98:	1b1c      	subge	r4, r3, r4
 800eb9a:	4623      	movlt	r3, r4
 800eb9c:	2400      	movlt	r4, #0
 800eb9e:	f1b9 0f00 	cmp.w	r9, #0
 800eba2:	bfb5      	itete	lt
 800eba4:	9a05      	ldrlt	r2, [sp, #20]
 800eba6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800ebaa:	eba2 0809 	sublt.w	r8, r2, r9
 800ebae:	464a      	movge	r2, r9
 800ebb0:	bfb8      	it	lt
 800ebb2:	2200      	movlt	r2, #0
 800ebb4:	e73b      	b.n	800ea2e <_dtoa_r+0x666>
 800ebb6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ebba:	9f08      	ldr	r7, [sp, #32]
 800ebbc:	461c      	mov	r4, r3
 800ebbe:	e743      	b.n	800ea48 <_dtoa_r+0x680>
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	e76f      	b.n	800eaa4 <_dtoa_r+0x6dc>
 800ebc4:	9b07      	ldr	r3, [sp, #28]
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	dc18      	bgt.n	800ebfc <_dtoa_r+0x834>
 800ebca:	9b02      	ldr	r3, [sp, #8]
 800ebcc:	b9b3      	cbnz	r3, 800ebfc <_dtoa_r+0x834>
 800ebce:	9b03      	ldr	r3, [sp, #12]
 800ebd0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ebd4:	b9a2      	cbnz	r2, 800ec00 <_dtoa_r+0x838>
 800ebd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ebda:	0d12      	lsrs	r2, r2, #20
 800ebdc:	0512      	lsls	r2, r2, #20
 800ebde:	b18a      	cbz	r2, 800ec04 <_dtoa_r+0x83c>
 800ebe0:	9b05      	ldr	r3, [sp, #20]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	9305      	str	r3, [sp, #20]
 800ebe6:	9b06      	ldr	r3, [sp, #24]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	9306      	str	r3, [sp, #24]
 800ebec:	2301      	movs	r3, #1
 800ebee:	930a      	str	r3, [sp, #40]	; 0x28
 800ebf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f47f af6f 	bne.w	800ead6 <_dtoa_r+0x70e>
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	e774      	b.n	800eae6 <_dtoa_r+0x71e>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	e7f6      	b.n	800ebee <_dtoa_r+0x826>
 800ec00:	9b02      	ldr	r3, [sp, #8]
 800ec02:	e7f4      	b.n	800ebee <_dtoa_r+0x826>
 800ec04:	920a      	str	r2, [sp, #40]	; 0x28
 800ec06:	e7f3      	b.n	800ebf0 <_dtoa_r+0x828>
 800ec08:	d081      	beq.n	800eb0e <_dtoa_r+0x746>
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	301c      	adds	r0, #28
 800ec0e:	e777      	b.n	800eb00 <_dtoa_r+0x738>
 800ec10:	f1b9 0f00 	cmp.w	r9, #0
 800ec14:	dc37      	bgt.n	800ec86 <_dtoa_r+0x8be>
 800ec16:	9b07      	ldr	r3, [sp, #28]
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	dd34      	ble.n	800ec86 <_dtoa_r+0x8be>
 800ec1c:	46ca      	mov	sl, r9
 800ec1e:	f1ba 0f00 	cmp.w	sl, #0
 800ec22:	d10d      	bne.n	800ec40 <_dtoa_r+0x878>
 800ec24:	4621      	mov	r1, r4
 800ec26:	4653      	mov	r3, sl
 800ec28:	2205      	movs	r2, #5
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f000 f9bc 	bl	800efa8 <__multadd>
 800ec30:	4601      	mov	r1, r0
 800ec32:	4604      	mov	r4, r0
 800ec34:	4628      	mov	r0, r5
 800ec36:	f000 fbd3 	bl	800f3e0 <__mcmp>
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	f73f adde 	bgt.w	800e7fc <_dtoa_r+0x434>
 800ec40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec42:	f8dd 8000 	ldr.w	r8, [sp]
 800ec46:	ea6f 0b03 	mvn.w	fp, r3
 800ec4a:	f04f 0900 	mov.w	r9, #0
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 f987 	bl	800ef64 <_Bfree>
 800ec56:	2f00      	cmp	r7, #0
 800ec58:	f43f aea7 	beq.w	800e9aa <_dtoa_r+0x5e2>
 800ec5c:	f1b9 0f00 	cmp.w	r9, #0
 800ec60:	d005      	beq.n	800ec6e <_dtoa_r+0x8a6>
 800ec62:	45b9      	cmp	r9, r7
 800ec64:	d003      	beq.n	800ec6e <_dtoa_r+0x8a6>
 800ec66:	4649      	mov	r1, r9
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f000 f97b 	bl	800ef64 <_Bfree>
 800ec6e:	4639      	mov	r1, r7
 800ec70:	4630      	mov	r0, r6
 800ec72:	f000 f977 	bl	800ef64 <_Bfree>
 800ec76:	e698      	b.n	800e9aa <_dtoa_r+0x5e2>
 800ec78:	2400      	movs	r4, #0
 800ec7a:	4627      	mov	r7, r4
 800ec7c:	e7e0      	b.n	800ec40 <_dtoa_r+0x878>
 800ec7e:	46bb      	mov	fp, r7
 800ec80:	4604      	mov	r4, r0
 800ec82:	4607      	mov	r7, r0
 800ec84:	e5ba      	b.n	800e7fc <_dtoa_r+0x434>
 800ec86:	9b08      	ldr	r3, [sp, #32]
 800ec88:	46ca      	mov	sl, r9
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f000 8100 	beq.w	800ee90 <_dtoa_r+0xac8>
 800ec90:	f1b8 0f00 	cmp.w	r8, #0
 800ec94:	dd05      	ble.n	800eca2 <_dtoa_r+0x8da>
 800ec96:	4639      	mov	r1, r7
 800ec98:	4642      	mov	r2, r8
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f000 fb34 	bl	800f308 <__lshift>
 800eca0:	4607      	mov	r7, r0
 800eca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d05d      	beq.n	800ed64 <_dtoa_r+0x99c>
 800eca8:	6879      	ldr	r1, [r7, #4]
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f000 f91a 	bl	800eee4 <_Balloc>
 800ecb0:	4680      	mov	r8, r0
 800ecb2:	b928      	cbnz	r0, 800ecc0 <_dtoa_r+0x8f8>
 800ecb4:	4b82      	ldr	r3, [pc, #520]	; (800eec0 <_dtoa_r+0xaf8>)
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ecbc:	f7ff bb9a 	b.w	800e3f4 <_dtoa_r+0x2c>
 800ecc0:	693a      	ldr	r2, [r7, #16]
 800ecc2:	3202      	adds	r2, #2
 800ecc4:	0092      	lsls	r2, r2, #2
 800ecc6:	f107 010c 	add.w	r1, r7, #12
 800ecca:	300c      	adds	r0, #12
 800eccc:	f7fe fe42 	bl	800d954 <memcpy>
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	4641      	mov	r1, r8
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	f000 fb17 	bl	800f308 <__lshift>
 800ecda:	9b00      	ldr	r3, [sp, #0]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	9305      	str	r3, [sp, #20]
 800ece0:	9b00      	ldr	r3, [sp, #0]
 800ece2:	4453      	add	r3, sl
 800ece4:	9309      	str	r3, [sp, #36]	; 0x24
 800ece6:	9b02      	ldr	r3, [sp, #8]
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	46b9      	mov	r9, r7
 800ecee:	9308      	str	r3, [sp, #32]
 800ecf0:	4607      	mov	r7, r0
 800ecf2:	9b05      	ldr	r3, [sp, #20]
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	9302      	str	r3, [sp, #8]
 800ecfc:	f7ff fad6 	bl	800e2ac <quorem>
 800ed00:	4603      	mov	r3, r0
 800ed02:	3330      	adds	r3, #48	; 0x30
 800ed04:	9006      	str	r0, [sp, #24]
 800ed06:	4649      	mov	r1, r9
 800ed08:	4628      	mov	r0, r5
 800ed0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed0c:	f000 fb68 	bl	800f3e0 <__mcmp>
 800ed10:	463a      	mov	r2, r7
 800ed12:	4682      	mov	sl, r0
 800ed14:	4621      	mov	r1, r4
 800ed16:	4630      	mov	r0, r6
 800ed18:	f000 fb7e 	bl	800f418 <__mdiff>
 800ed1c:	68c2      	ldr	r2, [r0, #12]
 800ed1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed20:	4680      	mov	r8, r0
 800ed22:	bb0a      	cbnz	r2, 800ed68 <_dtoa_r+0x9a0>
 800ed24:	4601      	mov	r1, r0
 800ed26:	4628      	mov	r0, r5
 800ed28:	f000 fb5a 	bl	800f3e0 <__mcmp>
 800ed2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed2e:	4602      	mov	r2, r0
 800ed30:	4641      	mov	r1, r8
 800ed32:	4630      	mov	r0, r6
 800ed34:	920e      	str	r2, [sp, #56]	; 0x38
 800ed36:	930a      	str	r3, [sp, #40]	; 0x28
 800ed38:	f000 f914 	bl	800ef64 <_Bfree>
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ed44:	ea43 0102 	orr.w	r1, r3, r2
 800ed48:	9b08      	ldr	r3, [sp, #32]
 800ed4a:	430b      	orrs	r3, r1
 800ed4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed4e:	d10d      	bne.n	800ed6c <_dtoa_r+0x9a4>
 800ed50:	2b39      	cmp	r3, #57	; 0x39
 800ed52:	d029      	beq.n	800eda8 <_dtoa_r+0x9e0>
 800ed54:	f1ba 0f00 	cmp.w	sl, #0
 800ed58:	dd01      	ble.n	800ed5e <_dtoa_r+0x996>
 800ed5a:	9b06      	ldr	r3, [sp, #24]
 800ed5c:	3331      	adds	r3, #49	; 0x31
 800ed5e:	9a02      	ldr	r2, [sp, #8]
 800ed60:	7013      	strb	r3, [r2, #0]
 800ed62:	e774      	b.n	800ec4e <_dtoa_r+0x886>
 800ed64:	4638      	mov	r0, r7
 800ed66:	e7b8      	b.n	800ecda <_dtoa_r+0x912>
 800ed68:	2201      	movs	r2, #1
 800ed6a:	e7e1      	b.n	800ed30 <_dtoa_r+0x968>
 800ed6c:	f1ba 0f00 	cmp.w	sl, #0
 800ed70:	db06      	blt.n	800ed80 <_dtoa_r+0x9b8>
 800ed72:	9907      	ldr	r1, [sp, #28]
 800ed74:	ea41 0a0a 	orr.w	sl, r1, sl
 800ed78:	9908      	ldr	r1, [sp, #32]
 800ed7a:	ea5a 0101 	orrs.w	r1, sl, r1
 800ed7e:	d120      	bne.n	800edc2 <_dtoa_r+0x9fa>
 800ed80:	2a00      	cmp	r2, #0
 800ed82:	ddec      	ble.n	800ed5e <_dtoa_r+0x996>
 800ed84:	4629      	mov	r1, r5
 800ed86:	2201      	movs	r2, #1
 800ed88:	4630      	mov	r0, r6
 800ed8a:	9305      	str	r3, [sp, #20]
 800ed8c:	f000 fabc 	bl	800f308 <__lshift>
 800ed90:	4621      	mov	r1, r4
 800ed92:	4605      	mov	r5, r0
 800ed94:	f000 fb24 	bl	800f3e0 <__mcmp>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	9b05      	ldr	r3, [sp, #20]
 800ed9c:	dc02      	bgt.n	800eda4 <_dtoa_r+0x9dc>
 800ed9e:	d1de      	bne.n	800ed5e <_dtoa_r+0x996>
 800eda0:	07da      	lsls	r2, r3, #31
 800eda2:	d5dc      	bpl.n	800ed5e <_dtoa_r+0x996>
 800eda4:	2b39      	cmp	r3, #57	; 0x39
 800eda6:	d1d8      	bne.n	800ed5a <_dtoa_r+0x992>
 800eda8:	9a02      	ldr	r2, [sp, #8]
 800edaa:	2339      	movs	r3, #57	; 0x39
 800edac:	7013      	strb	r3, [r2, #0]
 800edae:	4643      	mov	r3, r8
 800edb0:	4698      	mov	r8, r3
 800edb2:	3b01      	subs	r3, #1
 800edb4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800edb8:	2a39      	cmp	r2, #57	; 0x39
 800edba:	d051      	beq.n	800ee60 <_dtoa_r+0xa98>
 800edbc:	3201      	adds	r2, #1
 800edbe:	701a      	strb	r2, [r3, #0]
 800edc0:	e745      	b.n	800ec4e <_dtoa_r+0x886>
 800edc2:	2a00      	cmp	r2, #0
 800edc4:	dd03      	ble.n	800edce <_dtoa_r+0xa06>
 800edc6:	2b39      	cmp	r3, #57	; 0x39
 800edc8:	d0ee      	beq.n	800eda8 <_dtoa_r+0x9e0>
 800edca:	3301      	adds	r3, #1
 800edcc:	e7c7      	b.n	800ed5e <_dtoa_r+0x996>
 800edce:	9a05      	ldr	r2, [sp, #20]
 800edd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edd2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800edd6:	428a      	cmp	r2, r1
 800edd8:	d02b      	beq.n	800ee32 <_dtoa_r+0xa6a>
 800edda:	4629      	mov	r1, r5
 800eddc:	2300      	movs	r3, #0
 800edde:	220a      	movs	r2, #10
 800ede0:	4630      	mov	r0, r6
 800ede2:	f000 f8e1 	bl	800efa8 <__multadd>
 800ede6:	45b9      	cmp	r9, r7
 800ede8:	4605      	mov	r5, r0
 800edea:	f04f 0300 	mov.w	r3, #0
 800edee:	f04f 020a 	mov.w	r2, #10
 800edf2:	4649      	mov	r1, r9
 800edf4:	4630      	mov	r0, r6
 800edf6:	d107      	bne.n	800ee08 <_dtoa_r+0xa40>
 800edf8:	f000 f8d6 	bl	800efa8 <__multadd>
 800edfc:	4681      	mov	r9, r0
 800edfe:	4607      	mov	r7, r0
 800ee00:	9b05      	ldr	r3, [sp, #20]
 800ee02:	3301      	adds	r3, #1
 800ee04:	9305      	str	r3, [sp, #20]
 800ee06:	e774      	b.n	800ecf2 <_dtoa_r+0x92a>
 800ee08:	f000 f8ce 	bl	800efa8 <__multadd>
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	4681      	mov	r9, r0
 800ee10:	2300      	movs	r3, #0
 800ee12:	220a      	movs	r2, #10
 800ee14:	4630      	mov	r0, r6
 800ee16:	f000 f8c7 	bl	800efa8 <__multadd>
 800ee1a:	4607      	mov	r7, r0
 800ee1c:	e7f0      	b.n	800ee00 <_dtoa_r+0xa38>
 800ee1e:	f1ba 0f00 	cmp.w	sl, #0
 800ee22:	9a00      	ldr	r2, [sp, #0]
 800ee24:	bfcc      	ite	gt
 800ee26:	46d0      	movgt	r8, sl
 800ee28:	f04f 0801 	movle.w	r8, #1
 800ee2c:	4490      	add	r8, r2
 800ee2e:	f04f 0900 	mov.w	r9, #0
 800ee32:	4629      	mov	r1, r5
 800ee34:	2201      	movs	r2, #1
 800ee36:	4630      	mov	r0, r6
 800ee38:	9302      	str	r3, [sp, #8]
 800ee3a:	f000 fa65 	bl	800f308 <__lshift>
 800ee3e:	4621      	mov	r1, r4
 800ee40:	4605      	mov	r5, r0
 800ee42:	f000 facd 	bl	800f3e0 <__mcmp>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	dcb1      	bgt.n	800edae <_dtoa_r+0x9e6>
 800ee4a:	d102      	bne.n	800ee52 <_dtoa_r+0xa8a>
 800ee4c:	9b02      	ldr	r3, [sp, #8]
 800ee4e:	07db      	lsls	r3, r3, #31
 800ee50:	d4ad      	bmi.n	800edae <_dtoa_r+0x9e6>
 800ee52:	4643      	mov	r3, r8
 800ee54:	4698      	mov	r8, r3
 800ee56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee5a:	2a30      	cmp	r2, #48	; 0x30
 800ee5c:	d0fa      	beq.n	800ee54 <_dtoa_r+0xa8c>
 800ee5e:	e6f6      	b.n	800ec4e <_dtoa_r+0x886>
 800ee60:	9a00      	ldr	r2, [sp, #0]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d1a4      	bne.n	800edb0 <_dtoa_r+0x9e8>
 800ee66:	f10b 0b01 	add.w	fp, fp, #1
 800ee6a:	2331      	movs	r3, #49	; 0x31
 800ee6c:	e778      	b.n	800ed60 <_dtoa_r+0x998>
 800ee6e:	4b15      	ldr	r3, [pc, #84]	; (800eec4 <_dtoa_r+0xafc>)
 800ee70:	f7ff bb12 	b.w	800e498 <_dtoa_r+0xd0>
 800ee74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f47f aaee 	bne.w	800e458 <_dtoa_r+0x90>
 800ee7c:	4b12      	ldr	r3, [pc, #72]	; (800eec8 <_dtoa_r+0xb00>)
 800ee7e:	f7ff bb0b 	b.w	800e498 <_dtoa_r+0xd0>
 800ee82:	f1ba 0f00 	cmp.w	sl, #0
 800ee86:	dc03      	bgt.n	800ee90 <_dtoa_r+0xac8>
 800ee88:	9b07      	ldr	r3, [sp, #28]
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	f73f aec7 	bgt.w	800ec1e <_dtoa_r+0x856>
 800ee90:	f8dd 8000 	ldr.w	r8, [sp]
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f7ff fa08 	bl	800e2ac <quorem>
 800ee9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800eea0:	f808 3b01 	strb.w	r3, [r8], #1
 800eea4:	9a00      	ldr	r2, [sp, #0]
 800eea6:	eba8 0202 	sub.w	r2, r8, r2
 800eeaa:	4592      	cmp	sl, r2
 800eeac:	ddb7      	ble.n	800ee1e <_dtoa_r+0xa56>
 800eeae:	4629      	mov	r1, r5
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	220a      	movs	r2, #10
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	f000 f877 	bl	800efa8 <__multadd>
 800eeba:	4605      	mov	r5, r0
 800eebc:	e7ea      	b.n	800ee94 <_dtoa_r+0xacc>
 800eebe:	bf00      	nop
 800eec0:	080114ab 	.word	0x080114ab
 800eec4:	08011404 	.word	0x08011404
 800eec8:	08011428 	.word	0x08011428

0800eecc <_localeconv_r>:
 800eecc:	4800      	ldr	r0, [pc, #0]	; (800eed0 <_localeconv_r+0x4>)
 800eece:	4770      	bx	lr
 800eed0:	24000164 	.word	0x24000164

0800eed4 <malloc>:
 800eed4:	4b02      	ldr	r3, [pc, #8]	; (800eee0 <malloc+0xc>)
 800eed6:	4601      	mov	r1, r0
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	f000 bbe1 	b.w	800f6a0 <_malloc_r>
 800eede:	bf00      	nop
 800eee0:	24000010 	.word	0x24000010

0800eee4 <_Balloc>:
 800eee4:	b570      	push	{r4, r5, r6, lr}
 800eee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eee8:	4604      	mov	r4, r0
 800eeea:	460d      	mov	r5, r1
 800eeec:	b976      	cbnz	r6, 800ef0c <_Balloc+0x28>
 800eeee:	2010      	movs	r0, #16
 800eef0:	f7ff fff0 	bl	800eed4 <malloc>
 800eef4:	4602      	mov	r2, r0
 800eef6:	6260      	str	r0, [r4, #36]	; 0x24
 800eef8:	b920      	cbnz	r0, 800ef04 <_Balloc+0x20>
 800eefa:	4b18      	ldr	r3, [pc, #96]	; (800ef5c <_Balloc+0x78>)
 800eefc:	4818      	ldr	r0, [pc, #96]	; (800ef60 <_Balloc+0x7c>)
 800eefe:	2166      	movs	r1, #102	; 0x66
 800ef00:	f000 fd94 	bl	800fa2c <__assert_func>
 800ef04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef08:	6006      	str	r6, [r0, #0]
 800ef0a:	60c6      	str	r6, [r0, #12]
 800ef0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef0e:	68f3      	ldr	r3, [r6, #12]
 800ef10:	b183      	cbz	r3, 800ef34 <_Balloc+0x50>
 800ef12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef1a:	b9b8      	cbnz	r0, 800ef4c <_Balloc+0x68>
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ef22:	1d72      	adds	r2, r6, #5
 800ef24:	0092      	lsls	r2, r2, #2
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 fb5a 	bl	800f5e0 <_calloc_r>
 800ef2c:	b160      	cbz	r0, 800ef48 <_Balloc+0x64>
 800ef2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef32:	e00e      	b.n	800ef52 <_Balloc+0x6e>
 800ef34:	2221      	movs	r2, #33	; 0x21
 800ef36:	2104      	movs	r1, #4
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f000 fb51 	bl	800f5e0 <_calloc_r>
 800ef3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef40:	60f0      	str	r0, [r6, #12]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e4      	bne.n	800ef12 <_Balloc+0x2e>
 800ef48:	2000      	movs	r0, #0
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}
 800ef4c:	6802      	ldr	r2, [r0, #0]
 800ef4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef52:	2300      	movs	r3, #0
 800ef54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef58:	e7f7      	b.n	800ef4a <_Balloc+0x66>
 800ef5a:	bf00      	nop
 800ef5c:	08011435 	.word	0x08011435
 800ef60:	080114bc 	.word	0x080114bc

0800ef64 <_Bfree>:
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef68:	4605      	mov	r5, r0
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	b976      	cbnz	r6, 800ef8c <_Bfree+0x28>
 800ef6e:	2010      	movs	r0, #16
 800ef70:	f7ff ffb0 	bl	800eed4 <malloc>
 800ef74:	4602      	mov	r2, r0
 800ef76:	6268      	str	r0, [r5, #36]	; 0x24
 800ef78:	b920      	cbnz	r0, 800ef84 <_Bfree+0x20>
 800ef7a:	4b09      	ldr	r3, [pc, #36]	; (800efa0 <_Bfree+0x3c>)
 800ef7c:	4809      	ldr	r0, [pc, #36]	; (800efa4 <_Bfree+0x40>)
 800ef7e:	218a      	movs	r1, #138	; 0x8a
 800ef80:	f000 fd54 	bl	800fa2c <__assert_func>
 800ef84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef88:	6006      	str	r6, [r0, #0]
 800ef8a:	60c6      	str	r6, [r0, #12]
 800ef8c:	b13c      	cbz	r4, 800ef9e <_Bfree+0x3a>
 800ef8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef90:	6862      	ldr	r2, [r4, #4]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef98:	6021      	str	r1, [r4, #0]
 800ef9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef9e:	bd70      	pop	{r4, r5, r6, pc}
 800efa0:	08011435 	.word	0x08011435
 800efa4:	080114bc 	.word	0x080114bc

0800efa8 <__multadd>:
 800efa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efac:	690e      	ldr	r6, [r1, #16]
 800efae:	4607      	mov	r7, r0
 800efb0:	4698      	mov	r8, r3
 800efb2:	460c      	mov	r4, r1
 800efb4:	f101 0014 	add.w	r0, r1, #20
 800efb8:	2300      	movs	r3, #0
 800efba:	6805      	ldr	r5, [r0, #0]
 800efbc:	b2a9      	uxth	r1, r5
 800efbe:	fb02 8101 	mla	r1, r2, r1, r8
 800efc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800efc6:	0c2d      	lsrs	r5, r5, #16
 800efc8:	fb02 c505 	mla	r5, r2, r5, ip
 800efcc:	b289      	uxth	r1, r1
 800efce:	3301      	adds	r3, #1
 800efd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800efd4:	429e      	cmp	r6, r3
 800efd6:	f840 1b04 	str.w	r1, [r0], #4
 800efda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800efde:	dcec      	bgt.n	800efba <__multadd+0x12>
 800efe0:	f1b8 0f00 	cmp.w	r8, #0
 800efe4:	d022      	beq.n	800f02c <__multadd+0x84>
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	42b3      	cmp	r3, r6
 800efea:	dc19      	bgt.n	800f020 <__multadd+0x78>
 800efec:	6861      	ldr	r1, [r4, #4]
 800efee:	4638      	mov	r0, r7
 800eff0:	3101      	adds	r1, #1
 800eff2:	f7ff ff77 	bl	800eee4 <_Balloc>
 800eff6:	4605      	mov	r5, r0
 800eff8:	b928      	cbnz	r0, 800f006 <__multadd+0x5e>
 800effa:	4602      	mov	r2, r0
 800effc:	4b0d      	ldr	r3, [pc, #52]	; (800f034 <__multadd+0x8c>)
 800effe:	480e      	ldr	r0, [pc, #56]	; (800f038 <__multadd+0x90>)
 800f000:	21b5      	movs	r1, #181	; 0xb5
 800f002:	f000 fd13 	bl	800fa2c <__assert_func>
 800f006:	6922      	ldr	r2, [r4, #16]
 800f008:	3202      	adds	r2, #2
 800f00a:	f104 010c 	add.w	r1, r4, #12
 800f00e:	0092      	lsls	r2, r2, #2
 800f010:	300c      	adds	r0, #12
 800f012:	f7fe fc9f 	bl	800d954 <memcpy>
 800f016:	4621      	mov	r1, r4
 800f018:	4638      	mov	r0, r7
 800f01a:	f7ff ffa3 	bl	800ef64 <_Bfree>
 800f01e:	462c      	mov	r4, r5
 800f020:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f024:	3601      	adds	r6, #1
 800f026:	f8c3 8014 	str.w	r8, [r3, #20]
 800f02a:	6126      	str	r6, [r4, #16]
 800f02c:	4620      	mov	r0, r4
 800f02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f032:	bf00      	nop
 800f034:	080114ab 	.word	0x080114ab
 800f038:	080114bc 	.word	0x080114bc

0800f03c <__hi0bits>:
 800f03c:	0c03      	lsrs	r3, r0, #16
 800f03e:	041b      	lsls	r3, r3, #16
 800f040:	b9d3      	cbnz	r3, 800f078 <__hi0bits+0x3c>
 800f042:	0400      	lsls	r0, r0, #16
 800f044:	2310      	movs	r3, #16
 800f046:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f04a:	bf04      	itt	eq
 800f04c:	0200      	lsleq	r0, r0, #8
 800f04e:	3308      	addeq	r3, #8
 800f050:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f054:	bf04      	itt	eq
 800f056:	0100      	lsleq	r0, r0, #4
 800f058:	3304      	addeq	r3, #4
 800f05a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f05e:	bf04      	itt	eq
 800f060:	0080      	lsleq	r0, r0, #2
 800f062:	3302      	addeq	r3, #2
 800f064:	2800      	cmp	r0, #0
 800f066:	db05      	blt.n	800f074 <__hi0bits+0x38>
 800f068:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f06c:	f103 0301 	add.w	r3, r3, #1
 800f070:	bf08      	it	eq
 800f072:	2320      	moveq	r3, #32
 800f074:	4618      	mov	r0, r3
 800f076:	4770      	bx	lr
 800f078:	2300      	movs	r3, #0
 800f07a:	e7e4      	b.n	800f046 <__hi0bits+0xa>

0800f07c <__lo0bits>:
 800f07c:	6803      	ldr	r3, [r0, #0]
 800f07e:	f013 0207 	ands.w	r2, r3, #7
 800f082:	4601      	mov	r1, r0
 800f084:	d00b      	beq.n	800f09e <__lo0bits+0x22>
 800f086:	07da      	lsls	r2, r3, #31
 800f088:	d424      	bmi.n	800f0d4 <__lo0bits+0x58>
 800f08a:	0798      	lsls	r0, r3, #30
 800f08c:	bf49      	itett	mi
 800f08e:	085b      	lsrmi	r3, r3, #1
 800f090:	089b      	lsrpl	r3, r3, #2
 800f092:	2001      	movmi	r0, #1
 800f094:	600b      	strmi	r3, [r1, #0]
 800f096:	bf5c      	itt	pl
 800f098:	600b      	strpl	r3, [r1, #0]
 800f09a:	2002      	movpl	r0, #2
 800f09c:	4770      	bx	lr
 800f09e:	b298      	uxth	r0, r3
 800f0a0:	b9b0      	cbnz	r0, 800f0d0 <__lo0bits+0x54>
 800f0a2:	0c1b      	lsrs	r3, r3, #16
 800f0a4:	2010      	movs	r0, #16
 800f0a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f0aa:	bf04      	itt	eq
 800f0ac:	0a1b      	lsreq	r3, r3, #8
 800f0ae:	3008      	addeq	r0, #8
 800f0b0:	071a      	lsls	r2, r3, #28
 800f0b2:	bf04      	itt	eq
 800f0b4:	091b      	lsreq	r3, r3, #4
 800f0b6:	3004      	addeq	r0, #4
 800f0b8:	079a      	lsls	r2, r3, #30
 800f0ba:	bf04      	itt	eq
 800f0bc:	089b      	lsreq	r3, r3, #2
 800f0be:	3002      	addeq	r0, #2
 800f0c0:	07da      	lsls	r2, r3, #31
 800f0c2:	d403      	bmi.n	800f0cc <__lo0bits+0x50>
 800f0c4:	085b      	lsrs	r3, r3, #1
 800f0c6:	f100 0001 	add.w	r0, r0, #1
 800f0ca:	d005      	beq.n	800f0d8 <__lo0bits+0x5c>
 800f0cc:	600b      	str	r3, [r1, #0]
 800f0ce:	4770      	bx	lr
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	e7e8      	b.n	800f0a6 <__lo0bits+0x2a>
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	4770      	bx	lr
 800f0d8:	2020      	movs	r0, #32
 800f0da:	4770      	bx	lr

0800f0dc <__i2b>:
 800f0dc:	b510      	push	{r4, lr}
 800f0de:	460c      	mov	r4, r1
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	f7ff feff 	bl	800eee4 <_Balloc>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	b928      	cbnz	r0, 800f0f6 <__i2b+0x1a>
 800f0ea:	4b05      	ldr	r3, [pc, #20]	; (800f100 <__i2b+0x24>)
 800f0ec:	4805      	ldr	r0, [pc, #20]	; (800f104 <__i2b+0x28>)
 800f0ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f0f2:	f000 fc9b 	bl	800fa2c <__assert_func>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	6144      	str	r4, [r0, #20]
 800f0fa:	6103      	str	r3, [r0, #16]
 800f0fc:	bd10      	pop	{r4, pc}
 800f0fe:	bf00      	nop
 800f100:	080114ab 	.word	0x080114ab
 800f104:	080114bc 	.word	0x080114bc

0800f108 <__multiply>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	4614      	mov	r4, r2
 800f10e:	690a      	ldr	r2, [r1, #16]
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	429a      	cmp	r2, r3
 800f114:	bfb8      	it	lt
 800f116:	460b      	movlt	r3, r1
 800f118:	460d      	mov	r5, r1
 800f11a:	bfbc      	itt	lt
 800f11c:	4625      	movlt	r5, r4
 800f11e:	461c      	movlt	r4, r3
 800f120:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f124:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f128:	68ab      	ldr	r3, [r5, #8]
 800f12a:	6869      	ldr	r1, [r5, #4]
 800f12c:	eb0a 0709 	add.w	r7, sl, r9
 800f130:	42bb      	cmp	r3, r7
 800f132:	b085      	sub	sp, #20
 800f134:	bfb8      	it	lt
 800f136:	3101      	addlt	r1, #1
 800f138:	f7ff fed4 	bl	800eee4 <_Balloc>
 800f13c:	b930      	cbnz	r0, 800f14c <__multiply+0x44>
 800f13e:	4602      	mov	r2, r0
 800f140:	4b42      	ldr	r3, [pc, #264]	; (800f24c <__multiply+0x144>)
 800f142:	4843      	ldr	r0, [pc, #268]	; (800f250 <__multiply+0x148>)
 800f144:	f240 115d 	movw	r1, #349	; 0x15d
 800f148:	f000 fc70 	bl	800fa2c <__assert_func>
 800f14c:	f100 0614 	add.w	r6, r0, #20
 800f150:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f154:	4633      	mov	r3, r6
 800f156:	2200      	movs	r2, #0
 800f158:	4543      	cmp	r3, r8
 800f15a:	d31e      	bcc.n	800f19a <__multiply+0x92>
 800f15c:	f105 0c14 	add.w	ip, r5, #20
 800f160:	f104 0314 	add.w	r3, r4, #20
 800f164:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f168:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f16c:	9202      	str	r2, [sp, #8]
 800f16e:	ebac 0205 	sub.w	r2, ip, r5
 800f172:	3a15      	subs	r2, #21
 800f174:	f022 0203 	bic.w	r2, r2, #3
 800f178:	3204      	adds	r2, #4
 800f17a:	f105 0115 	add.w	r1, r5, #21
 800f17e:	458c      	cmp	ip, r1
 800f180:	bf38      	it	cc
 800f182:	2204      	movcc	r2, #4
 800f184:	9201      	str	r2, [sp, #4]
 800f186:	9a02      	ldr	r2, [sp, #8]
 800f188:	9303      	str	r3, [sp, #12]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d808      	bhi.n	800f1a0 <__multiply+0x98>
 800f18e:	2f00      	cmp	r7, #0
 800f190:	dc55      	bgt.n	800f23e <__multiply+0x136>
 800f192:	6107      	str	r7, [r0, #16]
 800f194:	b005      	add	sp, #20
 800f196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19a:	f843 2b04 	str.w	r2, [r3], #4
 800f19e:	e7db      	b.n	800f158 <__multiply+0x50>
 800f1a0:	f8b3 a000 	ldrh.w	sl, [r3]
 800f1a4:	f1ba 0f00 	cmp.w	sl, #0
 800f1a8:	d020      	beq.n	800f1ec <__multiply+0xe4>
 800f1aa:	f105 0e14 	add.w	lr, r5, #20
 800f1ae:	46b1      	mov	r9, r6
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f1b6:	f8d9 b000 	ldr.w	fp, [r9]
 800f1ba:	b2a1      	uxth	r1, r4
 800f1bc:	fa1f fb8b 	uxth.w	fp, fp
 800f1c0:	fb0a b101 	mla	r1, sl, r1, fp
 800f1c4:	4411      	add	r1, r2
 800f1c6:	f8d9 2000 	ldr.w	r2, [r9]
 800f1ca:	0c24      	lsrs	r4, r4, #16
 800f1cc:	0c12      	lsrs	r2, r2, #16
 800f1ce:	fb0a 2404 	mla	r4, sl, r4, r2
 800f1d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f1d6:	b289      	uxth	r1, r1
 800f1d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f1dc:	45f4      	cmp	ip, lr
 800f1de:	f849 1b04 	str.w	r1, [r9], #4
 800f1e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f1e6:	d8e4      	bhi.n	800f1b2 <__multiply+0xaa>
 800f1e8:	9901      	ldr	r1, [sp, #4]
 800f1ea:	5072      	str	r2, [r6, r1]
 800f1ec:	9a03      	ldr	r2, [sp, #12]
 800f1ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	f1b9 0f00 	cmp.w	r9, #0
 800f1f8:	d01f      	beq.n	800f23a <__multiply+0x132>
 800f1fa:	6834      	ldr	r4, [r6, #0]
 800f1fc:	f105 0114 	add.w	r1, r5, #20
 800f200:	46b6      	mov	lr, r6
 800f202:	f04f 0a00 	mov.w	sl, #0
 800f206:	880a      	ldrh	r2, [r1, #0]
 800f208:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f20c:	fb09 b202 	mla	r2, r9, r2, fp
 800f210:	4492      	add	sl, r2
 800f212:	b2a4      	uxth	r4, r4
 800f214:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f218:	f84e 4b04 	str.w	r4, [lr], #4
 800f21c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f220:	f8be 2000 	ldrh.w	r2, [lr]
 800f224:	0c24      	lsrs	r4, r4, #16
 800f226:	fb09 2404 	mla	r4, r9, r4, r2
 800f22a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f22e:	458c      	cmp	ip, r1
 800f230:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f234:	d8e7      	bhi.n	800f206 <__multiply+0xfe>
 800f236:	9a01      	ldr	r2, [sp, #4]
 800f238:	50b4      	str	r4, [r6, r2]
 800f23a:	3604      	adds	r6, #4
 800f23c:	e7a3      	b.n	800f186 <__multiply+0x7e>
 800f23e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1a5      	bne.n	800f192 <__multiply+0x8a>
 800f246:	3f01      	subs	r7, #1
 800f248:	e7a1      	b.n	800f18e <__multiply+0x86>
 800f24a:	bf00      	nop
 800f24c:	080114ab 	.word	0x080114ab
 800f250:	080114bc 	.word	0x080114bc

0800f254 <__pow5mult>:
 800f254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f258:	4615      	mov	r5, r2
 800f25a:	f012 0203 	ands.w	r2, r2, #3
 800f25e:	4606      	mov	r6, r0
 800f260:	460f      	mov	r7, r1
 800f262:	d007      	beq.n	800f274 <__pow5mult+0x20>
 800f264:	4c25      	ldr	r4, [pc, #148]	; (800f2fc <__pow5mult+0xa8>)
 800f266:	3a01      	subs	r2, #1
 800f268:	2300      	movs	r3, #0
 800f26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f26e:	f7ff fe9b 	bl	800efa8 <__multadd>
 800f272:	4607      	mov	r7, r0
 800f274:	10ad      	asrs	r5, r5, #2
 800f276:	d03d      	beq.n	800f2f4 <__pow5mult+0xa0>
 800f278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f27a:	b97c      	cbnz	r4, 800f29c <__pow5mult+0x48>
 800f27c:	2010      	movs	r0, #16
 800f27e:	f7ff fe29 	bl	800eed4 <malloc>
 800f282:	4602      	mov	r2, r0
 800f284:	6270      	str	r0, [r6, #36]	; 0x24
 800f286:	b928      	cbnz	r0, 800f294 <__pow5mult+0x40>
 800f288:	4b1d      	ldr	r3, [pc, #116]	; (800f300 <__pow5mult+0xac>)
 800f28a:	481e      	ldr	r0, [pc, #120]	; (800f304 <__pow5mult+0xb0>)
 800f28c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f290:	f000 fbcc 	bl	800fa2c <__assert_func>
 800f294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f298:	6004      	str	r4, [r0, #0]
 800f29a:	60c4      	str	r4, [r0, #12]
 800f29c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2a4:	b94c      	cbnz	r4, 800f2ba <__pow5mult+0x66>
 800f2a6:	f240 2171 	movw	r1, #625	; 0x271
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	f7ff ff16 	bl	800f0dc <__i2b>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	6003      	str	r3, [r0, #0]
 800f2ba:	f04f 0900 	mov.w	r9, #0
 800f2be:	07eb      	lsls	r3, r5, #31
 800f2c0:	d50a      	bpl.n	800f2d8 <__pow5mult+0x84>
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	4622      	mov	r2, r4
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ff1e 	bl	800f108 <__multiply>
 800f2cc:	4639      	mov	r1, r7
 800f2ce:	4680      	mov	r8, r0
 800f2d0:	4630      	mov	r0, r6
 800f2d2:	f7ff fe47 	bl	800ef64 <_Bfree>
 800f2d6:	4647      	mov	r7, r8
 800f2d8:	106d      	asrs	r5, r5, #1
 800f2da:	d00b      	beq.n	800f2f4 <__pow5mult+0xa0>
 800f2dc:	6820      	ldr	r0, [r4, #0]
 800f2de:	b938      	cbnz	r0, 800f2f0 <__pow5mult+0x9c>
 800f2e0:	4622      	mov	r2, r4
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	f7ff ff0f 	bl	800f108 <__multiply>
 800f2ea:	6020      	str	r0, [r4, #0]
 800f2ec:	f8c0 9000 	str.w	r9, [r0]
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	e7e4      	b.n	800f2be <__pow5mult+0x6a>
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2fa:	bf00      	nop
 800f2fc:	08011610 	.word	0x08011610
 800f300:	08011435 	.word	0x08011435
 800f304:	080114bc 	.word	0x080114bc

0800f308 <__lshift>:
 800f308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f30c:	460c      	mov	r4, r1
 800f30e:	6849      	ldr	r1, [r1, #4]
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f316:	68a3      	ldr	r3, [r4, #8]
 800f318:	4607      	mov	r7, r0
 800f31a:	4691      	mov	r9, r2
 800f31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f320:	f108 0601 	add.w	r6, r8, #1
 800f324:	42b3      	cmp	r3, r6
 800f326:	db0b      	blt.n	800f340 <__lshift+0x38>
 800f328:	4638      	mov	r0, r7
 800f32a:	f7ff fddb 	bl	800eee4 <_Balloc>
 800f32e:	4605      	mov	r5, r0
 800f330:	b948      	cbnz	r0, 800f346 <__lshift+0x3e>
 800f332:	4602      	mov	r2, r0
 800f334:	4b28      	ldr	r3, [pc, #160]	; (800f3d8 <__lshift+0xd0>)
 800f336:	4829      	ldr	r0, [pc, #164]	; (800f3dc <__lshift+0xd4>)
 800f338:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f33c:	f000 fb76 	bl	800fa2c <__assert_func>
 800f340:	3101      	adds	r1, #1
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	e7ee      	b.n	800f324 <__lshift+0x1c>
 800f346:	2300      	movs	r3, #0
 800f348:	f100 0114 	add.w	r1, r0, #20
 800f34c:	f100 0210 	add.w	r2, r0, #16
 800f350:	4618      	mov	r0, r3
 800f352:	4553      	cmp	r3, sl
 800f354:	db33      	blt.n	800f3be <__lshift+0xb6>
 800f356:	6920      	ldr	r0, [r4, #16]
 800f358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f35c:	f104 0314 	add.w	r3, r4, #20
 800f360:	f019 091f 	ands.w	r9, r9, #31
 800f364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f36c:	d02b      	beq.n	800f3c6 <__lshift+0xbe>
 800f36e:	f1c9 0e20 	rsb	lr, r9, #32
 800f372:	468a      	mov	sl, r1
 800f374:	2200      	movs	r2, #0
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	fa00 f009 	lsl.w	r0, r0, r9
 800f37c:	4302      	orrs	r2, r0
 800f37e:	f84a 2b04 	str.w	r2, [sl], #4
 800f382:	f853 2b04 	ldr.w	r2, [r3], #4
 800f386:	459c      	cmp	ip, r3
 800f388:	fa22 f20e 	lsr.w	r2, r2, lr
 800f38c:	d8f3      	bhi.n	800f376 <__lshift+0x6e>
 800f38e:	ebac 0304 	sub.w	r3, ip, r4
 800f392:	3b15      	subs	r3, #21
 800f394:	f023 0303 	bic.w	r3, r3, #3
 800f398:	3304      	adds	r3, #4
 800f39a:	f104 0015 	add.w	r0, r4, #21
 800f39e:	4584      	cmp	ip, r0
 800f3a0:	bf38      	it	cc
 800f3a2:	2304      	movcc	r3, #4
 800f3a4:	50ca      	str	r2, [r1, r3]
 800f3a6:	b10a      	cbz	r2, 800f3ac <__lshift+0xa4>
 800f3a8:	f108 0602 	add.w	r6, r8, #2
 800f3ac:	3e01      	subs	r6, #1
 800f3ae:	4638      	mov	r0, r7
 800f3b0:	612e      	str	r6, [r5, #16]
 800f3b2:	4621      	mov	r1, r4
 800f3b4:	f7ff fdd6 	bl	800ef64 <_Bfree>
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3be:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	e7c5      	b.n	800f352 <__lshift+0x4a>
 800f3c6:	3904      	subs	r1, #4
 800f3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3d0:	459c      	cmp	ip, r3
 800f3d2:	d8f9      	bhi.n	800f3c8 <__lshift+0xc0>
 800f3d4:	e7ea      	b.n	800f3ac <__lshift+0xa4>
 800f3d6:	bf00      	nop
 800f3d8:	080114ab 	.word	0x080114ab
 800f3dc:	080114bc 	.word	0x080114bc

0800f3e0 <__mcmp>:
 800f3e0:	b530      	push	{r4, r5, lr}
 800f3e2:	6902      	ldr	r2, [r0, #16]
 800f3e4:	690c      	ldr	r4, [r1, #16]
 800f3e6:	1b12      	subs	r2, r2, r4
 800f3e8:	d10e      	bne.n	800f408 <__mcmp+0x28>
 800f3ea:	f100 0314 	add.w	r3, r0, #20
 800f3ee:	3114      	adds	r1, #20
 800f3f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f3f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f3f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f3fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f400:	42a5      	cmp	r5, r4
 800f402:	d003      	beq.n	800f40c <__mcmp+0x2c>
 800f404:	d305      	bcc.n	800f412 <__mcmp+0x32>
 800f406:	2201      	movs	r2, #1
 800f408:	4610      	mov	r0, r2
 800f40a:	bd30      	pop	{r4, r5, pc}
 800f40c:	4283      	cmp	r3, r0
 800f40e:	d3f3      	bcc.n	800f3f8 <__mcmp+0x18>
 800f410:	e7fa      	b.n	800f408 <__mcmp+0x28>
 800f412:	f04f 32ff 	mov.w	r2, #4294967295
 800f416:	e7f7      	b.n	800f408 <__mcmp+0x28>

0800f418 <__mdiff>:
 800f418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	460c      	mov	r4, r1
 800f41e:	4606      	mov	r6, r0
 800f420:	4611      	mov	r1, r2
 800f422:	4620      	mov	r0, r4
 800f424:	4617      	mov	r7, r2
 800f426:	f7ff ffdb 	bl	800f3e0 <__mcmp>
 800f42a:	1e05      	subs	r5, r0, #0
 800f42c:	d110      	bne.n	800f450 <__mdiff+0x38>
 800f42e:	4629      	mov	r1, r5
 800f430:	4630      	mov	r0, r6
 800f432:	f7ff fd57 	bl	800eee4 <_Balloc>
 800f436:	b930      	cbnz	r0, 800f446 <__mdiff+0x2e>
 800f438:	4b39      	ldr	r3, [pc, #228]	; (800f520 <__mdiff+0x108>)
 800f43a:	4602      	mov	r2, r0
 800f43c:	f240 2132 	movw	r1, #562	; 0x232
 800f440:	4838      	ldr	r0, [pc, #224]	; (800f524 <__mdiff+0x10c>)
 800f442:	f000 faf3 	bl	800fa2c <__assert_func>
 800f446:	2301      	movs	r3, #1
 800f448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f44c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f450:	bfa4      	itt	ge
 800f452:	463b      	movge	r3, r7
 800f454:	4627      	movge	r7, r4
 800f456:	4630      	mov	r0, r6
 800f458:	6879      	ldr	r1, [r7, #4]
 800f45a:	bfa6      	itte	ge
 800f45c:	461c      	movge	r4, r3
 800f45e:	2500      	movge	r5, #0
 800f460:	2501      	movlt	r5, #1
 800f462:	f7ff fd3f 	bl	800eee4 <_Balloc>
 800f466:	b920      	cbnz	r0, 800f472 <__mdiff+0x5a>
 800f468:	4b2d      	ldr	r3, [pc, #180]	; (800f520 <__mdiff+0x108>)
 800f46a:	4602      	mov	r2, r0
 800f46c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f470:	e7e6      	b.n	800f440 <__mdiff+0x28>
 800f472:	693e      	ldr	r6, [r7, #16]
 800f474:	60c5      	str	r5, [r0, #12]
 800f476:	6925      	ldr	r5, [r4, #16]
 800f478:	f107 0114 	add.w	r1, r7, #20
 800f47c:	f104 0914 	add.w	r9, r4, #20
 800f480:	f100 0e14 	add.w	lr, r0, #20
 800f484:	f107 0210 	add.w	r2, r7, #16
 800f488:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f48c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f490:	46f2      	mov	sl, lr
 800f492:	2700      	movs	r7, #0
 800f494:	f859 3b04 	ldr.w	r3, [r9], #4
 800f498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f49c:	fa1f f883 	uxth.w	r8, r3
 800f4a0:	fa17 f78b 	uxtah	r7, r7, fp
 800f4a4:	0c1b      	lsrs	r3, r3, #16
 800f4a6:	eba7 0808 	sub.w	r8, r7, r8
 800f4aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f4ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f4b2:	fa1f f888 	uxth.w	r8, r8
 800f4b6:	141f      	asrs	r7, r3, #16
 800f4b8:	454d      	cmp	r5, r9
 800f4ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f4be:	f84a 3b04 	str.w	r3, [sl], #4
 800f4c2:	d8e7      	bhi.n	800f494 <__mdiff+0x7c>
 800f4c4:	1b2b      	subs	r3, r5, r4
 800f4c6:	3b15      	subs	r3, #21
 800f4c8:	f023 0303 	bic.w	r3, r3, #3
 800f4cc:	3304      	adds	r3, #4
 800f4ce:	3415      	adds	r4, #21
 800f4d0:	42a5      	cmp	r5, r4
 800f4d2:	bf38      	it	cc
 800f4d4:	2304      	movcc	r3, #4
 800f4d6:	4419      	add	r1, r3
 800f4d8:	4473      	add	r3, lr
 800f4da:	469e      	mov	lr, r3
 800f4dc:	460d      	mov	r5, r1
 800f4de:	4565      	cmp	r5, ip
 800f4e0:	d30e      	bcc.n	800f500 <__mdiff+0xe8>
 800f4e2:	f10c 0203 	add.w	r2, ip, #3
 800f4e6:	1a52      	subs	r2, r2, r1
 800f4e8:	f022 0203 	bic.w	r2, r2, #3
 800f4ec:	3903      	subs	r1, #3
 800f4ee:	458c      	cmp	ip, r1
 800f4f0:	bf38      	it	cc
 800f4f2:	2200      	movcc	r2, #0
 800f4f4:	441a      	add	r2, r3
 800f4f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f4fa:	b17b      	cbz	r3, 800f51c <__mdiff+0x104>
 800f4fc:	6106      	str	r6, [r0, #16]
 800f4fe:	e7a5      	b.n	800f44c <__mdiff+0x34>
 800f500:	f855 8b04 	ldr.w	r8, [r5], #4
 800f504:	fa17 f488 	uxtah	r4, r7, r8
 800f508:	1422      	asrs	r2, r4, #16
 800f50a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f50e:	b2a4      	uxth	r4, r4
 800f510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f514:	f84e 4b04 	str.w	r4, [lr], #4
 800f518:	1417      	asrs	r7, r2, #16
 800f51a:	e7e0      	b.n	800f4de <__mdiff+0xc6>
 800f51c:	3e01      	subs	r6, #1
 800f51e:	e7ea      	b.n	800f4f6 <__mdiff+0xde>
 800f520:	080114ab 	.word	0x080114ab
 800f524:	080114bc 	.word	0x080114bc

0800f528 <__d2b>:
 800f528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f52c:	4689      	mov	r9, r1
 800f52e:	2101      	movs	r1, #1
 800f530:	ec57 6b10 	vmov	r6, r7, d0
 800f534:	4690      	mov	r8, r2
 800f536:	f7ff fcd5 	bl	800eee4 <_Balloc>
 800f53a:	4604      	mov	r4, r0
 800f53c:	b930      	cbnz	r0, 800f54c <__d2b+0x24>
 800f53e:	4602      	mov	r2, r0
 800f540:	4b25      	ldr	r3, [pc, #148]	; (800f5d8 <__d2b+0xb0>)
 800f542:	4826      	ldr	r0, [pc, #152]	; (800f5dc <__d2b+0xb4>)
 800f544:	f240 310a 	movw	r1, #778	; 0x30a
 800f548:	f000 fa70 	bl	800fa2c <__assert_func>
 800f54c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f554:	bb35      	cbnz	r5, 800f5a4 <__d2b+0x7c>
 800f556:	2e00      	cmp	r6, #0
 800f558:	9301      	str	r3, [sp, #4]
 800f55a:	d028      	beq.n	800f5ae <__d2b+0x86>
 800f55c:	4668      	mov	r0, sp
 800f55e:	9600      	str	r6, [sp, #0]
 800f560:	f7ff fd8c 	bl	800f07c <__lo0bits>
 800f564:	9900      	ldr	r1, [sp, #0]
 800f566:	b300      	cbz	r0, 800f5aa <__d2b+0x82>
 800f568:	9a01      	ldr	r2, [sp, #4]
 800f56a:	f1c0 0320 	rsb	r3, r0, #32
 800f56e:	fa02 f303 	lsl.w	r3, r2, r3
 800f572:	430b      	orrs	r3, r1
 800f574:	40c2      	lsrs	r2, r0
 800f576:	6163      	str	r3, [r4, #20]
 800f578:	9201      	str	r2, [sp, #4]
 800f57a:	9b01      	ldr	r3, [sp, #4]
 800f57c:	61a3      	str	r3, [r4, #24]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	bf14      	ite	ne
 800f582:	2202      	movne	r2, #2
 800f584:	2201      	moveq	r2, #1
 800f586:	6122      	str	r2, [r4, #16]
 800f588:	b1d5      	cbz	r5, 800f5c0 <__d2b+0x98>
 800f58a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f58e:	4405      	add	r5, r0
 800f590:	f8c9 5000 	str.w	r5, [r9]
 800f594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f598:	f8c8 0000 	str.w	r0, [r8]
 800f59c:	4620      	mov	r0, r4
 800f59e:	b003      	add	sp, #12
 800f5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5a8:	e7d5      	b.n	800f556 <__d2b+0x2e>
 800f5aa:	6161      	str	r1, [r4, #20]
 800f5ac:	e7e5      	b.n	800f57a <__d2b+0x52>
 800f5ae:	a801      	add	r0, sp, #4
 800f5b0:	f7ff fd64 	bl	800f07c <__lo0bits>
 800f5b4:	9b01      	ldr	r3, [sp, #4]
 800f5b6:	6163      	str	r3, [r4, #20]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	6122      	str	r2, [r4, #16]
 800f5bc:	3020      	adds	r0, #32
 800f5be:	e7e3      	b.n	800f588 <__d2b+0x60>
 800f5c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5c8:	f8c9 0000 	str.w	r0, [r9]
 800f5cc:	6918      	ldr	r0, [r3, #16]
 800f5ce:	f7ff fd35 	bl	800f03c <__hi0bits>
 800f5d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5d6:	e7df      	b.n	800f598 <__d2b+0x70>
 800f5d8:	080114ab 	.word	0x080114ab
 800f5dc:	080114bc 	.word	0x080114bc

0800f5e0 <_calloc_r>:
 800f5e0:	b513      	push	{r0, r1, r4, lr}
 800f5e2:	434a      	muls	r2, r1
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	9201      	str	r2, [sp, #4]
 800f5e8:	f000 f85a 	bl	800f6a0 <_malloc_r>
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	b118      	cbz	r0, 800f5f8 <_calloc_r+0x18>
 800f5f0:	9a01      	ldr	r2, [sp, #4]
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	f7fe f9bc 	bl	800d970 <memset>
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	b002      	add	sp, #8
 800f5fc:	bd10      	pop	{r4, pc}
	...

0800f600 <_free_r>:
 800f600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f602:	2900      	cmp	r1, #0
 800f604:	d048      	beq.n	800f698 <_free_r+0x98>
 800f606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f60a:	9001      	str	r0, [sp, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f1a1 0404 	sub.w	r4, r1, #4
 800f612:	bfb8      	it	lt
 800f614:	18e4      	addlt	r4, r4, r3
 800f616:	f000 fa65 	bl	800fae4 <__malloc_lock>
 800f61a:	4a20      	ldr	r2, [pc, #128]	; (800f69c <_free_r+0x9c>)
 800f61c:	9801      	ldr	r0, [sp, #4]
 800f61e:	6813      	ldr	r3, [r2, #0]
 800f620:	4615      	mov	r5, r2
 800f622:	b933      	cbnz	r3, 800f632 <_free_r+0x32>
 800f624:	6063      	str	r3, [r4, #4]
 800f626:	6014      	str	r4, [r2, #0]
 800f628:	b003      	add	sp, #12
 800f62a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f62e:	f000 ba5f 	b.w	800faf0 <__malloc_unlock>
 800f632:	42a3      	cmp	r3, r4
 800f634:	d90b      	bls.n	800f64e <_free_r+0x4e>
 800f636:	6821      	ldr	r1, [r4, #0]
 800f638:	1862      	adds	r2, r4, r1
 800f63a:	4293      	cmp	r3, r2
 800f63c:	bf04      	itt	eq
 800f63e:	681a      	ldreq	r2, [r3, #0]
 800f640:	685b      	ldreq	r3, [r3, #4]
 800f642:	6063      	str	r3, [r4, #4]
 800f644:	bf04      	itt	eq
 800f646:	1852      	addeq	r2, r2, r1
 800f648:	6022      	streq	r2, [r4, #0]
 800f64a:	602c      	str	r4, [r5, #0]
 800f64c:	e7ec      	b.n	800f628 <_free_r+0x28>
 800f64e:	461a      	mov	r2, r3
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	b10b      	cbz	r3, 800f658 <_free_r+0x58>
 800f654:	42a3      	cmp	r3, r4
 800f656:	d9fa      	bls.n	800f64e <_free_r+0x4e>
 800f658:	6811      	ldr	r1, [r2, #0]
 800f65a:	1855      	adds	r5, r2, r1
 800f65c:	42a5      	cmp	r5, r4
 800f65e:	d10b      	bne.n	800f678 <_free_r+0x78>
 800f660:	6824      	ldr	r4, [r4, #0]
 800f662:	4421      	add	r1, r4
 800f664:	1854      	adds	r4, r2, r1
 800f666:	42a3      	cmp	r3, r4
 800f668:	6011      	str	r1, [r2, #0]
 800f66a:	d1dd      	bne.n	800f628 <_free_r+0x28>
 800f66c:	681c      	ldr	r4, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	6053      	str	r3, [r2, #4]
 800f672:	4421      	add	r1, r4
 800f674:	6011      	str	r1, [r2, #0]
 800f676:	e7d7      	b.n	800f628 <_free_r+0x28>
 800f678:	d902      	bls.n	800f680 <_free_r+0x80>
 800f67a:	230c      	movs	r3, #12
 800f67c:	6003      	str	r3, [r0, #0]
 800f67e:	e7d3      	b.n	800f628 <_free_r+0x28>
 800f680:	6825      	ldr	r5, [r4, #0]
 800f682:	1961      	adds	r1, r4, r5
 800f684:	428b      	cmp	r3, r1
 800f686:	bf04      	itt	eq
 800f688:	6819      	ldreq	r1, [r3, #0]
 800f68a:	685b      	ldreq	r3, [r3, #4]
 800f68c:	6063      	str	r3, [r4, #4]
 800f68e:	bf04      	itt	eq
 800f690:	1949      	addeq	r1, r1, r5
 800f692:	6021      	streq	r1, [r4, #0]
 800f694:	6054      	str	r4, [r2, #4]
 800f696:	e7c7      	b.n	800f628 <_free_r+0x28>
 800f698:	b003      	add	sp, #12
 800f69a:	bd30      	pop	{r4, r5, pc}
 800f69c:	240014a0 	.word	0x240014a0

0800f6a0 <_malloc_r>:
 800f6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a2:	1ccd      	adds	r5, r1, #3
 800f6a4:	f025 0503 	bic.w	r5, r5, #3
 800f6a8:	3508      	adds	r5, #8
 800f6aa:	2d0c      	cmp	r5, #12
 800f6ac:	bf38      	it	cc
 800f6ae:	250c      	movcc	r5, #12
 800f6b0:	2d00      	cmp	r5, #0
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	db01      	blt.n	800f6ba <_malloc_r+0x1a>
 800f6b6:	42a9      	cmp	r1, r5
 800f6b8:	d903      	bls.n	800f6c2 <_malloc_r+0x22>
 800f6ba:	230c      	movs	r3, #12
 800f6bc:	6033      	str	r3, [r6, #0]
 800f6be:	2000      	movs	r0, #0
 800f6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c2:	f000 fa0f 	bl	800fae4 <__malloc_lock>
 800f6c6:	4921      	ldr	r1, [pc, #132]	; (800f74c <_malloc_r+0xac>)
 800f6c8:	680a      	ldr	r2, [r1, #0]
 800f6ca:	4614      	mov	r4, r2
 800f6cc:	b99c      	cbnz	r4, 800f6f6 <_malloc_r+0x56>
 800f6ce:	4f20      	ldr	r7, [pc, #128]	; (800f750 <_malloc_r+0xb0>)
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	b923      	cbnz	r3, 800f6de <_malloc_r+0x3e>
 800f6d4:	4621      	mov	r1, r4
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f000 f998 	bl	800fa0c <_sbrk_r>
 800f6dc:	6038      	str	r0, [r7, #0]
 800f6de:	4629      	mov	r1, r5
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f000 f993 	bl	800fa0c <_sbrk_r>
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	d123      	bne.n	800f732 <_malloc_r+0x92>
 800f6ea:	230c      	movs	r3, #12
 800f6ec:	6033      	str	r3, [r6, #0]
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f000 f9fe 	bl	800faf0 <__malloc_unlock>
 800f6f4:	e7e3      	b.n	800f6be <_malloc_r+0x1e>
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	1b5b      	subs	r3, r3, r5
 800f6fa:	d417      	bmi.n	800f72c <_malloc_r+0x8c>
 800f6fc:	2b0b      	cmp	r3, #11
 800f6fe:	d903      	bls.n	800f708 <_malloc_r+0x68>
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	441c      	add	r4, r3
 800f704:	6025      	str	r5, [r4, #0]
 800f706:	e004      	b.n	800f712 <_malloc_r+0x72>
 800f708:	6863      	ldr	r3, [r4, #4]
 800f70a:	42a2      	cmp	r2, r4
 800f70c:	bf0c      	ite	eq
 800f70e:	600b      	streq	r3, [r1, #0]
 800f710:	6053      	strne	r3, [r2, #4]
 800f712:	4630      	mov	r0, r6
 800f714:	f000 f9ec 	bl	800faf0 <__malloc_unlock>
 800f718:	f104 000b 	add.w	r0, r4, #11
 800f71c:	1d23      	adds	r3, r4, #4
 800f71e:	f020 0007 	bic.w	r0, r0, #7
 800f722:	1ac2      	subs	r2, r0, r3
 800f724:	d0cc      	beq.n	800f6c0 <_malloc_r+0x20>
 800f726:	1a1b      	subs	r3, r3, r0
 800f728:	50a3      	str	r3, [r4, r2]
 800f72a:	e7c9      	b.n	800f6c0 <_malloc_r+0x20>
 800f72c:	4622      	mov	r2, r4
 800f72e:	6864      	ldr	r4, [r4, #4]
 800f730:	e7cc      	b.n	800f6cc <_malloc_r+0x2c>
 800f732:	1cc4      	adds	r4, r0, #3
 800f734:	f024 0403 	bic.w	r4, r4, #3
 800f738:	42a0      	cmp	r0, r4
 800f73a:	d0e3      	beq.n	800f704 <_malloc_r+0x64>
 800f73c:	1a21      	subs	r1, r4, r0
 800f73e:	4630      	mov	r0, r6
 800f740:	f000 f964 	bl	800fa0c <_sbrk_r>
 800f744:	3001      	adds	r0, #1
 800f746:	d1dd      	bne.n	800f704 <_malloc_r+0x64>
 800f748:	e7cf      	b.n	800f6ea <_malloc_r+0x4a>
 800f74a:	bf00      	nop
 800f74c:	240014a0 	.word	0x240014a0
 800f750:	240014a4 	.word	0x240014a4

0800f754 <__ssputs_r>:
 800f754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f758:	688e      	ldr	r6, [r1, #8]
 800f75a:	429e      	cmp	r6, r3
 800f75c:	4682      	mov	sl, r0
 800f75e:	460c      	mov	r4, r1
 800f760:	4690      	mov	r8, r2
 800f762:	461f      	mov	r7, r3
 800f764:	d838      	bhi.n	800f7d8 <__ssputs_r+0x84>
 800f766:	898a      	ldrh	r2, [r1, #12]
 800f768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f76c:	d032      	beq.n	800f7d4 <__ssputs_r+0x80>
 800f76e:	6825      	ldr	r5, [r4, #0]
 800f770:	6909      	ldr	r1, [r1, #16]
 800f772:	eba5 0901 	sub.w	r9, r5, r1
 800f776:	6965      	ldr	r5, [r4, #20]
 800f778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f780:	3301      	adds	r3, #1
 800f782:	444b      	add	r3, r9
 800f784:	106d      	asrs	r5, r5, #1
 800f786:	429d      	cmp	r5, r3
 800f788:	bf38      	it	cc
 800f78a:	461d      	movcc	r5, r3
 800f78c:	0553      	lsls	r3, r2, #21
 800f78e:	d531      	bpl.n	800f7f4 <__ssputs_r+0xa0>
 800f790:	4629      	mov	r1, r5
 800f792:	f7ff ff85 	bl	800f6a0 <_malloc_r>
 800f796:	4606      	mov	r6, r0
 800f798:	b950      	cbnz	r0, 800f7b0 <__ssputs_r+0x5c>
 800f79a:	230c      	movs	r3, #12
 800f79c:	f8ca 3000 	str.w	r3, [sl]
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b0:	6921      	ldr	r1, [r4, #16]
 800f7b2:	464a      	mov	r2, r9
 800f7b4:	f7fe f8ce 	bl	800d954 <memcpy>
 800f7b8:	89a3      	ldrh	r3, [r4, #12]
 800f7ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7c2:	81a3      	strh	r3, [r4, #12]
 800f7c4:	6126      	str	r6, [r4, #16]
 800f7c6:	6165      	str	r5, [r4, #20]
 800f7c8:	444e      	add	r6, r9
 800f7ca:	eba5 0509 	sub.w	r5, r5, r9
 800f7ce:	6026      	str	r6, [r4, #0]
 800f7d0:	60a5      	str	r5, [r4, #8]
 800f7d2:	463e      	mov	r6, r7
 800f7d4:	42be      	cmp	r6, r7
 800f7d6:	d900      	bls.n	800f7da <__ssputs_r+0x86>
 800f7d8:	463e      	mov	r6, r7
 800f7da:	4632      	mov	r2, r6
 800f7dc:	6820      	ldr	r0, [r4, #0]
 800f7de:	4641      	mov	r1, r8
 800f7e0:	f000 f966 	bl	800fab0 <memmove>
 800f7e4:	68a3      	ldr	r3, [r4, #8]
 800f7e6:	6822      	ldr	r2, [r4, #0]
 800f7e8:	1b9b      	subs	r3, r3, r6
 800f7ea:	4432      	add	r2, r6
 800f7ec:	60a3      	str	r3, [r4, #8]
 800f7ee:	6022      	str	r2, [r4, #0]
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	e7db      	b.n	800f7ac <__ssputs_r+0x58>
 800f7f4:	462a      	mov	r2, r5
 800f7f6:	f000 f981 	bl	800fafc <_realloc_r>
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d1e1      	bne.n	800f7c4 <__ssputs_r+0x70>
 800f800:	6921      	ldr	r1, [r4, #16]
 800f802:	4650      	mov	r0, sl
 800f804:	f7ff fefc 	bl	800f600 <_free_r>
 800f808:	e7c7      	b.n	800f79a <__ssputs_r+0x46>
	...

0800f80c <_svfiprintf_r>:
 800f80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f810:	4698      	mov	r8, r3
 800f812:	898b      	ldrh	r3, [r1, #12]
 800f814:	061b      	lsls	r3, r3, #24
 800f816:	b09d      	sub	sp, #116	; 0x74
 800f818:	4607      	mov	r7, r0
 800f81a:	460d      	mov	r5, r1
 800f81c:	4614      	mov	r4, r2
 800f81e:	d50e      	bpl.n	800f83e <_svfiprintf_r+0x32>
 800f820:	690b      	ldr	r3, [r1, #16]
 800f822:	b963      	cbnz	r3, 800f83e <_svfiprintf_r+0x32>
 800f824:	2140      	movs	r1, #64	; 0x40
 800f826:	f7ff ff3b 	bl	800f6a0 <_malloc_r>
 800f82a:	6028      	str	r0, [r5, #0]
 800f82c:	6128      	str	r0, [r5, #16]
 800f82e:	b920      	cbnz	r0, 800f83a <_svfiprintf_r+0x2e>
 800f830:	230c      	movs	r3, #12
 800f832:	603b      	str	r3, [r7, #0]
 800f834:	f04f 30ff 	mov.w	r0, #4294967295
 800f838:	e0d1      	b.n	800f9de <_svfiprintf_r+0x1d2>
 800f83a:	2340      	movs	r3, #64	; 0x40
 800f83c:	616b      	str	r3, [r5, #20]
 800f83e:	2300      	movs	r3, #0
 800f840:	9309      	str	r3, [sp, #36]	; 0x24
 800f842:	2320      	movs	r3, #32
 800f844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f848:	f8cd 800c 	str.w	r8, [sp, #12]
 800f84c:	2330      	movs	r3, #48	; 0x30
 800f84e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f9f8 <_svfiprintf_r+0x1ec>
 800f852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f856:	f04f 0901 	mov.w	r9, #1
 800f85a:	4623      	mov	r3, r4
 800f85c:	469a      	mov	sl, r3
 800f85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f862:	b10a      	cbz	r2, 800f868 <_svfiprintf_r+0x5c>
 800f864:	2a25      	cmp	r2, #37	; 0x25
 800f866:	d1f9      	bne.n	800f85c <_svfiprintf_r+0x50>
 800f868:	ebba 0b04 	subs.w	fp, sl, r4
 800f86c:	d00b      	beq.n	800f886 <_svfiprintf_r+0x7a>
 800f86e:	465b      	mov	r3, fp
 800f870:	4622      	mov	r2, r4
 800f872:	4629      	mov	r1, r5
 800f874:	4638      	mov	r0, r7
 800f876:	f7ff ff6d 	bl	800f754 <__ssputs_r>
 800f87a:	3001      	adds	r0, #1
 800f87c:	f000 80aa 	beq.w	800f9d4 <_svfiprintf_r+0x1c8>
 800f880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f882:	445a      	add	r2, fp
 800f884:	9209      	str	r2, [sp, #36]	; 0x24
 800f886:	f89a 3000 	ldrb.w	r3, [sl]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f000 80a2 	beq.w	800f9d4 <_svfiprintf_r+0x1c8>
 800f890:	2300      	movs	r3, #0
 800f892:	f04f 32ff 	mov.w	r2, #4294967295
 800f896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f89a:	f10a 0a01 	add.w	sl, sl, #1
 800f89e:	9304      	str	r3, [sp, #16]
 800f8a0:	9307      	str	r3, [sp, #28]
 800f8a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8a6:	931a      	str	r3, [sp, #104]	; 0x68
 800f8a8:	4654      	mov	r4, sl
 800f8aa:	2205      	movs	r2, #5
 800f8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b0:	4851      	ldr	r0, [pc, #324]	; (800f9f8 <_svfiprintf_r+0x1ec>)
 800f8b2:	f7f0 fd1d 	bl	80002f0 <memchr>
 800f8b6:	9a04      	ldr	r2, [sp, #16]
 800f8b8:	b9d8      	cbnz	r0, 800f8f2 <_svfiprintf_r+0xe6>
 800f8ba:	06d0      	lsls	r0, r2, #27
 800f8bc:	bf44      	itt	mi
 800f8be:	2320      	movmi	r3, #32
 800f8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8c4:	0711      	lsls	r1, r2, #28
 800f8c6:	bf44      	itt	mi
 800f8c8:	232b      	movmi	r3, #43	; 0x2b
 800f8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f8d4:	d015      	beq.n	800f902 <_svfiprintf_r+0xf6>
 800f8d6:	9a07      	ldr	r2, [sp, #28]
 800f8d8:	4654      	mov	r4, sl
 800f8da:	2000      	movs	r0, #0
 800f8dc:	f04f 0c0a 	mov.w	ip, #10
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8e6:	3b30      	subs	r3, #48	; 0x30
 800f8e8:	2b09      	cmp	r3, #9
 800f8ea:	d94e      	bls.n	800f98a <_svfiprintf_r+0x17e>
 800f8ec:	b1b0      	cbz	r0, 800f91c <_svfiprintf_r+0x110>
 800f8ee:	9207      	str	r2, [sp, #28]
 800f8f0:	e014      	b.n	800f91c <_svfiprintf_r+0x110>
 800f8f2:	eba0 0308 	sub.w	r3, r0, r8
 800f8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	9304      	str	r3, [sp, #16]
 800f8fe:	46a2      	mov	sl, r4
 800f900:	e7d2      	b.n	800f8a8 <_svfiprintf_r+0x9c>
 800f902:	9b03      	ldr	r3, [sp, #12]
 800f904:	1d19      	adds	r1, r3, #4
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	9103      	str	r1, [sp, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	bfbb      	ittet	lt
 800f90e:	425b      	neglt	r3, r3
 800f910:	f042 0202 	orrlt.w	r2, r2, #2
 800f914:	9307      	strge	r3, [sp, #28]
 800f916:	9307      	strlt	r3, [sp, #28]
 800f918:	bfb8      	it	lt
 800f91a:	9204      	strlt	r2, [sp, #16]
 800f91c:	7823      	ldrb	r3, [r4, #0]
 800f91e:	2b2e      	cmp	r3, #46	; 0x2e
 800f920:	d10c      	bne.n	800f93c <_svfiprintf_r+0x130>
 800f922:	7863      	ldrb	r3, [r4, #1]
 800f924:	2b2a      	cmp	r3, #42	; 0x2a
 800f926:	d135      	bne.n	800f994 <_svfiprintf_r+0x188>
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	1d1a      	adds	r2, r3, #4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	9203      	str	r2, [sp, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	bfb8      	it	lt
 800f934:	f04f 33ff 	movlt.w	r3, #4294967295
 800f938:	3402      	adds	r4, #2
 800f93a:	9305      	str	r3, [sp, #20]
 800f93c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa08 <_svfiprintf_r+0x1fc>
 800f940:	7821      	ldrb	r1, [r4, #0]
 800f942:	2203      	movs	r2, #3
 800f944:	4650      	mov	r0, sl
 800f946:	f7f0 fcd3 	bl	80002f0 <memchr>
 800f94a:	b140      	cbz	r0, 800f95e <_svfiprintf_r+0x152>
 800f94c:	2340      	movs	r3, #64	; 0x40
 800f94e:	eba0 000a 	sub.w	r0, r0, sl
 800f952:	fa03 f000 	lsl.w	r0, r3, r0
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	4303      	orrs	r3, r0
 800f95a:	3401      	adds	r4, #1
 800f95c:	9304      	str	r3, [sp, #16]
 800f95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f962:	4826      	ldr	r0, [pc, #152]	; (800f9fc <_svfiprintf_r+0x1f0>)
 800f964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f968:	2206      	movs	r2, #6
 800f96a:	f7f0 fcc1 	bl	80002f0 <memchr>
 800f96e:	2800      	cmp	r0, #0
 800f970:	d038      	beq.n	800f9e4 <_svfiprintf_r+0x1d8>
 800f972:	4b23      	ldr	r3, [pc, #140]	; (800fa00 <_svfiprintf_r+0x1f4>)
 800f974:	bb1b      	cbnz	r3, 800f9be <_svfiprintf_r+0x1b2>
 800f976:	9b03      	ldr	r3, [sp, #12]
 800f978:	3307      	adds	r3, #7
 800f97a:	f023 0307 	bic.w	r3, r3, #7
 800f97e:	3308      	adds	r3, #8
 800f980:	9303      	str	r3, [sp, #12]
 800f982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f984:	4433      	add	r3, r6
 800f986:	9309      	str	r3, [sp, #36]	; 0x24
 800f988:	e767      	b.n	800f85a <_svfiprintf_r+0x4e>
 800f98a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f98e:	460c      	mov	r4, r1
 800f990:	2001      	movs	r0, #1
 800f992:	e7a5      	b.n	800f8e0 <_svfiprintf_r+0xd4>
 800f994:	2300      	movs	r3, #0
 800f996:	3401      	adds	r4, #1
 800f998:	9305      	str	r3, [sp, #20]
 800f99a:	4619      	mov	r1, r3
 800f99c:	f04f 0c0a 	mov.w	ip, #10
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9a6:	3a30      	subs	r2, #48	; 0x30
 800f9a8:	2a09      	cmp	r2, #9
 800f9aa:	d903      	bls.n	800f9b4 <_svfiprintf_r+0x1a8>
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d0c5      	beq.n	800f93c <_svfiprintf_r+0x130>
 800f9b0:	9105      	str	r1, [sp, #20]
 800f9b2:	e7c3      	b.n	800f93c <_svfiprintf_r+0x130>
 800f9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e7f0      	b.n	800f9a0 <_svfiprintf_r+0x194>
 800f9be:	ab03      	add	r3, sp, #12
 800f9c0:	9300      	str	r3, [sp, #0]
 800f9c2:	462a      	mov	r2, r5
 800f9c4:	4b0f      	ldr	r3, [pc, #60]	; (800fa04 <_svfiprintf_r+0x1f8>)
 800f9c6:	a904      	add	r1, sp, #16
 800f9c8:	4638      	mov	r0, r7
 800f9ca:	f7fe f869 	bl	800daa0 <_printf_float>
 800f9ce:	1c42      	adds	r2, r0, #1
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	d1d6      	bne.n	800f982 <_svfiprintf_r+0x176>
 800f9d4:	89ab      	ldrh	r3, [r5, #12]
 800f9d6:	065b      	lsls	r3, r3, #25
 800f9d8:	f53f af2c 	bmi.w	800f834 <_svfiprintf_r+0x28>
 800f9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9de:	b01d      	add	sp, #116	; 0x74
 800f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e4:	ab03      	add	r3, sp, #12
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	462a      	mov	r2, r5
 800f9ea:	4b06      	ldr	r3, [pc, #24]	; (800fa04 <_svfiprintf_r+0x1f8>)
 800f9ec:	a904      	add	r1, sp, #16
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	f7fe fae2 	bl	800dfb8 <_printf_i>
 800f9f4:	e7eb      	b.n	800f9ce <_svfiprintf_r+0x1c2>
 800f9f6:	bf00      	nop
 800f9f8:	0801161c 	.word	0x0801161c
 800f9fc:	08011626 	.word	0x08011626
 800fa00:	0800daa1 	.word	0x0800daa1
 800fa04:	0800f755 	.word	0x0800f755
 800fa08:	08011622 	.word	0x08011622

0800fa0c <_sbrk_r>:
 800fa0c:	b538      	push	{r3, r4, r5, lr}
 800fa0e:	4d06      	ldr	r5, [pc, #24]	; (800fa28 <_sbrk_r+0x1c>)
 800fa10:	2300      	movs	r3, #0
 800fa12:	4604      	mov	r4, r0
 800fa14:	4608      	mov	r0, r1
 800fa16:	602b      	str	r3, [r5, #0]
 800fa18:	f7f2 f908 	bl	8001c2c <_sbrk>
 800fa1c:	1c43      	adds	r3, r0, #1
 800fa1e:	d102      	bne.n	800fa26 <_sbrk_r+0x1a>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	b103      	cbz	r3, 800fa26 <_sbrk_r+0x1a>
 800fa24:	6023      	str	r3, [r4, #0]
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
 800fa28:	240063bc 	.word	0x240063bc

0800fa2c <__assert_func>:
 800fa2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa2e:	4614      	mov	r4, r2
 800fa30:	461a      	mov	r2, r3
 800fa32:	4b09      	ldr	r3, [pc, #36]	; (800fa58 <__assert_func+0x2c>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4605      	mov	r5, r0
 800fa38:	68d8      	ldr	r0, [r3, #12]
 800fa3a:	b14c      	cbz	r4, 800fa50 <__assert_func+0x24>
 800fa3c:	4b07      	ldr	r3, [pc, #28]	; (800fa5c <__assert_func+0x30>)
 800fa3e:	9100      	str	r1, [sp, #0]
 800fa40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa44:	4906      	ldr	r1, [pc, #24]	; (800fa60 <__assert_func+0x34>)
 800fa46:	462b      	mov	r3, r5
 800fa48:	f000 f80e 	bl	800fa68 <fiprintf>
 800fa4c:	f000 faa4 	bl	800ff98 <abort>
 800fa50:	4b04      	ldr	r3, [pc, #16]	; (800fa64 <__assert_func+0x38>)
 800fa52:	461c      	mov	r4, r3
 800fa54:	e7f3      	b.n	800fa3e <__assert_func+0x12>
 800fa56:	bf00      	nop
 800fa58:	24000010 	.word	0x24000010
 800fa5c:	0801162d 	.word	0x0801162d
 800fa60:	0801163a 	.word	0x0801163a
 800fa64:	08011668 	.word	0x08011668

0800fa68 <fiprintf>:
 800fa68:	b40e      	push	{r1, r2, r3}
 800fa6a:	b503      	push	{r0, r1, lr}
 800fa6c:	4601      	mov	r1, r0
 800fa6e:	ab03      	add	r3, sp, #12
 800fa70:	4805      	ldr	r0, [pc, #20]	; (800fa88 <fiprintf+0x20>)
 800fa72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa76:	6800      	ldr	r0, [r0, #0]
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	f000 f88f 	bl	800fb9c <_vfiprintf_r>
 800fa7e:	b002      	add	sp, #8
 800fa80:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa84:	b003      	add	sp, #12
 800fa86:	4770      	bx	lr
 800fa88:	24000010 	.word	0x24000010

0800fa8c <__ascii_mbtowc>:
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	b901      	cbnz	r1, 800fa92 <__ascii_mbtowc+0x6>
 800fa90:	a901      	add	r1, sp, #4
 800fa92:	b142      	cbz	r2, 800faa6 <__ascii_mbtowc+0x1a>
 800fa94:	b14b      	cbz	r3, 800faaa <__ascii_mbtowc+0x1e>
 800fa96:	7813      	ldrb	r3, [r2, #0]
 800fa98:	600b      	str	r3, [r1, #0]
 800fa9a:	7812      	ldrb	r2, [r2, #0]
 800fa9c:	1e10      	subs	r0, r2, #0
 800fa9e:	bf18      	it	ne
 800faa0:	2001      	movne	r0, #1
 800faa2:	b002      	add	sp, #8
 800faa4:	4770      	bx	lr
 800faa6:	4610      	mov	r0, r2
 800faa8:	e7fb      	b.n	800faa2 <__ascii_mbtowc+0x16>
 800faaa:	f06f 0001 	mvn.w	r0, #1
 800faae:	e7f8      	b.n	800faa2 <__ascii_mbtowc+0x16>

0800fab0 <memmove>:
 800fab0:	4288      	cmp	r0, r1
 800fab2:	b510      	push	{r4, lr}
 800fab4:	eb01 0402 	add.w	r4, r1, r2
 800fab8:	d902      	bls.n	800fac0 <memmove+0x10>
 800faba:	4284      	cmp	r4, r0
 800fabc:	4623      	mov	r3, r4
 800fabe:	d807      	bhi.n	800fad0 <memmove+0x20>
 800fac0:	1e43      	subs	r3, r0, #1
 800fac2:	42a1      	cmp	r1, r4
 800fac4:	d008      	beq.n	800fad8 <memmove+0x28>
 800fac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800faca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800face:	e7f8      	b.n	800fac2 <memmove+0x12>
 800fad0:	4402      	add	r2, r0
 800fad2:	4601      	mov	r1, r0
 800fad4:	428a      	cmp	r2, r1
 800fad6:	d100      	bne.n	800fada <memmove+0x2a>
 800fad8:	bd10      	pop	{r4, pc}
 800fada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fae2:	e7f7      	b.n	800fad4 <memmove+0x24>

0800fae4 <__malloc_lock>:
 800fae4:	4801      	ldr	r0, [pc, #4]	; (800faec <__malloc_lock+0x8>)
 800fae6:	f000 bc17 	b.w	8010318 <__retarget_lock_acquire_recursive>
 800faea:	bf00      	nop
 800faec:	240063c4 	.word	0x240063c4

0800faf0 <__malloc_unlock>:
 800faf0:	4801      	ldr	r0, [pc, #4]	; (800faf8 <__malloc_unlock+0x8>)
 800faf2:	f000 bc12 	b.w	801031a <__retarget_lock_release_recursive>
 800faf6:	bf00      	nop
 800faf8:	240063c4 	.word	0x240063c4

0800fafc <_realloc_r>:
 800fafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafe:	4607      	mov	r7, r0
 800fb00:	4614      	mov	r4, r2
 800fb02:	460e      	mov	r6, r1
 800fb04:	b921      	cbnz	r1, 800fb10 <_realloc_r+0x14>
 800fb06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb0a:	4611      	mov	r1, r2
 800fb0c:	f7ff bdc8 	b.w	800f6a0 <_malloc_r>
 800fb10:	b922      	cbnz	r2, 800fb1c <_realloc_r+0x20>
 800fb12:	f7ff fd75 	bl	800f600 <_free_r>
 800fb16:	4625      	mov	r5, r4
 800fb18:	4628      	mov	r0, r5
 800fb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb1c:	f000 fc62 	bl	80103e4 <_malloc_usable_size_r>
 800fb20:	42a0      	cmp	r0, r4
 800fb22:	d20f      	bcs.n	800fb44 <_realloc_r+0x48>
 800fb24:	4621      	mov	r1, r4
 800fb26:	4638      	mov	r0, r7
 800fb28:	f7ff fdba 	bl	800f6a0 <_malloc_r>
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d0f2      	beq.n	800fb18 <_realloc_r+0x1c>
 800fb32:	4631      	mov	r1, r6
 800fb34:	4622      	mov	r2, r4
 800fb36:	f7fd ff0d 	bl	800d954 <memcpy>
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	4638      	mov	r0, r7
 800fb3e:	f7ff fd5f 	bl	800f600 <_free_r>
 800fb42:	e7e9      	b.n	800fb18 <_realloc_r+0x1c>
 800fb44:	4635      	mov	r5, r6
 800fb46:	e7e7      	b.n	800fb18 <_realloc_r+0x1c>

0800fb48 <__sfputc_r>:
 800fb48:	6893      	ldr	r3, [r2, #8]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	b410      	push	{r4}
 800fb50:	6093      	str	r3, [r2, #8]
 800fb52:	da08      	bge.n	800fb66 <__sfputc_r+0x1e>
 800fb54:	6994      	ldr	r4, [r2, #24]
 800fb56:	42a3      	cmp	r3, r4
 800fb58:	db01      	blt.n	800fb5e <__sfputc_r+0x16>
 800fb5a:	290a      	cmp	r1, #10
 800fb5c:	d103      	bne.n	800fb66 <__sfputc_r+0x1e>
 800fb5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb62:	f000 b94b 	b.w	800fdfc <__swbuf_r>
 800fb66:	6813      	ldr	r3, [r2, #0]
 800fb68:	1c58      	adds	r0, r3, #1
 800fb6a:	6010      	str	r0, [r2, #0]
 800fb6c:	7019      	strb	r1, [r3, #0]
 800fb6e:	4608      	mov	r0, r1
 800fb70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <__sfputs_r>:
 800fb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb78:	4606      	mov	r6, r0
 800fb7a:	460f      	mov	r7, r1
 800fb7c:	4614      	mov	r4, r2
 800fb7e:	18d5      	adds	r5, r2, r3
 800fb80:	42ac      	cmp	r4, r5
 800fb82:	d101      	bne.n	800fb88 <__sfputs_r+0x12>
 800fb84:	2000      	movs	r0, #0
 800fb86:	e007      	b.n	800fb98 <__sfputs_r+0x22>
 800fb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb8c:	463a      	mov	r2, r7
 800fb8e:	4630      	mov	r0, r6
 800fb90:	f7ff ffda 	bl	800fb48 <__sfputc_r>
 800fb94:	1c43      	adds	r3, r0, #1
 800fb96:	d1f3      	bne.n	800fb80 <__sfputs_r+0xa>
 800fb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb9c <_vfiprintf_r>:
 800fb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	460d      	mov	r5, r1
 800fba2:	b09d      	sub	sp, #116	; 0x74
 800fba4:	4614      	mov	r4, r2
 800fba6:	4698      	mov	r8, r3
 800fba8:	4606      	mov	r6, r0
 800fbaa:	b118      	cbz	r0, 800fbb4 <_vfiprintf_r+0x18>
 800fbac:	6983      	ldr	r3, [r0, #24]
 800fbae:	b90b      	cbnz	r3, 800fbb4 <_vfiprintf_r+0x18>
 800fbb0:	f000 fb14 	bl	80101dc <__sinit>
 800fbb4:	4b89      	ldr	r3, [pc, #548]	; (800fddc <_vfiprintf_r+0x240>)
 800fbb6:	429d      	cmp	r5, r3
 800fbb8:	d11b      	bne.n	800fbf2 <_vfiprintf_r+0x56>
 800fbba:	6875      	ldr	r5, [r6, #4]
 800fbbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbbe:	07d9      	lsls	r1, r3, #31
 800fbc0:	d405      	bmi.n	800fbce <_vfiprintf_r+0x32>
 800fbc2:	89ab      	ldrh	r3, [r5, #12]
 800fbc4:	059a      	lsls	r2, r3, #22
 800fbc6:	d402      	bmi.n	800fbce <_vfiprintf_r+0x32>
 800fbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbca:	f000 fba5 	bl	8010318 <__retarget_lock_acquire_recursive>
 800fbce:	89ab      	ldrh	r3, [r5, #12]
 800fbd0:	071b      	lsls	r3, r3, #28
 800fbd2:	d501      	bpl.n	800fbd8 <_vfiprintf_r+0x3c>
 800fbd4:	692b      	ldr	r3, [r5, #16]
 800fbd6:	b9eb      	cbnz	r3, 800fc14 <_vfiprintf_r+0x78>
 800fbd8:	4629      	mov	r1, r5
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f000 f96e 	bl	800febc <__swsetup_r>
 800fbe0:	b1c0      	cbz	r0, 800fc14 <_vfiprintf_r+0x78>
 800fbe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbe4:	07dc      	lsls	r4, r3, #31
 800fbe6:	d50e      	bpl.n	800fc06 <_vfiprintf_r+0x6a>
 800fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbec:	b01d      	add	sp, #116	; 0x74
 800fbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf2:	4b7b      	ldr	r3, [pc, #492]	; (800fde0 <_vfiprintf_r+0x244>)
 800fbf4:	429d      	cmp	r5, r3
 800fbf6:	d101      	bne.n	800fbfc <_vfiprintf_r+0x60>
 800fbf8:	68b5      	ldr	r5, [r6, #8]
 800fbfa:	e7df      	b.n	800fbbc <_vfiprintf_r+0x20>
 800fbfc:	4b79      	ldr	r3, [pc, #484]	; (800fde4 <_vfiprintf_r+0x248>)
 800fbfe:	429d      	cmp	r5, r3
 800fc00:	bf08      	it	eq
 800fc02:	68f5      	ldreq	r5, [r6, #12]
 800fc04:	e7da      	b.n	800fbbc <_vfiprintf_r+0x20>
 800fc06:	89ab      	ldrh	r3, [r5, #12]
 800fc08:	0598      	lsls	r0, r3, #22
 800fc0a:	d4ed      	bmi.n	800fbe8 <_vfiprintf_r+0x4c>
 800fc0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc0e:	f000 fb84 	bl	801031a <__retarget_lock_release_recursive>
 800fc12:	e7e9      	b.n	800fbe8 <_vfiprintf_r+0x4c>
 800fc14:	2300      	movs	r3, #0
 800fc16:	9309      	str	r3, [sp, #36]	; 0x24
 800fc18:	2320      	movs	r3, #32
 800fc1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc22:	2330      	movs	r3, #48	; 0x30
 800fc24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fde8 <_vfiprintf_r+0x24c>
 800fc28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc2c:	f04f 0901 	mov.w	r9, #1
 800fc30:	4623      	mov	r3, r4
 800fc32:	469a      	mov	sl, r3
 800fc34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc38:	b10a      	cbz	r2, 800fc3e <_vfiprintf_r+0xa2>
 800fc3a:	2a25      	cmp	r2, #37	; 0x25
 800fc3c:	d1f9      	bne.n	800fc32 <_vfiprintf_r+0x96>
 800fc3e:	ebba 0b04 	subs.w	fp, sl, r4
 800fc42:	d00b      	beq.n	800fc5c <_vfiprintf_r+0xc0>
 800fc44:	465b      	mov	r3, fp
 800fc46:	4622      	mov	r2, r4
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7ff ff93 	bl	800fb76 <__sfputs_r>
 800fc50:	3001      	adds	r0, #1
 800fc52:	f000 80aa 	beq.w	800fdaa <_vfiprintf_r+0x20e>
 800fc56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc58:	445a      	add	r2, fp
 800fc5a:	9209      	str	r2, [sp, #36]	; 0x24
 800fc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f000 80a2 	beq.w	800fdaa <_vfiprintf_r+0x20e>
 800fc66:	2300      	movs	r3, #0
 800fc68:	f04f 32ff 	mov.w	r2, #4294967295
 800fc6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc70:	f10a 0a01 	add.w	sl, sl, #1
 800fc74:	9304      	str	r3, [sp, #16]
 800fc76:	9307      	str	r3, [sp, #28]
 800fc78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc7c:	931a      	str	r3, [sp, #104]	; 0x68
 800fc7e:	4654      	mov	r4, sl
 800fc80:	2205      	movs	r2, #5
 800fc82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc86:	4858      	ldr	r0, [pc, #352]	; (800fde8 <_vfiprintf_r+0x24c>)
 800fc88:	f7f0 fb32 	bl	80002f0 <memchr>
 800fc8c:	9a04      	ldr	r2, [sp, #16]
 800fc8e:	b9d8      	cbnz	r0, 800fcc8 <_vfiprintf_r+0x12c>
 800fc90:	06d1      	lsls	r1, r2, #27
 800fc92:	bf44      	itt	mi
 800fc94:	2320      	movmi	r3, #32
 800fc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc9a:	0713      	lsls	r3, r2, #28
 800fc9c:	bf44      	itt	mi
 800fc9e:	232b      	movmi	r3, #43	; 0x2b
 800fca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fca4:	f89a 3000 	ldrb.w	r3, [sl]
 800fca8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcaa:	d015      	beq.n	800fcd8 <_vfiprintf_r+0x13c>
 800fcac:	9a07      	ldr	r2, [sp, #28]
 800fcae:	4654      	mov	r4, sl
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	f04f 0c0a 	mov.w	ip, #10
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcbc:	3b30      	subs	r3, #48	; 0x30
 800fcbe:	2b09      	cmp	r3, #9
 800fcc0:	d94e      	bls.n	800fd60 <_vfiprintf_r+0x1c4>
 800fcc2:	b1b0      	cbz	r0, 800fcf2 <_vfiprintf_r+0x156>
 800fcc4:	9207      	str	r2, [sp, #28]
 800fcc6:	e014      	b.n	800fcf2 <_vfiprintf_r+0x156>
 800fcc8:	eba0 0308 	sub.w	r3, r0, r8
 800fccc:	fa09 f303 	lsl.w	r3, r9, r3
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	9304      	str	r3, [sp, #16]
 800fcd4:	46a2      	mov	sl, r4
 800fcd6:	e7d2      	b.n	800fc7e <_vfiprintf_r+0xe2>
 800fcd8:	9b03      	ldr	r3, [sp, #12]
 800fcda:	1d19      	adds	r1, r3, #4
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	9103      	str	r1, [sp, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	bfbb      	ittet	lt
 800fce4:	425b      	neglt	r3, r3
 800fce6:	f042 0202 	orrlt.w	r2, r2, #2
 800fcea:	9307      	strge	r3, [sp, #28]
 800fcec:	9307      	strlt	r3, [sp, #28]
 800fcee:	bfb8      	it	lt
 800fcf0:	9204      	strlt	r2, [sp, #16]
 800fcf2:	7823      	ldrb	r3, [r4, #0]
 800fcf4:	2b2e      	cmp	r3, #46	; 0x2e
 800fcf6:	d10c      	bne.n	800fd12 <_vfiprintf_r+0x176>
 800fcf8:	7863      	ldrb	r3, [r4, #1]
 800fcfa:	2b2a      	cmp	r3, #42	; 0x2a
 800fcfc:	d135      	bne.n	800fd6a <_vfiprintf_r+0x1ce>
 800fcfe:	9b03      	ldr	r3, [sp, #12]
 800fd00:	1d1a      	adds	r2, r3, #4
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	9203      	str	r2, [sp, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	bfb8      	it	lt
 800fd0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd0e:	3402      	adds	r4, #2
 800fd10:	9305      	str	r3, [sp, #20]
 800fd12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fdf8 <_vfiprintf_r+0x25c>
 800fd16:	7821      	ldrb	r1, [r4, #0]
 800fd18:	2203      	movs	r2, #3
 800fd1a:	4650      	mov	r0, sl
 800fd1c:	f7f0 fae8 	bl	80002f0 <memchr>
 800fd20:	b140      	cbz	r0, 800fd34 <_vfiprintf_r+0x198>
 800fd22:	2340      	movs	r3, #64	; 0x40
 800fd24:	eba0 000a 	sub.w	r0, r0, sl
 800fd28:	fa03 f000 	lsl.w	r0, r3, r0
 800fd2c:	9b04      	ldr	r3, [sp, #16]
 800fd2e:	4303      	orrs	r3, r0
 800fd30:	3401      	adds	r4, #1
 800fd32:	9304      	str	r3, [sp, #16]
 800fd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd38:	482c      	ldr	r0, [pc, #176]	; (800fdec <_vfiprintf_r+0x250>)
 800fd3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd3e:	2206      	movs	r2, #6
 800fd40:	f7f0 fad6 	bl	80002f0 <memchr>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d03f      	beq.n	800fdc8 <_vfiprintf_r+0x22c>
 800fd48:	4b29      	ldr	r3, [pc, #164]	; (800fdf0 <_vfiprintf_r+0x254>)
 800fd4a:	bb1b      	cbnz	r3, 800fd94 <_vfiprintf_r+0x1f8>
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	3307      	adds	r3, #7
 800fd50:	f023 0307 	bic.w	r3, r3, #7
 800fd54:	3308      	adds	r3, #8
 800fd56:	9303      	str	r3, [sp, #12]
 800fd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd5a:	443b      	add	r3, r7
 800fd5c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd5e:	e767      	b.n	800fc30 <_vfiprintf_r+0x94>
 800fd60:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd64:	460c      	mov	r4, r1
 800fd66:	2001      	movs	r0, #1
 800fd68:	e7a5      	b.n	800fcb6 <_vfiprintf_r+0x11a>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	3401      	adds	r4, #1
 800fd6e:	9305      	str	r3, [sp, #20]
 800fd70:	4619      	mov	r1, r3
 800fd72:	f04f 0c0a 	mov.w	ip, #10
 800fd76:	4620      	mov	r0, r4
 800fd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd7c:	3a30      	subs	r2, #48	; 0x30
 800fd7e:	2a09      	cmp	r2, #9
 800fd80:	d903      	bls.n	800fd8a <_vfiprintf_r+0x1ee>
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d0c5      	beq.n	800fd12 <_vfiprintf_r+0x176>
 800fd86:	9105      	str	r1, [sp, #20]
 800fd88:	e7c3      	b.n	800fd12 <_vfiprintf_r+0x176>
 800fd8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd8e:	4604      	mov	r4, r0
 800fd90:	2301      	movs	r3, #1
 800fd92:	e7f0      	b.n	800fd76 <_vfiprintf_r+0x1da>
 800fd94:	ab03      	add	r3, sp, #12
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	462a      	mov	r2, r5
 800fd9a:	4b16      	ldr	r3, [pc, #88]	; (800fdf4 <_vfiprintf_r+0x258>)
 800fd9c:	a904      	add	r1, sp, #16
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f7fd fe7e 	bl	800daa0 <_printf_float>
 800fda4:	4607      	mov	r7, r0
 800fda6:	1c78      	adds	r0, r7, #1
 800fda8:	d1d6      	bne.n	800fd58 <_vfiprintf_r+0x1bc>
 800fdaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdac:	07d9      	lsls	r1, r3, #31
 800fdae:	d405      	bmi.n	800fdbc <_vfiprintf_r+0x220>
 800fdb0:	89ab      	ldrh	r3, [r5, #12]
 800fdb2:	059a      	lsls	r2, r3, #22
 800fdb4:	d402      	bmi.n	800fdbc <_vfiprintf_r+0x220>
 800fdb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdb8:	f000 faaf 	bl	801031a <__retarget_lock_release_recursive>
 800fdbc:	89ab      	ldrh	r3, [r5, #12]
 800fdbe:	065b      	lsls	r3, r3, #25
 800fdc0:	f53f af12 	bmi.w	800fbe8 <_vfiprintf_r+0x4c>
 800fdc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdc6:	e711      	b.n	800fbec <_vfiprintf_r+0x50>
 800fdc8:	ab03      	add	r3, sp, #12
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	462a      	mov	r2, r5
 800fdce:	4b09      	ldr	r3, [pc, #36]	; (800fdf4 <_vfiprintf_r+0x258>)
 800fdd0:	a904      	add	r1, sp, #16
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7fe f8f0 	bl	800dfb8 <_printf_i>
 800fdd8:	e7e4      	b.n	800fda4 <_vfiprintf_r+0x208>
 800fdda:	bf00      	nop
 800fddc:	08011794 	.word	0x08011794
 800fde0:	080117b4 	.word	0x080117b4
 800fde4:	08011774 	.word	0x08011774
 800fde8:	0801161c 	.word	0x0801161c
 800fdec:	08011626 	.word	0x08011626
 800fdf0:	0800daa1 	.word	0x0800daa1
 800fdf4:	0800fb77 	.word	0x0800fb77
 800fdf8:	08011622 	.word	0x08011622

0800fdfc <__swbuf_r>:
 800fdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfe:	460e      	mov	r6, r1
 800fe00:	4614      	mov	r4, r2
 800fe02:	4605      	mov	r5, r0
 800fe04:	b118      	cbz	r0, 800fe0e <__swbuf_r+0x12>
 800fe06:	6983      	ldr	r3, [r0, #24]
 800fe08:	b90b      	cbnz	r3, 800fe0e <__swbuf_r+0x12>
 800fe0a:	f000 f9e7 	bl	80101dc <__sinit>
 800fe0e:	4b21      	ldr	r3, [pc, #132]	; (800fe94 <__swbuf_r+0x98>)
 800fe10:	429c      	cmp	r4, r3
 800fe12:	d12b      	bne.n	800fe6c <__swbuf_r+0x70>
 800fe14:	686c      	ldr	r4, [r5, #4]
 800fe16:	69a3      	ldr	r3, [r4, #24]
 800fe18:	60a3      	str	r3, [r4, #8]
 800fe1a:	89a3      	ldrh	r3, [r4, #12]
 800fe1c:	071a      	lsls	r2, r3, #28
 800fe1e:	d52f      	bpl.n	800fe80 <__swbuf_r+0x84>
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	b36b      	cbz	r3, 800fe80 <__swbuf_r+0x84>
 800fe24:	6923      	ldr	r3, [r4, #16]
 800fe26:	6820      	ldr	r0, [r4, #0]
 800fe28:	1ac0      	subs	r0, r0, r3
 800fe2a:	6963      	ldr	r3, [r4, #20]
 800fe2c:	b2f6      	uxtb	r6, r6
 800fe2e:	4283      	cmp	r3, r0
 800fe30:	4637      	mov	r7, r6
 800fe32:	dc04      	bgt.n	800fe3e <__swbuf_r+0x42>
 800fe34:	4621      	mov	r1, r4
 800fe36:	4628      	mov	r0, r5
 800fe38:	f000 f93c 	bl	80100b4 <_fflush_r>
 800fe3c:	bb30      	cbnz	r0, 800fe8c <__swbuf_r+0x90>
 800fe3e:	68a3      	ldr	r3, [r4, #8]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	60a3      	str	r3, [r4, #8]
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	6022      	str	r2, [r4, #0]
 800fe4a:	701e      	strb	r6, [r3, #0]
 800fe4c:	6963      	ldr	r3, [r4, #20]
 800fe4e:	3001      	adds	r0, #1
 800fe50:	4283      	cmp	r3, r0
 800fe52:	d004      	beq.n	800fe5e <__swbuf_r+0x62>
 800fe54:	89a3      	ldrh	r3, [r4, #12]
 800fe56:	07db      	lsls	r3, r3, #31
 800fe58:	d506      	bpl.n	800fe68 <__swbuf_r+0x6c>
 800fe5a:	2e0a      	cmp	r6, #10
 800fe5c:	d104      	bne.n	800fe68 <__swbuf_r+0x6c>
 800fe5e:	4621      	mov	r1, r4
 800fe60:	4628      	mov	r0, r5
 800fe62:	f000 f927 	bl	80100b4 <_fflush_r>
 800fe66:	b988      	cbnz	r0, 800fe8c <__swbuf_r+0x90>
 800fe68:	4638      	mov	r0, r7
 800fe6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <__swbuf_r+0x9c>)
 800fe6e:	429c      	cmp	r4, r3
 800fe70:	d101      	bne.n	800fe76 <__swbuf_r+0x7a>
 800fe72:	68ac      	ldr	r4, [r5, #8]
 800fe74:	e7cf      	b.n	800fe16 <__swbuf_r+0x1a>
 800fe76:	4b09      	ldr	r3, [pc, #36]	; (800fe9c <__swbuf_r+0xa0>)
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	bf08      	it	eq
 800fe7c:	68ec      	ldreq	r4, [r5, #12]
 800fe7e:	e7ca      	b.n	800fe16 <__swbuf_r+0x1a>
 800fe80:	4621      	mov	r1, r4
 800fe82:	4628      	mov	r0, r5
 800fe84:	f000 f81a 	bl	800febc <__swsetup_r>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d0cb      	beq.n	800fe24 <__swbuf_r+0x28>
 800fe8c:	f04f 37ff 	mov.w	r7, #4294967295
 800fe90:	e7ea      	b.n	800fe68 <__swbuf_r+0x6c>
 800fe92:	bf00      	nop
 800fe94:	08011794 	.word	0x08011794
 800fe98:	080117b4 	.word	0x080117b4
 800fe9c:	08011774 	.word	0x08011774

0800fea0 <__ascii_wctomb>:
 800fea0:	b149      	cbz	r1, 800feb6 <__ascii_wctomb+0x16>
 800fea2:	2aff      	cmp	r2, #255	; 0xff
 800fea4:	bf85      	ittet	hi
 800fea6:	238a      	movhi	r3, #138	; 0x8a
 800fea8:	6003      	strhi	r3, [r0, #0]
 800feaa:	700a      	strbls	r2, [r1, #0]
 800feac:	f04f 30ff 	movhi.w	r0, #4294967295
 800feb0:	bf98      	it	ls
 800feb2:	2001      	movls	r0, #1
 800feb4:	4770      	bx	lr
 800feb6:	4608      	mov	r0, r1
 800feb8:	4770      	bx	lr
	...

0800febc <__swsetup_r>:
 800febc:	4b32      	ldr	r3, [pc, #200]	; (800ff88 <__swsetup_r+0xcc>)
 800febe:	b570      	push	{r4, r5, r6, lr}
 800fec0:	681d      	ldr	r5, [r3, #0]
 800fec2:	4606      	mov	r6, r0
 800fec4:	460c      	mov	r4, r1
 800fec6:	b125      	cbz	r5, 800fed2 <__swsetup_r+0x16>
 800fec8:	69ab      	ldr	r3, [r5, #24]
 800feca:	b913      	cbnz	r3, 800fed2 <__swsetup_r+0x16>
 800fecc:	4628      	mov	r0, r5
 800fece:	f000 f985 	bl	80101dc <__sinit>
 800fed2:	4b2e      	ldr	r3, [pc, #184]	; (800ff8c <__swsetup_r+0xd0>)
 800fed4:	429c      	cmp	r4, r3
 800fed6:	d10f      	bne.n	800fef8 <__swsetup_r+0x3c>
 800fed8:	686c      	ldr	r4, [r5, #4]
 800feda:	89a3      	ldrh	r3, [r4, #12]
 800fedc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fee0:	0719      	lsls	r1, r3, #28
 800fee2:	d42c      	bmi.n	800ff3e <__swsetup_r+0x82>
 800fee4:	06dd      	lsls	r5, r3, #27
 800fee6:	d411      	bmi.n	800ff0c <__swsetup_r+0x50>
 800fee8:	2309      	movs	r3, #9
 800feea:	6033      	str	r3, [r6, #0]
 800feec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	e03e      	b.n	800ff76 <__swsetup_r+0xba>
 800fef8:	4b25      	ldr	r3, [pc, #148]	; (800ff90 <__swsetup_r+0xd4>)
 800fefa:	429c      	cmp	r4, r3
 800fefc:	d101      	bne.n	800ff02 <__swsetup_r+0x46>
 800fefe:	68ac      	ldr	r4, [r5, #8]
 800ff00:	e7eb      	b.n	800feda <__swsetup_r+0x1e>
 800ff02:	4b24      	ldr	r3, [pc, #144]	; (800ff94 <__swsetup_r+0xd8>)
 800ff04:	429c      	cmp	r4, r3
 800ff06:	bf08      	it	eq
 800ff08:	68ec      	ldreq	r4, [r5, #12]
 800ff0a:	e7e6      	b.n	800feda <__swsetup_r+0x1e>
 800ff0c:	0758      	lsls	r0, r3, #29
 800ff0e:	d512      	bpl.n	800ff36 <__swsetup_r+0x7a>
 800ff10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff12:	b141      	cbz	r1, 800ff26 <__swsetup_r+0x6a>
 800ff14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff18:	4299      	cmp	r1, r3
 800ff1a:	d002      	beq.n	800ff22 <__swsetup_r+0x66>
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	f7ff fb6f 	bl	800f600 <_free_r>
 800ff22:	2300      	movs	r3, #0
 800ff24:	6363      	str	r3, [r4, #52]	; 0x34
 800ff26:	89a3      	ldrh	r3, [r4, #12]
 800ff28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff2c:	81a3      	strh	r3, [r4, #12]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	6063      	str	r3, [r4, #4]
 800ff32:	6923      	ldr	r3, [r4, #16]
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	89a3      	ldrh	r3, [r4, #12]
 800ff38:	f043 0308 	orr.w	r3, r3, #8
 800ff3c:	81a3      	strh	r3, [r4, #12]
 800ff3e:	6923      	ldr	r3, [r4, #16]
 800ff40:	b94b      	cbnz	r3, 800ff56 <__swsetup_r+0x9a>
 800ff42:	89a3      	ldrh	r3, [r4, #12]
 800ff44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff4c:	d003      	beq.n	800ff56 <__swsetup_r+0x9a>
 800ff4e:	4621      	mov	r1, r4
 800ff50:	4630      	mov	r0, r6
 800ff52:	f000 fa07 	bl	8010364 <__smakebuf_r>
 800ff56:	89a0      	ldrh	r0, [r4, #12]
 800ff58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff5c:	f010 0301 	ands.w	r3, r0, #1
 800ff60:	d00a      	beq.n	800ff78 <__swsetup_r+0xbc>
 800ff62:	2300      	movs	r3, #0
 800ff64:	60a3      	str	r3, [r4, #8]
 800ff66:	6963      	ldr	r3, [r4, #20]
 800ff68:	425b      	negs	r3, r3
 800ff6a:	61a3      	str	r3, [r4, #24]
 800ff6c:	6923      	ldr	r3, [r4, #16]
 800ff6e:	b943      	cbnz	r3, 800ff82 <__swsetup_r+0xc6>
 800ff70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff74:	d1ba      	bne.n	800feec <__swsetup_r+0x30>
 800ff76:	bd70      	pop	{r4, r5, r6, pc}
 800ff78:	0781      	lsls	r1, r0, #30
 800ff7a:	bf58      	it	pl
 800ff7c:	6963      	ldrpl	r3, [r4, #20]
 800ff7e:	60a3      	str	r3, [r4, #8]
 800ff80:	e7f4      	b.n	800ff6c <__swsetup_r+0xb0>
 800ff82:	2000      	movs	r0, #0
 800ff84:	e7f7      	b.n	800ff76 <__swsetup_r+0xba>
 800ff86:	bf00      	nop
 800ff88:	24000010 	.word	0x24000010
 800ff8c:	08011794 	.word	0x08011794
 800ff90:	080117b4 	.word	0x080117b4
 800ff94:	08011774 	.word	0x08011774

0800ff98 <abort>:
 800ff98:	b508      	push	{r3, lr}
 800ff9a:	2006      	movs	r0, #6
 800ff9c:	f000 fa52 	bl	8010444 <raise>
 800ffa0:	2001      	movs	r0, #1
 800ffa2:	f7f1 fdcb 	bl	8001b3c <_exit>
	...

0800ffa8 <__sflush_r>:
 800ffa8:	898a      	ldrh	r2, [r1, #12]
 800ffaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffae:	4605      	mov	r5, r0
 800ffb0:	0710      	lsls	r0, r2, #28
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	d458      	bmi.n	8010068 <__sflush_r+0xc0>
 800ffb6:	684b      	ldr	r3, [r1, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	dc05      	bgt.n	800ffc8 <__sflush_r+0x20>
 800ffbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dc02      	bgt.n	800ffc8 <__sflush_r+0x20>
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffca:	2e00      	cmp	r6, #0
 800ffcc:	d0f9      	beq.n	800ffc2 <__sflush_r+0x1a>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffd4:	682f      	ldr	r7, [r5, #0]
 800ffd6:	602b      	str	r3, [r5, #0]
 800ffd8:	d032      	beq.n	8010040 <__sflush_r+0x98>
 800ffda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	075a      	lsls	r2, r3, #29
 800ffe0:	d505      	bpl.n	800ffee <__sflush_r+0x46>
 800ffe2:	6863      	ldr	r3, [r4, #4]
 800ffe4:	1ac0      	subs	r0, r0, r3
 800ffe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffe8:	b10b      	cbz	r3, 800ffee <__sflush_r+0x46>
 800ffea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffec:	1ac0      	subs	r0, r0, r3
 800ffee:	2300      	movs	r3, #0
 800fff0:	4602      	mov	r2, r0
 800fff2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fff4:	6a21      	ldr	r1, [r4, #32]
 800fff6:	4628      	mov	r0, r5
 800fff8:	47b0      	blx	r6
 800fffa:	1c43      	adds	r3, r0, #1
 800fffc:	89a3      	ldrh	r3, [r4, #12]
 800fffe:	d106      	bne.n	801000e <__sflush_r+0x66>
 8010000:	6829      	ldr	r1, [r5, #0]
 8010002:	291d      	cmp	r1, #29
 8010004:	d82c      	bhi.n	8010060 <__sflush_r+0xb8>
 8010006:	4a2a      	ldr	r2, [pc, #168]	; (80100b0 <__sflush_r+0x108>)
 8010008:	40ca      	lsrs	r2, r1
 801000a:	07d6      	lsls	r6, r2, #31
 801000c:	d528      	bpl.n	8010060 <__sflush_r+0xb8>
 801000e:	2200      	movs	r2, #0
 8010010:	6062      	str	r2, [r4, #4]
 8010012:	04d9      	lsls	r1, r3, #19
 8010014:	6922      	ldr	r2, [r4, #16]
 8010016:	6022      	str	r2, [r4, #0]
 8010018:	d504      	bpl.n	8010024 <__sflush_r+0x7c>
 801001a:	1c42      	adds	r2, r0, #1
 801001c:	d101      	bne.n	8010022 <__sflush_r+0x7a>
 801001e:	682b      	ldr	r3, [r5, #0]
 8010020:	b903      	cbnz	r3, 8010024 <__sflush_r+0x7c>
 8010022:	6560      	str	r0, [r4, #84]	; 0x54
 8010024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010026:	602f      	str	r7, [r5, #0]
 8010028:	2900      	cmp	r1, #0
 801002a:	d0ca      	beq.n	800ffc2 <__sflush_r+0x1a>
 801002c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010030:	4299      	cmp	r1, r3
 8010032:	d002      	beq.n	801003a <__sflush_r+0x92>
 8010034:	4628      	mov	r0, r5
 8010036:	f7ff fae3 	bl	800f600 <_free_r>
 801003a:	2000      	movs	r0, #0
 801003c:	6360      	str	r0, [r4, #52]	; 0x34
 801003e:	e7c1      	b.n	800ffc4 <__sflush_r+0x1c>
 8010040:	6a21      	ldr	r1, [r4, #32]
 8010042:	2301      	movs	r3, #1
 8010044:	4628      	mov	r0, r5
 8010046:	47b0      	blx	r6
 8010048:	1c41      	adds	r1, r0, #1
 801004a:	d1c7      	bne.n	800ffdc <__sflush_r+0x34>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d0c4      	beq.n	800ffdc <__sflush_r+0x34>
 8010052:	2b1d      	cmp	r3, #29
 8010054:	d001      	beq.n	801005a <__sflush_r+0xb2>
 8010056:	2b16      	cmp	r3, #22
 8010058:	d101      	bne.n	801005e <__sflush_r+0xb6>
 801005a:	602f      	str	r7, [r5, #0]
 801005c:	e7b1      	b.n	800ffc2 <__sflush_r+0x1a>
 801005e:	89a3      	ldrh	r3, [r4, #12]
 8010060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010064:	81a3      	strh	r3, [r4, #12]
 8010066:	e7ad      	b.n	800ffc4 <__sflush_r+0x1c>
 8010068:	690f      	ldr	r7, [r1, #16]
 801006a:	2f00      	cmp	r7, #0
 801006c:	d0a9      	beq.n	800ffc2 <__sflush_r+0x1a>
 801006e:	0793      	lsls	r3, r2, #30
 8010070:	680e      	ldr	r6, [r1, #0]
 8010072:	bf08      	it	eq
 8010074:	694b      	ldreq	r3, [r1, #20]
 8010076:	600f      	str	r7, [r1, #0]
 8010078:	bf18      	it	ne
 801007a:	2300      	movne	r3, #0
 801007c:	eba6 0807 	sub.w	r8, r6, r7
 8010080:	608b      	str	r3, [r1, #8]
 8010082:	f1b8 0f00 	cmp.w	r8, #0
 8010086:	dd9c      	ble.n	800ffc2 <__sflush_r+0x1a>
 8010088:	6a21      	ldr	r1, [r4, #32]
 801008a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801008c:	4643      	mov	r3, r8
 801008e:	463a      	mov	r2, r7
 8010090:	4628      	mov	r0, r5
 8010092:	47b0      	blx	r6
 8010094:	2800      	cmp	r0, #0
 8010096:	dc06      	bgt.n	80100a6 <__sflush_r+0xfe>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801009e:	81a3      	strh	r3, [r4, #12]
 80100a0:	f04f 30ff 	mov.w	r0, #4294967295
 80100a4:	e78e      	b.n	800ffc4 <__sflush_r+0x1c>
 80100a6:	4407      	add	r7, r0
 80100a8:	eba8 0800 	sub.w	r8, r8, r0
 80100ac:	e7e9      	b.n	8010082 <__sflush_r+0xda>
 80100ae:	bf00      	nop
 80100b0:	20400001 	.word	0x20400001

080100b4 <_fflush_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	690b      	ldr	r3, [r1, #16]
 80100b8:	4605      	mov	r5, r0
 80100ba:	460c      	mov	r4, r1
 80100bc:	b913      	cbnz	r3, 80100c4 <_fflush_r+0x10>
 80100be:	2500      	movs	r5, #0
 80100c0:	4628      	mov	r0, r5
 80100c2:	bd38      	pop	{r3, r4, r5, pc}
 80100c4:	b118      	cbz	r0, 80100ce <_fflush_r+0x1a>
 80100c6:	6983      	ldr	r3, [r0, #24]
 80100c8:	b90b      	cbnz	r3, 80100ce <_fflush_r+0x1a>
 80100ca:	f000 f887 	bl	80101dc <__sinit>
 80100ce:	4b14      	ldr	r3, [pc, #80]	; (8010120 <_fflush_r+0x6c>)
 80100d0:	429c      	cmp	r4, r3
 80100d2:	d11b      	bne.n	801010c <_fflush_r+0x58>
 80100d4:	686c      	ldr	r4, [r5, #4]
 80100d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d0ef      	beq.n	80100be <_fflush_r+0xa>
 80100de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100e0:	07d0      	lsls	r0, r2, #31
 80100e2:	d404      	bmi.n	80100ee <_fflush_r+0x3a>
 80100e4:	0599      	lsls	r1, r3, #22
 80100e6:	d402      	bmi.n	80100ee <_fflush_r+0x3a>
 80100e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ea:	f000 f915 	bl	8010318 <__retarget_lock_acquire_recursive>
 80100ee:	4628      	mov	r0, r5
 80100f0:	4621      	mov	r1, r4
 80100f2:	f7ff ff59 	bl	800ffa8 <__sflush_r>
 80100f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100f8:	07da      	lsls	r2, r3, #31
 80100fa:	4605      	mov	r5, r0
 80100fc:	d4e0      	bmi.n	80100c0 <_fflush_r+0xc>
 80100fe:	89a3      	ldrh	r3, [r4, #12]
 8010100:	059b      	lsls	r3, r3, #22
 8010102:	d4dd      	bmi.n	80100c0 <_fflush_r+0xc>
 8010104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010106:	f000 f908 	bl	801031a <__retarget_lock_release_recursive>
 801010a:	e7d9      	b.n	80100c0 <_fflush_r+0xc>
 801010c:	4b05      	ldr	r3, [pc, #20]	; (8010124 <_fflush_r+0x70>)
 801010e:	429c      	cmp	r4, r3
 8010110:	d101      	bne.n	8010116 <_fflush_r+0x62>
 8010112:	68ac      	ldr	r4, [r5, #8]
 8010114:	e7df      	b.n	80100d6 <_fflush_r+0x22>
 8010116:	4b04      	ldr	r3, [pc, #16]	; (8010128 <_fflush_r+0x74>)
 8010118:	429c      	cmp	r4, r3
 801011a:	bf08      	it	eq
 801011c:	68ec      	ldreq	r4, [r5, #12]
 801011e:	e7da      	b.n	80100d6 <_fflush_r+0x22>
 8010120:	08011794 	.word	0x08011794
 8010124:	080117b4 	.word	0x080117b4
 8010128:	08011774 	.word	0x08011774

0801012c <std>:
 801012c:	2300      	movs	r3, #0
 801012e:	b510      	push	{r4, lr}
 8010130:	4604      	mov	r4, r0
 8010132:	e9c0 3300 	strd	r3, r3, [r0]
 8010136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801013a:	6083      	str	r3, [r0, #8]
 801013c:	8181      	strh	r1, [r0, #12]
 801013e:	6643      	str	r3, [r0, #100]	; 0x64
 8010140:	81c2      	strh	r2, [r0, #14]
 8010142:	6183      	str	r3, [r0, #24]
 8010144:	4619      	mov	r1, r3
 8010146:	2208      	movs	r2, #8
 8010148:	305c      	adds	r0, #92	; 0x5c
 801014a:	f7fd fc11 	bl	800d970 <memset>
 801014e:	4b05      	ldr	r3, [pc, #20]	; (8010164 <std+0x38>)
 8010150:	6263      	str	r3, [r4, #36]	; 0x24
 8010152:	4b05      	ldr	r3, [pc, #20]	; (8010168 <std+0x3c>)
 8010154:	62a3      	str	r3, [r4, #40]	; 0x28
 8010156:	4b05      	ldr	r3, [pc, #20]	; (801016c <std+0x40>)
 8010158:	62e3      	str	r3, [r4, #44]	; 0x2c
 801015a:	4b05      	ldr	r3, [pc, #20]	; (8010170 <std+0x44>)
 801015c:	6224      	str	r4, [r4, #32]
 801015e:	6323      	str	r3, [r4, #48]	; 0x30
 8010160:	bd10      	pop	{r4, pc}
 8010162:	bf00      	nop
 8010164:	0801047d 	.word	0x0801047d
 8010168:	0801049f 	.word	0x0801049f
 801016c:	080104d7 	.word	0x080104d7
 8010170:	080104fb 	.word	0x080104fb

08010174 <_cleanup_r>:
 8010174:	4901      	ldr	r1, [pc, #4]	; (801017c <_cleanup_r+0x8>)
 8010176:	f000 b8af 	b.w	80102d8 <_fwalk_reent>
 801017a:	bf00      	nop
 801017c:	080100b5 	.word	0x080100b5

08010180 <__sfmoreglue>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	1e4a      	subs	r2, r1, #1
 8010184:	2568      	movs	r5, #104	; 0x68
 8010186:	4355      	muls	r5, r2
 8010188:	460e      	mov	r6, r1
 801018a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801018e:	f7ff fa87 	bl	800f6a0 <_malloc_r>
 8010192:	4604      	mov	r4, r0
 8010194:	b140      	cbz	r0, 80101a8 <__sfmoreglue+0x28>
 8010196:	2100      	movs	r1, #0
 8010198:	e9c0 1600 	strd	r1, r6, [r0]
 801019c:	300c      	adds	r0, #12
 801019e:	60a0      	str	r0, [r4, #8]
 80101a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80101a4:	f7fd fbe4 	bl	800d970 <memset>
 80101a8:	4620      	mov	r0, r4
 80101aa:	bd70      	pop	{r4, r5, r6, pc}

080101ac <__sfp_lock_acquire>:
 80101ac:	4801      	ldr	r0, [pc, #4]	; (80101b4 <__sfp_lock_acquire+0x8>)
 80101ae:	f000 b8b3 	b.w	8010318 <__retarget_lock_acquire_recursive>
 80101b2:	bf00      	nop
 80101b4:	240063c8 	.word	0x240063c8

080101b8 <__sfp_lock_release>:
 80101b8:	4801      	ldr	r0, [pc, #4]	; (80101c0 <__sfp_lock_release+0x8>)
 80101ba:	f000 b8ae 	b.w	801031a <__retarget_lock_release_recursive>
 80101be:	bf00      	nop
 80101c0:	240063c8 	.word	0x240063c8

080101c4 <__sinit_lock_acquire>:
 80101c4:	4801      	ldr	r0, [pc, #4]	; (80101cc <__sinit_lock_acquire+0x8>)
 80101c6:	f000 b8a7 	b.w	8010318 <__retarget_lock_acquire_recursive>
 80101ca:	bf00      	nop
 80101cc:	240063c3 	.word	0x240063c3

080101d0 <__sinit_lock_release>:
 80101d0:	4801      	ldr	r0, [pc, #4]	; (80101d8 <__sinit_lock_release+0x8>)
 80101d2:	f000 b8a2 	b.w	801031a <__retarget_lock_release_recursive>
 80101d6:	bf00      	nop
 80101d8:	240063c3 	.word	0x240063c3

080101dc <__sinit>:
 80101dc:	b510      	push	{r4, lr}
 80101de:	4604      	mov	r4, r0
 80101e0:	f7ff fff0 	bl	80101c4 <__sinit_lock_acquire>
 80101e4:	69a3      	ldr	r3, [r4, #24]
 80101e6:	b11b      	cbz	r3, 80101f0 <__sinit+0x14>
 80101e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101ec:	f7ff bff0 	b.w	80101d0 <__sinit_lock_release>
 80101f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80101f4:	6523      	str	r3, [r4, #80]	; 0x50
 80101f6:	4b13      	ldr	r3, [pc, #76]	; (8010244 <__sinit+0x68>)
 80101f8:	4a13      	ldr	r2, [pc, #76]	; (8010248 <__sinit+0x6c>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80101fe:	42a3      	cmp	r3, r4
 8010200:	bf04      	itt	eq
 8010202:	2301      	moveq	r3, #1
 8010204:	61a3      	streq	r3, [r4, #24]
 8010206:	4620      	mov	r0, r4
 8010208:	f000 f820 	bl	801024c <__sfp>
 801020c:	6060      	str	r0, [r4, #4]
 801020e:	4620      	mov	r0, r4
 8010210:	f000 f81c 	bl	801024c <__sfp>
 8010214:	60a0      	str	r0, [r4, #8]
 8010216:	4620      	mov	r0, r4
 8010218:	f000 f818 	bl	801024c <__sfp>
 801021c:	2200      	movs	r2, #0
 801021e:	60e0      	str	r0, [r4, #12]
 8010220:	2104      	movs	r1, #4
 8010222:	6860      	ldr	r0, [r4, #4]
 8010224:	f7ff ff82 	bl	801012c <std>
 8010228:	68a0      	ldr	r0, [r4, #8]
 801022a:	2201      	movs	r2, #1
 801022c:	2109      	movs	r1, #9
 801022e:	f7ff ff7d 	bl	801012c <std>
 8010232:	68e0      	ldr	r0, [r4, #12]
 8010234:	2202      	movs	r2, #2
 8010236:	2112      	movs	r1, #18
 8010238:	f7ff ff78 	bl	801012c <std>
 801023c:	2301      	movs	r3, #1
 801023e:	61a3      	str	r3, [r4, #24]
 8010240:	e7d2      	b.n	80101e8 <__sinit+0xc>
 8010242:	bf00      	nop
 8010244:	080113f0 	.word	0x080113f0
 8010248:	08010175 	.word	0x08010175

0801024c <__sfp>:
 801024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024e:	4607      	mov	r7, r0
 8010250:	f7ff ffac 	bl	80101ac <__sfp_lock_acquire>
 8010254:	4b1e      	ldr	r3, [pc, #120]	; (80102d0 <__sfp+0x84>)
 8010256:	681e      	ldr	r6, [r3, #0]
 8010258:	69b3      	ldr	r3, [r6, #24]
 801025a:	b913      	cbnz	r3, 8010262 <__sfp+0x16>
 801025c:	4630      	mov	r0, r6
 801025e:	f7ff ffbd 	bl	80101dc <__sinit>
 8010262:	3648      	adds	r6, #72	; 0x48
 8010264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010268:	3b01      	subs	r3, #1
 801026a:	d503      	bpl.n	8010274 <__sfp+0x28>
 801026c:	6833      	ldr	r3, [r6, #0]
 801026e:	b30b      	cbz	r3, 80102b4 <__sfp+0x68>
 8010270:	6836      	ldr	r6, [r6, #0]
 8010272:	e7f7      	b.n	8010264 <__sfp+0x18>
 8010274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010278:	b9d5      	cbnz	r5, 80102b0 <__sfp+0x64>
 801027a:	4b16      	ldr	r3, [pc, #88]	; (80102d4 <__sfp+0x88>)
 801027c:	60e3      	str	r3, [r4, #12]
 801027e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010282:	6665      	str	r5, [r4, #100]	; 0x64
 8010284:	f000 f847 	bl	8010316 <__retarget_lock_init_recursive>
 8010288:	f7ff ff96 	bl	80101b8 <__sfp_lock_release>
 801028c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010294:	6025      	str	r5, [r4, #0]
 8010296:	61a5      	str	r5, [r4, #24]
 8010298:	2208      	movs	r2, #8
 801029a:	4629      	mov	r1, r5
 801029c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80102a0:	f7fd fb66 	bl	800d970 <memset>
 80102a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80102a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80102ac:	4620      	mov	r0, r4
 80102ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102b0:	3468      	adds	r4, #104	; 0x68
 80102b2:	e7d9      	b.n	8010268 <__sfp+0x1c>
 80102b4:	2104      	movs	r1, #4
 80102b6:	4638      	mov	r0, r7
 80102b8:	f7ff ff62 	bl	8010180 <__sfmoreglue>
 80102bc:	4604      	mov	r4, r0
 80102be:	6030      	str	r0, [r6, #0]
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d1d5      	bne.n	8010270 <__sfp+0x24>
 80102c4:	f7ff ff78 	bl	80101b8 <__sfp_lock_release>
 80102c8:	230c      	movs	r3, #12
 80102ca:	603b      	str	r3, [r7, #0]
 80102cc:	e7ee      	b.n	80102ac <__sfp+0x60>
 80102ce:	bf00      	nop
 80102d0:	080113f0 	.word	0x080113f0
 80102d4:	ffff0001 	.word	0xffff0001

080102d8 <_fwalk_reent>:
 80102d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102dc:	4606      	mov	r6, r0
 80102de:	4688      	mov	r8, r1
 80102e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80102e4:	2700      	movs	r7, #0
 80102e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80102ea:	f1b9 0901 	subs.w	r9, r9, #1
 80102ee:	d505      	bpl.n	80102fc <_fwalk_reent+0x24>
 80102f0:	6824      	ldr	r4, [r4, #0]
 80102f2:	2c00      	cmp	r4, #0
 80102f4:	d1f7      	bne.n	80102e6 <_fwalk_reent+0xe>
 80102f6:	4638      	mov	r0, r7
 80102f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102fc:	89ab      	ldrh	r3, [r5, #12]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d907      	bls.n	8010312 <_fwalk_reent+0x3a>
 8010302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010306:	3301      	adds	r3, #1
 8010308:	d003      	beq.n	8010312 <_fwalk_reent+0x3a>
 801030a:	4629      	mov	r1, r5
 801030c:	4630      	mov	r0, r6
 801030e:	47c0      	blx	r8
 8010310:	4307      	orrs	r7, r0
 8010312:	3568      	adds	r5, #104	; 0x68
 8010314:	e7e9      	b.n	80102ea <_fwalk_reent+0x12>

08010316 <__retarget_lock_init_recursive>:
 8010316:	4770      	bx	lr

08010318 <__retarget_lock_acquire_recursive>:
 8010318:	4770      	bx	lr

0801031a <__retarget_lock_release_recursive>:
 801031a:	4770      	bx	lr

0801031c <__swhatbuf_r>:
 801031c:	b570      	push	{r4, r5, r6, lr}
 801031e:	460e      	mov	r6, r1
 8010320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010324:	2900      	cmp	r1, #0
 8010326:	b096      	sub	sp, #88	; 0x58
 8010328:	4614      	mov	r4, r2
 801032a:	461d      	mov	r5, r3
 801032c:	da07      	bge.n	801033e <__swhatbuf_r+0x22>
 801032e:	2300      	movs	r3, #0
 8010330:	602b      	str	r3, [r5, #0]
 8010332:	89b3      	ldrh	r3, [r6, #12]
 8010334:	061a      	lsls	r2, r3, #24
 8010336:	d410      	bmi.n	801035a <__swhatbuf_r+0x3e>
 8010338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801033c:	e00e      	b.n	801035c <__swhatbuf_r+0x40>
 801033e:	466a      	mov	r2, sp
 8010340:	f000 f902 	bl	8010548 <_fstat_r>
 8010344:	2800      	cmp	r0, #0
 8010346:	dbf2      	blt.n	801032e <__swhatbuf_r+0x12>
 8010348:	9a01      	ldr	r2, [sp, #4]
 801034a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801034e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010352:	425a      	negs	r2, r3
 8010354:	415a      	adcs	r2, r3
 8010356:	602a      	str	r2, [r5, #0]
 8010358:	e7ee      	b.n	8010338 <__swhatbuf_r+0x1c>
 801035a:	2340      	movs	r3, #64	; 0x40
 801035c:	2000      	movs	r0, #0
 801035e:	6023      	str	r3, [r4, #0]
 8010360:	b016      	add	sp, #88	; 0x58
 8010362:	bd70      	pop	{r4, r5, r6, pc}

08010364 <__smakebuf_r>:
 8010364:	898b      	ldrh	r3, [r1, #12]
 8010366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010368:	079d      	lsls	r5, r3, #30
 801036a:	4606      	mov	r6, r0
 801036c:	460c      	mov	r4, r1
 801036e:	d507      	bpl.n	8010380 <__smakebuf_r+0x1c>
 8010370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	6123      	str	r3, [r4, #16]
 8010378:	2301      	movs	r3, #1
 801037a:	6163      	str	r3, [r4, #20]
 801037c:	b002      	add	sp, #8
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	ab01      	add	r3, sp, #4
 8010382:	466a      	mov	r2, sp
 8010384:	f7ff ffca 	bl	801031c <__swhatbuf_r>
 8010388:	9900      	ldr	r1, [sp, #0]
 801038a:	4605      	mov	r5, r0
 801038c:	4630      	mov	r0, r6
 801038e:	f7ff f987 	bl	800f6a0 <_malloc_r>
 8010392:	b948      	cbnz	r0, 80103a8 <__smakebuf_r+0x44>
 8010394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010398:	059a      	lsls	r2, r3, #22
 801039a:	d4ef      	bmi.n	801037c <__smakebuf_r+0x18>
 801039c:	f023 0303 	bic.w	r3, r3, #3
 80103a0:	f043 0302 	orr.w	r3, r3, #2
 80103a4:	81a3      	strh	r3, [r4, #12]
 80103a6:	e7e3      	b.n	8010370 <__smakebuf_r+0xc>
 80103a8:	4b0d      	ldr	r3, [pc, #52]	; (80103e0 <__smakebuf_r+0x7c>)
 80103aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80103ac:	89a3      	ldrh	r3, [r4, #12]
 80103ae:	6020      	str	r0, [r4, #0]
 80103b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103b4:	81a3      	strh	r3, [r4, #12]
 80103b6:	9b00      	ldr	r3, [sp, #0]
 80103b8:	6163      	str	r3, [r4, #20]
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	6120      	str	r0, [r4, #16]
 80103be:	b15b      	cbz	r3, 80103d8 <__smakebuf_r+0x74>
 80103c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103c4:	4630      	mov	r0, r6
 80103c6:	f000 f8d1 	bl	801056c <_isatty_r>
 80103ca:	b128      	cbz	r0, 80103d8 <__smakebuf_r+0x74>
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	f023 0303 	bic.w	r3, r3, #3
 80103d2:	f043 0301 	orr.w	r3, r3, #1
 80103d6:	81a3      	strh	r3, [r4, #12]
 80103d8:	89a0      	ldrh	r0, [r4, #12]
 80103da:	4305      	orrs	r5, r0
 80103dc:	81a5      	strh	r5, [r4, #12]
 80103de:	e7cd      	b.n	801037c <__smakebuf_r+0x18>
 80103e0:	08010175 	.word	0x08010175

080103e4 <_malloc_usable_size_r>:
 80103e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103e8:	1f18      	subs	r0, r3, #4
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	bfbc      	itt	lt
 80103ee:	580b      	ldrlt	r3, [r1, r0]
 80103f0:	18c0      	addlt	r0, r0, r3
 80103f2:	4770      	bx	lr

080103f4 <_raise_r>:
 80103f4:	291f      	cmp	r1, #31
 80103f6:	b538      	push	{r3, r4, r5, lr}
 80103f8:	4604      	mov	r4, r0
 80103fa:	460d      	mov	r5, r1
 80103fc:	d904      	bls.n	8010408 <_raise_r+0x14>
 80103fe:	2316      	movs	r3, #22
 8010400:	6003      	str	r3, [r0, #0]
 8010402:	f04f 30ff 	mov.w	r0, #4294967295
 8010406:	bd38      	pop	{r3, r4, r5, pc}
 8010408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801040a:	b112      	cbz	r2, 8010412 <_raise_r+0x1e>
 801040c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010410:	b94b      	cbnz	r3, 8010426 <_raise_r+0x32>
 8010412:	4620      	mov	r0, r4
 8010414:	f000 f830 	bl	8010478 <_getpid_r>
 8010418:	462a      	mov	r2, r5
 801041a:	4601      	mov	r1, r0
 801041c:	4620      	mov	r0, r4
 801041e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010422:	f000 b817 	b.w	8010454 <_kill_r>
 8010426:	2b01      	cmp	r3, #1
 8010428:	d00a      	beq.n	8010440 <_raise_r+0x4c>
 801042a:	1c59      	adds	r1, r3, #1
 801042c:	d103      	bne.n	8010436 <_raise_r+0x42>
 801042e:	2316      	movs	r3, #22
 8010430:	6003      	str	r3, [r0, #0]
 8010432:	2001      	movs	r0, #1
 8010434:	e7e7      	b.n	8010406 <_raise_r+0x12>
 8010436:	2400      	movs	r4, #0
 8010438:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801043c:	4628      	mov	r0, r5
 801043e:	4798      	blx	r3
 8010440:	2000      	movs	r0, #0
 8010442:	e7e0      	b.n	8010406 <_raise_r+0x12>

08010444 <raise>:
 8010444:	4b02      	ldr	r3, [pc, #8]	; (8010450 <raise+0xc>)
 8010446:	4601      	mov	r1, r0
 8010448:	6818      	ldr	r0, [r3, #0]
 801044a:	f7ff bfd3 	b.w	80103f4 <_raise_r>
 801044e:	bf00      	nop
 8010450:	24000010 	.word	0x24000010

08010454 <_kill_r>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	4d07      	ldr	r5, [pc, #28]	; (8010474 <_kill_r+0x20>)
 8010458:	2300      	movs	r3, #0
 801045a:	4604      	mov	r4, r0
 801045c:	4608      	mov	r0, r1
 801045e:	4611      	mov	r1, r2
 8010460:	602b      	str	r3, [r5, #0]
 8010462:	f7f1 fb5b 	bl	8001b1c <_kill>
 8010466:	1c43      	adds	r3, r0, #1
 8010468:	d102      	bne.n	8010470 <_kill_r+0x1c>
 801046a:	682b      	ldr	r3, [r5, #0]
 801046c:	b103      	cbz	r3, 8010470 <_kill_r+0x1c>
 801046e:	6023      	str	r3, [r4, #0]
 8010470:	bd38      	pop	{r3, r4, r5, pc}
 8010472:	bf00      	nop
 8010474:	240063bc 	.word	0x240063bc

08010478 <_getpid_r>:
 8010478:	f7f1 bb48 	b.w	8001b0c <_getpid>

0801047c <__sread>:
 801047c:	b510      	push	{r4, lr}
 801047e:	460c      	mov	r4, r1
 8010480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010484:	f000 f894 	bl	80105b0 <_read_r>
 8010488:	2800      	cmp	r0, #0
 801048a:	bfab      	itete	ge
 801048c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801048e:	89a3      	ldrhlt	r3, [r4, #12]
 8010490:	181b      	addge	r3, r3, r0
 8010492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010496:	bfac      	ite	ge
 8010498:	6563      	strge	r3, [r4, #84]	; 0x54
 801049a:	81a3      	strhlt	r3, [r4, #12]
 801049c:	bd10      	pop	{r4, pc}

0801049e <__swrite>:
 801049e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	461f      	mov	r7, r3
 80104a4:	898b      	ldrh	r3, [r1, #12]
 80104a6:	05db      	lsls	r3, r3, #23
 80104a8:	4605      	mov	r5, r0
 80104aa:	460c      	mov	r4, r1
 80104ac:	4616      	mov	r6, r2
 80104ae:	d505      	bpl.n	80104bc <__swrite+0x1e>
 80104b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b4:	2302      	movs	r3, #2
 80104b6:	2200      	movs	r2, #0
 80104b8:	f000 f868 	bl	801058c <_lseek_r>
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104c6:	81a3      	strh	r3, [r4, #12]
 80104c8:	4632      	mov	r2, r6
 80104ca:	463b      	mov	r3, r7
 80104cc:	4628      	mov	r0, r5
 80104ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104d2:	f000 b817 	b.w	8010504 <_write_r>

080104d6 <__sseek>:
 80104d6:	b510      	push	{r4, lr}
 80104d8:	460c      	mov	r4, r1
 80104da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104de:	f000 f855 	bl	801058c <_lseek_r>
 80104e2:	1c43      	adds	r3, r0, #1
 80104e4:	89a3      	ldrh	r3, [r4, #12]
 80104e6:	bf15      	itete	ne
 80104e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80104ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80104ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80104f2:	81a3      	strheq	r3, [r4, #12]
 80104f4:	bf18      	it	ne
 80104f6:	81a3      	strhne	r3, [r4, #12]
 80104f8:	bd10      	pop	{r4, pc}

080104fa <__sclose>:
 80104fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104fe:	f000 b813 	b.w	8010528 <_close_r>
	...

08010504 <_write_r>:
 8010504:	b538      	push	{r3, r4, r5, lr}
 8010506:	4d07      	ldr	r5, [pc, #28]	; (8010524 <_write_r+0x20>)
 8010508:	4604      	mov	r4, r0
 801050a:	4608      	mov	r0, r1
 801050c:	4611      	mov	r1, r2
 801050e:	2200      	movs	r2, #0
 8010510:	602a      	str	r2, [r5, #0]
 8010512:	461a      	mov	r2, r3
 8010514:	f7f1 fb39 	bl	8001b8a <_write>
 8010518:	1c43      	adds	r3, r0, #1
 801051a:	d102      	bne.n	8010522 <_write_r+0x1e>
 801051c:	682b      	ldr	r3, [r5, #0]
 801051e:	b103      	cbz	r3, 8010522 <_write_r+0x1e>
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	bd38      	pop	{r3, r4, r5, pc}
 8010524:	240063bc 	.word	0x240063bc

08010528 <_close_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d06      	ldr	r5, [pc, #24]	; (8010544 <_close_r+0x1c>)
 801052c:	2300      	movs	r3, #0
 801052e:	4604      	mov	r4, r0
 8010530:	4608      	mov	r0, r1
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	f7f1 fb45 	bl	8001bc2 <_close>
 8010538:	1c43      	adds	r3, r0, #1
 801053a:	d102      	bne.n	8010542 <_close_r+0x1a>
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	b103      	cbz	r3, 8010542 <_close_r+0x1a>
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	240063bc 	.word	0x240063bc

08010548 <_fstat_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d07      	ldr	r5, [pc, #28]	; (8010568 <_fstat_r+0x20>)
 801054c:	2300      	movs	r3, #0
 801054e:	4604      	mov	r4, r0
 8010550:	4608      	mov	r0, r1
 8010552:	4611      	mov	r1, r2
 8010554:	602b      	str	r3, [r5, #0]
 8010556:	f7f1 fb40 	bl	8001bda <_fstat>
 801055a:	1c43      	adds	r3, r0, #1
 801055c:	d102      	bne.n	8010564 <_fstat_r+0x1c>
 801055e:	682b      	ldr	r3, [r5, #0]
 8010560:	b103      	cbz	r3, 8010564 <_fstat_r+0x1c>
 8010562:	6023      	str	r3, [r4, #0]
 8010564:	bd38      	pop	{r3, r4, r5, pc}
 8010566:	bf00      	nop
 8010568:	240063bc 	.word	0x240063bc

0801056c <_isatty_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4d06      	ldr	r5, [pc, #24]	; (8010588 <_isatty_r+0x1c>)
 8010570:	2300      	movs	r3, #0
 8010572:	4604      	mov	r4, r0
 8010574:	4608      	mov	r0, r1
 8010576:	602b      	str	r3, [r5, #0]
 8010578:	f7f1 fb3f 	bl	8001bfa <_isatty>
 801057c:	1c43      	adds	r3, r0, #1
 801057e:	d102      	bne.n	8010586 <_isatty_r+0x1a>
 8010580:	682b      	ldr	r3, [r5, #0]
 8010582:	b103      	cbz	r3, 8010586 <_isatty_r+0x1a>
 8010584:	6023      	str	r3, [r4, #0]
 8010586:	bd38      	pop	{r3, r4, r5, pc}
 8010588:	240063bc 	.word	0x240063bc

0801058c <_lseek_r>:
 801058c:	b538      	push	{r3, r4, r5, lr}
 801058e:	4d07      	ldr	r5, [pc, #28]	; (80105ac <_lseek_r+0x20>)
 8010590:	4604      	mov	r4, r0
 8010592:	4608      	mov	r0, r1
 8010594:	4611      	mov	r1, r2
 8010596:	2200      	movs	r2, #0
 8010598:	602a      	str	r2, [r5, #0]
 801059a:	461a      	mov	r2, r3
 801059c:	f7f1 fb38 	bl	8001c10 <_lseek>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	d102      	bne.n	80105aa <_lseek_r+0x1e>
 80105a4:	682b      	ldr	r3, [r5, #0]
 80105a6:	b103      	cbz	r3, 80105aa <_lseek_r+0x1e>
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	240063bc 	.word	0x240063bc

080105b0 <_read_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <_read_r+0x20>)
 80105b4:	4604      	mov	r4, r0
 80105b6:	4608      	mov	r0, r1
 80105b8:	4611      	mov	r1, r2
 80105ba:	2200      	movs	r2, #0
 80105bc:	602a      	str	r2, [r5, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	f7f1 fac6 	bl	8001b50 <_read>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_read_r+0x1e>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_read_r+0x1e>
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	240063bc 	.word	0x240063bc

080105d4 <_init>:
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	bf00      	nop
 80105d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105da:	bc08      	pop	{r3}
 80105dc:	469e      	mov	lr, r3
 80105de:	4770      	bx	lr

080105e0 <_fini>:
 80105e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e2:	bf00      	nop
 80105e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105e6:	bc08      	pop	{r3}
 80105e8:	469e      	mov	lr, r3
 80105ea:	4770      	bx	lr
