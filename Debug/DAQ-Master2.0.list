
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105f4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000107c  08010898  08010898  00020898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011914  08011914  00021914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801191c  0801191c  0002191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011920  08011920  00021920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08011924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000034a0  240001e0  08011b04  000301e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003680  08011b04  00033680  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020c82  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e39  00000000  00000000  00050e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001730  00000000  00000000  00054cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001568  00000000  00000000  00056400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c535  00000000  00000000  00057968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000211fc  00000000  00000000  00093e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c306  00000000  00000000  000b5099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022139f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007054  00000000  00000000  002213f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801087c 	.word	0x0801087c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801087c 	.word	0x0801087c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f002 f802 	bl	80026ac <HAL_FDCAN_RegisterRxFifo0Callback>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80006ae:	f001 f871 	bl	8001794 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f002 f82a 	bl	800270c <HAL_FDCAN_Start>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80006be:	f001 f869 	bl	8001794 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f002 f9ba 	bl	8002a40 <HAL_FDCAN_ActivateNotification>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 80006d2:	f001 f85f 	bl	8001794 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006e8:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <init_CAN+0x10>)
 8000716:	f000 fdab 	bl	8001270 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2400321c 	.word	0x2400321c

08000724 <SD_Create_File>:
extern IWDG_HandleTypeDef hiwdg1;

char block[700];

FRESULT SD_Create_File(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	FRESULT fresult;
	uint8_t contFile = 0;	/*enumerate the file*/
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]

	fresult = f_mount(&g_sFatFs, "0:", 0);	/*mount SD card*/
 800072e:	2200      	movs	r2, #0
 8000730:	491f      	ldr	r1, [pc, #124]	; (80007b0 <SD_Create_File+0x8c>)
 8000732:	4820      	ldr	r0, [pc, #128]	; (80007b4 <SD_Create_File+0x90>)
 8000734:	f00c fa32 	bl	800cb9c <f_mount>
 8000738:	4603      	mov	r3, r0
 800073a:	71bb      	strb	r3, [r7, #6]
	do
	{
		sprintf(bufferFile, "ARQ%02d.txt", contFile);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	461a      	mov	r2, r3
 8000740:	491d      	ldr	r1, [pc, #116]	; (80007b8 <SD_Create_File+0x94>)
 8000742:	481e      	ldr	r0, [pc, #120]	; (80007bc <SD_Create_File+0x98>)
 8000744:	f00d feae 	bl	800e4a4 <siprintf>
		fresult = f_stat(bufferFile, &file);
 8000748:	491d      	ldr	r1, [pc, #116]	; (80007c0 <SD_Create_File+0x9c>)
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <SD_Create_File+0x98>)
 800074c:	f00d f898 	bl	800d880 <f_stat>
 8000750:	4603      	mov	r3, r0
 8000752:	71bb      	strb	r3, [r7, #6]
		contFile++;
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	3301      	adds	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
		HAL_IWDG_Refresh(&hiwdg1);
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <SD_Create_File+0xa0>)
 800075c:	f003 f8ee 	bl	800393c <HAL_IWDG_Refresh>
	} while(fresult != FR_NO_FILE);
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d1ea      	bne.n	800073c <SD_Create_File+0x18>
	contFile = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
	fresult = f_open(&file, bufferFile, FA_CREATE_ALWAYS ); /*Create file on SD card*/
 800076a:	2208      	movs	r2, #8
 800076c:	4913      	ldr	r1, [pc, #76]	; (80007bc <SD_Create_File+0x98>)
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <SD_Create_File+0x9c>)
 8000770:	f00c fa5a 	bl	800cc28 <f_open>
 8000774:	4603      	mov	r3, r0
 8000776:	71bb      	strb	r3, [r7, #6]
	fresult = f_close(&file);
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <SD_Create_File+0x9c>)
 800077a:	f00c fe33 	bl	800d3e4 <f_close>
 800077e:	4603      	mov	r3, r0
 8000780:	71bb      	strb	r3, [r7, #6]
	HAL_IWDG_Refresh(&hiwdg1);
 8000782:	4810      	ldr	r0, [pc, #64]	; (80007c4 <SD_Create_File+0xa0>)
 8000784:	f003 f8da 	bl	800393c <HAL_IWDG_Refresh>
	if(fresult == FR_OK){
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d107      	bne.n	800079e <SD_Create_File+0x7a>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5); //Blinks the led to indicate that there was no erros
 800078e:	2120      	movs	r1, #32
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <SD_Create_File+0xa4>)
 8000792:	f003 f86a 	bl	800386a <HAL_GPIO_TogglePin>
		_datalog_flag  = 1;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <SD_Create_File+0xa8>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e002      	b.n	80007a4 <SD_Create_File+0x80>
	}
	else _datalog_flag = 0;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <SD_Create_File+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]

	return fresult;
 80007a4:	79bb      	ldrb	r3, [r7, #6]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08010898 	.word	0x08010898
 80007b4:	240001fc 	.word	0x240001fc
 80007b8:	0801089c 	.word	0x0801089c
 80007bc:	24002264 	.word	0x24002264
 80007c0:	24001234 	.word	0x24001234
 80007c4:	24003308 	.word	0x24003308
 80007c8:	58020c00 	.word	0x58020c00
 80007cc:	24002278 	.word	0x24002278

080007d0 <Cabecalho>:
		general_can_transmit(102, controle);
	}
}

void Cabecalho(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 80007d6:	af00      	add	r7, sp, #0
	UINT bytes_written;
	FRESULT fresult;

	char cabecalho[1625];
	strcpy(cabecalho, "TIMER\tVOL\tACELERADOR\tFREIO\tMODO\tFRENAGEM_REG\tHODOMETRO_P\tHODOMETRO_T\tTORQUE_R\tTORQUE_L\tTORQUE_REF_R_\tTORQUE_REF_L\tSPEED_R_MOTOR\tSPEED_L_MOTOR\tECU_CONTROL_ID\tECU_CONTROL_EVENT_ID\tSPEED_FRONT_L_TIE\tSPEED_FRONT_R_TIE\tSPEED_BACK_R_TIE\tSPEED_BACK_L_TIE\tTORQUE_GAIN\tSENTIDO_VOL\tCORR_TORQUE_R\tCORR_TORQUE_L\tTEMP_INV_1_R\tTEMP_INV_2_R\tTEMP_INV_1_L\tTEMP_INV_2_L\tSPEED_L\tSPEED_R\tPOWER_L\tPOWER_R\tENERGY_L\tENERGY_R\tOVERLOAD_L\tOVERLOAD_R\tLOST_MSG_L\tLOST_MSG_R\tBUS_OFF_L\tBUS_OFF_R\tCAN_STATE_L\tCAN_STATE_R\tINV_STATE_L\tINV_STATE_R\tFALHA_L\tFALHA_R\tALARM_L\tALARM_R\tACCEL_X\tACCEL_Y\tACCEL_Z\tERRO\tGYRO_X\tGYRO_Y\tGYRO_Z\tERROR\tV_MAX\tV_MIN\tDELTA_V\tTEMP_MAX\tMODO_BMS\tBMS_ERROR_FLAG\tCONTATORES_STATUS\tV_TS\tI_SENSOR_1_ALTA\tI_SENSOR_2_BAIXA\tI_SENSOR_2_ALTA\tI_SENSOR_3_BAIXA\tI_SENSOR_3_ALTA\tI_SENSOR_4_BAIXA\tI_SENSOR_4_ALTA\tVCel101\tVCel102\tVCel103\tVCel104\tVCel105\tVCel106\tVCel107\tVCel108\tVCel109\tVCel110\tVCel111\tVCel112\tTemp101\tTemp102\tTemp103\tTemp104\tTemp105\tV_TOT_1\tV_REF_1\tFLAG_BAL_1\tVCel201\tVCel102\tVCel203\tVCel204\tVCel205\tVCel206\tVCel207\tVCel208\tVCel209\tVCel211\tVCel212\tTemp201\tTemp202\tTemp203\tTemp204\tTemp205\tV_TOT_2\tV_REF_2\tFLAG_BAL_2V\tVCel301\tVCel302\tVCel303\tVCel304\tVCel305\tVCel306\tVCel307\tVCel308\tVCel309\tVCel311\tVCel312\tTemp301\tTemp302\tTemp303\tTemp304\tTemp305\tV_TOT_3\tV_REF_3\tFLAG_BAL_3\tVCel401\tVCel402\tVCel403\tVCel404\tVCel405\tVCel406\tVCel407\tVCel408\tVCel409\tVCel410\tVCel411\tVCel412\tTemp401\tTemp402\tTemp403\tTemp404\tTemp405\tV_TOT_4\tV_REF_4\tFLAG_BAL_4\n");
 80007d8:	463b      	mov	r3, r7
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <Cabecalho+0x64>)
 80007dc:	4618      	mov	r0, r3
 80007de:	4611      	mov	r1, r2
 80007e0:	f240 5397 	movw	r3, #1431	; 0x597
 80007e4:	461a      	mov	r2, r3
 80007e6:	f00d f9d1 	bl	800db8c <memcpy>
	int tamanho = strlen(cabecalho);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd77 	bl	80002e0 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664


	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write
 80007f8:	2212      	movs	r2, #18
 80007fa:	490f      	ldr	r1, [pc, #60]	; (8000838 <Cabecalho+0x68>)
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <Cabecalho+0x6c>)
 80007fe:	f00c fa13 	bl	800cc28 <f_open>
 8000802:	4603      	mov	r3, r0
 8000804:	f887 3663 	strb.w	r3, [r7, #1635]	; 0x663
	fresult = f_write(&file, cabecalho, tamanho, &bytes_written); //write data to the file
 8000808:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 800080c:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 8000810:	4639      	mov	r1, r7
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <Cabecalho+0x6c>)
 8000814:	f00c fbd4 	bl	800cfc0 <f_write>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3663 	strb.w	r3, [r7, #1635]	; 0x663
	fresult = f_close(&file);
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <Cabecalho+0x6c>)
 8000820:	f00c fde0 	bl	800d3e4 <f_close>
 8000824:	4603      	mov	r3, r0
 8000826:	f887 3663 	strb.w	r3, [r7, #1635]	; 0x663
}
 800082a:	bf00      	nop
 800082c:	f507 67cd 	add.w	r7, r7, #1640	; 0x668
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	080108a8 	.word	0x080108a8
 8000838:	24002264 	.word	0x24002264
 800083c:	24001234 	.word	0x24001234

08000840 <writeSD>:

void writeSD(void)
{
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
 8000846:	af96      	add	r7, sp, #600	; 0x258
	UINT bytes_written;
	FRESULT fresult;
	//uint16_t block[310];
	int len;
	uint32_t time = HAL_GetTick();
 8000848:	f001 fb92 	bl	8001f70 <HAL_GetTick>
 800084c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			"%u\t%u\t%u\t%u\t"		//Id 272
			"%u\t%u\t%u\t%u\t"		//Id 273
			"%u\t%u\t%u\t%u\t"		//Id 274
			"%u\t%u\t%u\t%u\n",		//Id 275

/*Id 101 */	time, VOLANTE, ACELERADOR, FREIO,
 8000850:	4bd3      	ldr	r3, [pc, #844]	; (8000ba0 <writeSD+0x360>)
 8000852:	f8b3 332a 	ldrh.w	r3, [r3, #810]	; 0x32a
	len = snprintf((char*) block, sizeof(block),
 8000856:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
/*Id 101 */	time, VOLANTE, ACELERADOR, FREIO,
 800085a:	4bd1      	ldr	r3, [pc, #836]	; (8000ba0 <writeSD+0x360>)
 800085c:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
	len = snprintf((char*) block, sizeof(block),
 8000860:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
/*Id 101 */	time, VOLANTE, ACELERADOR, FREIO,
 8000864:	4bce      	ldr	r3, [pc, #824]	; (8000ba0 <writeSD+0x360>)
 8000866:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
	len = snprintf((char*) block, sizeof(block),
 800086a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
/*Id 102 */ MODO, FRENAGEM_REG, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 800086e:	4bcc      	ldr	r3, [pc, #816]	; (8000ba0 <writeSD+0x360>)
 8000870:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
	len = snprintf((char*) block, sizeof(block),
 8000874:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
/*Id 102 */ MODO, FRENAGEM_REG, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 8000878:	4bc9      	ldr	r3, [pc, #804]	; (8000ba0 <writeSD+0x360>)
 800087a:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
	len = snprintf((char*) block, sizeof(block),
 800087e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
/*Id 102 */ MODO, FRENAGEM_REG, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 8000882:	4bc7      	ldr	r3, [pc, #796]	; (8000ba0 <writeSD+0x360>)
 8000884:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
	len = snprintf((char*) block, sizeof(block),
 8000888:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
/*Id 102 */ MODO, FRENAGEM_REG, HODOMETRO_PARCIAL, HODOMETRO_TOTAL,
 800088c:	4bc4      	ldr	r3, [pc, #784]	; (8000ba0 <writeSD+0x360>)
 800088e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
	len = snprintf((char*) block, sizeof(block),
 8000892:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 8000896:	4bc2      	ldr	r3, [pc, #776]	; (8000ba0 <writeSD+0x360>)
 8000898:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
	len = snprintf((char*) block, sizeof(block),
 800089c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 80008a0:	4bbf      	ldr	r3, [pc, #764]	; (8000ba0 <writeSD+0x360>)
 80008a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
	len = snprintf((char*) block, sizeof(block),
 80008a6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 80008aa:	4bbd      	ldr	r3, [pc, #756]	; (8000ba0 <writeSD+0x360>)
 80008ac:	f8b3 333c 	ldrh.w	r3, [r3, #828]	; 0x33c
	len = snprintf((char*) block, sizeof(block),
 80008b0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
/*Id 103 */ TORQUE_R, TORQUE_L, REF_TORQUE_R, REF_TORQUE_L,
 80008b4:	4bba      	ldr	r3, [pc, #744]	; (8000ba0 <writeSD+0x360>)
 80008b6:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	len = snprintf((char*) block, sizeof(block),
 80008ba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID, ECU_CONTROL_EVENT_ID,
 80008be:	4bb8      	ldr	r3, [pc, #736]	; (8000ba0 <writeSD+0x360>)
 80008c0:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	len = snprintf((char*) block, sizeof(block),
 80008c4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID, ECU_CONTROL_EVENT_ID,
 80008c8:	4bb5      	ldr	r3, [pc, #724]	; (8000ba0 <writeSD+0x360>)
 80008ca:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
	len = snprintf((char*) block, sizeof(block),
 80008ce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID, ECU_CONTROL_EVENT_ID,
 80008d2:	4bb3      	ldr	r3, [pc, #716]	; (8000ba0 <writeSD+0x360>)
 80008d4:	f8b3 3344 	ldrh.w	r3, [r3, #836]	; 0x344
	len = snprintf((char*) block, sizeof(block),
 80008d8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
/*Id 104 */	SPEED_R_MOTOR, SPEED_L_MOTOR, ECU_CONTROL_ID, ECU_CONTROL_EVENT_ID,
 80008dc:	4bb0      	ldr	r3, [pc, #704]	; (8000ba0 <writeSD+0x360>)
 80008de:	f8b3 3346 	ldrh.w	r3, [r3, #838]	; 0x346
	len = snprintf((char*) block, sizeof(block),
 80008e2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008e6:	4bae      	ldr	r3, [pc, #696]	; (8000ba0 <writeSD+0x360>)
 80008e8:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
	len = snprintf((char*) block, sizeof(block),
 80008ec:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008f0:	4bab      	ldr	r3, [pc, #684]	; (8000ba0 <writeSD+0x360>)
 80008f2:	f8b3 334a 	ldrh.w	r3, [r3, #842]	; 0x34a
	len = snprintf((char*) block, sizeof(block),
 80008f6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 80008fa:	4ba9      	ldr	r3, [pc, #676]	; (8000ba0 <writeSD+0x360>)
 80008fc:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
	len = snprintf((char*) block, sizeof(block),
 8000900:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
/*Id 105 */	SPEED_FRONT_L_TIE, SPEED_FRONT_R_TIE,SPEED_BACK_R_TIE, SPEED_BACK_L_TIE,
 8000904:	4ba6      	ldr	r3, [pc, #664]	; (8000ba0 <writeSD+0x360>)
 8000906:	f8b3 334e 	ldrh.w	r3, [r3, #846]	; 0x34e
	len = snprintf((char*) block, sizeof(block),
 800090a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 800090e:	4ba4      	ldr	r3, [pc, #656]	; (8000ba0 <writeSD+0x360>)
 8000910:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
	len = snprintf((char*) block, sizeof(block),
 8000914:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 8000918:	4ba1      	ldr	r3, [pc, #644]	; (8000ba0 <writeSD+0x360>)
 800091a:	f8b3 3352 	ldrh.w	r3, [r3, #850]	; 0x352
	len = snprintf((char*) block, sizeof(block),
 800091e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 8000922:	4b9f      	ldr	r3, [pc, #636]	; (8000ba0 <writeSD+0x360>)
 8000924:	f8b3 3354 	ldrh.w	r3, [r3, #852]	; 0x354
	len = snprintf((char*) block, sizeof(block),
 8000928:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
/*Id 106 */	GANHO_TORQUE, SENTIDO_VOLANTE, CORRENTE_TORQUE_R, CORRENTE_TORQUE_L,
 800092c:	4b9c      	ldr	r3, [pc, #624]	; (8000ba0 <writeSD+0x360>)
 800092e:	f8b3 3356 	ldrh.w	r3, [r3, #854]	; 0x356
	len = snprintf((char*) block, sizeof(block),
 8000932:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
/*Id 107 */ TEMP_INV_1_R, TEMP_INV_2_R, TEMP_INV_1_L, TEMP_INV_2_R,
 8000936:	4b9a      	ldr	r3, [pc, #616]	; (8000ba0 <writeSD+0x360>)
 8000938:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
	len = snprintf((char*) block, sizeof(block),
 800093c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
/*Id 107 */ TEMP_INV_1_R, TEMP_INV_2_R, TEMP_INV_1_L, TEMP_INV_2_R,
 8000940:	4b97      	ldr	r3, [pc, #604]	; (8000ba0 <writeSD+0x360>)
 8000942:	f8b3 335a 	ldrh.w	r3, [r3, #858]	; 0x35a
	len = snprintf((char*) block, sizeof(block),
 8000946:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
/*Id 107 */ TEMP_INV_1_R, TEMP_INV_2_R, TEMP_INV_1_L, TEMP_INV_2_R,
 800094a:	4b95      	ldr	r3, [pc, #596]	; (8000ba0 <writeSD+0x360>)
 800094c:	f8b3 335c 	ldrh.w	r3, [r3, #860]	; 0x35c
	len = snprintf((char*) block, sizeof(block),
 8000950:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
/*Id 107 */ TEMP_INV_1_R, TEMP_INV_2_R, TEMP_INV_1_L, TEMP_INV_2_R,
 8000954:	4b92      	ldr	r3, [pc, #584]	; (8000ba0 <writeSD+0x360>)
 8000956:	f8b3 335a 	ldrh.w	r3, [r3, #858]	; 0x35a
	len = snprintf((char*) block, sizeof(block),
 800095a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 800095e:	4b90      	ldr	r3, [pc, #576]	; (8000ba0 <writeSD+0x360>)
 8000960:	f8b3 3368 	ldrh.w	r3, [r3, #872]	; 0x368
	len = snprintf((char*) block, sizeof(block),
 8000964:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 8000968:	4b8d      	ldr	r3, [pc, #564]	; (8000ba0 <writeSD+0x360>)
 800096a:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
	len = snprintf((char*) block, sizeof(block),
 800096e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 8000972:	4b8b      	ldr	r3, [pc, #556]	; (8000ba0 <writeSD+0x360>)
 8000974:	f8b3 336c 	ldrh.w	r3, [r3, #876]	; 0x36c
	len = snprintf((char*) block, sizeof(block),
 8000978:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
/*Id 109 */	SPEED_L,SPEED_R, POWER_L, POWER_R,
 800097c:	4b88      	ldr	r3, [pc, #544]	; (8000ba0 <writeSD+0x360>)
 800097e:	f8b3 336e 	ldrh.w	r3, [r3, #878]	; 0x36e
	len = snprintf((char*) block, sizeof(block),
 8000982:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

/*Id 110 */	ENERGY_L, ENERGY_R, OVERLOAD_L, OVERLOAD_R,
 8000986:	4b86      	ldr	r3, [pc, #536]	; (8000ba0 <writeSD+0x360>)
 8000988:	f8b3 3370 	ldrh.w	r3, [r3, #880]	; 0x370
	len = snprintf((char*) block, sizeof(block),
 800098c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
/*Id 110 */	ENERGY_L, ENERGY_R, OVERLOAD_L, OVERLOAD_R,
 8000990:	4b83      	ldr	r3, [pc, #524]	; (8000ba0 <writeSD+0x360>)
 8000992:	f8b3 3372 	ldrh.w	r3, [r3, #882]	; 0x372
	len = snprintf((char*) block, sizeof(block),
 8000996:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
/*Id 110 */	ENERGY_L, ENERGY_R, OVERLOAD_L, OVERLOAD_R,
 800099a:	4b81      	ldr	r3, [pc, #516]	; (8000ba0 <writeSD+0x360>)
 800099c:	f8b3 3374 	ldrh.w	r3, [r3, #884]	; 0x374
	len = snprintf((char*) block, sizeof(block),
 80009a0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
/*Id 110 */	ENERGY_L, ENERGY_R, OVERLOAD_L, OVERLOAD_R,
 80009a4:	4b7e      	ldr	r3, [pc, #504]	; (8000ba0 <writeSD+0x360>)
 80009a6:	f8b3 3376 	ldrh.w	r3, [r3, #886]	; 0x376
	len = snprintf((char*) block, sizeof(block),
 80009aa:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
/*Id 111 */ LOST_MSG_L, LOST_MSG_R, BUS_OFF_L, BUS_OFF_R,
 80009ae:	4b7c      	ldr	r3, [pc, #496]	; (8000ba0 <writeSD+0x360>)
 80009b0:	f8b3 3378 	ldrh.w	r3, [r3, #888]	; 0x378
	len = snprintf((char*) block, sizeof(block),
 80009b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
/*Id 111 */ LOST_MSG_L, LOST_MSG_R, BUS_OFF_L, BUS_OFF_R,
 80009b8:	4b79      	ldr	r3, [pc, #484]	; (8000ba0 <writeSD+0x360>)
 80009ba:	f8b3 337a 	ldrh.w	r3, [r3, #890]	; 0x37a
	len = snprintf((char*) block, sizeof(block),
 80009be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
/*Id 111 */ LOST_MSG_L, LOST_MSG_R, BUS_OFF_L, BUS_OFF_R,
 80009c2:	4b77      	ldr	r3, [pc, #476]	; (8000ba0 <writeSD+0x360>)
 80009c4:	f8b3 337c 	ldrh.w	r3, [r3, #892]	; 0x37c
	len = snprintf((char*) block, sizeof(block),
 80009c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
/*Id 111 */ LOST_MSG_L, LOST_MSG_R, BUS_OFF_L, BUS_OFF_R,
 80009cc:	4b74      	ldr	r3, [pc, #464]	; (8000ba0 <writeSD+0x360>)
 80009ce:	f8b3 337e 	ldrh.w	r3, [r3, #894]	; 0x37e
	len = snprintf((char*) block, sizeof(block),
 80009d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
/*Id 112 */ CAN_STATE_L, CAN_STATE_R, INV_STATE_L, INV_STATE_R,
 80009d6:	4b72      	ldr	r3, [pc, #456]	; (8000ba0 <writeSD+0x360>)
 80009d8:	f8b3 3380 	ldrh.w	r3, [r3, #896]	; 0x380
	len = snprintf((char*) block, sizeof(block),
 80009dc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
/*Id 112 */ CAN_STATE_L, CAN_STATE_R, INV_STATE_L, INV_STATE_R,
 80009e0:	4b6f      	ldr	r3, [pc, #444]	; (8000ba0 <writeSD+0x360>)
 80009e2:	f8b3 3382 	ldrh.w	r3, [r3, #898]	; 0x382
	len = snprintf((char*) block, sizeof(block),
 80009e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
/*Id 112 */ CAN_STATE_L, CAN_STATE_R, INV_STATE_L, INV_STATE_R,
 80009ea:	4b6d      	ldr	r3, [pc, #436]	; (8000ba0 <writeSD+0x360>)
 80009ec:	f8b3 3384 	ldrh.w	r3, [r3, #900]	; 0x384
	len = snprintf((char*) block, sizeof(block),
 80009f0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
/*Id 112 */ CAN_STATE_L, CAN_STATE_R, INV_STATE_L, INV_STATE_R,
 80009f4:	4b6a      	ldr	r3, [pc, #424]	; (8000ba0 <writeSD+0x360>)
 80009f6:	f8b3 3386 	ldrh.w	r3, [r3, #902]	; 0x386
	len = snprintf((char*) block, sizeof(block),
 80009fa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
/*Id 113 */ FAILURE_L,FALILURE_R, ALARM_L, ALARM_R,
 80009fe:	4b68      	ldr	r3, [pc, #416]	; (8000ba0 <writeSD+0x360>)
 8000a00:	f8b3 3388 	ldrh.w	r3, [r3, #904]	; 0x388
	len = snprintf((char*) block, sizeof(block),
 8000a04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
/*Id 113 */ FAILURE_L,FALILURE_R, ALARM_L, ALARM_R,
 8000a08:	4b65      	ldr	r3, [pc, #404]	; (8000ba0 <writeSD+0x360>)
 8000a0a:	f8b3 338a 	ldrh.w	r3, [r3, #906]	; 0x38a
	len = snprintf((char*) block, sizeof(block),
 8000a0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
/*Id 113 */ FAILURE_L,FALILURE_R, ALARM_L, ALARM_R,
 8000a12:	4b63      	ldr	r3, [pc, #396]	; (8000ba0 <writeSD+0x360>)
 8000a14:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
	len = snprintf((char*) block, sizeof(block),
 8000a18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
/*Id 113 */ FAILURE_L,FALILURE_R, ALARM_L, ALARM_R,
 8000a1c:	4b60      	ldr	r3, [pc, #384]	; (8000ba0 <writeSD+0x360>)
 8000a1e:	f8b3 338e 	ldrh.w	r3, [r3, #910]	; 0x38e
	len = snprintf((char*) block, sizeof(block),
 8000a22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z, ERRO,
 8000a26:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <writeSD+0x360>)
 8000a28:	f8b3 3918 	ldrh.w	r3, [r3, #2328]	; 0x918
	len = snprintf((char*) block, sizeof(block),
 8000a2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z, ERRO,
 8000a30:	4b5b      	ldr	r3, [pc, #364]	; (8000ba0 <writeSD+0x360>)
 8000a32:	f8b3 391a 	ldrh.w	r3, [r3, #2330]	; 0x91a
	len = snprintf((char*) block, sizeof(block),
 8000a36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z, ERRO,
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <writeSD+0x360>)
 8000a3c:	f8b3 391c 	ldrh.w	r3, [r3, #2332]	; 0x91c
	len = snprintf((char*) block, sizeof(block),
 8000a40:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
/*Id 291 */	ACCEL_X, ACCEL_Y, ACCEL_Z, ERRO,
 8000a44:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <writeSD+0x360>)
 8000a46:	f8b3 391e 	ldrh.w	r3, [r3, #2334]	; 0x91e
	len = snprintf((char*) block, sizeof(block),
 8000a4a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z, ERROR,
 8000a4e:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <writeSD+0x360>)
 8000a50:	f8b3 3920 	ldrh.w	r3, [r3, #2336]	; 0x920
	len = snprintf((char*) block, sizeof(block),
 8000a54:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z, ERROR,
 8000a58:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <writeSD+0x360>)
 8000a5a:	f8b3 3922 	ldrh.w	r3, [r3, #2338]	; 0x922
	len = snprintf((char*) block, sizeof(block),
 8000a5e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z, ERROR,
 8000a62:	4b4f      	ldr	r3, [pc, #316]	; (8000ba0 <writeSD+0x360>)
 8000a64:	f8b3 3924 	ldrh.w	r3, [r3, #2340]	; 0x924
	len = snprintf((char*) block, sizeof(block),
 8000a68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
/*Id 292 */	GYRO_X, GYRO_Y, GYRO_Z, ERROR,
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <writeSD+0x360>)
 8000a6e:	f8b3 3926 	ldrh.w	r3, [r3, #2342]	; 0x926
	len = snprintf((char*) block, sizeof(block),
 8000a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 8000a76:	4b4a      	ldr	r3, [pc, #296]	; (8000ba0 <writeSD+0x360>)
 8000a78:	f8b3 3190 	ldrh.w	r3, [r3, #400]	; 0x190
	len = snprintf((char*) block, sizeof(block),
 8000a7c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 8000a80:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <writeSD+0x360>)
 8000a82:	f8b3 3192 	ldrh.w	r3, [r3, #402]	; 0x192
	len = snprintf((char*) block, sizeof(block),
 8000a86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 8000a8a:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <writeSD+0x360>)
 8000a8c:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
	len = snprintf((char*) block, sizeof(block),
 8000a90:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
/*Id 50 */	V_MAX, V_MIN,DELTA_V, TEMP_MAX,
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <writeSD+0x360>)
 8000a96:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
	len = snprintf((char*) block, sizeof(block),
 8000a9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
/*Id 51 */	MODO_BMS, BMS_ERROR_FLAG, CONTATORES_STATUS, V_TS,
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <writeSD+0x360>)
 8000aa0:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
	len = snprintf((char*) block, sizeof(block),
 8000aa4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
/*Id 51 */	MODO_BMS, BMS_ERROR_FLAG, CONTATORES_STATUS, V_TS,
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <writeSD+0x360>)
 8000aaa:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
	len = snprintf((char*) block, sizeof(block),
 8000aae:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
/*Id 51 */	MODO_BMS, BMS_ERROR_FLAG, CONTATORES_STATUS, V_TS,
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <writeSD+0x360>)
 8000ab4:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
	len = snprintf((char*) block, sizeof(block),
 8000ab8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
/*Id 51 */	MODO_BMS, BMS_ERROR_FLAG, CONTATORES_STATUS, V_TS,
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <writeSD+0x360>)
 8000abe:	f8b3 319e 	ldrh.w	r3, [r3, #414]	; 0x19e
	len = snprintf((char*) block, sizeof(block),
 8000ac2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
/*Id 54 */	/*CURRENT_SENSOR_1_BAIXA*/ CURRENT_SENSOR_1_ALTA, CURRENT_SENSOR_2_BAIXA, CURRENT_SENSOR_2_ALTA,
 8000ac6:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <writeSD+0x360>)
 8000ac8:	f8b3 31b2 	ldrh.w	r3, [r3, #434]	; 0x1b2
	len = snprintf((char*) block, sizeof(block),
 8000acc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
/*Id 54 */	/*CURRENT_SENSOR_1_BAIXA*/ CURRENT_SENSOR_1_ALTA, CURRENT_SENSOR_2_BAIXA, CURRENT_SENSOR_2_ALTA,
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <writeSD+0x360>)
 8000ad2:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	; 0x1b4
	len = snprintf((char*) block, sizeof(block),
 8000ad6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
/*Id 54 */	/*CURRENT_SENSOR_1_BAIXA*/ CURRENT_SENSOR_1_ALTA, CURRENT_SENSOR_2_BAIXA, CURRENT_SENSOR_2_ALTA,
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <writeSD+0x360>)
 8000adc:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	; 0x1b6
	len = snprintf((char*) block, sizeof(block),
 8000ae0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <writeSD+0x360>)
 8000ae6:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	; 0x1b8
	len = snprintf((char*) block, sizeof(block),
 8000aea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <writeSD+0x360>)
 8000af0:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	; 0x1ba
	len = snprintf((char*) block, sizeof(block),
 8000af4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <writeSD+0x360>)
 8000afa:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
	len = snprintf((char*) block, sizeof(block),
 8000afe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
/*Id 55 */	CURRENT_SENSOR_3_BAIXA, CURRENT_SENSOR_3_ALTA, CURRENT_SENSOR_4_BAIXA, CURRENT_SENSOR_4_ALTA,
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <writeSD+0x360>)
 8000b04:	f8b3 31be 	ldrh.w	r3, [r3, #446]	; 0x1be
	len = snprintf((char*) block, sizeof(block),
 8000b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

/*Id 256 */  V_CELL_PACK1_1, V_CELL_PACK1_2,V_CELL_PACK1_3,V_CELL_PACK1_4,
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <writeSD+0x360>)
 8000b0e:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	; 0x800
	len = snprintf((char*) block, sizeof(block),
 8000b12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
/*Id 256 */  V_CELL_PACK1_1, V_CELL_PACK1_2,V_CELL_PACK1_3,V_CELL_PACK1_4,
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <writeSD+0x360>)
 8000b18:	f8b3 3802 	ldrh.w	r3, [r3, #2050]	; 0x802
	len = snprintf((char*) block, sizeof(block),
 8000b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
/*Id 256 */  V_CELL_PACK1_1, V_CELL_PACK1_2,V_CELL_PACK1_3,V_CELL_PACK1_4,
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <writeSD+0x360>)
 8000b22:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
	len = snprintf((char*) block, sizeof(block),
 8000b26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
/*Id 256 */  V_CELL_PACK1_1, V_CELL_PACK1_2,V_CELL_PACK1_3,V_CELL_PACK1_4,
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <writeSD+0x360>)
 8000b2c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
	len = snprintf((char*) block, sizeof(block),
 8000b30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
/*Id 257 */	V_CELL_PACK1_5, V_CELL_PACK1_6,V_CELL_PACK1_7,V_CELL_PACK1_8,
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <writeSD+0x360>)
 8000b36:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
	len = snprintf((char*) block, sizeof(block),
 8000b3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
/*Id 257 */	V_CELL_PACK1_5, V_CELL_PACK1_6,V_CELL_PACK1_7,V_CELL_PACK1_8,
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <writeSD+0x360>)
 8000b40:	f8b3 380a 	ldrh.w	r3, [r3, #2058]	; 0x80a
	len = snprintf((char*) block, sizeof(block),
 8000b44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
/*Id 257 */	V_CELL_PACK1_5, V_CELL_PACK1_6,V_CELL_PACK1_7,V_CELL_PACK1_8,
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <writeSD+0x360>)
 8000b4a:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
	len = snprintf((char*) block, sizeof(block),
 8000b4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
/*Id 257 */	V_CELL_PACK1_5, V_CELL_PACK1_6,V_CELL_PACK1_7,V_CELL_PACK1_8,
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <writeSD+0x360>)
 8000b54:	f8b3 380e 	ldrh.w	r3, [r3, #2062]	; 0x80e
	len = snprintf((char*) block, sizeof(block),
 8000b58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
/*Id 258 */	V_CELL_PACK1_9, V_CELL_PACK1_10,V_CELL_PACK1_11,V_CELL_PACK1_12,
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <writeSD+0x360>)
 8000b5e:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
	len = snprintf((char*) block, sizeof(block),
 8000b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
/*Id 258 */	V_CELL_PACK1_9, V_CELL_PACK1_10,V_CELL_PACK1_11,V_CELL_PACK1_12,
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <writeSD+0x360>)
 8000b68:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
	len = snprintf((char*) block, sizeof(block),
 8000b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
/*Id 258 */	V_CELL_PACK1_9, V_CELL_PACK1_10,V_CELL_PACK1_11,V_CELL_PACK1_12,
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <writeSD+0x360>)
 8000b72:	f8b3 3814 	ldrh.w	r3, [r3, #2068]	; 0x814
	len = snprintf((char*) block, sizeof(block),
 8000b76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
/*Id 258 */	V_CELL_PACK1_9, V_CELL_PACK1_10,V_CELL_PACK1_11,V_CELL_PACK1_12,
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <writeSD+0x360>)
 8000b7c:	f8b3 3816 	ldrh.w	r3, [r3, #2070]	; 0x816
	len = snprintf((char*) block, sizeof(block),
 8000b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
/*Id 259 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <writeSD+0x360>)
 8000b86:	f8b3 3818 	ldrh.w	r3, [r3, #2072]	; 0x818
	len = snprintf((char*) block, sizeof(block),
 8000b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
/*Id 259 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <writeSD+0x360>)
 8000b90:	f8b3 381a 	ldrh.w	r3, [r3, #2074]	; 0x81a
	len = snprintf((char*) block, sizeof(block),
 8000b94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
/*Id 259 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <writeSD+0x360>)
 8000b9a:	f8b3 381c 	ldrh.w	r3, [r3, #2076]	; 0x81c
 8000b9e:	e001      	b.n	8000ba4 <writeSD+0x364>
 8000ba0:	24002538 	.word	0x24002538
	len = snprintf((char*) block, sizeof(block),
 8000ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
/*Id 259 */	TEMP_PACK1_1, TEMP_PACK1_2,TEMP_PACK1_3,TEMP_PACK1_4,
 8000ba8:	4bae      	ldr	r3, [pc, #696]	; (8000e64 <writeSD+0x624>)
 8000baa:	f8b3 381e 	ldrh.w	r3, [r3, #2078]	; 0x81e
	len = snprintf((char*) block, sizeof(block),
 8000bae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
/*Id 260 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1, FLAG_BAL_PACK1,
 8000bb2:	4bac      	ldr	r3, [pc, #688]	; (8000e64 <writeSD+0x624>)
 8000bb4:	f8b3 3820 	ldrh.w	r3, [r3, #2080]	; 0x820
	len = snprintf((char*) block, sizeof(block),
 8000bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
/*Id 260 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1, FLAG_BAL_PACK1,
 8000bbc:	4ba9      	ldr	r3, [pc, #676]	; (8000e64 <writeSD+0x624>)
 8000bbe:	f8b3 3822 	ldrh.w	r3, [r3, #2082]	; 0x822
	len = snprintf((char*) block, sizeof(block),
 8000bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
/*Id 260 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1, FLAG_BAL_PACK1,
 8000bc6:	4ba7      	ldr	r3, [pc, #668]	; (8000e64 <writeSD+0x624>)
 8000bc8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
	len = snprintf((char*) block, sizeof(block),
 8000bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
/*Id 260 */	TEMP_PACK1_5, V_TOT_PACK1, V_REF_PACK1, FLAG_BAL_PACK1,
 8000bd0:	4ba4      	ldr	r3, [pc, #656]	; (8000e64 <writeSD+0x624>)
 8000bd2:	f8b3 3826 	ldrh.w	r3, [r3, #2086]	; 0x826
	len = snprintf((char*) block, sizeof(block),
 8000bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

/*Id 261 */  V_CELL_PACK2_1, V_CELL_PACK2_2,V_CELL_PACK2_3,V_CELL_PACK2_4,
 8000bda:	4ba2      	ldr	r3, [pc, #648]	; (8000e64 <writeSD+0x624>)
 8000bdc:	f8b3 3828 	ldrh.w	r3, [r3, #2088]	; 0x828
	len = snprintf((char*) block, sizeof(block),
 8000be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
/*Id 261 */  V_CELL_PACK2_1, V_CELL_PACK2_2,V_CELL_PACK2_3,V_CELL_PACK2_4,
 8000be4:	4b9f      	ldr	r3, [pc, #636]	; (8000e64 <writeSD+0x624>)
 8000be6:	f8b3 382a 	ldrh.w	r3, [r3, #2090]	; 0x82a
	len = snprintf((char*) block, sizeof(block),
 8000bea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
/*Id 261 */  V_CELL_PACK2_1, V_CELL_PACK2_2,V_CELL_PACK2_3,V_CELL_PACK2_4,
 8000bee:	4b9d      	ldr	r3, [pc, #628]	; (8000e64 <writeSD+0x624>)
 8000bf0:	f8b3 382c 	ldrh.w	r3, [r3, #2092]	; 0x82c
	len = snprintf((char*) block, sizeof(block),
 8000bf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
/*Id 261 */  V_CELL_PACK2_1, V_CELL_PACK2_2,V_CELL_PACK2_3,V_CELL_PACK2_4,
 8000bf8:	4b9a      	ldr	r3, [pc, #616]	; (8000e64 <writeSD+0x624>)
 8000bfa:	f8b3 382e 	ldrh.w	r3, [r3, #2094]	; 0x82e
	len = snprintf((char*) block, sizeof(block),
 8000bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
/*Id 261 */	V_CELL_PACK2_5, V_CELL_PACK2_6,V_CELL_PACK2_7,V_CELL_PACK2_8,
 8000c02:	4b98      	ldr	r3, [pc, #608]	; (8000e64 <writeSD+0x624>)
 8000c04:	f8b3 3830 	ldrh.w	r3, [r3, #2096]	; 0x830
	len = snprintf((char*) block, sizeof(block),
 8000c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
/*Id 261 */	V_CELL_PACK2_5, V_CELL_PACK2_6,V_CELL_PACK2_7,V_CELL_PACK2_8,
 8000c0c:	4b95      	ldr	r3, [pc, #596]	; (8000e64 <writeSD+0x624>)
 8000c0e:	f8b3 3832 	ldrh.w	r3, [r3, #2098]	; 0x832
	len = snprintf((char*) block, sizeof(block),
 8000c12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
/*Id 261 */	V_CELL_PACK2_5, V_CELL_PACK2_6,V_CELL_PACK2_7,V_CELL_PACK2_8,
 8000c16:	4b93      	ldr	r3, [pc, #588]	; (8000e64 <writeSD+0x624>)
 8000c18:	f8b3 3834 	ldrh.w	r3, [r3, #2100]	; 0x834
	len = snprintf((char*) block, sizeof(block),
 8000c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
/*Id 261 */	V_CELL_PACK2_5, V_CELL_PACK2_6,V_CELL_PACK2_7,V_CELL_PACK2_8,
 8000c20:	4b90      	ldr	r3, [pc, #576]	; (8000e64 <writeSD+0x624>)
 8000c22:	f8b3 3836 	ldrh.w	r3, [r3, #2102]	; 0x836
	len = snprintf((char*) block, sizeof(block),
 8000c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
/*Id 263 */	V_CELL_PACK2_9, V_CELL_PACK2_10,V_CELL_PACK2_11,V_CELL_PACK2_12,
 8000c2a:	4b8e      	ldr	r3, [pc, #568]	; (8000e64 <writeSD+0x624>)
 8000c2c:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
	len = snprintf((char*) block, sizeof(block),
 8000c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
/*Id 263 */	V_CELL_PACK2_9, V_CELL_PACK2_10,V_CELL_PACK2_11,V_CELL_PACK2_12,
 8000c34:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <writeSD+0x624>)
 8000c36:	f8b3 383a 	ldrh.w	r3, [r3, #2106]	; 0x83a
	len = snprintf((char*) block, sizeof(block),
 8000c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
/*Id 263 */	V_CELL_PACK2_9, V_CELL_PACK2_10,V_CELL_PACK2_11,V_CELL_PACK2_12,
 8000c3e:	4b89      	ldr	r3, [pc, #548]	; (8000e64 <writeSD+0x624>)
 8000c40:	f8b3 383c 	ldrh.w	r3, [r3, #2108]	; 0x83c
	len = snprintf((char*) block, sizeof(block),
 8000c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
/*Id 263 */	V_CELL_PACK2_9, V_CELL_PACK2_10,V_CELL_PACK2_11,V_CELL_PACK2_12,
 8000c48:	4b86      	ldr	r3, [pc, #536]	; (8000e64 <writeSD+0x624>)
 8000c4a:	f8b3 383e 	ldrh.w	r3, [r3, #2110]	; 0x83e
	len = snprintf((char*) block, sizeof(block),
 8000c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
/*Id 264 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000c52:	4b84      	ldr	r3, [pc, #528]	; (8000e64 <writeSD+0x624>)
 8000c54:	f8b3 3842 	ldrh.w	r3, [r3, #2114]	; 0x842
	len = snprintf((char*) block, sizeof(block),
 8000c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
/*Id 264 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000c5c:	4b81      	ldr	r3, [pc, #516]	; (8000e64 <writeSD+0x624>)
 8000c5e:	f8b3 3842 	ldrh.w	r3, [r3, #2114]	; 0x842
	len = snprintf((char*) block, sizeof(block),
 8000c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
/*Id 264 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000c66:	4b7f      	ldr	r3, [pc, #508]	; (8000e64 <writeSD+0x624>)
 8000c68:	f8b3 3844 	ldrh.w	r3, [r3, #2116]	; 0x844
	len = snprintf((char*) block, sizeof(block),
 8000c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
/*Id 264 */	TEMP_PACK2_2, TEMP_PACK2_2,TEMP_PACK2_3,TEMP_PACK2_4,
 8000c70:	4b7c      	ldr	r3, [pc, #496]	; (8000e64 <writeSD+0x624>)
 8000c72:	f8b3 3846 	ldrh.w	r3, [r3, #2118]	; 0x846
	len = snprintf((char*) block, sizeof(block),
 8000c76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
/*Id 265 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2, FLAG_BAL_PACK2,
 8000c7a:	4b7a      	ldr	r3, [pc, #488]	; (8000e64 <writeSD+0x624>)
 8000c7c:	f8b3 3848 	ldrh.w	r3, [r3, #2120]	; 0x848
	len = snprintf((char*) block, sizeof(block),
 8000c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
/*Id 265 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2, FLAG_BAL_PACK2,
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <writeSD+0x624>)
 8000c86:	f8b3 384a 	ldrh.w	r3, [r3, #2122]	; 0x84a
	len = snprintf((char*) block, sizeof(block),
 8000c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
/*Id 265 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2, FLAG_BAL_PACK2,
 8000c8e:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <writeSD+0x624>)
 8000c90:	f8b3 384c 	ldrh.w	r3, [r3, #2124]	; 0x84c
	len = snprintf((char*) block, sizeof(block),
 8000c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
/*Id 265 */	TEMP_PACK2_5, V_TOT_PACK2, V_REF_PACK2, FLAG_BAL_PACK2,
 8000c98:	4b72      	ldr	r3, [pc, #456]	; (8000e64 <writeSD+0x624>)
 8000c9a:	f8b3 384e 	ldrh.w	r3, [r3, #2126]	; 0x84e
	len = snprintf((char*) block, sizeof(block),
 8000c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

/*Id 266 */  V_CELL_PACK3_1, V_CELL_PACK3_2,V_CELL_PACK3_3,V_CELL_PACK3_4,
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <writeSD+0x624>)
 8000ca4:	f8b3 3850 	ldrh.w	r3, [r3, #2128]	; 0x850
	len = snprintf((char*) block, sizeof(block),
 8000ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
/*Id 266 */  V_CELL_PACK3_1, V_CELL_PACK3_2,V_CELL_PACK3_3,V_CELL_PACK3_4,
 8000cac:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <writeSD+0x624>)
 8000cae:	f8b3 3852 	ldrh.w	r3, [r3, #2130]	; 0x852
	len = snprintf((char*) block, sizeof(block),
 8000cb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
/*Id 266 */  V_CELL_PACK3_1, V_CELL_PACK3_2,V_CELL_PACK3_3,V_CELL_PACK3_4,
 8000cb6:	4b6b      	ldr	r3, [pc, #428]	; (8000e64 <writeSD+0x624>)
 8000cb8:	f8b3 3854 	ldrh.w	r3, [r3, #2132]	; 0x854
	len = snprintf((char*) block, sizeof(block),
 8000cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
/*Id 266 */  V_CELL_PACK3_1, V_CELL_PACK3_2,V_CELL_PACK3_3,V_CELL_PACK3_4,
 8000cbe:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <writeSD+0x624>)
 8000cc0:	f8b3 3856 	ldrh.w	r3, [r3, #2134]	; 0x856
	len = snprintf((char*) block, sizeof(block),
 8000cc4:	67bb      	str	r3, [r7, #120]	; 0x78
/*Id 267 */	V_CELL_PACK3_5, V_CELL_PACK3_6,V_CELL_PACK3_7,V_CELL_PACK3_8,
 8000cc6:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <writeSD+0x624>)
 8000cc8:	f8b3 3858 	ldrh.w	r3, [r3, #2136]	; 0x858
	len = snprintf((char*) block, sizeof(block),
 8000ccc:	677b      	str	r3, [r7, #116]	; 0x74
/*Id 267 */	V_CELL_PACK3_5, V_CELL_PACK3_6,V_CELL_PACK3_7,V_CELL_PACK3_8,
 8000cce:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <writeSD+0x624>)
 8000cd0:	f8b3 385a 	ldrh.w	r3, [r3, #2138]	; 0x85a
	len = snprintf((char*) block, sizeof(block),
 8000cd4:	673b      	str	r3, [r7, #112]	; 0x70
/*Id 267 */	V_CELL_PACK3_5, V_CELL_PACK3_6,V_CELL_PACK3_7,V_CELL_PACK3_8,
 8000cd6:	4b63      	ldr	r3, [pc, #396]	; (8000e64 <writeSD+0x624>)
 8000cd8:	f8b3 385c 	ldrh.w	r3, [r3, #2140]	; 0x85c
	len = snprintf((char*) block, sizeof(block),
 8000cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
/*Id 267 */	V_CELL_PACK3_5, V_CELL_PACK3_6,V_CELL_PACK3_7,V_CELL_PACK3_8,
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <writeSD+0x624>)
 8000ce0:	f8b3 385e 	ldrh.w	r3, [r3, #2142]	; 0x85e
	len = snprintf((char*) block, sizeof(block),
 8000ce4:	66bb      	str	r3, [r7, #104]	; 0x68
/*Id 268 */	V_CELL_PACK3_9, V_CELL_PACK3_10,V_CELL_PACK3_11,V_CELL_PACK3_12,
 8000ce6:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <writeSD+0x624>)
 8000ce8:	f8b3 3860 	ldrh.w	r3, [r3, #2144]	; 0x860
	len = snprintf((char*) block, sizeof(block),
 8000cec:	667b      	str	r3, [r7, #100]	; 0x64
/*Id 268 */	V_CELL_PACK3_9, V_CELL_PACK3_10,V_CELL_PACK3_11,V_CELL_PACK3_12,
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <writeSD+0x624>)
 8000cf0:	f8b3 3862 	ldrh.w	r3, [r3, #2146]	; 0x862
	len = snprintf((char*) block, sizeof(block),
 8000cf4:	663b      	str	r3, [r7, #96]	; 0x60
/*Id 268 */	V_CELL_PACK3_9, V_CELL_PACK3_10,V_CELL_PACK3_11,V_CELL_PACK3_12,
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <writeSD+0x624>)
 8000cf8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
	len = snprintf((char*) block, sizeof(block),
 8000cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
/*Id 268 */	V_CELL_PACK3_9, V_CELL_PACK3_10,V_CELL_PACK3_11,V_CELL_PACK3_12,
 8000cfe:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <writeSD+0x624>)
 8000d00:	f8b3 3866 	ldrh.w	r3, [r3, #2150]	; 0x866
	len = snprintf((char*) block, sizeof(block),
 8000d04:	65bb      	str	r3, [r7, #88]	; 0x58
/*Id 269 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <writeSD+0x624>)
 8000d08:	f8b3 3868 	ldrh.w	r3, [r3, #2152]	; 0x868
	len = snprintf((char*) block, sizeof(block),
 8000d0c:	657b      	str	r3, [r7, #84]	; 0x54
/*Id 269 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000d0e:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <writeSD+0x624>)
 8000d10:	f8b3 386a 	ldrh.w	r3, [r3, #2154]	; 0x86a
	len = snprintf((char*) block, sizeof(block),
 8000d14:	653b      	str	r3, [r7, #80]	; 0x50
/*Id 269 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000d16:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <writeSD+0x624>)
 8000d18:	f8b3 386c 	ldrh.w	r3, [r3, #2156]	; 0x86c
	len = snprintf((char*) block, sizeof(block),
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
/*Id 269 */	TEMP_PACK3_1, TEMP_PACK3_2,TEMP_PACK3_3,TEMP_PACK3_4,
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <writeSD+0x624>)
 8000d20:	f8b3 386e 	ldrh.w	r3, [r3, #2158]	; 0x86e
	len = snprintf((char*) block, sizeof(block),
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48
/*Id 270 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3, FLAG_BAL_PACK3,
 8000d26:	4b4f      	ldr	r3, [pc, #316]	; (8000e64 <writeSD+0x624>)
 8000d28:	f8b3 3870 	ldrh.w	r3, [r3, #2160]	; 0x870
	len = snprintf((char*) block, sizeof(block),
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
/*Id 270 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3, FLAG_BAL_PACK3,
 8000d2e:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <writeSD+0x624>)
 8000d30:	f8b3 3872 	ldrh.w	r3, [r3, #2162]	; 0x872
	len = snprintf((char*) block, sizeof(block),
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
/*Id 270 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3, FLAG_BAL_PACK3,
 8000d36:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <writeSD+0x624>)
 8000d38:	f8b3 3874 	ldrh.w	r3, [r3, #2164]	; 0x874
	len = snprintf((char*) block, sizeof(block),
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
/*Id 270 */	TEMP_PACK3_5, V_TOT_PACK3, V_REF_PACK3, FLAG_BAL_PACK3,
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <writeSD+0x624>)
 8000d40:	f8b3 3876 	ldrh.w	r3, [r3, #2166]	; 0x876
	len = snprintf((char*) block, sizeof(block),
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38

/*Id 256 */  V_CELL_PACK4_1, V_CELL_PACK4_2,V_CELL_PACK4_3,V_CELL_PACK4_4,
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <writeSD+0x624>)
 8000d48:	f8b3 3878 	ldrh.w	r3, [r3, #2168]	; 0x878
	len = snprintf((char*) block, sizeof(block),
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
/*Id 256 */  V_CELL_PACK4_1, V_CELL_PACK4_2,V_CELL_PACK4_3,V_CELL_PACK4_4,
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <writeSD+0x624>)
 8000d50:	f8b3 387a 	ldrh.w	r3, [r3, #2170]	; 0x87a
	len = snprintf((char*) block, sizeof(block),
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
/*Id 256 */  V_CELL_PACK4_1, V_CELL_PACK4_2,V_CELL_PACK4_3,V_CELL_PACK4_4,
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <writeSD+0x624>)
 8000d58:	f8b3 387c 	ldrh.w	r3, [r3, #2172]	; 0x87c
	len = snprintf((char*) block, sizeof(block),
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
/*Id 256 */  V_CELL_PACK4_1, V_CELL_PACK4_2,V_CELL_PACK4_3,V_CELL_PACK4_4,
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <writeSD+0x624>)
 8000d60:	f8b3 387e 	ldrh.w	r3, [r3, #2174]	; 0x87e
	len = snprintf((char*) block, sizeof(block),
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
/*Id 257 */	V_CELL_PACK4_5, V_CELL_PACK4_6,V_CELL_PACK4_7,V_CELL_PACK4_8,
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <writeSD+0x624>)
 8000d68:	f8b3 3880 	ldrh.w	r3, [r3, #2176]	; 0x880
	len = snprintf((char*) block, sizeof(block),
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
/*Id 257 */	V_CELL_PACK4_5, V_CELL_PACK4_6,V_CELL_PACK4_7,V_CELL_PACK4_8,
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <writeSD+0x624>)
 8000d70:	f8b3 3882 	ldrh.w	r3, [r3, #2178]	; 0x882
	len = snprintf((char*) block, sizeof(block),
 8000d74:	623b      	str	r3, [r7, #32]
/*Id 257 */	V_CELL_PACK4_5, V_CELL_PACK4_6,V_CELL_PACK4_7,V_CELL_PACK4_8,
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <writeSD+0x624>)
 8000d78:	f8b3 3884 	ldrh.w	r3, [r3, #2180]	; 0x884
	len = snprintf((char*) block, sizeof(block),
 8000d7c:	61fb      	str	r3, [r7, #28]
/*Id 257 */	V_CELL_PACK4_5, V_CELL_PACK4_6,V_CELL_PACK4_7,V_CELL_PACK4_8,
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <writeSD+0x624>)
 8000d80:	f8b3 3886 	ldrh.w	r3, [r3, #2182]	; 0x886
	len = snprintf((char*) block, sizeof(block),
 8000d84:	61bb      	str	r3, [r7, #24]
/*Id 258 */	V_CELL_PACK4_9, V_CELL_PACK4_10,V_CELL_PACK4_11,V_CELL_PACK4_12,
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <writeSD+0x624>)
 8000d88:	f8b3 3888 	ldrh.w	r3, [r3, #2184]	; 0x888
	len = snprintf((char*) block, sizeof(block),
 8000d8c:	617b      	str	r3, [r7, #20]
/*Id 258 */	V_CELL_PACK4_9, V_CELL_PACK4_10,V_CELL_PACK4_11,V_CELL_PACK4_12,
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <writeSD+0x624>)
 8000d90:	f8b3 388a 	ldrh.w	r3, [r3, #2186]	; 0x88a
	len = snprintf((char*) block, sizeof(block),
 8000d94:	613b      	str	r3, [r7, #16]
/*Id 258 */	V_CELL_PACK4_9, V_CELL_PACK4_10,V_CELL_PACK4_11,V_CELL_PACK4_12,
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <writeSD+0x624>)
 8000d98:	f8b3 388c 	ldrh.w	r3, [r3, #2188]	; 0x88c
	len = snprintf((char*) block, sizeof(block),
 8000d9c:	60fb      	str	r3, [r7, #12]
/*Id 258 */	V_CELL_PACK4_9, V_CELL_PACK4_10,V_CELL_PACK4_11,V_CELL_PACK4_12,
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <writeSD+0x624>)
 8000da0:	f8b3 388e 	ldrh.w	r3, [r3, #2190]	; 0x88e
	len = snprintf((char*) block, sizeof(block),
 8000da4:	60bb      	str	r3, [r7, #8]
/*Id 259 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000da6:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <writeSD+0x624>)
 8000da8:	f8b3 3890 	ldrh.w	r3, [r3, #2192]	; 0x890
	len = snprintf((char*) block, sizeof(block),
 8000dac:	607b      	str	r3, [r7, #4]
/*Id 259 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <writeSD+0x624>)
 8000db0:	f8b3 3892 	ldrh.w	r3, [r3, #2194]	; 0x892
	len = snprintf((char*) block, sizeof(block),
 8000db4:	461e      	mov	r6, r3
/*Id 259 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <writeSD+0x624>)
 8000db8:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
	len = snprintf((char*) block, sizeof(block),
 8000dbc:	461d      	mov	r5, r3
/*Id 259 */	TEMP_PACK4_1, TEMP_PACK4_2,TEMP_PACK4_3,TEMP_PACK4_4,
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <writeSD+0x624>)
 8000dc0:	f8b3 3896 	ldrh.w	r3, [r3, #2198]	; 0x896
	len = snprintf((char*) block, sizeof(block),
 8000dc4:	461c      	mov	r4, r3
/*Id 260 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4, FLAG_BAL_PACK4);
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <writeSD+0x624>)
 8000dc8:	f8b3 3898 	ldrh.w	r3, [r3, #2200]	; 0x898
	len = snprintf((char*) block, sizeof(block),
 8000dcc:	4618      	mov	r0, r3
/*Id 260 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4, FLAG_BAL_PACK4);
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <writeSD+0x624>)
 8000dd0:	f8b3 389a 	ldrh.w	r3, [r3, #2202]	; 0x89a
	len = snprintf((char*) block, sizeof(block),
 8000dd4:	4619      	mov	r1, r3
/*Id 260 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4, FLAG_BAL_PACK4);
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <writeSD+0x624>)
 8000dd8:	f8b3 389c 	ldrh.w	r3, [r3, #2204]	; 0x89c
	len = snprintf((char*) block, sizeof(block),
 8000ddc:	461a      	mov	r2, r3
/*Id 260 */	TEMP_PACK4_5, V_TOT_PACK4, V_REF_PACK4, FLAG_BAL_PACK4);
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <writeSD+0x624>)
 8000de0:	f8b3 389e 	ldrh.w	r3, [r3, #2206]	; 0x89e
	len = snprintf((char*) block, sizeof(block),
 8000de4:	9395      	str	r3, [sp, #596]	; 0x254
 8000de6:	9294      	str	r2, [sp, #592]	; 0x250
 8000de8:	9193      	str	r1, [sp, #588]	; 0x24c
 8000dea:	9092      	str	r0, [sp, #584]	; 0x248
 8000dec:	9491      	str	r4, [sp, #580]	; 0x244
 8000dee:	9590      	str	r5, [sp, #576]	; 0x240
 8000df0:	968f      	str	r6, [sp, #572]	; 0x23c
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	928e      	str	r2, [sp, #568]	; 0x238
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	928d      	str	r2, [sp, #564]	; 0x234
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	928c      	str	r2, [sp, #560]	; 0x230
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	928b      	str	r2, [sp, #556]	; 0x22c
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	928a      	str	r2, [sp, #552]	; 0x228
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	9289      	str	r2, [sp, #548]	; 0x224
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	9288      	str	r2, [sp, #544]	; 0x220
 8000e0e:	6a3a      	ldr	r2, [r7, #32]
 8000e10:	9287      	str	r2, [sp, #540]	; 0x21c
 8000e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e14:	9286      	str	r2, [sp, #536]	; 0x218
 8000e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e18:	9285      	str	r2, [sp, #532]	; 0x214
 8000e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e1c:	9284      	str	r2, [sp, #528]	; 0x210
 8000e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e20:	9283      	str	r2, [sp, #524]	; 0x20c
 8000e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e24:	9282      	str	r2, [sp, #520]	; 0x208
 8000e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e28:	9281      	str	r2, [sp, #516]	; 0x204
 8000e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e2c:	9280      	str	r2, [sp, #512]	; 0x200
 8000e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e30:	927f      	str	r2, [sp, #508]	; 0x1fc
 8000e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e34:	927e      	str	r2, [sp, #504]	; 0x1f8
 8000e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e38:	927d      	str	r2, [sp, #500]	; 0x1f4
 8000e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e3c:	927c      	str	r2, [sp, #496]	; 0x1f0
 8000e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e40:	927b      	str	r2, [sp, #492]	; 0x1ec
 8000e42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e44:	927a      	str	r2, [sp, #488]	; 0x1e8
 8000e46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e48:	9279      	str	r2, [sp, #484]	; 0x1e4
 8000e4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e4c:	9278      	str	r2, [sp, #480]	; 0x1e0
 8000e4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e50:	9277      	str	r2, [sp, #476]	; 0x1dc
 8000e52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e54:	9276      	str	r2, [sp, #472]	; 0x1d8
 8000e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e58:	9275      	str	r2, [sp, #468]	; 0x1d4
 8000e5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e5c:	9274      	str	r2, [sp, #464]	; 0x1d0
 8000e5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e60:	9273      	str	r2, [sp, #460]	; 0x1cc
 8000e62:	e001      	b.n	8000e68 <writeSD+0x628>
 8000e64:	24002538 	.word	0x24002538
 8000e68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e6a:	9272      	str	r2, [sp, #456]	; 0x1c8
 8000e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e6e:	9271      	str	r2, [sp, #452]	; 0x1c4
 8000e70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e72:	9270      	str	r2, [sp, #448]	; 0x1c0
 8000e74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000e78:	926f      	str	r2, [sp, #444]	; 0x1bc
 8000e7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000e7e:	926e      	str	r2, [sp, #440]	; 0x1b8
 8000e80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000e84:	926d      	str	r2, [sp, #436]	; 0x1b4
 8000e86:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000e8a:	926c      	str	r2, [sp, #432]	; 0x1b0
 8000e8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000e90:	926b      	str	r2, [sp, #428]	; 0x1ac
 8000e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000e96:	926a      	str	r2, [sp, #424]	; 0x1a8
 8000e98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000e9c:	9269      	str	r2, [sp, #420]	; 0x1a4
 8000e9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ea2:	9268      	str	r2, [sp, #416]	; 0x1a0
 8000ea4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000ea8:	9267      	str	r2, [sp, #412]	; 0x19c
 8000eaa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000eae:	9266      	str	r2, [sp, #408]	; 0x198
 8000eb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000eb4:	9265      	str	r2, [sp, #404]	; 0x194
 8000eb6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000eba:	9264      	str	r2, [sp, #400]	; 0x190
 8000ebc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000ec0:	9263      	str	r2, [sp, #396]	; 0x18c
 8000ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000ec6:	9262      	str	r2, [sp, #392]	; 0x188
 8000ec8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000ecc:	9261      	str	r2, [sp, #388]	; 0x184
 8000ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ed2:	9260      	str	r2, [sp, #384]	; 0x180
 8000ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000ed8:	925f      	str	r2, [sp, #380]	; 0x17c
 8000eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ede:	925e      	str	r2, [sp, #376]	; 0x178
 8000ee0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000ee4:	925d      	str	r2, [sp, #372]	; 0x174
 8000ee6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000eea:	925c      	str	r2, [sp, #368]	; 0x170
 8000eec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000ef0:	925b      	str	r2, [sp, #364]	; 0x16c
 8000ef2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000ef6:	925a      	str	r2, [sp, #360]	; 0x168
 8000ef8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000efc:	9259      	str	r2, [sp, #356]	; 0x164
 8000efe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f02:	9258      	str	r2, [sp, #352]	; 0x160
 8000f04:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000f08:	9257      	str	r2, [sp, #348]	; 0x15c
 8000f0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f0e:	9256      	str	r2, [sp, #344]	; 0x158
 8000f10:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000f14:	9255      	str	r2, [sp, #340]	; 0x154
 8000f16:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000f1a:	9254      	str	r2, [sp, #336]	; 0x150
 8000f1c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8000f20:	9253      	str	r2, [sp, #332]	; 0x14c
 8000f22:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000f26:	9252      	str	r2, [sp, #328]	; 0x148
 8000f28:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8000f2c:	9251      	str	r2, [sp, #324]	; 0x144
 8000f2e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000f32:	9250      	str	r2, [sp, #320]	; 0x140
 8000f34:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000f38:	924f      	str	r2, [sp, #316]	; 0x13c
 8000f3a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000f3e:	924e      	str	r2, [sp, #312]	; 0x138
 8000f40:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000f44:	924d      	str	r2, [sp, #308]	; 0x134
 8000f46:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000f4a:	924c      	str	r2, [sp, #304]	; 0x130
 8000f4c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000f50:	924b      	str	r2, [sp, #300]	; 0x12c
 8000f52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000f56:	924a      	str	r2, [sp, #296]	; 0x128
 8000f58:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f5c:	9249      	str	r2, [sp, #292]	; 0x124
 8000f5e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f62:	9248      	str	r2, [sp, #288]	; 0x120
 8000f64:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000f68:	9247      	str	r2, [sp, #284]	; 0x11c
 8000f6a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000f6e:	9246      	str	r2, [sp, #280]	; 0x118
 8000f70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000f74:	9245      	str	r2, [sp, #276]	; 0x114
 8000f76:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f7a:	9244      	str	r2, [sp, #272]	; 0x110
 8000f7c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8000f80:	9243      	str	r2, [sp, #268]	; 0x10c
 8000f82:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000f86:	9242      	str	r2, [sp, #264]	; 0x108
 8000f88:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000f8c:	9241      	str	r2, [sp, #260]	; 0x104
 8000f8e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000f92:	9240      	str	r2, [sp, #256]	; 0x100
 8000f94:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000f98:	923f      	str	r2, [sp, #252]	; 0xfc
 8000f9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000f9e:	923e      	str	r2, [sp, #248]	; 0xf8
 8000fa0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fa4:	923d      	str	r2, [sp, #244]	; 0xf4
 8000fa6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000faa:	923c      	str	r2, [sp, #240]	; 0xf0
 8000fac:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000fb0:	923b      	str	r2, [sp, #236]	; 0xec
 8000fb2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000fb6:	923a      	str	r2, [sp, #232]	; 0xe8
 8000fb8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8000fbc:	9239      	str	r2, [sp, #228]	; 0xe4
 8000fbe:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000fc2:	9238      	str	r2, [sp, #224]	; 0xe0
 8000fc4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000fc8:	9237      	str	r2, [sp, #220]	; 0xdc
 8000fca:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8000fce:	9236      	str	r2, [sp, #216]	; 0xd8
 8000fd0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000fd4:	9235      	str	r2, [sp, #212]	; 0xd4
 8000fd6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8000fda:	9234      	str	r2, [sp, #208]	; 0xd0
 8000fdc:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000fe0:	9233      	str	r2, [sp, #204]	; 0xcc
 8000fe2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000fe6:	9232      	str	r2, [sp, #200]	; 0xc8
 8000fe8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fec:	9231      	str	r2, [sp, #196]	; 0xc4
 8000fee:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000ff2:	9230      	str	r2, [sp, #192]	; 0xc0
 8000ff4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000ff8:	922f      	str	r2, [sp, #188]	; 0xbc
 8000ffa:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000ffe:	922e      	str	r2, [sp, #184]	; 0xb8
 8001000:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8001004:	922d      	str	r2, [sp, #180]	; 0xb4
 8001006:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800100a:	922c      	str	r2, [sp, #176]	; 0xb0
 800100c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001010:	922b      	str	r2, [sp, #172]	; 0xac
 8001012:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001016:	922a      	str	r2, [sp, #168]	; 0xa8
 8001018:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800101c:	9229      	str	r2, [sp, #164]	; 0xa4
 800101e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001022:	9228      	str	r2, [sp, #160]	; 0xa0
 8001024:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8001028:	9227      	str	r2, [sp, #156]	; 0x9c
 800102a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800102e:	9226      	str	r2, [sp, #152]	; 0x98
 8001030:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001034:	9225      	str	r2, [sp, #148]	; 0x94
 8001036:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800103a:	9224      	str	r2, [sp, #144]	; 0x90
 800103c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8001040:	9223      	str	r2, [sp, #140]	; 0x8c
 8001042:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001046:	9222      	str	r2, [sp, #136]	; 0x88
 8001048:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800104c:	9221      	str	r2, [sp, #132]	; 0x84
 800104e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001052:	9220      	str	r2, [sp, #128]	; 0x80
 8001054:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001058:	921f      	str	r2, [sp, #124]	; 0x7c
 800105a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800105e:	921e      	str	r2, [sp, #120]	; 0x78
 8001060:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8001064:	921d      	str	r2, [sp, #116]	; 0x74
 8001066:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800106a:	921c      	str	r2, [sp, #112]	; 0x70
 800106c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001070:	921b      	str	r2, [sp, #108]	; 0x6c
 8001072:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001076:	921a      	str	r2, [sp, #104]	; 0x68
 8001078:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800107c:	9219      	str	r2, [sp, #100]	; 0x64
 800107e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001082:	9218      	str	r2, [sp, #96]	; 0x60
 8001084:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001088:	9217      	str	r2, [sp, #92]	; 0x5c
 800108a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800108e:	9216      	str	r2, [sp, #88]	; 0x58
 8001090:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001094:	9215      	str	r2, [sp, #84]	; 0x54
 8001096:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800109a:	9214      	str	r2, [sp, #80]	; 0x50
 800109c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80010a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80010a2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80010a6:	9212      	str	r2, [sp, #72]	; 0x48
 80010a8:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80010ac:	9211      	str	r2, [sp, #68]	; 0x44
 80010ae:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80010b2:	9210      	str	r2, [sp, #64]	; 0x40
 80010b4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80010b8:	920f      	str	r2, [sp, #60]	; 0x3c
 80010ba:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80010be:	920e      	str	r2, [sp, #56]	; 0x38
 80010c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80010c4:	920d      	str	r2, [sp, #52]	; 0x34
 80010c6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80010ca:	920c      	str	r2, [sp, #48]	; 0x30
 80010cc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80010d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80010d2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80010d6:	920a      	str	r2, [sp, #40]	; 0x28
 80010d8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80010dc:	9209      	str	r2, [sp, #36]	; 0x24
 80010de:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80010e2:	9208      	str	r2, [sp, #32]
 80010e4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80010e8:	9207      	str	r2, [sp, #28]
 80010ea:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80010ee:	9206      	str	r2, [sp, #24]
 80010f0:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80010f4:	9205      	str	r2, [sp, #20]
 80010f6:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80010fa:	9204      	str	r2, [sp, #16]
 80010fc:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8001100:	9203      	str	r2, [sp, #12]
 8001102:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <writeSD+0x954>)
 800111a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800111e:	481e      	ldr	r0, [pc, #120]	; (8001198 <writeSD+0x958>)
 8001120:	f00d f98c 	bl	800e43c <sniprintf>
 8001124:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248

	fresult = f_open(&file, bufferFile, FA_OPEN_ALWAYS | FA_WRITE); //open file on SD card to write*/
 8001128:	2212      	movs	r2, #18
 800112a:	491c      	ldr	r1, [pc, #112]	; (800119c <writeSD+0x95c>)
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <writeSD+0x960>)
 800112e:	f00b fd7b 	bl	800cc28 <f_open>
 8001132:	4603      	mov	r3, r0
 8001134:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	fresult = f_lseek(&file, file.obj.objsize);//goes to the end of the file
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <writeSD+0x960>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <writeSD+0x960>)
 8001140:	f00c f97a 	bl	800d438 <f_lseek>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	fresult = f_write(&file, block, len, &bytes_written);//write data to the file
 800114a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800114e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001152:	4911      	ldr	r1, [pc, #68]	; (8001198 <writeSD+0x958>)
 8001154:	4812      	ldr	r0, [pc, #72]	; (80011a0 <writeSD+0x960>)
 8001156:	f00b ff33 	bl	800cfc0 <f_write>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	fresult = f_close(&file);//closes the file
 8001160:	480f      	ldr	r0, [pc, #60]	; (80011a0 <writeSD+0x960>)
 8001162:	f00c f93f 	bl	800d3e4 <f_close>
 8001166:	4603      	mov	r3, r0
 8001168:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

	if(fresult == FR_OK){
 800116c:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001170:	2b00      	cmp	r3, #0
 8001172:	d103      	bne.n	800117c <writeSD+0x93c>
		_datalog_flag  = 1;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <writeSD+0x964>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e002      	b.n	8001182 <writeSD+0x942>
	}
	else _datalog_flag = 0;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <writeSD+0x964>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_5);
 8001182:	2120      	movs	r1, #32
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <writeSD+0x968>)
 8001186:	f002 fb70 	bl	800386a <HAL_GPIO_TogglePin>
}
 800118a:	bf00      	nop
 800118c:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8001190:	46bd      	mov	sp, r7
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001194:	08010e40 	.word	0x08010e40
 8001198:	2400227c 	.word	0x2400227c
 800119c:	24002264 	.word	0x24002264
 80011a0:	24001234 	.word	0x24001234
 80011a4:	24002278 	.word	0x24002278
 80011a8:	58020c00 	.word	0x58020c00

080011ac <Clean_CAN_Struct>:

CanIdData_t can_vector[CAN_IDS_NUMBER];



void Clean_CAN_Struct(void) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	e019      	b.n	80011ec <Clean_CAN_Struct+0x40>
		can_vector[i].word_0 = 0;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <Clean_CAN_Struct+0x58>)
 80011bc:	2100      	movs	r1, #0
 80011be:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		can_vector[i].word_1 = 0;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <Clean_CAN_Struct+0x58>)
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	2200      	movs	r2, #0
 80011cc:	805a      	strh	r2, [r3, #2]
		can_vector[i].word_2 = 0;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <Clean_CAN_Struct+0x58>)
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	809a      	strh	r2, [r3, #4]
		can_vector[i].word_3 = 0;
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4a09      	ldr	r2, [pc, #36]	; (8001204 <Clean_CAN_Struct+0x58>)
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	80da      	strh	r2, [r3, #6]
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	3301      	adds	r3, #1
 80011ea:	80fb      	strh	r3, [r7, #6]
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011f2:	d3e1      	bcc.n	80011b8 <Clean_CAN_Struct+0xc>
	}
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	24002538 	.word	0x24002538

08001208 <canMessageReceived>:

void canMessageReceived(uint16_t id, uint8_t *data) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
	if (id > CAN_IDS_NUMBER - 1)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800121a:	d220      	bcs.n	800125e <canMessageReceived+0x56>
		return;

	uint16_t *data_word = (uint16_t*) data;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	60fb      	str	r3, [r7, #12]
	can_vector[id].word_0 = data_word[0];
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	8811      	ldrh	r1, [r2, #0]
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <canMessageReceived+0x64>)
 8001228:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	can_vector[id].word_1 = data_word[1];
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	8851      	ldrh	r1, [r2, #2]
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <canMessageReceived+0x64>)
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	460a      	mov	r2, r1
 800123a:	805a      	strh	r2, [r3, #2]
	can_vector[id].word_2 = data_word[2];
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	8891      	ldrh	r1, [r2, #4]
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <canMessageReceived+0x64>)
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	809a      	strh	r2, [r3, #4]
	can_vector[id].word_3 = data_word[3];
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	88d1      	ldrh	r1, [r2, #6]
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <canMessageReceived+0x64>)
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	80da      	strh	r2, [r3, #6]
 800125c:	e000      	b.n	8001260 <canMessageReceived+0x58>
		return;
 800125e:	bf00      	nop
}
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	24002538 	.word	0x24002538

08001270 <initialize_general_CAN>:
uint16_t datageneral[4];
uint32_t idgeneral;


//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <initialize_general_CAN+0x24>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <initialize_general_CAN+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <initialize_general_CAN+0x28>)
 8001284:	4905      	ldr	r1, [pc, #20]	; (800129c <initialize_general_CAN+0x2c>)
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fa04 	bl	8000694 <initialize_CAN>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	240031b8 	.word	0x240031b8
 8001298:	240031bc 	.word	0x240031bc
 800129c:	080012a1 	.word	0x080012a1

080012a0 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d043      	beq.n	800133c <CAN_general_receive_callback+0x9c>
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <CAN_general_receive_callback+0xa4>)
 80012b6:	4a24      	ldr	r2, [pc, #144]	; (8001348 <CAN_general_receive_callback+0xa8>)
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 fa52 	bl	8002764 <HAL_FDCAN_GetRxMessage>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 80012c6:	f000 fa65 	bl	8001794 <Error_Handler>
		}

		idgeneral = RxHeader.Identifier;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <CAN_general_receive_callback+0xa8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1f      	ldr	r2, [pc, #124]	; (800134c <CAN_general_receive_callback+0xac>)
 80012d0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e019      	b.n	800130c <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (uint16_t)((RxData[i+1] << 8) | RxData[i]);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <CAN_general_receive_callback+0xa4>)
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4917      	ldr	r1, [pc, #92]	; (8001344 <CAN_general_receive_callback+0xa4>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	440b      	add	r3, r1
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b219      	sxth	r1, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da00      	bge.n	80012fa <CAN_general_receive_callback+0x5a>
 80012f8:	3301      	adds	r3, #1
 80012fa:	105b      	asrs	r3, r3, #1
 80012fc:	461a      	mov	r2, r3
 80012fe:	b289      	uxth	r1, r1
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <CAN_general_receive_callback+0xb0>)
 8001302:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i = 0; i < 8; i += 2){
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3302      	adds	r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b07      	cmp	r3, #7
 8001310:	dde2      	ble.n	80012d8 <CAN_general_receive_callback+0x38>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6); //A LED DA CAN (PIN 3, TÁ QUEIMADA)
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <CAN_general_receive_callback+0xb4>)
 8001316:	f002 faa8 	bl	800386a <HAL_GPIO_TogglePin>

		canMessageReceived(idgeneral, datageneral);
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <CAN_general_receive_callback+0xac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	490b      	ldr	r1, [pc, #44]	; (8001350 <CAN_general_receive_callback+0xb0>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff70 	bl	8001208 <canMessageReceived>

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001328:	2200      	movs	r2, #0
 800132a:	2101      	movs	r1, #1
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f001 fb87 	bl	8002a40 <HAL_FDCAN_ActivateNotification>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <CAN_general_receive_callback+0x9c>
			/* Notification Error */
			Error_Handler();
 8001338:	f000 fa2c 	bl	8001794 <Error_Handler>
		}
	}
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	240031e0 	.word	0x240031e0
 8001348:	240031e8 	.word	0x240031e8
 800134c:	24003218 	.word	0x24003218
 8001350:	24003210 	.word	0x24003210
 8001354:	58020c00 	.word	0x58020c00

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f000 fd82 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001360:	f000 f820 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001364:	f000 f986 	bl	8001674 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001368:	f000 f898 	bl	800149c <MX_FDCAN1_Init>
  MX_UART4_Init();
 800136c:	f000 f936 	bl	80015dc <MX_UART4_Init>
  MX_SDMMC1_SD_Init();
 8001370:	f000 f916 	bl	80015a0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001374:	f008 ff0a 	bl	800a18c <MX_FATFS_Init>
  MX_IWDG1_Init();
 8001378:	f000 f8f4 	bl	8001564 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 800137c:	f7ff f9c8 	bl	8000710 <init_CAN>
  SD_Create_File();
 8001380:	f7ff f9d0 	bl	8000724 <SD_Create_File>
  Cabecalho();
 8001384:	f7ff fa24 	bl	80007d0 <Cabecalho>
  Clean_CAN_Struct();
 8001388:	f7ff ff10 	bl	80011ac <Clean_CAN_Struct>


  HAL_IWDG_Refresh(&hiwdg1);
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <main+0x48>)
 800138e:	f002 fad5 	bl	800393c <HAL_IWDG_Refresh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg1);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <main+0x48>)
 8001394:	f002 fad2 	bl	800393c <HAL_IWDG_Refresh>
    //Condicoes_Teste();
	  writeSD();
 8001398:	f7ff fa52 	bl	8000840 <writeSD>
	  HAL_IWDG_Refresh(&hiwdg1);
 800139c:	e7f9      	b.n	8001392 <main+0x3a>
 800139e:	bf00      	nop
 80013a0:	24003308 	.word	0x24003308

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09c      	sub	sp, #112	; 0x70
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	224c      	movs	r2, #76	; 0x4c
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00c fbf8 	bl	800dba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2220      	movs	r2, #32
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00c fbf2 	bl	800dba8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f002 fac9 	bl	800395c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <SystemClock_Config+0xf0>)
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <SystemClock_Config+0xf0>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <SystemClock_Config+0xf0>)
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <SystemClock_Config+0xf4>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <SystemClock_Config+0xf4>)
 80013ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <SystemClock_Config+0xf4>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fc:	bf00      	nop
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <SystemClock_Config+0xf4>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140a:	d1f8      	bne.n	80013fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800140c:	2309      	movs	r3, #9
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001416:	2301      	movs	r3, #1
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001436:	230c      	movs	r3, #12
 8001438:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800143a:	2300      	movs	r3, #0
 800143c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fac2 	bl	80039d0 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001452:	f000 f99f 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	233f      	movs	r3, #63	; 0x3f
 8001458:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001462:	2308      	movs	r3, #8
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2102      	movs	r1, #2
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fed5 	bl	800422c <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001488:	f000 f984 	bl	8001794 <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3770      	adds	r7, #112	; 0x70
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58000400 	.word	0x58000400
 8001498:	58024800 	.word	0x58024800

0800149c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014cc:	2202      	movs	r2, #2
 80014ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014d2:	220d      	movs	r2, #13
 80014d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014d8:	2202      	movs	r2, #2
 80014da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014de:	2201      	movs	r2, #1
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014e4:	2202      	movs	r2, #2
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014ea:	220d      	movs	r2, #13
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_FDCAN1_Init+0xc0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001502:	2200      	movs	r2, #0
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001508:	2220      	movs	r2, #32
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800150e:	2204      	movs	r2, #4
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001514:	2220      	movs	r2, #32
 8001516:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800151a:	2204      	movs	r2, #4
 800151c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001520:	2220      	movs	r2, #32
 8001522:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001526:	2204      	movs	r2, #4
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800152c:	2220      	movs	r2, #32
 800152e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001532:	2220      	movs	r2, #32
 8001534:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001538:	2220      	movs	r2, #32
 800153a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_FDCAN1_Init+0xc0>)
 8001544:	2204      	movs	r2, #4
 8001546:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_FDCAN1_Init+0xc0>)
 800154a:	f000 fe5d 	bl	8002208 <HAL_FDCAN_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001554:	f000 f91e 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2400321c 	.word	0x2400321c
 8001560:	4000a000 	.word	0x4000a000

08001564 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_IWDG1_Init+0x34>)
 800156a:	4a0c      	ldr	r2, [pc, #48]	; (800159c <MX_IWDG1_Init+0x38>)
 800156c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_IWDG1_Init+0x34>)
 8001570:	2202      	movs	r2, #2
 8001572:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_IWDG1_Init+0x34>)
 8001576:	f640 72ff 	movw	r2, #4095	; 0xfff
 800157a:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 400;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_IWDG1_Init+0x34>)
 800157e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001582:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_IWDG1_Init+0x34>)
 8001586:	f002 f98a 	bl	800389e <HAL_IWDG_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001590:	f000 f900 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	24003308 	.word	0x24003308
 800159c:	58004800 	.word	0x58004800

080015a0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_SDMMC1_SD_Init+0x34>)
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <MX_SDMMC1_SD_Init+0x38>)
 80015a8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_SDMMC1_SD_Init+0x34>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_SDMMC1_SD_Init+0x34>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_SDMMC1_SD_Init+0x34>)
 80015b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015bc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <MX_SDMMC1_SD_Init+0x34>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <MX_SDMMC1_SD_Init+0x34>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	24003318 	.word	0x24003318
 80015d8:	52007000 	.word	0x52007000

080015dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <MX_UART4_Init+0x90>)
 80015e2:	4a23      	ldr	r2, [pc, #140]	; (8001670 <MX_UART4_Init+0x94>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <MX_UART4_Init+0x90>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_UART4_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_UART4_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_UART4_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_UART4_Init+0x90>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_UART4_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_UART4_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_UART4_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_UART4_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_UART4_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001624:	4811      	ldr	r0, [pc, #68]	; (800166c <MX_UART4_Init+0x90>)
 8001626:	f006 ff77 	bl	8008518 <HAL_UART_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001630:	f000 f8b0 	bl	8001794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001634:	2100      	movs	r1, #0
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_UART4_Init+0x90>)
 8001638:	f007 ff14 	bl	8009464 <HAL_UARTEx_SetTxFifoThreshold>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001642:	f000 f8a7 	bl	8001794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <MX_UART4_Init+0x90>)
 800164a:	f007 ff49 	bl	80094e0 <HAL_UARTEx_SetRxFifoThreshold>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001654:	f000 f89e 	bl	8001794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_UART4_Init+0x90>)
 800165a:	f007 feca 	bl	80093f2 <HAL_UARTEx_DisableFifoMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001664:	f000 f896 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	24003394 	.word	0x24003394
 8001670:	40004c00 	.word	0x40004c00

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <MX_GPIO_Init+0x114>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	4a3d      	ldr	r2, [pc, #244]	; (8001788 <MX_GPIO_Init+0x114>)
 8001692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <MX_GPIO_Init+0x114>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <MX_GPIO_Init+0x114>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	4a36      	ldr	r2, [pc, #216]	; (8001788 <MX_GPIO_Init+0x114>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <MX_GPIO_Init+0x114>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <MX_GPIO_Init+0x114>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <MX_GPIO_Init+0x114>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <MX_GPIO_Init+0x114>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <MX_GPIO_Init+0x114>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <MX_GPIO_Init+0x114>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <MX_GPIO_Init+0x114>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <MX_GPIO_Init+0x114>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001708:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <MX_GPIO_Init+0x114>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_GPIO_Init+0x114>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAN_LED_Pin|GNSS_LED_Pin|DATALOG_LED_Pin|ACCEL_LED_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2178      	movs	r1, #120	; 0x78
 8001724:	4819      	ldr	r0, [pc, #100]	; (800178c <MX_GPIO_Init+0x118>)
 8001726:	f002 f887 	bl	8003838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800172a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800173c:	2304      	movs	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4812      	ldr	r0, [pc, #72]	; (8001790 <MX_GPIO_Init+0x11c>)
 8001748:	f001 feae 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0x118>)
 8001760:	f001 fea2 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_LED_Pin GNSS_LED_Pin DATALOG_LED_Pin ACCEL_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin|GNSS_LED_Pin|DATALOG_LED_Pin|ACCEL_LED_Pin;
 8001764:	2378      	movs	r3, #120	; 0x78
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_GPIO_Init+0x118>)
 800177c:	f001 fe94 	bl	80034a8 <HAL_GPIO_Init>

}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58024400 	.word	0x58024400
 800178c:	58020c00 	.word	0x58020c00
 8001790:	58020400 	.word	0x58020400

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_MspInit+0x30>)
 80017a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x30>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x30>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	58024400 	.word	0x58024400

080017d4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0b8      	sub	sp, #224	; 0xe0
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	22bc      	movs	r2, #188	; 0xbc
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00c f9d7 	bl	800dba8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <HAL_FDCAN_MspInit+0xe0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d152      	bne.n	80018aa <HAL_FDCAN_MspInit+0xd6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001808:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800180a:	2300      	movs	r3, #0
 800180c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f003 f896 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 800181e:	f7ff ffb9 	bl	8001794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_FDCAN_MspInit+0xe4>)
 8001824:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001828:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_FDCAN_MspInit+0xe4>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_FDCAN_MspInit+0xe4>)
 8001834:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_FDCAN_MspInit+0xe4>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_FDCAN_MspInit+0xe4>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_FDCAN_MspInit+0xe4>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800185e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001878:	2309      	movs	r3, #9
 800187a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001882:	4619      	mov	r1, r3
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <HAL_FDCAN_MspInit+0xe8>)
 8001886:	f001 fe0f 	bl	80034a8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2013      	movs	r0, #19
 8001890:	f000 fc85 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001894:	2013      	movs	r0, #19
 8001896:	f000 fc9c 	bl	80021d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2015      	movs	r0, #21
 80018a0:	f000 fc7d 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80018a4:	2015      	movs	r0, #21
 80018a6:	f000 fc94 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	37e0      	adds	r7, #224	; 0xe0
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	4000a000 	.word	0x4000a000
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020400 	.word	0x58020400

080018c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0ba      	sub	sp, #232	; 0xe8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	22bc      	movs	r2, #188	; 0xbc
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00c f961 	bl	800dba8 <memset>
  if(hsd->Instance==SDMMC1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_SD_MspInit+0x144>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	f040 8085 	bne.w	80019fc <HAL_SD_MspInit+0x13c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80018f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	4618      	mov	r0, r3
 8001902:	f003 f81f 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 800190c:	f7ff ff42 	bl	8001794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001910:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001912:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001916:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001922:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001934:	4a34      	ldr	r2, [pc, #208]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_SD_MspInit+0x148>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001952:	4a2d      	ldr	r2, [pc, #180]	; (8001a08 <HAL_SD_MspInit+0x148>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_SD_MspInit+0x148>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800196a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800196e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001984:	230c      	movs	r3, #12
 8001986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <HAL_SD_MspInit+0x14c>)
 8001992:	f001 fd89 	bl	80034a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019b0:	230c      	movs	r3, #12
 80019b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <HAL_SD_MspInit+0x14c>)
 80019be:	f001 fd73 	bl	80034a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019c2:	2304      	movs	r3, #4
 80019c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019da:	230c      	movs	r3, #12
 80019dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019e4:	4619      	mov	r1, r3
 80019e6:	480a      	ldr	r0, [pc, #40]	; (8001a10 <HAL_SD_MspInit+0x150>)
 80019e8:	f001 fd5e 	bl	80034a8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2031      	movs	r0, #49	; 0x31
 80019f2:	f000 fbd4 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80019f6:	2031      	movs	r0, #49	; 0x31
 80019f8:	f000 fbeb 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	37e8      	adds	r7, #232	; 0xe8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	52007000 	.word	0x52007000
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	58020800 	.word	0x58020800
 8001a10:	58020c00 	.word	0x58020c00

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0b8      	sub	sp, #224	; 0xe0
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	22bc      	movs	r2, #188	; 0xbc
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00c f8b7 	bl	800dba8 <memset>
  if(huart->Instance==UART4)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_UART_MspInit+0xbc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d141      	bne.n	8001ac8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a44:	2302      	movs	r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 ff76 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a5e:	f7ff fe99 	bl	8001794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a68:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_UART_MspInit+0xc0>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_UART_MspInit+0xc4>)
 8001ac4:	f001 fcf0 	bl	80034a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	37e0      	adds	r7, #224	; 0xe0
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40004c00 	.word	0x40004c00
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58020000 	.word	0x58020000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 fa0e 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <FDCAN1_IT0_IRQHandler+0x10>)
 8001b36:	f000 fffd 	bl	8002b34 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2400321c 	.word	0x2400321c

08001b44 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <FDCAN1_IT1_IRQHandler+0x10>)
 8001b4a:	f000 fff3 	bl	8002b34 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2400321c 	.word	0x2400321c

08001b58 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <SDMMC1_IRQHandler+0x10>)
 8001b5e:	f005 fae7 	bl	8007130 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24003318 	.word	0x24003318

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b86:	f00b ffd7 	bl	800db38 <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
	}

return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e009      	b.n	8001c10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf1      	blt.n	8001bfc <_write+0x12>
	}
	return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_close>:

int _close(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_isatty>:

int _isatty(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	return 1;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f00b ff3c 	bl	800db38 <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	24080000 	.word	0x24080000
 8001cec:	00000800 	.word	0x00000800
 8001cf0:	24003424 	.word	0x24003424
 8001cf4:	24003680 	.word	0x24003680

08001cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <SystemInit+0xec>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <SystemInit+0xec>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <SystemInit+0xf0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d807      	bhi.n	8001d28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <SystemInit+0xf0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 030f 	bic.w	r3, r3, #15
 8001d20:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <SystemInit+0xf0>)
 8001d22:	f043 0307 	orr.w	r3, r3, #7
 8001d26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <SystemInit+0xf4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <SystemInit+0xf4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <SystemInit+0xf4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <SystemInit+0xf4>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	492b      	ldr	r1, [pc, #172]	; (8001dec <SystemInit+0xf4>)
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <SystemInit+0xf8>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <SystemInit+0xf0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <SystemInit+0xf0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 030f 	bic.w	r3, r3, #15
 8001d5a:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <SystemInit+0xf0>)
 8001d5c:	f043 0307 	orr.w	r3, r3, #7
 8001d60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <SystemInit+0xf4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <SystemInit+0xf4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <SystemInit+0xf4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <SystemInit+0xf4>)
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <SystemInit+0xfc>)
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <SystemInit+0xf4>)
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <SystemInit+0x100>)
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <SystemInit+0xf4>)
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <SystemInit+0x104>)
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <SystemInit+0xf4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <SystemInit+0xf4>)
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <SystemInit+0x104>)
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <SystemInit+0xf4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <SystemInit+0xf4>)
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <SystemInit+0x104>)
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <SystemInit+0xf4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <SystemInit+0xf4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <SystemInit+0xf4>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <SystemInit+0xf4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <SystemInit+0x108>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <SystemInit+0x10c>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc2:	d202      	bcs.n	8001dca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <SystemInit+0x110>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <SystemInit+0x114>)
 8001dcc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dd0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SystemInit+0xec>)
 8001dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	52002000 	.word	0x52002000
 8001dec:	58024400 	.word	0x58024400
 8001df0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001df4:	02020200 	.word	0x02020200
 8001df8:	01ff0000 	.word	0x01ff0000
 8001dfc:	01010280 	.word	0x01010280
 8001e00:	5c001000 	.word	0x5c001000
 8001e04:	ffff0000 	.word	0xffff0000
 8001e08:	51008108 	.word	0x51008108
 8001e0c:	52004000 	.word	0x52004000

08001e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e14:	f7ff ff70 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1a:	490d      	ldr	r1, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e30:	4c0a      	ldr	r4, [pc, #40]	; (8001e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f00b fe81 	bl	800db44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e42:	f7ff fa89 	bl	8001358 <main>
  bx  lr
 8001e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e50:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001e54:	08011924 	.word	0x08011924
  ldr r2, =_sbss
 8001e58:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001e5c:	24003680 	.word	0x24003680

08001e60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC3_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f000 f98c 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e70:	f002 fb92 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_Init+0x68>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <HAL_Init+0x6c>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_Init+0x68>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_Init+0x6c>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_Init+0x70>)
 8001ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_Init+0x74>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f814 	bl	8001edc <HAL_InitTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e002      	b.n	8001ec4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebe:	f7ff fc6f 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	0801109c 	.word	0x0801109c
 8001ed4:	24000004 	.word	0x24000004
 8001ed8:	24000000 	.word	0x24000000

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_InitTick+0x60>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e021      	b.n	8001f34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_InitTick+0x64>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_InitTick+0x60>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f971 	bl	80021ee <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 f93b 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x68>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2400000c 	.word	0x2400000c
 8001f40:	24000000 	.word	0x24000000
 8001f44:	24000008 	.word	0x24000008

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	2400000c 	.word	0x2400000c
 8001f6c:	24003428 	.word	0x24003428

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	24003428 	.word	0x24003428

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_Delay+0x44>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2400000c 	.word	0x2400000c

08001fd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetREVID+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	5c001000 	.word	0x5c001000

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <__NVIC_SetPriorityGrouping+0x40>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	4313      	orrs	r3, r2
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x40>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00
 800202c:	05fa0000 	.word	0x05fa0000

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff40 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff90 	bl	80020dc <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5f 	bl	8002088 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff33 	bl	800204c <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa4 	bl	8002144 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b098      	sub	sp, #96	; 0x60
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002210:	4a99      	ldr	r2, [pc, #612]	; (8002478 <HAL_FDCAN_Init+0x270>)
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	4611      	mov	r1, r2
 8002218:	224c      	movs	r2, #76	; 0x4c
 800221a:	4618      	mov	r0, r3
 800221c:	f00b fcb6 	bl	800db8c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e239      	b.n	800269e <HAL_FDCAN_Init+0x496>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a93      	ldr	r2, [pc, #588]	; (800247c <HAL_FDCAN_Init+0x274>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d106      	bne.n	8002242 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d155      	bne.n	80022fa <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a89      	ldr	r2, [pc, #548]	; (8002480 <HAL_FDCAN_Init+0x278>)
 800225a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a88      	ldr	r2, [pc, #544]	; (8002484 <HAL_FDCAN_Init+0x27c>)
 8002262:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a87      	ldr	r2, [pc, #540]	; (8002488 <HAL_FDCAN_Init+0x280>)
 800226a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a86      	ldr	r2, [pc, #536]	; (800248c <HAL_FDCAN_Init+0x284>)
 8002272:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a85      	ldr	r2, [pc, #532]	; (8002490 <HAL_FDCAN_Init+0x288>)
 800227a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a84      	ldr	r2, [pc, #528]	; (8002494 <HAL_FDCAN_Init+0x28c>)
 8002282:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a83      	ldr	r2, [pc, #524]	; (8002498 <HAL_FDCAN_Init+0x290>)
 800228a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a82      	ldr	r2, [pc, #520]	; (800249c <HAL_FDCAN_Init+0x294>)
 8002292:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a81      	ldr	r2, [pc, #516]	; (80024a0 <HAL_FDCAN_Init+0x298>)
 800229a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a80      	ldr	r2, [pc, #512]	; (80024a4 <HAL_FDCAN_Init+0x29c>)
 80022a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a7f      	ldr	r2, [pc, #508]	; (80024a8 <HAL_FDCAN_Init+0x2a0>)
 80022aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a7e      	ldr	r2, [pc, #504]	; (80024ac <HAL_FDCAN_Init+0x2a4>)
 80022b2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_FDCAN_Init+0x2a8>)
 80022ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <HAL_FDCAN_Init+0x2ac>)
 80022c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a7b      	ldr	r2, [pc, #492]	; (80024b8 <HAL_FDCAN_Init+0x2b0>)
 80022ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_FDCAN_Init+0x2b4>)
 80022d2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a79      	ldr	r2, [pc, #484]	; (80024c0 <HAL_FDCAN_Init+0x2b8>)
 80022da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a76      	ldr	r2, [pc, #472]	; (80024c4 <HAL_FDCAN_Init+0x2bc>)
 80022ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0210 	bic.w	r2, r2, #16
 8002308:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800230a:	f7ff fe31 	bl	8001f70 <HAL_GetTick>
 800230e:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002310:	e014      	b.n	800233c <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002312:	f7ff fe2d 	bl	8001f70 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d90d      	bls.n	800233c <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e1b0      	b.n	800269e <HAL_FDCAN_Init+0x496>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d0e3      	beq.n	8002312 <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235a:	f7ff fe09 	bl	8001f70 <HAL_GetTick>
 800235e:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002360:	e014      	b.n	800238c <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002362:	f7ff fe05 	bl	8001f70 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b0a      	cmp	r3, #10
 800236e:	d90d      	bls.n	800238c <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e188      	b.n	800269e <HAL_FDCAN_Init+0x496>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0e3      	beq.n	8002362 <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0202 	orr.w	r2, r2, #2
 80023a8:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	7c1b      	ldrb	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c0:	619a      	str	r2, [r3, #24]
 80023c2:	e007      	b.n	80023d4 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7c5b      	ldrb	r3, [r3, #17]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d108      	bne.n	80023ee <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ea:	619a      	str	r2, [r3, #24]
 80023ec:	e007      	b.n	80023fe <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7c9b      	ldrb	r3, [r3, #18]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d108      	bne.n	8002418 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699a      	ldr	r2, [r3, #24]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	e007      	b.n	8002428 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002426:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800244c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0210 	bic.w	r2, r2, #16
 800245c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d130      	bne.n	80024c8 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0204 	orr.w	r2, r2, #4
 8002474:	619a      	str	r2, [r3, #24]
 8002476:	e054      	b.n	8002522 <HAL_FDCAN_Init+0x31a>
 8002478:	08011008 	.word	0x08011008
 800247c:	4000a000 	.word	0x4000a000
 8002480:	08003031 	.word	0x08003031
 8002484:	08003047 	.word	0x08003047
 8002488:	0800305d 	.word	0x0800305d
 800248c:	08003073 	.word	0x08003073
 8002490:	08003089 	.word	0x08003089
 8002494:	0800309d 	.word	0x0800309d
 8002498:	080030b3 	.word	0x080030b3
 800249c:	080030c9 	.word	0x080030c9
 80024a0:	08003105 	.word	0x08003105
 80024a4:	080030dd 	.word	0x080030dd
 80024a8:	080030f1 	.word	0x080030f1
 80024ac:	08003119 	.word	0x08003119
 80024b0:	0800312d 	.word	0x0800312d
 80024b4:	08003143 	.word	0x08003143
 80024b8:	08003159 	.word	0x08003159
 80024bc:	0800316f 	.word	0x0800316f
 80024c0:	08003187 	.word	0x08003187
 80024c4:	080017d5 	.word	0x080017d5
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d028      	beq.n	8002522 <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d01c      	beq.n	8002512 <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0210 	orr.w	r2, r2, #16
 80024f6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d110      	bne.n	8002522 <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0220 	orr.w	r2, r2, #32
 800250e:	619a      	str	r2, [r3, #24]
 8002510:	e007      	b.n	8002522 <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	3b01      	subs	r3, #1
 8002528:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	3b01      	subs	r3, #1
 8002530:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002532:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800253a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	3b01      	subs	r3, #1
 8002544:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800254a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800254c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002556:	d115      	bne.n	8002584 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	3b01      	subs	r3, #1
 8002564:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002566:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	3b01      	subs	r3, #1
 800256e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002570:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	3b01      	subs	r3, #1
 800257a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002580:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002582:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	4413      	add	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <HAL_FDCAN_Init+0x3cc>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80025b8:	f023 0107 	bic.w	r1, r3, #7
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	3360      	adds	r3, #96	; 0x60
 80025c4:	443b      	add	r3, r7
 80025c6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d011      	beq.n	8002600 <HAL_FDCAN_Init+0x3f8>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80025e4:	f023 0107 	bic.w	r1, r3, #7
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	3360      	adds	r3, #96	; 0x60
 80025f0:	443b      	add	r3, r7
 80025f2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <HAL_FDCAN_Init+0x426>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002610:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	3360      	adds	r3, #96	; 0x60
 800261c:	443b      	add	r3, r7
 800261e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002622:	011a      	lsls	r2, r3, #4
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <HAL_FDCAN_Init+0x454>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800263e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	443b      	add	r3, r7
 800264c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002650:	021a      	lsls	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_FDCAN_Init+0x4a0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d107      	bne.n	8002676 <HAL_FDCAN_Init+0x46e>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f022 0203 	bic.w	r2, r2, #3
 8002674:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fd84 	bl	800319c <FDCAN_CalcultateRamBlockAddresses>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800269a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3760      	adds	r7, #96	; 0x60
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	4000a000 	.word	0x4000a000

080026ac <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e015      	b.n	8002700 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d104      	bne.n	80026ea <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80026e8:	e009      	b.n	80026fe <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d111      	bne.n	8002744 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e008      	b.n	8002756 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002764:	b480      	push	{r7}
 8002766:	b08b      	sub	sp, #44	; 0x2c
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800277c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800277e:	7efb      	ldrb	r3, [r7, #27]
 8002780:	2b02      	cmp	r3, #2
 8002782:	f040 814b 	bne.w	8002a1c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d14d      	bne.n	8002828 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002794:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e13e      	b.n	8002a2e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e12c      	b.n	8002a2e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027dc:	0e1b      	lsrs	r3, r3, #24
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10b      	bne.n	80027fe <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80027ee:	0fdb      	lsrs	r3, r3, #31
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027f8:	d101      	bne.n	80027fe <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	69f9      	ldr	r1, [r7, #28]
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e069      	b.n	80028fc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b41      	cmp	r3, #65	; 0x41
 800282c:	d14d      	bne.n	80028ca <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0ed      	b.n	8002a2e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800285a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002868:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0db      	b.n	8002a2e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800287e:	0e1b      	lsrs	r3, r3, #24
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10b      	bne.n	80028a0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002890:	0fdb      	lsrs	r3, r3, #31
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800289a:	d101      	bne.n	80028a0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800289c:	2301      	movs	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	69f9      	ldr	r1, [r7, #28]
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	e018      	b.n	80028fc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d309      	bcc.n	80028e8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0a2      	b.n	8002a2e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e005      	b.n	800292c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3304      	adds	r3, #4
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e1b      	lsrs	r3, r3, #24
 800297e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0fda      	lsrs	r2, r3, #31
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3304      	adds	r3, #4
 8002994:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	e00a      	b.n	80029b6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	441a      	add	r2, r3
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	440b      	add	r3, r1
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	3301      	adds	r3, #1
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	0c1b      	lsrs	r3, r3, #16
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d3eb      	bcc.n	80029a0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d105      	bne.n	80029da <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80029d8:	e01e      	b.n	8002a18 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b41      	cmp	r3, #65	; 0x41
 80029de:	d105      	bne.n	80029ec <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80029ea:	e015      	b.n	8002a18 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b1f      	cmp	r3, #31
 80029f0:	d808      	bhi.n	8002a04 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002a02:	e009      	b.n	8002a18 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e008      	b.n	8002a2e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a22:	f043 0208 	orr.w	r2, r3, #8
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	372c      	adds	r7, #44	; 0x2c
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	080110ac 	.word	0x080110ac

08002a40 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a52:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d002      	beq.n	8002a60 <HAL_FDCAN_ActivateNotification+0x20>
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d155      	bne.n	8002b0c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a7e:	e014      	b.n	8002aaa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d108      	bne.n	8002aa2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0202 	orr.w	r2, r2, #2
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa0:	e003      	b.n	8002aaa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_FDCAN_ActivateNotification+0xec>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	6553      	str	r3, [r2, #84]	; 0x54
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0f9b      	lsrs	r3, r3, #30
 8002b02:	490b      	ldr	r1, [pc, #44]	; (8002b30 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e008      	b.n	8002b1e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	3fcfffff 	.word	0x3fcfffff
 8002b30:	4000a800 	.word	0x4000a800

08002b34 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b096      	sub	sp, #88	; 0x58
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002b3c:	4b97      	ldr	r3, [pc, #604]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	079b      	lsls	r3, r3, #30
 8002b42:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002b44:	4b95      	ldr	r3, [pc, #596]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	079b      	lsls	r3, r3, #30
 8002b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b64:	4013      	ands	r3, r2
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b94:	4013      	ands	r3, r2
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bac:	4013      	ands	r3, r2
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <HAL_FDCAN_IRQHandler+0xd6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_FDCAN_IRQHandler+0xd6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf8:	651a      	str	r2, [r3, #80]	; 0x50
 8002bfa:	4b68      	ldr	r3, [pc, #416]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	0a9b      	lsrs	r3, r3, #10
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01f      	beq.n	8002c56 <HAL_FDCAN_IRQHandler+0x122>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	0a9b      	lsrs	r3, r3, #10
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_FDCAN_IRQHandler+0x122>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c36:	4013      	ands	r3, r2
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c42:	651a      	str	r2, [r3, #80]	; 0x50
 8002c44:	4b55      	ldr	r3, [pc, #340]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002c50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00f      	beq.n	8002c7c <HAL_FDCAN_IRQHandler+0x148>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c62:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_FDCAN_IRQHandler+0x26c>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	6513      	str	r3, [r2, #80]	; 0x50
 8002c68:	4a4c      	ldr	r2, [pc, #304]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	0f9b      	lsrs	r3, r3, #30
 8002c6e:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00f      	beq.n	8002ca2 <HAL_FDCAN_IRQHandler+0x16e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c88:	4b45      	ldr	r3, [pc, #276]	; (8002da0 <HAL_FDCAN_IRQHandler+0x26c>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	6513      	str	r3, [r2, #80]	; 0x50
 8002c8e:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c92:	0f9b      	lsrs	r3, r3, #30
 8002c94:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00f      	beq.n	8002cc8 <HAL_FDCAN_IRQHandler+0x194>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cae:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_FDCAN_IRQHandler+0x26c>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	6513      	str	r3, [r2, #80]	; 0x50
 8002cb4:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	0f9b      	lsrs	r3, r3, #30
 8002cba:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cc2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00f      	beq.n	8002cee <HAL_FDCAN_IRQHandler+0x1ba>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_FDCAN_IRQHandler+0x26c>)
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	6513      	str	r3, [r2, #80]	; 0x50
 8002cda:	4a30      	ldr	r2, [pc, #192]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cde:	0f9b      	lsrs	r3, r3, #30
 8002ce0:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ce8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf0:	0adb      	lsrs	r3, r3, #11
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_FDCAN_IRQHandler+0x1ec>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	0adb      	lsrs	r3, r3, #11
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <HAL_FDCAN_IRQHandler+0x1ec>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01f      	beq.n	8002d6c <HAL_FDCAN_IRQHandler+0x238>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	0a5b      	lsrs	r3, r3, #9
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d58:	651a      	str	r2, [r3, #80]	; 0x50
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	0cdb      	lsrs	r3, r3, #19
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d017      	beq.n	8002da8 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	0cdb      	lsrs	r3, r3, #19
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d8e:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_FDCAN_IRQHandler+0x268>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d9a:	e003      	b.n	8002da4 <HAL_FDCAN_IRQHandler+0x270>
 8002d9c:	4000a800 	.word	0x4000a800
 8002da0:	3fcfffff 	.word	0x3fcfffff
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_FDCAN_IRQHandler+0x2a6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	0c1b      	lsrs	r3, r3, #16
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_FDCAN_IRQHandler+0x2a6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dc8:	651a      	str	r2, [r3, #80]	; 0x50
 8002dca:	4b96      	ldr	r3, [pc, #600]	; (8003024 <HAL_FDCAN_IRQHandler+0x4f0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ddc:	0c9b      	lsrs	r3, r3, #18
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <HAL_FDCAN_IRQHandler+0x2d8>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_FDCAN_IRQHandler+0x2d8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8002dfc:	4b89      	ldr	r3, [pc, #548]	; (8003024 <HAL_FDCAN_IRQHandler+0x4f0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	0c5b      	lsrs	r3, r3, #17
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <HAL_FDCAN_IRQHandler+0x310>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	0c5b      	lsrs	r3, r3, #17
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00f      	beq.n	8002e44 <HAL_FDCAN_IRQHandler+0x310>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002e2e:	4b7d      	ldr	r3, [pc, #500]	; (8003024 <HAL_FDCAN_IRQHandler+0x4f0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00f      	beq.n	8002e6a <HAL_FDCAN_IRQHandler+0x336>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e50:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002e52:	400b      	ands	r3, r1
 8002e54:	6513      	str	r3, [r2, #80]	; 0x50
 8002e56:	4a73      	ldr	r2, [pc, #460]	; (8003024 <HAL_FDCAN_IRQHandler+0x4f0>)
 8002e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5a:	0f9b      	lsrs	r3, r3, #30
 8002e5c:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d011      	beq.n	8002e94 <HAL_FDCAN_IRQHandler+0x360>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <HAL_FDCAN_IRQHandler+0x4f4>)
 8002e78:	400b      	ands	r3, r1
 8002e7a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e7c:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_FDCAN_IRQHandler+0x4f0>)
 8002e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e80:	0f9b      	lsrs	r3, r3, #30
 8002e82:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a64      	ldr	r2, [pc, #400]	; (800302c <HAL_FDCAN_IRQHandler+0x4f8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	f040 80b4 	bne.w	8003008 <HAL_FDCAN_IRQHandler+0x4d4>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80ac 	beq.w	8003008 <HAL_FDCAN_IRQHandler+0x4d4>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002edc:	4013      	ands	r3, r2
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002f02:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	6a3a      	ldr	r2, [r7, #32]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002f1a:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f44:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	099b      	lsrs	r3, r3, #6
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01c      	beq.n	8002fb2 <HAL_FDCAN_IRQHandler+0x47e>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_FDCAN_IRQHandler+0x47e>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2240      	movs	r2, #64	; 0x40
 8002fa2:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbe:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_FDCAN_IRQHandler+0x4b6>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_FDCAN_IRQHandler+0x4d4>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_FDCAN_IRQHandler+0x4e8>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800301c:	bf00      	nop
 800301e:	3758      	adds	r7, #88	; 0x58
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	4000a800 	.word	0x4000a800
 8003028:	3fcfffff 	.word	0x3fcfffff
 800302c:	4000a000 	.word	0x4000a000

08003030 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80031b2:	4ba7      	ldr	r3, [pc, #668]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	0091      	lsls	r1, r2, #2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	430b      	orrs	r3, r1
 80031c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031cc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	041a      	lsls	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	4413      	add	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031f2:	4b97      	ldr	r3, [pc, #604]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	0091      	lsls	r1, r2, #2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	430b      	orrs	r3, r1
 8003200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4413      	add	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003234:	4b86      	ldr	r3, [pc, #536]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003236:	4013      	ands	r3, r2
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	0091      	lsls	r1, r2, #2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800324e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	041a      	lsls	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	4413      	add	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800327c:	4b74      	ldr	r3, [pc, #464]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	0091      	lsls	r1, r2, #2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003296:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329e:	041a      	lsls	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80032c4:	4b62      	ldr	r3, [pc, #392]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	0091      	lsls	r1, r2, #2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80032f0:	4b57      	ldr	r3, [pc, #348]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	0091      	lsls	r1, r2, #2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800330a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	041a      	lsls	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4413      	add	r3, r2
 8003328:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003334:	4013      	ands	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0091      	lsls	r1, r2, #2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	430b      	orrs	r3, r1
 8003340:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800334c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003368:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003370:	061a      	lsls	r2, r3, #24
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003382:	4413      	add	r3, r2
 8003384:	009a      	lsls	r2, r3, #2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d915      	bls.n	8003478 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800344c:	e006      	b.n	800345c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800344e:	bf00      	nop
 8003450:	ffff0003 	.word	0xffff0003
 8003454:	10002b00 	.word	0x10002b00
 8003458:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e010      	b.n	800349a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e005      	b.n	800348c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d3f3      	bcc.n	8003480 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_GPIO_Init+0x234>)
 80034b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034ba:	e194      	b.n	80037e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8186 	beq.w	80037e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d005      	beq.n	80034ec <HAL_GPIO_Init+0x44>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d130      	bne.n	800354e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003522:	2201      	movs	r2, #1
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0201 	and.w	r2, r3, #1
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b03      	cmp	r3, #3
 8003558:	d017      	beq.n	800358a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d123      	bne.n	80035de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	69b9      	ldr	r1, [r7, #24]
 80035da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80e0 	beq.w	80037e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_GPIO_Init+0x238>)
 8003622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003626:	4a2e      	ldr	r2, [pc, #184]	; (80036e0 <HAL_GPIO_Init+0x238>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_GPIO_Init+0x238>)
 8003632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800363e:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <HAL_GPIO_Init+0x23c>)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_GPIO_Init+0x240>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d052      	beq.n	8003710 <HAL_GPIO_Init+0x268>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_GPIO_Init+0x244>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d031      	beq.n	80036d6 <HAL_GPIO_Init+0x22e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_GPIO_Init+0x248>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02b      	beq.n	80036d2 <HAL_GPIO_Init+0x22a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <HAL_GPIO_Init+0x24c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d025      	beq.n	80036ce <HAL_GPIO_Init+0x226>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_GPIO_Init+0x250>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <HAL_GPIO_Init+0x222>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <HAL_GPIO_Init+0x254>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d019      	beq.n	80036c6 <HAL_GPIO_Init+0x21e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <HAL_GPIO_Init+0x258>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_GPIO_Init+0x21a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_GPIO_Init+0x25c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_GPIO_Init+0x216>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_GPIO_Init+0x260>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <HAL_GPIO_Init+0x212>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_GPIO_Init+0x264>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_GPIO_Init+0x20e>
 80036b2:	2309      	movs	r3, #9
 80036b4:	e02d      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036b6:	230a      	movs	r3, #10
 80036b8:	e02b      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e029      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036be:	2307      	movs	r3, #7
 80036c0:	e027      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036c2:	2306      	movs	r3, #6
 80036c4:	e025      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036c6:	2305      	movs	r3, #5
 80036c8:	e023      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e021      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036ce:	2303      	movs	r3, #3
 80036d0:	e01f      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e01d      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e01b      	b.n	8003712 <HAL_GPIO_Init+0x26a>
 80036da:	bf00      	nop
 80036dc:	58000080 	.word	0x58000080
 80036e0:	58024400 	.word	0x58024400
 80036e4:	58000400 	.word	0x58000400
 80036e8:	58020000 	.word	0x58020000
 80036ec:	58020400 	.word	0x58020400
 80036f0:	58020800 	.word	0x58020800
 80036f4:	58020c00 	.word	0x58020c00
 80036f8:	58021000 	.word	0x58021000
 80036fc:	58021400 	.word	0x58021400
 8003700:	58021800 	.word	0x58021800
 8003704:	58021c00 	.word	0x58021c00
 8003708:	58022000 	.word	0x58022000
 800370c:	58022400 	.word	0x58022400
 8003710:	2300      	movs	r3, #0
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	f002 0203 	and.w	r2, r2, #3
 8003718:	0092      	lsls	r2, r2, #2
 800371a:	4093      	lsls	r3, r2
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003722:	4938      	ldr	r1, [pc, #224]	; (8003804 <HAL_GPIO_Init+0x35c>)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	3302      	adds	r3, #2
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f47f ae63 	bne.w	80034bc <HAL_GPIO_Init+0x14>
  }
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	3724      	adds	r7, #36	; 0x24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	58000400 	.word	0x58000400

08003808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e001      	b.n	800382a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
 8003844:	4613      	mov	r3, r2
 8003846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003848:	787b      	ldrb	r3, [r7, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003854:	e003      	b.n	800385e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	041a      	lsls	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	619a      	str	r2, [r3, #24]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800387c:	887a      	ldrh	r2, [r7, #2]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	041a      	lsls	r2, r3, #16
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43d9      	mvns	r1, r3
 8003888:	887b      	ldrh	r3, [r7, #2]
 800388a:	400b      	ands	r3, r1
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	619a      	str	r2, [r3, #24]
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e041      	b.n	8003934 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80038b8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f245 5255 	movw	r2, #21845	; 0x5555
 80038c2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6892      	ldr	r2, [r2, #8]
 80038d6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80038d8:	f7fe fb4a 	bl	8001f70 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038de:	e00f      	b.n	8003900 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80038e0:	f7fe fb46 	bl	8001f70 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b31      	cmp	r3, #49	; 0x31
 80038ec:	d908      	bls.n	8003900 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e019      	b.n	8003934 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e8      	bne.n	80038e0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d005      	beq.n	8003928 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68d2      	ldr	r2, [r2, #12]
 8003924:	611a      	str	r2, [r3, #16]
 8003926:	e004      	b.n	8003932 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800394c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_PWREx_ConfigSupply+0x70>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d00a      	beq.n	8003986 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <HAL_PWREx_ConfigSupply+0x70>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d001      	beq.n	8003982 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e01f      	b.n	80039c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e01d      	b.n	80039c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_PWREx_ConfigSupply+0x70>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	490f      	ldr	r1, [pc, #60]	; (80039cc <HAL_PWREx_ConfigSupply+0x70>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003996:	f7fe faeb 	bl	8001f70 <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800399c:	e009      	b.n	80039b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800399e:	f7fe fae7 	bl	8001f70 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ac:	d901      	bls.n	80039b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e007      	b.n	80039c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_PWREx_ConfigSupply+0x70>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039be:	d1ee      	bne.n	800399e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	58024800 	.word	0x58024800

080039d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	; 0x30
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f000 bc1d 	b.w	800421e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8087 	beq.w	8003b00 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039fc:	4b96      	ldr	r3, [pc, #600]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d007      	beq.n	8003a18 <HAL_RCC_OscConfig+0x48>
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	2b18      	cmp	r3, #24
 8003a0c:	d110      	bne.n	8003a30 <HAL_RCC_OscConfig+0x60>
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	4b8f      	ldr	r3, [pc, #572]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d06c      	beq.n	8003afe <HAL_RCC_OscConfig+0x12e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d168      	bne.n	8003afe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e3f6      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x78>
 8003a3a:	4b87      	ldr	r3, [pc, #540]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a86      	ldr	r2, [pc, #536]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e02e      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd6>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10c      	bne.n	8003a6a <HAL_RCC_OscConfig+0x9a>
 8003a50:	4b81      	ldr	r3, [pc, #516]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a80      	ldr	r2, [pc, #512]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7d      	ldr	r2, [pc, #500]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e01d      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCC_OscConfig+0xbe>
 8003a74:	4b78      	ldr	r3, [pc, #480]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a77      	ldr	r2, [pc, #476]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a74      	ldr	r2, [pc, #464]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e00b      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd6>
 8003a8e:	4b72      	ldr	r3, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a71      	ldr	r2, [pc, #452]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6e      	ldr	r2, [pc, #440]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fe fa5f 	bl	8001f70 <HAL_GetTick>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab6:	f7fe fa5b 	bl	8001f70 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e3aa      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac8:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0xe6>
 8003ad4:	e014      	b.n	8003b00 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fa4b 	bl	8001f70 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ade:	f7fe fa47 	bl	8001f70 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	; 0x64
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e396      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003af0:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x10e>
 8003afc:	e000      	b.n	8003b00 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80cb 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b16:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_RCC_OscConfig+0x164>
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2b18      	cmp	r3, #24
 8003b28:	d156      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x208>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d151      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x17c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e368      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b4c:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 0219 	bic.w	r2, r3, #25
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	493f      	ldr	r1, [pc, #252]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b5e:	f7fe fa07 	bl	8001f70 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b66:	f7fe fa03 	bl	8001f70 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e352      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b78:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	f7fe fa24 	bl	8001fd0 <HAL_GetREVID>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d817      	bhi.n	8003bc2 <HAL_RCC_OscConfig+0x1f2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x1dc>
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003baa:	e07b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	031b      	lsls	r3, r3, #12
 8003bba:	4927      	ldr	r1, [pc, #156]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	e070      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	4921      	ldr	r1, [pc, #132]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd6:	e065      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d048      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 0219 	bic.w	r2, r3, #25
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	491a      	ldr	r1, [pc, #104]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe f9bd 	bl	8001f70 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fe f9b9 	bl	8001f70 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e308      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	f7fe f9da 	bl	8001fd0 <HAL_GetREVID>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d81a      	bhi.n	8003c5c <HAL_RCC_OscConfig+0x28c>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d108      	bne.n	8003c40 <HAL_RCC_OscConfig+0x270>
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	6053      	str	r3, [r2, #4]
 8003c3e:	e031      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	031b      	lsls	r3, r3, #12
 8003c4e:	4902      	ldr	r1, [pc, #8]	; (8003c58 <HAL_RCC_OscConfig+0x288>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	e026      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
 8003c56:	bf00      	nop
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	4b9a      	ldr	r3, [pc, #616]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	4997      	ldr	r1, [pc, #604]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
 8003c70:	e018      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c72:	4b95      	ldr	r3, [pc, #596]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a94      	ldr	r2, [pc, #592]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7fe f977 	bl	8001f70 <HAL_GetTick>
 8003c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c86:	f7fe f973 	bl	8001f70 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e2c2      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c98:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a9 	beq.w	8003e04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb2:	4b85      	ldr	r3, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cbc:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d007      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x308>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b18      	cmp	r3, #24
 8003ccc:	d13a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x374>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d135      	bne.n	8003d44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cd8:	4b7b      	ldr	r3, [pc, #492]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x320>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b80      	cmp	r3, #128	; 0x80
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e296      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cf0:	f7fe f96e 	bl	8001fd0 <HAL_GetREVID>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d817      	bhi.n	8003d2e <HAL_RCC_OscConfig+0x35e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d108      	bne.n	8003d18 <HAL_RCC_OscConfig+0x348>
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d0e:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d16:	e075      	b.n	8003e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d18:	4b6b      	ldr	r3, [pc, #428]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	069b      	lsls	r3, r3, #26
 8003d26:	4968      	ldr	r1, [pc, #416]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d2c:	e06a      	b.n	8003e04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d2e:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	4962      	ldr	r1, [pc, #392]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d42:	e05f      	b.n	8003e04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d042      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5d      	ldr	r2, [pc, #372]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe f90a 	bl	8001f70 <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d60:	f7fe f906 	bl	8001f70 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e255      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d72:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d7e:	f7fe f927 	bl	8001fd0 <HAL_GetREVID>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d817      	bhi.n	8003dbc <HAL_RCC_OscConfig+0x3ec>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d108      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3d6>
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d9c:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003da2:	6053      	str	r3, [r2, #4]
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0x434>
 8003da6:	4b48      	ldr	r3, [pc, #288]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	069b      	lsls	r3, r3, #26
 8003db4:	4944      	ldr	r1, [pc, #272]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
 8003dba:	e023      	b.n	8003e04 <HAL_RCC_OscConfig+0x434>
 8003dbc:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	493f      	ldr	r1, [pc, #252]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
 8003dd0:	e018      	b.n	8003e04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe f8c7 	bl	8001f70 <HAL_GetTick>
 8003de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003de6:	f7fe f8c3 	bl	8001f70 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e212      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003df8:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d036      	beq.n	8003e7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d019      	beq.n	8003e4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fe f8a4 	bl	8001f70 <HAL_GetTick>
 8003e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7fe f8a0 	bl	8001f70 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1ef      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x45c>
 8003e4a:	e018      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fe f88a 	bl	8001f70 <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fe f886 	bl	8001f70 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e1d5      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d039      	beq.n	8003efe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e9e:	f7fe f867 	bl	8001f70 <HAL_GetTick>
 8003ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ea6:	f7fe f863 	bl	8001f70 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1b2      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4d6>
 8003ec4:	e01b      	b.n	8003efe <HAL_RCC_OscConfig+0x52e>
 8003ec6:	bf00      	nop
 8003ec8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ecc:	4b9b      	ldr	r3, [pc, #620]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a9a      	ldr	r2, [pc, #616]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ed8:	f7fe f84a 	bl	8001f70 <HAL_GetTick>
 8003edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ee0:	f7fe f846 	bl	8001f70 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e195      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ef2:	4b92      	ldr	r3, [pc, #584]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8081 	beq.w	800400e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f0c:	4b8c      	ldr	r3, [pc, #560]	; (8004140 <HAL_RCC_OscConfig+0x770>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a8b      	ldr	r2, [pc, #556]	; (8004140 <HAL_RCC_OscConfig+0x770>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f18:	f7fe f82a 	bl	8001f70 <HAL_GetTick>
 8003f1c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fe f826 	bl	8001f70 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e175      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f32:	4b83      	ldr	r3, [pc, #524]	; (8004140 <HAL_RCC_OscConfig+0x770>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x584>
 8003f46:	4b7d      	ldr	r3, [pc, #500]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a7c      	ldr	r2, [pc, #496]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	e02d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x5e0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x5a6>
 8003f5c:	4b77      	ldr	r3, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a76      	ldr	r2, [pc, #472]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b74      	ldr	r3, [pc, #464]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a73      	ldr	r2, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	f023 0304 	bic.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	e01c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x5e0>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b05      	cmp	r3, #5
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x5c8>
 8003f7e:	4b6f      	ldr	r3, [pc, #444]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a6e      	ldr	r2, [pc, #440]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8a:	4b6c      	ldr	r3, [pc, #432]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a6b      	ldr	r2, [pc, #428]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x5e0>
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a67      	ldr	r2, [pc, #412]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a64      	ldr	r2, [pc, #400]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003faa:	f023 0304 	bic.w	r3, r3, #4
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd ffda 	bl	8001f70 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc0:	f7fd ffd6 	bl	8001f70 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e123      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fd6:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0ee      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x5f0>
 8003fe2:	e014      	b.n	800400e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd ffc4 	bl	8001f70 <HAL_GetTick>
 8003fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fec:	f7fd ffc0 	bl	8001f70 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e10d      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004002:	4b4e      	ldr	r3, [pc, #312]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ee      	bne.n	8003fec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8102 	beq.w	800421c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004018:	4b48      	ldr	r3, [pc, #288]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004020:	2b18      	cmp	r3, #24
 8004022:	f000 80bd 	beq.w	80041a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b02      	cmp	r3, #2
 800402c:	f040 809e 	bne.w	800416c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b42      	ldr	r3, [pc, #264]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a41      	ldr	r2, [pc, #260]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd ff98 	bl	8001f70 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd ff94 	bl	8001f70 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0e3      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004062:	4b36      	ldr	r3, [pc, #216]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0x774>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004072:	0112      	lsls	r2, r2, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	4931      	ldr	r1, [pc, #196]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	628b      	str	r3, [r1, #40]	; 0x28
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	3b01      	subs	r3, #1
 8004082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	3b01      	subs	r3, #1
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	b29b      	uxth	r3, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	3b01      	subs	r3, #1
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	3b01      	subs	r3, #1
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040ac:	4923      	ldr	r1, [pc, #140]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	4a21      	ldr	r2, [pc, #132]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040be:	4b1f      	ldr	r3, [pc, #124]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCC_OscConfig+0x778>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040ca:	00d2      	lsls	r2, r2, #3
 80040cc:	491b      	ldr	r1, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f023 020c 	bic.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4917      	ldr	r1, [pc, #92]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f023 0202 	bic.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	4912      	ldr	r1, [pc, #72]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	4a0a      	ldr	r2, [pc, #40]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_RCC_OscConfig+0x76c>)
 800412c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fd ff1d 	bl	8001f70 <HAL_GetTick>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004138:	e011      	b.n	800415e <HAL_RCC_OscConfig+0x78e>
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
 8004140:	58024800 	.word	0x58024800
 8004144:	fffffc0c 	.word	0xfffffc0c
 8004148:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd ff10 	bl	8001f70 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e05f      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_RCC_OscConfig+0x858>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x77c>
 800416a:	e057      	b.n	800421c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_RCC_OscConfig+0x858>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <HAL_RCC_OscConfig+0x858>)
 8004172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd fefa 	bl	8001f70 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fef6 	bl	8001f70 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e045      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_OscConfig+0x858>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x7b0>
 800419e:	e03d      	b.n	800421c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_RCC_OscConfig+0x858>)
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_OscConfig+0x858>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d031      	beq.n	8004218 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d12a      	bne.n	8004218 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d122      	bne.n	8004218 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11a      	bne.n	8004218 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	0a5b      	lsrs	r3, r3, #9
 80041e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d111      	bne.n	8004218 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d108      	bne.n	8004218 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	0e1b      	lsrs	r3, r3, #24
 800420a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3730      	adds	r7, #48	; 0x30
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400

0800422c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e19c      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b8a      	ldr	r3, [pc, #552]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d910      	bls.n	8004270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b87      	ldr	r3, [pc, #540]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 020f 	bic.w	r2, r3, #15
 8004256:	4985      	ldr	r1, [pc, #532]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b83      	ldr	r3, [pc, #524]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e184      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	4b7b      	ldr	r3, [pc, #492]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004288:	429a      	cmp	r2, r3
 800428a:	d908      	bls.n	800429e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800428c:	4b78      	ldr	r3, [pc, #480]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4975      	ldr	r1, [pc, #468]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800429a:	4313      	orrs	r3, r2
 800429c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	4b70      	ldr	r3, [pc, #448]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d908      	bls.n	80042cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	496a      	ldr	r1, [pc, #424]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d908      	bls.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e8:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	495e      	ldr	r1, [pc, #376]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	4b59      	ldr	r3, [pc, #356]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d908      	bls.n	8004328 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4953      	ldr	r1, [pc, #332]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	429a      	cmp	r2, r3
 8004342:	d908      	bls.n	8004356 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f023 020f 	bic.w	r2, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4947      	ldr	r1, [pc, #284]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004352:	4313      	orrs	r3, r2
 8004354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d055      	beq.n	800440e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4940      	ldr	r1, [pc, #256]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004370:	4313      	orrs	r3, r2
 8004372:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d107      	bne.n	800438c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800437c:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0f6      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d115      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0ea      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0de      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d6      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f023 0207 	bic.w	r2, r3, #7
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4925      	ldr	r1, [pc, #148]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fd fdc7 	bl	8001f70 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e6:	f7fd fdc3 	bl	8001f70 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0be      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	429a      	cmp	r2, r3
 800440c:	d1eb      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	429a      	cmp	r2, r3
 8004428:	d208      	bcs.n	800443c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f023 020f 	bic.w	r2, r3, #15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	490e      	ldr	r1, [pc, #56]	; (8004470 <HAL_RCC_ClockConfig+0x244>)
 8004438:	4313      	orrs	r3, r2
 800443a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d214      	bcs.n	8004474 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 020f 	bic.w	r2, r3, #15
 8004452:	4906      	ldr	r1, [pc, #24]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <HAL_RCC_ClockConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e086      	b.n	800457a <HAL_RCC_ClockConfig+0x34e>
 800446c:	52002000 	.word	0x52002000
 8004470:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800448c:	429a      	cmp	r2, r3
 800448e:	d208      	bcs.n	80044a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004490:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	4939      	ldr	r1, [pc, #228]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d208      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	492e      	ldr	r1, [pc, #184]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d208      	bcs.n	80044fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4922      	ldr	r1, [pc, #136]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004516:	429a      	cmp	r2, r3
 8004518:	d208      	bcs.n	800452c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4917      	ldr	r1, [pc, #92]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004528:	4313      	orrs	r3, r2
 800452a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800452c:	f000 f834 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	4912      	ldr	r1, [pc, #72]	; (8004588 <HAL_RCC_ClockConfig+0x35c>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
 8004548:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_RCC_ClockConfig+0x358>)
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <HAL_RCC_ClockConfig+0x35c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x360>)
 8004562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004564:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x364>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x368>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd fcb4 	bl	8001edc <HAL_InitTick>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	0801109c 	.word	0x0801109c
 800458c:	24000004 	.word	0x24000004
 8004590:	24000000 	.word	0x24000000
 8004594:	24000008 	.word	0x24000008

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459e:	4bb3      	ldr	r3, [pc, #716]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	2b18      	cmp	r3, #24
 80045a8:	f200 8155 	bhi.w	8004856 <HAL_RCC_GetSysClockFreq+0x2be>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	08004619 	.word	0x08004619
 80045b8:	08004857 	.word	0x08004857
 80045bc:	08004857 	.word	0x08004857
 80045c0:	08004857 	.word	0x08004857
 80045c4:	08004857 	.word	0x08004857
 80045c8:	08004857 	.word	0x08004857
 80045cc:	08004857 	.word	0x08004857
 80045d0:	08004857 	.word	0x08004857
 80045d4:	0800463f 	.word	0x0800463f
 80045d8:	08004857 	.word	0x08004857
 80045dc:	08004857 	.word	0x08004857
 80045e0:	08004857 	.word	0x08004857
 80045e4:	08004857 	.word	0x08004857
 80045e8:	08004857 	.word	0x08004857
 80045ec:	08004857 	.word	0x08004857
 80045f0:	08004857 	.word	0x08004857
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004857 	.word	0x08004857
 80045fc:	08004857 	.word	0x08004857
 8004600:	08004857 	.word	0x08004857
 8004604:	08004857 	.word	0x08004857
 8004608:	08004857 	.word	0x08004857
 800460c:	08004857 	.word	0x08004857
 8004610:	08004857 	.word	0x08004857
 8004614:	0800464b 	.word	0x0800464b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004618:	4b94      	ldr	r3, [pc, #592]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004624:	4b91      	ldr	r3, [pc, #580]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	4a90      	ldr	r2, [pc, #576]	; (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004636:	e111      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004638:	4b8d      	ldr	r3, [pc, #564]	; (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800463a:	61bb      	str	r3, [r7, #24]
    break;
 800463c:	e10e      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800463e:	4b8d      	ldr	r3, [pc, #564]	; (8004874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004640:	61bb      	str	r3, [r7, #24]
    break;
 8004642:	e10b      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004644:	4b8c      	ldr	r3, [pc, #560]	; (8004878 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004646:	61bb      	str	r3, [r7, #24]
    break;
 8004648:	e108      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800464a:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004654:	4b85      	ldr	r3, [pc, #532]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004660:	4b82      	ldr	r3, [pc, #520]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800466a:	4b80      	ldr	r3, [pc, #512]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80e1 	beq.w	8004850 <HAL_RCC_GetSysClockFreq+0x2b8>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b02      	cmp	r3, #2
 8004692:	f000 8083 	beq.w	800479c <HAL_RCC_GetSysClockFreq+0x204>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f200 80a1 	bhi.w	80047e0 <HAL_RCC_GetSysClockFreq+0x248>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x114>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d056      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046aa:	e099      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046ac:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02d      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046b8:	4b6c      	ldr	r3, [pc, #432]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	4a6b      	ldr	r2, [pc, #428]	; (8004870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e2:	4b62      	ldr	r3, [pc, #392]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004712:	e087      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004880 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004726:	4b51      	ldr	r3, [pc, #324]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	ed97 6a02 	vldr	s12, [r7, #8]
 800473a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 800473e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004756:	e065      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004884 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477a:	ed97 6a02 	vldr	s12, [r7, #8]
 800477e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800479a:	e043      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004888 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047be:	ed97 6a02 	vldr	s12, [r7, #8]
 80047c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047de:	e021      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004884 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004802:	ed97 6a02 	vldr	s12, [r7, #8]
 8004806:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800487c <HAL_RCC_GetSysClockFreq+0x2e4>
 800480a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004822:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	0a5b      	lsrs	r3, r3, #9
 800482a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482e:	3301      	adds	r3, #1
 8004830:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800483c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 3a90 	vmov	r3, s15
 800484c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800484e:	e005      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    break;
 8004854:	e002      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004858:	61bb      	str	r3, [r7, #24]
    break;
 800485a:	bf00      	nop
  }

  return sysclockfreq;
 800485c:	69bb      	ldr	r3, [r7, #24]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
 8004870:	03d09000 	.word	0x03d09000
 8004874:	003d0900 	.word	0x003d0900
 8004878:	007a1200 	.word	0x007a1200
 800487c:	46000000 	.word	0x46000000
 8004880:	4c742400 	.word	0x4c742400
 8004884:	4a742400 	.word	0x4a742400
 8004888:	4af42400 	.word	0x4af42400

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004892:	f7ff fe81 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_GetHCLKFreq+0x50>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490f      	ldr	r1, [pc, #60]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <HAL_RCC_GetHCLKFreq+0x50>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80048c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048ca:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024400 	.word	0x58024400
 80048e0:	0801109c 	.word	0x0801109c
 80048e4:	24000004 	.word	0x24000004
 80048e8:	24000000 	.word	0x24000000

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80048f0:	f7ff ffcc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	58024400 	.word	0x58024400
 8004914:	0801109c 	.word	0x0801109c

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800491c:	f7ff ffb6 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	58024400 	.word	0x58024400
 8004940:	0801109c 	.word	0x0801109c

08004944 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800494c:	2300      	movs	r3, #0
 800494e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004950:	2300      	movs	r3, #0
 8004952:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d03f      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004964:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004968:	d02a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800496a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800496e:	d824      	bhi.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004974:	d018      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800497a:	d81e      	bhi.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004984:	d007      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004986:	e018      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004988:	4ba3      	ldr	r3, [pc, #652]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4aa2      	ldr	r2, [pc, #648]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800498e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004994:	e015      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	2102      	movs	r1, #2
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fff9 	bl	8006994 <RCCEx_PLL2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049a6:	e00c      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3324      	adds	r3, #36	; 0x24
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f002 f8a2 	bl	8006af8 <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
      break;
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049c8:	4b93      	ldr	r3, [pc, #588]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d4:	4990      	ldr	r1, [pc, #576]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	650b      	str	r3, [r1, #80]	; 0x50
 80049da:	e001      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d03d      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d826      	bhi.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a11 	.word	0x08004a11
 8004a00:	08004a1f 	.word	0x08004a1f
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a49 	.word	0x08004a49
 8004a0c:	08004a49 	.word	0x08004a49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a80      	ldr	r2, [pc, #512]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a1c:	e015      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 ffb5 	bl	8006994 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a2e:	e00c      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3324      	adds	r3, #36	; 0x24
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 f85e 	bl	8006af8 <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a40:	e003      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
      break;
 8004a46:	e000      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a50:	4b71      	ldr	r3, [pc, #452]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	f023 0207 	bic.w	r2, r3, #7
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	496e      	ldr	r1, [pc, #440]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	650b      	str	r3, [r1, #80]	; 0x50
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d042      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7c:	d02b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d825      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a84:	2bc0      	cmp	r3, #192	; 0xc0
 8004a86:	d028      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a88:	2bc0      	cmp	r3, #192	; 0xc0
 8004a8a:	d821      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d016      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d81d      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d007      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a9c:	e018      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9e:	4b5e      	ldr	r3, [pc, #376]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a5d      	ldr	r2, [pc, #372]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aaa:	e017      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 ff6e 	bl	8006994 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004abc:	e00e      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3324      	adds	r3, #36	; 0x24
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f002 f817 	bl	8006af8 <RCCEx_PLL3_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ace:	e005      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad4:	e002      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ae2:	4b4d      	ldr	r3, [pc, #308]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	494a      	ldr	r1, [pc, #296]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	650b      	str	r3, [r1, #80]	; 0x50
 8004af4:	e001      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d049      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b10:	d030      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004b12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b16:	d82a      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b1c:	d02c      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004b1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b22:	d824      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b28:	d018      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2e:	d81e      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b38:	d007      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b3a:	e018      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3c:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b48:	e017      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 ff1f 	bl	8006994 <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b5a:	e00e      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 ffc8 	bl	8006af8 <RCCEx_PLL3_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b6c:	e005      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b74:	bf00      	nop
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b80:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b8e:	4922      	ldr	r1, [pc, #136]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	658b      	str	r3, [r1, #88]	; 0x58
 8004b94:	e001      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04b      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bb0:	d030      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bb6:	d82a      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bbc:	d02e      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004bbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bc2:	d824      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bc8:	d018      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bce:	d81e      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd8:	d007      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004bda:	e018      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004be8:	e019      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 fecf 	bl	8006994 <RCCEx_PLL2_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004bfa:	e010      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3324      	adds	r3, #36	; 0x24
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 ff78 	bl	8006af8 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c0c:	e007      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
      break;
 8004c12:	e004      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004c14:	bf00      	nop
 8004c16:	e002      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004c18:	58024400 	.word	0x58024400
      break;
 8004c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c24:	4b99      	ldr	r3, [pc, #612]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c32:	4996      	ldr	r1, [pc, #600]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	658b      	str	r3, [r1, #88]	; 0x58
 8004c38:	e001      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d032      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	d01c      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004c52:	2b30      	cmp	r3, #48	; 0x30
 8004c54:	d817      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d00c      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d813      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d10f      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c66:	4b89      	ldr	r3, [pc, #548]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	4a88      	ldr	r2, [pc, #544]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c72:	e00e      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	2102      	movs	r1, #2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fe8a 	bl	8006994 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c98:	4b7c      	ldr	r3, [pc, #496]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca4:	4979      	ldr	r1, [pc, #484]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004caa:	e001      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d047      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc4:	d030      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cca:	d82a      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cd0:	d02c      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004cd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cd6:	d824      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cdc:	d018      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce2:	d81e      	bhi.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	d007      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004cee:	e018      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a65      	ldr	r2, [pc, #404]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cfc:	e017      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fe45 	bl	8006994 <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d0e:	e00e      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3324      	adds	r3, #36	; 0x24
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 feee 	bl	8006af8 <RCCEx_PLL3_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d20:	e005      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d34:	4b55      	ldr	r3, [pc, #340]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	4952      	ldr	r1, [pc, #328]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	650b      	str	r3, [r1, #80]	; 0x50
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d049      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d60:	d02e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d66:	d828      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d6c:	d02a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d72:	d822      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d78:	d026      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d7e:	d81c      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d84:	d010      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8a:	d816      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01d      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d111      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fdf9 	bl	8006994 <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004da6:	e012      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3324      	adds	r3, #36	; 0x24
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fea2 	bl	8006af8 <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004db8:	e009      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbe:	e006      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004dc0:	bf00      	nop
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004dc4:	bf00      	nop
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	492a      	ldr	r1, [pc, #168]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	650b      	str	r3, [r1, #80]	; 0x50
 8004de6:	e001      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d04d      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e02:	d02e      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e08:	d828      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0e:	d02a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d822      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e1a:	d026      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004e1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e20:	d81c      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e26:	d010      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2c:	d816      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01d      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e36:	d111      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fda8 	bl	8006994 <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e48:	e012      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fe51 	bl	8006af8 <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e5a:	e009      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e60:	e006      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e62:	bf00      	nop
 8004e64:	e004      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e84:	4901      	ldr	r1, [pc, #4]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	658b      	str	r3, [r1, #88]	; 0x58
 8004e8a:	e003      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02f      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eae:	d814      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eb8:	d10f      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eba:	4baf      	ldr	r3, [pc, #700]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	4aae      	ldr	r2, [pc, #696]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ec6:	e00c      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 fd60 	bl	8006994 <RCCEx_PLL2_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ed8:	e003      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ede:	e000      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee8:	4ba3      	ldr	r3, [pc, #652]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef4:	49a0      	ldr	r1, [pc, #640]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8004efa:	e001      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d032      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d81b      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f53 	.word	0x08004f53
 8004f20:	08004f2d 	.word	0x08004f2d
 8004f24:	08004f3b 	.word	0x08004f3b
 8004f28:	08004f53 	.word	0x08004f53
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2c:	4b92      	ldr	r3, [pc, #584]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4a91      	ldr	r2, [pc, #580]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fd27 	bl	8006994 <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f5a:	4b87      	ldr	r3, [pc, #540]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	4984      	ldr	r1, [pc, #528]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f6c:	e001      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8086 	beq.w	800508c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f80:	4b7e      	ldr	r3, [pc, #504]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a7d      	ldr	r2, [pc, #500]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f8c:	f7fc fff0 	bl	8001f70 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f92:	e009      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f94:	f7fc ffec 	bl	8001f70 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	; 0x64
 8004fa0:	d902      	bls.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	75fb      	strb	r3, [r7, #23]
        break;
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa8:	4b74      	ldr	r3, [pc, #464]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d166      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fba:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc4:	4053      	eors	r3, r2
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d013      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fce:	4b6a      	ldr	r3, [pc, #424]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fd8:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a66      	ldr	r2, [pc, #408]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe4:	4b64      	ldr	r3, [pc, #400]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a63      	ldr	r2, [pc, #396]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ff0:	4a61      	ldr	r2, [pc, #388]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005000:	d115      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7fc ffb5 	bl	8001f70 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005008:	e00b      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fc ffb1 	bl	8001f70 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d902      	bls.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	75fb      	strb	r3, [r7, #23]
            break;
 8005020:	e005      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005022:	4b55      	ldr	r3, [pc, #340]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ed      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d126      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005042:	d10d      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005044:	4b4c      	ldr	r3, [pc, #304]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005052:	0919      	lsrs	r1, r3, #4
 8005054:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005056:	400b      	ands	r3, r1
 8005058:	4947      	ldr	r1, [pc, #284]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
 800505e:	e005      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005060:	4b45      	ldr	r3, [pc, #276]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	4a44      	ldr	r2, [pc, #272]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005066:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800506a:	6113      	str	r3, [r2, #16]
 800506c:	4b42      	ldr	r3, [pc, #264]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800506e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507a:	493f      	ldr	r1, [pc, #252]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800507c:	4313      	orrs	r3, r2
 800507e:	670b      	str	r3, [r1, #112]	; 0x70
 8005080:	e004      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	75bb      	strb	r3, [r7, #22]
 8005086:	e001      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8085 	beq.w	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509e:	2b28      	cmp	r3, #40	; 0x28
 80050a0:	d866      	bhi.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	08005185 	.word	0x08005185
 80050ac:	08005171 	.word	0x08005171
 80050b0:	08005171 	.word	0x08005171
 80050b4:	08005171 	.word	0x08005171
 80050b8:	08005171 	.word	0x08005171
 80050bc:	08005171 	.word	0x08005171
 80050c0:	08005171 	.word	0x08005171
 80050c4:	08005171 	.word	0x08005171
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	08005171 	.word	0x08005171
 80050d0:	08005171 	.word	0x08005171
 80050d4:	08005171 	.word	0x08005171
 80050d8:	08005171 	.word	0x08005171
 80050dc:	08005171 	.word	0x08005171
 80050e0:	08005171 	.word	0x08005171
 80050e4:	08005171 	.word	0x08005171
 80050e8:	0800515f 	.word	0x0800515f
 80050ec:	08005171 	.word	0x08005171
 80050f0:	08005171 	.word	0x08005171
 80050f4:	08005171 	.word	0x08005171
 80050f8:	08005171 	.word	0x08005171
 80050fc:	08005171 	.word	0x08005171
 8005100:	08005171 	.word	0x08005171
 8005104:	08005171 	.word	0x08005171
 8005108:	08005185 	.word	0x08005185
 800510c:	08005171 	.word	0x08005171
 8005110:	08005171 	.word	0x08005171
 8005114:	08005171 	.word	0x08005171
 8005118:	08005171 	.word	0x08005171
 800511c:	08005171 	.word	0x08005171
 8005120:	08005171 	.word	0x08005171
 8005124:	08005171 	.word	0x08005171
 8005128:	08005185 	.word	0x08005185
 800512c:	08005171 	.word	0x08005171
 8005130:	08005171 	.word	0x08005171
 8005134:	08005171 	.word	0x08005171
 8005138:	08005171 	.word	0x08005171
 800513c:	08005171 	.word	0x08005171
 8005140:	08005171 	.word	0x08005171
 8005144:	08005171 	.word	0x08005171
 8005148:	08005185 	.word	0x08005185
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fc1e 	bl	8006994 <RCCEx_PLL2_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800515c:	e013      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f001 fcc7 	bl	8006af8 <RCCEx_PLL3_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800516e:	e00a      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
      break;
 8005174:	e007      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005176:	bf00      	nop
 8005178:	58024400 	.word	0x58024400
 800517c:	58024800 	.word	0x58024800
 8005180:	00ffffcf 	.word	0x00ffffcf
      break;
 8005184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800518c:	4b96      	ldr	r3, [pc, #600]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005198:	4993      	ldr	r1, [pc, #588]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	654b      	str	r3, [r1, #84]	; 0x54
 800519e:	e001      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d038      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d821      	bhi.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80051b8:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	08005203 	.word	0x08005203
 80051c4:	080051d9 	.word	0x080051d9
 80051c8:	080051eb 	.word	0x080051eb
 80051cc:	08005203 	.word	0x08005203
 80051d0:	08005203 	.word	0x08005203
 80051d4:	08005203 	.word	0x08005203
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 fbd8 	bl	8006994 <RCCEx_PLL2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3324      	adds	r3, #36	; 0x24
 80051ee:	2101      	movs	r1, #1
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 fc81 	bl	8006af8 <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051fa:	e003      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005200:	e000      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800520a:	4b77      	ldr	r3, [pc, #476]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f023 0207 	bic.w	r2, r3, #7
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	4974      	ldr	r1, [pc, #464]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005218:	4313      	orrs	r3, r2
 800521a:	654b      	str	r3, [r1, #84]	; 0x54
 800521c:	e001      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d03a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	2b05      	cmp	r3, #5
 8005236:	d821      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005283 	.word	0x08005283
 8005244:	08005259 	.word	0x08005259
 8005248:	0800526b 	.word	0x0800526b
 800524c:	08005283 	.word	0x08005283
 8005250:	08005283 	.word	0x08005283
 8005254:	08005283 	.word	0x08005283
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	2101      	movs	r1, #1
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fb98 	bl	8006994 <RCCEx_PLL2_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005268:	e00c      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	; 0x24
 800526e:	2101      	movs	r1, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fc41 	bl	8006af8 <RCCEx_PLL3_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800527a:	e003      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	75fb      	strb	r3, [r7, #23]
      break;
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800528a:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f023 0207 	bic.w	r2, r3, #7
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005298:	4953      	ldr	r1, [pc, #332]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	658b      	str	r3, [r1, #88]	; 0x58
 800529e:	e001      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d04b      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052ba:	d02e      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80052bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c0:	d828      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d02a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d822      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052d2:	d026      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80052d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052d8:	d81c      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052de:	d010      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80052e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e4:	d816      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01d      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80052ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ee:	d111      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fb4c 	bl	8006994 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005300:	e012      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3324      	adds	r3, #36	; 0x24
 8005306:	2102      	movs	r1, #2
 8005308:	4618      	mov	r0, r3
 800530a:	f001 fbf5 	bl	8006af8 <RCCEx_PLL3_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005312:	e009      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
      break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800531a:	bf00      	nop
 800531c:	e004      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800532e:	4b2e      	ldr	r3, [pc, #184]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800533c:	492a      	ldr	r1, [pc, #168]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800533e:	4313      	orrs	r3, r2
 8005340:	654b      	str	r3, [r1, #84]	; 0x54
 8005342:	e001      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d04d      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800535a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800535e:	d02e      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005360:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005364:	d828      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d02a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d822      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005372:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005376:	d026      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537c:	d81c      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800537e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005382:	d010      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005388:	d816      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01d      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800538e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005392:	d111      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f001 fafa 	bl	8006994 <RCCEx_PLL2_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053a4:	e012      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3324      	adds	r3, #36	; 0x24
 80053aa:	2102      	movs	r1, #2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fba3 	bl	8006af8 <RCCEx_PLL3_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053b6:	e009      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	75fb      	strb	r3, [r7, #23]
      break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053be:	bf00      	nop
 80053c0:	e004      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10c      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e0:	4901      	ldr	r1, [pc, #4]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	658b      	str	r3, [r1, #88]	; 0x58
 80053e6:	e003      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80053e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d04b      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005402:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005406:	d02e      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005408:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800540c:	d828      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800540e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005412:	d02a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005418:	d822      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800541a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800541e:	d026      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005420:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005424:	d81c      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800542a:	d010      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800542c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005430:	d816      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01d      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543a:	d111      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f001 faa6 	bl	8006994 <RCCEx_PLL2_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800544c:	e012      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3324      	adds	r3, #36	; 0x24
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fb4f 	bl	8006af8 <RCCEx_PLL3_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800545e:	e009      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005466:	bf00      	nop
 8005468:	e004      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800547a:	4b9d      	ldr	r3, [pc, #628]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005488:	4999      	ldr	r1, [pc, #612]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800548a:	4313      	orrs	r3, r2
 800548c:	658b      	str	r3, [r1, #88]	; 0x58
 800548e:	e001      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d10a      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	2102      	movs	r1, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 fb20 	bl	8006af8 <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054c2:	4b8b      	ldr	r3, [pc, #556]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d0:	4987      	ldr	r1, [pc, #540]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	d10a      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3324      	adds	r3, #36	; 0x24
 80054f2:	2102      	movs	r1, #2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 faff 	bl	8006af8 <RCCEx_PLL3_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005504:	4b7a      	ldr	r3, [pc, #488]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005512:	4977      	ldr	r1, [pc, #476]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005514:	4313      	orrs	r3, r2
 8005516:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d034      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800552a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800552e:	d01d      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005534:	d817      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800553a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553e:	d009      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005540:	e011      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fa23 	bl	8006994 <RCCEx_PLL2_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005552:	e00c      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3324      	adds	r3, #36	; 0x24
 8005558:	2102      	movs	r1, #2
 800555a:	4618      	mov	r0, r3
 800555c:	f001 facc 	bl	8006af8 <RCCEx_PLL3_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005564:	e003      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	75fb      	strb	r3, [r7, #23]
      break;
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800556c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005574:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005582:	495b      	ldr	r1, [pc, #364]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005584:	4313      	orrs	r3, r2
 8005586:	658b      	str	r3, [r1, #88]	; 0x58
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d033      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055a4:	d01c      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80055a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055aa:	d816      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80055ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b0:	d003      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80055b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b6:	d007      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80055b8:	e00f      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ba:	4b4d      	ldr	r3, [pc, #308]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	4a4c      	ldr	r2, [pc, #304]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055c6:	e00c      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	2101      	movs	r1, #1
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fa92 	bl	8006af8 <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055d8:	e003      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
      break;
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80055e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055e8:	4b41      	ldr	r3, [pc, #260]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f6:	493e      	ldr	r1, [pc, #248]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	654b      	str	r3, [r1, #84]	; 0x54
 80055fc:	e001      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d029      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561a:	d007      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800561c:	e00f      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800561e:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800562a:	e00b      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2102      	movs	r1, #2
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f9ae 	bl	8006994 <RCCEx_PLL2_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
      break;
 8005642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800564a:	4b29      	ldr	r3, [pc, #164]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4926      	ldr	r1, [pc, #152]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005658:	4313      	orrs	r3, r2
 800565a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800565c:	e001      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3324      	adds	r3, #36	; 0x24
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fa3f 	bl	8006af8 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d033      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005698:	d017      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800569a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569e:	d811      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d013      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80056a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056aa:	d80b      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d010      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80056b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b4:	d106      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80056c2:	e007      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
      break;
 80056c8:	e004      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80056d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10c      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056e6:	4902      	ldr	r1, [pc, #8]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	654b      	str	r3, [r1, #84]	; 0x54
 80056ec:	e004      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80056ee:	bf00      	nop
 80056f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005704:	4b31      	ldr	r3, [pc, #196]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	492e      	ldr	r1, [pc, #184]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005712:	4313      	orrs	r3, r2
 8005714:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d009      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005722:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005730:	4926      	ldr	r1, [pc, #152]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005732:	4313      	orrs	r3, r2
 8005734:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005742:	4b22      	ldr	r3, [pc, #136]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574e:	491f      	ldr	r1, [pc, #124]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005750:	4313      	orrs	r3, r2
 8005752:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005760:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	4a19      	ldr	r2, [pc, #100]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800576a:	6113      	str	r3, [r2, #16]
 800576c:	4b17      	ldr	r3, [pc, #92]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005776:	4915      	ldr	r1, [pc, #84]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005778:	4313      	orrs	r3, r2
 800577a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da08      	bge.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	490e      	ldr	r1, [pc, #56]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005792:	4313      	orrs	r3, r2
 8005794:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	4906      	ldr	r1, [pc, #24]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80057b6:	7dbb      	ldrb	r3, [r7, #22]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	58024400 	.word	0x58024400

080057d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b090      	sub	sp, #64	; 0x40
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	f040 8095 	bne.w	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80057e2:	4b97      	ldr	r3, [pc, #604]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	f200 8088 	bhi.w	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80057f4:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	08005811 	.word	0x08005811
 8005800:	08005839 	.word	0x08005839
 8005804:	08005861 	.word	0x08005861
 8005808:	080058fd 	.word	0x080058fd
 800580c:	08005889 	.word	0x08005889
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005810:	4b8b      	ldr	r3, [pc, #556]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800581c:	d108      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800581e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005822:	4618      	mov	r0, r3
 8005824:	f000 ff64 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800582c:	f000 bc94 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005834:	f000 bc90 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005838:	4b81      	ldr	r3, [pc, #516]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005844:	d108      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005846:	f107 0318 	add.w	r3, r7, #24
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fca8 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005854:	f000 bc80 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800585c:	f000 bc7c 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005860:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800586c:	d108      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fde8 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800587c:	f000 bc6c 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005884:	f000 bc68 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005888:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800588a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005890:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005892:	4b6b      	ldr	r3, [pc, #428]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d10c      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058a4:	4b66      	ldr	r3, [pc, #408]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	08db      	lsrs	r3, r3, #3
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	4a65      	ldr	r2, [pc, #404]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	e01f      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058b8:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c4:	d106      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058cc:	d102      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058ce:	4b5e      	ldr	r3, [pc, #376]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	e011      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058d4:	4b5a      	ldr	r3, [pc, #360]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e0:	d106      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e8:	d102      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058ea:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ee:	e003      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058f4:	f000 bc30 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80058f8:	f000 bc2e 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058fc:	4b54      	ldr	r3, [pc, #336]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005900:	f000 bc2a 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005908:	f000 bc26 	b.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005912:	f040 809f 	bne.w	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800591e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d04d      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592e:	f200 8084 	bhi.w	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	2bc0      	cmp	r3, #192	; 0xc0
 8005936:	d07d      	beq.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2bc0      	cmp	r3, #192	; 0xc0
 800593c:	d87d      	bhi.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b80      	cmp	r3, #128	; 0x80
 8005942:	d02d      	beq.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d877      	bhi.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d012      	beq.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005956:	e070      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005958:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005964:	d107      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fec0 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005974:	e3f0      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597a:	e3ed      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800597c:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005988:	d107      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fc06 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005998:	e3de      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599e:	e3db      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ac:	d107      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fd48 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059bc:	e3cc      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059c2:	e3c9      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ce:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	08db      	lsrs	r3, r3, #3
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f2:	e01e      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059f4:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a00:	d106      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a08:	d102      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0e:	e010      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a24:	d102      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2a:	e002      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a30:	e392      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a32:	e391      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a38:	e38e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a3e:	e38b      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a40:	58024400 	.word	0x58024400
 8005a44:	03d09000 	.word	0x03d09000
 8005a48:	003d0900 	.word	0x003d0900
 8005a4c:	007a1200 	.word	0x007a1200
 8005a50:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5a:	f040 809c 	bne.w	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005a5e:	4b9d      	ldr	r3, [pc, #628]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a6e:	d054      	beq.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a76:	f200 808b 	bhi.w	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a80:	f000 8083 	beq.w	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a8a:	f200 8081 	bhi.w	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a94:	d02f      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9c:	d878      	bhi.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aaa:	d012      	beq.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005aac:	e070      	b.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aae:	4b89      	ldr	r3, [pc, #548]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aba:	d107      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fe15 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005aca:	e345      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad0:	e342      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ad2:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ade:	d107      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ae0:	f107 0318 	add.w	r3, r7, #24
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fb5b 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005aee:	e333      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af4:	e330      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005af6:	4b77      	ldr	r3, [pc, #476]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b02:	d107      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fc9d 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b12:	e321      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b18:	e31e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b1a:	4b6e      	ldr	r3, [pc, #440]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b24:	4b6b      	ldr	r3, [pc, #428]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d10c      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b36:	4b67      	ldr	r3, [pc, #412]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	08db      	lsrs	r3, r3, #3
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	4a65      	ldr	r2, [pc, #404]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005b42:	fa22 f303 	lsr.w	r3, r2, r3
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b48:	e01e      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b4a:	4b62      	ldr	r3, [pc, #392]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b56:	d106      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b5e:	d102      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b60:	4b5e      	ldr	r3, [pc, #376]	; (8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b64:	e010      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b66:	4b5b      	ldr	r3, [pc, #364]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b72:	d106      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7a:	d102      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b7c:	4b58      	ldr	r3, [pc, #352]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b80:	e002      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b86:	e2e7      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005b88:	e2e6      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b8a:	4b56      	ldr	r3, [pc, #344]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8e:	e2e3      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b94:	e2e0      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9c:	f040 80a7 	bne.w	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005ba0:	4b4c      	ldr	r3, [pc, #304]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005ba8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bb0:	d055      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bb8:	f200 8096 	bhi.w	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bc2:	f000 8084 	beq.w	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bcc:	f200 808c 	bhi.w	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd6:	d030      	beq.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bde:	f200 8083 	bhi.w	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bee:	d012      	beq.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005bf0:	e07a      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bf2:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fd73 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c0e:	e2a3      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c14:	e2a0      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c16:	4b2f      	ldr	r3, [pc, #188]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c22:	d107      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c24:	f107 0318 	add.w	r3, r7, #24
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fab9 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005c32:	e291      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c38:	e28e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c46:	d107      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fbfb 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c56:	e27f      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c5c:	e27c      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c68:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d10c      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c7a:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	08db      	lsrs	r3, r3, #3
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	e01e      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9a:	d106      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca2:	d102      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	e010      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cbe:	d102      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005cca:	e245      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005ccc:	e244      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cd2:	e241      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	03d09000 	.word	0x03d09000
 8005cdc:	003d0900 	.word	0x003d0900
 8005ce0:	007a1200 	.word	0x007a1200
 8005ce4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cec:	e234      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	f040 809c 	bne.w	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005cf8:	4b9b      	ldr	r3, [pc, #620]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d08:	d054      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d10:	f200 808b 	bhi.w	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d1a:	f000 8083 	beq.w	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d24:	f200 8081 	bhi.w	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2e:	d02f      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d36:	d878      	bhi.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d44:	d012      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005d46:	e070      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d48:	4b87      	ldr	r3, [pc, #540]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d54:	d107      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fcc8 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d64:	e1f8      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d6a:	e1f5      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d6c:	4b7e      	ldr	r3, [pc, #504]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d78:	d107      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d7a:	f107 0318 	add.w	r3, r7, #24
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fa0e 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d88:	e1e6      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d8e:	e1e3      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d90:	4b75      	ldr	r3, [pc, #468]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d9c:	d107      	bne.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d9e:	f107 030c 	add.w	r3, r7, #12
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fb50 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dac:	e1d4      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005db2:	e1d1      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005db4:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dbe:	4b6a      	ldr	r3, [pc, #424]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dd0:	4b65      	ldr	r3, [pc, #404]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	4a64      	ldr	r2, [pc, #400]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de2:	e01e      	b.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005de4:	4b60      	ldr	r3, [pc, #384]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df0:	d106      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df8:	d102      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005dfa:	4b5d      	ldr	r3, [pc, #372]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfe:	e010      	b.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e00:	4b59      	ldr	r3, [pc, #356]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e0c:	d106      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e14:	d102      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e16:	4b57      	ldr	r3, [pc, #348]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e20:	e19a      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e22:	e199      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e24:	4b54      	ldr	r3, [pc, #336]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e28:	e196      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e2e:	e193      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e36:	d173      	bne.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005e38:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e48:	d02f      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e50:	d863      	bhi.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5e:	d012      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005e60:	e05b      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e62:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e6e:	d107      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e70:	f107 0318 	add.w	r3, r7, #24
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f993 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e7e:	e16b      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e84:	e168      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e86:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e94:	f107 030c 	add.w	r3, r7, #12
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fad5 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ea2:	e159      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea8:	e156      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005eb4:	4b2c      	ldr	r3, [pc, #176]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d10c      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	08db      	lsrs	r3, r3, #3
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed8:	e01e      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eee:	d102      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ef0:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef4:	e010      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ef6:	4b1c      	ldr	r3, [pc, #112]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f02:	d106      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0a:	d102      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f0c:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005f16:	e11f      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f18:	e11e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f1e:	e11b      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	d13e      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f40:	e02e      	b.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f4e:	d107      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fbcb 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f5e:	e0fb      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f64:	e0f8      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	03d09000 	.word	0x03d09000
 8005f70:	003d0900 	.word	0x003d0900
 8005f74:	007a1200 	.word	0x007a1200
 8005f78:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f7c:	4b79      	ldr	r3, [pc, #484]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f88:	d107      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f8a:	f107 0318 	add.w	r3, r7, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f906 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f98:	e0de      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f9e:	e0db      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa4:	e0d8      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fac:	f040 8085 	bne.w	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005fb0:	4b6c      	ldr	r3, [pc, #432]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005fb8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc0:	d06b      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc8:	d874      	bhi.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d056      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd8:	d86c      	bhi.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fe0:	d03b      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fe8:	d864      	bhi.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff0:	d021      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff8:	d85c      	bhi.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006006:	d004      	beq.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006008:	e054      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800600a:	f000 f8b3 	bl	8006174 <HAL_RCCEx_GetD3PCLK1Freq>
 800600e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006010:	e0a2      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006012:	4b54      	ldr	r3, [pc, #336]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800601a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800601e:	d107      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006020:	f107 0318 	add.w	r3, r7, #24
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f8bb 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800602e:	e093      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006034:	e090      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006036:	4b4b      	ldr	r3, [pc, #300]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006042:	d107      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006044:	f107 030c 	add.w	r3, r7, #12
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f9fd 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006052:	e081      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006058:	e07e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b04      	cmp	r3, #4
 8006064:	d109      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006066:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	08db      	lsrs	r3, r3, #3
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	4a3d      	ldr	r2, [pc, #244]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006072:	fa22 f303 	lsr.w	r3, r2, r3
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006078:	e06e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800607e:	e06b      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006080:	4b38      	ldr	r3, [pc, #224]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608c:	d102      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800608e:	4b37      	ldr	r3, [pc, #220]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006092:	e061      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006098:	e05e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800609a:	4b32      	ldr	r3, [pc, #200]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060a6:	d102      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80060a8:	4b31      	ldr	r3, [pc, #196]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060ac:	e054      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060b2:	e051      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060b8:	e04e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c0:	d148      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80060c2:	4b28      	ldr	r3, [pc, #160]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d2:	d02a      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060da:	d838      	bhi.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e8:	d00d      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80060ea:	e030      	b.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f8:	d102      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060fe:	e02b      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006104:	e028      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006106:	4b17      	ldr	r3, [pc, #92]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006112:	d107      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fae9 	bl	80066f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006122:	e019      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006128:	e016      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006136:	d107      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006138:	f107 0318 	add.w	r3, r7, #24
 800613c:	4618      	mov	r0, r3
 800613e:	f000 f82f 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006146:	e007      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800614c:	e004      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006152:	e001      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800615a:	4618      	mov	r0, r3
 800615c:	3740      	adds	r7, #64	; 0x40
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	58024400 	.word	0x58024400
 8006168:	03d09000 	.word	0x03d09000
 800616c:	003d0900 	.word	0x003d0900
 8006170:	007a1200 	.word	0x007a1200

08006174 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006178:	f7fe fb88 	bl	800488c <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4904      	ldr	r1, [pc, #16]	; (800619c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}
 8006198:	58024400 	.word	0x58024400
 800619c:	0801109c 	.word	0x0801109c

080061a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b089      	sub	sp, #36	; 0x24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061a8:	4ba1      	ldr	r3, [pc, #644]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80061b2:	4b9f      	ldr	r3, [pc, #636]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	0b1b      	lsrs	r3, r3, #12
 80061b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061be:	4b9c      	ldr	r3, [pc, #624]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80061ca:	4b99      	ldr	r3, [pc, #612]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	08db      	lsrs	r3, r3, #3
 80061d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8111 	beq.w	8006410 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	f000 8083 	beq.w	80062fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	f200 80a1 	bhi.w	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d056      	beq.n	80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800620a:	e099      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800620c:	4b88      	ldr	r3, [pc, #544]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d02d      	beq.n	8006274 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006218:	4b85      	ldr	r3, [pc, #532]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	08db      	lsrs	r3, r3, #3
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	4a84      	ldr	r2, [pc, #528]	; (8006434 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
 8006228:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	4b7b      	ldr	r3, [pc, #492]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006252:	ed97 6a03 	vldr	s12, [r7, #12]
 8006256:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800625a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006272:	e087      	b.n	8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800643c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006286:	4b6a      	ldr	r3, [pc, #424]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006296:	ed97 6a03 	vldr	s12, [r7, #12]
 800629a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800629e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062b6:	e065      	b.n	8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ca:	4b59      	ldr	r3, [pc, #356]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062da:	ed97 6a03 	vldr	s12, [r7, #12]
 80062de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062fa:	e043      	b.n	8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630e:	4b48      	ldr	r3, [pc, #288]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006322:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800633e:	e021      	b.n	8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b37      	ldr	r3, [pc, #220]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a03 	vldr	s12, [r7, #12]
 8006366:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006382:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006384:	4b2a      	ldr	r3, [pc, #168]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	0a5b      	lsrs	r3, r3, #9
 800638a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800639a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800639e:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063aa:	ee17 2a90 	vmov	r2, s15
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80063b2:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d8:	ee17 2a90 	vmov	r2, s15
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	0e1b      	lsrs	r3, r3, #24
 80063e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80063fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006406:	ee17 2a90 	vmov	r2, s15
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800640e:	e008      	b.n	8006422 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
}
 8006422:	bf00      	nop
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	58024400 	.word	0x58024400
 8006434:	03d09000 	.word	0x03d09000
 8006438:	46000000 	.word	0x46000000
 800643c:	4c742400 	.word	0x4c742400
 8006440:	4a742400 	.word	0x4a742400
 8006444:	4af42400 	.word	0x4af42400

08006448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006448:	b480      	push	{r7}
 800644a:	b089      	sub	sp, #36	; 0x24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006450:	4ba1      	ldr	r3, [pc, #644]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800645a:	4b9f      	ldr	r3, [pc, #636]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	0d1b      	lsrs	r3, r3, #20
 8006460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006464:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006466:	4b9c      	ldr	r3, [pc, #624]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006472:	4b99      	ldr	r3, [pc, #612]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8111 	beq.w	80066b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b02      	cmp	r3, #2
 800649a:	f000 8083 	beq.w	80065a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	f200 80a1 	bhi.w	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d056      	beq.n	8006560 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80064b2:	e099      	b.n	80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064b4:	4b88      	ldr	r3, [pc, #544]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d02d      	beq.n	800651c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064c0:	4b85      	ldr	r3, [pc, #532]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	4a84      	ldr	r2, [pc, #528]	; (80066dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	ee07 3a90 	vmov	s15, r3
 80064d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ea:	4b7b      	ldr	r3, [pc, #492]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f2:	ee07 3a90 	vmov	s15, r3
 80064f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80064fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800650e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800651a:	e087      	b.n	800662c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80066e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800652a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800652e:	4b6a      	ldr	r3, [pc, #424]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006542:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800655e:	e065      	b.n	800662c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80066e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b59      	ldr	r3, [pc, #356]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	ed97 6a03 	vldr	s12, [r7, #12]
 8006586:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065a2:	e043      	b.n	800662c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80066ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80065b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b6:	4b48      	ldr	r3, [pc, #288]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e6:	e021      	b.n	800662c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80066e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fa:	4b37      	ldr	r3, [pc, #220]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660a:	ed97 6a03 	vldr	s12, [r7, #12]
 800660e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800662a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800662c:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	0a5b      	lsrs	r3, r3, #9
 8006632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006646:	edd7 6a07 	vldr	s13, [r7, #28]
 800664a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800664e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006652:	ee17 2a90 	vmov	r2, s15
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800665a:	4b1f      	ldr	r3, [pc, #124]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006664:	ee07 3a90 	vmov	s15, r3
 8006668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006674:	edd7 6a07 	vldr	s13, [r7, #28]
 8006678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800667c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006680:	ee17 2a90 	vmov	r2, s15
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	0e1b      	lsrs	r3, r3, #24
 800668e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800669e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ae:	ee17 2a90 	vmov	r2, s15
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066b6:	e008      	b.n	80066ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	609a      	str	r2, [r3, #8]
}
 80066ca:	bf00      	nop
 80066cc:	3724      	adds	r7, #36	; 0x24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
 80066dc:	03d09000 	.word	0x03d09000
 80066e0:	46000000 	.word	0x46000000
 80066e4:	4c742400 	.word	0x4c742400
 80066e8:	4a742400 	.word	0x4a742400
 80066ec:	4af42400 	.word	0x4af42400

080066f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066f8:	4ba0      	ldr	r3, [pc, #640]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006702:	4b9e      	ldr	r3, [pc, #632]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800670c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800670e:	4b9b      	ldr	r3, [pc, #620]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006718:	4b98      	ldr	r3, [pc, #608]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	08db      	lsrs	r3, r3, #3
 800671e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006730:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 8111 	beq.w	800695e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b02      	cmp	r3, #2
 8006740:	f000 8083 	beq.w	800684a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b02      	cmp	r3, #2
 8006748:	f200 80a1 	bhi.w	800688e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d056      	beq.n	8006806 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006758:	e099      	b.n	800688e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800675a:	4b88      	ldr	r3, [pc, #544]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02d      	beq.n	80067c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006766:	4b85      	ldr	r3, [pc, #532]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	4a83      	ldr	r2, [pc, #524]	; (8006980 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006790:	4b7a      	ldr	r3, [pc, #488]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006798:	ee07 3a90 	vmov	s15, r3
 800679c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067c0:	e087      	b.n	80068d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d4:	4b69      	ldr	r3, [pc, #420]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006800:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006804:	e065      	b.n	80068d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006810:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800698c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006818:	4b58      	ldr	r3, [pc, #352]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	ee07 3a90 	vmov	s15, r3
 8006824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006828:	ed97 6a03 	vldr	s12, [r7, #12]
 800682c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006844:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006848:	e043      	b.n	80068d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006854:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006990 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685c:	4b47      	ldr	r3, [pc, #284]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006864:	ee07 3a90 	vmov	s15, r3
 8006868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006870:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800688c:	e021      	b.n	80068d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	ee07 3a90 	vmov	s15, r3
 8006894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006898:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800689c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a0:	4b36      	ldr	r3, [pc, #216]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80068d2:	4b2a      	ldr	r3, [pc, #168]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	0a5b      	lsrs	r3, r3, #9
 80068d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80068f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068f8:	ee17 2a90 	vmov	r2, s15
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006900:	4b1e      	ldr	r3, [pc, #120]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800691a:	edd7 6a07 	vldr	s13, [r7, #28]
 800691e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006926:	ee17 2a90 	vmov	r2, s15
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	0e1b      	lsrs	r3, r3, #24
 8006934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006948:	edd7 6a07 	vldr	s13, [r7, #28]
 800694c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006954:	ee17 2a90 	vmov	r2, s15
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800695c:	e008      	b.n	8006970 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	609a      	str	r2, [r3, #8]
}
 8006970:	bf00      	nop
 8006972:	3724      	adds	r7, #36	; 0x24
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	58024400 	.word	0x58024400
 8006980:	03d09000 	.word	0x03d09000
 8006984:	46000000 	.word	0x46000000
 8006988:	4c742400 	.word	0x4c742400
 800698c:	4a742400 	.word	0x4a742400
 8006990:	4af42400 	.word	0x4af42400

08006994 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069a2:	4b53      	ldr	r3, [pc, #332]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d101      	bne.n	80069b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e099      	b.n	8006ae6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069b2:	4b4f      	ldr	r3, [pc, #316]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a4e      	ldr	r2, [pc, #312]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 80069b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069be:	f7fb fad7 	bl	8001f70 <HAL_GetTick>
 80069c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069c4:	e008      	b.n	80069d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069c6:	f7fb fad3 	bl	8001f70 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e086      	b.n	8006ae6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069d8:	4b45      	ldr	r3, [pc, #276]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069e4:	4b42      	ldr	r3, [pc, #264]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	493f      	ldr	r1, [pc, #252]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	628b      	str	r3, [r1, #40]	; 0x28
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	025b      	lsls	r3, r3, #9
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	041b      	lsls	r3, r3, #16
 8006a16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	061b      	lsls	r3, r3, #24
 8006a24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a28:	4931      	ldr	r1, [pc, #196]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a2e:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	492d      	ldr	r1, [pc, #180]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a40:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f023 0220 	bic.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	4928      	ldr	r1, [pc, #160]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a52:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	4a26      	ldr	r2, [pc, #152]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a58:	f023 0310 	bic.w	r3, r3, #16
 8006a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a5e:	4b24      	ldr	r3, [pc, #144]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a62:	4b24      	ldr	r3, [pc, #144]	; (8006af4 <RCCEx_PLL2_Config+0x160>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	69d2      	ldr	r2, [r2, #28]
 8006a6a:	00d2      	lsls	r2, r2, #3
 8006a6c:	4920      	ldr	r1, [pc, #128]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a72:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a78:	f043 0310 	orr.w	r3, r3, #16
 8006a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a84:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	4a19      	ldr	r2, [pc, #100]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a90:	e00f      	b.n	8006ab2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d106      	bne.n	8006aa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006aa4:	e005      	b.n	8006ab2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	4a11      	ldr	r2, [pc, #68]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006ab8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006abe:	f7fb fa57 	bl	8001f70 <HAL_GetTick>
 8006ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ac4:	e008      	b.n	8006ad8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ac6:	f7fb fa53 	bl	8001f70 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e006      	b.n	8006ae6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <RCCEx_PLL2_Config+0x15c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	58024400 	.word	0x58024400
 8006af4:	ffff0007 	.word	0xffff0007

08006af8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b06:	4b53      	ldr	r3, [pc, #332]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d101      	bne.n	8006b16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e099      	b.n	8006c4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b16:	4b4f      	ldr	r3, [pc, #316]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a4e      	ldr	r2, [pc, #312]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b22:	f7fb fa25 	bl	8001f70 <HAL_GetTick>
 8006b26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b28:	e008      	b.n	8006b3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b2a:	f7fb fa21 	bl	8001f70 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e086      	b.n	8006c4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b3c:	4b45      	ldr	r3, [pc, #276]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1f0      	bne.n	8006b2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b48:	4b42      	ldr	r3, [pc, #264]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	051b      	lsls	r3, r3, #20
 8006b56:	493f      	ldr	r1, [pc, #252]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	025b      	lsls	r3, r3, #9
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b8c:	4931      	ldr	r1, [pc, #196]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b92:	4b30      	ldr	r3, [pc, #192]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	492d      	ldr	r1, [pc, #180]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ba4:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	4928      	ldr	r1, [pc, #160]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	4a26      	ldr	r2, [pc, #152]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bc2:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <RCCEx_PLL3_Config+0x160>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	69d2      	ldr	r2, [r2, #28]
 8006bce:	00d2      	lsls	r2, r2, #3
 8006bd0:	4920      	ldr	r1, [pc, #128]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bd6:	4b1f      	ldr	r3, [pc, #124]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d106      	bne.n	8006bf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006bf4:	e00f      	b.n	8006c16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d106      	bne.n	8006c0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006bfc:	4b15      	ldr	r3, [pc, #84]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c08:	e005      	b.n	8006c16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c0a:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	4a11      	ldr	r2, [pc, #68]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a0e      	ldr	r2, [pc, #56]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c22:	f7fb f9a5 	bl	8001f70 <HAL_GetTick>
 8006c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c28:	e008      	b.n	8006c3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c2a:	f7fb f9a1 	bl	8001f70 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e006      	b.n	8006c4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <RCCEx_PLL3_Config+0x15c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	58024400 	.word	0x58024400
 8006c58:	ffff0007 	.word	0xffff0007

08006c5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e075      	b.n	8006d5a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fa fe1d 	bl	80018c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f868 	bl	8006d64 <HAL_SD_InitCard>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e05d      	b.n	8006d5a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006c9e:	f107 0308 	add.w	r3, r7, #8
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fda9 	bl	80077fc <HAL_SD_GetCardStatus>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e052      	b.n	8006d5a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006cb4:	7e3b      	ldrb	r3, [r7, #24]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006cba:	7e7b      	ldrb	r3, [r7, #25]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d10a      	bne.n	8006cde <HAL_SD_Init+0x82>
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <HAL_SD_Init+0x78>
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cda:	659a      	str	r2, [r3, #88]	; 0x58
 8006cdc:	e00b      	b.n	8006cf6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d104      	bne.n	8006cf0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cec:	659a      	str	r2, [r3, #88]	; 0x58
 8006cee:	e002      	b.n	8006cf6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fe67 	bl	80079d0 <HAL_SD_ConfigWideBusOperation>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e026      	b.n	8006d5a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006d0c:	f7fb f930 	bl	8001f70 <HAL_GetTick>
 8006d10:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d12:	e011      	b.n	8006d38 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d14:	f7fb f92c 	bl	8001f70 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d109      	bne.n	8006d38 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d2a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e010      	b.n	8006d5a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ff5b 	bl	8007bf4 <HAL_SD_GetCardState>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d1e7      	bne.n	8006d14 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b08d      	sub	sp, #52	; 0x34
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006d80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006d84:	f7fe fd24 	bl	80057d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d88:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d9e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e06a      	b.n	8006e7a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	4a36      	ldr	r2, [pc, #216]	; (8006e84 <HAL_SD_InitCard+0x120>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681c      	ldr	r4, [r3, #0]
 8006db6:	466a      	mov	r2, sp
 8006db8:	f107 0318 	add.w	r3, r7, #24
 8006dbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006dc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f002 fc14 	bl	80095f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fc57 	bl	8009688 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006de6:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <HAL_SD_InitCard+0x124>)
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	3301      	adds	r3, #1
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fb f8c9 	bl	8001f88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 ffea 	bl	8007dd0 <SD_PowerON>
 8006dfc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e02e      	b.n	8006e7a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 ff09 	bl	8007c34 <SD_InitCard>
 8006e22:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e01b      	b.n	8006e7a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f002 fcb2 	bl	80097b4 <SDMMC_CmdBlockLength>
 8006e50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00f      	beq.n	8006e78 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0b      	ldr	r2, [pc, #44]	; (8006e8c <HAL_SD_InitCard+0x128>)
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	372c      	adds	r7, #44	; 0x2c
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd90      	pop	{r4, r7, pc}
 8006e82:	bf00      	nop
 8006e84:	014f8b59 	.word	0x014f8b59
 8006e88:	00012110 	.word	0x00012110
 8006e8c:	1fe00fff 	.word	0x1fe00fff

08006e90 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08c      	sub	sp, #48	; 0x30
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d107      	bne.n	8006eb8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e08d      	b.n	8006fd4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	f040 8086 	bne.w	8006fd2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d907      	bls.n	8006eea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ede:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e074      	b.n	8006fd4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2203      	movs	r2, #3
 8006eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	025a      	lsls	r2, r3, #9
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d002      	beq.n	8006f16 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	025b      	lsls	r3, r3, #9
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	025b      	lsls	r3, r3, #9
 8006f20:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f22:	2390      	movs	r3, #144	; 0x90
 8006f24:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f26:	2302      	movs	r3, #2
 8006f28:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f107 0210 	add.w	r2, r7, #16
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 fc0d 	bl	800975c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f50:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d90a      	bls.n	8006f7e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2282      	movs	r2, #130	; 0x82
 8006f6c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fc63 	bl	8009840 <SDMMC_CmdReadMultiBlock>
 8006f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f7c:	e009      	b.n	8006f92 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2281      	movs	r2, #129	; 0x81
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 fc35 	bl	80097fa <SDMMC_CmdReadSingleBlock>
 8006f90:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d012      	beq.n	8006fbe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a0f      	ldr	r2, [pc, #60]	; (8006fdc <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e00a      	b.n	8006fd4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006fcc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e000      	b.n	8006fd4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006fd2:	2302      	movs	r3, #2
  }
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3730      	adds	r7, #48	; 0x30
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	1fe00fff 	.word	0x1fe00fff

08006fe0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08c      	sub	sp, #48	; 0x30
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d107      	bne.n	8007008 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e08d      	b.n	8007124 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	f040 8086 	bne.w	8007122 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800701c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	441a      	add	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	429a      	cmp	r2, r3
 8007028:	d907      	bls.n	800703a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e074      	b.n	8007124 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2203      	movs	r2, #3
 800703e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	025a      	lsls	r2, r3, #9
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	2b01      	cmp	r3, #1
 800705e:	d002      	beq.n	8007066 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	025b      	lsls	r3, r3, #9
 8007064:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	025b      	lsls	r3, r3, #9
 8007070:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007072:	2390      	movs	r3, #144	; 0x90
 8007074:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800707a:	2300      	movs	r3, #0
 800707c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800707e:	2300      	movs	r3, #0
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f107 0210 	add.w	r2, r7, #16
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f002 fb65 	bl	800975c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070a0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2201      	movs	r2, #1
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d90a      	bls.n	80070ce <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	22a0      	movs	r2, #160	; 0xa0
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 fc01 	bl	80098cc <SDMMC_CmdWriteMultiBlock>
 80070ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80070cc:	e009      	b.n	80070e2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2290      	movs	r2, #144	; 0x90
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070da:	4618      	mov	r0, r3
 80070dc:	f002 fbd3 	bl	8009886 <SDMMC_CmdWriteSingleBlock>
 80070e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d012      	beq.n	800710e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a0f      	ldr	r2, [pc, #60]	; (800712c <HAL_SD_WriteBlocks_DMA+0x14c>)
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	431a      	orrs	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e00a      	b.n	8007124 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800711c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	e000      	b.n	8007124 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007122:	2302      	movs	r3, #2
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	3730      	adds	r7, #48	; 0x30
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	1fe00fff 	.word	0x1fe00fff

08007130 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_SD_IRQHandler+0x2e>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f926 	bl	80083a8 <SD_Read_IT>
 800715c:	e19a      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80ac 	beq.w	80072c6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007176:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <HAL_SD_IRQHandler+0x1b8>)
 8007184:	400b      	ands	r3, r1
 8007186:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007196:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d038      	beq.n	8007224 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <HAL_SD_IRQHandler+0x96>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 fba2 	bl	8009914 <SDMMC_CmdStopTransfer>
 80071d0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f95b 	bl	80074a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3f      	ldr	r2, [pc, #252]	; (80072ec <HAL_SD_IRQHandler+0x1bc>)
 80071f0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <HAL_SD_IRQHandler+0xe4>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f003 f855 	bl	800a2c4 <HAL_SD_RxCpltCallback>
 800721a:	e13b      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f003 f847 	bl	800a2b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007222:	e137      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8132 	beq.w	8007494 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2200      	movs	r2, #0
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2200      	movs	r2, #0
 8007246:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <HAL_SD_IRQHandler+0x12c>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d011      	beq.n	8007280 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f002 fb57 	bl	8009914 <SDMMC_CmdStopTransfer>
 8007266:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f910 	bl	80074a0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <HAL_SD_IRQHandler+0x172>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f003 f804 	bl	800a2b0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <HAL_SD_IRQHandler+0x18e>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80eb 	beq.w	8007494 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f003 f800 	bl	800a2c4 <HAL_SD_RxCpltCallback>
}
 80072c4:	e0e6      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <HAL_SD_IRQHandler+0x1c0>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 f8a8 	bl	8008434 <SD_Write_IT>
 80072e4:	e0d6      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
 80072e6:	bf00      	nop
 80072e8:	ffff3ec5 	.word	0xffff3ec5
 80072ec:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 809d 	beq.w	800743a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	f043 0202 	orr.w	r2, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007320:	f003 0308 	and.w	r3, r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732c:	f043 0208 	orr.w	r2, r3, #8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	f043 0220 	orr.w	r2, r3, #32
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007360:	f043 0210 	orr.w	r2, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a4b      	ldr	r2, [pc, #300]	; (800749c <HAL_SD_IRQHandler+0x36c>)
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800737e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800739e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073ae:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f002 faad 	bl	8009914 <SDMMC_CmdStopTransfer>
 80073ba:	4602      	mov	r2, r0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073d4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f851 	bl	80074a0 <HAL_SD_ErrorCallback>
}
 80073fe:	e049      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d044      	beq.n	8007494 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d040      	beq.n	8007494 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007420:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2200      	movs	r2, #0
 8007428:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f834 	bl	80074a0 <HAL_SD_ErrorCallback>
}
 8007438:	e02c      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d025      	beq.n	8007494 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f84a 	bl	8008504 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007470:	e010      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 f832 	bl	80084dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007478:	e00c      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 f833 	bl	80084f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800748a:	e003      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f81b 	bl	80084c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007492:	e7ff      	b.n	8007494 <HAL_SD_IRQHandler+0x364>
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	18000f3a 	.word	0x18000f3a

080074a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c2:	0f9b      	lsrs	r3, r3, #30
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ce:	0e9b      	lsrs	r3, r3, #26
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e0:	0e1b      	lsrs	r3, r3, #24
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f2:	0c1b      	lsrs	r3, r3, #16
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	b2da      	uxtb	r2, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	b2da      	uxtb	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007514:	0d1b      	lsrs	r3, r3, #20
 8007516:	b29a      	uxth	r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007520:	0c1b      	lsrs	r3, r3, #16
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	b2da      	uxtb	r2, r3
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007532:	0bdb      	lsrs	r3, r3, #15
 8007534:	b2db      	uxtb	r3, r3
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007544:	0b9b      	lsrs	r3, r3, #14
 8007546:	b2db      	uxtb	r3, r3
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	b2da      	uxtb	r2, r3
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007556:	0b5b      	lsrs	r3, r3, #13
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007568:	0b1b      	lsrs	r3, r3, #12
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d163      	bne.n	800764c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007588:	009a      	lsls	r2, r3, #2
 800758a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800758e:	4013      	ands	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007594:	0f92      	lsrs	r2, r2, #30
 8007596:	431a      	orrs	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a0:	0edb      	lsrs	r3, r3, #27
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b2:	0e1b      	lsrs	r3, r3, #24
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c4:	0d5b      	lsrs	r3, r3, #21
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d6:	0c9b      	lsrs	r3, r3, #18
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e8:	0bdb      	lsrs	r3, r3, #15
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	7e1b      	ldrb	r3, [r3, #24]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	3302      	adds	r3, #2
 800760c:	2201      	movs	r2, #1
 800760e:	fa02 f303 	lsl.w	r3, r2, r3
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007616:	fb03 f202 	mul.w	r2, r3, r2
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	7a1b      	ldrb	r3, [r3, #8]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	2201      	movs	r2, #1
 800762a:	409a      	lsls	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007638:	0a52      	lsrs	r2, r2, #9
 800763a:	fb03 f202 	mul.w	r2, r3, r2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
 800764a:	e031      	b.n	80076b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	2b01      	cmp	r3, #1
 8007652:	d11d      	bne.n	8007690 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007658:	041b      	lsls	r3, r3, #16
 800765a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	431a      	orrs	r2, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	3301      	adds	r3, #1
 8007670:	029a      	lsls	r2, r3, #10
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007684:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	655a      	str	r2, [r3, #84]	; 0x54
 800768e:	e00f      	b.n	80076b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a58      	ldr	r2, [pc, #352]	; (80077f8 <HAL_SD_GetCardCSD+0x344>)
 8007696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e09d      	b.n	80077ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b4:	0b9b      	lsrs	r3, r3, #14
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c6:	09db      	lsrs	r3, r3, #7
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e8:	0fdb      	lsrs	r3, r3, #31
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f4:	0f5b      	lsrs	r3, r3, #29
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007706:	0e9b      	lsrs	r3, r3, #26
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	b2da      	uxtb	r2, r3
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007718:	0d9b      	lsrs	r3, r3, #22
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	b2da      	uxtb	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772a:	0d5b      	lsrs	r3, r3, #21
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007746:	0c1b      	lsrs	r3, r3, #16
 8007748:	b2db      	uxtb	r3, r3
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	b2da      	uxtb	r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775a:	0bdb      	lsrs	r3, r3, #15
 800775c:	b2db      	uxtb	r3, r3
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	b2da      	uxtb	r2, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800776e:	0b9b      	lsrs	r3, r3, #14
 8007770:	b2db      	uxtb	r3, r3
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	b2da      	uxtb	r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007782:	0b5b      	lsrs	r3, r3, #13
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007796:	0b1b      	lsrs	r3, r3, #12
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077aa:	0a9b      	lsrs	r3, r3, #10
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	1fe00fff 	.word	0x1fe00fff

080077fc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b094      	sub	sp, #80	; 0x50
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b03      	cmp	r3, #3
 8007816:	d101      	bne.n	800781c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0a7      	b.n	800796c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800781c:	f107 0308 	add.w	r3, r7, #8
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fb62 	bl	8007eec <SD_SendSDStatus>
 8007828:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800782a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782c:	2b00      	cmp	r3, #0
 800782e:	d011      	beq.n	8007854 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a4f      	ldr	r2, [pc, #316]	; (8007974 <HAL_SD_GetCardStatus+0x178>)
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007852:	e070      	b.n	8007936 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	b2da      	uxtb	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	b2db      	uxtb	r3, r3
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	b2da      	uxtb	r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800787e:	b29a      	uxth	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	0e1b      	lsrs	r3, r3, #24
 8007884:	b29b      	uxth	r3, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	061a      	lsls	r2, r3, #24
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800789a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80078a4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	0e1b      	lsrs	r3, r3, #24
 80078aa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	0a1b      	lsrs	r3, r3, #8
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	0d1b      	lsrs	r3, r3, #20
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078dc:	b29a      	uxth	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4313      	orrs	r3, r2
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	0a9b      	lsrs	r3, r3, #10
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	b2da      	uxtb	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	091b      	lsrs	r3, r3, #4
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	b2da      	uxtb	r2, r3
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	b2da      	uxtb	r2, r3
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	0e1b      	lsrs	r3, r3, #24
 8007930:	b2da      	uxtb	r2, r3
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800793e:	4618      	mov	r0, r3
 8007940:	f001 ff38 	bl	80097b4 <SDMMC_CmdBlockLength>
 8007944:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00d      	beq.n	8007968 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a08      	ldr	r2, [pc, #32]	; (8007974 <HAL_SD_GetCardStatus+0x178>)
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007958:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007968:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800796c:	4618      	mov	r0, r3
 800796e:	3750      	adds	r7, #80	; 0x50
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	1fe00fff 	.word	0x1fe00fff

08007978 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b08d      	sub	sp, #52	; 0x34
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2203      	movs	r2, #3
 80079e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d02e      	beq.n	8007a52 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fa:	d106      	bne.n	8007a0a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	635a      	str	r2, [r3, #52]	; 0x34
 8007a08:	e029      	b.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a10:	d10a      	bne.n	8007a28 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fb62 	bl	80080dc <SD_WideBus_Enable>
 8007a18:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	635a      	str	r2, [r3, #52]	; 0x34
 8007a26:	e01a      	b.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb9f 	bl	8008172 <SD_WideBus_Disable>
 8007a34:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	635a      	str	r2, [r3, #52]	; 0x34
 8007a42:	e00c      	b.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8007a50:	e005      	b.n	8007a5e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a5e      	ldr	r2, [pc, #376]	; (8007be4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a74:	e094      	b.n	8007ba0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a7a:	f7fd fea9 	bl	80057d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a7e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8083 	beq.w	8007b8e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	4950      	ldr	r1, [pc, #320]	; (8007be8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007aa6:	fba1 1303 	umull	r1, r3, r1, r3
 8007aaa:	0e1b      	lsrs	r3, r3, #24
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d303      	bcc.n	8007ab8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	e05a      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac0:	d103      	bne.n	8007aca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	e051      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad2:	d126      	bne.n	8007b22 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10e      	bne.n	8007afa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	4a43      	ldr	r2, [pc, #268]	; (8007bec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d906      	bls.n	8007af2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	4a40      	ldr	r2, [pc, #256]	; (8007be8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	0e5b      	lsrs	r3, r3, #25
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	e03d      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	61bb      	str	r3, [r7, #24]
 8007af8:	e039      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	6a3a      	ldr	r2, [r7, #32]
 8007b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b06:	4a39      	ldr	r2, [pc, #228]	; (8007bec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d906      	bls.n	8007b1a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	4a36      	ldr	r2, [pc, #216]	; (8007be8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	0e5b      	lsrs	r3, r3, #25
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	e029      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	e025      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10e      	bne.n	8007b48 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	4a30      	ldr	r2, [pc, #192]	; (8007bf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d906      	bls.n	8007b40 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	4a2c      	ldr	r2, [pc, #176]	; (8007be8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	0e1b      	lsrs	r3, r3, #24
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e016      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e012      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	6a3a      	ldr	r2, [r7, #32]
 8007b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b54:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d906      	bls.n	8007b68 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	4a22      	ldr	r2, [pc, #136]	; (8007be8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	e002      	b.n	8007b6e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681c      	ldr	r4, [r3, #0]
 8007b72:	466a      	mov	r2, sp
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007b80:	f107 0308 	add.w	r3, r7, #8
 8007b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b86:	4620      	mov	r0, r4
 8007b88:	f001 fd36 	bl	80095f8 <SDMMC_Init>
 8007b8c:	e008      	b.n	8007ba0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fe03 	bl	80097b4 <SDMMC_CmdBlockLength>
 8007bae:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00c      	beq.n	8007bd0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a0a      	ldr	r2, [pc, #40]	; (8007be4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	372c      	adds	r7, #44	; 0x2c
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd90      	pop	{r4, r7, pc}
 8007be4:	1fe00fff 	.word	0x1fe00fff
 8007be8:	55e63b89 	.word	0x55e63b89
 8007bec:	02faf080 	.word	0x02faf080
 8007bf0:	017d7840 	.word	0x017d7840

08007bf4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007c00:	f107 030c 	add.w	r3, r7, #12
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa40 	bl	800808c <SD_SendStatus>
 8007c0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d005      	beq.n	8007c20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	0a5b      	lsrs	r3, r3, #9
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c2a:	693b      	ldr	r3, [r7, #16]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b090      	sub	sp, #64	; 0x40
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007c40:	f7fa f996 	bl	8001f70 <HAL_GetTick>
 8007c44:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fd2d 	bl	80096aa <SDMMC_GetPowerState>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c5a:	e0b5      	b.n	8007dc8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d02e      	beq.n	8007cc2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 ff78 	bl	8009b5e <SDMMC_CmdSendCID>
 8007c6e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <SD_InitCard+0x46>
    {
      return errorstate;
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	e0a6      	b.n	8007dc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 fd58 	bl	8009736 <SDMMC_GetResponse>
 8007c86:	4602      	mov	r2, r0
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2104      	movs	r1, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 fd4f 	bl	8009736 <SDMMC_GetResponse>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2108      	movs	r1, #8
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 fd46 	bl	8009736 <SDMMC_GetResponse>
 8007caa:	4602      	mov	r2, r0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	210c      	movs	r1, #12
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 fd3d 	bl	8009736 <SDMMC_GetResponse>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d01d      	beq.n	8007d06 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007cca:	e019      	b.n	8007d00 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f107 020a 	add.w	r2, r7, #10
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 ff80 	bl	8009bdc <SDMMC_CmdSetRelAdd>
 8007cdc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	e06f      	b.n	8007dc8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007ce8:	f7fa f942 	bl	8001f70 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	f241 3287 	movw	r2, #4999	; 0x1387
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d902      	bls.n	8007d00 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007cfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cfe:	e063      	b.n	8007dc8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007d00:	897b      	ldrh	r3, [r7, #10]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0e2      	beq.n	8007ccc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d036      	beq.n	8007d7c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007d0e:	897b      	ldrh	r3, [r7, #10]
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	041b      	lsls	r3, r3, #16
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f001 ff3a 	bl	8009b9c <SDMMC_CmdSendCSD>
 8007d28:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <SD_InitCard+0x100>
    {
      return errorstate;
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	e049      	b.n	8007dc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 fcfb 	bl	8009736 <SDMMC_GetResponse>
 8007d40:	4602      	mov	r2, r0
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fcf2 	bl	8009736 <SDMMC_GetResponse>
 8007d52:	4602      	mov	r2, r0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2108      	movs	r1, #8
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fce9 	bl	8009736 <SDMMC_GetResponse>
 8007d64:	4602      	mov	r2, r0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	210c      	movs	r1, #12
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 fce0 	bl	8009736 <SDMMC_GetResponse>
 8007d76:	4602      	mov	r2, r0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2104      	movs	r1, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fcd7 	bl	8009736 <SDMMC_GetResponse>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	0d1a      	lsrs	r2, r3, #20
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d90:	f107 030c 	add.w	r3, r7, #12
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff fb8c 	bl	80074b4 <HAL_SD_GetCardCSD>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007da2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007da6:	e00f      	b.n	8007dc8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f001 fde9 	bl	800998c <SDMMC_CmdSelDesel>
 8007dba:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <SD_InitCard+0x192>
  {
    return errorstate;
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	e000      	b.n	8007dc8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3740      	adds	r7, #64	; 0x40
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 fdf2 	bl	80099d2 <SDMMC_CmdGoIdleState>
 8007dee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <SD_PowerON+0x2a>
  {
    return errorstate;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	e072      	b.n	8007ee0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fe05 	bl	8009a0e <SDMMC_CmdOperCond>
 8007e04:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e0c:	d10d      	bne.n	8007e2a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 fdda 	bl	80099d2 <SDMMC_CmdGoIdleState>
 8007e1e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <SD_PowerON+0x60>
    {
      return errorstate;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	e05a      	b.n	8007ee0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d137      	bne.n	8007ea8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 fe05 	bl	8009a4e <SDMMC_CmdAppCommand>
 8007e44:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d02d      	beq.n	8007ea8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e50:	e046      	b.n	8007ee0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fdf8 	bl	8009a4e <SDMMC_CmdAppCommand>
 8007e5e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	e03a      	b.n	8007ee0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	491e      	ldr	r1, [pc, #120]	; (8007ee8 <SD_PowerON+0x118>)
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 fe0f 	bl	8009a94 <SDMMC_CmdAppOperCommand>
 8007e76:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e82:	e02d      	b.n	8007ee0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 fc53 	bl	8009736 <SDMMC_GetResponse>
 8007e90:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	0fdb      	lsrs	r3, r3, #31
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <SD_PowerON+0xce>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <SD_PowerON+0xd0>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]

    count++;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d802      	bhi.n	8007eb8 <SD_PowerON+0xe8>
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0cc      	beq.n	8007e52 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d902      	bls.n	8007ec8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ec6:	e00b      	b.n	8007ee0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	c1100000 	.word	0xc1100000

08007eec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ef6:	f7fa f83b 	bl	8001f70 <HAL_GetTick>
 8007efa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 fc15 	bl	8009736 <SDMMC_GetResponse>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f16:	d102      	bne.n	8007f1e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f1c:	e0b0      	b.n	8008080 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2140      	movs	r1, #64	; 0x40
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fc45 	bl	80097b4 <SDMMC_CmdBlockLength>
 8007f2a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	e0a0      	b.n	8008080 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f001 fd7f 	bl	8009a4e <SDMMC_CmdAppCommand>
 8007f50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	e08d      	b.n	8008080 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f64:	f04f 33ff 	mov.w	r3, #4294967295
 8007f68:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007f6a:	2340      	movs	r3, #64	; 0x40
 8007f6c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007f6e:	2360      	movs	r3, #96	; 0x60
 8007f70:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f72:	2302      	movs	r3, #2
 8007f74:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f107 0208 	add.w	r2, r7, #8
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fbe7 	bl	800975c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 fe67 	bl	8009c66 <SDMMC_CmdStatusRegister>
 8007f98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02b      	beq.n	8007ff8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	e069      	b.n	8008080 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d013      	beq.n	8007fe2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fbe:	e00d      	b.n	8007fdc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fb41 	bl	800964c <SDMMC_ReadFIFO>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	601a      	str	r2, [r3, #0]
        pData++;
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	3301      	adds	r3, #1
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	d9ee      	bls.n	8007fc0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fe2:	f7f9 ffc5 	bl	8001f70 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d102      	bne.n	8007ff8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ff2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ff6:	e043      	b.n	8008080 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0d2      	beq.n	8007fac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008014:	2308      	movs	r3, #8
 8008016:	e033      	b.n	8008080 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008026:	2302      	movs	r3, #2
 8008028:	e02a      	b.n	8008080 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d017      	beq.n	8008068 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008038:	2320      	movs	r3, #32
 800803a:	e021      	b.n	8008080 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4618      	mov	r0, r3
 8008042:	f001 fb03 	bl	800964c <SDMMC_ReadFIFO>
 8008046:	4602      	mov	r2, r0
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	601a      	str	r2, [r3, #0]
    pData++;
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	3304      	adds	r3, #4
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008052:	f7f9 ff8d 	bl	8001f70 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d102      	bne.n	8008068 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008062:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008066:	e00b      	b.n	8008080 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e2      	bne.n	800803c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a03      	ldr	r2, [pc, #12]	; (8008088 <SD_SendSDStatus+0x19c>)
 800807c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3730      	adds	r7, #48	; 0x30
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	18000f3a 	.word	0x18000f3a

0800808c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800809c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a0:	e018      	b.n	80080d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	4619      	mov	r1, r3
 80080ae:	4610      	mov	r0, r2
 80080b0:	f001 fdb6 	bl	8009c20 <SDMMC_CmdSendStatus>
 80080b4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	e009      	b.n	80080d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2100      	movs	r1, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fb35 	bl	8009736 <SDMMC_GetResponse>
 80080cc:	4602      	mov	r2, r0
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fb1f 	bl	8009736 <SDMMC_GetResponse>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008102:	d102      	bne.n	800810a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008108:	e02f      	b.n	800816a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800810a:	f107 030c 	add.w	r3, r7, #12
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f879 	bl	8008208 <SD_FindSCR>
 8008116:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	e023      	b.n	800816a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01c      	beq.n	8008166 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f001 fc88 	bl	8009a4e <SDMMC_CmdAppCommand>
 800813e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	e00f      	b.n	800816a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2102      	movs	r1, #2
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fcbf 	bl	8009ad4 <SDMMC_CmdBusWidth>
 8008156:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	e003      	b.n	800816a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008162:	2300      	movs	r3, #0
 8008164:	e001      	b.n	800816a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008166:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b086      	sub	sp, #24
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2100      	movs	r1, #0
 8008188:	4618      	mov	r0, r3
 800818a:	f001 fad4 	bl	8009736 <SDMMC_GetResponse>
 800818e:	4603      	mov	r3, r0
 8008190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008198:	d102      	bne.n	80081a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800819a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800819e:	e02f      	b.n	8008200 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f82e 	bl	8008208 <SD_FindSCR>
 80081ac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	e023      	b.n	8008200 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01c      	beq.n	80081fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f001 fc3d 	bl	8009a4e <SDMMC_CmdAppCommand>
 80081d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	e00f      	b.n	8008200 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fc74 	bl	8009ad4 <SDMMC_CmdBusWidth>
 80081ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	e003      	b.n	8008200 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	e001      	b.n	8008200 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	; 0x38
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008212:	f7f9 fead 	bl	8001f70 <HAL_GetTick>
 8008216:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800821c:	2300      	movs	r3, #0
 800821e:	60bb      	str	r3, [r7, #8]
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2108      	movs	r1, #8
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fac0 	bl	80097b4 <SDMMC_CmdBlockLength>
 8008234:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <SD_FindSCR+0x38>
  {
    return errorstate;
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	e0ad      	b.n	800839c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	4619      	mov	r1, r3
 800824c:	4610      	mov	r0, r2
 800824e:	f001 fbfe 	bl	8009a4e <SDMMC_CmdAppCommand>
 8008252:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <SD_FindSCR+0x56>
  {
    return errorstate;
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	e09e      	b.n	800839c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008264:	2308      	movs	r3, #8
 8008266:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008268:	2330      	movs	r3, #48	; 0x30
 800826a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800826c:	2302      	movs	r3, #2
 800826e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008270:	2300      	movs	r3, #0
 8008272:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008274:	2301      	movs	r3, #1
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f107 0210 	add.w	r2, r7, #16
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f001 fa6a 	bl	800975c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f001 fc44 	bl	8009b1a <SDMMC_CmdSendSCR>
 8008292:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008296:	2b00      	cmp	r3, #0
 8008298:	d027      	beq.n	80082ea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	e07e      	b.n	800839c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d113      	bne.n	80082d4 <SD_FindSCR+0xcc>
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d110      	bne.n	80082d4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 f9c8 	bl	800964c <SDMMC_ReadFIFO>
 80082bc:	4603      	mov	r3, r0
 80082be:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 f9c1 	bl	800964c <SDMMC_ReadFIFO>
 80082ca:	4603      	mov	r3, r0
 80082cc:	60fb      	str	r3, [r7, #12]
      index++;
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	3301      	adds	r3, #1
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082d4:	f7f9 fe4c 	bl	8001f70 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d102      	bne.n	80082ea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082e8:	e058      	b.n	800839c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f0:	f240 532a 	movw	r3, #1322	; 0x52a
 80082f4:	4013      	ands	r3, r2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0d1      	beq.n	800829e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2208      	movs	r2, #8
 800830e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008310:	2308      	movs	r3, #8
 8008312:	e043      	b.n	800839c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2202      	movs	r2, #2
 8008328:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	e036      	b.n	800839c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2220      	movs	r2, #32
 8008342:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008344:	2320      	movs	r3, #32
 8008346:	e029      	b.n	800839c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <SD_FindSCR+0x19c>)
 800834e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	061a      	lsls	r2, r3, #24
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800835c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008366:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	0e1b      	lsrs	r3, r3, #24
 800836c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	601a      	str	r2, [r3, #0]
    scr++;
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	3304      	adds	r3, #4
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	061a      	lsls	r2, r3, #24
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008384:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	0a1b      	lsrs	r3, r3, #8
 800838a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800838e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	0e1b      	lsrs	r3, r3, #24
 8008394:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3738      	adds	r7, #56	; 0x38
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	18000f3a 	.word	0x18000f3a

080083a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	2b1f      	cmp	r3, #31
 80083bc:	d936      	bls.n	800842c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e027      	b.n	8008414 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 f93f 	bl	800964c <SDMMC_ReadFIFO>
 80083ce:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3301      	adds	r3, #1
 80083dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	0a1b      	lsrs	r3, r3, #8
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3301      	adds	r3, #1
 80083ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	0c1b      	lsrs	r3, r3, #16
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	3301      	adds	r3, #1
 80083fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	0e1b      	lsrs	r3, r3, #24
 8008402:	b2da      	uxtb	r2, r3
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	3301      	adds	r3, #1
 800840c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	3301      	adds	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b07      	cmp	r3, #7
 8008418:	d9d4      	bls.n	80083c4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f1a3 0220 	sub.w	r2, r3, #32
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800842c:	bf00      	nop
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	2b1f      	cmp	r3, #31
 8008448:	d93a      	bls.n	80084c0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e02b      	b.n	80084a8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	021a      	lsls	r2, r3, #8
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	3301      	adds	r3, #1
 800846c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	041a      	lsls	r2, r3, #16
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
      tmp++;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	3301      	adds	r3, #1
 800847e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	061a      	lsls	r2, r3, #24
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3301      	adds	r3, #1
 8008490:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f107 020c 	add.w	r2, r7, #12
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f001 f8e2 	bl	8009666 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	3301      	adds	r3, #1
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2b07      	cmp	r3, #7
 80084ac:	d9d0      	bls.n	8008450 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	f1a3 0220 	sub.w	r2, r3, #32
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	621a      	str	r2, [r3, #32]
  }
}
 80084c0:	bf00      	nop
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e042      	b.n	80085b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7f9 fa69 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2224      	movs	r2, #36	; 0x24
 8008546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0201 	bic.w	r2, r2, #1
 8008558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f82c 	bl	80085b8 <UART_SetConfig>
 8008560:	4603      	mov	r3, r0
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e022      	b.n	80085b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fd88 	bl	8009088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689a      	ldr	r2, [r3, #8]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f042 0201 	orr.w	r2, r2, #1
 80085a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fe0f 	bl	80091cc <UART_CheckIdleState>
 80085ae:	4603      	mov	r3, r0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085bc:	b092      	sub	sp, #72	; 0x48
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	4313      	orrs	r3, r2
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	4bbe      	ldr	r3, [pc, #760]	; (80088e0 <UART_SetConfig+0x328>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	6812      	ldr	r2, [r2, #0]
 80085ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f0:	430b      	orrs	r3, r1
 80085f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4ab3      	ldr	r2, [pc, #716]	; (80088e4 <UART_SetConfig+0x32c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008620:	4313      	orrs	r3, r2
 8008622:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	4baf      	ldr	r3, [pc, #700]	; (80088e8 <UART_SetConfig+0x330>)
 800862c:	4013      	ands	r3, r2
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008634:	430b      	orrs	r3, r1
 8008636:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	f023 010f 	bic.w	r1, r3, #15
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4aa6      	ldr	r2, [pc, #664]	; (80088ec <UART_SetConfig+0x334>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d177      	bne.n	8008748 <UART_SetConfig+0x190>
 8008658:	4ba5      	ldr	r3, [pc, #660]	; (80088f0 <UART_SetConfig+0x338>)
 800865a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008660:	2b28      	cmp	r3, #40	; 0x28
 8008662:	d86d      	bhi.n	8008740 <UART_SetConfig+0x188>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0xb4>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008711 	.word	0x08008711
 8008670:	08008741 	.word	0x08008741
 8008674:	08008741 	.word	0x08008741
 8008678:	08008741 	.word	0x08008741
 800867c:	08008741 	.word	0x08008741
 8008680:	08008741 	.word	0x08008741
 8008684:	08008741 	.word	0x08008741
 8008688:	08008741 	.word	0x08008741
 800868c:	08008719 	.word	0x08008719
 8008690:	08008741 	.word	0x08008741
 8008694:	08008741 	.word	0x08008741
 8008698:	08008741 	.word	0x08008741
 800869c:	08008741 	.word	0x08008741
 80086a0:	08008741 	.word	0x08008741
 80086a4:	08008741 	.word	0x08008741
 80086a8:	08008741 	.word	0x08008741
 80086ac:	08008721 	.word	0x08008721
 80086b0:	08008741 	.word	0x08008741
 80086b4:	08008741 	.word	0x08008741
 80086b8:	08008741 	.word	0x08008741
 80086bc:	08008741 	.word	0x08008741
 80086c0:	08008741 	.word	0x08008741
 80086c4:	08008741 	.word	0x08008741
 80086c8:	08008741 	.word	0x08008741
 80086cc:	08008729 	.word	0x08008729
 80086d0:	08008741 	.word	0x08008741
 80086d4:	08008741 	.word	0x08008741
 80086d8:	08008741 	.word	0x08008741
 80086dc:	08008741 	.word	0x08008741
 80086e0:	08008741 	.word	0x08008741
 80086e4:	08008741 	.word	0x08008741
 80086e8:	08008741 	.word	0x08008741
 80086ec:	08008731 	.word	0x08008731
 80086f0:	08008741 	.word	0x08008741
 80086f4:	08008741 	.word	0x08008741
 80086f8:	08008741 	.word	0x08008741
 80086fc:	08008741 	.word	0x08008741
 8008700:	08008741 	.word	0x08008741
 8008704:	08008741 	.word	0x08008741
 8008708:	08008741 	.word	0x08008741
 800870c:	08008739 	.word	0x08008739
 8008710:	2301      	movs	r3, #1
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008716:	e222      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e21e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e21a      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e216      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008730:	2320      	movs	r3, #32
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e212      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e20e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008740:	2380      	movs	r3, #128	; 0x80
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e20a      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a69      	ldr	r2, [pc, #420]	; (80088f4 <UART_SetConfig+0x33c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d130      	bne.n	80087b4 <UART_SetConfig+0x1fc>
 8008752:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <UART_SetConfig+0x338>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b05      	cmp	r3, #5
 800875c:	d826      	bhi.n	80087ac <UART_SetConfig+0x1f4>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0x1ac>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	0800877d 	.word	0x0800877d
 8008768:	08008785 	.word	0x08008785
 800876c:	0800878d 	.word	0x0800878d
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	2300      	movs	r3, #0
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008782:	e1ec      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e1e8      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e1e4      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e1e0      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e1dc      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e1d8      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e1d4      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a4f      	ldr	r2, [pc, #316]	; (80088f8 <UART_SetConfig+0x340>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d130      	bne.n	8008820 <UART_SetConfig+0x268>
 80087be:	4b4c      	ldr	r3, [pc, #304]	; (80088f0 <UART_SetConfig+0x338>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d826      	bhi.n	8008818 <UART_SetConfig+0x260>
 80087ca:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0x218>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	08008801 	.word	0x08008801
 80087e0:	08008809 	.word	0x08008809
 80087e4:	08008811 	.word	0x08008811
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e1b6      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e1b2      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e1ae      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e1aa      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008808:	2320      	movs	r3, #32
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880e:	e1a6      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e1a2      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e19e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a35      	ldr	r2, [pc, #212]	; (80088fc <UART_SetConfig+0x344>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d130      	bne.n	800888c <UART_SetConfig+0x2d4>
 800882a:	4b31      	ldr	r3, [pc, #196]	; (80088f0 <UART_SetConfig+0x338>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b05      	cmp	r3, #5
 8008834:	d826      	bhi.n	8008884 <UART_SetConfig+0x2cc>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x284>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008855 	.word	0x08008855
 8008840:	0800885d 	.word	0x0800885d
 8008844:	08008865 	.word	0x08008865
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008875 	.word	0x08008875
 8008850:	0800887d 	.word	0x0800887d
 8008854:	2300      	movs	r3, #0
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e180      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800885c:	2304      	movs	r3, #4
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e17c      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008864:	2308      	movs	r3, #8
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e178      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800886c:	2310      	movs	r3, #16
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008872:	e174      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008874:	2320      	movs	r3, #32
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887a:	e170      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800887c:	2340      	movs	r3, #64	; 0x40
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e16c      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e168      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <UART_SetConfig+0x348>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d142      	bne.n	800891c <UART_SetConfig+0x364>
 8008896:	4b16      	ldr	r3, [pc, #88]	; (80088f0 <UART_SetConfig+0x338>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d838      	bhi.n	8008914 <UART_SetConfig+0x35c>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <UART_SetConfig+0x2f0>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	08008905 	.word	0x08008905
 80088bc:	0800890d 	.word	0x0800890d
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e14a      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80088c8:	2304      	movs	r3, #4
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e146      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e142      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80088d8:	2310      	movs	r3, #16
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e13e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80088e0:	cfff69f3 	.word	0xcfff69f3
 80088e4:	58000c00 	.word	0x58000c00
 80088e8:	11fff4ff 	.word	0x11fff4ff
 80088ec:	40011000 	.word	0x40011000
 80088f0:	58024400 	.word	0x58024400
 80088f4:	40004400 	.word	0x40004400
 80088f8:	40004800 	.word	0x40004800
 80088fc:	40004c00 	.word	0x40004c00
 8008900:	40005000 	.word	0x40005000
 8008904:	2320      	movs	r3, #32
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e128      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800890c:	2340      	movs	r3, #64	; 0x40
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e124      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e120      	b.n	8008b5e <UART_SetConfig+0x5a6>
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4acb      	ldr	r2, [pc, #812]	; (8008c50 <UART_SetConfig+0x698>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d176      	bne.n	8008a14 <UART_SetConfig+0x45c>
 8008926:	4bcb      	ldr	r3, [pc, #812]	; (8008c54 <UART_SetConfig+0x69c>)
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800892e:	2b28      	cmp	r3, #40	; 0x28
 8008930:	d86c      	bhi.n	8008a0c <UART_SetConfig+0x454>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <UART_SetConfig+0x380>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	080089dd 	.word	0x080089dd
 800893c:	08008a0d 	.word	0x08008a0d
 8008940:	08008a0d 	.word	0x08008a0d
 8008944:	08008a0d 	.word	0x08008a0d
 8008948:	08008a0d 	.word	0x08008a0d
 800894c:	08008a0d 	.word	0x08008a0d
 8008950:	08008a0d 	.word	0x08008a0d
 8008954:	08008a0d 	.word	0x08008a0d
 8008958:	080089e5 	.word	0x080089e5
 800895c:	08008a0d 	.word	0x08008a0d
 8008960:	08008a0d 	.word	0x08008a0d
 8008964:	08008a0d 	.word	0x08008a0d
 8008968:	08008a0d 	.word	0x08008a0d
 800896c:	08008a0d 	.word	0x08008a0d
 8008970:	08008a0d 	.word	0x08008a0d
 8008974:	08008a0d 	.word	0x08008a0d
 8008978:	080089ed 	.word	0x080089ed
 800897c:	08008a0d 	.word	0x08008a0d
 8008980:	08008a0d 	.word	0x08008a0d
 8008984:	08008a0d 	.word	0x08008a0d
 8008988:	08008a0d 	.word	0x08008a0d
 800898c:	08008a0d 	.word	0x08008a0d
 8008990:	08008a0d 	.word	0x08008a0d
 8008994:	08008a0d 	.word	0x08008a0d
 8008998:	080089f5 	.word	0x080089f5
 800899c:	08008a0d 	.word	0x08008a0d
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008a0d 	.word	0x08008a0d
 80089ac:	08008a0d 	.word	0x08008a0d
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	08008a0d 	.word	0x08008a0d
 80089c4:	08008a0d 	.word	0x08008a0d
 80089c8:	08008a0d 	.word	0x08008a0d
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008a0d 	.word	0x08008a0d
 80089d4:	08008a0d 	.word	0x08008a0d
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e2:	e0bc      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e0b8      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e0b4      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e0b0      	b.n	8008b5e <UART_SetConfig+0x5a6>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e0ac      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a04:	2340      	movs	r3, #64	; 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e0a8      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a0c:	2380      	movs	r3, #128	; 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e0a4      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a8f      	ldr	r2, [pc, #572]	; (8008c58 <UART_SetConfig+0x6a0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x4c8>
 8008a1e:	4b8d      	ldr	r3, [pc, #564]	; (8008c54 <UART_SetConfig+0x69c>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x4c0>
 8008a2a:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <UART_SetConfig+0x478>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4e:	e086      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e082      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e07e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e07a      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e076      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e072      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e06e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a75      	ldr	r2, [pc, #468]	; (8008c5c <UART_SetConfig+0x6a4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d130      	bne.n	8008aec <UART_SetConfig+0x534>
 8008a8a:	4b72      	ldr	r3, [pc, #456]	; (8008c54 <UART_SetConfig+0x69c>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d826      	bhi.n	8008ae4 <UART_SetConfig+0x52c>
 8008a96:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x4e4>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ac5 	.word	0x08008ac5
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008add 	.word	0x08008add
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aba:	e050      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008abc:	2304      	movs	r3, #4
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e04c      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e048      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e044      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e040      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008adc:	2340      	movs	r3, #64	; 0x40
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e03c      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008ae4:	2380      	movs	r3, #128	; 0x80
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e038      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a5b      	ldr	r2, [pc, #364]	; (8008c60 <UART_SetConfig+0x6a8>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d130      	bne.n	8008b58 <UART_SetConfig+0x5a0>
 8008af6:	4b57      	ldr	r3, [pc, #348]	; (8008c54 <UART_SetConfig+0x69c>)
 8008af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d826      	bhi.n	8008b50 <UART_SetConfig+0x598>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x550>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b29 	.word	0x08008b29
 8008b10:	08008b31 	.word	0x08008b31
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b41 	.word	0x08008b41
 8008b1c:	08008b49 	.word	0x08008b49
 8008b20:	2302      	movs	r3, #2
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b26:	e01a      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2e:	e016      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b30:	2308      	movs	r3, #8
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e012      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e00e      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b40:	2320      	movs	r3, #32
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b46:	e00a      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b48:	2340      	movs	r3, #64	; 0x40
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e006      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b50:	2380      	movs	r3, #128	; 0x80
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e002      	b.n	8008b5e <UART_SetConfig+0x5a6>
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a3f      	ldr	r2, [pc, #252]	; (8008c60 <UART_SetConfig+0x6a8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	f040 80f8 	bne.w	8008d5a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	dc46      	bgt.n	8008c00 <UART_SetConfig+0x648>
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	f2c0 8082 	blt.w	8008c7c <UART_SetConfig+0x6c4>
 8008b78:	3b02      	subs	r3, #2
 8008b7a:	2b1e      	cmp	r3, #30
 8008b7c:	d87e      	bhi.n	8008c7c <UART_SetConfig+0x6c4>
 8008b7e:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <UART_SetConfig+0x5cc>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008c07 	.word	0x08008c07
 8008b88:	08008c7d 	.word	0x08008c7d
 8008b8c:	08008c0f 	.word	0x08008c0f
 8008b90:	08008c7d 	.word	0x08008c7d
 8008b94:	08008c7d 	.word	0x08008c7d
 8008b98:	08008c7d 	.word	0x08008c7d
 8008b9c:	08008c1f 	.word	0x08008c1f
 8008ba0:	08008c7d 	.word	0x08008c7d
 8008ba4:	08008c7d 	.word	0x08008c7d
 8008ba8:	08008c7d 	.word	0x08008c7d
 8008bac:	08008c7d 	.word	0x08008c7d
 8008bb0:	08008c7d 	.word	0x08008c7d
 8008bb4:	08008c7d 	.word	0x08008c7d
 8008bb8:	08008c7d 	.word	0x08008c7d
 8008bbc:	08008c2f 	.word	0x08008c2f
 8008bc0:	08008c7d 	.word	0x08008c7d
 8008bc4:	08008c7d 	.word	0x08008c7d
 8008bc8:	08008c7d 	.word	0x08008c7d
 8008bcc:	08008c7d 	.word	0x08008c7d
 8008bd0:	08008c7d 	.word	0x08008c7d
 8008bd4:	08008c7d 	.word	0x08008c7d
 8008bd8:	08008c7d 	.word	0x08008c7d
 8008bdc:	08008c7d 	.word	0x08008c7d
 8008be0:	08008c7d 	.word	0x08008c7d
 8008be4:	08008c7d 	.word	0x08008c7d
 8008be8:	08008c7d 	.word	0x08008c7d
 8008bec:	08008c7d 	.word	0x08008c7d
 8008bf0:	08008c7d 	.word	0x08008c7d
 8008bf4:	08008c7d 	.word	0x08008c7d
 8008bf8:	08008c7d 	.word	0x08008c7d
 8008bfc:	08008c6f 	.word	0x08008c6f
 8008c00:	2b40      	cmp	r3, #64	; 0x40
 8008c02:	d037      	beq.n	8008c74 <UART_SetConfig+0x6bc>
 8008c04:	e03a      	b.n	8008c7c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c06:	f7fd fab5 	bl	8006174 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c0c:	e03c      	b.n	8008c88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd fac4 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1c:	e034      	b.n	8008c88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1e:	f107 0318 	add.w	r3, r7, #24
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fd fc10 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c2c:	e02c      	b.n	8008c88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c2e:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <UART_SetConfig+0x69c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <UART_SetConfig+0x69c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	08db      	lsrs	r3, r3, #3
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	4a07      	ldr	r2, [pc, #28]	; (8008c64 <UART_SetConfig+0x6ac>)
 8008c46:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c4c:	e01c      	b.n	8008c88 <UART_SetConfig+0x6d0>
 8008c4e:	bf00      	nop
 8008c50:	40011400 	.word	0x40011400
 8008c54:	58024400 	.word	0x58024400
 8008c58:	40007800 	.word	0x40007800
 8008c5c:	40007c00 	.word	0x40007c00
 8008c60:	58000c00 	.word	0x58000c00
 8008c64:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c68:	4b9d      	ldr	r3, [pc, #628]	; (8008ee0 <UART_SetConfig+0x928>)
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c6c:	e00c      	b.n	8008c88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c6e:	4b9d      	ldr	r3, [pc, #628]	; (8008ee4 <UART_SetConfig+0x92c>)
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c72:	e009      	b.n	8008c88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7a:	e005      	b.n	8008c88 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 81de 	beq.w	800904c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	4a94      	ldr	r2, [pc, #592]	; (8008ee8 <UART_SetConfig+0x930>)
 8008c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	4413      	add	r3, r2
 8008cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d305      	bcc.n	8008cc0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d903      	bls.n	8008cc8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cc6:	e1c1      	b.n	800904c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cca:	2200      	movs	r2, #0
 8008ccc:	60bb      	str	r3, [r7, #8]
 8008cce:	60fa      	str	r2, [r7, #12]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	4a84      	ldr	r2, [pc, #528]	; (8008ee8 <UART_SetConfig+0x930>)
 8008cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2200      	movs	r2, #0
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cea:	f7f7 fb51 	bl	8000390 <__aeabi_uldivmod>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	020b      	lsls	r3, r1, #8
 8008d00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d04:	0202      	lsls	r2, r0, #8
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	6849      	ldr	r1, [r1, #4]
 8008d0a:	0849      	lsrs	r1, r1, #1
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	4605      	mov	r5, r0
 8008d12:	eb12 0804 	adds.w	r8, r2, r4
 8008d16:	eb43 0905 	adc.w	r9, r3, r5
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	469a      	mov	sl, r3
 8008d22:	4693      	mov	fp, r2
 8008d24:	4652      	mov	r2, sl
 8008d26:	465b      	mov	r3, fp
 8008d28:	4640      	mov	r0, r8
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	f7f7 fb30 	bl	8000390 <__aeabi_uldivmod>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4613      	mov	r3, r2
 8008d36:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d3e:	d308      	bcc.n	8008d52 <UART_SetConfig+0x79a>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d46:	d204      	bcs.n	8008d52 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4e:	60da      	str	r2, [r3, #12]
 8008d50:	e17c      	b.n	800904c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d58:	e178      	b.n	800904c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d62:	f040 80c5 	bne.w	8008ef0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	dc48      	bgt.n	8008e00 <UART_SetConfig+0x848>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	db7b      	blt.n	8008e6a <UART_SetConfig+0x8b2>
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d879      	bhi.n	8008e6a <UART_SetConfig+0x8b2>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <UART_SetConfig+0x7c4>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008e07 	.word	0x08008e07
 8008d80:	08008e0f 	.word	0x08008e0f
 8008d84:	08008e6b 	.word	0x08008e6b
 8008d88:	08008e6b 	.word	0x08008e6b
 8008d8c:	08008e17 	.word	0x08008e17
 8008d90:	08008e6b 	.word	0x08008e6b
 8008d94:	08008e6b 	.word	0x08008e6b
 8008d98:	08008e6b 	.word	0x08008e6b
 8008d9c:	08008e27 	.word	0x08008e27
 8008da0:	08008e6b 	.word	0x08008e6b
 8008da4:	08008e6b 	.word	0x08008e6b
 8008da8:	08008e6b 	.word	0x08008e6b
 8008dac:	08008e6b 	.word	0x08008e6b
 8008db0:	08008e6b 	.word	0x08008e6b
 8008db4:	08008e6b 	.word	0x08008e6b
 8008db8:	08008e6b 	.word	0x08008e6b
 8008dbc:	08008e37 	.word	0x08008e37
 8008dc0:	08008e6b 	.word	0x08008e6b
 8008dc4:	08008e6b 	.word	0x08008e6b
 8008dc8:	08008e6b 	.word	0x08008e6b
 8008dcc:	08008e6b 	.word	0x08008e6b
 8008dd0:	08008e6b 	.word	0x08008e6b
 8008dd4:	08008e6b 	.word	0x08008e6b
 8008dd8:	08008e6b 	.word	0x08008e6b
 8008ddc:	08008e6b 	.word	0x08008e6b
 8008de0:	08008e6b 	.word	0x08008e6b
 8008de4:	08008e6b 	.word	0x08008e6b
 8008de8:	08008e6b 	.word	0x08008e6b
 8008dec:	08008e6b 	.word	0x08008e6b
 8008df0:	08008e6b 	.word	0x08008e6b
 8008df4:	08008e6b 	.word	0x08008e6b
 8008df8:	08008e6b 	.word	0x08008e6b
 8008dfc:	08008e5d 	.word	0x08008e5d
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d02e      	beq.n	8008e62 <UART_SetConfig+0x8aa>
 8008e04:	e031      	b.n	8008e6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e06:	f7fb fd71 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8008e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e0c:	e033      	b.n	8008e76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e0e:	f7fb fd83 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8008e12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e14:	e02f      	b.n	8008e76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fd f9c0 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e24:	e027      	b.n	8008e76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e26:	f107 0318 	add.w	r3, r7, #24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fd fb0c 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e34:	e01f      	b.n	8008e76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e36:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <UART_SetConfig+0x934>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e42:	4b2a      	ldr	r3, [pc, #168]	; (8008eec <UART_SetConfig+0x934>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	08db      	lsrs	r3, r3, #3
 8008e48:	f003 0303 	and.w	r3, r3, #3
 8008e4c:	4a24      	ldr	r2, [pc, #144]	; (8008ee0 <UART_SetConfig+0x928>)
 8008e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e54:	e00f      	b.n	8008e76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <UART_SetConfig+0x928>)
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5a:	e00c      	b.n	8008e76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e5c:	4b21      	ldr	r3, [pc, #132]	; (8008ee4 <UART_SetConfig+0x92c>)
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e60:	e009      	b.n	8008e76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e68:	e005      	b.n	8008e76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 80e7 	beq.w	800904c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	4a19      	ldr	r2, [pc, #100]	; (8008ee8 <UART_SetConfig+0x930>)
 8008e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e90:	005a      	lsls	r2, r3, #1
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	441a      	add	r2, r3
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d916      	bls.n	8008ed8 <UART_SetConfig+0x920>
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb0:	d212      	bcs.n	8008ed8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f023 030f 	bic.w	r3, r3, #15
 8008eba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	085b      	lsrs	r3, r3, #1
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ed4:	60da      	str	r2, [r3, #12]
 8008ed6:	e0b9      	b.n	800904c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ede:	e0b5      	b.n	800904c <UART_SetConfig+0xa94>
 8008ee0:	03d09000 	.word	0x03d09000
 8008ee4:	003d0900 	.word	0x003d0900
 8008ee8:	080110bc 	.word	0x080110bc
 8008eec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ef0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ef4:	2b20      	cmp	r3, #32
 8008ef6:	dc49      	bgt.n	8008f8c <UART_SetConfig+0x9d4>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	db7c      	blt.n	8008ff6 <UART_SetConfig+0xa3e>
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d87a      	bhi.n	8008ff6 <UART_SetConfig+0xa3e>
 8008f00:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <UART_SetConfig+0x950>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f93 	.word	0x08008f93
 8008f0c:	08008f9b 	.word	0x08008f9b
 8008f10:	08008ff7 	.word	0x08008ff7
 8008f14:	08008ff7 	.word	0x08008ff7
 8008f18:	08008fa3 	.word	0x08008fa3
 8008f1c:	08008ff7 	.word	0x08008ff7
 8008f20:	08008ff7 	.word	0x08008ff7
 8008f24:	08008ff7 	.word	0x08008ff7
 8008f28:	08008fb3 	.word	0x08008fb3
 8008f2c:	08008ff7 	.word	0x08008ff7
 8008f30:	08008ff7 	.word	0x08008ff7
 8008f34:	08008ff7 	.word	0x08008ff7
 8008f38:	08008ff7 	.word	0x08008ff7
 8008f3c:	08008ff7 	.word	0x08008ff7
 8008f40:	08008ff7 	.word	0x08008ff7
 8008f44:	08008ff7 	.word	0x08008ff7
 8008f48:	08008fc3 	.word	0x08008fc3
 8008f4c:	08008ff7 	.word	0x08008ff7
 8008f50:	08008ff7 	.word	0x08008ff7
 8008f54:	08008ff7 	.word	0x08008ff7
 8008f58:	08008ff7 	.word	0x08008ff7
 8008f5c:	08008ff7 	.word	0x08008ff7
 8008f60:	08008ff7 	.word	0x08008ff7
 8008f64:	08008ff7 	.word	0x08008ff7
 8008f68:	08008ff7 	.word	0x08008ff7
 8008f6c:	08008ff7 	.word	0x08008ff7
 8008f70:	08008ff7 	.word	0x08008ff7
 8008f74:	08008ff7 	.word	0x08008ff7
 8008f78:	08008ff7 	.word	0x08008ff7
 8008f7c:	08008ff7 	.word	0x08008ff7
 8008f80:	08008ff7 	.word	0x08008ff7
 8008f84:	08008ff7 	.word	0x08008ff7
 8008f88:	08008fe9 	.word	0x08008fe9
 8008f8c:	2b40      	cmp	r3, #64	; 0x40
 8008f8e:	d02e      	beq.n	8008fee <UART_SetConfig+0xa36>
 8008f90:	e031      	b.n	8008ff6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f92:	f7fb fcab 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8008f96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f98:	e033      	b.n	8009002 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f9a:	f7fb fcbd 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8008f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fa0:	e02f      	b.n	8009002 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fd f8fa 	bl	80061a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb0:	e027      	b.n	8009002 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fb2:	f107 0318 	add.w	r3, r7, #24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fd fa46 	bl	8006448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	e01f      	b.n	8009002 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fc2:	4b2d      	ldr	r3, [pc, #180]	; (8009078 <UART_SetConfig+0xac0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fce:	4b2a      	ldr	r3, [pc, #168]	; (8009078 <UART_SetConfig+0xac0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	08db      	lsrs	r3, r3, #3
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	4a28      	ldr	r2, [pc, #160]	; (800907c <UART_SetConfig+0xac4>)
 8008fda:	fa22 f303 	lsr.w	r3, r2, r3
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fe0:	e00f      	b.n	8009002 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008fe2:	4b26      	ldr	r3, [pc, #152]	; (800907c <UART_SetConfig+0xac4>)
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe6:	e00c      	b.n	8009002 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fe8:	4b25      	ldr	r3, [pc, #148]	; (8009080 <UART_SetConfig+0xac8>)
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fec:	e009      	b.n	8009002 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff4:	e005      	b.n	8009002 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009000:	bf00      	nop
    }

    if (pclk != 0U)
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d021      	beq.n	800904c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <UART_SetConfig+0xacc>)
 800900e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009012:	461a      	mov	r2, r3
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009016:	fbb3 f2f2 	udiv	r2, r3, r2
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	441a      	add	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	fbb2 f3f3 	udiv	r3, r2, r3
 800902a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	2b0f      	cmp	r3, #15
 8009030:	d909      	bls.n	8009046 <UART_SetConfig+0xa8e>
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009038:	d205      	bcs.n	8009046 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	b29a      	uxth	r2, r3
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60da      	str	r2, [r3, #12]
 8009044:	e002      	b.n	800904c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2201      	movs	r2, #1
 8009050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2201      	movs	r2, #1
 8009058:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	2200      	movs	r2, #0
 8009060:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2200      	movs	r2, #0
 8009066:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009068:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800906c:	4618      	mov	r0, r3
 800906e:	3748      	adds	r7, #72	; 0x48
 8009070:	46bd      	mov	sp, r7
 8009072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009076:	bf00      	nop
 8009078:	58024400 	.word	0x58024400
 800907c:	03d09000 	.word	0x03d09000
 8009080:	003d0900 	.word	0x003d0900
 8009084:	080110bc 	.word	0x080110bc

08009088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f003 0310 	and.w	r3, r3, #16
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01a      	beq.n	800919e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009186:	d10a      	bne.n	800919e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00a      	beq.n	80091c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	605a      	str	r2, [r3, #4]
  }
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091dc:	f7f8 fec8 	bl	8001f70 <HAL_GetTick>
 80091e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d10e      	bne.n	800920e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f82f 	bl	8009262 <UART_WaitOnFlagUntilTimeout>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e025      	b.n	800925a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	2b04      	cmp	r3, #4
 800921a:	d10e      	bne.n	800923a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800921c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f819 	bl	8009262 <UART_WaitOnFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e00f      	b.n	800925a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b09c      	sub	sp, #112	; 0x70
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009272:	e0a9      	b.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	f000 80a5 	beq.w	80093c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800927e:	f7f8 fe77 	bl	8001f70 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800928a:	429a      	cmp	r2, r3
 800928c:	d302      	bcc.n	8009294 <UART_WaitOnFlagUntilTimeout+0x32>
 800928e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009290:	2b00      	cmp	r3, #0
 8009292:	d140      	bne.n	8009316 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092a8:	667b      	str	r3, [r7, #100]	; 0x64
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	663b      	str	r3, [r7, #96]	; 0x60
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e5      	bne.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e069      	b.n	80093ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d051      	beq.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800932e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009332:	d149      	bne.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800933c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
 800935e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e6      	bne.n	800933e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3308      	adds	r3, #8
 8009376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	613b      	str	r3, [r7, #16]
   return(result);
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f023 0301 	bic.w	r3, r3, #1
 8009386:	66bb      	str	r3, [r7, #104]	; 0x68
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3308      	adds	r3, #8
 800938e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009390:	623a      	str	r2, [r7, #32]
 8009392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	69f9      	ldr	r1, [r7, #28]
 8009396:	6a3a      	ldr	r2, [r7, #32]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	61bb      	str	r3, [r7, #24]
   return(result);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e5      	bne.n	8009370 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2220      	movs	r2, #32
 80093b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e010      	b.n	80093ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	4013      	ands	r3, r2
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	bf0c      	ite	eq
 80093d8:	2301      	moveq	r3, #1
 80093da:	2300      	movne	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	461a      	mov	r2, r3
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	f43f af46 	beq.w	8009274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3770      	adds	r7, #112	; 0x70
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b085      	sub	sp, #20
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_UARTEx_DisableFifoMode+0x16>
 8009404:	2302      	movs	r3, #2
 8009406:	e027      	b.n	8009458 <HAL_UARTEx_DisableFifoMode+0x66>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2224      	movs	r2, #36	; 0x24
 8009414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0201 	bic.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009436:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009478:	2302      	movs	r3, #2
 800947a:	e02d      	b.n	80094d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2224      	movs	r2, #36	; 0x24
 8009488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 0201 	bic.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f84f 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e02d      	b.n	8009554 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2224      	movs	r2, #36	; 0x24
 8009504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f811 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800957c:	e031      	b.n	80095e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800957e:	2310      	movs	r3, #16
 8009580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009582:	2310      	movs	r3, #16
 8009584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	0e5b      	lsrs	r3, r3, #25
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	0f5b      	lsrs	r3, r3, #29
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	7b3a      	ldrb	r2, [r7, #12]
 80095aa:	4911      	ldr	r1, [pc, #68]	; (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ac:	5c8a      	ldrb	r2, [r1, r2]
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095b2:	7b3a      	ldrb	r2, [r7, #12]
 80095b4:	490f      	ldr	r1, [pc, #60]	; (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	7b7a      	ldrb	r2, [r7, #13]
 80095c8:	4909      	ldr	r1, [pc, #36]	; (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ca:	5c8a      	ldrb	r2, [r1, r2]
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095d0:	7b7a      	ldrb	r2, [r7, #13]
 80095d2:	4908      	ldr	r1, [pc, #32]	; (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	080110d4 	.word	0x080110d4
 80095f4:	080110dc 	.word	0x080110dc

080095f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80095f8:	b084      	sub	sp, #16
 80095fa:	b480      	push	{r7}
 80095fc:	b085      	sub	sp, #20
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	f107 001c 	add.w	r0, r7, #28
 8009606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800960e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009610:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009612:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009616:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800961a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800961e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	4b07      	ldr	r3, [pc, #28]	; (8009648 <SDMMC_Init+0x50>)
 800962c:	4013      	ands	r3, r2
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	b004      	add	sp, #16
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	ffc02c00 	.word	0xffc02c00

0800964c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800965a:	4618      	mov	r0, r3
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f043 0203 	orr.w	r2, r3, #3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0303 	and.w	r3, r3, #3
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
	...

080096c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80096e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80096ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80096f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	4b06      	ldr	r3, [pc, #24]	; (8009718 <SDMMC_SendCommand+0x50>)
 8009700:	4013      	ands	r3, r2
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	431a      	orrs	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	fffee0c0 	.word	0xfffee0c0

0800971c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	b2db      	uxtb	r3, r3
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3314      	adds	r3, #20
 8009744:	461a      	mov	r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009782:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009788:	431a      	orrs	r2, r3
                       Data->DPSM);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800978e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0

}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80097c2:	2310      	movs	r3, #16
 80097c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097cc:	2300      	movs	r3, #0
 80097ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff ff73 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80097e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e6:	2110      	movs	r1, #16
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fa5f 	bl	8009cac <SDMMC_GetCmdResp1>
 80097ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f0:	69fb      	ldr	r3, [r7, #28]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009808:	2311      	movs	r3, #17
 800980a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800980c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009812:	2300      	movs	r3, #0
 8009814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800981a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800981c:	f107 0308 	add.w	r3, r7, #8
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff ff50 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009828:	f241 3288 	movw	r2, #5000	; 0x1388
 800982c:	2111      	movs	r1, #17
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa3c 	bl	8009cac <SDMMC_GetCmdResp1>
 8009834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009836:	69fb      	ldr	r3, [r7, #28]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800984e:	2312      	movs	r3, #18
 8009850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800985c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009860:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ff2d 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800986e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009872:	2112      	movs	r1, #18
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa19 	bl	8009cac <SDMMC_GetCmdResp1>
 800987a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800987c:	69fb      	ldr	r3, [r7, #28]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b088      	sub	sp, #32
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009894:	2318      	movs	r3, #24
 8009896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800989c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098a8:	f107 0308 	add.w	r3, r7, #8
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff ff0a 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80098b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b8:	2118      	movs	r1, #24
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f9f6 	bl	8009cac <SDMMC_GetCmdResp1>
 80098c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c2:	69fb      	ldr	r3, [r7, #28]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3720      	adds	r7, #32
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80098da:	2319      	movs	r3, #25
 80098dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff fee7 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80098fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fe:	2119      	movs	r1, #25
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9d3 	bl	8009cac <SDMMC_GetCmdResp1>
 8009906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009908:	69fb      	ldr	r3, [r7, #28]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009920:	230c      	movs	r3, #12
 8009922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800992e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009932:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff feb8 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009958:	4a0b      	ldr	r2, [pc, #44]	; (8009988 <SDMMC_CmdStopTransfer+0x74>)
 800995a:	210c      	movs	r1, #12
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9a5 	bl	8009cac <SDMMC_GetCmdResp1>
 8009962:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009976:	d101      	bne.n	800997c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009978:	2300      	movs	r3, #0
 800997a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800997c:	69fb      	ldr	r3, [r7, #28]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	05f5e100 	.word	0x05f5e100

0800998c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800999a:	2307      	movs	r3, #7
 800999c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800999e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099ae:	f107 0308 	add.w	r3, r7, #8
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff fe87 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80099ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80099be:	2107      	movs	r1, #7
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f973 	bl	8009cac <SDMMC_GetCmdResp1>
 80099c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099c8:	69fb      	ldr	r3, [r7, #28]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b088      	sub	sp, #32
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80099e2:	2300      	movs	r3, #0
 80099e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099e6:	2300      	movs	r3, #0
 80099e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fe66 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fb97 	bl	800a130 <SDMMC_GetCmdError>
 8009a02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a04:	69fb      	ldr	r3, [r7, #28]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b088      	sub	sp, #32
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a26:	2300      	movs	r3, #0
 8009a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a30:	f107 0308 	add.w	r3, r7, #8
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff fe46 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fb29 	bl	800a094 <SDMMC_GetCmdResp7>
 8009a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a44:	69fb      	ldr	r3, [r7, #28]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b088      	sub	sp, #32
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a5c:	2337      	movs	r3, #55	; 0x37
 8009a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a70:	f107 0308 	add.w	r3, r7, #8
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff fe26 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a80:	2137      	movs	r1, #55	; 0x37
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f912 	bl	8009cac <SDMMC_GetCmdResp1>
 8009a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009aa2:	2329      	movs	r3, #41	; 0x29
 8009aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fe03 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa2e 	bl	8009f24 <SDMMC_GetCmdResp3>
 8009ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aca:	69fb      	ldr	r3, [r7, #28]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009ae2:	2306      	movs	r3, #6
 8009ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fde3 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b06:	2106      	movs	r1, #6
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f8cf 	bl	8009cac <SDMMC_GetCmdResp1>
 8009b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b10:	69fb      	ldr	r3, [r7, #28]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b088      	sub	sp, #32
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b26:	2333      	movs	r3, #51	; 0x33
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff fdc1 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4a:	2133      	movs	r1, #51	; 0x33
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f8ad 	bl	8009cac <SDMMC_GetCmdResp1>
 8009b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b54:	69fb      	ldr	r3, [r7, #28]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3720      	adds	r7, #32
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b088      	sub	sp, #32
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b7e:	f107 0308 	add.w	r3, r7, #8
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fd9f 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f980 	bl	8009e90 <SDMMC_GetCmdResp2>
 8009b90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b92:	69fb      	ldr	r3, [r7, #28]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009baa:	2309      	movs	r3, #9
 8009bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fd7f 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f960 	bl	8009e90 <SDMMC_GetCmdResp2>
 8009bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd2:	69fb      	ldr	r3, [r7, #28]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bea:	2303      	movs	r3, #3
 8009bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fd5f 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	2103      	movs	r1, #3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f9c8 	bl	8009fa4 <SDMMC_GetCmdResp6>
 8009c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c2e:	230d      	movs	r3, #13
 8009c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c42:	f107 0308 	add.w	r3, r7, #8
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff fd3d 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c52:	210d      	movs	r1, #13
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f829 	bl	8009cac <SDMMC_GetCmdResp1>
 8009c5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3720      	adds	r7, #32
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b088      	sub	sp, #32
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009c72:	230d      	movs	r3, #13
 8009c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c86:	f107 0308 	add.w	r3, r7, #8
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fd1b 	bl	80096c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c96:	210d      	movs	r1, #13
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f807 	bl	8009cac <SDMMC_GetCmdResp1>
 8009c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca0:	69fb      	ldr	r3, [r7, #28]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3720      	adds	r7, #32
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
	...

08009cac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cba:	4b70      	ldr	r3, [pc, #448]	; (8009e7c <SDMMC_GetCmdResp1+0x1d0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a70      	ldr	r2, [pc, #448]	; (8009e80 <SDMMC_GetCmdResp1+0x1d4>)
 8009cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc4:	0a5a      	lsrs	r2, r3, #9
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	61fa      	str	r2, [r7, #28]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cdc:	e0c9      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	4b67      	ldr	r3, [pc, #412]	; (8009e84 <SDMMC_GetCmdResp1+0x1d8>)
 8009ce8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0ef      	beq.n	8009cce <SDMMC_GetCmdResp1+0x22>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1ea      	bne.n	8009cce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2204      	movs	r2, #4
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	e0b1      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e0a6      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4a58      	ldr	r2, [pc, #352]	; (8009e88 <SDMMC_GetCmdResp1+0x1dc>)
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f7ff fcf6 	bl	800971c <SDMMC_GetCommandResponse>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d001      	beq.n	8009d3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e099      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009d3e:	2100      	movs	r1, #0
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fcf8 	bl	8009736 <SDMMC_GetResponse>
 8009d46:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	4b50      	ldr	r3, [pc, #320]	; (8009e8c <SDMMC_GetCmdResp1+0x1e0>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e08d      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da02      	bge.n	8009d62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d60:	e087      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d6c:	2340      	movs	r3, #64	; 0x40
 8009d6e:	e080      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d7a:	2380      	movs	r3, #128	; 0x80
 8009d7c:	e079      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d8c:	e071      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d9c:	e069      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dac:	e061      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dbc:	e059      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dcc:	e051      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ddc:	e049      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009dec:	e041      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dfc:	e039      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e0c:	e031      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e1c:	e029      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e2c:	e021      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e3c:	e019      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e4c:	e011      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e5c:	e009      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f003 0308 	and.w	r3, r3, #8
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e6c:	e001      	b.n	8009e72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	24000000 	.word	0x24000000
 8009e80:	10624dd3 	.word	0x10624dd3
 8009e84:	00200045 	.word	0x00200045
 8009e88:	002000c5 	.word	0x002000c5
 8009e8c:	fdffe008 	.word	0xfdffe008

08009e90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e98:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <SDMMC_GetCmdResp2+0x88>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a1f      	ldr	r2, [pc, #124]	; (8009f1c <SDMMC_GetCmdResp2+0x8c>)
 8009e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea2:	0a5b      	lsrs	r3, r3, #9
 8009ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea8:	fb02 f303 	mul.w	r3, r2, r3
 8009eac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1e5a      	subs	r2, r3, #1
 8009eb2:	60fa      	str	r2, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ebc:	e026      	b.n	8009f0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0ef      	beq.n	8009eae <SDMMC_GetCmdResp2+0x1e>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1ea      	bne.n	8009eae <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eea:	2304      	movs	r3, #4
 8009eec:	e00e      	b.n	8009f0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e003      	b.n	8009f0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a06      	ldr	r2, [pc, #24]	; (8009f20 <SDMMC_GetCmdResp2+0x90>)
 8009f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	24000000 	.word	0x24000000
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	002000c5 	.word	0x002000c5

08009f24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f2c:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <SDMMC_GetCmdResp3+0x74>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1a      	ldr	r2, [pc, #104]	; (8009f9c <SDMMC_GetCmdResp3+0x78>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	0a5b      	lsrs	r3, r3, #9
 8009f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f3c:	fb02 f303 	mul.w	r3, r2, r3
 8009f40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	60fa      	str	r2, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d102      	bne.n	8009f52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f50:	e01b      	b.n	8009f8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f56:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0ef      	beq.n	8009f42 <SDMMC_GetCmdResp3+0x1e>
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1ea      	bne.n	8009f42 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d004      	beq.n	8009f82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f7e:	2304      	movs	r3, #4
 8009f80:	e003      	b.n	8009f8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a06      	ldr	r2, [pc, #24]	; (8009fa0 <SDMMC_GetCmdResp3+0x7c>)
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	24000000 	.word	0x24000000
 8009f9c:	10624dd3 	.word	0x10624dd3
 8009fa0:	002000c5 	.word	0x002000c5

08009fa4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	460b      	mov	r3, r1
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009fb2:	4b35      	ldr	r3, [pc, #212]	; (800a088 <SDMMC_GetCmdResp6+0xe4>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a35      	ldr	r2, [pc, #212]	; (800a08c <SDMMC_GetCmdResp6+0xe8>)
 8009fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbc:	0a5b      	lsrs	r3, r3, #9
 8009fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc2:	fb02 f303 	mul.w	r3, r2, r3
 8009fc6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	1e5a      	subs	r2, r3, #1
 8009fcc:	61fa      	str	r2, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fd6:	e052      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fdc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0ef      	beq.n	8009fc8 <SDMMC_GetCmdResp6+0x24>
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1ea      	bne.n	8009fc8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d004      	beq.n	800a008 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2204      	movs	r2, #4
 800a002:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a004:	2304      	movs	r3, #4
 800a006:	e03a      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e02f      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff fb7c 	bl	800971c <SDMMC_GetCommandResponse>
 800a024:	4603      	mov	r3, r0
 800a026:	461a      	mov	r2, r3
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d001      	beq.n	800a032 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a02e:	2301      	movs	r3, #1
 800a030:	e025      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4a16      	ldr	r2, [pc, #88]	; (800a090 <SDMMC_GetCmdResp6+0xec>)
 800a036:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a038:	2100      	movs	r1, #0
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff fb7b 	bl	8009736 <SDMMC_GetResponse>
 800a040:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d106      	bne.n	800a05a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	0c1b      	lsrs	r3, r3, #16
 800a050:	b29a      	uxth	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a056:	2300      	movs	r3, #0
 800a058:	e011      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a068:	e009      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a078:	e001      	b.n	800a07e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a07a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3720      	adds	r7, #32
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	24000000 	.word	0x24000000
 800a08c:	10624dd3 	.word	0x10624dd3
 800a090:	002000c5 	.word	0x002000c5

0800a094 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a09c:	4b22      	ldr	r3, [pc, #136]	; (800a128 <SDMMC_GetCmdResp7+0x94>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a22      	ldr	r2, [pc, #136]	; (800a12c <SDMMC_GetCmdResp7+0x98>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	0a5b      	lsrs	r3, r3, #9
 800a0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ac:	fb02 f303 	mul.w	r3, r2, r3
 800a0b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	60fa      	str	r2, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0c0:	e02c      	b.n	800a11c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0ef      	beq.n	800a0b2 <SDMMC_GetCmdResp7+0x1e>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1ea      	bne.n	800a0b2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e0:	f003 0304 	and.w	r3, r3, #4
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2204      	movs	r2, #4
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ee:	2304      	movs	r3, #4
 800a0f0:	e014      	b.n	800a11c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d004      	beq.n	800a108 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a104:	2301      	movs	r3, #1
 800a106:	e009      	b.n	800a11c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2240      	movs	r2, #64	; 0x40
 800a118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a11a:	2300      	movs	r3, #0

}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	24000000 	.word	0x24000000
 800a12c:	10624dd3 	.word	0x10624dd3

0800a130 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a138:	4b11      	ldr	r3, [pc, #68]	; (800a180 <SDMMC_GetCmdError+0x50>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a11      	ldr	r2, [pc, #68]	; (800a184 <SDMMC_GetCmdError+0x54>)
 800a13e:	fba2 2303 	umull	r2, r3, r2, r3
 800a142:	0a5b      	lsrs	r3, r3, #9
 800a144:	f241 3288 	movw	r2, #5000	; 0x1388
 800a148:	fb02 f303 	mul.w	r3, r2, r3
 800a14c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	1e5a      	subs	r2, r3, #1
 800a152:	60fa      	str	r2, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d102      	bne.n	800a15e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a15c:	e009      	b.n	800a172 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0f1      	beq.n	800a14e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a06      	ldr	r2, [pc, #24]	; (800a188 <SDMMC_GetCmdError+0x58>)
 800a16e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	24000000 	.word	0x24000000
 800a184:	10624dd3 	.word	0x10624dd3
 800a188:	002000c5 	.word	0x002000c5

0800a18c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a190:	4904      	ldr	r1, [pc, #16]	; (800a1a4 <MX_FATFS_Init+0x18>)
 800a192:	4805      	ldr	r0, [pc, #20]	; (800a1a8 <MX_FATFS_Init+0x1c>)
 800a194:	f003 fbfa 	bl	800d98c <FATFS_LinkDriver>
 800a198:	4603      	mov	r3, r0
 800a19a:	461a      	mov	r2, r3
 800a19c:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <MX_FATFS_Init+0x20>)
 800a19e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a1a0:	bf00      	nop
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	24003430 	.word	0x24003430
 800a1a8:	080110e4 	.word	0x080110e4
 800a1ac:	2400342c 	.word	0x2400342c

0800a1b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a1b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1ca:	f000 f885 	bl	800a2d8 <BSP_SD_IsDetected>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d001      	beq.n	800a1d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e012      	b.n	800a1fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a1d8:	480b      	ldr	r0, [pc, #44]	; (800a208 <BSP_SD_Init+0x48>)
 800a1da:	f7fc fd3f 	bl	8006c5c <HAL_SD_Init>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a1e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a1ec:	4806      	ldr	r0, [pc, #24]	; (800a208 <BSP_SD_Init+0x48>)
 800a1ee:	f7fd fbef 	bl	80079d0 <HAL_SD_ConfigWideBusOperation>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	24003318 	.word	0x24003318

0800a20c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	68f9      	ldr	r1, [r7, #12]
 800a222:	4806      	ldr	r0, [pc, #24]	; (800a23c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a224:	f7fc fe34 	bl	8006e90 <HAL_SD_ReadBlocks_DMA>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	24003318 	.word	0x24003318

0800a240 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	68f9      	ldr	r1, [r7, #12]
 800a256:	4806      	ldr	r0, [pc, #24]	; (800a270 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a258:	f7fc fec2 	bl	8006fe0 <HAL_SD_WriteBlocks_DMA>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3718      	adds	r7, #24
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	24003318 	.word	0x24003318

0800a274 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a278:	4805      	ldr	r0, [pc, #20]	; (800a290 <BSP_SD_GetCardState+0x1c>)
 800a27a:	f7fd fcbb 	bl	8007bf4 <HAL_SD_GetCardState>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b04      	cmp	r3, #4
 800a282:	bf14      	ite	ne
 800a284:	2301      	movne	r3, #1
 800a286:	2300      	moveq	r3, #0
 800a288:	b2db      	uxtb	r3, r3
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	24003318 	.word	0x24003318

0800a294 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4803      	ldr	r0, [pc, #12]	; (800a2ac <BSP_SD_GetCardInfo+0x18>)
 800a2a0:	f7fd fb6a 	bl	8007978 <HAL_SD_GetCardInfo>
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	24003318 	.word	0x24003318

0800a2b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a2b8:	f000 f9a0 	bl	800a5fc <BSP_SD_WriteCpltCallback>
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a2cc:	f000 f9a2 	bl	800a614 <BSP_SD_ReadCpltCallback>
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a2e2:	f000 f80b 	bl	800a2fc <BSP_PlatformIsDetected>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	b2db      	uxtb	r3, r3
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a302:	2301      	movs	r3, #1
 800a304:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a306:	2101      	movs	r1, #1
 800a308:	4806      	ldr	r0, [pc, #24]	; (800a324 <BSP_PlatformIsDetected+0x28>)
 800a30a:	f7f9 fa7d 	bl	8003808 <HAL_GPIO_ReadPin>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a314:	2300      	movs	r3, #0
 800a316:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a318:	79fb      	ldrb	r3, [r7, #7]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	58020c00 	.word	0x58020c00

0800a328 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a330:	f7f7 fe1e 	bl	8001f70 <HAL_GetTick>
 800a334:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a336:	e006      	b.n	800a346 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a338:	f7ff ff9c 	bl	800a274 <BSP_SD_GetCardState>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a342:	2300      	movs	r3, #0
 800a344:	e009      	b.n	800a35a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a346:	f7f7 fe13 	bl	8001f70 <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d8f0      	bhi.n	800a338 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a36e:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <SD_CheckStatus+0x38>)
 800a370:	2201      	movs	r2, #1
 800a372:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a374:	f7ff ff7e 	bl	800a274 <BSP_SD_GetCardState>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d107      	bne.n	800a38e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a37e:	4b07      	ldr	r3, [pc, #28]	; (800a39c <SD_CheckStatus+0x38>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	f023 0301 	bic.w	r3, r3, #1
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4b04      	ldr	r3, [pc, #16]	; (800a39c <SD_CheckStatus+0x38>)
 800a38c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a38e:	4b03      	ldr	r3, [pc, #12]	; (800a39c <SD_CheckStatus+0x38>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b2db      	uxtb	r3, r3
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	2400000d 	.word	0x2400000d

0800a3a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a3aa:	f7ff ff09 	bl	800a1c0 <BSP_SD_Init>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff ffd4 	bl	800a364 <SD_CheckStatus>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <SD_initialize+0x34>)
 800a3c2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <SD_initialize+0x34>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	b2db      	uxtb	r3, r3
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	2400000d 	.word	0x2400000d

0800a3d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff ffbd 	bl	800a364 <SD_CheckStatus>
 800a3ea:	4603      	mov	r3, r0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a408:	f247 5030 	movw	r0, #30000	; 0x7530
 800a40c:	f7ff ff8c 	bl	800a328 <SD_CheckStatusWithTimeout>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	da01      	bge.n	800a41a <SD_read+0x26>
  {
    return res;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	e03b      	b.n	800a492 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	68b8      	ldr	r0, [r7, #8]
 800a420:	f7ff fef4 	bl	800a20c <BSP_SD_ReadBlocks_DMA>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d132      	bne.n	800a490 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a42a:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <SD_read+0xa8>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a430:	f7f7 fd9e 	bl	8001f70 <HAL_GetTick>
 800a434:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a436:	bf00      	nop
 800a438:	4b18      	ldr	r3, [pc, #96]	; (800a49c <SD_read+0xa8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d108      	bne.n	800a452 <SD_read+0x5e>
 800a440:	f7f7 fd96 	bl	8001f70 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a44e:	4293      	cmp	r3, r2
 800a450:	d9f2      	bls.n	800a438 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a452:	4b12      	ldr	r3, [pc, #72]	; (800a49c <SD_read+0xa8>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d102      	bne.n	800a460 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	75fb      	strb	r3, [r7, #23]
 800a45e:	e017      	b.n	800a490 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a460:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <SD_read+0xa8>)
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a466:	f7f7 fd83 	bl	8001f70 <HAL_GetTick>
 800a46a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a46c:	e007      	b.n	800a47e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a46e:	f7ff ff01 	bl	800a274 <BSP_SD_GetCardState>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <SD_read+0x8a>
          {
            res = RES_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a47c:	e008      	b.n	800a490 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a47e:	f7f7 fd77 	bl	8001f70 <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	f247 522f 	movw	r2, #29999	; 0x752f
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d9ee      	bls.n	800a46e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a490:	7dfb      	ldrb	r3, [r7, #23]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	24003438 	.word	0x24003438

0800a4a0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607a      	str	r2, [r7, #4]
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a4b4:	4b24      	ldr	r3, [pc, #144]	; (800a548 <SD_write+0xa8>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a4ba:	f247 5030 	movw	r0, #30000	; 0x7530
 800a4be:	f7ff ff33 	bl	800a328 <SD_CheckStatusWithTimeout>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da01      	bge.n	800a4cc <SD_write+0x2c>
  {
    return res;
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	e038      	b.n	800a53e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	68b8      	ldr	r0, [r7, #8]
 800a4d2:	f7ff feb5 	bl	800a240 <BSP_SD_WriteBlocks_DMA>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d12f      	bne.n	800a53c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a4dc:	f7f7 fd48 	bl	8001f70 <HAL_GetTick>
 800a4e0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a4e2:	bf00      	nop
 800a4e4:	4b18      	ldr	r3, [pc, #96]	; (800a548 <SD_write+0xa8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d108      	bne.n	800a4fe <SD_write+0x5e>
 800a4ec:	f7f7 fd40 	bl	8001f70 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	f247 522f 	movw	r2, #29999	; 0x752f
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d9f2      	bls.n	800a4e4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a4fe:	4b12      	ldr	r3, [pc, #72]	; (800a548 <SD_write+0xa8>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	75fb      	strb	r3, [r7, #23]
 800a50a:	e017      	b.n	800a53c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <SD_write+0xa8>)
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a512:	f7f7 fd2d 	bl	8001f70 <HAL_GetTick>
 800a516:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a518:	e007      	b.n	800a52a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a51a:	f7ff feab 	bl	800a274 <BSP_SD_GetCardState>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <SD_write+0x8a>
          {
            res = RES_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	75fb      	strb	r3, [r7, #23]
            break;
 800a528:	e008      	b.n	800a53c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a52a:	f7f7 fd21 	bl	8001f70 <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	f247 522f 	movw	r2, #29999	; 0x752f
 800a538:	4293      	cmp	r3, r2
 800a53a:	d9ee      	bls.n	800a51a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	24003434 	.word	0x24003434

0800a54c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08c      	sub	sp, #48	; 0x30
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	603a      	str	r2, [r7, #0]
 800a556:	71fb      	strb	r3, [r7, #7]
 800a558:	460b      	mov	r3, r1
 800a55a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a562:	4b25      	ldr	r3, [pc, #148]	; (800a5f8 <SD_ioctl+0xac>)
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <SD_ioctl+0x28>
 800a570:	2303      	movs	r3, #3
 800a572:	e03c      	b.n	800a5ee <SD_ioctl+0xa2>

  switch (cmd)
 800a574:	79bb      	ldrb	r3, [r7, #6]
 800a576:	2b03      	cmp	r3, #3
 800a578:	d834      	bhi.n	800a5e4 <SD_ioctl+0x98>
 800a57a:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <SD_ioctl+0x34>)
 800a57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a580:	0800a591 	.word	0x0800a591
 800a584:	0800a599 	.word	0x0800a599
 800a588:	0800a5b1 	.word	0x0800a5b1
 800a58c:	0800a5cb 	.word	0x0800a5cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a596:	e028      	b.n	800a5ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a598:	f107 0308 	add.w	r3, r7, #8
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fe79 	bl	800a294 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a5a2:	6a3a      	ldr	r2, [r7, #32]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5ae:	e01c      	b.n	800a5ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5b0:	f107 0308 	add.w	r3, r7, #8
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff fe6d 	bl	800a294 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5c8:	e00f      	b.n	800a5ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff fe60 	bl	800a294 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	0a5a      	lsrs	r2, r3, #9
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5e2:	e002      	b.n	800a5ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3730      	adds	r7, #48	; 0x30
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	2400000d 	.word	0x2400000d

0800a5fc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a600:	4b03      	ldr	r3, [pc, #12]	; (800a610 <BSP_SD_WriteCpltCallback+0x14>)
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
}
 800a606:	bf00      	nop
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	24003434 	.word	0x24003434

0800a614 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a614:	b480      	push	{r7}
 800a616:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a618:	4b03      	ldr	r3, [pc, #12]	; (800a628 <BSP_SD_ReadCpltCallback+0x14>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
}
 800a61e:	bf00      	nop
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	24003438 	.word	0x24003438

0800a62c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a636:	79fb      	ldrb	r3, [r7, #7]
 800a638:	4a08      	ldr	r2, [pc, #32]	; (800a65c <disk_status+0x30>)
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	79fa      	ldrb	r2, [r7, #7]
 800a644:	4905      	ldr	r1, [pc, #20]	; (800a65c <disk_status+0x30>)
 800a646:	440a      	add	r2, r1
 800a648:	7a12      	ldrb	r2, [r2, #8]
 800a64a:	4610      	mov	r0, r2
 800a64c:	4798      	blx	r3
 800a64e:	4603      	mov	r3, r0
 800a650:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	24003664 	.word	0x24003664

0800a660 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	4a0d      	ldr	r2, [pc, #52]	; (800a6a8 <disk_initialize+0x48>)
 800a672:	5cd3      	ldrb	r3, [r2, r3]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d111      	bne.n	800a69c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	4a0b      	ldr	r2, [pc, #44]	; (800a6a8 <disk_initialize+0x48>)
 800a67c:	2101      	movs	r1, #1
 800a67e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <disk_initialize+0x48>)
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	79fa      	ldrb	r2, [r7, #7]
 800a68e:	4906      	ldr	r1, [pc, #24]	; (800a6a8 <disk_initialize+0x48>)
 800a690:	440a      	add	r2, r1
 800a692:	7a12      	ldrb	r2, [r2, #8]
 800a694:	4610      	mov	r0, r2
 800a696:	4798      	blx	r3
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	24003664 	.word	0x24003664

0800a6ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	4a0a      	ldr	r2, [pc, #40]	; (800a6e8 <disk_read+0x3c>)
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	689c      	ldr	r4, [r3, #8]
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	4a07      	ldr	r2, [pc, #28]	; (800a6e8 <disk_read+0x3c>)
 800a6cc:	4413      	add	r3, r2
 800a6ce:	7a18      	ldrb	r0, [r3, #8]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	68b9      	ldr	r1, [r7, #8]
 800a6d6:	47a0      	blx	r4
 800a6d8:	4603      	mov	r3, r0
 800a6da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd90      	pop	{r4, r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	24003664 	.word	0x24003664

0800a6ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	607a      	str	r2, [r7, #4]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
 800a6fe:	4a0a      	ldr	r2, [pc, #40]	; (800a728 <disk_write+0x3c>)
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	68dc      	ldr	r4, [r3, #12]
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4a07      	ldr	r2, [pc, #28]	; (800a728 <disk_write+0x3c>)
 800a70c:	4413      	add	r3, r2
 800a70e:	7a18      	ldrb	r0, [r3, #8]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	47a0      	blx	r4
 800a718:	4603      	mov	r3, r0
 800a71a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd90      	pop	{r4, r7, pc}
 800a726:	bf00      	nop
 800a728:	24003664 	.word	0x24003664

0800a72c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	603a      	str	r2, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
 800a738:	460b      	mov	r3, r1
 800a73a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	4a09      	ldr	r2, [pc, #36]	; (800a764 <disk_ioctl+0x38>)
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	79fa      	ldrb	r2, [r7, #7]
 800a74a:	4906      	ldr	r1, [pc, #24]	; (800a764 <disk_ioctl+0x38>)
 800a74c:	440a      	add	r2, r1
 800a74e:	7a10      	ldrb	r0, [r2, #8]
 800a750:	79b9      	ldrb	r1, [r7, #6]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4798      	blx	r3
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]
  return res;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	24003664 	.word	0x24003664

0800a768 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3301      	adds	r3, #1
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a778:	89fb      	ldrh	r3, [r7, #14]
 800a77a:	021b      	lsls	r3, r3, #8
 800a77c:	b21a      	sxth	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b21b      	sxth	r3, r3
 800a784:	4313      	orrs	r3, r2
 800a786:	b21b      	sxth	r3, r3
 800a788:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a78a:	89fb      	ldrh	r3, [r7, #14]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	021b      	lsls	r3, r3, #8
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	3202      	adds	r2, #2
 800a7b0:	7812      	ldrb	r2, [r2, #0]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	3201      	adds	r2, #1
 800a7be:	7812      	ldrb	r2, [r2, #0]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	7812      	ldrb	r2, [r2, #0]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	887a      	ldrh	r2, [r7, #2]
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	887b      	ldrh	r3, [r7, #2]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	1c5a      	adds	r2, r3, #1
 800a800:	607a      	str	r2, [r7, #4]
 800a802:	887a      	ldrh	r2, [r7, #2]
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	701a      	strb	r2, [r3, #0]
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	0a1b      	lsrs	r3, r3, #8
 800a82e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	0a1b      	lsrs	r3, r3, #8
 800a840:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	b2d2      	uxtb	r2, r2
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	0a1b      	lsrs	r3, r3, #8
 800a852:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	607a      	str	r2, [r7, #4]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	b2d2      	uxtb	r2, r2
 800a85e:	701a      	strb	r2, [r3, #0]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a86c:	b480      	push	{r7}
 800a86e:	b087      	sub	sp, #28
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00d      	beq.n	800a8a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	1c53      	adds	r3, r2, #1
 800a88a:	613b      	str	r3, [r7, #16]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	1c59      	adds	r1, r3, #1
 800a890:	6179      	str	r1, [r7, #20]
 800a892:	7812      	ldrb	r2, [r2, #0]
 800a894:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3b01      	subs	r3, #1
 800a89a:	607b      	str	r3, [r7, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1f1      	bne.n	800a886 <mem_cpy+0x1a>
	}
}
 800a8a2:	bf00      	nop
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a8ae:	b480      	push	{r7}
 800a8b0:	b087      	sub	sp, #28
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	617a      	str	r2, [r7, #20]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	607b      	str	r3, [r7, #4]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1f3      	bne.n	800a8be <mem_set+0x10>
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	371c      	adds	r7, #28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a8e4:	b480      	push	{r7}
 800a8e6:	b089      	sub	sp, #36	; 0x24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	61fb      	str	r3, [r7, #28]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	61fa      	str	r2, [r7, #28]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	4619      	mov	r1, r3
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	61ba      	str	r2, [r7, #24]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	1acb      	subs	r3, r1, r3
 800a910:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3b01      	subs	r3, #1
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <mem_cmp+0x40>
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0eb      	beq.n	800a8fc <mem_cmp+0x18>

	return r;
 800a924:	697b      	ldr	r3, [r7, #20]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3724      	adds	r7, #36	; 0x24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a93c:	e002      	b.n	800a944 <chk_chr+0x12>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3301      	adds	r3, #1
 800a942:	607b      	str	r3, [r7, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <chk_chr+0x26>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	4293      	cmp	r3, r2
 800a956:	d1f2      	bne.n	800a93e <chk_chr+0xc>
	return *str;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	781b      	ldrb	r3, [r3, #0]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a972:	2300      	movs	r3, #0
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	e029      	b.n	800a9d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a97c:	4a27      	ldr	r2, [pc, #156]	; (800aa1c <chk_lock+0xb4>)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	4413      	add	r3, r2
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d01d      	beq.n	800a9c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a98a:	4a24      	ldr	r2, [pc, #144]	; (800aa1c <chk_lock+0xb4>)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	4413      	add	r3, r2
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d116      	bne.n	800a9ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a99c:	4a1f      	ldr	r2, [pc, #124]	; (800aa1c <chk_lock+0xb4>)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d10c      	bne.n	800a9ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a9b0:	4a1a      	ldr	r2, [pc, #104]	; (800aa1c <chk_lock+0xb4>)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	011b      	lsls	r3, r3, #4
 800a9b6:	4413      	add	r3, r2
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d102      	bne.n	800a9ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a9c4:	e007      	b.n	800a9d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d9d2      	bls.n	800a97c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d109      	bne.n	800a9f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <chk_lock+0x80>
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d101      	bne.n	800a9ec <chk_lock+0x84>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e010      	b.n	800aa0e <chk_lock+0xa6>
 800a9ec:	2312      	movs	r3, #18
 800a9ee:	e00e      	b.n	800aa0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <chk_lock+0xa0>
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <chk_lock+0xb4>)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	4413      	add	r3, r2
 800a9fe:	330c      	adds	r3, #12
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa06:	d101      	bne.n	800aa0c <chk_lock+0xa4>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	e000      	b.n	800aa0e <chk_lock+0xa6>
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	24003444 	.word	0x24003444

0800aa20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa26:	2300      	movs	r3, #0
 800aa28:	607b      	str	r3, [r7, #4]
 800aa2a:	e002      	b.n	800aa32 <enq_lock+0x12>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	607b      	str	r3, [r7, #4]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d806      	bhi.n	800aa46 <enq_lock+0x26>
 800aa38:	4a09      	ldr	r2, [pc, #36]	; (800aa60 <enq_lock+0x40>)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	4413      	add	r3, r2
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1f2      	bne.n	800aa2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	24003444 	.word	0x24003444

0800aa64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	e01f      	b.n	800aab4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aa74:	4a41      	ldr	r2, [pc, #260]	; (800ab7c <inc_lock+0x118>)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	011b      	lsls	r3, r3, #4
 800aa7a:	4413      	add	r3, r2
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d113      	bne.n	800aaae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aa86:	4a3d      	ldr	r2, [pc, #244]	; (800ab7c <inc_lock+0x118>)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3304      	adds	r3, #4
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d109      	bne.n	800aaae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aa9a:	4a38      	ldr	r2, [pc, #224]	; (800ab7c <inc_lock+0x118>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	011b      	lsls	r3, r3, #4
 800aaa0:	4413      	add	r3, r2
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d006      	beq.n	800aabc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d9dc      	bls.n	800aa74 <inc_lock+0x10>
 800aaba:	e000      	b.n	800aabe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aabc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d132      	bne.n	800ab2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	e002      	b.n	800aad0 <inc_lock+0x6c>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3301      	adds	r3, #1
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d806      	bhi.n	800aae4 <inc_lock+0x80>
 800aad6:	4a29      	ldr	r2, [pc, #164]	; (800ab7c <inc_lock+0x118>)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	011b      	lsls	r3, r3, #4
 800aadc:	4413      	add	r3, r2
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1f2      	bne.n	800aaca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d101      	bne.n	800aaee <inc_lock+0x8a>
 800aaea:	2300      	movs	r3, #0
 800aaec:	e040      	b.n	800ab70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4922      	ldr	r1, [pc, #136]	; (800ab7c <inc_lock+0x118>)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	440b      	add	r3, r1
 800aafa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	491e      	ldr	r1, [pc, #120]	; (800ab7c <inc_lock+0x118>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	440b      	add	r3, r1
 800ab08:	3304      	adds	r3, #4
 800ab0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	695a      	ldr	r2, [r3, #20]
 800ab10:	491a      	ldr	r1, [pc, #104]	; (800ab7c <inc_lock+0x118>)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	440b      	add	r3, r1
 800ab18:	3308      	adds	r3, #8
 800ab1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ab1c:	4a17      	ldr	r2, [pc, #92]	; (800ab7c <inc_lock+0x118>)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	4413      	add	r3, r2
 800ab24:	330c      	adds	r3, #12
 800ab26:	2200      	movs	r2, #0
 800ab28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d009      	beq.n	800ab44 <inc_lock+0xe0>
 800ab30:	4a12      	ldr	r2, [pc, #72]	; (800ab7c <inc_lock+0x118>)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	4413      	add	r3, r2
 800ab38:	330c      	adds	r3, #12
 800ab3a:	881b      	ldrh	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <inc_lock+0xe0>
 800ab40:	2300      	movs	r3, #0
 800ab42:	e015      	b.n	800ab70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d108      	bne.n	800ab5c <inc_lock+0xf8>
 800ab4a:	4a0c      	ldr	r2, [pc, #48]	; (800ab7c <inc_lock+0x118>)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	4413      	add	r3, r2
 800ab52:	330c      	adds	r3, #12
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	3301      	adds	r3, #1
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	e001      	b.n	800ab60 <inc_lock+0xfc>
 800ab5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab60:	4906      	ldr	r1, [pc, #24]	; (800ab7c <inc_lock+0x118>)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	011b      	lsls	r3, r3, #4
 800ab66:	440b      	add	r3, r1
 800ab68:	330c      	adds	r3, #12
 800ab6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3301      	adds	r3, #1
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	24003444 	.word	0x24003444

0800ab80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d825      	bhi.n	800abe0 <dec_lock+0x60>
		n = Files[i].ctr;
 800ab94:	4a17      	ldr	r2, [pc, #92]	; (800abf4 <dec_lock+0x74>)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	4413      	add	r3, r2
 800ab9c:	330c      	adds	r3, #12
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aba2:	89fb      	ldrh	r3, [r7, #14]
 800aba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba8:	d101      	bne.n	800abae <dec_lock+0x2e>
 800abaa:	2300      	movs	r3, #0
 800abac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800abae:	89fb      	ldrh	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <dec_lock+0x3a>
 800abb4:	89fb      	ldrh	r3, [r7, #14]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800abba:	4a0e      	ldr	r2, [pc, #56]	; (800abf4 <dec_lock+0x74>)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	4413      	add	r3, r2
 800abc2:	330c      	adds	r3, #12
 800abc4:	89fa      	ldrh	r2, [r7, #14]
 800abc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800abc8:	89fb      	ldrh	r3, [r7, #14]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d105      	bne.n	800abda <dec_lock+0x5a>
 800abce:	4a09      	ldr	r2, [pc, #36]	; (800abf4 <dec_lock+0x74>)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	4413      	add	r3, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	737b      	strb	r3, [r7, #13]
 800abde:	e001      	b.n	800abe4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800abe0:	2302      	movs	r3, #2
 800abe2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800abe4:	7b7b      	ldrb	r3, [r7, #13]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	24003444 	.word	0x24003444

0800abf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e010      	b.n	800ac28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ac06:	4a0d      	ldr	r2, [pc, #52]	; (800ac3c <clear_lock+0x44>)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d105      	bne.n	800ac22 <clear_lock+0x2a>
 800ac16:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <clear_lock+0x44>)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	4413      	add	r3, r2
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3301      	adds	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d9eb      	bls.n	800ac06 <clear_lock+0xe>
	}
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	24003444 	.word	0x24003444

0800ac40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	78db      	ldrb	r3, [r3, #3]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d034      	beq.n	800acbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	7858      	ldrb	r0, [r3, #1]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac64:	2301      	movs	r3, #1
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	f7ff fd40 	bl	800a6ec <disk_write>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	73fb      	strb	r3, [r7, #15]
 800ac76:	e022      	b.n	800acbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	1ad2      	subs	r2, r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d217      	bcs.n	800acbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	789b      	ldrb	r3, [r3, #2]
 800ac92:	613b      	str	r3, [r7, #16]
 800ac94:	e010      	b.n	800acb8 <sync_window+0x78>
					wsect += fs->fsize;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7858      	ldrb	r0, [r3, #1]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800acaa:	2301      	movs	r3, #1
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	f7ff fd1d 	bl	800a6ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	613b      	str	r3, [r7, #16]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d8eb      	bhi.n	800ac96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d01b      	beq.n	800ad18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff ffad 	bl	800ac40 <sync_window>
 800ace6:	4603      	mov	r3, r0
 800ace8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d113      	bne.n	800ad18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7858      	ldrb	r0, [r3, #1]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800acfa:	2301      	movs	r3, #1
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	f7ff fcd5 	bl	800a6ac <disk_read>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d004      	beq.n	800ad12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ad08:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff ff87 	bl	800ac40 <sync_window>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d159      	bne.n	800adf0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d149      	bne.n	800add8 <sync_fs+0xb4>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d145      	bne.n	800add8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	899b      	ldrh	r3, [r3, #12]
 800ad56:	461a      	mov	r2, r3
 800ad58:	2100      	movs	r1, #0
 800ad5a:	f7ff fda8 	bl	800a8ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3338      	adds	r3, #56	; 0x38
 800ad62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff fd37 	bl	800a7de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3338      	adds	r3, #56	; 0x38
 800ad74:	4921      	ldr	r1, [pc, #132]	; (800adfc <sync_fs+0xd8>)
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7ff fd4c 	bl	800a814 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3338      	adds	r3, #56	; 0x38
 800ad80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ad84:	491e      	ldr	r1, [pc, #120]	; (800ae00 <sync_fs+0xdc>)
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff fd44 	bl	800a814 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3338      	adds	r3, #56	; 0x38
 800ad90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7ff fd3a 	bl	800a814 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3338      	adds	r3, #56	; 0x38
 800ada4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	4619      	mov	r1, r3
 800adae:	4610      	mov	r0, r2
 800adb0:	f7ff fd30 	bl	800a814 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7858      	ldrb	r0, [r3, #1]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adcc:	2301      	movs	r3, #1
 800adce:	f7ff fc8d 	bl	800a6ec <disk_write>
			fs->fsi_flag = 0;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	2200      	movs	r2, #0
 800adde:	2100      	movs	r1, #0
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7ff fca3 	bl	800a72c <disk_ioctl>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <sync_fs+0xcc>
 800adec:	2301      	movs	r3, #1
 800adee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	41615252 	.word	0x41615252
 800ae00:	61417272 	.word	0x61417272

0800ae04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	3b02      	subs	r3, #2
 800ae12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	3b02      	subs	r3, #2
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d301      	bcc.n	800ae24 <clust2sect+0x20>
 800ae20:	2300      	movs	r3, #0
 800ae22:	e008      	b.n	800ae36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	895b      	ldrh	r3, [r3, #10]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	fb03 f202 	mul.w	r2, r3, r2
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae34:	4413      	add	r3, r2
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b086      	sub	sp, #24
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d904      	bls.n	800ae62 <get_fat+0x20>
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d302      	bcc.n	800ae68 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ae62:	2301      	movs	r3, #1
 800ae64:	617b      	str	r3, [r7, #20]
 800ae66:	e0bb      	b.n	800afe0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ae68:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	f000 8083 	beq.w	800af7e <get_fat+0x13c>
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	f300 80a7 	bgt.w	800afcc <get_fat+0x18a>
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d002      	beq.n	800ae88 <get_fat+0x46>
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d056      	beq.n	800af34 <get_fat+0xf2>
 800ae86:	e0a1      	b.n	800afcc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	899b      	ldrh	r3, [r3, #12]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aea6:	4413      	add	r3, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6938      	ldr	r0, [r7, #16]
 800aeac:	f7ff ff0c 	bl	800acc8 <move_window>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f040 808d 	bne.w	800afd2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	60fa      	str	r2, [r7, #12]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	8992      	ldrh	r2, [r2, #12]
 800aec2:	fbb3 f1f2 	udiv	r1, r3, r2
 800aec6:	fb01 f202 	mul.w	r2, r1, r2
 800aeca:	1a9b      	subs	r3, r3, r2
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	4413      	add	r3, r2
 800aed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aed4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	899b      	ldrh	r3, [r3, #12]
 800aede:	4619      	mov	r1, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aee6:	4413      	add	r3, r2
 800aee8:	4619      	mov	r1, r3
 800aeea:	6938      	ldr	r0, [r7, #16]
 800aeec:	f7ff feec 	bl	800acc8 <move_window>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d16f      	bne.n	800afd6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	899b      	ldrh	r3, [r3, #12]
 800aefa:	461a      	mov	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	fbb3 f1f2 	udiv	r1, r3, r2
 800af02:	fb01 f202 	mul.w	r2, r1, r2
 800af06:	1a9b      	subs	r3, r3, r2
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	4413      	add	r3, r2
 800af0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af10:	021b      	lsls	r3, r3, #8
 800af12:	461a      	mov	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4313      	orrs	r3, r2
 800af18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <get_fat+0xe8>
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	091b      	lsrs	r3, r3, #4
 800af28:	e002      	b.n	800af30 <get_fat+0xee>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af30:	617b      	str	r3, [r7, #20]
			break;
 800af32:	e055      	b.n	800afe0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	899b      	ldrh	r3, [r3, #12]
 800af3c:	085b      	lsrs	r3, r3, #1
 800af3e:	b29b      	uxth	r3, r3
 800af40:	4619      	mov	r1, r3
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	fbb3 f3f1 	udiv	r3, r3, r1
 800af48:	4413      	add	r3, r2
 800af4a:	4619      	mov	r1, r3
 800af4c:	6938      	ldr	r0, [r7, #16]
 800af4e:	f7ff febb 	bl	800acc8 <move_window>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d140      	bne.n	800afda <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	8992      	ldrh	r2, [r2, #12]
 800af66:	fbb3 f0f2 	udiv	r0, r3, r2
 800af6a:	fb00 f202 	mul.w	r2, r0, r2
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	440b      	add	r3, r1
 800af72:	4618      	mov	r0, r3
 800af74:	f7ff fbf8 	bl	800a768 <ld_word>
 800af78:	4603      	mov	r3, r0
 800af7a:	617b      	str	r3, [r7, #20]
			break;
 800af7c:	e030      	b.n	800afe0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	899b      	ldrh	r3, [r3, #12]
 800af86:	089b      	lsrs	r3, r3, #2
 800af88:	b29b      	uxth	r3, r3
 800af8a:	4619      	mov	r1, r3
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800af92:	4413      	add	r3, r2
 800af94:	4619      	mov	r1, r3
 800af96:	6938      	ldr	r0, [r7, #16]
 800af98:	f7ff fe96 	bl	800acc8 <move_window>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d11d      	bne.n	800afde <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	8992      	ldrh	r2, [r2, #12]
 800afb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800afb4:	fb00 f202 	mul.w	r2, r0, r2
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	440b      	add	r3, r1
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fbeb 	bl	800a798 <ld_dword>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800afc8:	617b      	str	r3, [r7, #20]
			break;
 800afca:	e009      	b.n	800afe0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800afcc:	2301      	movs	r3, #1
 800afce:	617b      	str	r3, [r7, #20]
 800afd0:	e006      	b.n	800afe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afd2:	bf00      	nop
 800afd4:	e004      	b.n	800afe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afd6:	bf00      	nop
 800afd8:	e002      	b.n	800afe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800afda:	bf00      	nop
 800afdc:	e000      	b.n	800afe0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800afde:	bf00      	nop
		}
	}

	return val;
 800afe0:	697b      	ldr	r3, [r7, #20]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800afea:	b590      	push	{r4, r7, lr}
 800afec:	b089      	sub	sp, #36	; 0x24
 800afee:	af00      	add	r7, sp, #0
 800aff0:	60f8      	str	r0, [r7, #12]
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aff6:	2302      	movs	r3, #2
 800aff8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2b01      	cmp	r3, #1
 800affe:	f240 8102 	bls.w	800b206 <put_fat+0x21c>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	429a      	cmp	r2, r3
 800b00a:	f080 80fc 	bcs.w	800b206 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b03      	cmp	r3, #3
 800b014:	f000 80b6 	beq.w	800b184 <put_fat+0x19a>
 800b018:	2b03      	cmp	r3, #3
 800b01a:	f300 80fd 	bgt.w	800b218 <put_fat+0x22e>
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d003      	beq.n	800b02a <put_fat+0x40>
 800b022:	2b02      	cmp	r3, #2
 800b024:	f000 8083 	beq.w	800b12e <put_fat+0x144>
 800b028:	e0f6      	b.n	800b218 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	085b      	lsrs	r3, r3, #1
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	4413      	add	r3, r2
 800b036:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	899b      	ldrh	r3, [r3, #12]
 800b040:	4619      	mov	r1, r3
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	fbb3 f3f1 	udiv	r3, r3, r1
 800b048:	4413      	add	r3, r2
 800b04a:	4619      	mov	r1, r3
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f7ff fe3b 	bl	800acc8 <move_window>
 800b052:	4603      	mov	r3, r0
 800b054:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b056:	7ffb      	ldrb	r3, [r7, #31]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 80d6 	bne.w	800b20a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	1c5a      	adds	r2, r3, #1
 800b068:	61ba      	str	r2, [r7, #24]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	8992      	ldrh	r2, [r2, #12]
 800b06e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b072:	fb00 f202 	mul.w	r2, r0, r2
 800b076:	1a9b      	subs	r3, r3, r2
 800b078:	440b      	add	r3, r1
 800b07a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00d      	beq.n	800b0a2 <put_fat+0xb8>
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	b25b      	sxtb	r3, r3
 800b08c:	f003 030f 	and.w	r3, r3, #15
 800b090:	b25a      	sxtb	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	b2db      	uxtb	r3, r3
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	b25b      	sxtb	r3, r3
 800b09a:	4313      	orrs	r3, r2
 800b09c:	b25b      	sxtb	r3, r3
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	e001      	b.n	800b0a6 <put_fat+0xbc>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	899b      	ldrh	r3, [r3, #12]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0c0:	4413      	add	r3, r2
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff fdff 	bl	800acc8 <move_window>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0ce:	7ffb      	ldrb	r3, [r7, #31]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f040 809c 	bne.w	800b20e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	899b      	ldrh	r3, [r3, #12]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0e8:	fb00 f202 	mul.w	r2, r0, r2
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <put_fat+0x11a>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	091b      	lsrs	r3, r3, #4
 800b100:	b2db      	uxtb	r3, r3
 800b102:	e00e      	b.n	800b122 <put_fat+0x138>
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b25b      	sxtb	r3, r3
 800b10a:	f023 030f 	bic.w	r3, r3, #15
 800b10e:	b25a      	sxtb	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	0a1b      	lsrs	r3, r3, #8
 800b114:	b25b      	sxtb	r3, r3
 800b116:	f003 030f 	and.w	r3, r3, #15
 800b11a:	b25b      	sxtb	r3, r3
 800b11c:	4313      	orrs	r3, r2
 800b11e:	b25b      	sxtb	r3, r3
 800b120:	b2db      	uxtb	r3, r3
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2201      	movs	r2, #1
 800b12a:	70da      	strb	r2, [r3, #3]
			break;
 800b12c:	e074      	b.n	800b218 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	899b      	ldrh	r3, [r3, #12]
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	b29b      	uxth	r3, r3
 800b13a:	4619      	mov	r1, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b142:	4413      	add	r3, r2
 800b144:	4619      	mov	r1, r3
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff fdbe 	bl	800acc8 <move_window>
 800b14c:	4603      	mov	r3, r0
 800b14e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b150:	7ffb      	ldrb	r3, [r7, #31]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d15d      	bne.n	800b212 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	8992      	ldrh	r2, [r2, #12]
 800b164:	fbb3 f0f2 	udiv	r0, r3, r2
 800b168:	fb00 f202 	mul.w	r2, r0, r2
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	440b      	add	r3, r1
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	b292      	uxth	r2, r2
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fb31 	bl	800a7de <st_word>
			fs->wflag = 1;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2201      	movs	r2, #1
 800b180:	70da      	strb	r2, [r3, #3]
			break;
 800b182:	e049      	b.n	800b218 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	899b      	ldrh	r3, [r3, #12]
 800b18c:	089b      	lsrs	r3, r3, #2
 800b18e:	b29b      	uxth	r3, r3
 800b190:	4619      	mov	r1, r3
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	fbb3 f3f1 	udiv	r3, r3, r1
 800b198:	4413      	add	r3, r2
 800b19a:	4619      	mov	r1, r3
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f7ff fd93 	bl	800acc8 <move_window>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1a6:	7ffb      	ldrb	r3, [r7, #31]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d134      	bne.n	800b216 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	8992      	ldrh	r2, [r2, #12]
 800b1c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1c4:	fb00 f202 	mul.w	r2, r0, r2
 800b1c8:	1a9b      	subs	r3, r3, r2
 800b1ca:	440b      	add	r3, r1
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fae3 	bl	800a798 <ld_dword>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b1d8:	4323      	orrs	r3, r4
 800b1da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	8992      	ldrh	r2, [r2, #12]
 800b1ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1ee:	fb00 f202 	mul.w	r2, r0, r2
 800b1f2:	1a9b      	subs	r3, r3, r2
 800b1f4:	440b      	add	r3, r1
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7ff fb0b 	bl	800a814 <st_dword>
			fs->wflag = 1;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2201      	movs	r2, #1
 800b202:	70da      	strb	r2, [r3, #3]
			break;
 800b204:	e008      	b.n	800b218 <put_fat+0x22e>
		}
	}
 800b206:	bf00      	nop
 800b208:	e006      	b.n	800b218 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b20a:	bf00      	nop
 800b20c:	e004      	b.n	800b218 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b20e:	bf00      	nop
 800b210:	e002      	b.n	800b218 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b212:	bf00      	nop
 800b214:	e000      	b.n	800b218 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b216:	bf00      	nop
	return res;
 800b218:	7ffb      	ldrb	r3, [r7, #31]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3724      	adds	r7, #36	; 0x24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}

0800b222 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b088      	sub	sp, #32
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d904      	bls.n	800b248 <remove_chain+0x26>
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	429a      	cmp	r2, r3
 800b246:	d301      	bcc.n	800b24c <remove_chain+0x2a>
 800b248:	2302      	movs	r3, #2
 800b24a:	e04b      	b.n	800b2e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00c      	beq.n	800b26c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	69b8      	ldr	r0, [r7, #24]
 800b25a:	f7ff fec6 	bl	800afea <put_fat>
 800b25e:	4603      	mov	r3, r0
 800b260:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b262:	7ffb      	ldrb	r3, [r7, #31]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <remove_chain+0x4a>
 800b268:	7ffb      	ldrb	r3, [r7, #31]
 800b26a:	e03b      	b.n	800b2e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fde7 	bl	800ae42 <get_fat>
 800b274:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d031      	beq.n	800b2e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d101      	bne.n	800b286 <remove_chain+0x64>
 800b282:	2302      	movs	r3, #2
 800b284:	e02e      	b.n	800b2e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28c:	d101      	bne.n	800b292 <remove_chain+0x70>
 800b28e:	2301      	movs	r3, #1
 800b290:	e028      	b.n	800b2e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b292:	2200      	movs	r2, #0
 800b294:	68b9      	ldr	r1, [r7, #8]
 800b296:	69b8      	ldr	r0, [r7, #24]
 800b298:	f7ff fea7 	bl	800afea <put_fat>
 800b29c:	4603      	mov	r3, r0
 800b29e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b2a0:	7ffb      	ldrb	r3, [r7, #31]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <remove_chain+0x88>
 800b2a6:	7ffb      	ldrb	r3, [r7, #31]
 800b2a8:	e01c      	b.n	800b2e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	3b02      	subs	r3, #2
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d20b      	bcs.n	800b2d0 <remove_chain+0xae>
			fs->free_clst++;
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	791b      	ldrb	r3, [r3, #4]
 800b2c6:	f043 0301 	orr.w	r3, r3, #1
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d3c6      	bcc.n	800b26c <remove_chain+0x4a>
 800b2de:	e000      	b.n	800b2e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b2e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3720      	adds	r7, #32
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10d      	bne.n	800b31e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <create_chain+0x2c>
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	429a      	cmp	r2, r3
 800b316:	d31b      	bcc.n	800b350 <create_chain+0x64>
 800b318:	2301      	movs	r3, #1
 800b31a:	61bb      	str	r3, [r7, #24]
 800b31c:	e018      	b.n	800b350 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff fd8e 	bl	800ae42 <get_fat>
 800b326:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d801      	bhi.n	800b332 <create_chain+0x46>
 800b32e:	2301      	movs	r3, #1
 800b330:	e070      	b.n	800b414 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b338:	d101      	bne.n	800b33e <create_chain+0x52>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	e06a      	b.n	800b414 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	429a      	cmp	r2, r3
 800b346:	d201      	bcs.n	800b34c <create_chain+0x60>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	e063      	b.n	800b414 <create_chain+0x128>
		scl = clst;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	3301      	adds	r3, #1
 800b358:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	69fa      	ldr	r2, [r7, #28]
 800b360:	429a      	cmp	r2, r3
 800b362:	d307      	bcc.n	800b374 <create_chain+0x88>
				ncl = 2;
 800b364:	2302      	movs	r3, #2
 800b366:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d901      	bls.n	800b374 <create_chain+0x88>
 800b370:	2300      	movs	r3, #0
 800b372:	e04f      	b.n	800b414 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b374:	69f9      	ldr	r1, [r7, #28]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fd63 	bl	800ae42 <get_fat>
 800b37c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00e      	beq.n	800b3a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d003      	beq.n	800b392 <create_chain+0xa6>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b390:	d101      	bne.n	800b396 <create_chain+0xaa>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	e03e      	b.n	800b414 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d1da      	bne.n	800b354 <create_chain+0x68>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e038      	b.n	800b414 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b3a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a8:	69f9      	ldr	r1, [r7, #28]
 800b3aa:	6938      	ldr	r0, [r7, #16]
 800b3ac:	f7ff fe1d 	bl	800afea <put_fat>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <create_chain+0xe2>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d006      	beq.n	800b3ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b3c0:	69fa      	ldr	r2, [r7, #28]
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6938      	ldr	r0, [r7, #16]
 800b3c6:	f7ff fe10 	bl	800afea <put_fat>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d116      	bne.n	800b402 <create_chain+0x116>
		fs->last_clst = ncl;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	699a      	ldr	r2, [r3, #24]
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	3b02      	subs	r3, #2
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d804      	bhi.n	800b3f2 <create_chain+0x106>
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	1e5a      	subs	r2, r3, #1
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	791b      	ldrb	r3, [r3, #4]
 800b3f6:	f043 0301 	orr.w	r3, r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	711a      	strb	r2, [r3, #4]
 800b400:	e007      	b.n	800b412 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d102      	bne.n	800b40e <create_chain+0x122>
 800b408:	f04f 33ff 	mov.w	r3, #4294967295
 800b40c:	e000      	b.n	800b410 <create_chain+0x124>
 800b40e:	2301      	movs	r3, #1
 800b410:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b412:	69fb      	ldr	r3, [r7, #28]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	3304      	adds	r3, #4
 800b432:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	899b      	ldrh	r3, [r3, #12]
 800b438:	461a      	mov	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	8952      	ldrh	r2, [r2, #10]
 800b444:	fbb3 f3f2 	udiv	r3, r3, r2
 800b448:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	1d1a      	adds	r2, r3, #4
 800b44e:	613a      	str	r2, [r7, #16]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <clmt_clust+0x42>
 800b45a:	2300      	movs	r3, #0
 800b45c:	e010      	b.n	800b480 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	429a      	cmp	r2, r3
 800b464:	d307      	bcc.n	800b476 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	3304      	adds	r3, #4
 800b472:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b474:	e7e9      	b.n	800b44a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b476:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	4413      	add	r3, r2
}
 800b480:	4618      	mov	r0, r3
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4a2:	d204      	bcs.n	800b4ae <dir_sdi+0x22>
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	f003 031f 	and.w	r3, r3, #31
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e071      	b.n	800b596 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <dir_sdi+0x46>
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d902      	bls.n	800b4d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10c      	bne.n	800b4f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	095b      	lsrs	r3, r3, #5
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	8912      	ldrh	r2, [r2, #8]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d301      	bcc.n	800b4e8 <dir_sdi+0x5c>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e056      	b.n	800b596 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	61da      	str	r2, [r3, #28]
 800b4f0:	e02d      	b.n	800b54e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	895b      	ldrh	r3, [r3, #10]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	899b      	ldrh	r3, [r3, #12]
 800b4fc:	fb02 f303 	mul.w	r3, r2, r3
 800b500:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b502:	e019      	b.n	800b538 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6979      	ldr	r1, [r7, #20]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff fc9a 	bl	800ae42 <get_fat>
 800b50e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b516:	d101      	bne.n	800b51c <dir_sdi+0x90>
 800b518:	2301      	movs	r3, #1
 800b51a:	e03c      	b.n	800b596 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d904      	bls.n	800b52c <dir_sdi+0xa0>
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d301      	bcc.n	800b530 <dir_sdi+0xa4>
 800b52c:	2302      	movs	r3, #2
 800b52e:	e032      	b.n	800b596 <dir_sdi+0x10a>
			ofs -= csz;
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d2e1      	bcs.n	800b504 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b540:	6979      	ldr	r1, [r7, #20]
 800b542:	6938      	ldr	r0, [r7, #16]
 800b544:	f7ff fc5e 	bl	800ae04 <clust2sect>
 800b548:	4602      	mov	r2, r0
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	69db      	ldr	r3, [r3, #28]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <dir_sdi+0xd4>
 800b55c:	2302      	movs	r3, #2
 800b55e:	e01a      	b.n	800b596 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	69da      	ldr	r2, [r3, #28]
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	899b      	ldrh	r3, [r3, #12]
 800b568:	4619      	mov	r1, r3
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b570:	441a      	add	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	899b      	ldrh	r3, [r3, #12]
 800b580:	461a      	mov	r2, r3
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	fbb3 f0f2 	udiv	r0, r3, r2
 800b588:	fb00 f202 	mul.w	r2, r0, r2
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	18ca      	adds	r2, r1, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b086      	sub	sp, #24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	3320      	adds	r3, #32
 800b5b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <dir_next+0x28>
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5c4:	d301      	bcc.n	800b5ca <dir_next+0x2c>
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	e0bb      	b.n	800b742 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	899b      	ldrh	r3, [r3, #12]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5d6:	fb01 f202 	mul.w	r2, r1, r2
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 809d 	bne.w	800b71c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10b      	bne.n	800b60c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	095b      	lsrs	r3, r3, #5
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	8912      	ldrh	r2, [r2, #8]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	f0c0 808d 	bcc.w	800b71c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	61da      	str	r2, [r3, #28]
 800b608:	2304      	movs	r3, #4
 800b60a:	e09a      	b.n	800b742 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	899b      	ldrh	r3, [r3, #12]
 800b610:	461a      	mov	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	fbb3 f3f2 	udiv	r3, r3, r2
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	8952      	ldrh	r2, [r2, #10]
 800b61c:	3a01      	subs	r2, #1
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d17b      	bne.n	800b71c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	4619      	mov	r1, r3
 800b62c:	4610      	mov	r0, r2
 800b62e:	f7ff fc08 	bl	800ae42 <get_fat>
 800b632:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d801      	bhi.n	800b63e <dir_next+0xa0>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e081      	b.n	800b742 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b644:	d101      	bne.n	800b64a <dir_next+0xac>
 800b646:	2301      	movs	r3, #1
 800b648:	e07b      	b.n	800b742 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	429a      	cmp	r2, r3
 800b652:	d359      	bcc.n	800b708 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	61da      	str	r2, [r3, #28]
 800b660:	2304      	movs	r3, #4
 800b662:	e06e      	b.n	800b742 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	4619      	mov	r1, r3
 800b66c:	4610      	mov	r0, r2
 800b66e:	f7ff fe3d 	bl	800b2ec <create_chain>
 800b672:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <dir_next+0xe0>
 800b67a:	2307      	movs	r3, #7
 800b67c:	e061      	b.n	800b742 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <dir_next+0xea>
 800b684:	2302      	movs	r3, #2
 800b686:	e05c      	b.n	800b742 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	d101      	bne.n	800b694 <dir_next+0xf6>
 800b690:	2301      	movs	r3, #1
 800b692:	e056      	b.n	800b742 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff fad3 	bl	800ac40 <sync_window>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <dir_next+0x106>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e04e      	b.n	800b742 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	899b      	ldrh	r3, [r3, #12]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	f7ff f8fc 	bl	800a8ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	6979      	ldr	r1, [r7, #20]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff fba1 	bl	800ae04 <clust2sect>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	635a      	str	r2, [r3, #52]	; 0x34
 800b6c8:	e012      	b.n	800b6f0 <dir_next+0x152>
						fs->wflag = 1;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f7ff fab5 	bl	800ac40 <sync_window>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <dir_next+0x142>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e030      	b.n	800b742 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	635a      	str	r2, [r3, #52]	; 0x34
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	895b      	ldrh	r3, [r3, #10]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d3e6      	bcc.n	800b6ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	1ad2      	subs	r2, r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b70e:	6979      	ldr	r1, [r7, #20]
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff fb77 	bl	800ae04 <clust2sect>
 800b716:	4602      	mov	r2, r0
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	899b      	ldrh	r3, [r3, #12]
 800b72c:	461a      	mov	r2, r3
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	fbb3 f0f2 	udiv	r0, r3, r2
 800b734:	fb00 f202 	mul.w	r2, r0, r2
 800b738:	1a9b      	subs	r3, r3, r2
 800b73a:	18ca      	adds	r2, r1, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b086      	sub	sp, #24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b75a:	2100      	movs	r1, #0
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff fe95 	bl	800b48c <dir_sdi>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d12b      	bne.n	800b7c4 <dir_alloc+0x7a>
		n = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	4619      	mov	r1, r3
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f7ff faa6 	bl	800acc8 <move_window>
 800b77c:	4603      	mov	r3, r0
 800b77e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d11d      	bne.n	800b7c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2be5      	cmp	r3, #229	; 0xe5
 800b78e:	d004      	beq.n	800b79a <dir_alloc+0x50>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a1b      	ldr	r3, [r3, #32]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d107      	bne.n	800b7aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	3301      	adds	r3, #1
 800b79e:	613b      	str	r3, [r7, #16]
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d102      	bne.n	800b7ae <dir_alloc+0x64>
 800b7a8:	e00c      	b.n	800b7c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fef4 	bl	800b59e <dir_next>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d0d7      	beq.n	800b770 <dir_alloc+0x26>
 800b7c0:	e000      	b.n	800b7c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b7c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d101      	bne.n	800b7ce <dir_alloc+0x84>
 800b7ca:	2307      	movs	r3, #7
 800b7cc:	75fb      	strb	r3, [r7, #23]
	return res;
 800b7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	331a      	adds	r3, #26
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe ffbe 	bl	800a768 <ld_word>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d109      	bne.n	800b80c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	3314      	adds	r3, #20
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe ffb3 	bl	800a768 <ld_word>
 800b802:	4603      	mov	r3, r0
 800b804:	041b      	lsls	r3, r3, #16
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b80c:	68fb      	ldr	r3, [r7, #12]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	331a      	adds	r3, #26
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	b292      	uxth	r2, r2
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fe ffd6 	bl	800a7de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b03      	cmp	r3, #3
 800b838:	d109      	bne.n	800b84e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f103 0214 	add.w	r2, r3, #20
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	0c1b      	lsrs	r3, r3, #16
 800b844:	b29b      	uxth	r3, r3
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7fe ffc8 	bl	800a7de <st_word>
	}
}
 800b84e:	bf00      	nop
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b858:	b590      	push	{r4, r7, lr}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	331a      	adds	r3, #26
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe ff7e 	bl	800a768 <ld_word>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <cmp_lfn+0x1e>
 800b872:	2300      	movs	r3, #0
 800b874:	e059      	b.n	800b92a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b87e:	1e5a      	subs	r2, r3, #1
 800b880:	4613      	mov	r3, r2
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	4413      	add	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b88c:	2301      	movs	r3, #1
 800b88e:	81fb      	strh	r3, [r7, #14]
 800b890:	2300      	movs	r3, #0
 800b892:	613b      	str	r3, [r7, #16]
 800b894:	e033      	b.n	800b8fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b896:	4a27      	ldr	r2, [pc, #156]	; (800b934 <cmp_lfn+0xdc>)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	4413      	add	r3, r2
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fe ff5f 	bl	800a768 <ld_word>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b8ae:	89fb      	ldrh	r3, [r7, #14]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d01a      	beq.n	800b8ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2bfe      	cmp	r3, #254	; 0xfe
 800b8b8:	d812      	bhi.n	800b8e0 <cmp_lfn+0x88>
 800b8ba:	89bb      	ldrh	r3, [r7, #12]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f002 f8b1 	bl	800da24 <ff_wtoupper>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461c      	mov	r4, r3
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	1c5a      	adds	r2, r3, #1
 800b8ca:	617a      	str	r2, [r7, #20]
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f002 f8a5 	bl	800da24 <ff_wtoupper>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	d001      	beq.n	800b8e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e022      	b.n	800b92a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b8e4:	89bb      	ldrh	r3, [r7, #12]
 800b8e6:	81fb      	strh	r3, [r7, #14]
 800b8e8:	e006      	b.n	800b8f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b8ea:	89bb      	ldrh	r3, [r7, #12]
 800b8ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d001      	beq.n	800b8f8 <cmp_lfn+0xa0>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e018      	b.n	800b92a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	613b      	str	r3, [r7, #16]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2b0c      	cmp	r3, #12
 800b902:	d9c8      	bls.n	800b896 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00b      	beq.n	800b928 <cmp_lfn+0xd0>
 800b910:	89fb      	ldrh	r3, [r7, #14]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d008      	beq.n	800b928 <cmp_lfn+0xd0>
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	4413      	add	r3, r2
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <cmp_lfn+0xd0>
 800b924:	2300      	movs	r3, #0
 800b926:	e000      	b.n	800b92a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b928:	2301      	movs	r3, #1
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd90      	pop	{r4, r7, pc}
 800b932:	bf00      	nop
 800b934:	08011178 	.word	0x08011178

0800b938 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	4611      	mov	r1, r2
 800b944:	461a      	mov	r2, r3
 800b946:	460b      	mov	r3, r1
 800b948:	71fb      	strb	r3, [r7, #7]
 800b94a:	4613      	mov	r3, r2
 800b94c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	330d      	adds	r3, #13
 800b952:	79ba      	ldrb	r2, [r7, #6]
 800b954:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	330b      	adds	r3, #11
 800b95a:	220f      	movs	r2, #15
 800b95c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	330c      	adds	r3, #12
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	331a      	adds	r3, #26
 800b96a:	2100      	movs	r1, #0
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe ff36 	bl	800a7de <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b972:	79fb      	ldrb	r3, [r7, #7]
 800b974:	1e5a      	subs	r2, r3, #1
 800b976:	4613      	mov	r3, r2
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	82fb      	strh	r3, [r7, #22]
 800b986:	2300      	movs	r3, #0
 800b988:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b98a:	8afb      	ldrh	r3, [r7, #22]
 800b98c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b990:	4293      	cmp	r3, r2
 800b992:	d007      	beq.n	800b9a4 <put_lfn+0x6c>
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	61fa      	str	r2, [r7, #28]
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b9a4:	4a17      	ldr	r2, [pc, #92]	; (800ba04 <put_lfn+0xcc>)
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	8afa      	ldrh	r2, [r7, #22]
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe ff11 	bl	800a7de <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b9bc:	8afb      	ldrh	r3, [r7, #22]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <put_lfn+0x90>
 800b9c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	61bb      	str	r3, [r7, #24]
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	2b0c      	cmp	r3, #12
 800b9d2:	d9da      	bls.n	800b98a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b9d4:	8afb      	ldrh	r3, [r7, #22]
 800b9d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d006      	beq.n	800b9ec <put_lfn+0xb4>
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d103      	bne.n	800b9f4 <put_lfn+0xbc>
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	79fa      	ldrb	r2, [r7, #7]
 800b9f8:	701a      	strb	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	08011178 	.word	0x08011178

0800ba08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08c      	sub	sp, #48	; 0x30
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ba16:	220b      	movs	r2, #11
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7fe ff26 	bl	800a86c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b05      	cmp	r3, #5
 800ba24:	d929      	bls.n	800ba7a <gen_numname+0x72>
		sr = seq;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ba2a:	e020      	b.n	800ba6e <gen_numname+0x66>
			wc = *lfn++;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	1c9a      	adds	r2, r3, #2
 800ba30:	607a      	str	r2, [r7, #4]
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ba36:	2300      	movs	r3, #0
 800ba38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba3a:	e015      	b.n	800ba68 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	005a      	lsls	r2, r3, #1
 800ba40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	4413      	add	r3, r2
 800ba48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ba4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba4c:	085b      	lsrs	r3, r3, #1
 800ba4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <gen_numname+0x5a>
 800ba5a:	69fa      	ldr	r2, [r7, #28]
 800ba5c:	4b30      	ldr	r3, [pc, #192]	; (800bb20 <gen_numname+0x118>)
 800ba5e:	4053      	eors	r3, r2
 800ba60:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	3301      	adds	r3, #1
 800ba66:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	2b0f      	cmp	r3, #15
 800ba6c:	d9e6      	bls.n	800ba3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1da      	bne.n	800ba2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ba7a:	2307      	movs	r3, #7
 800ba7c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	3330      	adds	r3, #48	; 0x30
 800ba8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ba8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba92:	2b39      	cmp	r3, #57	; 0x39
 800ba94:	d904      	bls.n	800baa0 <gen_numname+0x98>
 800ba96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba9a:	3307      	adds	r3, #7
 800ba9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	1e5a      	subs	r2, r3, #1
 800baa4:	62ba      	str	r2, [r7, #40]	; 0x28
 800baa6:	3330      	adds	r3, #48	; 0x30
 800baa8:	443b      	add	r3, r7
 800baaa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800baae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	091b      	lsrs	r3, r3, #4
 800bab6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1df      	bne.n	800ba7e <gen_numname+0x76>
	ns[i] = '~';
 800babe:	f107 0214 	add.w	r2, r7, #20
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	4413      	add	r3, r2
 800bac6:	227e      	movs	r2, #126	; 0x7e
 800bac8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800baca:	2300      	movs	r3, #0
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
 800bace:	e002      	b.n	800bad6 <gen_numname+0xce>
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	3301      	adds	r3, #1
 800bad4:	627b      	str	r3, [r7, #36]	; 0x24
 800bad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	429a      	cmp	r2, r3
 800badc:	d205      	bcs.n	800baea <gen_numname+0xe2>
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	4413      	add	r3, r2
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	d1f2      	bne.n	800bad0 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	2b07      	cmp	r3, #7
 800baee:	d807      	bhi.n	800bb00 <gen_numname+0xf8>
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	1c5a      	adds	r2, r3, #1
 800baf4:	62ba      	str	r2, [r7, #40]	; 0x28
 800baf6:	3330      	adds	r3, #48	; 0x30
 800baf8:	443b      	add	r3, r7
 800bafa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bafe:	e000      	b.n	800bb02 <gen_numname+0xfa>
 800bb00:	2120      	movs	r1, #32
 800bb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	627a      	str	r2, [r7, #36]	; 0x24
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	460a      	mov	r2, r1
 800bb0e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	2b07      	cmp	r3, #7
 800bb14:	d9e9      	bls.n	800baea <gen_numname+0xe2>
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	3730      	adds	r7, #48	; 0x30
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	00011021 	.word	0x00011021

0800bb24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bb30:	230b      	movs	r3, #11
 800bb32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	0852      	lsrs	r2, r2, #1
 800bb3a:	01db      	lsls	r3, r3, #7
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	1c59      	adds	r1, r3, #1
 800bb44:	6079      	str	r1, [r7, #4]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	4413      	add	r3, r2
 800bb4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	60bb      	str	r3, [r7, #8]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1ed      	bne.n	800bb34 <sum_sfn+0x10>
	return sum;
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b086      	sub	sp, #24
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff fc88 	bl	800b48c <dir_sdi>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <dir_find+0x24>
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	e0a9      	b.n	800bcde <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb8a:	23ff      	movs	r3, #255	; 0xff
 800bb8c:	753b      	strb	r3, [r7, #20]
 800bb8e:	7d3b      	ldrb	r3, [r7, #20]
 800bb90:	757b      	strb	r3, [r7, #21]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f04f 32ff 	mov.w	r2, #4294967295
 800bb98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6938      	ldr	r0, [r7, #16]
 800bba2:	f7ff f891 	bl	800acc8 <move_window>
 800bba6:	4603      	mov	r3, r0
 800bba8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f040 8090 	bne.w	800bcd2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbba:	7dbb      	ldrb	r3, [r7, #22]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <dir_find+0x60>
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	75fb      	strb	r3, [r7, #23]
 800bbc4:	e08a      	b.n	800bcdc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	330b      	adds	r3, #11
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbd2:	73fb      	strb	r3, [r7, #15]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	7bfa      	ldrb	r2, [r7, #15]
 800bbd8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bbda:	7dbb      	ldrb	r3, [r7, #22]
 800bbdc:	2be5      	cmp	r3, #229	; 0xe5
 800bbde:	d007      	beq.n	800bbf0 <dir_find+0x8a>
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	f003 0308 	and.w	r3, r3, #8
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d009      	beq.n	800bbfe <dir_find+0x98>
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	2b0f      	cmp	r3, #15
 800bbee:	d006      	beq.n	800bbfe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbf0:	23ff      	movs	r3, #255	; 0xff
 800bbf2:	757b      	strb	r3, [r7, #21]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfa:	631a      	str	r2, [r3, #48]	; 0x30
 800bbfc:	e05e      	b.n	800bcbc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	2b0f      	cmp	r3, #15
 800bc02:	d136      	bne.n	800bc72 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d154      	bne.n	800bcbc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bc12:	7dbb      	ldrb	r3, [r7, #22]
 800bc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00d      	beq.n	800bc38 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	7b5b      	ldrb	r3, [r3, #13]
 800bc22:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bc24:	7dbb      	ldrb	r3, [r7, #22]
 800bc26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc2a:	75bb      	strb	r3, [r7, #22]
 800bc2c:	7dbb      	ldrb	r3, [r7, #22]
 800bc2e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	695a      	ldr	r2, [r3, #20]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc38:	7dba      	ldrb	r2, [r7, #22]
 800bc3a:	7d7b      	ldrb	r3, [r7, #21]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d115      	bne.n	800bc6c <dir_find+0x106>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	330d      	adds	r3, #13
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	7d3a      	ldrb	r2, [r7, #20]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d10e      	bne.n	800bc6c <dir_find+0x106>
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	691a      	ldr	r2, [r3, #16]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4610      	mov	r0, r2
 800bc5a:	f7ff fdfd 	bl	800b858 <cmp_lfn>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <dir_find+0x106>
 800bc64:	7d7b      	ldrb	r3, [r7, #21]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	e000      	b.n	800bc6e <dir_find+0x108>
 800bc6c:	23ff      	movs	r3, #255	; 0xff
 800bc6e:	757b      	strb	r3, [r7, #21]
 800bc70:	e024      	b.n	800bcbc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc72:	7d7b      	ldrb	r3, [r7, #21]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d109      	bne.n	800bc8c <dir_find+0x126>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff ff51 	bl	800bb24 <sum_sfn>
 800bc82:	4603      	mov	r3, r0
 800bc84:	461a      	mov	r2, r3
 800bc86:	7d3b      	ldrb	r3, [r7, #20]
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d024      	beq.n	800bcd6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <dir_find+0x14a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a18      	ldr	r0, [r3, #32]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3324      	adds	r3, #36	; 0x24
 800bca2:	220b      	movs	r2, #11
 800bca4:	4619      	mov	r1, r3
 800bca6:	f7fe fe1d 	bl	800a8e4 <mem_cmp>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d014      	beq.n	800bcda <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcb0:	23ff      	movs	r3, #255	; 0xff
 800bcb2:	757b      	strb	r3, [r7, #21]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fc6d 	bl	800b59e <dir_next>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f43f af65 	beq.w	800bb9a <dir_find+0x34>
 800bcd0:	e004      	b.n	800bcdc <dir_find+0x176>
		if (res != FR_OK) break;
 800bcd2:	bf00      	nop
 800bcd4:	e002      	b.n	800bcdc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bcd6:	bf00      	nop
 800bcd8:	e000      	b.n	800bcdc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bcda:	bf00      	nop

	return res;
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08c      	sub	sp, #48	; 0x30
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bcfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <dir_register+0x20>
 800bd04:	2306      	movs	r3, #6
 800bd06:	e0e0      	b.n	800beca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bd08:	2300      	movs	r3, #0
 800bd0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd0c:	e002      	b.n	800bd14 <dir_register+0x2c>
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd10:	3301      	adds	r3, #1
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	691a      	ldr	r2, [r3, #16]
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	4413      	add	r3, r2
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1f4      	bne.n	800bd0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bd2a:	f107 030c 	add.w	r3, r7, #12
 800bd2e:	220c      	movs	r2, #12
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fe fd9b 	bl	800a86c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d032      	beq.n	800bda6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2240      	movs	r2, #64	; 0x40
 800bd44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bd48:	2301      	movs	r3, #1
 800bd4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd4c:	e016      	b.n	800bd7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	691a      	ldr	r2, [r3, #16]
 800bd58:	f107 010c 	add.w	r1, r7, #12
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	f7ff fe53 	bl	800ba08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff feff 	bl	800bb66 <dir_find>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bd6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	3301      	adds	r3, #1
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	2b63      	cmp	r3, #99	; 0x63
 800bd80:	d9e5      	bls.n	800bd4e <dir_register+0x66>
 800bd82:	e000      	b.n	800bd86 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bd84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	2b64      	cmp	r3, #100	; 0x64
 800bd8a:	d101      	bne.n	800bd90 <dir_register+0xa8>
 800bd8c:	2307      	movs	r3, #7
 800bd8e:	e09c      	b.n	800beca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bd90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	d002      	beq.n	800bd9e <dir_register+0xb6>
 800bd98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd9c:	e095      	b.n	800beca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bd9e:	7dfa      	ldrb	r2, [r7, #23]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	f003 0302 	and.w	r3, r3, #2
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <dir_register+0xd8>
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	330c      	adds	r3, #12
 800bdb4:	4a47      	ldr	r2, [pc, #284]	; (800bed4 <dir_register+0x1ec>)
 800bdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdba:	089b      	lsrs	r3, r3, #2
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	e000      	b.n	800bdc2 <dir_register+0xda>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bdc4:	6a39      	ldr	r1, [r7, #32]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff fcbf 	bl	800b74a <dir_alloc>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bdd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d148      	bne.n	800be6c <dir_register+0x184>
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	623b      	str	r3, [r7, #32]
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d042      	beq.n	800be6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	695a      	ldr	r2, [r3, #20]
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	015b      	lsls	r3, r3, #5
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff fb4a 	bl	800b48c <dir_sdi>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bdfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be02:	2b00      	cmp	r3, #0
 800be04:	d132      	bne.n	800be6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3324      	adds	r3, #36	; 0x24
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7ff fe8a 	bl	800bb24 <sum_sfn>
 800be10:	4603      	mov	r3, r0
 800be12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	4619      	mov	r1, r3
 800be1a:	69f8      	ldr	r0, [r7, #28]
 800be1c:	f7fe ff54 	bl	800acc8 <move_window>
 800be20:	4603      	mov	r3, r0
 800be22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800be26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d11d      	bne.n	800be6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	6918      	ldr	r0, [r3, #16]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a19      	ldr	r1, [r3, #32]
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	7efb      	ldrb	r3, [r7, #27]
 800be3c:	f7ff fd7c 	bl	800b938 <put_lfn>
				fs->wflag = 1;
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2201      	movs	r2, #1
 800be44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800be46:	2100      	movs	r1, #0
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff fba8 	bl	800b59e <dir_next>
 800be4e:	4603      	mov	r3, r0
 800be50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800be54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d107      	bne.n	800be6c <dir_register+0x184>
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	3b01      	subs	r3, #1
 800be60:	623b      	str	r3, [r7, #32]
 800be62:	6a3b      	ldr	r3, [r7, #32]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1d5      	bne.n	800be14 <dir_register+0x12c>
 800be68:	e000      	b.n	800be6c <dir_register+0x184>
				if (res != FR_OK) break;
 800be6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800be6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be70:	2b00      	cmp	r3, #0
 800be72:	d128      	bne.n	800bec6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	69db      	ldr	r3, [r3, #28]
 800be78:	4619      	mov	r1, r3
 800be7a:	69f8      	ldr	r0, [r7, #28]
 800be7c:	f7fe ff24 	bl	800acc8 <move_window>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800be86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d11b      	bne.n	800bec6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	2220      	movs	r2, #32
 800be94:	2100      	movs	r1, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe fd09 	bl	800a8ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a18      	ldr	r0, [r3, #32]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3324      	adds	r3, #36	; 0x24
 800bea4:	220b      	movs	r2, #11
 800bea6:	4619      	mov	r1, r3
 800bea8:	f7fe fce0 	bl	800a86c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	330c      	adds	r3, #12
 800beb8:	f002 0218 	and.w	r2, r2, #24
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	2201      	movs	r2, #1
 800bec4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800beca:	4618      	mov	r0, r3
 800becc:	3730      	adds	r7, #48	; 0x30
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	4ec4ec4f 	.word	0x4ec4ec4f

0800bed8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 80c9 	beq.w	800c08a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf00:	d032      	beq.n	800bf68 <get_fileinfo+0x90>
			i = j = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	61bb      	str	r3, [r7, #24]
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bf0a:	e01b      	b.n	800bf44 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800bf0c:	89fb      	ldrh	r3, [r7, #14]
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f001 fd4b 	bl	800d9ac <ff_convert>
 800bf16:	4603      	mov	r3, r0
 800bf18:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800bf1a:	89fb      	ldrh	r3, [r7, #14]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <get_fileinfo+0x4e>
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	e01a      	b.n	800bf5c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	2bfe      	cmp	r3, #254	; 0xfe
 800bf2a:	d902      	bls.n	800bf32 <get_fileinfo+0x5a>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	61fb      	str	r3, [r7, #28]
 800bf30:	e014      	b.n	800bf5c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	1c5a      	adds	r2, r3, #1
 800bf36:	61fa      	str	r2, [r7, #28]
 800bf38:	89fa      	ldrh	r2, [r7, #14]
 800bf3a:	b2d1      	uxtb	r1, r2
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	4413      	add	r3, r2
 800bf40:	460a      	mov	r2, r1
 800bf42:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	1c59      	adds	r1, r3, #1
 800bf4c:	61b9      	str	r1, [r7, #24]
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	4413      	add	r3, r2
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	81fb      	strh	r3, [r7, #14]
 800bf56:	89fb      	ldrh	r3, [r7, #14]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1d7      	bne.n	800bf0c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	4413      	add	r3, r2
 800bf62:	3316      	adds	r3, #22
 800bf64:	2200      	movs	r2, #0
 800bf66:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	61bb      	str	r3, [r7, #24]
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	4413      	add	r3, r2
 800bf76:	3316      	adds	r3, #22
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800bf7c:	e04c      	b.n	800c018 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1a      	ldr	r2, [r3, #32]
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	1c59      	adds	r1, r3, #1
 800bf86:	61f9      	str	r1, [r7, #28]
 800bf88:	4413      	add	r3, r2
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	2b20      	cmp	r3, #32
 800bf92:	d100      	bne.n	800bf96 <get_fileinfo+0xbe>
 800bf94:	e040      	b.n	800c018 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	2b05      	cmp	r3, #5
 800bf9a:	d101      	bne.n	800bfa0 <get_fileinfo+0xc8>
 800bf9c:	23e5      	movs	r3, #229	; 0xe5
 800bf9e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	2b09      	cmp	r3, #9
 800bfa4:	d10f      	bne.n	800bfc6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800bfa6:	89bb      	ldrh	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <get_fileinfo+0xe0>
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	3316      	adds	r3, #22
 800bfb4:	222e      	movs	r2, #46	; 0x2e
 800bfb6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	1c5a      	adds	r2, r3, #1
 800bfbc:	61ba      	str	r2, [r7, #24]
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	222e      	movs	r2, #46	; 0x2e
 800bfc4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	4413      	add	r3, r2
 800bfcc:	3309      	adds	r3, #9
 800bfce:	7dfa      	ldrb	r2, [r7, #23]
 800bfd0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800bfd2:	89bb      	ldrh	r3, [r7, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11c      	bne.n	800c012 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	2b40      	cmp	r3, #64	; 0x40
 800bfdc:	d913      	bls.n	800c006 <get_fileinfo+0x12e>
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	2b5a      	cmp	r3, #90	; 0x5a
 800bfe2:	d810      	bhi.n	800c006 <get_fileinfo+0x12e>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a1b      	ldr	r3, [r3, #32]
 800bfe8:	330c      	adds	r3, #12
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	461a      	mov	r2, r3
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	2b08      	cmp	r3, #8
 800bff2:	d901      	bls.n	800bff8 <get_fileinfo+0x120>
 800bff4:	2310      	movs	r3, #16
 800bff6:	e000      	b.n	800bffa <get_fileinfo+0x122>
 800bff8:	2308      	movs	r3, #8
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	3320      	adds	r3, #32
 800c004:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	4413      	add	r3, r2
 800c00c:	3316      	adds	r3, #22
 800c00e:	7dfa      	ldrb	r2, [r7, #23]
 800c010:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	3301      	adds	r3, #1
 800c016:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	2b0a      	cmp	r3, #10
 800c01c:	d9af      	bls.n	800bf7e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c01e:	89bb      	ldrh	r3, [r7, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10d      	bne.n	800c040 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	4413      	add	r3, r2
 800c02a:	3316      	adds	r3, #22
 800c02c:	2200      	movs	r2, #0
 800c02e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	330c      	adds	r3, #12
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <get_fileinfo+0x168>
 800c03c:	2300      	movs	r3, #0
 800c03e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	4413      	add	r3, r2
 800c046:	3309      	adds	r3, #9
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	7ada      	ldrb	r2, [r3, #11]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	331c      	adds	r3, #28
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe fb9b 	bl	800a798 <ld_dword>
 800c062:	4602      	mov	r2, r0
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	3316      	adds	r3, #22
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe fb92 	bl	800a798 <ld_dword>
 800c074:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	b29a      	uxth	r2, r3
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	80da      	strh	r2, [r3, #6]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	0c1b      	lsrs	r3, r3, #16
 800c082:	b29a      	uxth	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	809a      	strh	r2, [r3, #4]
 800c088:	e000      	b.n	800c08c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c08a:	bf00      	nop
}
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	613b      	str	r3, [r7, #16]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	61ba      	str	r2, [r7, #24]
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	4413      	add	r3, r2
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0c4:	2b1f      	cmp	r3, #31
 800c0c6:	d940      	bls.n	800c14a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ca:	2b2f      	cmp	r3, #47	; 0x2f
 800c0cc:	d006      	beq.n	800c0dc <create_name+0x48>
 800c0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0d0:	2b5c      	cmp	r3, #92	; 0x5c
 800c0d2:	d110      	bne.n	800c0f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c0d4:	e002      	b.n	800c0dc <create_name+0x48>
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	61bb      	str	r3, [r7, #24]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b2f      	cmp	r3, #47	; 0x2f
 800c0e6:	d0f6      	beq.n	800c0d6 <create_name+0x42>
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c0f2:	d0f0      	beq.n	800c0d6 <create_name+0x42>
			break;
 800c0f4:	e02a      	b.n	800c14c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2bfe      	cmp	r3, #254	; 0xfe
 800c0fa:	d901      	bls.n	800c100 <create_name+0x6c>
 800c0fc:	2306      	movs	r3, #6
 800c0fe:	e17d      	b.n	800c3fc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c102:	b2db      	uxtb	r3, r3
 800c104:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c108:	2101      	movs	r1, #1
 800c10a:	4618      	mov	r0, r3
 800c10c:	f001 fc4e 	bl	800d9ac <ff_convert>
 800c110:	4603      	mov	r3, r0
 800c112:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <create_name+0x8a>
 800c11a:	2306      	movs	r3, #6
 800c11c:	e16e      	b.n	800c3fc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c11e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c120:	2b7f      	cmp	r3, #127	; 0x7f
 800c122:	d809      	bhi.n	800c138 <create_name+0xa4>
 800c124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c126:	4619      	mov	r1, r3
 800c128:	488d      	ldr	r0, [pc, #564]	; (800c360 <create_name+0x2cc>)
 800c12a:	f7fe fc02 	bl	800a932 <chk_chr>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <create_name+0xa4>
 800c134:	2306      	movs	r3, #6
 800c136:	e161      	b.n	800c3fc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	617a      	str	r2, [r7, #20]
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4413      	add	r3, r2
 800c144:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c146:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c148:	e7b4      	b.n	800c0b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c14a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	441a      	add	r2, r3
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c158:	2b1f      	cmp	r3, #31
 800c15a:	d801      	bhi.n	800c160 <create_name+0xcc>
 800c15c:	2304      	movs	r3, #4
 800c15e:	e000      	b.n	800c162 <create_name+0xce>
 800c160:	2300      	movs	r3, #0
 800c162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c166:	e011      	b.n	800c18c <create_name+0xf8>
		w = lfn[di - 1];
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c16e:	4413      	add	r3, r2
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c17a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c17c:	2b20      	cmp	r3, #32
 800c17e:	d002      	beq.n	800c186 <create_name+0xf2>
 800c180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c182:	2b2e      	cmp	r3, #46	; 0x2e
 800c184:	d106      	bne.n	800c194 <create_name+0x100>
		di--;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	3b01      	subs	r3, #1
 800c18a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1ea      	bne.n	800c168 <create_name+0xd4>
 800c192:	e000      	b.n	800c196 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c194:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4413      	add	r3, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <create_name+0x118>
 800c1a8:	2306      	movs	r3, #6
 800c1aa:	e127      	b.n	800c3fc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3324      	adds	r3, #36	; 0x24
 800c1b0:	220b      	movs	r2, #11
 800c1b2:	2120      	movs	r1, #32
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fe fb7a 	bl	800a8ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61bb      	str	r3, [r7, #24]
 800c1be:	e002      	b.n	800c1c6 <create_name+0x132>
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	61bb      	str	r3, [r7, #24]
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	005b      	lsls	r3, r3, #1
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	2b20      	cmp	r3, #32
 800c1d2:	d0f5      	beq.n	800c1c0 <create_name+0x12c>
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	4413      	add	r3, r2
 800c1dc:	881b      	ldrh	r3, [r3, #0]
 800c1de:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e0:	d0ee      	beq.n	800c1c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d009      	beq.n	800c1fc <create_name+0x168>
 800c1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1ec:	f043 0303 	orr.w	r3, r3, #3
 800c1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c1f4:	e002      	b.n	800c1fc <create_name+0x168>
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	617b      	str	r3, [r7, #20]
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <create_name+0x182>
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c208:	4413      	add	r3, r2
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	2b2e      	cmp	r3, #46	; 0x2e
 800c214:	d1ef      	bne.n	800c1f6 <create_name+0x162>

	i = b = 0; ni = 8;
 800c216:	2300      	movs	r3, #0
 800c218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c21c:	2300      	movs	r3, #0
 800c21e:	623b      	str	r3, [r7, #32]
 800c220:	2308      	movs	r3, #8
 800c222:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	61ba      	str	r2, [r7, #24]
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 8090 	beq.w	800c35c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c23c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c23e:	2b20      	cmp	r3, #32
 800c240:	d006      	beq.n	800c250 <create_name+0x1bc>
 800c242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c244:	2b2e      	cmp	r3, #46	; 0x2e
 800c246:	d10a      	bne.n	800c25e <create_name+0x1ca>
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d006      	beq.n	800c25e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c254:	f043 0303 	orr.w	r3, r3, #3
 800c258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c25c:	e07d      	b.n	800c35a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c25e:	6a3a      	ldr	r2, [r7, #32]
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	429a      	cmp	r2, r3
 800c264:	d203      	bcs.n	800c26e <create_name+0x1da>
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d123      	bne.n	800c2b6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	2b0b      	cmp	r3, #11
 800c272:	d106      	bne.n	800c282 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c278:	f043 0303 	orr.w	r3, r3, #3
 800c27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c280:	e075      	b.n	800c36e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	429a      	cmp	r2, r3
 800c288:	d005      	beq.n	800c296 <create_name+0x202>
 800c28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c28e:	f043 0303 	orr.w	r3, r3, #3
 800c292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d866      	bhi.n	800c36c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	61bb      	str	r3, [r7, #24]
 800c2a2:	2308      	movs	r3, #8
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	230b      	movs	r3, #11
 800c2a8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c2aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2b4:	e051      	b.n	800c35a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c2b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b8:	2b7f      	cmp	r3, #127	; 0x7f
 800c2ba:	d914      	bls.n	800c2e6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c2bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2be:	2100      	movs	r1, #0
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f001 fb73 	bl	800d9ac <ff_convert>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c2ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d004      	beq.n	800c2da <create_name+0x246>
 800c2d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d2:	3b80      	subs	r3, #128	; 0x80
 800c2d4:	4a23      	ldr	r2, [pc, #140]	; (800c364 <create_name+0x2d0>)
 800c2d6:	5cd3      	ldrb	r3, [r2, r3]
 800c2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c2da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2de:	f043 0302 	orr.w	r3, r3, #2
 800c2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c2e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d007      	beq.n	800c2fc <create_name+0x268>
 800c2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	481d      	ldr	r0, [pc, #116]	; (800c368 <create_name+0x2d4>)
 800c2f2:	f7fe fb1e 	bl	800a932 <chk_chr>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d008      	beq.n	800c30e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c2fc:	235f      	movs	r3, #95	; 0x5f
 800c2fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c304:	f043 0303 	orr.w	r3, r3, #3
 800c308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c30c:	e01b      	b.n	800c346 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c310:	2b40      	cmp	r3, #64	; 0x40
 800c312:	d909      	bls.n	800c328 <create_name+0x294>
 800c314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c316:	2b5a      	cmp	r3, #90	; 0x5a
 800c318:	d806      	bhi.n	800c328 <create_name+0x294>
					b |= 2;
 800c31a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c31e:	f043 0302 	orr.w	r3, r3, #2
 800c322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c326:	e00e      	b.n	800c346 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c32a:	2b60      	cmp	r3, #96	; 0x60
 800c32c:	d90b      	bls.n	800c346 <create_name+0x2b2>
 800c32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c330:	2b7a      	cmp	r3, #122	; 0x7a
 800c332:	d808      	bhi.n	800c346 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c338:	f043 0301 	orr.w	r3, r3, #1
 800c33c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c342:	3b20      	subs	r3, #32
 800c344:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c346:	6a3b      	ldr	r3, [r7, #32]
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	623a      	str	r2, [r7, #32]
 800c34c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c34e:	b2d1      	uxtb	r1, r2
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	4413      	add	r3, r2
 800c354:	460a      	mov	r2, r1
 800c356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c35a:	e763      	b.n	800c224 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c35c:	bf00      	nop
 800c35e:	e006      	b.n	800c36e <create_name+0x2da>
 800c360:	08011054 	.word	0x08011054
 800c364:	080110f8 	.word	0x080110f8
 800c368:	08011060 	.word	0x08011060
			if (si > di) break;			/* No extension */
 800c36c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c374:	2be5      	cmp	r3, #229	; 0xe5
 800c376:	d103      	bne.n	800c380 <create_name+0x2ec>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2205      	movs	r2, #5
 800c37c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	2b08      	cmp	r3, #8
 800c384:	d104      	bne.n	800c390 <create_name+0x2fc>
 800c386:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c394:	f003 030c 	and.w	r3, r3, #12
 800c398:	2b0c      	cmp	r3, #12
 800c39a:	d005      	beq.n	800c3a8 <create_name+0x314>
 800c39c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d105      	bne.n	800c3b4 <create_name+0x320>
 800c3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3ac:	f043 0302 	orr.w	r3, r3, #2
 800c3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b8:	f003 0302 	and.w	r3, r3, #2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d117      	bne.n	800c3f0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3c4:	f003 0303 	and.w	r3, r3, #3
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d105      	bne.n	800c3d8 <create_name+0x344>
 800c3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3d0:	f043 0310 	orr.w	r3, r3, #16
 800c3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3dc:	f003 030c 	and.w	r3, r3, #12
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	d105      	bne.n	800c3f0 <create_name+0x35c>
 800c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e8:	f043 0308 	orr.w	r3, r3, #8
 800c3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c3f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c3fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3728      	adds	r7, #40	; 0x28
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c418:	e002      	b.n	800c420 <follow_path+0x1c>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	3301      	adds	r3, #1
 800c41e:	603b      	str	r3, [r7, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	2b2f      	cmp	r3, #47	; 0x2f
 800c426:	d0f8      	beq.n	800c41a <follow_path+0x16>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b5c      	cmp	r3, #92	; 0x5c
 800c42e:	d0f4      	beq.n	800c41a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2200      	movs	r2, #0
 800c434:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	2b1f      	cmp	r3, #31
 800c43c:	d80a      	bhi.n	800c454 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2280      	movs	r2, #128	; 0x80
 800c442:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c446:	2100      	movs	r1, #0
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff f81f 	bl	800b48c <dir_sdi>
 800c44e:	4603      	mov	r3, r0
 800c450:	75fb      	strb	r3, [r7, #23]
 800c452:	e048      	b.n	800c4e6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c454:	463b      	mov	r3, r7
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff fe1b 	bl	800c094 <create_name>
 800c45e:	4603      	mov	r3, r0
 800c460:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d139      	bne.n	800c4dc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff fb7c 	bl	800bb66 <dir_find>
 800c46e:	4603      	mov	r3, r0
 800c470:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c478:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00a      	beq.n	800c496 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	2b04      	cmp	r3, #4
 800c484:	d12c      	bne.n	800c4e0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c486:	7afb      	ldrb	r3, [r7, #11]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d127      	bne.n	800c4e0 <follow_path+0xdc>
 800c490:	2305      	movs	r3, #5
 800c492:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c494:	e024      	b.n	800c4e0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c496:	7afb      	ldrb	r3, [r7, #11]
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d121      	bne.n	800c4e4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	799b      	ldrb	r3, [r3, #6]
 800c4a4:	f003 0310 	and.w	r3, r3, #16
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d102      	bne.n	800c4b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c4ac:	2305      	movs	r3, #5
 800c4ae:	75fb      	strb	r3, [r7, #23]
 800c4b0:	e019      	b.n	800c4e6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	8992      	ldrh	r2, [r2, #12]
 800c4c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4c4:	fb00 f202 	mul.w	r2, r0, r2
 800c4c8:	1a9b      	subs	r3, r3, r2
 800c4ca:	440b      	add	r3, r1
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff f982 	bl	800b7d8 <ld_clust>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c4da:	e7bb      	b.n	800c454 <follow_path+0x50>
			if (res != FR_OK) break;
 800c4dc:	bf00      	nop
 800c4de:	e002      	b.n	800c4e6 <follow_path+0xe2>
				break;
 800c4e0:	bf00      	nop
 800c4e2:	e000      	b.n	800c4e6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c4e4:	bf00      	nop
			}
		}
	}

	return res;
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d031      	beq.n	800c56a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	e002      	b.n	800c514 <get_ldnumber+0x24>
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	3301      	adds	r3, #1
 800c512:	617b      	str	r3, [r7, #20]
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2b1f      	cmp	r3, #31
 800c51a:	d903      	bls.n	800c524 <get_ldnumber+0x34>
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b3a      	cmp	r3, #58	; 0x3a
 800c522:	d1f4      	bne.n	800c50e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b3a      	cmp	r3, #58	; 0x3a
 800c52a:	d11c      	bne.n	800c566 <get_ldnumber+0x76>
			tp = *path;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	1c5a      	adds	r2, r3, #1
 800c536:	60fa      	str	r2, [r7, #12]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	3b30      	subs	r3, #48	; 0x30
 800c53c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b09      	cmp	r3, #9
 800c542:	d80e      	bhi.n	800c562 <get_ldnumber+0x72>
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d10a      	bne.n	800c562 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d107      	bne.n	800c562 <get_ldnumber+0x72>
					vol = (int)i;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	3301      	adds	r3, #1
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	e002      	b.n	800c56c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c566:	2300      	movs	r3, #0
 800c568:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c56a:	693b      	ldr	r3, [r7, #16]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	371c      	adds	r7, #28
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	70da      	strb	r2, [r3, #3]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f04f 32ff 	mov.w	r2, #4294967295
 800c58e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7fe fb98 	bl	800acc8 <move_window>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <check_fs+0x2a>
 800c59e:	2304      	movs	r3, #4
 800c5a0:	e038      	b.n	800c614 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3338      	adds	r3, #56	; 0x38
 800c5a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fe f8dc 	bl	800a768 <ld_word>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d001      	beq.n	800c5c0 <check_fs+0x48>
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e029      	b.n	800c614 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5c6:	2be9      	cmp	r3, #233	; 0xe9
 800c5c8:	d009      	beq.n	800c5de <check_fs+0x66>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5d0:	2beb      	cmp	r3, #235	; 0xeb
 800c5d2:	d11e      	bne.n	800c612 <check_fs+0x9a>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c5da:	2b90      	cmp	r3, #144	; 0x90
 800c5dc:	d119      	bne.n	800c612 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3338      	adds	r3, #56	; 0x38
 800c5e2:	3336      	adds	r3, #54	; 0x36
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe f8d7 	bl	800a798 <ld_dword>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	; (800c61c <check_fs+0xa4>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d101      	bne.n	800c5fa <check_fs+0x82>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e00c      	b.n	800c614 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	3338      	adds	r3, #56	; 0x38
 800c5fe:	3352      	adds	r3, #82	; 0x52
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe f8c9 	bl	800a798 <ld_dword>
 800c606:	4603      	mov	r3, r0
 800c608:	4a05      	ldr	r2, [pc, #20]	; (800c620 <check_fs+0xa8>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d101      	bne.n	800c612 <check_fs+0x9a>
 800c60e:	2300      	movs	r3, #0
 800c610:	e000      	b.n	800c614 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c612:	2302      	movs	r3, #2
}
 800c614:	4618      	mov	r0, r3
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	00544146 	.word	0x00544146
 800c620:	33544146 	.word	0x33544146

0800c624 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b096      	sub	sp, #88	; 0x58
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	4613      	mov	r3, r2
 800c630:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff ff59 	bl	800c4f0 <get_ldnumber>
 800c63e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c642:	2b00      	cmp	r3, #0
 800c644:	da01      	bge.n	800c64a <find_volume+0x26>
 800c646:	230b      	movs	r3, #11
 800c648:	e265      	b.n	800cb16 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c64a:	4a9f      	ldr	r2, [pc, #636]	; (800c8c8 <find_volume+0x2a4>)
 800c64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c652:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <find_volume+0x3a>
 800c65a:	230c      	movs	r3, #12
 800c65c:	e25b      	b.n	800cb16 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c662:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	f023 0301 	bic.w	r3, r3, #1
 800c66a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d01a      	beq.n	800c6aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	785b      	ldrb	r3, [r3, #1]
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fd ffd7 	bl	800a62c <disk_status>
 800c67e:	4603      	mov	r3, r0
 800c680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10c      	bne.n	800c6aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d007      	beq.n	800c6a6 <find_volume+0x82>
 800c696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c69a:	f003 0304 	and.w	r3, r3, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d001      	beq.n	800c6a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c6a2:	230a      	movs	r3, #10
 800c6a4:	e237      	b.n	800cb16 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e235      	b.n	800cb16 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b2:	b2da      	uxtb	r2, r3
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7fd ffcf 	bl	800a660 <disk_initialize>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c6c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e21e      	b.n	800cb16 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d007      	beq.n	800c6ee <find_volume+0xca>
 800c6de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c6e2:	f003 0304 	and.w	r3, r3, #4
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d001      	beq.n	800c6ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c6ea:	230a      	movs	r3, #10
 800c6ec:	e213      	b.n	800cb16 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f0:	7858      	ldrb	r0, [r3, #1]
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f4:	330c      	adds	r3, #12
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	2102      	movs	r1, #2
 800c6fa:	f7fe f817 	bl	800a72c <disk_ioctl>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <find_volume+0xe4>
 800c704:	2301      	movs	r3, #1
 800c706:	e206      	b.n	800cb16 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	899b      	ldrh	r3, [r3, #12]
 800c70c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c710:	d80d      	bhi.n	800c72e <find_volume+0x10a>
 800c712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c714:	899b      	ldrh	r3, [r3, #12]
 800c716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c71a:	d308      	bcc.n	800c72e <find_volume+0x10a>
 800c71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71e:	899b      	ldrh	r3, [r3, #12]
 800c720:	461a      	mov	r2, r3
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	899b      	ldrh	r3, [r3, #12]
 800c726:	3b01      	subs	r3, #1
 800c728:	4013      	ands	r3, r2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <find_volume+0x10e>
 800c72e:	2301      	movs	r3, #1
 800c730:	e1f1      	b.n	800cb16 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c73a:	f7ff ff1d 	bl	800c578 <check_fs>
 800c73e:	4603      	mov	r3, r0
 800c740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d149      	bne.n	800c7e0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c74c:	2300      	movs	r3, #0
 800c74e:	643b      	str	r3, [r7, #64]	; 0x40
 800c750:	e01e      	b.n	800c790 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c754:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c760:	4413      	add	r3, r2
 800c762:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	3304      	adds	r3, #4
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d006      	beq.n	800c77c <find_volume+0x158>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	3308      	adds	r3, #8
 800c772:	4618      	mov	r0, r3
 800c774:	f7fe f810 	bl	800a798 <ld_dword>
 800c778:	4602      	mov	r2, r0
 800c77a:	e000      	b.n	800c77e <find_volume+0x15a>
 800c77c:	2200      	movs	r2, #0
 800c77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	3358      	adds	r3, #88	; 0x58
 800c784:	443b      	add	r3, r7
 800c786:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c78c:	3301      	adds	r3, #1
 800c78e:	643b      	str	r3, [r7, #64]	; 0x40
 800c790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c792:	2b03      	cmp	r3, #3
 800c794:	d9dd      	bls.n	800c752 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c796:	2300      	movs	r3, #0
 800c798:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <find_volume+0x182>
 800c7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	3358      	adds	r3, #88	; 0x58
 800c7ac:	443b      	add	r3, r7
 800c7ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c7b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <find_volume+0x1a2>
 800c7ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7be:	f7ff fedb 	bl	800c578 <check_fs>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	e000      	b.n	800c7c8 <find_volume+0x1a4>
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c7cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d905      	bls.n	800c7e0 <find_volume+0x1bc>
 800c7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	643b      	str	r3, [r7, #64]	; 0x40
 800c7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d9e2      	bls.n	800c7a6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c7e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	d101      	bne.n	800c7ec <find_volume+0x1c8>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e194      	b.n	800cb16 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c7ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d901      	bls.n	800c7f8 <find_volume+0x1d4>
 800c7f4:	230d      	movs	r3, #13
 800c7f6:	e18e      	b.n	800cb16 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	3338      	adds	r3, #56	; 0x38
 800c7fc:	330b      	adds	r3, #11
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fd ffb2 	bl	800a768 <ld_word>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	899b      	ldrh	r3, [r3, #12]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d001      	beq.n	800c814 <find_volume+0x1f0>
 800c810:	230d      	movs	r3, #13
 800c812:	e180      	b.n	800cb16 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	3338      	adds	r3, #56	; 0x38
 800c818:	3316      	adds	r3, #22
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fd ffa4 	bl	800a768 <ld_word>
 800c820:	4603      	mov	r3, r0
 800c822:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <find_volume+0x214>
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	3338      	adds	r3, #56	; 0x38
 800c82e:	3324      	adds	r3, #36	; 0x24
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd ffb1 	bl	800a798 <ld_dword>
 800c836:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c83c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	789b      	ldrb	r3, [r3, #2]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d005      	beq.n	800c85c <find_volume+0x238>
 800c850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c852:	789b      	ldrb	r3, [r3, #2]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d001      	beq.n	800c85c <find_volume+0x238>
 800c858:	230d      	movs	r3, #13
 800c85a:	e15c      	b.n	800cb16 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	789b      	ldrb	r3, [r3, #2]
 800c860:	461a      	mov	r2, r3
 800c862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c864:	fb02 f303 	mul.w	r3, r2, r3
 800c868:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c870:	b29a      	uxth	r2, r3
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	895b      	ldrh	r3, [r3, #10]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d008      	beq.n	800c890 <find_volume+0x26c>
 800c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c880:	895b      	ldrh	r3, [r3, #10]
 800c882:	461a      	mov	r2, r3
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	895b      	ldrh	r3, [r3, #10]
 800c888:	3b01      	subs	r3, #1
 800c88a:	4013      	ands	r3, r2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <find_volume+0x270>
 800c890:	230d      	movs	r3, #13
 800c892:	e140      	b.n	800cb16 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	3338      	adds	r3, #56	; 0x38
 800c898:	3311      	adds	r3, #17
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fd ff64 	bl	800a768 <ld_word>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	891b      	ldrh	r3, [r3, #8]
 800c8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8ae:	8992      	ldrh	r2, [r2, #12]
 800c8b0:	0952      	lsrs	r2, r2, #5
 800c8b2:	b292      	uxth	r2, r2
 800c8b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8b8:	fb01 f202 	mul.w	r2, r1, r2
 800c8bc:	1a9b      	subs	r3, r3, r2
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <find_volume+0x2a8>
 800c8c4:	230d      	movs	r3, #13
 800c8c6:	e126      	b.n	800cb16 <find_volume+0x4f2>
 800c8c8:	2400343c 	.word	0x2400343c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	3338      	adds	r3, #56	; 0x38
 800c8d0:	3313      	adds	r3, #19
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fd ff48 	bl	800a768 <ld_word>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c8dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d106      	bne.n	800c8f0 <find_volume+0x2cc>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	3338      	adds	r3, #56	; 0x38
 800c8e6:	3320      	adds	r3, #32
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7fd ff55 	bl	800a798 <ld_dword>
 800c8ee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	3338      	adds	r3, #56	; 0x38
 800c8f4:	330e      	adds	r3, #14
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fd ff36 	bl	800a768 <ld_word>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c900:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <find_volume+0x2e6>
 800c906:	230d      	movs	r3, #13
 800c908:	e105      	b.n	800cb16 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c90a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c90e:	4413      	add	r3, r2
 800c910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c912:	8911      	ldrh	r1, [r2, #8]
 800c914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c916:	8992      	ldrh	r2, [r2, #12]
 800c918:	0952      	lsrs	r2, r2, #5
 800c91a:	b292      	uxth	r2, r2
 800c91c:	fbb1 f2f2 	udiv	r2, r1, r2
 800c920:	b292      	uxth	r2, r2
 800c922:	4413      	add	r3, r2
 800c924:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d201      	bcs.n	800c932 <find_volume+0x30e>
 800c92e:	230d      	movs	r3, #13
 800c930:	e0f1      	b.n	800cb16 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c93a:	8952      	ldrh	r2, [r2, #10]
 800c93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <find_volume+0x328>
 800c948:	230d      	movs	r3, #13
 800c94a:	e0e4      	b.n	800cb16 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c94c:	2303      	movs	r3, #3
 800c94e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c958:	4293      	cmp	r3, r2
 800c95a:	d802      	bhi.n	800c962 <find_volume+0x33e>
 800c95c:	2302      	movs	r3, #2
 800c95e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c968:	4293      	cmp	r3, r2
 800c96a:	d802      	bhi.n	800c972 <find_volume+0x34e>
 800c96c:	2301      	movs	r3, #1
 800c96e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	1c9a      	adds	r2, r3, #2
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c97e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c980:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c984:	441a      	add	r2, r3
 800c986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c988:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c98a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	441a      	add	r2, r3
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c998:	2b03      	cmp	r3, #3
 800c99a:	d11e      	bne.n	800c9da <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	3338      	adds	r3, #56	; 0x38
 800c9a0:	332a      	adds	r3, #42	; 0x2a
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fd fee0 	bl	800a768 <ld_word>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <find_volume+0x38e>
 800c9ae:	230d      	movs	r3, #13
 800c9b0:	e0b1      	b.n	800cb16 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	891b      	ldrh	r3, [r3, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <find_volume+0x39a>
 800c9ba:	230d      	movs	r3, #13
 800c9bc:	e0ab      	b.n	800cb16 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	3338      	adds	r3, #56	; 0x38
 800c9c2:	332c      	adds	r3, #44	; 0x2c
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fee7 	bl	800a798 <ld_dword>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	69db      	ldr	r3, [r3, #28]
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c9d8:	e01f      	b.n	800ca1a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	891b      	ldrh	r3, [r3, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <find_volume+0x3c2>
 800c9e2:	230d      	movs	r3, #13
 800c9e4:	e097      	b.n	800cb16 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ec:	441a      	add	r2, r3
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c9f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d103      	bne.n	800ca02 <find_volume+0x3de>
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fc:	69db      	ldr	r3, [r3, #28]
 800c9fe:	005b      	lsls	r3, r3, #1
 800ca00:	e00a      	b.n	800ca18 <find_volume+0x3f4>
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	69da      	ldr	r2, [r3, #28]
 800ca06:	4613      	mov	r3, r2
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	085a      	lsrs	r2, r3, #1
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ca18:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	6a1a      	ldr	r2, [r3, #32]
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	899b      	ldrh	r3, [r3, #12]
 800ca22:	4619      	mov	r1, r3
 800ca24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca26:	440b      	add	r3, r1
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca2c:	8989      	ldrh	r1, [r1, #12]
 800ca2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d201      	bcs.n	800ca3a <find_volume+0x416>
 800ca36:	230d      	movs	r3, #13
 800ca38:	e06d      	b.n	800cb16 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca40:	619a      	str	r2, [r3, #24]
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	699a      	ldr	r2, [r3, #24]
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	2280      	movs	r2, #128	; 0x80
 800ca4e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ca50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	d149      	bne.n	800caec <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	3338      	adds	r3, #56	; 0x38
 800ca5c:	3330      	adds	r3, #48	; 0x30
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fd fe82 	bl	800a768 <ld_word>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d140      	bne.n	800caec <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ca6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca72:	f7fe f929 	bl	800acc8 <move_window>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d137      	bne.n	800caec <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	2200      	movs	r2, #0
 800ca80:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	3338      	adds	r3, #56	; 0x38
 800ca86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fd fe6c 	bl	800a768 <ld_word>
 800ca90:	4603      	mov	r3, r0
 800ca92:	461a      	mov	r2, r3
 800ca94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d127      	bne.n	800caec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	3338      	adds	r3, #56	; 0x38
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fd fe79 	bl	800a798 <ld_dword>
 800caa6:	4603      	mov	r3, r0
 800caa8:	4a1d      	ldr	r2, [pc, #116]	; (800cb20 <find_volume+0x4fc>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d11e      	bne.n	800caec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	3338      	adds	r3, #56	; 0x38
 800cab2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fd fe6e 	bl	800a798 <ld_dword>
 800cabc:	4603      	mov	r3, r0
 800cabe:	4a19      	ldr	r2, [pc, #100]	; (800cb24 <find_volume+0x500>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d113      	bne.n	800caec <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac6:	3338      	adds	r3, #56	; 0x38
 800cac8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fd fe63 	bl	800a798 <ld_dword>
 800cad2:	4602      	mov	r2, r0
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	3338      	adds	r3, #56	; 0x38
 800cadc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fd fe59 	bl	800a798 <ld_dword>
 800cae6:	4602      	mov	r2, r0
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800caf2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800caf4:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <find_volume+0x504>)
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	3301      	adds	r3, #1
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <find_volume+0x504>)
 800cafe:	801a      	strh	r2, [r3, #0]
 800cb00:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <find_volume+0x504>)
 800cb02:	881a      	ldrh	r2, [r3, #0]
 800cb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb06:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	4a08      	ldr	r2, [pc, #32]	; (800cb2c <find_volume+0x508>)
 800cb0c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cb0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb10:	f7fe f872 	bl	800abf8 <clear_lock>
#endif
	return FR_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3758      	adds	r7, #88	; 0x58
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	41615252 	.word	0x41615252
 800cb24:	61417272 	.word	0x61417272
 800cb28:	24003440 	.word	0x24003440
 800cb2c:	24003464 	.word	0x24003464

0800cb30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cb3a:	2309      	movs	r3, #9
 800cb3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d01c      	beq.n	800cb7e <validate+0x4e>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d018      	beq.n	800cb7e <validate+0x4e>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d013      	beq.n	800cb7e <validate+0x4e>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	889a      	ldrh	r2, [r3, #4]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	88db      	ldrh	r3, [r3, #6]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d10c      	bne.n	800cb7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	785b      	ldrb	r3, [r3, #1]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fd fd5e 	bl	800a62c <disk_status>
 800cb70:	4603      	mov	r3, r0
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <validate+0x4e>
			res = FR_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d102      	bne.n	800cb8a <validate+0x5a>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	e000      	b.n	800cb8c <validate+0x5c>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	6013      	str	r3, [r2, #0]
	return res;
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4613      	mov	r3, r2
 800cba8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cbae:	f107 0310 	add.w	r3, r7, #16
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7ff fc9c 	bl	800c4f0 <get_ldnumber>
 800cbb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	da01      	bge.n	800cbc4 <f_mount+0x28>
 800cbc0:	230b      	movs	r3, #11
 800cbc2:	e02b      	b.n	800cc1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cbc4:	4a17      	ldr	r2, [pc, #92]	; (800cc24 <f_mount+0x88>)
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cbd4:	69b8      	ldr	r0, [r7, #24]
 800cbd6:	f7fe f80f 	bl	800abf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	490d      	ldr	r1, [pc, #52]	; (800cc24 <f_mount+0x88>)
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <f_mount+0x66>
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d001      	beq.n	800cc06 <f_mount+0x6a>
 800cc02:	2300      	movs	r3, #0
 800cc04:	e00a      	b.n	800cc1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cc06:	f107 010c 	add.w	r1, r7, #12
 800cc0a:	f107 0308 	add.w	r3, r7, #8
 800cc0e:	2200      	movs	r2, #0
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff fd07 	bl	800c624 <find_volume>
 800cc16:	4603      	mov	r3, r0
 800cc18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	2400343c 	.word	0x2400343c

0800cc28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b09a      	sub	sp, #104	; 0x68
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <f_open+0x18>
 800cc3c:	2309      	movs	r3, #9
 800cc3e:	e1bb      	b.n	800cfb8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cc48:	79fa      	ldrb	r2, [r7, #7]
 800cc4a:	f107 0114 	add.w	r1, r7, #20
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fce6 	bl	800c624 <find_volume>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cc5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f040 819f 	bne.w	800cfa6 <f_open+0x37e>
		dj.obj.fs = fs;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	f107 0318 	add.w	r3, r7, #24
 800cc72:	4611      	mov	r1, r2
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7ff fbc5 	bl	800c404 <follow_path>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cc80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d11a      	bne.n	800ccbe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cc88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cc8c:	b25b      	sxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	da03      	bge.n	800cc9a <f_open+0x72>
				res = FR_INVALID_NAME;
 800cc92:	2306      	movs	r3, #6
 800cc94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cc98:	e011      	b.n	800ccbe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	f023 0301 	bic.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bf14      	ite	ne
 800cca4:	2301      	movne	r3, #1
 800cca6:	2300      	moveq	r3, #0
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	461a      	mov	r2, r3
 800ccac:	f107 0318 	add.w	r3, r7, #24
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fd fe58 	bl	800a968 <chk_lock>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ccbe:	79fb      	ldrb	r3, [r7, #7]
 800ccc0:	f003 031c 	and.w	r3, r3, #28
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d07f      	beq.n	800cdc8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ccc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d017      	beq.n	800cd00 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ccd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ccd4:	2b04      	cmp	r3, #4
 800ccd6:	d10e      	bne.n	800ccf6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ccd8:	f7fd fea2 	bl	800aa20 <enq_lock>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d006      	beq.n	800ccf0 <f_open+0xc8>
 800cce2:	f107 0318 	add.w	r3, r7, #24
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fe fffe 	bl	800bce8 <dir_register>
 800ccec:	4603      	mov	r3, r0
 800ccee:	e000      	b.n	800ccf2 <f_open+0xca>
 800ccf0:	2312      	movs	r3, #18
 800ccf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	f043 0308 	orr.w	r3, r3, #8
 800ccfc:	71fb      	strb	r3, [r7, #7]
 800ccfe:	e010      	b.n	800cd22 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cd00:	7fbb      	ldrb	r3, [r7, #30]
 800cd02:	f003 0311 	and.w	r3, r3, #17
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <f_open+0xea>
					res = FR_DENIED;
 800cd0a:	2307      	movs	r3, #7
 800cd0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cd10:	e007      	b.n	800cd22 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <f_open+0xfa>
 800cd1c:	2308      	movs	r3, #8
 800cd1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d168      	bne.n	800cdfc <f_open+0x1d4>
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	f003 0308 	and.w	r3, r3, #8
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d063      	beq.n	800cdfc <f_open+0x1d4>
				dw = GET_FATTIME();
 800cd34:	f7fd fa3c 	bl	800a1b0 <get_fattime>
 800cd38:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	330e      	adds	r3, #14
 800cd3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fd fd67 	bl	800a814 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	3316      	adds	r3, #22
 800cd4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fd fd61 	bl	800a814 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	330b      	adds	r3, #11
 800cd56:	2220      	movs	r2, #32
 800cd58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe fd39 	bl	800b7d8 <ld_clust>
 800cd66:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fd51 	bl	800b816 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	331c      	adds	r3, #28
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fd fd4a 	bl	800a814 <st_dword>
					fs->wflag = 1;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	2201      	movs	r2, #1
 800cd84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cd86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d037      	beq.n	800cdfc <f_open+0x1d4>
						dw = fs->winsect;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd90:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cd92:	f107 0318 	add.w	r3, r7, #24
 800cd96:	2200      	movs	r2, #0
 800cd98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fa41 	bl	800b222 <remove_chain>
 800cda0:	4603      	mov	r3, r0
 800cda2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800cda6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d126      	bne.n	800cdfc <f_open+0x1d4>
							res = move_window(fs, dw);
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fd ff88 	bl	800acc8 <move_window>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdc2:	3a01      	subs	r2, #1
 800cdc4:	615a      	str	r2, [r3, #20]
 800cdc6:	e019      	b.n	800cdfc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cdc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d115      	bne.n	800cdfc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cdd0:	7fbb      	ldrb	r3, [r7, #30]
 800cdd2:	f003 0310 	and.w	r3, r3, #16
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d003      	beq.n	800cde2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cdda:	2304      	movs	r3, #4
 800cddc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cde0:	e00c      	b.n	800cdfc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cde2:	79fb      	ldrb	r3, [r7, #7]
 800cde4:	f003 0302 	and.w	r3, r3, #2
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d007      	beq.n	800cdfc <f_open+0x1d4>
 800cdec:	7fbb      	ldrb	r3, [r7, #30]
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d002      	beq.n	800cdfc <f_open+0x1d4>
						res = FR_DENIED;
 800cdf6:	2307      	movs	r3, #7
 800cdf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cdfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d128      	bne.n	800ce56 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce04:	79fb      	ldrb	r3, [r7, #7]
 800ce06:	f003 0308 	and.w	r3, r3, #8
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d003      	beq.n	800ce16 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ce1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	f023 0301 	bic.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bf14      	ite	ne
 800ce2e:	2301      	movne	r3, #1
 800ce30:	2300      	moveq	r3, #0
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	461a      	mov	r2, r3
 800ce36:	f107 0318 	add.w	r3, r7, #24
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fd fe11 	bl	800aa64 <inc_lock>
 800ce42:	4602      	mov	r2, r0
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <f_open+0x22e>
 800ce50:	2302      	movs	r3, #2
 800ce52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ce56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f040 80a3 	bne.w	800cfa6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce64:	4611      	mov	r1, r2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe fcb6 	bl	800b7d8 <ld_clust>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	331c      	adds	r3, #28
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fd fc8e 	bl	800a798 <ld_dword>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	88da      	ldrh	r2, [r3, #6]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	79fa      	ldrb	r2, [r7, #7]
 800ce9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3330      	adds	r3, #48	; 0x30
 800ceb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fd fcf8 	bl	800a8ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	f003 0320 	and.w	r3, r3, #32
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d06e      	beq.n	800cfa6 <f_open+0x37e>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d06a      	beq.n	800cfa6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	68da      	ldr	r2, [r3, #12]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	895b      	ldrh	r3, [r3, #10]
 800cedc:	461a      	mov	r2, r3
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	899b      	ldrh	r3, [r3, #12]
 800cee2:	fb02 f303 	mul.w	r3, r2, r3
 800cee6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cef4:	e016      	b.n	800cf24 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd ffa1 	bl	800ae42 <get_fat>
 800cf00:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cf02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d802      	bhi.n	800cf0e <f_open+0x2e6>
 800cf08:	2302      	movs	r3, #2
 800cf0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cf0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf14:	d102      	bne.n	800cf1c <f_open+0x2f4>
 800cf16:	2301      	movs	r3, #1
 800cf18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cf1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d103      	bne.n	800cf34 <f_open+0x30c>
 800cf2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d8e0      	bhi.n	800cef6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cf3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d131      	bne.n	800cfa6 <f_open+0x37e>
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	899b      	ldrh	r3, [r3, #12]
 800cf46:	461a      	mov	r2, r3
 800cf48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf4e:	fb01 f202 	mul.w	r2, r1, r2
 800cf52:	1a9b      	subs	r3, r3, r2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d026      	beq.n	800cfa6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fd ff51 	bl	800ae04 <clust2sect>
 800cf62:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cf64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d103      	bne.n	800cf72 <f_open+0x34a>
						res = FR_INT_ERR;
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cf70:	e019      	b.n	800cfa6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	899b      	ldrh	r3, [r3, #12]
 800cf76:	461a      	mov	r2, r3
 800cf78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	7858      	ldrb	r0, [r3, #1]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a1a      	ldr	r2, [r3, #32]
 800cf94:	2301      	movs	r3, #1
 800cf96:	f7fd fb89 	bl	800a6ac <disk_read>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <f_open+0x37e>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cfa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <f_open+0x38c>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cfb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3768      	adds	r7, #104	; 0x68
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b08c      	sub	sp, #48	; 0x30
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
 800cfcc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f107 0210 	add.w	r2, r7, #16
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fda5 	bl	800cb30 <validate>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d107      	bne.n	800d004 <f_write+0x44>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	7d5b      	ldrb	r3, [r3, #21]
 800cff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <f_write+0x4a>
 800d004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d008:	e16a      	b.n	800d2e0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	7d1b      	ldrb	r3, [r3, #20]
 800d00e:	f003 0302 	and.w	r3, r3, #2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <f_write+0x5a>
 800d016:	2307      	movs	r3, #7
 800d018:	e162      	b.n	800d2e0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	699a      	ldr	r2, [r3, #24]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	441a      	add	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	429a      	cmp	r2, r3
 800d028:	f080 814c 	bcs.w	800d2c4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	43db      	mvns	r3, r3
 800d032:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d034:	e146      	b.n	800d2c4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	693a      	ldr	r2, [r7, #16]
 800d03c:	8992      	ldrh	r2, [r2, #12]
 800d03e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d042:	fb01 f202 	mul.w	r2, r1, r2
 800d046:	1a9b      	subs	r3, r3, r2
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f040 80f1 	bne.w	800d230 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	8992      	ldrh	r2, [r2, #12]
 800d056:	fbb3 f3f2 	udiv	r3, r3, r2
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	8952      	ldrh	r2, [r2, #10]
 800d05e:	3a01      	subs	r2, #1
 800d060:	4013      	ands	r3, r2
 800d062:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d143      	bne.n	800d0f2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10c      	bne.n	800d08c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d11a      	bne.n	800d0b4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2100      	movs	r1, #0
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe f932 	bl	800b2ec <create_chain>
 800d088:	62b8      	str	r0, [r7, #40]	; 0x28
 800d08a:	e013      	b.n	800d0b4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d007      	beq.n	800d0a4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	4619      	mov	r1, r3
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f7fe f9be 	bl	800b41c <clmt_clust>
 800d0a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d0a2:	e007      	b.n	800d0b4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7fe f91d 	bl	800b2ec <create_chain>
 800d0b2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f000 8109 	beq.w	800d2ce <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d104      	bne.n	800d0cc <f_write+0x10c>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	755a      	strb	r2, [r3, #21]
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	e109      	b.n	800d2e0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d2:	d104      	bne.n	800d0de <f_write+0x11e>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	755a      	strb	r2, [r3, #21]
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e100      	b.n	800d2e0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d102      	bne.n	800d0f2 <f_write+0x132>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0f0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	7d1b      	ldrb	r3, [r3, #20]
 800d0f6:	b25b      	sxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	da18      	bge.n	800d12e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	7858      	ldrb	r0, [r3, #1]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6a1a      	ldr	r2, [r3, #32]
 800d10a:	2301      	movs	r3, #1
 800d10c:	f7fd faee 	bl	800a6ec <disk_write>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d004      	beq.n	800d120 <f_write+0x160>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	755a      	strb	r2, [r3, #21]
 800d11c:	2301      	movs	r3, #1
 800d11e:	e0df      	b.n	800d2e0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	7d1b      	ldrb	r3, [r3, #20]
 800d124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	69db      	ldr	r3, [r3, #28]
 800d134:	4619      	mov	r1, r3
 800d136:	4610      	mov	r0, r2
 800d138:	f7fd fe64 	bl	800ae04 <clust2sect>
 800d13c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d104      	bne.n	800d14e <f_write+0x18e>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2202      	movs	r2, #2
 800d148:	755a      	strb	r2, [r3, #21]
 800d14a:	2302      	movs	r3, #2
 800d14c:	e0c8      	b.n	800d2e0 <f_write+0x320>
			sect += csect;
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	4413      	add	r3, r2
 800d154:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	899b      	ldrh	r3, [r3, #12]
 800d15a:	461a      	mov	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d162:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d043      	beq.n	800d1f2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d16a:	69ba      	ldr	r2, [r7, #24]
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	4413      	add	r3, r2
 800d170:	693a      	ldr	r2, [r7, #16]
 800d172:	8952      	ldrh	r2, [r2, #10]
 800d174:	4293      	cmp	r3, r2
 800d176:	d905      	bls.n	800d184 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	895b      	ldrh	r3, [r3, #10]
 800d17c:	461a      	mov	r2, r3
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	7858      	ldrb	r0, [r3, #1]
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	69f9      	ldr	r1, [r7, #28]
 800d18e:	f7fd faad 	bl	800a6ec <disk_write>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <f_write+0x1e2>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2201      	movs	r2, #1
 800d19c:	755a      	strb	r2, [r3, #21]
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e09e      	b.n	800d2e0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6a1a      	ldr	r2, [r3, #32]
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	6a3a      	ldr	r2, [r7, #32]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d918      	bls.n	800d1e2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6a1a      	ldr	r2, [r3, #32]
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	8992      	ldrh	r2, [r2, #12]
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	69fa      	ldr	r2, [r7, #28]
 800d1c8:	18d1      	adds	r1, r2, r3
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	899b      	ldrh	r3, [r3, #12]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f7fd fb4c 	bl	800a86c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	7d1b      	ldrb	r3, [r3, #20]
 800d1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	899b      	ldrh	r3, [r3, #12]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	fb02 f303 	mul.w	r3, r2, r3
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d1f0:	e04b      	b.n	800d28a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d016      	beq.n	800d22a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	699a      	ldr	r2, [r3, #24]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d204:	429a      	cmp	r2, r3
 800d206:	d210      	bcs.n	800d22a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	7858      	ldrb	r0, [r3, #1]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d212:	2301      	movs	r3, #1
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	f7fd fa49 	bl	800a6ac <disk_read>
 800d21a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2201      	movs	r2, #1
 800d224:	755a      	strb	r2, [r3, #21]
 800d226:	2301      	movs	r3, #1
 800d228:	e05a      	b.n	800d2e0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	899b      	ldrh	r3, [r3, #12]
 800d234:	4618      	mov	r0, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	693a      	ldr	r2, [r7, #16]
 800d23c:	8992      	ldrh	r2, [r2, #12]
 800d23e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d242:	fb01 f202 	mul.w	r2, r1, r2
 800d246:	1a9b      	subs	r3, r3, r2
 800d248:	1ac3      	subs	r3, r0, r3
 800d24a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d901      	bls.n	800d258 <f_write+0x298>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	8992      	ldrh	r2, [r2, #12]
 800d266:	fbb3 f0f2 	udiv	r0, r3, r2
 800d26a:	fb00 f202 	mul.w	r2, r0, r2
 800d26e:	1a9b      	subs	r3, r3, r2
 800d270:	440b      	add	r3, r1
 800d272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d274:	69f9      	ldr	r1, [r7, #28]
 800d276:	4618      	mov	r0, r3
 800d278:	f7fd faf8 	bl	800a86c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	7d1b      	ldrb	r3, [r3, #20]
 800d280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d284:	b2da      	uxtb	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d28a:	69fa      	ldr	r2, [r7, #28]
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	4413      	add	r3, r2
 800d290:	61fb      	str	r3, [r7, #28]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	699a      	ldr	r2, [r3, #24]
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	441a      	add	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	619a      	str	r2, [r3, #24]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	68da      	ldr	r2, [r3, #12]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	699b      	ldr	r3, [r3, #24]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	bf38      	it	cc
 800d2aa:	461a      	movcc	r2, r3
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	60da      	str	r2, [r3, #12]
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	441a      	add	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f47f aeb5 	bne.w	800d036 <f_write+0x76>
 800d2cc:	e000      	b.n	800d2d0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2ce:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	7d1b      	ldrb	r3, [r3, #20]
 800d2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3730      	adds	r7, #48	; 0x30
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f107 0208 	add.w	r2, r7, #8
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff fc19 	bl	800cb30 <validate>
 800d2fe:	4603      	mov	r3, r0
 800d300:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d302:	7dfb      	ldrb	r3, [r7, #23]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d168      	bne.n	800d3da <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7d1b      	ldrb	r3, [r3, #20]
 800d30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d310:	2b00      	cmp	r3, #0
 800d312:	d062      	beq.n	800d3da <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	7d1b      	ldrb	r3, [r3, #20]
 800d318:	b25b      	sxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	da15      	bge.n	800d34a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	7858      	ldrb	r0, [r3, #1]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a1a      	ldr	r2, [r3, #32]
 800d32c:	2301      	movs	r3, #1
 800d32e:	f7fd f9dd 	bl	800a6ec <disk_write>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d001      	beq.n	800d33c <f_sync+0x54>
 800d338:	2301      	movs	r3, #1
 800d33a:	e04f      	b.n	800d3dc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7d1b      	ldrb	r3, [r3, #20]
 800d340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d344:	b2da      	uxtb	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d34a:	f7fc ff31 	bl	800a1b0 <get_fattime>
 800d34e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7fd fcb5 	bl	800acc8 <move_window>
 800d35e:	4603      	mov	r3, r0
 800d360:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d138      	bne.n	800d3da <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	330b      	adds	r3, #11
 800d372:	781a      	ldrb	r2, [r3, #0]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	330b      	adds	r3, #11
 800d378:	f042 0220 	orr.w	r2, r2, #32
 800d37c:	b2d2      	uxtb	r2, r2
 800d37e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	461a      	mov	r2, r3
 800d38a:	68f9      	ldr	r1, [r7, #12]
 800d38c:	f7fe fa43 	bl	800b816 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f103 021c 	add.w	r2, r3, #28
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f7fd fa39 	bl	800a814 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3316      	adds	r3, #22
 800d3a6:	6939      	ldr	r1, [r7, #16]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7fd fa33 	bl	800a814 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3312      	adds	r3, #18
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fd fa12 	bl	800a7de <st_word>
					fs->wflag = 1;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fcae 	bl	800ad24 <sync_fs>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
 800d3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3718      	adds	r7, #24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7ff ff7b 	bl	800d2e8 <f_sync>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d118      	bne.n	800d42e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f107 0208 	add.w	r2, r7, #8
 800d402:	4611      	mov	r1, r2
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff fb93 	bl	800cb30 <validate>
 800d40a:	4603      	mov	r3, r0
 800d40c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10c      	bne.n	800d42e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fd fbb1 	bl	800ab80 <dec_lock>
 800d41e:	4603      	mov	r3, r0
 800d420:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d422:	7bfb      	ldrb	r3, [r7, #15]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d102      	bne.n	800d42e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b090      	sub	sp, #64	; 0x40
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f107 0208 	add.w	r2, r7, #8
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff fb70 	bl	800cb30 <validate>
 800d450:	4603      	mov	r3, r0
 800d452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d103      	bne.n	800d466 <f_lseek+0x2e>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7d5b      	ldrb	r3, [r3, #21]
 800d462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d466:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d002      	beq.n	800d474 <f_lseek+0x3c>
 800d46e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d472:	e201      	b.n	800d878 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 80d9 	beq.w	800d630 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d484:	d15a      	bne.n	800d53c <f_lseek+0x104>
			tbl = fp->cltbl;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	1d1a      	adds	r2, r3, #4
 800d490:	627a      	str	r2, [r7, #36]	; 0x24
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	2302      	movs	r3, #2
 800d498:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d03a      	beq.n	800d51c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	3302      	adds	r3, #2
 800d4b2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fd fcbd 	bl	800ae42 <get_fat>
 800d4c8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d804      	bhi.n	800d4da <f_lseek+0xa2>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	755a      	strb	r2, [r3, #21]
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e1ce      	b.n	800d878 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d104      	bne.n	800d4ec <f_lseek+0xb4>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	755a      	strb	r2, [r3, #21]
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e1c5      	b.n	800d878 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d0de      	beq.n	800d4b4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d809      	bhi.n	800d512 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d500:	1d1a      	adds	r2, r3, #4
 800d502:	627a      	str	r2, [r7, #36]	; 0x24
 800d504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	1d1a      	adds	r2, r3, #4
 800d50c:	627a      	str	r2, [r7, #36]	; 0x24
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d518:	429a      	cmp	r2, r3
 800d51a:	d3c4      	bcc.n	800d4a6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d522:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d803      	bhi.n	800d534 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	e19f      	b.n	800d874 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d534:	2311      	movs	r3, #17
 800d536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d53a:	e19b      	b.n	800d874 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d902      	bls.n	800d54c <f_lseek+0x114>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 818d 	beq.w	800d874 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	3b01      	subs	r3, #1
 800d55e:	4619      	mov	r1, r3
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7fd ff5b 	bl	800b41c <clmt_clust>
 800d566:	4602      	mov	r2, r0
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	4619      	mov	r1, r3
 800d574:	4610      	mov	r0, r2
 800d576:	f7fd fc45 	bl	800ae04 <clust2sect>
 800d57a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d104      	bne.n	800d58c <f_lseek+0x154>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2202      	movs	r2, #2
 800d586:	755a      	strb	r2, [r3, #21]
 800d588:	2302      	movs	r3, #2
 800d58a:	e175      	b.n	800d878 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	3b01      	subs	r3, #1
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	8992      	ldrh	r2, [r2, #12]
 800d594:	fbb3 f3f2 	udiv	r3, r3, r2
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	8952      	ldrh	r2, [r2, #10]
 800d59c:	3a01      	subs	r2, #1
 800d59e:	4013      	ands	r3, r2
 800d5a0:	69ba      	ldr	r2, [r7, #24]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	8992      	ldrh	r2, [r2, #12]
 800d5ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5b2:	fb01 f202 	mul.w	r2, r1, r2
 800d5b6:	1a9b      	subs	r3, r3, r2
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 815b 	beq.w	800d874 <f_lseek+0x43c>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	69ba      	ldr	r2, [r7, #24]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	f000 8155 	beq.w	800d874 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7d1b      	ldrb	r3, [r3, #20]
 800d5ce:	b25b      	sxtb	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	da18      	bge.n	800d606 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	7858      	ldrb	r0, [r3, #1]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a1a      	ldr	r2, [r3, #32]
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	f7fd f882 	bl	800a6ec <disk_write>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <f_lseek+0x1c0>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	755a      	strb	r2, [r3, #21]
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e13f      	b.n	800d878 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7d1b      	ldrb	r3, [r3, #20]
 800d5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d600:	b2da      	uxtb	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	7858      	ldrb	r0, [r3, #1]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d610:	2301      	movs	r3, #1
 800d612:	69ba      	ldr	r2, [r7, #24]
 800d614:	f7fd f84a 	bl	800a6ac <disk_read>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d004      	beq.n	800d628 <f_lseek+0x1f0>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	755a      	strb	r2, [r3, #21]
 800d624:	2301      	movs	r3, #1
 800d626:	e127      	b.n	800d878 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	621a      	str	r2, [r3, #32]
 800d62e:	e121      	b.n	800d874 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d908      	bls.n	800d64c <f_lseek+0x214>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7d1b      	ldrb	r3, [r3, #20]
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d652:	2300      	movs	r3, #0
 800d654:	637b      	str	r3, [r7, #52]	; 0x34
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d65a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 80b5 	beq.w	800d7ce <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	895b      	ldrh	r3, [r3, #10]
 800d668:	461a      	mov	r2, r3
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	899b      	ldrh	r3, [r3, #12]
 800d66e:	fb02 f303 	mul.w	r3, r2, r3
 800d672:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d01b      	beq.n	800d6b2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	1e5a      	subs	r2, r3, #1
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	fbb2 f2f3 	udiv	r2, r2, r3
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	1e59      	subs	r1, r3, #1
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d68e:	429a      	cmp	r2, r3
 800d690:	d30f      	bcc.n	800d6b2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	1e5a      	subs	r2, r3, #1
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	425b      	negs	r3, r3
 800d69a:	401a      	ands	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6b0:	e022      	b.n	800d6f8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d119      	bne.n	800d6f2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fd fe12 	bl	800b2ec <create_chain>
 800d6c8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d104      	bne.n	800d6da <f_lseek+0x2a2>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	755a      	strb	r2, [r3, #21]
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e0ce      	b.n	800d878 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e0:	d104      	bne.n	800d6ec <f_lseek+0x2b4>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	755a      	strb	r2, [r3, #21]
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e0c5      	b.n	800d878 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6f0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6f6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d067      	beq.n	800d7ce <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d6fe:	e03a      	b.n	800d776 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	603b      	str	r3, [r7, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	699a      	ldr	r2, [r3, #24]
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	441a      	add	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7d1b      	ldrb	r3, [r3, #20]
 800d718:	f003 0302 	and.w	r3, r3, #2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00b      	beq.n	800d738 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d724:	4618      	mov	r0, r3
 800d726:	f7fd fde1 	bl	800b2ec <create_chain>
 800d72a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d108      	bne.n	800d744 <f_lseek+0x30c>
							ofs = 0; break;
 800d732:	2300      	movs	r3, #0
 800d734:	603b      	str	r3, [r7, #0]
 800d736:	e022      	b.n	800d77e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fd fb80 	bl	800ae42 <get_fat>
 800d742:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74a:	d104      	bne.n	800d756 <f_lseek+0x31e>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	755a      	strb	r2, [r3, #21]
 800d752:	2301      	movs	r3, #1
 800d754:	e090      	b.n	800d878 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d904      	bls.n	800d766 <f_lseek+0x32e>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	69db      	ldr	r3, [r3, #28]
 800d760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d762:	429a      	cmp	r2, r3
 800d764:	d304      	bcc.n	800d770 <f_lseek+0x338>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2202      	movs	r2, #2
 800d76a:	755a      	strb	r2, [r3, #21]
 800d76c:	2302      	movs	r3, #2
 800d76e:	e083      	b.n	800d878 <f_lseek+0x440>
					fp->clust = clst;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d774:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d8c0      	bhi.n	800d700 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	699a      	ldr	r2, [r3, #24]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	441a      	add	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	899b      	ldrh	r3, [r3, #12]
 800d78e:	461a      	mov	r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	fbb3 f1f2 	udiv	r1, r3, r2
 800d796:	fb01 f202 	mul.w	r2, r1, r2
 800d79a:	1a9b      	subs	r3, r3, r2
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d016      	beq.n	800d7ce <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fd fb2d 	bl	800ae04 <clust2sect>
 800d7aa:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d104      	bne.n	800d7bc <f_lseek+0x384>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	755a      	strb	r2, [r3, #21]
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	e05d      	b.n	800d878 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	899b      	ldrh	r3, [r3, #12]
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7ca:	4413      	add	r3, r2
 800d7cc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	699a      	ldr	r2, [r3, #24]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d90a      	bls.n	800d7f0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	699a      	ldr	r2, [r3, #24]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	7d1b      	ldrb	r3, [r3, #20]
 800d7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	8992      	ldrh	r2, [r2, #12]
 800d7f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7fc:	fb01 f202 	mul.w	r2, r1, r2
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	2b00      	cmp	r3, #0
 800d804:	d036      	beq.n	800d874 <f_lseek+0x43c>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d031      	beq.n	800d874 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	b25b      	sxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	da18      	bge.n	800d84c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	7858      	ldrb	r0, [r3, #1]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a1a      	ldr	r2, [r3, #32]
 800d828:	2301      	movs	r3, #1
 800d82a:	f7fc ff5f 	bl	800a6ec <disk_write>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d004      	beq.n	800d83e <f_lseek+0x406>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	755a      	strb	r2, [r3, #21]
 800d83a:	2301      	movs	r3, #1
 800d83c:	e01c      	b.n	800d878 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	7d1b      	ldrb	r3, [r3, #20]
 800d842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d846:	b2da      	uxtb	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	7858      	ldrb	r0, [r3, #1]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d856:	2301      	movs	r3, #1
 800d858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d85a:	f7fc ff27 	bl	800a6ac <disk_read>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d004      	beq.n	800d86e <f_lseek+0x436>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	755a      	strb	r2, [r3, #21]
 800d86a:	2301      	movs	r3, #1
 800d86c:	e004      	b.n	800d878 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d872:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3740      	adds	r7, #64	; 0x40
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b090      	sub	sp, #64	; 0x40
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d88a:	f107 0108 	add.w	r1, r7, #8
 800d88e:	1d3b      	adds	r3, r7, #4
 800d890:	2200      	movs	r2, #0
 800d892:	4618      	mov	r0, r3
 800d894:	f7fe fec6 	bl	800c624 <find_volume>
 800d898:	4603      	mov	r3, r0
 800d89a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d89e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d11f      	bne.n	800d8e6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	f107 0308 	add.w	r3, r7, #8
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fda8 	bl	800c404 <follow_path>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d8ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d111      	bne.n	800d8e6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d8c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8c6:	b25b      	sxtb	r3, r3
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	da03      	bge.n	800d8d4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d8cc:	2306      	movs	r3, #6
 800d8ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8d2:	e008      	b.n	800d8e6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d005      	beq.n	800d8e6 <f_stat+0x66>
 800d8da:	f107 0308 	add.w	r3, r7, #8
 800d8de:	6839      	ldr	r1, [r7, #0]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fe faf9 	bl	800bed8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d8e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3740      	adds	r7, #64	; 0x40
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b087      	sub	sp, #28
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4613      	mov	r3, r2
 800d900:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d902:	2301      	movs	r3, #1
 800d904:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d90a:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d90c:	7a5b      	ldrb	r3, [r3, #9]
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d131      	bne.n	800d978 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d914:	4b1c      	ldr	r3, [pc, #112]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d916:	7a5b      	ldrb	r3, [r3, #9]
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	461a      	mov	r2, r3
 800d91c:	4b1a      	ldr	r3, [pc, #104]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d91e:	2100      	movs	r1, #0
 800d920:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d922:	4b19      	ldr	r3, [pc, #100]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d924:	7a5b      	ldrb	r3, [r3, #9]
 800d926:	b2db      	uxtb	r3, r3
 800d928:	4a17      	ldr	r2, [pc, #92]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d932:	4b15      	ldr	r3, [pc, #84]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d934:	7a5b      	ldrb	r3, [r3, #9]
 800d936:	b2db      	uxtb	r3, r3
 800d938:	461a      	mov	r2, r3
 800d93a:	4b13      	ldr	r3, [pc, #76]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d93c:	4413      	add	r3, r2
 800d93e:	79fa      	ldrb	r2, [r7, #7]
 800d940:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d942:	4b11      	ldr	r3, [pc, #68]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d944:	7a5b      	ldrb	r3, [r3, #9]
 800d946:	b2db      	uxtb	r3, r3
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	b2d1      	uxtb	r1, r2
 800d94c:	4a0e      	ldr	r2, [pc, #56]	; (800d988 <FATFS_LinkDriverEx+0x94>)
 800d94e:	7251      	strb	r1, [r2, #9]
 800d950:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d952:	7dbb      	ldrb	r3, [r7, #22]
 800d954:	3330      	adds	r3, #48	; 0x30
 800d956:	b2da      	uxtb	r2, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	3301      	adds	r3, #1
 800d960:	223a      	movs	r2, #58	; 0x3a
 800d962:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	3302      	adds	r3, #2
 800d968:	222f      	movs	r2, #47	; 0x2f
 800d96a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	3303      	adds	r3, #3
 800d970:	2200      	movs	r2, #0
 800d972:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	24003664 	.word	0x24003664

0800d98c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d996:	2200      	movs	r2, #0
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff ffaa 	bl	800d8f4 <FATFS_LinkDriverEx>
 800d9a0:	4603      	mov	r3, r0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	6039      	str	r1, [r7, #0]
 800d9b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d9b8:	88fb      	ldrh	r3, [r7, #6]
 800d9ba:	2b7f      	cmp	r3, #127	; 0x7f
 800d9bc:	d802      	bhi.n	800d9c4 <ff_convert+0x18>
		c = chr;
 800d9be:	88fb      	ldrh	r3, [r7, #6]
 800d9c0:	81fb      	strh	r3, [r7, #14]
 800d9c2:	e025      	b.n	800da10 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d9ca:	88fb      	ldrh	r3, [r7, #6]
 800d9cc:	2bff      	cmp	r3, #255	; 0xff
 800d9ce:	d805      	bhi.n	800d9dc <ff_convert+0x30>
 800d9d0:	88fb      	ldrh	r3, [r7, #6]
 800d9d2:	3b80      	subs	r3, #128	; 0x80
 800d9d4:	4a12      	ldr	r2, [pc, #72]	; (800da20 <ff_convert+0x74>)
 800d9d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9da:	e000      	b.n	800d9de <ff_convert+0x32>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	81fb      	strh	r3, [r7, #14]
 800d9e0:	e016      	b.n	800da10 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	81fb      	strh	r3, [r7, #14]
 800d9e6:	e009      	b.n	800d9fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d9e8:	89fb      	ldrh	r3, [r7, #14]
 800d9ea:	4a0d      	ldr	r2, [pc, #52]	; (800da20 <ff_convert+0x74>)
 800d9ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9f0:	88fa      	ldrh	r2, [r7, #6]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d006      	beq.n	800da04 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d9f6:	89fb      	ldrh	r3, [r7, #14]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	81fb      	strh	r3, [r7, #14]
 800d9fc:	89fb      	ldrh	r3, [r7, #14]
 800d9fe:	2b7f      	cmp	r3, #127	; 0x7f
 800da00:	d9f2      	bls.n	800d9e8 <ff_convert+0x3c>
 800da02:	e000      	b.n	800da06 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800da04:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800da06:	89fb      	ldrh	r3, [r7, #14]
 800da08:	3380      	adds	r3, #128	; 0x80
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800da10:	89fb      	ldrh	r3, [r7, #14]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	08011188 	.word	0x08011188

0800da24 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800da2e:	88fb      	ldrh	r3, [r7, #6]
 800da30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da34:	d201      	bcs.n	800da3a <ff_wtoupper+0x16>
 800da36:	4b3e      	ldr	r3, [pc, #248]	; (800db30 <ff_wtoupper+0x10c>)
 800da38:	e000      	b.n	800da3c <ff_wtoupper+0x18>
 800da3a:	4b3e      	ldr	r3, [pc, #248]	; (800db34 <ff_wtoupper+0x110>)
 800da3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	1c9a      	adds	r2, r3, #2
 800da42:	617a      	str	r2, [r7, #20]
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da48:	8a7b      	ldrh	r3, [r7, #18]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d068      	beq.n	800db20 <ff_wtoupper+0xfc>
 800da4e:	88fa      	ldrh	r2, [r7, #6]
 800da50:	8a7b      	ldrh	r3, [r7, #18]
 800da52:	429a      	cmp	r2, r3
 800da54:	d364      	bcc.n	800db20 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	1c9a      	adds	r2, r3, #2
 800da5a:	617a      	str	r2, [r7, #20]
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	823b      	strh	r3, [r7, #16]
 800da60:	8a3b      	ldrh	r3, [r7, #16]
 800da62:	0a1b      	lsrs	r3, r3, #8
 800da64:	81fb      	strh	r3, [r7, #14]
 800da66:	8a3b      	ldrh	r3, [r7, #16]
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800da6c:	88fa      	ldrh	r2, [r7, #6]
 800da6e:	8a79      	ldrh	r1, [r7, #18]
 800da70:	8a3b      	ldrh	r3, [r7, #16]
 800da72:	440b      	add	r3, r1
 800da74:	429a      	cmp	r2, r3
 800da76:	da49      	bge.n	800db0c <ff_wtoupper+0xe8>
			switch (cmd) {
 800da78:	89fb      	ldrh	r3, [r7, #14]
 800da7a:	2b08      	cmp	r3, #8
 800da7c:	d84f      	bhi.n	800db1e <ff_wtoupper+0xfa>
 800da7e:	a201      	add	r2, pc, #4	; (adr r2, 800da84 <ff_wtoupper+0x60>)
 800da80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da84:	0800daa9 	.word	0x0800daa9
 800da88:	0800dabb 	.word	0x0800dabb
 800da8c:	0800dad1 	.word	0x0800dad1
 800da90:	0800dad9 	.word	0x0800dad9
 800da94:	0800dae1 	.word	0x0800dae1
 800da98:	0800dae9 	.word	0x0800dae9
 800da9c:	0800daf1 	.word	0x0800daf1
 800daa0:	0800daf9 	.word	0x0800daf9
 800daa4:	0800db01 	.word	0x0800db01
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800daa8:	88fa      	ldrh	r2, [r7, #6]
 800daaa:	8a7b      	ldrh	r3, [r7, #18]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	4413      	add	r3, r2
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	80fb      	strh	r3, [r7, #6]
 800dab8:	e027      	b.n	800db0a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800daba:	88fa      	ldrh	r2, [r7, #6]
 800dabc:	8a7b      	ldrh	r3, [r7, #18]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	88fa      	ldrh	r2, [r7, #6]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	80fb      	strh	r3, [r7, #6]
 800dace:	e01c      	b.n	800db0a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dad0:	88fb      	ldrh	r3, [r7, #6]
 800dad2:	3b10      	subs	r3, #16
 800dad4:	80fb      	strh	r3, [r7, #6]
 800dad6:	e018      	b.n	800db0a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dad8:	88fb      	ldrh	r3, [r7, #6]
 800dada:	3b20      	subs	r3, #32
 800dadc:	80fb      	strh	r3, [r7, #6]
 800dade:	e014      	b.n	800db0a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dae0:	88fb      	ldrh	r3, [r7, #6]
 800dae2:	3b30      	subs	r3, #48	; 0x30
 800dae4:	80fb      	strh	r3, [r7, #6]
 800dae6:	e010      	b.n	800db0a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dae8:	88fb      	ldrh	r3, [r7, #6]
 800daea:	3b1a      	subs	r3, #26
 800daec:	80fb      	strh	r3, [r7, #6]
 800daee:	e00c      	b.n	800db0a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800daf0:	88fb      	ldrh	r3, [r7, #6]
 800daf2:	3308      	adds	r3, #8
 800daf4:	80fb      	strh	r3, [r7, #6]
 800daf6:	e008      	b.n	800db0a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800daf8:	88fb      	ldrh	r3, [r7, #6]
 800dafa:	3b50      	subs	r3, #80	; 0x50
 800dafc:	80fb      	strh	r3, [r7, #6]
 800dafe:	e004      	b.n	800db0a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800db06:	80fb      	strh	r3, [r7, #6]
 800db08:	bf00      	nop
			}
			break;
 800db0a:	e008      	b.n	800db1e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800db0c:	89fb      	ldrh	r3, [r7, #14]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d195      	bne.n	800da3e <ff_wtoupper+0x1a>
 800db12:	8a3b      	ldrh	r3, [r7, #16]
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	697a      	ldr	r2, [r7, #20]
 800db18:	4413      	add	r3, r2
 800db1a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800db1c:	e78f      	b.n	800da3e <ff_wtoupper+0x1a>
			break;
 800db1e:	bf00      	nop
	}

	return chr;
 800db20:	88fb      	ldrh	r3, [r7, #6]
}
 800db22:	4618      	mov	r0, r3
 800db24:	371c      	adds	r7, #28
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	08011288 	.word	0x08011288
 800db34:	0801147c 	.word	0x0801147c

0800db38 <__errno>:
 800db38:	4b01      	ldr	r3, [pc, #4]	; (800db40 <__errno+0x8>)
 800db3a:	6818      	ldr	r0, [r3, #0]
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	24000010 	.word	0x24000010

0800db44 <__libc_init_array>:
 800db44:	b570      	push	{r4, r5, r6, lr}
 800db46:	4d0d      	ldr	r5, [pc, #52]	; (800db7c <__libc_init_array+0x38>)
 800db48:	4c0d      	ldr	r4, [pc, #52]	; (800db80 <__libc_init_array+0x3c>)
 800db4a:	1b64      	subs	r4, r4, r5
 800db4c:	10a4      	asrs	r4, r4, #2
 800db4e:	2600      	movs	r6, #0
 800db50:	42a6      	cmp	r6, r4
 800db52:	d109      	bne.n	800db68 <__libc_init_array+0x24>
 800db54:	4d0b      	ldr	r5, [pc, #44]	; (800db84 <__libc_init_array+0x40>)
 800db56:	4c0c      	ldr	r4, [pc, #48]	; (800db88 <__libc_init_array+0x44>)
 800db58:	f002 fe90 	bl	801087c <_init>
 800db5c:	1b64      	subs	r4, r4, r5
 800db5e:	10a4      	asrs	r4, r4, #2
 800db60:	2600      	movs	r6, #0
 800db62:	42a6      	cmp	r6, r4
 800db64:	d105      	bne.n	800db72 <__libc_init_array+0x2e>
 800db66:	bd70      	pop	{r4, r5, r6, pc}
 800db68:	f855 3b04 	ldr.w	r3, [r5], #4
 800db6c:	4798      	blx	r3
 800db6e:	3601      	adds	r6, #1
 800db70:	e7ee      	b.n	800db50 <__libc_init_array+0xc>
 800db72:	f855 3b04 	ldr.w	r3, [r5], #4
 800db76:	4798      	blx	r3
 800db78:	3601      	adds	r6, #1
 800db7a:	e7f2      	b.n	800db62 <__libc_init_array+0x1e>
 800db7c:	0801191c 	.word	0x0801191c
 800db80:	0801191c 	.word	0x0801191c
 800db84:	0801191c 	.word	0x0801191c
 800db88:	08011920 	.word	0x08011920

0800db8c <memcpy>:
 800db8c:	440a      	add	r2, r1
 800db8e:	4291      	cmp	r1, r2
 800db90:	f100 33ff 	add.w	r3, r0, #4294967295
 800db94:	d100      	bne.n	800db98 <memcpy+0xc>
 800db96:	4770      	bx	lr
 800db98:	b510      	push	{r4, lr}
 800db9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dba2:	4291      	cmp	r1, r2
 800dba4:	d1f9      	bne.n	800db9a <memcpy+0xe>
 800dba6:	bd10      	pop	{r4, pc}

0800dba8 <memset>:
 800dba8:	4402      	add	r2, r0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d100      	bne.n	800dbb2 <memset+0xa>
 800dbb0:	4770      	bx	lr
 800dbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbb6:	e7f9      	b.n	800dbac <memset+0x4>

0800dbb8 <__cvt>:
 800dbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbba:	ed2d 8b02 	vpush	{d8}
 800dbbe:	eeb0 8b40 	vmov.f64	d8, d0
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	4617      	mov	r7, r2
 800dbc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dbc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dbca:	ee18 2a90 	vmov	r2, s17
 800dbce:	f025 0520 	bic.w	r5, r5, #32
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	bfb6      	itet	lt
 800dbd6:	222d      	movlt	r2, #45	; 0x2d
 800dbd8:	2200      	movge	r2, #0
 800dbda:	eeb1 8b40 	vneglt.f64	d8, d0
 800dbde:	2d46      	cmp	r5, #70	; 0x46
 800dbe0:	460c      	mov	r4, r1
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	d004      	beq.n	800dbf0 <__cvt+0x38>
 800dbe6:	2d45      	cmp	r5, #69	; 0x45
 800dbe8:	d100      	bne.n	800dbec <__cvt+0x34>
 800dbea:	3401      	adds	r4, #1
 800dbec:	2102      	movs	r1, #2
 800dbee:	e000      	b.n	800dbf2 <__cvt+0x3a>
 800dbf0:	2103      	movs	r1, #3
 800dbf2:	ab03      	add	r3, sp, #12
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	ab02      	add	r3, sp, #8
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4633      	mov	r3, r6
 800dbfe:	eeb0 0b48 	vmov.f64	d0, d8
 800dc02:	f000 fcfd 	bl	800e600 <_dtoa_r>
 800dc06:	2d47      	cmp	r5, #71	; 0x47
 800dc08:	d101      	bne.n	800dc0e <__cvt+0x56>
 800dc0a:	07fb      	lsls	r3, r7, #31
 800dc0c:	d51a      	bpl.n	800dc44 <__cvt+0x8c>
 800dc0e:	2d46      	cmp	r5, #70	; 0x46
 800dc10:	eb00 0204 	add.w	r2, r0, r4
 800dc14:	d10c      	bne.n	800dc30 <__cvt+0x78>
 800dc16:	7803      	ldrb	r3, [r0, #0]
 800dc18:	2b30      	cmp	r3, #48	; 0x30
 800dc1a:	d107      	bne.n	800dc2c <__cvt+0x74>
 800dc1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc24:	bf1c      	itt	ne
 800dc26:	f1c4 0401 	rsbne	r4, r4, #1
 800dc2a:	6034      	strne	r4, [r6, #0]
 800dc2c:	6833      	ldr	r3, [r6, #0]
 800dc2e:	441a      	add	r2, r3
 800dc30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc38:	bf08      	it	eq
 800dc3a:	9203      	streq	r2, [sp, #12]
 800dc3c:	2130      	movs	r1, #48	; 0x30
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d307      	bcc.n	800dc54 <__cvt+0x9c>
 800dc44:	9b03      	ldr	r3, [sp, #12]
 800dc46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc48:	1a1b      	subs	r3, r3, r0
 800dc4a:	6013      	str	r3, [r2, #0]
 800dc4c:	b005      	add	sp, #20
 800dc4e:	ecbd 8b02 	vpop	{d8}
 800dc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc54:	1c5c      	adds	r4, r3, #1
 800dc56:	9403      	str	r4, [sp, #12]
 800dc58:	7019      	strb	r1, [r3, #0]
 800dc5a:	e7f0      	b.n	800dc3e <__cvt+0x86>

0800dc5c <__exponent>:
 800dc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2900      	cmp	r1, #0
 800dc62:	bfb8      	it	lt
 800dc64:	4249      	neglt	r1, r1
 800dc66:	f803 2b02 	strb.w	r2, [r3], #2
 800dc6a:	bfb4      	ite	lt
 800dc6c:	222d      	movlt	r2, #45	; 0x2d
 800dc6e:	222b      	movge	r2, #43	; 0x2b
 800dc70:	2909      	cmp	r1, #9
 800dc72:	7042      	strb	r2, [r0, #1]
 800dc74:	dd2a      	ble.n	800dccc <__exponent+0x70>
 800dc76:	f10d 0407 	add.w	r4, sp, #7
 800dc7a:	46a4      	mov	ip, r4
 800dc7c:	270a      	movs	r7, #10
 800dc7e:	46a6      	mov	lr, r4
 800dc80:	460a      	mov	r2, r1
 800dc82:	fb91 f6f7 	sdiv	r6, r1, r7
 800dc86:	fb07 1516 	mls	r5, r7, r6, r1
 800dc8a:	3530      	adds	r5, #48	; 0x30
 800dc8c:	2a63      	cmp	r2, #99	; 0x63
 800dc8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dc96:	4631      	mov	r1, r6
 800dc98:	dcf1      	bgt.n	800dc7e <__exponent+0x22>
 800dc9a:	3130      	adds	r1, #48	; 0x30
 800dc9c:	f1ae 0502 	sub.w	r5, lr, #2
 800dca0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dca4:	1c44      	adds	r4, r0, #1
 800dca6:	4629      	mov	r1, r5
 800dca8:	4561      	cmp	r1, ip
 800dcaa:	d30a      	bcc.n	800dcc2 <__exponent+0x66>
 800dcac:	f10d 0209 	add.w	r2, sp, #9
 800dcb0:	eba2 020e 	sub.w	r2, r2, lr
 800dcb4:	4565      	cmp	r5, ip
 800dcb6:	bf88      	it	hi
 800dcb8:	2200      	movhi	r2, #0
 800dcba:	4413      	add	r3, r2
 800dcbc:	1a18      	subs	r0, r3, r0
 800dcbe:	b003      	add	sp, #12
 800dcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dcca:	e7ed      	b.n	800dca8 <__exponent+0x4c>
 800dccc:	2330      	movs	r3, #48	; 0x30
 800dcce:	3130      	adds	r1, #48	; 0x30
 800dcd0:	7083      	strb	r3, [r0, #2]
 800dcd2:	70c1      	strb	r1, [r0, #3]
 800dcd4:	1d03      	adds	r3, r0, #4
 800dcd6:	e7f1      	b.n	800dcbc <__exponent+0x60>

0800dcd8 <_printf_float>:
 800dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	b08b      	sub	sp, #44	; 0x2c
 800dcde:	460c      	mov	r4, r1
 800dce0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800dce4:	4616      	mov	r6, r2
 800dce6:	461f      	mov	r7, r3
 800dce8:	4605      	mov	r5, r0
 800dcea:	f001 f9f7 	bl	800f0dc <_localeconv_r>
 800dcee:	f8d0 b000 	ldr.w	fp, [r0]
 800dcf2:	4658      	mov	r0, fp
 800dcf4:	f7f2 faf4 	bl	80002e0 <strlen>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9308      	str	r3, [sp, #32]
 800dcfc:	f8d8 3000 	ldr.w	r3, [r8]
 800dd00:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dd04:	6822      	ldr	r2, [r4, #0]
 800dd06:	3307      	adds	r3, #7
 800dd08:	f023 0307 	bic.w	r3, r3, #7
 800dd0c:	f103 0108 	add.w	r1, r3, #8
 800dd10:	f8c8 1000 	str.w	r1, [r8]
 800dd14:	4682      	mov	sl, r0
 800dd16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800dd1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800df80 <_printf_float+0x2a8>
 800dd22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800dd26:	eeb0 6bc0 	vabs.f64	d6, d0
 800dd2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800dd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd32:	dd24      	ble.n	800dd7e <_printf_float+0xa6>
 800dd34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd3c:	d502      	bpl.n	800dd44 <_printf_float+0x6c>
 800dd3e:	232d      	movs	r3, #45	; 0x2d
 800dd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd44:	4b90      	ldr	r3, [pc, #576]	; (800df88 <_printf_float+0x2b0>)
 800dd46:	4891      	ldr	r0, [pc, #580]	; (800df8c <_printf_float+0x2b4>)
 800dd48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dd4c:	bf94      	ite	ls
 800dd4e:	4698      	movls	r8, r3
 800dd50:	4680      	movhi	r8, r0
 800dd52:	2303      	movs	r3, #3
 800dd54:	6123      	str	r3, [r4, #16]
 800dd56:	f022 0204 	bic.w	r2, r2, #4
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	6022      	str	r2, [r4, #0]
 800dd5e:	9304      	str	r3, [sp, #16]
 800dd60:	9700      	str	r7, [sp, #0]
 800dd62:	4633      	mov	r3, r6
 800dd64:	aa09      	add	r2, sp, #36	; 0x24
 800dd66:	4621      	mov	r1, r4
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f000 f9d3 	bl	800e114 <_printf_common>
 800dd6e:	3001      	adds	r0, #1
 800dd70:	f040 808a 	bne.w	800de88 <_printf_float+0x1b0>
 800dd74:	f04f 30ff 	mov.w	r0, #4294967295
 800dd78:	b00b      	add	sp, #44	; 0x2c
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7e:	eeb4 0b40 	vcmp.f64	d0, d0
 800dd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd86:	d709      	bvc.n	800dd9c <_printf_float+0xc4>
 800dd88:	ee10 3a90 	vmov	r3, s1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	bfbc      	itt	lt
 800dd90:	232d      	movlt	r3, #45	; 0x2d
 800dd92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd96:	487e      	ldr	r0, [pc, #504]	; (800df90 <_printf_float+0x2b8>)
 800dd98:	4b7e      	ldr	r3, [pc, #504]	; (800df94 <_printf_float+0x2bc>)
 800dd9a:	e7d5      	b.n	800dd48 <_printf_float+0x70>
 800dd9c:	6863      	ldr	r3, [r4, #4]
 800dd9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800dda2:	9104      	str	r1, [sp, #16]
 800dda4:	1c59      	adds	r1, r3, #1
 800dda6:	d13c      	bne.n	800de22 <_printf_float+0x14a>
 800dda8:	2306      	movs	r3, #6
 800ddaa:	6063      	str	r3, [r4, #4]
 800ddac:	2300      	movs	r3, #0
 800ddae:	9303      	str	r3, [sp, #12]
 800ddb0:	ab08      	add	r3, sp, #32
 800ddb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ddb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddba:	ab07      	add	r3, sp, #28
 800ddbc:	6861      	ldr	r1, [r4, #4]
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	6022      	str	r2, [r4, #0]
 800ddc2:	f10d 031b 	add.w	r3, sp, #27
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f7ff fef6 	bl	800dbb8 <__cvt>
 800ddcc:	9b04      	ldr	r3, [sp, #16]
 800ddce:	9907      	ldr	r1, [sp, #28]
 800ddd0:	2b47      	cmp	r3, #71	; 0x47
 800ddd2:	4680      	mov	r8, r0
 800ddd4:	d108      	bne.n	800dde8 <_printf_float+0x110>
 800ddd6:	1cc8      	adds	r0, r1, #3
 800ddd8:	db02      	blt.n	800dde0 <_printf_float+0x108>
 800ddda:	6863      	ldr	r3, [r4, #4]
 800dddc:	4299      	cmp	r1, r3
 800ddde:	dd41      	ble.n	800de64 <_printf_float+0x18c>
 800dde0:	f1a9 0902 	sub.w	r9, r9, #2
 800dde4:	fa5f f989 	uxtb.w	r9, r9
 800dde8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ddec:	d820      	bhi.n	800de30 <_printf_float+0x158>
 800ddee:	3901      	subs	r1, #1
 800ddf0:	464a      	mov	r2, r9
 800ddf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ddf6:	9107      	str	r1, [sp, #28]
 800ddf8:	f7ff ff30 	bl	800dc5c <__exponent>
 800ddfc:	9a08      	ldr	r2, [sp, #32]
 800ddfe:	9004      	str	r0, [sp, #16]
 800de00:	1813      	adds	r3, r2, r0
 800de02:	2a01      	cmp	r2, #1
 800de04:	6123      	str	r3, [r4, #16]
 800de06:	dc02      	bgt.n	800de0e <_printf_float+0x136>
 800de08:	6822      	ldr	r2, [r4, #0]
 800de0a:	07d2      	lsls	r2, r2, #31
 800de0c:	d501      	bpl.n	800de12 <_printf_float+0x13a>
 800de0e:	3301      	adds	r3, #1
 800de10:	6123      	str	r3, [r4, #16]
 800de12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0a2      	beq.n	800dd60 <_printf_float+0x88>
 800de1a:	232d      	movs	r3, #45	; 0x2d
 800de1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de20:	e79e      	b.n	800dd60 <_printf_float+0x88>
 800de22:	9904      	ldr	r1, [sp, #16]
 800de24:	2947      	cmp	r1, #71	; 0x47
 800de26:	d1c1      	bne.n	800ddac <_printf_float+0xd4>
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1bf      	bne.n	800ddac <_printf_float+0xd4>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e7bc      	b.n	800ddaa <_printf_float+0xd2>
 800de30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800de34:	d118      	bne.n	800de68 <_printf_float+0x190>
 800de36:	2900      	cmp	r1, #0
 800de38:	6863      	ldr	r3, [r4, #4]
 800de3a:	dd0b      	ble.n	800de54 <_printf_float+0x17c>
 800de3c:	6121      	str	r1, [r4, #16]
 800de3e:	b913      	cbnz	r3, 800de46 <_printf_float+0x16e>
 800de40:	6822      	ldr	r2, [r4, #0]
 800de42:	07d0      	lsls	r0, r2, #31
 800de44:	d502      	bpl.n	800de4c <_printf_float+0x174>
 800de46:	3301      	adds	r3, #1
 800de48:	440b      	add	r3, r1
 800de4a:	6123      	str	r3, [r4, #16]
 800de4c:	2300      	movs	r3, #0
 800de4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800de50:	9304      	str	r3, [sp, #16]
 800de52:	e7de      	b.n	800de12 <_printf_float+0x13a>
 800de54:	b913      	cbnz	r3, 800de5c <_printf_float+0x184>
 800de56:	6822      	ldr	r2, [r4, #0]
 800de58:	07d2      	lsls	r2, r2, #31
 800de5a:	d501      	bpl.n	800de60 <_printf_float+0x188>
 800de5c:	3302      	adds	r3, #2
 800de5e:	e7f4      	b.n	800de4a <_printf_float+0x172>
 800de60:	2301      	movs	r3, #1
 800de62:	e7f2      	b.n	800de4a <_printf_float+0x172>
 800de64:	f04f 0967 	mov.w	r9, #103	; 0x67
 800de68:	9b08      	ldr	r3, [sp, #32]
 800de6a:	4299      	cmp	r1, r3
 800de6c:	db05      	blt.n	800de7a <_printf_float+0x1a2>
 800de6e:	6823      	ldr	r3, [r4, #0]
 800de70:	6121      	str	r1, [r4, #16]
 800de72:	07d8      	lsls	r0, r3, #31
 800de74:	d5ea      	bpl.n	800de4c <_printf_float+0x174>
 800de76:	1c4b      	adds	r3, r1, #1
 800de78:	e7e7      	b.n	800de4a <_printf_float+0x172>
 800de7a:	2900      	cmp	r1, #0
 800de7c:	bfd4      	ite	le
 800de7e:	f1c1 0202 	rsble	r2, r1, #2
 800de82:	2201      	movgt	r2, #1
 800de84:	4413      	add	r3, r2
 800de86:	e7e0      	b.n	800de4a <_printf_float+0x172>
 800de88:	6823      	ldr	r3, [r4, #0]
 800de8a:	055a      	lsls	r2, r3, #21
 800de8c:	d407      	bmi.n	800de9e <_printf_float+0x1c6>
 800de8e:	6923      	ldr	r3, [r4, #16]
 800de90:	4642      	mov	r2, r8
 800de92:	4631      	mov	r1, r6
 800de94:	4628      	mov	r0, r5
 800de96:	47b8      	blx	r7
 800de98:	3001      	adds	r0, #1
 800de9a:	d12a      	bne.n	800def2 <_printf_float+0x21a>
 800de9c:	e76a      	b.n	800dd74 <_printf_float+0x9c>
 800de9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dea2:	f240 80e2 	bls.w	800e06a <_printf_float+0x392>
 800dea6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800deaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800deae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb2:	d133      	bne.n	800df1c <_printf_float+0x244>
 800deb4:	4a38      	ldr	r2, [pc, #224]	; (800df98 <_printf_float+0x2c0>)
 800deb6:	2301      	movs	r3, #1
 800deb8:	4631      	mov	r1, r6
 800deba:	4628      	mov	r0, r5
 800debc:	47b8      	blx	r7
 800debe:	3001      	adds	r0, #1
 800dec0:	f43f af58 	beq.w	800dd74 <_printf_float+0x9c>
 800dec4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dec8:	429a      	cmp	r2, r3
 800deca:	db02      	blt.n	800ded2 <_printf_float+0x1fa>
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	07d8      	lsls	r0, r3, #31
 800ded0:	d50f      	bpl.n	800def2 <_printf_float+0x21a>
 800ded2:	4653      	mov	r3, sl
 800ded4:	465a      	mov	r2, fp
 800ded6:	4631      	mov	r1, r6
 800ded8:	4628      	mov	r0, r5
 800deda:	47b8      	blx	r7
 800dedc:	3001      	adds	r0, #1
 800dede:	f43f af49 	beq.w	800dd74 <_printf_float+0x9c>
 800dee2:	f04f 0800 	mov.w	r8, #0
 800dee6:	f104 091a 	add.w	r9, r4, #26
 800deea:	9b08      	ldr	r3, [sp, #32]
 800deec:	3b01      	subs	r3, #1
 800deee:	4543      	cmp	r3, r8
 800def0:	dc09      	bgt.n	800df06 <_printf_float+0x22e>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	079b      	lsls	r3, r3, #30
 800def6:	f100 8108 	bmi.w	800e10a <_printf_float+0x432>
 800defa:	68e0      	ldr	r0, [r4, #12]
 800defc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defe:	4298      	cmp	r0, r3
 800df00:	bfb8      	it	lt
 800df02:	4618      	movlt	r0, r3
 800df04:	e738      	b.n	800dd78 <_printf_float+0xa0>
 800df06:	2301      	movs	r3, #1
 800df08:	464a      	mov	r2, r9
 800df0a:	4631      	mov	r1, r6
 800df0c:	4628      	mov	r0, r5
 800df0e:	47b8      	blx	r7
 800df10:	3001      	adds	r0, #1
 800df12:	f43f af2f 	beq.w	800dd74 <_printf_float+0x9c>
 800df16:	f108 0801 	add.w	r8, r8, #1
 800df1a:	e7e6      	b.n	800deea <_printf_float+0x212>
 800df1c:	9b07      	ldr	r3, [sp, #28]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	dc3c      	bgt.n	800df9c <_printf_float+0x2c4>
 800df22:	4a1d      	ldr	r2, [pc, #116]	; (800df98 <_printf_float+0x2c0>)
 800df24:	2301      	movs	r3, #1
 800df26:	4631      	mov	r1, r6
 800df28:	4628      	mov	r0, r5
 800df2a:	47b8      	blx	r7
 800df2c:	3001      	adds	r0, #1
 800df2e:	f43f af21 	beq.w	800dd74 <_printf_float+0x9c>
 800df32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800df36:	4313      	orrs	r3, r2
 800df38:	d102      	bne.n	800df40 <_printf_float+0x268>
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	07d9      	lsls	r1, r3, #31
 800df3e:	d5d8      	bpl.n	800def2 <_printf_float+0x21a>
 800df40:	4653      	mov	r3, sl
 800df42:	465a      	mov	r2, fp
 800df44:	4631      	mov	r1, r6
 800df46:	4628      	mov	r0, r5
 800df48:	47b8      	blx	r7
 800df4a:	3001      	adds	r0, #1
 800df4c:	f43f af12 	beq.w	800dd74 <_printf_float+0x9c>
 800df50:	f04f 0900 	mov.w	r9, #0
 800df54:	f104 0a1a 	add.w	sl, r4, #26
 800df58:	9b07      	ldr	r3, [sp, #28]
 800df5a:	425b      	negs	r3, r3
 800df5c:	454b      	cmp	r3, r9
 800df5e:	dc01      	bgt.n	800df64 <_printf_float+0x28c>
 800df60:	9b08      	ldr	r3, [sp, #32]
 800df62:	e795      	b.n	800de90 <_printf_float+0x1b8>
 800df64:	2301      	movs	r3, #1
 800df66:	4652      	mov	r2, sl
 800df68:	4631      	mov	r1, r6
 800df6a:	4628      	mov	r0, r5
 800df6c:	47b8      	blx	r7
 800df6e:	3001      	adds	r0, #1
 800df70:	f43f af00 	beq.w	800dd74 <_printf_float+0x9c>
 800df74:	f109 0901 	add.w	r9, r9, #1
 800df78:	e7ee      	b.n	800df58 <_printf_float+0x280>
 800df7a:	bf00      	nop
 800df7c:	f3af 8000 	nop.w
 800df80:	ffffffff 	.word	0xffffffff
 800df84:	7fefffff 	.word	0x7fefffff
 800df88:	0801153c 	.word	0x0801153c
 800df8c:	08011540 	.word	0x08011540
 800df90:	08011548 	.word	0x08011548
 800df94:	08011544 	.word	0x08011544
 800df98:	0801154c 	.word	0x0801154c
 800df9c:	9a08      	ldr	r2, [sp, #32]
 800df9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	bfa8      	it	ge
 800dfa4:	461a      	movge	r2, r3
 800dfa6:	2a00      	cmp	r2, #0
 800dfa8:	4691      	mov	r9, r2
 800dfaa:	dc38      	bgt.n	800e01e <_printf_float+0x346>
 800dfac:	2300      	movs	r3, #0
 800dfae:	9305      	str	r3, [sp, #20]
 800dfb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfb4:	f104 021a 	add.w	r2, r4, #26
 800dfb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dfba:	9905      	ldr	r1, [sp, #20]
 800dfbc:	9304      	str	r3, [sp, #16]
 800dfbe:	eba3 0309 	sub.w	r3, r3, r9
 800dfc2:	428b      	cmp	r3, r1
 800dfc4:	dc33      	bgt.n	800e02e <_printf_float+0x356>
 800dfc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	db3c      	blt.n	800e048 <_printf_float+0x370>
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	07da      	lsls	r2, r3, #31
 800dfd2:	d439      	bmi.n	800e048 <_printf_float+0x370>
 800dfd4:	9b08      	ldr	r3, [sp, #32]
 800dfd6:	9a04      	ldr	r2, [sp, #16]
 800dfd8:	9907      	ldr	r1, [sp, #28]
 800dfda:	1a9a      	subs	r2, r3, r2
 800dfdc:	eba3 0901 	sub.w	r9, r3, r1
 800dfe0:	4591      	cmp	r9, r2
 800dfe2:	bfa8      	it	ge
 800dfe4:	4691      	movge	r9, r2
 800dfe6:	f1b9 0f00 	cmp.w	r9, #0
 800dfea:	dc35      	bgt.n	800e058 <_printf_float+0x380>
 800dfec:	f04f 0800 	mov.w	r8, #0
 800dff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dff4:	f104 0a1a 	add.w	sl, r4, #26
 800dff8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dffc:	1a9b      	subs	r3, r3, r2
 800dffe:	eba3 0309 	sub.w	r3, r3, r9
 800e002:	4543      	cmp	r3, r8
 800e004:	f77f af75 	ble.w	800def2 <_printf_float+0x21a>
 800e008:	2301      	movs	r3, #1
 800e00a:	4652      	mov	r2, sl
 800e00c:	4631      	mov	r1, r6
 800e00e:	4628      	mov	r0, r5
 800e010:	47b8      	blx	r7
 800e012:	3001      	adds	r0, #1
 800e014:	f43f aeae 	beq.w	800dd74 <_printf_float+0x9c>
 800e018:	f108 0801 	add.w	r8, r8, #1
 800e01c:	e7ec      	b.n	800dff8 <_printf_float+0x320>
 800e01e:	4613      	mov	r3, r2
 800e020:	4631      	mov	r1, r6
 800e022:	4642      	mov	r2, r8
 800e024:	4628      	mov	r0, r5
 800e026:	47b8      	blx	r7
 800e028:	3001      	adds	r0, #1
 800e02a:	d1bf      	bne.n	800dfac <_printf_float+0x2d4>
 800e02c:	e6a2      	b.n	800dd74 <_printf_float+0x9c>
 800e02e:	2301      	movs	r3, #1
 800e030:	4631      	mov	r1, r6
 800e032:	4628      	mov	r0, r5
 800e034:	9204      	str	r2, [sp, #16]
 800e036:	47b8      	blx	r7
 800e038:	3001      	adds	r0, #1
 800e03a:	f43f ae9b 	beq.w	800dd74 <_printf_float+0x9c>
 800e03e:	9b05      	ldr	r3, [sp, #20]
 800e040:	9a04      	ldr	r2, [sp, #16]
 800e042:	3301      	adds	r3, #1
 800e044:	9305      	str	r3, [sp, #20]
 800e046:	e7b7      	b.n	800dfb8 <_printf_float+0x2e0>
 800e048:	4653      	mov	r3, sl
 800e04a:	465a      	mov	r2, fp
 800e04c:	4631      	mov	r1, r6
 800e04e:	4628      	mov	r0, r5
 800e050:	47b8      	blx	r7
 800e052:	3001      	adds	r0, #1
 800e054:	d1be      	bne.n	800dfd4 <_printf_float+0x2fc>
 800e056:	e68d      	b.n	800dd74 <_printf_float+0x9c>
 800e058:	9a04      	ldr	r2, [sp, #16]
 800e05a:	464b      	mov	r3, r9
 800e05c:	4442      	add	r2, r8
 800e05e:	4631      	mov	r1, r6
 800e060:	4628      	mov	r0, r5
 800e062:	47b8      	blx	r7
 800e064:	3001      	adds	r0, #1
 800e066:	d1c1      	bne.n	800dfec <_printf_float+0x314>
 800e068:	e684      	b.n	800dd74 <_printf_float+0x9c>
 800e06a:	9a08      	ldr	r2, [sp, #32]
 800e06c:	2a01      	cmp	r2, #1
 800e06e:	dc01      	bgt.n	800e074 <_printf_float+0x39c>
 800e070:	07db      	lsls	r3, r3, #31
 800e072:	d537      	bpl.n	800e0e4 <_printf_float+0x40c>
 800e074:	2301      	movs	r3, #1
 800e076:	4642      	mov	r2, r8
 800e078:	4631      	mov	r1, r6
 800e07a:	4628      	mov	r0, r5
 800e07c:	47b8      	blx	r7
 800e07e:	3001      	adds	r0, #1
 800e080:	f43f ae78 	beq.w	800dd74 <_printf_float+0x9c>
 800e084:	4653      	mov	r3, sl
 800e086:	465a      	mov	r2, fp
 800e088:	4631      	mov	r1, r6
 800e08a:	4628      	mov	r0, r5
 800e08c:	47b8      	blx	r7
 800e08e:	3001      	adds	r0, #1
 800e090:	f43f ae70 	beq.w	800dd74 <_printf_float+0x9c>
 800e094:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e098:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a0:	d01b      	beq.n	800e0da <_printf_float+0x402>
 800e0a2:	9b08      	ldr	r3, [sp, #32]
 800e0a4:	f108 0201 	add.w	r2, r8, #1
 800e0a8:	3b01      	subs	r3, #1
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	47b8      	blx	r7
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	d10e      	bne.n	800e0d2 <_printf_float+0x3fa>
 800e0b4:	e65e      	b.n	800dd74 <_printf_float+0x9c>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	464a      	mov	r2, r9
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	4628      	mov	r0, r5
 800e0be:	47b8      	blx	r7
 800e0c0:	3001      	adds	r0, #1
 800e0c2:	f43f ae57 	beq.w	800dd74 <_printf_float+0x9c>
 800e0c6:	f108 0801 	add.w	r8, r8, #1
 800e0ca:	9b08      	ldr	r3, [sp, #32]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	4543      	cmp	r3, r8
 800e0d0:	dcf1      	bgt.n	800e0b6 <_printf_float+0x3de>
 800e0d2:	9b04      	ldr	r3, [sp, #16]
 800e0d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e0d8:	e6db      	b.n	800de92 <_printf_float+0x1ba>
 800e0da:	f04f 0800 	mov.w	r8, #0
 800e0de:	f104 091a 	add.w	r9, r4, #26
 800e0e2:	e7f2      	b.n	800e0ca <_printf_float+0x3f2>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	4642      	mov	r2, r8
 800e0e8:	e7df      	b.n	800e0aa <_printf_float+0x3d2>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	464a      	mov	r2, r9
 800e0ee:	4631      	mov	r1, r6
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	47b8      	blx	r7
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	f43f ae3d 	beq.w	800dd74 <_printf_float+0x9c>
 800e0fa:	f108 0801 	add.w	r8, r8, #1
 800e0fe:	68e3      	ldr	r3, [r4, #12]
 800e100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e102:	1a5b      	subs	r3, r3, r1
 800e104:	4543      	cmp	r3, r8
 800e106:	dcf0      	bgt.n	800e0ea <_printf_float+0x412>
 800e108:	e6f7      	b.n	800defa <_printf_float+0x222>
 800e10a:	f04f 0800 	mov.w	r8, #0
 800e10e:	f104 0919 	add.w	r9, r4, #25
 800e112:	e7f4      	b.n	800e0fe <_printf_float+0x426>

0800e114 <_printf_common>:
 800e114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e118:	4616      	mov	r6, r2
 800e11a:	4699      	mov	r9, r3
 800e11c:	688a      	ldr	r2, [r1, #8]
 800e11e:	690b      	ldr	r3, [r1, #16]
 800e120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e124:	4293      	cmp	r3, r2
 800e126:	bfb8      	it	lt
 800e128:	4613      	movlt	r3, r2
 800e12a:	6033      	str	r3, [r6, #0]
 800e12c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e130:	4607      	mov	r7, r0
 800e132:	460c      	mov	r4, r1
 800e134:	b10a      	cbz	r2, 800e13a <_printf_common+0x26>
 800e136:	3301      	adds	r3, #1
 800e138:	6033      	str	r3, [r6, #0]
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	0699      	lsls	r1, r3, #26
 800e13e:	bf42      	ittt	mi
 800e140:	6833      	ldrmi	r3, [r6, #0]
 800e142:	3302      	addmi	r3, #2
 800e144:	6033      	strmi	r3, [r6, #0]
 800e146:	6825      	ldr	r5, [r4, #0]
 800e148:	f015 0506 	ands.w	r5, r5, #6
 800e14c:	d106      	bne.n	800e15c <_printf_common+0x48>
 800e14e:	f104 0a19 	add.w	sl, r4, #25
 800e152:	68e3      	ldr	r3, [r4, #12]
 800e154:	6832      	ldr	r2, [r6, #0]
 800e156:	1a9b      	subs	r3, r3, r2
 800e158:	42ab      	cmp	r3, r5
 800e15a:	dc26      	bgt.n	800e1aa <_printf_common+0x96>
 800e15c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e160:	1e13      	subs	r3, r2, #0
 800e162:	6822      	ldr	r2, [r4, #0]
 800e164:	bf18      	it	ne
 800e166:	2301      	movne	r3, #1
 800e168:	0692      	lsls	r2, r2, #26
 800e16a:	d42b      	bmi.n	800e1c4 <_printf_common+0xb0>
 800e16c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e170:	4649      	mov	r1, r9
 800e172:	4638      	mov	r0, r7
 800e174:	47c0      	blx	r8
 800e176:	3001      	adds	r0, #1
 800e178:	d01e      	beq.n	800e1b8 <_printf_common+0xa4>
 800e17a:	6823      	ldr	r3, [r4, #0]
 800e17c:	68e5      	ldr	r5, [r4, #12]
 800e17e:	6832      	ldr	r2, [r6, #0]
 800e180:	f003 0306 	and.w	r3, r3, #6
 800e184:	2b04      	cmp	r3, #4
 800e186:	bf08      	it	eq
 800e188:	1aad      	subeq	r5, r5, r2
 800e18a:	68a3      	ldr	r3, [r4, #8]
 800e18c:	6922      	ldr	r2, [r4, #16]
 800e18e:	bf0c      	ite	eq
 800e190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e194:	2500      	movne	r5, #0
 800e196:	4293      	cmp	r3, r2
 800e198:	bfc4      	itt	gt
 800e19a:	1a9b      	subgt	r3, r3, r2
 800e19c:	18ed      	addgt	r5, r5, r3
 800e19e:	2600      	movs	r6, #0
 800e1a0:	341a      	adds	r4, #26
 800e1a2:	42b5      	cmp	r5, r6
 800e1a4:	d11a      	bne.n	800e1dc <_printf_common+0xc8>
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	e008      	b.n	800e1bc <_printf_common+0xa8>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	4652      	mov	r2, sl
 800e1ae:	4649      	mov	r1, r9
 800e1b0:	4638      	mov	r0, r7
 800e1b2:	47c0      	blx	r8
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	d103      	bne.n	800e1c0 <_printf_common+0xac>
 800e1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c0:	3501      	adds	r5, #1
 800e1c2:	e7c6      	b.n	800e152 <_printf_common+0x3e>
 800e1c4:	18e1      	adds	r1, r4, r3
 800e1c6:	1c5a      	adds	r2, r3, #1
 800e1c8:	2030      	movs	r0, #48	; 0x30
 800e1ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1ce:	4422      	add	r2, r4
 800e1d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1d8:	3302      	adds	r3, #2
 800e1da:	e7c7      	b.n	800e16c <_printf_common+0x58>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	4622      	mov	r2, r4
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	47c0      	blx	r8
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	d0e6      	beq.n	800e1b8 <_printf_common+0xa4>
 800e1ea:	3601      	adds	r6, #1
 800e1ec:	e7d9      	b.n	800e1a2 <_printf_common+0x8e>
	...

0800e1f0 <_printf_i>:
 800e1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1f4:	7e0f      	ldrb	r7, [r1, #24]
 800e1f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1f8:	2f78      	cmp	r7, #120	; 0x78
 800e1fa:	4691      	mov	r9, r2
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	460c      	mov	r4, r1
 800e200:	469a      	mov	sl, r3
 800e202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e206:	d807      	bhi.n	800e218 <_printf_i+0x28>
 800e208:	2f62      	cmp	r7, #98	; 0x62
 800e20a:	d80a      	bhi.n	800e222 <_printf_i+0x32>
 800e20c:	2f00      	cmp	r7, #0
 800e20e:	f000 80d8 	beq.w	800e3c2 <_printf_i+0x1d2>
 800e212:	2f58      	cmp	r7, #88	; 0x58
 800e214:	f000 80a3 	beq.w	800e35e <_printf_i+0x16e>
 800e218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e21c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e220:	e03a      	b.n	800e298 <_printf_i+0xa8>
 800e222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e226:	2b15      	cmp	r3, #21
 800e228:	d8f6      	bhi.n	800e218 <_printf_i+0x28>
 800e22a:	a101      	add	r1, pc, #4	; (adr r1, 800e230 <_printf_i+0x40>)
 800e22c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e230:	0800e289 	.word	0x0800e289
 800e234:	0800e29d 	.word	0x0800e29d
 800e238:	0800e219 	.word	0x0800e219
 800e23c:	0800e219 	.word	0x0800e219
 800e240:	0800e219 	.word	0x0800e219
 800e244:	0800e219 	.word	0x0800e219
 800e248:	0800e29d 	.word	0x0800e29d
 800e24c:	0800e219 	.word	0x0800e219
 800e250:	0800e219 	.word	0x0800e219
 800e254:	0800e219 	.word	0x0800e219
 800e258:	0800e219 	.word	0x0800e219
 800e25c:	0800e3a9 	.word	0x0800e3a9
 800e260:	0800e2cd 	.word	0x0800e2cd
 800e264:	0800e38b 	.word	0x0800e38b
 800e268:	0800e219 	.word	0x0800e219
 800e26c:	0800e219 	.word	0x0800e219
 800e270:	0800e3cb 	.word	0x0800e3cb
 800e274:	0800e219 	.word	0x0800e219
 800e278:	0800e2cd 	.word	0x0800e2cd
 800e27c:	0800e219 	.word	0x0800e219
 800e280:	0800e219 	.word	0x0800e219
 800e284:	0800e393 	.word	0x0800e393
 800e288:	682b      	ldr	r3, [r5, #0]
 800e28a:	1d1a      	adds	r2, r3, #4
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	602a      	str	r2, [r5, #0]
 800e290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e298:	2301      	movs	r3, #1
 800e29a:	e0a3      	b.n	800e3e4 <_printf_i+0x1f4>
 800e29c:	6820      	ldr	r0, [r4, #0]
 800e29e:	6829      	ldr	r1, [r5, #0]
 800e2a0:	0606      	lsls	r6, r0, #24
 800e2a2:	f101 0304 	add.w	r3, r1, #4
 800e2a6:	d50a      	bpl.n	800e2be <_printf_i+0xce>
 800e2a8:	680e      	ldr	r6, [r1, #0]
 800e2aa:	602b      	str	r3, [r5, #0]
 800e2ac:	2e00      	cmp	r6, #0
 800e2ae:	da03      	bge.n	800e2b8 <_printf_i+0xc8>
 800e2b0:	232d      	movs	r3, #45	; 0x2d
 800e2b2:	4276      	negs	r6, r6
 800e2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2b8:	485e      	ldr	r0, [pc, #376]	; (800e434 <_printf_i+0x244>)
 800e2ba:	230a      	movs	r3, #10
 800e2bc:	e019      	b.n	800e2f2 <_printf_i+0x102>
 800e2be:	680e      	ldr	r6, [r1, #0]
 800e2c0:	602b      	str	r3, [r5, #0]
 800e2c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e2c6:	bf18      	it	ne
 800e2c8:	b236      	sxthne	r6, r6
 800e2ca:	e7ef      	b.n	800e2ac <_printf_i+0xbc>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	6820      	ldr	r0, [r4, #0]
 800e2d0:	1d19      	adds	r1, r3, #4
 800e2d2:	6029      	str	r1, [r5, #0]
 800e2d4:	0601      	lsls	r1, r0, #24
 800e2d6:	d501      	bpl.n	800e2dc <_printf_i+0xec>
 800e2d8:	681e      	ldr	r6, [r3, #0]
 800e2da:	e002      	b.n	800e2e2 <_printf_i+0xf2>
 800e2dc:	0646      	lsls	r6, r0, #25
 800e2de:	d5fb      	bpl.n	800e2d8 <_printf_i+0xe8>
 800e2e0:	881e      	ldrh	r6, [r3, #0]
 800e2e2:	4854      	ldr	r0, [pc, #336]	; (800e434 <_printf_i+0x244>)
 800e2e4:	2f6f      	cmp	r7, #111	; 0x6f
 800e2e6:	bf0c      	ite	eq
 800e2e8:	2308      	moveq	r3, #8
 800e2ea:	230a      	movne	r3, #10
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2f2:	6865      	ldr	r5, [r4, #4]
 800e2f4:	60a5      	str	r5, [r4, #8]
 800e2f6:	2d00      	cmp	r5, #0
 800e2f8:	bfa2      	ittt	ge
 800e2fa:	6821      	ldrge	r1, [r4, #0]
 800e2fc:	f021 0104 	bicge.w	r1, r1, #4
 800e300:	6021      	strge	r1, [r4, #0]
 800e302:	b90e      	cbnz	r6, 800e308 <_printf_i+0x118>
 800e304:	2d00      	cmp	r5, #0
 800e306:	d04d      	beq.n	800e3a4 <_printf_i+0x1b4>
 800e308:	4615      	mov	r5, r2
 800e30a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e30e:	fb03 6711 	mls	r7, r3, r1, r6
 800e312:	5dc7      	ldrb	r7, [r0, r7]
 800e314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e318:	4637      	mov	r7, r6
 800e31a:	42bb      	cmp	r3, r7
 800e31c:	460e      	mov	r6, r1
 800e31e:	d9f4      	bls.n	800e30a <_printf_i+0x11a>
 800e320:	2b08      	cmp	r3, #8
 800e322:	d10b      	bne.n	800e33c <_printf_i+0x14c>
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	07de      	lsls	r6, r3, #31
 800e328:	d508      	bpl.n	800e33c <_printf_i+0x14c>
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	6861      	ldr	r1, [r4, #4]
 800e32e:	4299      	cmp	r1, r3
 800e330:	bfde      	ittt	le
 800e332:	2330      	movle	r3, #48	; 0x30
 800e334:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e33c:	1b52      	subs	r2, r2, r5
 800e33e:	6122      	str	r2, [r4, #16]
 800e340:	f8cd a000 	str.w	sl, [sp]
 800e344:	464b      	mov	r3, r9
 800e346:	aa03      	add	r2, sp, #12
 800e348:	4621      	mov	r1, r4
 800e34a:	4640      	mov	r0, r8
 800e34c:	f7ff fee2 	bl	800e114 <_printf_common>
 800e350:	3001      	adds	r0, #1
 800e352:	d14c      	bne.n	800e3ee <_printf_i+0x1fe>
 800e354:	f04f 30ff 	mov.w	r0, #4294967295
 800e358:	b004      	add	sp, #16
 800e35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35e:	4835      	ldr	r0, [pc, #212]	; (800e434 <_printf_i+0x244>)
 800e360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e364:	6829      	ldr	r1, [r5, #0]
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	f851 6b04 	ldr.w	r6, [r1], #4
 800e36c:	6029      	str	r1, [r5, #0]
 800e36e:	061d      	lsls	r5, r3, #24
 800e370:	d514      	bpl.n	800e39c <_printf_i+0x1ac>
 800e372:	07df      	lsls	r7, r3, #31
 800e374:	bf44      	itt	mi
 800e376:	f043 0320 	orrmi.w	r3, r3, #32
 800e37a:	6023      	strmi	r3, [r4, #0]
 800e37c:	b91e      	cbnz	r6, 800e386 <_printf_i+0x196>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	f023 0320 	bic.w	r3, r3, #32
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	2310      	movs	r3, #16
 800e388:	e7b0      	b.n	800e2ec <_printf_i+0xfc>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	f043 0320 	orr.w	r3, r3, #32
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	2378      	movs	r3, #120	; 0x78
 800e394:	4828      	ldr	r0, [pc, #160]	; (800e438 <_printf_i+0x248>)
 800e396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e39a:	e7e3      	b.n	800e364 <_printf_i+0x174>
 800e39c:	0659      	lsls	r1, r3, #25
 800e39e:	bf48      	it	mi
 800e3a0:	b2b6      	uxthmi	r6, r6
 800e3a2:	e7e6      	b.n	800e372 <_printf_i+0x182>
 800e3a4:	4615      	mov	r5, r2
 800e3a6:	e7bb      	b.n	800e320 <_printf_i+0x130>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	6826      	ldr	r6, [r4, #0]
 800e3ac:	6961      	ldr	r1, [r4, #20]
 800e3ae:	1d18      	adds	r0, r3, #4
 800e3b0:	6028      	str	r0, [r5, #0]
 800e3b2:	0635      	lsls	r5, r6, #24
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	d501      	bpl.n	800e3bc <_printf_i+0x1cc>
 800e3b8:	6019      	str	r1, [r3, #0]
 800e3ba:	e002      	b.n	800e3c2 <_printf_i+0x1d2>
 800e3bc:	0670      	lsls	r0, r6, #25
 800e3be:	d5fb      	bpl.n	800e3b8 <_printf_i+0x1c8>
 800e3c0:	8019      	strh	r1, [r3, #0]
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	6123      	str	r3, [r4, #16]
 800e3c6:	4615      	mov	r5, r2
 800e3c8:	e7ba      	b.n	800e340 <_printf_i+0x150>
 800e3ca:	682b      	ldr	r3, [r5, #0]
 800e3cc:	1d1a      	adds	r2, r3, #4
 800e3ce:	602a      	str	r2, [r5, #0]
 800e3d0:	681d      	ldr	r5, [r3, #0]
 800e3d2:	6862      	ldr	r2, [r4, #4]
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f7f1 ff8a 	bl	80002f0 <memchr>
 800e3dc:	b108      	cbz	r0, 800e3e2 <_printf_i+0x1f2>
 800e3de:	1b40      	subs	r0, r0, r5
 800e3e0:	6060      	str	r0, [r4, #4]
 800e3e2:	6863      	ldr	r3, [r4, #4]
 800e3e4:	6123      	str	r3, [r4, #16]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3ec:	e7a8      	b.n	800e340 <_printf_i+0x150>
 800e3ee:	6923      	ldr	r3, [r4, #16]
 800e3f0:	462a      	mov	r2, r5
 800e3f2:	4649      	mov	r1, r9
 800e3f4:	4640      	mov	r0, r8
 800e3f6:	47d0      	blx	sl
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	d0ab      	beq.n	800e354 <_printf_i+0x164>
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	079b      	lsls	r3, r3, #30
 800e400:	d413      	bmi.n	800e42a <_printf_i+0x23a>
 800e402:	68e0      	ldr	r0, [r4, #12]
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	4298      	cmp	r0, r3
 800e408:	bfb8      	it	lt
 800e40a:	4618      	movlt	r0, r3
 800e40c:	e7a4      	b.n	800e358 <_printf_i+0x168>
 800e40e:	2301      	movs	r3, #1
 800e410:	4632      	mov	r2, r6
 800e412:	4649      	mov	r1, r9
 800e414:	4640      	mov	r0, r8
 800e416:	47d0      	blx	sl
 800e418:	3001      	adds	r0, #1
 800e41a:	d09b      	beq.n	800e354 <_printf_i+0x164>
 800e41c:	3501      	adds	r5, #1
 800e41e:	68e3      	ldr	r3, [r4, #12]
 800e420:	9903      	ldr	r1, [sp, #12]
 800e422:	1a5b      	subs	r3, r3, r1
 800e424:	42ab      	cmp	r3, r5
 800e426:	dcf2      	bgt.n	800e40e <_printf_i+0x21e>
 800e428:	e7eb      	b.n	800e402 <_printf_i+0x212>
 800e42a:	2500      	movs	r5, #0
 800e42c:	f104 0619 	add.w	r6, r4, #25
 800e430:	e7f5      	b.n	800e41e <_printf_i+0x22e>
 800e432:	bf00      	nop
 800e434:	0801154e 	.word	0x0801154e
 800e438:	0801155f 	.word	0x0801155f

0800e43c <sniprintf>:
 800e43c:	b40c      	push	{r2, r3}
 800e43e:	b530      	push	{r4, r5, lr}
 800e440:	4b17      	ldr	r3, [pc, #92]	; (800e4a0 <sniprintf+0x64>)
 800e442:	1e0c      	subs	r4, r1, #0
 800e444:	681d      	ldr	r5, [r3, #0]
 800e446:	b09d      	sub	sp, #116	; 0x74
 800e448:	da08      	bge.n	800e45c <sniprintf+0x20>
 800e44a:	238b      	movs	r3, #139	; 0x8b
 800e44c:	602b      	str	r3, [r5, #0]
 800e44e:	f04f 30ff 	mov.w	r0, #4294967295
 800e452:	b01d      	add	sp, #116	; 0x74
 800e454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e458:	b002      	add	sp, #8
 800e45a:	4770      	bx	lr
 800e45c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e460:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e464:	bf14      	ite	ne
 800e466:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e46a:	4623      	moveq	r3, r4
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	9307      	str	r3, [sp, #28]
 800e470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e474:	9002      	str	r0, [sp, #8]
 800e476:	9006      	str	r0, [sp, #24]
 800e478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e47c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e47e:	ab21      	add	r3, sp, #132	; 0x84
 800e480:	a902      	add	r1, sp, #8
 800e482:	4628      	mov	r0, r5
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	f001 fb0b 	bl	800faa0 <_svfiprintf_r>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	bfbc      	itt	lt
 800e48e:	238b      	movlt	r3, #139	; 0x8b
 800e490:	602b      	strlt	r3, [r5, #0]
 800e492:	2c00      	cmp	r4, #0
 800e494:	d0dd      	beq.n	800e452 <sniprintf+0x16>
 800e496:	9b02      	ldr	r3, [sp, #8]
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
 800e49c:	e7d9      	b.n	800e452 <sniprintf+0x16>
 800e49e:	bf00      	nop
 800e4a0:	24000010 	.word	0x24000010

0800e4a4 <siprintf>:
 800e4a4:	b40e      	push	{r1, r2, r3}
 800e4a6:	b500      	push	{lr}
 800e4a8:	b09c      	sub	sp, #112	; 0x70
 800e4aa:	ab1d      	add	r3, sp, #116	; 0x74
 800e4ac:	9002      	str	r0, [sp, #8]
 800e4ae:	9006      	str	r0, [sp, #24]
 800e4b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e4b4:	4809      	ldr	r0, [pc, #36]	; (800e4dc <siprintf+0x38>)
 800e4b6:	9107      	str	r1, [sp, #28]
 800e4b8:	9104      	str	r1, [sp, #16]
 800e4ba:	4909      	ldr	r1, [pc, #36]	; (800e4e0 <siprintf+0x3c>)
 800e4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c0:	9105      	str	r1, [sp, #20]
 800e4c2:	6800      	ldr	r0, [r0, #0]
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	a902      	add	r1, sp, #8
 800e4c8:	f001 faea 	bl	800faa0 <_svfiprintf_r>
 800e4cc:	9b02      	ldr	r3, [sp, #8]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	701a      	strb	r2, [r3, #0]
 800e4d2:	b01c      	add	sp, #112	; 0x70
 800e4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4d8:	b003      	add	sp, #12
 800e4da:	4770      	bx	lr
 800e4dc:	24000010 	.word	0x24000010
 800e4e0:	ffff0208 	.word	0xffff0208

0800e4e4 <quorem>:
 800e4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	6903      	ldr	r3, [r0, #16]
 800e4ea:	690c      	ldr	r4, [r1, #16]
 800e4ec:	42a3      	cmp	r3, r4
 800e4ee:	4607      	mov	r7, r0
 800e4f0:	f2c0 8081 	blt.w	800e5f6 <quorem+0x112>
 800e4f4:	3c01      	subs	r4, #1
 800e4f6:	f101 0814 	add.w	r8, r1, #20
 800e4fa:	f100 0514 	add.w	r5, r0, #20
 800e4fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e50c:	3301      	adds	r3, #1
 800e50e:	429a      	cmp	r2, r3
 800e510:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e518:	fbb2 f6f3 	udiv	r6, r2, r3
 800e51c:	d331      	bcc.n	800e582 <quorem+0x9e>
 800e51e:	f04f 0e00 	mov.w	lr, #0
 800e522:	4640      	mov	r0, r8
 800e524:	46ac      	mov	ip, r5
 800e526:	46f2      	mov	sl, lr
 800e528:	f850 2b04 	ldr.w	r2, [r0], #4
 800e52c:	b293      	uxth	r3, r2
 800e52e:	fb06 e303 	mla	r3, r6, r3, lr
 800e532:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e536:	b29b      	uxth	r3, r3
 800e538:	ebaa 0303 	sub.w	r3, sl, r3
 800e53c:	f8dc a000 	ldr.w	sl, [ip]
 800e540:	0c12      	lsrs	r2, r2, #16
 800e542:	fa13 f38a 	uxtah	r3, r3, sl
 800e546:	fb06 e202 	mla	r2, r6, r2, lr
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	9b00      	ldr	r3, [sp, #0]
 800e54e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e552:	b292      	uxth	r2, r2
 800e554:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e55c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e560:	4581      	cmp	r9, r0
 800e562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e566:	f84c 3b04 	str.w	r3, [ip], #4
 800e56a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e56e:	d2db      	bcs.n	800e528 <quorem+0x44>
 800e570:	f855 300b 	ldr.w	r3, [r5, fp]
 800e574:	b92b      	cbnz	r3, 800e582 <quorem+0x9e>
 800e576:	9b01      	ldr	r3, [sp, #4]
 800e578:	3b04      	subs	r3, #4
 800e57a:	429d      	cmp	r5, r3
 800e57c:	461a      	mov	r2, r3
 800e57e:	d32e      	bcc.n	800e5de <quorem+0xfa>
 800e580:	613c      	str	r4, [r7, #16]
 800e582:	4638      	mov	r0, r7
 800e584:	f001 f838 	bl	800f5f8 <__mcmp>
 800e588:	2800      	cmp	r0, #0
 800e58a:	db24      	blt.n	800e5d6 <quorem+0xf2>
 800e58c:	3601      	adds	r6, #1
 800e58e:	4628      	mov	r0, r5
 800e590:	f04f 0c00 	mov.w	ip, #0
 800e594:	f858 2b04 	ldr.w	r2, [r8], #4
 800e598:	f8d0 e000 	ldr.w	lr, [r0]
 800e59c:	b293      	uxth	r3, r2
 800e59e:	ebac 0303 	sub.w	r3, ip, r3
 800e5a2:	0c12      	lsrs	r2, r2, #16
 800e5a4:	fa13 f38e 	uxtah	r3, r3, lr
 800e5a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e5ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5b6:	45c1      	cmp	r9, r8
 800e5b8:	f840 3b04 	str.w	r3, [r0], #4
 800e5bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e5c0:	d2e8      	bcs.n	800e594 <quorem+0xb0>
 800e5c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5ca:	b922      	cbnz	r2, 800e5d6 <quorem+0xf2>
 800e5cc:	3b04      	subs	r3, #4
 800e5ce:	429d      	cmp	r5, r3
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	d30a      	bcc.n	800e5ea <quorem+0x106>
 800e5d4:	613c      	str	r4, [r7, #16]
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	b003      	add	sp, #12
 800e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5de:	6812      	ldr	r2, [r2, #0]
 800e5e0:	3b04      	subs	r3, #4
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	d1cc      	bne.n	800e580 <quorem+0x9c>
 800e5e6:	3c01      	subs	r4, #1
 800e5e8:	e7c7      	b.n	800e57a <quorem+0x96>
 800e5ea:	6812      	ldr	r2, [r2, #0]
 800e5ec:	3b04      	subs	r3, #4
 800e5ee:	2a00      	cmp	r2, #0
 800e5f0:	d1f0      	bne.n	800e5d4 <quorem+0xf0>
 800e5f2:	3c01      	subs	r4, #1
 800e5f4:	e7eb      	b.n	800e5ce <quorem+0xea>
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	e7ee      	b.n	800e5d8 <quorem+0xf4>
 800e5fa:	0000      	movs	r0, r0
 800e5fc:	0000      	movs	r0, r0
	...

0800e600 <_dtoa_r>:
 800e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e604:	ed2d 8b02 	vpush	{d8}
 800e608:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e60a:	b091      	sub	sp, #68	; 0x44
 800e60c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e610:	ec59 8b10 	vmov	r8, r9, d0
 800e614:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e616:	9106      	str	r1, [sp, #24]
 800e618:	4606      	mov	r6, r0
 800e61a:	9208      	str	r2, [sp, #32]
 800e61c:	930c      	str	r3, [sp, #48]	; 0x30
 800e61e:	b975      	cbnz	r5, 800e63e <_dtoa_r+0x3e>
 800e620:	2010      	movs	r0, #16
 800e622:	f000 fd5f 	bl	800f0e4 <malloc>
 800e626:	4602      	mov	r2, r0
 800e628:	6270      	str	r0, [r6, #36]	; 0x24
 800e62a:	b920      	cbnz	r0, 800e636 <_dtoa_r+0x36>
 800e62c:	4baa      	ldr	r3, [pc, #680]	; (800e8d8 <_dtoa_r+0x2d8>)
 800e62e:	21ea      	movs	r1, #234	; 0xea
 800e630:	48aa      	ldr	r0, [pc, #680]	; (800e8dc <_dtoa_r+0x2dc>)
 800e632:	f001 fb45 	bl	800fcc0 <__assert_func>
 800e636:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e63a:	6005      	str	r5, [r0, #0]
 800e63c:	60c5      	str	r5, [r0, #12]
 800e63e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e640:	6819      	ldr	r1, [r3, #0]
 800e642:	b151      	cbz	r1, 800e65a <_dtoa_r+0x5a>
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	604a      	str	r2, [r1, #4]
 800e648:	2301      	movs	r3, #1
 800e64a:	4093      	lsls	r3, r2
 800e64c:	608b      	str	r3, [r1, #8]
 800e64e:	4630      	mov	r0, r6
 800e650:	f000 fd90 	bl	800f174 <_Bfree>
 800e654:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e656:	2200      	movs	r2, #0
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	f1b9 0300 	subs.w	r3, r9, #0
 800e65e:	bfbb      	ittet	lt
 800e660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e664:	9303      	strlt	r3, [sp, #12]
 800e666:	2300      	movge	r3, #0
 800e668:	2201      	movlt	r2, #1
 800e66a:	bfac      	ite	ge
 800e66c:	6023      	strge	r3, [r4, #0]
 800e66e:	6022      	strlt	r2, [r4, #0]
 800e670:	4b9b      	ldr	r3, [pc, #620]	; (800e8e0 <_dtoa_r+0x2e0>)
 800e672:	9c03      	ldr	r4, [sp, #12]
 800e674:	43a3      	bics	r3, r4
 800e676:	d11c      	bne.n	800e6b2 <_dtoa_r+0xb2>
 800e678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e67a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e67e:	6013      	str	r3, [r2, #0]
 800e680:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e684:	ea53 0308 	orrs.w	r3, r3, r8
 800e688:	f000 84fd 	beq.w	800f086 <_dtoa_r+0xa86>
 800e68c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e68e:	b963      	cbnz	r3, 800e6aa <_dtoa_r+0xaa>
 800e690:	4b94      	ldr	r3, [pc, #592]	; (800e8e4 <_dtoa_r+0x2e4>)
 800e692:	e01f      	b.n	800e6d4 <_dtoa_r+0xd4>
 800e694:	4b94      	ldr	r3, [pc, #592]	; (800e8e8 <_dtoa_r+0x2e8>)
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	3308      	adds	r3, #8
 800e69a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e69c:	6013      	str	r3, [r2, #0]
 800e69e:	9801      	ldr	r0, [sp, #4]
 800e6a0:	b011      	add	sp, #68	; 0x44
 800e6a2:	ecbd 8b02 	vpop	{d8}
 800e6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6aa:	4b8e      	ldr	r3, [pc, #568]	; (800e8e4 <_dtoa_r+0x2e4>)
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	3303      	adds	r3, #3
 800e6b0:	e7f3      	b.n	800e69a <_dtoa_r+0x9a>
 800e6b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e6b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	d10b      	bne.n	800e6d8 <_dtoa_r+0xd8>
 800e6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 84d9 	beq.w	800f080 <_dtoa_r+0xa80>
 800e6ce:	4887      	ldr	r0, [pc, #540]	; (800e8ec <_dtoa_r+0x2ec>)
 800e6d0:	6018      	str	r0, [r3, #0]
 800e6d2:	1e43      	subs	r3, r0, #1
 800e6d4:	9301      	str	r3, [sp, #4]
 800e6d6:	e7e2      	b.n	800e69e <_dtoa_r+0x9e>
 800e6d8:	a90f      	add	r1, sp, #60	; 0x3c
 800e6da:	aa0e      	add	r2, sp, #56	; 0x38
 800e6dc:	4630      	mov	r0, r6
 800e6de:	eeb0 0b48 	vmov.f64	d0, d8
 800e6e2:	f001 f82f 	bl	800f744 <__d2b>
 800e6e6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e6ee:	2900      	cmp	r1, #0
 800e6f0:	d046      	beq.n	800e780 <_dtoa_r+0x180>
 800e6f2:	ee18 4a90 	vmov	r4, s17
 800e6f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e6fa:	ec53 2b18 	vmov	r2, r3, d8
 800e6fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e702:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e706:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e70a:	2400      	movs	r4, #0
 800e70c:	ec43 2b16 	vmov	d6, r2, r3
 800e710:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e714:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e8c0 <_dtoa_r+0x2c0>
 800e718:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e71c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800e8c8 <_dtoa_r+0x2c8>
 800e720:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e724:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800e8d0 <_dtoa_r+0x2d0>
 800e728:	ee07 1a90 	vmov	s15, r1
 800e72c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e730:	eeb0 7b46 	vmov.f64	d7, d6
 800e734:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e738:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e73c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e744:	ee16 ba90 	vmov	fp, s13
 800e748:	940a      	str	r4, [sp, #40]	; 0x28
 800e74a:	d508      	bpl.n	800e75e <_dtoa_r+0x15e>
 800e74c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e750:	eeb4 6b47 	vcmp.f64	d6, d7
 800e754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e758:	bf18      	it	ne
 800e75a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e75e:	f1bb 0f16 	cmp.w	fp, #22
 800e762:	d82f      	bhi.n	800e7c4 <_dtoa_r+0x1c4>
 800e764:	4b62      	ldr	r3, [pc, #392]	; (800e8f0 <_dtoa_r+0x2f0>)
 800e766:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e76a:	ed93 7b00 	vldr	d7, [r3]
 800e76e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e776:	d501      	bpl.n	800e77c <_dtoa_r+0x17c>
 800e778:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e77c:	2300      	movs	r3, #0
 800e77e:	e022      	b.n	800e7c6 <_dtoa_r+0x1c6>
 800e780:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e782:	4401      	add	r1, r0
 800e784:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e788:	2b20      	cmp	r3, #32
 800e78a:	bfc1      	itttt	gt
 800e78c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e790:	fa04 f303 	lslgt.w	r3, r4, r3
 800e794:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e798:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e79c:	bfd6      	itet	le
 800e79e:	f1c3 0320 	rsble	r3, r3, #32
 800e7a2:	ea43 0808 	orrgt.w	r8, r3, r8
 800e7a6:	fa08 f803 	lslle.w	r8, r8, r3
 800e7aa:	ee07 8a90 	vmov	s15, r8
 800e7ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e7b2:	3901      	subs	r1, #1
 800e7b4:	ee17 4a90 	vmov	r4, s15
 800e7b8:	ec53 2b17 	vmov	r2, r3, d7
 800e7bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e7c0:	2401      	movs	r4, #1
 800e7c2:	e7a3      	b.n	800e70c <_dtoa_r+0x10c>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7c8:	1a43      	subs	r3, r0, r1
 800e7ca:	1e5a      	subs	r2, r3, #1
 800e7cc:	bf45      	ittet	mi
 800e7ce:	f1c3 0301 	rsbmi	r3, r3, #1
 800e7d2:	9304      	strmi	r3, [sp, #16]
 800e7d4:	2300      	movpl	r3, #0
 800e7d6:	2300      	movmi	r3, #0
 800e7d8:	9205      	str	r2, [sp, #20]
 800e7da:	bf54      	ite	pl
 800e7dc:	9304      	strpl	r3, [sp, #16]
 800e7de:	9305      	strmi	r3, [sp, #20]
 800e7e0:	f1bb 0f00 	cmp.w	fp, #0
 800e7e4:	db18      	blt.n	800e818 <_dtoa_r+0x218>
 800e7e6:	9b05      	ldr	r3, [sp, #20]
 800e7e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800e7ec:	445b      	add	r3, fp
 800e7ee:	9305      	str	r3, [sp, #20]
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	9a06      	ldr	r2, [sp, #24]
 800e7f4:	2a09      	cmp	r2, #9
 800e7f6:	d849      	bhi.n	800e88c <_dtoa_r+0x28c>
 800e7f8:	2a05      	cmp	r2, #5
 800e7fa:	bfc4      	itt	gt
 800e7fc:	3a04      	subgt	r2, #4
 800e7fe:	9206      	strgt	r2, [sp, #24]
 800e800:	9a06      	ldr	r2, [sp, #24]
 800e802:	f1a2 0202 	sub.w	r2, r2, #2
 800e806:	bfcc      	ite	gt
 800e808:	2400      	movgt	r4, #0
 800e80a:	2401      	movle	r4, #1
 800e80c:	2a03      	cmp	r2, #3
 800e80e:	d848      	bhi.n	800e8a2 <_dtoa_r+0x2a2>
 800e810:	e8df f002 	tbb	[pc, r2]
 800e814:	3a2c2e0b 	.word	0x3a2c2e0b
 800e818:	9b04      	ldr	r3, [sp, #16]
 800e81a:	2200      	movs	r2, #0
 800e81c:	eba3 030b 	sub.w	r3, r3, fp
 800e820:	9304      	str	r3, [sp, #16]
 800e822:	9209      	str	r2, [sp, #36]	; 0x24
 800e824:	f1cb 0300 	rsb	r3, fp, #0
 800e828:	e7e3      	b.n	800e7f2 <_dtoa_r+0x1f2>
 800e82a:	2200      	movs	r2, #0
 800e82c:	9207      	str	r2, [sp, #28]
 800e82e:	9a08      	ldr	r2, [sp, #32]
 800e830:	2a00      	cmp	r2, #0
 800e832:	dc39      	bgt.n	800e8a8 <_dtoa_r+0x2a8>
 800e834:	f04f 0a01 	mov.w	sl, #1
 800e838:	46d1      	mov	r9, sl
 800e83a:	4652      	mov	r2, sl
 800e83c:	f8cd a020 	str.w	sl, [sp, #32]
 800e840:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e842:	2100      	movs	r1, #0
 800e844:	6079      	str	r1, [r7, #4]
 800e846:	2004      	movs	r0, #4
 800e848:	f100 0c14 	add.w	ip, r0, #20
 800e84c:	4594      	cmp	ip, r2
 800e84e:	6879      	ldr	r1, [r7, #4]
 800e850:	d92f      	bls.n	800e8b2 <_dtoa_r+0x2b2>
 800e852:	4630      	mov	r0, r6
 800e854:	930d      	str	r3, [sp, #52]	; 0x34
 800e856:	f000 fc4d 	bl	800f0f4 <_Balloc>
 800e85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e85c:	9001      	str	r0, [sp, #4]
 800e85e:	4602      	mov	r2, r0
 800e860:	2800      	cmp	r0, #0
 800e862:	d149      	bne.n	800e8f8 <_dtoa_r+0x2f8>
 800e864:	4b23      	ldr	r3, [pc, #140]	; (800e8f4 <_dtoa_r+0x2f4>)
 800e866:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e86a:	e6e1      	b.n	800e630 <_dtoa_r+0x30>
 800e86c:	2201      	movs	r2, #1
 800e86e:	e7dd      	b.n	800e82c <_dtoa_r+0x22c>
 800e870:	2200      	movs	r2, #0
 800e872:	9207      	str	r2, [sp, #28]
 800e874:	9a08      	ldr	r2, [sp, #32]
 800e876:	eb0b 0a02 	add.w	sl, fp, r2
 800e87a:	f10a 0901 	add.w	r9, sl, #1
 800e87e:	464a      	mov	r2, r9
 800e880:	2a01      	cmp	r2, #1
 800e882:	bfb8      	it	lt
 800e884:	2201      	movlt	r2, #1
 800e886:	e7db      	b.n	800e840 <_dtoa_r+0x240>
 800e888:	2201      	movs	r2, #1
 800e88a:	e7f2      	b.n	800e872 <_dtoa_r+0x272>
 800e88c:	2401      	movs	r4, #1
 800e88e:	2200      	movs	r2, #0
 800e890:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800e894:	f04f 3aff 	mov.w	sl, #4294967295
 800e898:	2100      	movs	r1, #0
 800e89a:	46d1      	mov	r9, sl
 800e89c:	2212      	movs	r2, #18
 800e89e:	9108      	str	r1, [sp, #32]
 800e8a0:	e7ce      	b.n	800e840 <_dtoa_r+0x240>
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	9207      	str	r2, [sp, #28]
 800e8a6:	e7f5      	b.n	800e894 <_dtoa_r+0x294>
 800e8a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e8ac:	46d1      	mov	r9, sl
 800e8ae:	4652      	mov	r2, sl
 800e8b0:	e7c6      	b.n	800e840 <_dtoa_r+0x240>
 800e8b2:	3101      	adds	r1, #1
 800e8b4:	6079      	str	r1, [r7, #4]
 800e8b6:	0040      	lsls	r0, r0, #1
 800e8b8:	e7c6      	b.n	800e848 <_dtoa_r+0x248>
 800e8ba:	bf00      	nop
 800e8bc:	f3af 8000 	nop.w
 800e8c0:	636f4361 	.word	0x636f4361
 800e8c4:	3fd287a7 	.word	0x3fd287a7
 800e8c8:	8b60c8b3 	.word	0x8b60c8b3
 800e8cc:	3fc68a28 	.word	0x3fc68a28
 800e8d0:	509f79fb 	.word	0x509f79fb
 800e8d4:	3fd34413 	.word	0x3fd34413
 800e8d8:	0801157d 	.word	0x0801157d
 800e8dc:	08011594 	.word	0x08011594
 800e8e0:	7ff00000 	.word	0x7ff00000
 800e8e4:	08011579 	.word	0x08011579
 800e8e8:	08011570 	.word	0x08011570
 800e8ec:	0801154d 	.word	0x0801154d
 800e8f0:	08011688 	.word	0x08011688
 800e8f4:	080115ef 	.word	0x080115ef
 800e8f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e8fa:	9901      	ldr	r1, [sp, #4]
 800e8fc:	6011      	str	r1, [r2, #0]
 800e8fe:	f1b9 0f0e 	cmp.w	r9, #14
 800e902:	d86c      	bhi.n	800e9de <_dtoa_r+0x3de>
 800e904:	2c00      	cmp	r4, #0
 800e906:	d06a      	beq.n	800e9de <_dtoa_r+0x3de>
 800e908:	f1bb 0f00 	cmp.w	fp, #0
 800e90c:	f340 80a0 	ble.w	800ea50 <_dtoa_r+0x450>
 800e910:	49c1      	ldr	r1, [pc, #772]	; (800ec18 <_dtoa_r+0x618>)
 800e912:	f00b 020f 	and.w	r2, fp, #15
 800e916:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e91a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e91e:	ed92 7b00 	vldr	d7, [r2]
 800e922:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e926:	f000 8087 	beq.w	800ea38 <_dtoa_r+0x438>
 800e92a:	4abc      	ldr	r2, [pc, #752]	; (800ec1c <_dtoa_r+0x61c>)
 800e92c:	ed92 6b08 	vldr	d6, [r2, #32]
 800e930:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e934:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e938:	f001 010f 	and.w	r1, r1, #15
 800e93c:	2203      	movs	r2, #3
 800e93e:	48b7      	ldr	r0, [pc, #732]	; (800ec1c <_dtoa_r+0x61c>)
 800e940:	2900      	cmp	r1, #0
 800e942:	d17b      	bne.n	800ea3c <_dtoa_r+0x43c>
 800e944:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e948:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e94c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e952:	2900      	cmp	r1, #0
 800e954:	f000 80a2 	beq.w	800ea9c <_dtoa_r+0x49c>
 800e958:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e95c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e960:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	f140 8098 	bpl.w	800ea9c <_dtoa_r+0x49c>
 800e96c:	f1b9 0f00 	cmp.w	r9, #0
 800e970:	f000 8094 	beq.w	800ea9c <_dtoa_r+0x49c>
 800e974:	f1ba 0f00 	cmp.w	sl, #0
 800e978:	dd2f      	ble.n	800e9da <_dtoa_r+0x3da>
 800e97a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e97e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e982:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e986:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e98a:	3201      	adds	r2, #1
 800e98c:	4650      	mov	r0, sl
 800e98e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e992:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e996:	ee07 2a90 	vmov	s15, r2
 800e99a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e99e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e9a2:	ee15 4a90 	vmov	r4, s11
 800e9a6:	ec52 1b15 	vmov	r1, r2, d5
 800e9aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d177      	bne.n	800eaa2 <_dtoa_r+0x4a2>
 800e9b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e9b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e9ba:	ec42 1b17 	vmov	d7, r1, r2
 800e9be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c6:	f300 8263 	bgt.w	800ee90 <_dtoa_r+0x890>
 800e9ca:	eeb1 7b47 	vneg.f64	d7, d7
 800e9ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d6:	f100 8258 	bmi.w	800ee8a <_dtoa_r+0x88a>
 800e9da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e9de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	f2c0 811d 	blt.w	800ec20 <_dtoa_r+0x620>
 800e9e6:	f1bb 0f0e 	cmp.w	fp, #14
 800e9ea:	f300 8119 	bgt.w	800ec20 <_dtoa_r+0x620>
 800e9ee:	4b8a      	ldr	r3, [pc, #552]	; (800ec18 <_dtoa_r+0x618>)
 800e9f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e9f4:	ed93 6b00 	vldr	d6, [r3]
 800e9f8:	9b08      	ldr	r3, [sp, #32]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f280 80b7 	bge.w	800eb6e <_dtoa_r+0x56e>
 800ea00:	f1b9 0f00 	cmp.w	r9, #0
 800ea04:	f300 80b3 	bgt.w	800eb6e <_dtoa_r+0x56e>
 800ea08:	f040 823f 	bne.w	800ee8a <_dtoa_r+0x88a>
 800ea0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ea10:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ea14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ea1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea20:	464c      	mov	r4, r9
 800ea22:	464f      	mov	r7, r9
 800ea24:	f280 8215 	bge.w	800ee52 <_dtoa_r+0x852>
 800ea28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ea2c:	2331      	movs	r3, #49	; 0x31
 800ea2e:	f808 3b01 	strb.w	r3, [r8], #1
 800ea32:	f10b 0b01 	add.w	fp, fp, #1
 800ea36:	e211      	b.n	800ee5c <_dtoa_r+0x85c>
 800ea38:	2202      	movs	r2, #2
 800ea3a:	e780      	b.n	800e93e <_dtoa_r+0x33e>
 800ea3c:	07cc      	lsls	r4, r1, #31
 800ea3e:	d504      	bpl.n	800ea4a <_dtoa_r+0x44a>
 800ea40:	ed90 6b00 	vldr	d6, [r0]
 800ea44:	3201      	adds	r2, #1
 800ea46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea4a:	1049      	asrs	r1, r1, #1
 800ea4c:	3008      	adds	r0, #8
 800ea4e:	e777      	b.n	800e940 <_dtoa_r+0x340>
 800ea50:	d022      	beq.n	800ea98 <_dtoa_r+0x498>
 800ea52:	f1cb 0100 	rsb	r1, fp, #0
 800ea56:	4a70      	ldr	r2, [pc, #448]	; (800ec18 <_dtoa_r+0x618>)
 800ea58:	f001 000f 	and.w	r0, r1, #15
 800ea5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ea60:	ed92 7b00 	vldr	d7, [r2]
 800ea64:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ea68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea6c:	486b      	ldr	r0, [pc, #428]	; (800ec1c <_dtoa_r+0x61c>)
 800ea6e:	1109      	asrs	r1, r1, #4
 800ea70:	2400      	movs	r4, #0
 800ea72:	2202      	movs	r2, #2
 800ea74:	b929      	cbnz	r1, 800ea82 <_dtoa_r+0x482>
 800ea76:	2c00      	cmp	r4, #0
 800ea78:	f43f af6a 	beq.w	800e950 <_dtoa_r+0x350>
 800ea7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea80:	e766      	b.n	800e950 <_dtoa_r+0x350>
 800ea82:	07cf      	lsls	r7, r1, #31
 800ea84:	d505      	bpl.n	800ea92 <_dtoa_r+0x492>
 800ea86:	ed90 6b00 	vldr	d6, [r0]
 800ea8a:	3201      	adds	r2, #1
 800ea8c:	2401      	movs	r4, #1
 800ea8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea92:	1049      	asrs	r1, r1, #1
 800ea94:	3008      	adds	r0, #8
 800ea96:	e7ed      	b.n	800ea74 <_dtoa_r+0x474>
 800ea98:	2202      	movs	r2, #2
 800ea9a:	e759      	b.n	800e950 <_dtoa_r+0x350>
 800ea9c:	465f      	mov	r7, fp
 800ea9e:	4648      	mov	r0, r9
 800eaa0:	e775      	b.n	800e98e <_dtoa_r+0x38e>
 800eaa2:	ec42 1b17 	vmov	d7, r1, r2
 800eaa6:	4a5c      	ldr	r2, [pc, #368]	; (800ec18 <_dtoa_r+0x618>)
 800eaa8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800eaac:	ed12 4b02 	vldr	d4, [r2, #-8]
 800eab0:	9a01      	ldr	r2, [sp, #4]
 800eab2:	1814      	adds	r4, r2, r0
 800eab4:	9a07      	ldr	r2, [sp, #28]
 800eab6:	b352      	cbz	r2, 800eb0e <_dtoa_r+0x50e>
 800eab8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800eabc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800eac0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eac4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800eac8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eacc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ead0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ead4:	ee14 2a90 	vmov	r2, s9
 800ead8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eadc:	3230      	adds	r2, #48	; 0x30
 800eade:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eae2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaea:	f808 2b01 	strb.w	r2, [r8], #1
 800eaee:	d439      	bmi.n	800eb64 <_dtoa_r+0x564>
 800eaf0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800eaf4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafc:	d472      	bmi.n	800ebe4 <_dtoa_r+0x5e4>
 800eafe:	45a0      	cmp	r8, r4
 800eb00:	f43f af6b 	beq.w	800e9da <_dtoa_r+0x3da>
 800eb04:	ee27 7b03 	vmul.f64	d7, d7, d3
 800eb08:	ee26 6b03 	vmul.f64	d6, d6, d3
 800eb0c:	e7e0      	b.n	800ead0 <_dtoa_r+0x4d0>
 800eb0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb12:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eb16:	4621      	mov	r1, r4
 800eb18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eb1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800eb20:	ee14 2a90 	vmov	r2, s9
 800eb24:	3230      	adds	r2, #48	; 0x30
 800eb26:	f808 2b01 	strb.w	r2, [r8], #1
 800eb2a:	45a0      	cmp	r8, r4
 800eb2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800eb30:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eb34:	d118      	bne.n	800eb68 <_dtoa_r+0x568>
 800eb36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800eb3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800eb3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800eb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb46:	dc4d      	bgt.n	800ebe4 <_dtoa_r+0x5e4>
 800eb48:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eb4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb54:	f57f af41 	bpl.w	800e9da <_dtoa_r+0x3da>
 800eb58:	4688      	mov	r8, r1
 800eb5a:	3901      	subs	r1, #1
 800eb5c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800eb60:	2b30      	cmp	r3, #48	; 0x30
 800eb62:	d0f9      	beq.n	800eb58 <_dtoa_r+0x558>
 800eb64:	46bb      	mov	fp, r7
 800eb66:	e02a      	b.n	800ebbe <_dtoa_r+0x5be>
 800eb68:	ee26 6b03 	vmul.f64	d6, d6, d3
 800eb6c:	e7d6      	b.n	800eb1c <_dtoa_r+0x51c>
 800eb6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb72:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800eb76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb7a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800eb7e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800eb82:	ee15 3a10 	vmov	r3, s10
 800eb86:	3330      	adds	r3, #48	; 0x30
 800eb88:	f808 3b01 	strb.w	r3, [r8], #1
 800eb8c:	9b01      	ldr	r3, [sp, #4]
 800eb8e:	eba8 0303 	sub.w	r3, r8, r3
 800eb92:	4599      	cmp	r9, r3
 800eb94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800eb98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800eb9c:	d133      	bne.n	800ec06 <_dtoa_r+0x606>
 800eb9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800eba2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebaa:	dc1a      	bgt.n	800ebe2 <_dtoa_r+0x5e2>
 800ebac:	eeb4 7b46 	vcmp.f64	d7, d6
 800ebb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb4:	d103      	bne.n	800ebbe <_dtoa_r+0x5be>
 800ebb6:	ee15 3a10 	vmov	r3, s10
 800ebba:	07d9      	lsls	r1, r3, #31
 800ebbc:	d411      	bmi.n	800ebe2 <_dtoa_r+0x5e2>
 800ebbe:	4629      	mov	r1, r5
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f000 fad7 	bl	800f174 <_Bfree>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebca:	f888 3000 	strb.w	r3, [r8]
 800ebce:	f10b 0301 	add.w	r3, fp, #1
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f43f ad61 	beq.w	800e69e <_dtoa_r+0x9e>
 800ebdc:	f8c3 8000 	str.w	r8, [r3]
 800ebe0:	e55d      	b.n	800e69e <_dtoa_r+0x9e>
 800ebe2:	465f      	mov	r7, fp
 800ebe4:	4643      	mov	r3, r8
 800ebe6:	4698      	mov	r8, r3
 800ebe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebec:	2a39      	cmp	r2, #57	; 0x39
 800ebee:	d106      	bne.n	800ebfe <_dtoa_r+0x5fe>
 800ebf0:	9a01      	ldr	r2, [sp, #4]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d1f7      	bne.n	800ebe6 <_dtoa_r+0x5e6>
 800ebf6:	9901      	ldr	r1, [sp, #4]
 800ebf8:	2230      	movs	r2, #48	; 0x30
 800ebfa:	3701      	adds	r7, #1
 800ebfc:	700a      	strb	r2, [r1, #0]
 800ebfe:	781a      	ldrb	r2, [r3, #0]
 800ec00:	3201      	adds	r2, #1
 800ec02:	701a      	strb	r2, [r3, #0]
 800ec04:	e7ae      	b.n	800eb64 <_dtoa_r+0x564>
 800ec06:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec12:	d1b2      	bne.n	800eb7a <_dtoa_r+0x57a>
 800ec14:	e7d3      	b.n	800ebbe <_dtoa_r+0x5be>
 800ec16:	bf00      	nop
 800ec18:	08011688 	.word	0x08011688
 800ec1c:	08011660 	.word	0x08011660
 800ec20:	9907      	ldr	r1, [sp, #28]
 800ec22:	2900      	cmp	r1, #0
 800ec24:	f000 80d0 	beq.w	800edc8 <_dtoa_r+0x7c8>
 800ec28:	9906      	ldr	r1, [sp, #24]
 800ec2a:	2901      	cmp	r1, #1
 800ec2c:	f300 80b4 	bgt.w	800ed98 <_dtoa_r+0x798>
 800ec30:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ec32:	2900      	cmp	r1, #0
 800ec34:	f000 80ac 	beq.w	800ed90 <_dtoa_r+0x790>
 800ec38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ec3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ec40:	461c      	mov	r4, r3
 800ec42:	930a      	str	r3, [sp, #40]	; 0x28
 800ec44:	9b04      	ldr	r3, [sp, #16]
 800ec46:	4413      	add	r3, r2
 800ec48:	9304      	str	r3, [sp, #16]
 800ec4a:	9b05      	ldr	r3, [sp, #20]
 800ec4c:	2101      	movs	r1, #1
 800ec4e:	4413      	add	r3, r2
 800ec50:	4630      	mov	r0, r6
 800ec52:	9305      	str	r3, [sp, #20]
 800ec54:	f000 fb46 	bl	800f2e4 <__i2b>
 800ec58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5a:	4607      	mov	r7, r0
 800ec5c:	f1b8 0f00 	cmp.w	r8, #0
 800ec60:	dd0d      	ble.n	800ec7e <_dtoa_r+0x67e>
 800ec62:	9a05      	ldr	r2, [sp, #20]
 800ec64:	2a00      	cmp	r2, #0
 800ec66:	dd0a      	ble.n	800ec7e <_dtoa_r+0x67e>
 800ec68:	4542      	cmp	r2, r8
 800ec6a:	9904      	ldr	r1, [sp, #16]
 800ec6c:	bfa8      	it	ge
 800ec6e:	4642      	movge	r2, r8
 800ec70:	1a89      	subs	r1, r1, r2
 800ec72:	9104      	str	r1, [sp, #16]
 800ec74:	9905      	ldr	r1, [sp, #20]
 800ec76:	eba8 0802 	sub.w	r8, r8, r2
 800ec7a:	1a8a      	subs	r2, r1, r2
 800ec7c:	9205      	str	r2, [sp, #20]
 800ec7e:	b303      	cbz	r3, 800ecc2 <_dtoa_r+0x6c2>
 800ec80:	9a07      	ldr	r2, [sp, #28]
 800ec82:	2a00      	cmp	r2, #0
 800ec84:	f000 80a5 	beq.w	800edd2 <_dtoa_r+0x7d2>
 800ec88:	2c00      	cmp	r4, #0
 800ec8a:	dd13      	ble.n	800ecb4 <_dtoa_r+0x6b4>
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	4622      	mov	r2, r4
 800ec90:	4630      	mov	r0, r6
 800ec92:	930d      	str	r3, [sp, #52]	; 0x34
 800ec94:	f000 fbe6 	bl	800f464 <__pow5mult>
 800ec98:	462a      	mov	r2, r5
 800ec9a:	4601      	mov	r1, r0
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f000 fb36 	bl	800f310 <__multiply>
 800eca4:	4629      	mov	r1, r5
 800eca6:	900a      	str	r0, [sp, #40]	; 0x28
 800eca8:	4630      	mov	r0, r6
 800ecaa:	f000 fa63 	bl	800f174 <_Bfree>
 800ecae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecb2:	4615      	mov	r5, r2
 800ecb4:	1b1a      	subs	r2, r3, r4
 800ecb6:	d004      	beq.n	800ecc2 <_dtoa_r+0x6c2>
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f000 fbd2 	bl	800f464 <__pow5mult>
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f000 fb0d 	bl	800f2e4 <__i2b>
 800ecca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	4604      	mov	r4, r0
 800ecd0:	f340 8081 	ble.w	800edd6 <_dtoa_r+0x7d6>
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	4601      	mov	r1, r0
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f000 fbc3 	bl	800f464 <__pow5mult>
 800ecde:	9b06      	ldr	r3, [sp, #24]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	4604      	mov	r4, r0
 800ece4:	dd7a      	ble.n	800eddc <_dtoa_r+0x7dc>
 800ece6:	2300      	movs	r3, #0
 800ece8:	930a      	str	r3, [sp, #40]	; 0x28
 800ecea:	6922      	ldr	r2, [r4, #16]
 800ecec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ecf0:	6910      	ldr	r0, [r2, #16]
 800ecf2:	f000 faa7 	bl	800f244 <__hi0bits>
 800ecf6:	f1c0 0020 	rsb	r0, r0, #32
 800ecfa:	9b05      	ldr	r3, [sp, #20]
 800ecfc:	4418      	add	r0, r3
 800ecfe:	f010 001f 	ands.w	r0, r0, #31
 800ed02:	f000 808c 	beq.w	800ee1e <_dtoa_r+0x81e>
 800ed06:	f1c0 0220 	rsb	r2, r0, #32
 800ed0a:	2a04      	cmp	r2, #4
 800ed0c:	f340 8085 	ble.w	800ee1a <_dtoa_r+0x81a>
 800ed10:	f1c0 001c 	rsb	r0, r0, #28
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	4403      	add	r3, r0
 800ed18:	9304      	str	r3, [sp, #16]
 800ed1a:	9b05      	ldr	r3, [sp, #20]
 800ed1c:	4403      	add	r3, r0
 800ed1e:	4480      	add	r8, r0
 800ed20:	9305      	str	r3, [sp, #20]
 800ed22:	9b04      	ldr	r3, [sp, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dd05      	ble.n	800ed34 <_dtoa_r+0x734>
 800ed28:	4629      	mov	r1, r5
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	f000 fbf3 	bl	800f518 <__lshift>
 800ed32:	4605      	mov	r5, r0
 800ed34:	9b05      	ldr	r3, [sp, #20]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	dd05      	ble.n	800ed46 <_dtoa_r+0x746>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f000 fbea 	bl	800f518 <__lshift>
 800ed44:	4604      	mov	r4, r0
 800ed46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d06a      	beq.n	800ee22 <_dtoa_r+0x822>
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f000 fc52 	bl	800f5f8 <__mcmp>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	da64      	bge.n	800ee22 <_dtoa_r+0x822>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	220a      	movs	r2, #10
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f000 fa2a 	bl	800f1b8 <__multadd>
 800ed64:	9b07      	ldr	r3, [sp, #28]
 800ed66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 8191 	beq.w	800f094 <_dtoa_r+0xa94>
 800ed72:	4639      	mov	r1, r7
 800ed74:	2300      	movs	r3, #0
 800ed76:	220a      	movs	r2, #10
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f000 fa1d 	bl	800f1b8 <__multadd>
 800ed7e:	f1ba 0f00 	cmp.w	sl, #0
 800ed82:	4607      	mov	r7, r0
 800ed84:	f300 808d 	bgt.w	800eea2 <_dtoa_r+0x8a2>
 800ed88:	9b06      	ldr	r3, [sp, #24]
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	dc50      	bgt.n	800ee30 <_dtoa_r+0x830>
 800ed8e:	e088      	b.n	800eea2 <_dtoa_r+0x8a2>
 800ed90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ed96:	e751      	b.n	800ec3c <_dtoa_r+0x63c>
 800ed98:	f109 34ff 	add.w	r4, r9, #4294967295
 800ed9c:	42a3      	cmp	r3, r4
 800ed9e:	bfbf      	itttt	lt
 800eda0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800eda2:	1ae3      	sublt	r3, r4, r3
 800eda4:	18d2      	addlt	r2, r2, r3
 800eda6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800eda8:	bfb6      	itet	lt
 800edaa:	4623      	movlt	r3, r4
 800edac:	1b1c      	subge	r4, r3, r4
 800edae:	2400      	movlt	r4, #0
 800edb0:	f1b9 0f00 	cmp.w	r9, #0
 800edb4:	bfb5      	itete	lt
 800edb6:	9a04      	ldrlt	r2, [sp, #16]
 800edb8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800edbc:	eba2 0809 	sublt.w	r8, r2, r9
 800edc0:	464a      	movge	r2, r9
 800edc2:	bfb8      	it	lt
 800edc4:	2200      	movlt	r2, #0
 800edc6:	e73c      	b.n	800ec42 <_dtoa_r+0x642>
 800edc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800edcc:	9f07      	ldr	r7, [sp, #28]
 800edce:	461c      	mov	r4, r3
 800edd0:	e744      	b.n	800ec5c <_dtoa_r+0x65c>
 800edd2:	461a      	mov	r2, r3
 800edd4:	e770      	b.n	800ecb8 <_dtoa_r+0x6b8>
 800edd6:	9b06      	ldr	r3, [sp, #24]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	dc18      	bgt.n	800ee0e <_dtoa_r+0x80e>
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	b9b3      	cbnz	r3, 800ee0e <_dtoa_r+0x80e>
 800ede0:	9b03      	ldr	r3, [sp, #12]
 800ede2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ede6:	b9a2      	cbnz	r2, 800ee12 <_dtoa_r+0x812>
 800ede8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800edec:	0d12      	lsrs	r2, r2, #20
 800edee:	0512      	lsls	r2, r2, #20
 800edf0:	b18a      	cbz	r2, 800ee16 <_dtoa_r+0x816>
 800edf2:	9b04      	ldr	r3, [sp, #16]
 800edf4:	3301      	adds	r3, #1
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	9b05      	ldr	r3, [sp, #20]
 800edfa:	3301      	adds	r3, #1
 800edfc:	9305      	str	r3, [sp, #20]
 800edfe:	2301      	movs	r3, #1
 800ee00:	930a      	str	r3, [sp, #40]	; 0x28
 800ee02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f47f af70 	bne.w	800ecea <_dtoa_r+0x6ea>
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	e775      	b.n	800ecfa <_dtoa_r+0x6fa>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e7f6      	b.n	800ee00 <_dtoa_r+0x800>
 800ee12:	9b02      	ldr	r3, [sp, #8]
 800ee14:	e7f4      	b.n	800ee00 <_dtoa_r+0x800>
 800ee16:	920a      	str	r2, [sp, #40]	; 0x28
 800ee18:	e7f3      	b.n	800ee02 <_dtoa_r+0x802>
 800ee1a:	d082      	beq.n	800ed22 <_dtoa_r+0x722>
 800ee1c:	4610      	mov	r0, r2
 800ee1e:	301c      	adds	r0, #28
 800ee20:	e778      	b.n	800ed14 <_dtoa_r+0x714>
 800ee22:	f1b9 0f00 	cmp.w	r9, #0
 800ee26:	dc37      	bgt.n	800ee98 <_dtoa_r+0x898>
 800ee28:	9b06      	ldr	r3, [sp, #24]
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	dd34      	ble.n	800ee98 <_dtoa_r+0x898>
 800ee2e:	46ca      	mov	sl, r9
 800ee30:	f1ba 0f00 	cmp.w	sl, #0
 800ee34:	d10d      	bne.n	800ee52 <_dtoa_r+0x852>
 800ee36:	4621      	mov	r1, r4
 800ee38:	4653      	mov	r3, sl
 800ee3a:	2205      	movs	r2, #5
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f000 f9bb 	bl	800f1b8 <__multadd>
 800ee42:	4601      	mov	r1, r0
 800ee44:	4604      	mov	r4, r0
 800ee46:	4628      	mov	r0, r5
 800ee48:	f000 fbd6 	bl	800f5f8 <__mcmp>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	f73f adeb 	bgt.w	800ea28 <_dtoa_r+0x428>
 800ee52:	9b08      	ldr	r3, [sp, #32]
 800ee54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee58:	ea6f 0b03 	mvn.w	fp, r3
 800ee5c:	f04f 0900 	mov.w	r9, #0
 800ee60:	4621      	mov	r1, r4
 800ee62:	4630      	mov	r0, r6
 800ee64:	f000 f986 	bl	800f174 <_Bfree>
 800ee68:	2f00      	cmp	r7, #0
 800ee6a:	f43f aea8 	beq.w	800ebbe <_dtoa_r+0x5be>
 800ee6e:	f1b9 0f00 	cmp.w	r9, #0
 800ee72:	d005      	beq.n	800ee80 <_dtoa_r+0x880>
 800ee74:	45b9      	cmp	r9, r7
 800ee76:	d003      	beq.n	800ee80 <_dtoa_r+0x880>
 800ee78:	4649      	mov	r1, r9
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f000 f97a 	bl	800f174 <_Bfree>
 800ee80:	4639      	mov	r1, r7
 800ee82:	4630      	mov	r0, r6
 800ee84:	f000 f976 	bl	800f174 <_Bfree>
 800ee88:	e699      	b.n	800ebbe <_dtoa_r+0x5be>
 800ee8a:	2400      	movs	r4, #0
 800ee8c:	4627      	mov	r7, r4
 800ee8e:	e7e0      	b.n	800ee52 <_dtoa_r+0x852>
 800ee90:	46bb      	mov	fp, r7
 800ee92:	4604      	mov	r4, r0
 800ee94:	4607      	mov	r7, r0
 800ee96:	e5c7      	b.n	800ea28 <_dtoa_r+0x428>
 800ee98:	9b07      	ldr	r3, [sp, #28]
 800ee9a:	46ca      	mov	sl, r9
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 8100 	beq.w	800f0a2 <_dtoa_r+0xaa2>
 800eea2:	f1b8 0f00 	cmp.w	r8, #0
 800eea6:	dd05      	ble.n	800eeb4 <_dtoa_r+0x8b4>
 800eea8:	4639      	mov	r1, r7
 800eeaa:	4642      	mov	r2, r8
 800eeac:	4630      	mov	r0, r6
 800eeae:	f000 fb33 	bl	800f518 <__lshift>
 800eeb2:	4607      	mov	r7, r0
 800eeb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d05d      	beq.n	800ef76 <_dtoa_r+0x976>
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	4630      	mov	r0, r6
 800eebe:	f000 f919 	bl	800f0f4 <_Balloc>
 800eec2:	4680      	mov	r8, r0
 800eec4:	b928      	cbnz	r0, 800eed2 <_dtoa_r+0x8d2>
 800eec6:	4b82      	ldr	r3, [pc, #520]	; (800f0d0 <_dtoa_r+0xad0>)
 800eec8:	4602      	mov	r2, r0
 800eeca:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eece:	f7ff bbaf 	b.w	800e630 <_dtoa_r+0x30>
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	3202      	adds	r2, #2
 800eed6:	0092      	lsls	r2, r2, #2
 800eed8:	f107 010c 	add.w	r1, r7, #12
 800eedc:	300c      	adds	r0, #12
 800eede:	f7fe fe55 	bl	800db8c <memcpy>
 800eee2:	2201      	movs	r2, #1
 800eee4:	4641      	mov	r1, r8
 800eee6:	4630      	mov	r0, r6
 800eee8:	f000 fb16 	bl	800f518 <__lshift>
 800eeec:	9b01      	ldr	r3, [sp, #4]
 800eeee:	3301      	adds	r3, #1
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	9b01      	ldr	r3, [sp, #4]
 800eef4:	4453      	add	r3, sl
 800eef6:	9308      	str	r3, [sp, #32]
 800eef8:	9b02      	ldr	r3, [sp, #8]
 800eefa:	f003 0301 	and.w	r3, r3, #1
 800eefe:	46b9      	mov	r9, r7
 800ef00:	9307      	str	r3, [sp, #28]
 800ef02:	4607      	mov	r7, r0
 800ef04:	9b04      	ldr	r3, [sp, #16]
 800ef06:	4621      	mov	r1, r4
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	9302      	str	r3, [sp, #8]
 800ef0e:	f7ff fae9 	bl	800e4e4 <quorem>
 800ef12:	4603      	mov	r3, r0
 800ef14:	3330      	adds	r3, #48	; 0x30
 800ef16:	9005      	str	r0, [sp, #20]
 800ef18:	4649      	mov	r1, r9
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef1e:	f000 fb6b 	bl	800f5f8 <__mcmp>
 800ef22:	463a      	mov	r2, r7
 800ef24:	4682      	mov	sl, r0
 800ef26:	4621      	mov	r1, r4
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f000 fb81 	bl	800f630 <__mdiff>
 800ef2e:	68c2      	ldr	r2, [r0, #12]
 800ef30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef32:	4680      	mov	r8, r0
 800ef34:	bb0a      	cbnz	r2, 800ef7a <_dtoa_r+0x97a>
 800ef36:	4601      	mov	r1, r0
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f000 fb5d 	bl	800f5f8 <__mcmp>
 800ef3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef40:	4602      	mov	r2, r0
 800ef42:	4641      	mov	r1, r8
 800ef44:	4630      	mov	r0, r6
 800ef46:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ef4a:	f000 f913 	bl	800f174 <_Bfree>
 800ef4e:	9b06      	ldr	r3, [sp, #24]
 800ef50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef52:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ef56:	ea43 0102 	orr.w	r1, r3, r2
 800ef5a:	9b07      	ldr	r3, [sp, #28]
 800ef5c:	430b      	orrs	r3, r1
 800ef5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef60:	d10d      	bne.n	800ef7e <_dtoa_r+0x97e>
 800ef62:	2b39      	cmp	r3, #57	; 0x39
 800ef64:	d029      	beq.n	800efba <_dtoa_r+0x9ba>
 800ef66:	f1ba 0f00 	cmp.w	sl, #0
 800ef6a:	dd01      	ble.n	800ef70 <_dtoa_r+0x970>
 800ef6c:	9b05      	ldr	r3, [sp, #20]
 800ef6e:	3331      	adds	r3, #49	; 0x31
 800ef70:	9a02      	ldr	r2, [sp, #8]
 800ef72:	7013      	strb	r3, [r2, #0]
 800ef74:	e774      	b.n	800ee60 <_dtoa_r+0x860>
 800ef76:	4638      	mov	r0, r7
 800ef78:	e7b8      	b.n	800eeec <_dtoa_r+0x8ec>
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	e7e1      	b.n	800ef42 <_dtoa_r+0x942>
 800ef7e:	f1ba 0f00 	cmp.w	sl, #0
 800ef82:	db06      	blt.n	800ef92 <_dtoa_r+0x992>
 800ef84:	9906      	ldr	r1, [sp, #24]
 800ef86:	ea41 0a0a 	orr.w	sl, r1, sl
 800ef8a:	9907      	ldr	r1, [sp, #28]
 800ef8c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ef90:	d120      	bne.n	800efd4 <_dtoa_r+0x9d4>
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	ddec      	ble.n	800ef70 <_dtoa_r+0x970>
 800ef96:	4629      	mov	r1, r5
 800ef98:	2201      	movs	r2, #1
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	9304      	str	r3, [sp, #16]
 800ef9e:	f000 fabb 	bl	800f518 <__lshift>
 800efa2:	4621      	mov	r1, r4
 800efa4:	4605      	mov	r5, r0
 800efa6:	f000 fb27 	bl	800f5f8 <__mcmp>
 800efaa:	2800      	cmp	r0, #0
 800efac:	9b04      	ldr	r3, [sp, #16]
 800efae:	dc02      	bgt.n	800efb6 <_dtoa_r+0x9b6>
 800efb0:	d1de      	bne.n	800ef70 <_dtoa_r+0x970>
 800efb2:	07da      	lsls	r2, r3, #31
 800efb4:	d5dc      	bpl.n	800ef70 <_dtoa_r+0x970>
 800efb6:	2b39      	cmp	r3, #57	; 0x39
 800efb8:	d1d8      	bne.n	800ef6c <_dtoa_r+0x96c>
 800efba:	9a02      	ldr	r2, [sp, #8]
 800efbc:	2339      	movs	r3, #57	; 0x39
 800efbe:	7013      	strb	r3, [r2, #0]
 800efc0:	4643      	mov	r3, r8
 800efc2:	4698      	mov	r8, r3
 800efc4:	3b01      	subs	r3, #1
 800efc6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800efca:	2a39      	cmp	r2, #57	; 0x39
 800efcc:	d051      	beq.n	800f072 <_dtoa_r+0xa72>
 800efce:	3201      	adds	r2, #1
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	e745      	b.n	800ee60 <_dtoa_r+0x860>
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	dd03      	ble.n	800efe0 <_dtoa_r+0x9e0>
 800efd8:	2b39      	cmp	r3, #57	; 0x39
 800efda:	d0ee      	beq.n	800efba <_dtoa_r+0x9ba>
 800efdc:	3301      	adds	r3, #1
 800efde:	e7c7      	b.n	800ef70 <_dtoa_r+0x970>
 800efe0:	9a04      	ldr	r2, [sp, #16]
 800efe2:	9908      	ldr	r1, [sp, #32]
 800efe4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800efe8:	428a      	cmp	r2, r1
 800efea:	d02b      	beq.n	800f044 <_dtoa_r+0xa44>
 800efec:	4629      	mov	r1, r5
 800efee:	2300      	movs	r3, #0
 800eff0:	220a      	movs	r2, #10
 800eff2:	4630      	mov	r0, r6
 800eff4:	f000 f8e0 	bl	800f1b8 <__multadd>
 800eff8:	45b9      	cmp	r9, r7
 800effa:	4605      	mov	r5, r0
 800effc:	f04f 0300 	mov.w	r3, #0
 800f000:	f04f 020a 	mov.w	r2, #10
 800f004:	4649      	mov	r1, r9
 800f006:	4630      	mov	r0, r6
 800f008:	d107      	bne.n	800f01a <_dtoa_r+0xa1a>
 800f00a:	f000 f8d5 	bl	800f1b8 <__multadd>
 800f00e:	4681      	mov	r9, r0
 800f010:	4607      	mov	r7, r0
 800f012:	9b04      	ldr	r3, [sp, #16]
 800f014:	3301      	adds	r3, #1
 800f016:	9304      	str	r3, [sp, #16]
 800f018:	e774      	b.n	800ef04 <_dtoa_r+0x904>
 800f01a:	f000 f8cd 	bl	800f1b8 <__multadd>
 800f01e:	4639      	mov	r1, r7
 800f020:	4681      	mov	r9, r0
 800f022:	2300      	movs	r3, #0
 800f024:	220a      	movs	r2, #10
 800f026:	4630      	mov	r0, r6
 800f028:	f000 f8c6 	bl	800f1b8 <__multadd>
 800f02c:	4607      	mov	r7, r0
 800f02e:	e7f0      	b.n	800f012 <_dtoa_r+0xa12>
 800f030:	f1ba 0f00 	cmp.w	sl, #0
 800f034:	9a01      	ldr	r2, [sp, #4]
 800f036:	bfcc      	ite	gt
 800f038:	46d0      	movgt	r8, sl
 800f03a:	f04f 0801 	movle.w	r8, #1
 800f03e:	4490      	add	r8, r2
 800f040:	f04f 0900 	mov.w	r9, #0
 800f044:	4629      	mov	r1, r5
 800f046:	2201      	movs	r2, #1
 800f048:	4630      	mov	r0, r6
 800f04a:	9302      	str	r3, [sp, #8]
 800f04c:	f000 fa64 	bl	800f518 <__lshift>
 800f050:	4621      	mov	r1, r4
 800f052:	4605      	mov	r5, r0
 800f054:	f000 fad0 	bl	800f5f8 <__mcmp>
 800f058:	2800      	cmp	r0, #0
 800f05a:	dcb1      	bgt.n	800efc0 <_dtoa_r+0x9c0>
 800f05c:	d102      	bne.n	800f064 <_dtoa_r+0xa64>
 800f05e:	9b02      	ldr	r3, [sp, #8]
 800f060:	07db      	lsls	r3, r3, #31
 800f062:	d4ad      	bmi.n	800efc0 <_dtoa_r+0x9c0>
 800f064:	4643      	mov	r3, r8
 800f066:	4698      	mov	r8, r3
 800f068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f06c:	2a30      	cmp	r2, #48	; 0x30
 800f06e:	d0fa      	beq.n	800f066 <_dtoa_r+0xa66>
 800f070:	e6f6      	b.n	800ee60 <_dtoa_r+0x860>
 800f072:	9a01      	ldr	r2, [sp, #4]
 800f074:	429a      	cmp	r2, r3
 800f076:	d1a4      	bne.n	800efc2 <_dtoa_r+0x9c2>
 800f078:	f10b 0b01 	add.w	fp, fp, #1
 800f07c:	2331      	movs	r3, #49	; 0x31
 800f07e:	e778      	b.n	800ef72 <_dtoa_r+0x972>
 800f080:	4b14      	ldr	r3, [pc, #80]	; (800f0d4 <_dtoa_r+0xad4>)
 800f082:	f7ff bb27 	b.w	800e6d4 <_dtoa_r+0xd4>
 800f086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f47f ab03 	bne.w	800e694 <_dtoa_r+0x94>
 800f08e:	4b12      	ldr	r3, [pc, #72]	; (800f0d8 <_dtoa_r+0xad8>)
 800f090:	f7ff bb20 	b.w	800e6d4 <_dtoa_r+0xd4>
 800f094:	f1ba 0f00 	cmp.w	sl, #0
 800f098:	dc03      	bgt.n	800f0a2 <_dtoa_r+0xaa2>
 800f09a:	9b06      	ldr	r3, [sp, #24]
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	f73f aec7 	bgt.w	800ee30 <_dtoa_r+0x830>
 800f0a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f0a6:	4621      	mov	r1, r4
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f7ff fa1b 	bl	800e4e4 <quorem>
 800f0ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f0b2:	f808 3b01 	strb.w	r3, [r8], #1
 800f0b6:	9a01      	ldr	r2, [sp, #4]
 800f0b8:	eba8 0202 	sub.w	r2, r8, r2
 800f0bc:	4592      	cmp	sl, r2
 800f0be:	ddb7      	ble.n	800f030 <_dtoa_r+0xa30>
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	220a      	movs	r2, #10
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f000 f876 	bl	800f1b8 <__multadd>
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	e7ea      	b.n	800f0a6 <_dtoa_r+0xaa6>
 800f0d0:	080115ef 	.word	0x080115ef
 800f0d4:	0801154c 	.word	0x0801154c
 800f0d8:	08011570 	.word	0x08011570

0800f0dc <_localeconv_r>:
 800f0dc:	4800      	ldr	r0, [pc, #0]	; (800f0e0 <_localeconv_r+0x4>)
 800f0de:	4770      	bx	lr
 800f0e0:	24000164 	.word	0x24000164

0800f0e4 <malloc>:
 800f0e4:	4b02      	ldr	r3, [pc, #8]	; (800f0f0 <malloc+0xc>)
 800f0e6:	4601      	mov	r1, r0
 800f0e8:	6818      	ldr	r0, [r3, #0]
 800f0ea:	f000 bc09 	b.w	800f900 <_malloc_r>
 800f0ee:	bf00      	nop
 800f0f0:	24000010 	.word	0x24000010

0800f0f4 <_Balloc>:
 800f0f4:	b570      	push	{r4, r5, r6, lr}
 800f0f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	b976      	cbnz	r6, 800f11c <_Balloc+0x28>
 800f0fe:	2010      	movs	r0, #16
 800f100:	f7ff fff0 	bl	800f0e4 <malloc>
 800f104:	4602      	mov	r2, r0
 800f106:	6260      	str	r0, [r4, #36]	; 0x24
 800f108:	b920      	cbnz	r0, 800f114 <_Balloc+0x20>
 800f10a:	4b18      	ldr	r3, [pc, #96]	; (800f16c <_Balloc+0x78>)
 800f10c:	4818      	ldr	r0, [pc, #96]	; (800f170 <_Balloc+0x7c>)
 800f10e:	2166      	movs	r1, #102	; 0x66
 800f110:	f000 fdd6 	bl	800fcc0 <__assert_func>
 800f114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f118:	6006      	str	r6, [r0, #0]
 800f11a:	60c6      	str	r6, [r0, #12]
 800f11c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f11e:	68f3      	ldr	r3, [r6, #12]
 800f120:	b183      	cbz	r3, 800f144 <_Balloc+0x50>
 800f122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f12a:	b9b8      	cbnz	r0, 800f15c <_Balloc+0x68>
 800f12c:	2101      	movs	r1, #1
 800f12e:	fa01 f605 	lsl.w	r6, r1, r5
 800f132:	1d72      	adds	r2, r6, #5
 800f134:	0092      	lsls	r2, r2, #2
 800f136:	4620      	mov	r0, r4
 800f138:	f000 fb60 	bl	800f7fc <_calloc_r>
 800f13c:	b160      	cbz	r0, 800f158 <_Balloc+0x64>
 800f13e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f142:	e00e      	b.n	800f162 <_Balloc+0x6e>
 800f144:	2221      	movs	r2, #33	; 0x21
 800f146:	2104      	movs	r1, #4
 800f148:	4620      	mov	r0, r4
 800f14a:	f000 fb57 	bl	800f7fc <_calloc_r>
 800f14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f150:	60f0      	str	r0, [r6, #12]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d1e4      	bne.n	800f122 <_Balloc+0x2e>
 800f158:	2000      	movs	r0, #0
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	6802      	ldr	r2, [r0, #0]
 800f15e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f162:	2300      	movs	r3, #0
 800f164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f168:	e7f7      	b.n	800f15a <_Balloc+0x66>
 800f16a:	bf00      	nop
 800f16c:	0801157d 	.word	0x0801157d
 800f170:	08011600 	.word	0x08011600

0800f174 <_Bfree>:
 800f174:	b570      	push	{r4, r5, r6, lr}
 800f176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f178:	4605      	mov	r5, r0
 800f17a:	460c      	mov	r4, r1
 800f17c:	b976      	cbnz	r6, 800f19c <_Bfree+0x28>
 800f17e:	2010      	movs	r0, #16
 800f180:	f7ff ffb0 	bl	800f0e4 <malloc>
 800f184:	4602      	mov	r2, r0
 800f186:	6268      	str	r0, [r5, #36]	; 0x24
 800f188:	b920      	cbnz	r0, 800f194 <_Bfree+0x20>
 800f18a:	4b09      	ldr	r3, [pc, #36]	; (800f1b0 <_Bfree+0x3c>)
 800f18c:	4809      	ldr	r0, [pc, #36]	; (800f1b4 <_Bfree+0x40>)
 800f18e:	218a      	movs	r1, #138	; 0x8a
 800f190:	f000 fd96 	bl	800fcc0 <__assert_func>
 800f194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f198:	6006      	str	r6, [r0, #0]
 800f19a:	60c6      	str	r6, [r0, #12]
 800f19c:	b13c      	cbz	r4, 800f1ae <_Bfree+0x3a>
 800f19e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f1a0:	6862      	ldr	r2, [r4, #4]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1a8:	6021      	str	r1, [r4, #0]
 800f1aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	0801157d 	.word	0x0801157d
 800f1b4:	08011600 	.word	0x08011600

0800f1b8 <__multadd>:
 800f1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1bc:	690d      	ldr	r5, [r1, #16]
 800f1be:	4607      	mov	r7, r0
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	461e      	mov	r6, r3
 800f1c4:	f101 0c14 	add.w	ip, r1, #20
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	f8dc 3000 	ldr.w	r3, [ip]
 800f1ce:	b299      	uxth	r1, r3
 800f1d0:	fb02 6101 	mla	r1, r2, r1, r6
 800f1d4:	0c1e      	lsrs	r6, r3, #16
 800f1d6:	0c0b      	lsrs	r3, r1, #16
 800f1d8:	fb02 3306 	mla	r3, r2, r6, r3
 800f1dc:	b289      	uxth	r1, r1
 800f1de:	3001      	adds	r0, #1
 800f1e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1e4:	4285      	cmp	r5, r0
 800f1e6:	f84c 1b04 	str.w	r1, [ip], #4
 800f1ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1ee:	dcec      	bgt.n	800f1ca <__multadd+0x12>
 800f1f0:	b30e      	cbz	r6, 800f236 <__multadd+0x7e>
 800f1f2:	68a3      	ldr	r3, [r4, #8]
 800f1f4:	42ab      	cmp	r3, r5
 800f1f6:	dc19      	bgt.n	800f22c <__multadd+0x74>
 800f1f8:	6861      	ldr	r1, [r4, #4]
 800f1fa:	4638      	mov	r0, r7
 800f1fc:	3101      	adds	r1, #1
 800f1fe:	f7ff ff79 	bl	800f0f4 <_Balloc>
 800f202:	4680      	mov	r8, r0
 800f204:	b928      	cbnz	r0, 800f212 <__multadd+0x5a>
 800f206:	4602      	mov	r2, r0
 800f208:	4b0c      	ldr	r3, [pc, #48]	; (800f23c <__multadd+0x84>)
 800f20a:	480d      	ldr	r0, [pc, #52]	; (800f240 <__multadd+0x88>)
 800f20c:	21b5      	movs	r1, #181	; 0xb5
 800f20e:	f000 fd57 	bl	800fcc0 <__assert_func>
 800f212:	6922      	ldr	r2, [r4, #16]
 800f214:	3202      	adds	r2, #2
 800f216:	f104 010c 	add.w	r1, r4, #12
 800f21a:	0092      	lsls	r2, r2, #2
 800f21c:	300c      	adds	r0, #12
 800f21e:	f7fe fcb5 	bl	800db8c <memcpy>
 800f222:	4621      	mov	r1, r4
 800f224:	4638      	mov	r0, r7
 800f226:	f7ff ffa5 	bl	800f174 <_Bfree>
 800f22a:	4644      	mov	r4, r8
 800f22c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f230:	3501      	adds	r5, #1
 800f232:	615e      	str	r6, [r3, #20]
 800f234:	6125      	str	r5, [r4, #16]
 800f236:	4620      	mov	r0, r4
 800f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f23c:	080115ef 	.word	0x080115ef
 800f240:	08011600 	.word	0x08011600

0800f244 <__hi0bits>:
 800f244:	0c03      	lsrs	r3, r0, #16
 800f246:	041b      	lsls	r3, r3, #16
 800f248:	b9d3      	cbnz	r3, 800f280 <__hi0bits+0x3c>
 800f24a:	0400      	lsls	r0, r0, #16
 800f24c:	2310      	movs	r3, #16
 800f24e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f252:	bf04      	itt	eq
 800f254:	0200      	lsleq	r0, r0, #8
 800f256:	3308      	addeq	r3, #8
 800f258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f25c:	bf04      	itt	eq
 800f25e:	0100      	lsleq	r0, r0, #4
 800f260:	3304      	addeq	r3, #4
 800f262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f266:	bf04      	itt	eq
 800f268:	0080      	lsleq	r0, r0, #2
 800f26a:	3302      	addeq	r3, #2
 800f26c:	2800      	cmp	r0, #0
 800f26e:	db05      	blt.n	800f27c <__hi0bits+0x38>
 800f270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f274:	f103 0301 	add.w	r3, r3, #1
 800f278:	bf08      	it	eq
 800f27a:	2320      	moveq	r3, #32
 800f27c:	4618      	mov	r0, r3
 800f27e:	4770      	bx	lr
 800f280:	2300      	movs	r3, #0
 800f282:	e7e4      	b.n	800f24e <__hi0bits+0xa>

0800f284 <__lo0bits>:
 800f284:	6803      	ldr	r3, [r0, #0]
 800f286:	f013 0207 	ands.w	r2, r3, #7
 800f28a:	4601      	mov	r1, r0
 800f28c:	d00b      	beq.n	800f2a6 <__lo0bits+0x22>
 800f28e:	07da      	lsls	r2, r3, #31
 800f290:	d423      	bmi.n	800f2da <__lo0bits+0x56>
 800f292:	0798      	lsls	r0, r3, #30
 800f294:	bf49      	itett	mi
 800f296:	085b      	lsrmi	r3, r3, #1
 800f298:	089b      	lsrpl	r3, r3, #2
 800f29a:	2001      	movmi	r0, #1
 800f29c:	600b      	strmi	r3, [r1, #0]
 800f29e:	bf5c      	itt	pl
 800f2a0:	600b      	strpl	r3, [r1, #0]
 800f2a2:	2002      	movpl	r0, #2
 800f2a4:	4770      	bx	lr
 800f2a6:	b298      	uxth	r0, r3
 800f2a8:	b9a8      	cbnz	r0, 800f2d6 <__lo0bits+0x52>
 800f2aa:	0c1b      	lsrs	r3, r3, #16
 800f2ac:	2010      	movs	r0, #16
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	b90a      	cbnz	r2, 800f2b6 <__lo0bits+0x32>
 800f2b2:	3008      	adds	r0, #8
 800f2b4:	0a1b      	lsrs	r3, r3, #8
 800f2b6:	071a      	lsls	r2, r3, #28
 800f2b8:	bf04      	itt	eq
 800f2ba:	091b      	lsreq	r3, r3, #4
 800f2bc:	3004      	addeq	r0, #4
 800f2be:	079a      	lsls	r2, r3, #30
 800f2c0:	bf04      	itt	eq
 800f2c2:	089b      	lsreq	r3, r3, #2
 800f2c4:	3002      	addeq	r0, #2
 800f2c6:	07da      	lsls	r2, r3, #31
 800f2c8:	d403      	bmi.n	800f2d2 <__lo0bits+0x4e>
 800f2ca:	085b      	lsrs	r3, r3, #1
 800f2cc:	f100 0001 	add.w	r0, r0, #1
 800f2d0:	d005      	beq.n	800f2de <__lo0bits+0x5a>
 800f2d2:	600b      	str	r3, [r1, #0]
 800f2d4:	4770      	bx	lr
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	e7e9      	b.n	800f2ae <__lo0bits+0x2a>
 800f2da:	2000      	movs	r0, #0
 800f2dc:	4770      	bx	lr
 800f2de:	2020      	movs	r0, #32
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <__i2b>:
 800f2e4:	b510      	push	{r4, lr}
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	2101      	movs	r1, #1
 800f2ea:	f7ff ff03 	bl	800f0f4 <_Balloc>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	b928      	cbnz	r0, 800f2fe <__i2b+0x1a>
 800f2f2:	4b05      	ldr	r3, [pc, #20]	; (800f308 <__i2b+0x24>)
 800f2f4:	4805      	ldr	r0, [pc, #20]	; (800f30c <__i2b+0x28>)
 800f2f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f2fa:	f000 fce1 	bl	800fcc0 <__assert_func>
 800f2fe:	2301      	movs	r3, #1
 800f300:	6144      	str	r4, [r0, #20]
 800f302:	6103      	str	r3, [r0, #16]
 800f304:	bd10      	pop	{r4, pc}
 800f306:	bf00      	nop
 800f308:	080115ef 	.word	0x080115ef
 800f30c:	08011600 	.word	0x08011600

0800f310 <__multiply>:
 800f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f314:	4691      	mov	r9, r2
 800f316:	690a      	ldr	r2, [r1, #16]
 800f318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	bfb8      	it	lt
 800f320:	460b      	movlt	r3, r1
 800f322:	460c      	mov	r4, r1
 800f324:	bfbc      	itt	lt
 800f326:	464c      	movlt	r4, r9
 800f328:	4699      	movlt	r9, r3
 800f32a:	6927      	ldr	r7, [r4, #16]
 800f32c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	6861      	ldr	r1, [r4, #4]
 800f334:	eb07 060a 	add.w	r6, r7, sl
 800f338:	42b3      	cmp	r3, r6
 800f33a:	b085      	sub	sp, #20
 800f33c:	bfb8      	it	lt
 800f33e:	3101      	addlt	r1, #1
 800f340:	f7ff fed8 	bl	800f0f4 <_Balloc>
 800f344:	b930      	cbnz	r0, 800f354 <__multiply+0x44>
 800f346:	4602      	mov	r2, r0
 800f348:	4b44      	ldr	r3, [pc, #272]	; (800f45c <__multiply+0x14c>)
 800f34a:	4845      	ldr	r0, [pc, #276]	; (800f460 <__multiply+0x150>)
 800f34c:	f240 115d 	movw	r1, #349	; 0x15d
 800f350:	f000 fcb6 	bl	800fcc0 <__assert_func>
 800f354:	f100 0514 	add.w	r5, r0, #20
 800f358:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f35c:	462b      	mov	r3, r5
 800f35e:	2200      	movs	r2, #0
 800f360:	4543      	cmp	r3, r8
 800f362:	d321      	bcc.n	800f3a8 <__multiply+0x98>
 800f364:	f104 0314 	add.w	r3, r4, #20
 800f368:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f36c:	f109 0314 	add.w	r3, r9, #20
 800f370:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f374:	9202      	str	r2, [sp, #8]
 800f376:	1b3a      	subs	r2, r7, r4
 800f378:	3a15      	subs	r2, #21
 800f37a:	f022 0203 	bic.w	r2, r2, #3
 800f37e:	3204      	adds	r2, #4
 800f380:	f104 0115 	add.w	r1, r4, #21
 800f384:	428f      	cmp	r7, r1
 800f386:	bf38      	it	cc
 800f388:	2204      	movcc	r2, #4
 800f38a:	9201      	str	r2, [sp, #4]
 800f38c:	9a02      	ldr	r2, [sp, #8]
 800f38e:	9303      	str	r3, [sp, #12]
 800f390:	429a      	cmp	r2, r3
 800f392:	d80c      	bhi.n	800f3ae <__multiply+0x9e>
 800f394:	2e00      	cmp	r6, #0
 800f396:	dd03      	ble.n	800f3a0 <__multiply+0x90>
 800f398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d05a      	beq.n	800f456 <__multiply+0x146>
 800f3a0:	6106      	str	r6, [r0, #16]
 800f3a2:	b005      	add	sp, #20
 800f3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a8:	f843 2b04 	str.w	r2, [r3], #4
 800f3ac:	e7d8      	b.n	800f360 <__multiply+0x50>
 800f3ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800f3b2:	f1ba 0f00 	cmp.w	sl, #0
 800f3b6:	d024      	beq.n	800f402 <__multiply+0xf2>
 800f3b8:	f104 0e14 	add.w	lr, r4, #20
 800f3bc:	46a9      	mov	r9, r5
 800f3be:	f04f 0c00 	mov.w	ip, #0
 800f3c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3c6:	f8d9 1000 	ldr.w	r1, [r9]
 800f3ca:	fa1f fb82 	uxth.w	fp, r2
 800f3ce:	b289      	uxth	r1, r1
 800f3d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3d8:	f8d9 2000 	ldr.w	r2, [r9]
 800f3dc:	4461      	add	r1, ip
 800f3de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3ea:	b289      	uxth	r1, r1
 800f3ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3f0:	4577      	cmp	r7, lr
 800f3f2:	f849 1b04 	str.w	r1, [r9], #4
 800f3f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3fa:	d8e2      	bhi.n	800f3c2 <__multiply+0xb2>
 800f3fc:	9a01      	ldr	r2, [sp, #4]
 800f3fe:	f845 c002 	str.w	ip, [r5, r2]
 800f402:	9a03      	ldr	r2, [sp, #12]
 800f404:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f408:	3304      	adds	r3, #4
 800f40a:	f1b9 0f00 	cmp.w	r9, #0
 800f40e:	d020      	beq.n	800f452 <__multiply+0x142>
 800f410:	6829      	ldr	r1, [r5, #0]
 800f412:	f104 0c14 	add.w	ip, r4, #20
 800f416:	46ae      	mov	lr, r5
 800f418:	f04f 0a00 	mov.w	sl, #0
 800f41c:	f8bc b000 	ldrh.w	fp, [ip]
 800f420:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f424:	fb09 220b 	mla	r2, r9, fp, r2
 800f428:	4492      	add	sl, r2
 800f42a:	b289      	uxth	r1, r1
 800f42c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f430:	f84e 1b04 	str.w	r1, [lr], #4
 800f434:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f438:	f8be 1000 	ldrh.w	r1, [lr]
 800f43c:	0c12      	lsrs	r2, r2, #16
 800f43e:	fb09 1102 	mla	r1, r9, r2, r1
 800f442:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f446:	4567      	cmp	r7, ip
 800f448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f44c:	d8e6      	bhi.n	800f41c <__multiply+0x10c>
 800f44e:	9a01      	ldr	r2, [sp, #4]
 800f450:	50a9      	str	r1, [r5, r2]
 800f452:	3504      	adds	r5, #4
 800f454:	e79a      	b.n	800f38c <__multiply+0x7c>
 800f456:	3e01      	subs	r6, #1
 800f458:	e79c      	b.n	800f394 <__multiply+0x84>
 800f45a:	bf00      	nop
 800f45c:	080115ef 	.word	0x080115ef
 800f460:	08011600 	.word	0x08011600

0800f464 <__pow5mult>:
 800f464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f468:	4615      	mov	r5, r2
 800f46a:	f012 0203 	ands.w	r2, r2, #3
 800f46e:	4606      	mov	r6, r0
 800f470:	460f      	mov	r7, r1
 800f472:	d007      	beq.n	800f484 <__pow5mult+0x20>
 800f474:	4c25      	ldr	r4, [pc, #148]	; (800f50c <__pow5mult+0xa8>)
 800f476:	3a01      	subs	r2, #1
 800f478:	2300      	movs	r3, #0
 800f47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f47e:	f7ff fe9b 	bl	800f1b8 <__multadd>
 800f482:	4607      	mov	r7, r0
 800f484:	10ad      	asrs	r5, r5, #2
 800f486:	d03d      	beq.n	800f504 <__pow5mult+0xa0>
 800f488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f48a:	b97c      	cbnz	r4, 800f4ac <__pow5mult+0x48>
 800f48c:	2010      	movs	r0, #16
 800f48e:	f7ff fe29 	bl	800f0e4 <malloc>
 800f492:	4602      	mov	r2, r0
 800f494:	6270      	str	r0, [r6, #36]	; 0x24
 800f496:	b928      	cbnz	r0, 800f4a4 <__pow5mult+0x40>
 800f498:	4b1d      	ldr	r3, [pc, #116]	; (800f510 <__pow5mult+0xac>)
 800f49a:	481e      	ldr	r0, [pc, #120]	; (800f514 <__pow5mult+0xb0>)
 800f49c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f4a0:	f000 fc0e 	bl	800fcc0 <__assert_func>
 800f4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4a8:	6004      	str	r4, [r0, #0]
 800f4aa:	60c4      	str	r4, [r0, #12]
 800f4ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4b4:	b94c      	cbnz	r4, 800f4ca <__pow5mult+0x66>
 800f4b6:	f240 2171 	movw	r1, #625	; 0x271
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f7ff ff12 	bl	800f2e4 <__i2b>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	6003      	str	r3, [r0, #0]
 800f4ca:	f04f 0900 	mov.w	r9, #0
 800f4ce:	07eb      	lsls	r3, r5, #31
 800f4d0:	d50a      	bpl.n	800f4e8 <__pow5mult+0x84>
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f7ff ff1a 	bl	800f310 <__multiply>
 800f4dc:	4639      	mov	r1, r7
 800f4de:	4680      	mov	r8, r0
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f7ff fe47 	bl	800f174 <_Bfree>
 800f4e6:	4647      	mov	r7, r8
 800f4e8:	106d      	asrs	r5, r5, #1
 800f4ea:	d00b      	beq.n	800f504 <__pow5mult+0xa0>
 800f4ec:	6820      	ldr	r0, [r4, #0]
 800f4ee:	b938      	cbnz	r0, 800f500 <__pow5mult+0x9c>
 800f4f0:	4622      	mov	r2, r4
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7ff ff0b 	bl	800f310 <__multiply>
 800f4fa:	6020      	str	r0, [r4, #0]
 800f4fc:	f8c0 9000 	str.w	r9, [r0]
 800f500:	4604      	mov	r4, r0
 800f502:	e7e4      	b.n	800f4ce <__pow5mult+0x6a>
 800f504:	4638      	mov	r0, r7
 800f506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f50a:	bf00      	nop
 800f50c:	08011750 	.word	0x08011750
 800f510:	0801157d 	.word	0x0801157d
 800f514:	08011600 	.word	0x08011600

0800f518 <__lshift>:
 800f518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f51c:	460c      	mov	r4, r1
 800f51e:	6849      	ldr	r1, [r1, #4]
 800f520:	6923      	ldr	r3, [r4, #16]
 800f522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f526:	68a3      	ldr	r3, [r4, #8]
 800f528:	4607      	mov	r7, r0
 800f52a:	4691      	mov	r9, r2
 800f52c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f530:	f108 0601 	add.w	r6, r8, #1
 800f534:	42b3      	cmp	r3, r6
 800f536:	db0b      	blt.n	800f550 <__lshift+0x38>
 800f538:	4638      	mov	r0, r7
 800f53a:	f7ff fddb 	bl	800f0f4 <_Balloc>
 800f53e:	4605      	mov	r5, r0
 800f540:	b948      	cbnz	r0, 800f556 <__lshift+0x3e>
 800f542:	4602      	mov	r2, r0
 800f544:	4b2a      	ldr	r3, [pc, #168]	; (800f5f0 <__lshift+0xd8>)
 800f546:	482b      	ldr	r0, [pc, #172]	; (800f5f4 <__lshift+0xdc>)
 800f548:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f54c:	f000 fbb8 	bl	800fcc0 <__assert_func>
 800f550:	3101      	adds	r1, #1
 800f552:	005b      	lsls	r3, r3, #1
 800f554:	e7ee      	b.n	800f534 <__lshift+0x1c>
 800f556:	2300      	movs	r3, #0
 800f558:	f100 0114 	add.w	r1, r0, #20
 800f55c:	f100 0210 	add.w	r2, r0, #16
 800f560:	4618      	mov	r0, r3
 800f562:	4553      	cmp	r3, sl
 800f564:	db37      	blt.n	800f5d6 <__lshift+0xbe>
 800f566:	6920      	ldr	r0, [r4, #16]
 800f568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f56c:	f104 0314 	add.w	r3, r4, #20
 800f570:	f019 091f 	ands.w	r9, r9, #31
 800f574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f578:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f57c:	d02f      	beq.n	800f5de <__lshift+0xc6>
 800f57e:	f1c9 0e20 	rsb	lr, r9, #32
 800f582:	468a      	mov	sl, r1
 800f584:	f04f 0c00 	mov.w	ip, #0
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	fa02 f209 	lsl.w	r2, r2, r9
 800f58e:	ea42 020c 	orr.w	r2, r2, ip
 800f592:	f84a 2b04 	str.w	r2, [sl], #4
 800f596:	f853 2b04 	ldr.w	r2, [r3], #4
 800f59a:	4298      	cmp	r0, r3
 800f59c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f5a0:	d8f2      	bhi.n	800f588 <__lshift+0x70>
 800f5a2:	1b03      	subs	r3, r0, r4
 800f5a4:	3b15      	subs	r3, #21
 800f5a6:	f023 0303 	bic.w	r3, r3, #3
 800f5aa:	3304      	adds	r3, #4
 800f5ac:	f104 0215 	add.w	r2, r4, #21
 800f5b0:	4290      	cmp	r0, r2
 800f5b2:	bf38      	it	cc
 800f5b4:	2304      	movcc	r3, #4
 800f5b6:	f841 c003 	str.w	ip, [r1, r3]
 800f5ba:	f1bc 0f00 	cmp.w	ip, #0
 800f5be:	d001      	beq.n	800f5c4 <__lshift+0xac>
 800f5c0:	f108 0602 	add.w	r6, r8, #2
 800f5c4:	3e01      	subs	r6, #1
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	612e      	str	r6, [r5, #16]
 800f5ca:	4621      	mov	r1, r4
 800f5cc:	f7ff fdd2 	bl	800f174 <_Bfree>
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5da:	3301      	adds	r3, #1
 800f5dc:	e7c1      	b.n	800f562 <__lshift+0x4a>
 800f5de:	3904      	subs	r1, #4
 800f5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5e8:	4298      	cmp	r0, r3
 800f5ea:	d8f9      	bhi.n	800f5e0 <__lshift+0xc8>
 800f5ec:	e7ea      	b.n	800f5c4 <__lshift+0xac>
 800f5ee:	bf00      	nop
 800f5f0:	080115ef 	.word	0x080115ef
 800f5f4:	08011600 	.word	0x08011600

0800f5f8 <__mcmp>:
 800f5f8:	b530      	push	{r4, r5, lr}
 800f5fa:	6902      	ldr	r2, [r0, #16]
 800f5fc:	690c      	ldr	r4, [r1, #16]
 800f5fe:	1b12      	subs	r2, r2, r4
 800f600:	d10e      	bne.n	800f620 <__mcmp+0x28>
 800f602:	f100 0314 	add.w	r3, r0, #20
 800f606:	3114      	adds	r1, #20
 800f608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f60c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f618:	42a5      	cmp	r5, r4
 800f61a:	d003      	beq.n	800f624 <__mcmp+0x2c>
 800f61c:	d305      	bcc.n	800f62a <__mcmp+0x32>
 800f61e:	2201      	movs	r2, #1
 800f620:	4610      	mov	r0, r2
 800f622:	bd30      	pop	{r4, r5, pc}
 800f624:	4283      	cmp	r3, r0
 800f626:	d3f3      	bcc.n	800f610 <__mcmp+0x18>
 800f628:	e7fa      	b.n	800f620 <__mcmp+0x28>
 800f62a:	f04f 32ff 	mov.w	r2, #4294967295
 800f62e:	e7f7      	b.n	800f620 <__mcmp+0x28>

0800f630 <__mdiff>:
 800f630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f634:	460c      	mov	r4, r1
 800f636:	4606      	mov	r6, r0
 800f638:	4611      	mov	r1, r2
 800f63a:	4620      	mov	r0, r4
 800f63c:	4690      	mov	r8, r2
 800f63e:	f7ff ffdb 	bl	800f5f8 <__mcmp>
 800f642:	1e05      	subs	r5, r0, #0
 800f644:	d110      	bne.n	800f668 <__mdiff+0x38>
 800f646:	4629      	mov	r1, r5
 800f648:	4630      	mov	r0, r6
 800f64a:	f7ff fd53 	bl	800f0f4 <_Balloc>
 800f64e:	b930      	cbnz	r0, 800f65e <__mdiff+0x2e>
 800f650:	4b3a      	ldr	r3, [pc, #232]	; (800f73c <__mdiff+0x10c>)
 800f652:	4602      	mov	r2, r0
 800f654:	f240 2132 	movw	r1, #562	; 0x232
 800f658:	4839      	ldr	r0, [pc, #228]	; (800f740 <__mdiff+0x110>)
 800f65a:	f000 fb31 	bl	800fcc0 <__assert_func>
 800f65e:	2301      	movs	r3, #1
 800f660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f668:	bfa4      	itt	ge
 800f66a:	4643      	movge	r3, r8
 800f66c:	46a0      	movge	r8, r4
 800f66e:	4630      	mov	r0, r6
 800f670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f674:	bfa6      	itte	ge
 800f676:	461c      	movge	r4, r3
 800f678:	2500      	movge	r5, #0
 800f67a:	2501      	movlt	r5, #1
 800f67c:	f7ff fd3a 	bl	800f0f4 <_Balloc>
 800f680:	b920      	cbnz	r0, 800f68c <__mdiff+0x5c>
 800f682:	4b2e      	ldr	r3, [pc, #184]	; (800f73c <__mdiff+0x10c>)
 800f684:	4602      	mov	r2, r0
 800f686:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f68a:	e7e5      	b.n	800f658 <__mdiff+0x28>
 800f68c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f690:	6926      	ldr	r6, [r4, #16]
 800f692:	60c5      	str	r5, [r0, #12]
 800f694:	f104 0914 	add.w	r9, r4, #20
 800f698:	f108 0514 	add.w	r5, r8, #20
 800f69c:	f100 0e14 	add.w	lr, r0, #20
 800f6a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f6a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f6a8:	f108 0210 	add.w	r2, r8, #16
 800f6ac:	46f2      	mov	sl, lr
 800f6ae:	2100      	movs	r1, #0
 800f6b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f6b8:	fa1f f883 	uxth.w	r8, r3
 800f6bc:	fa11 f18b 	uxtah	r1, r1, fp
 800f6c0:	0c1b      	lsrs	r3, r3, #16
 800f6c2:	eba1 0808 	sub.w	r8, r1, r8
 800f6c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6ce:	fa1f f888 	uxth.w	r8, r8
 800f6d2:	1419      	asrs	r1, r3, #16
 800f6d4:	454e      	cmp	r6, r9
 800f6d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6da:	f84a 3b04 	str.w	r3, [sl], #4
 800f6de:	d8e7      	bhi.n	800f6b0 <__mdiff+0x80>
 800f6e0:	1b33      	subs	r3, r6, r4
 800f6e2:	3b15      	subs	r3, #21
 800f6e4:	f023 0303 	bic.w	r3, r3, #3
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	3415      	adds	r4, #21
 800f6ec:	42a6      	cmp	r6, r4
 800f6ee:	bf38      	it	cc
 800f6f0:	2304      	movcc	r3, #4
 800f6f2:	441d      	add	r5, r3
 800f6f4:	4473      	add	r3, lr
 800f6f6:	469e      	mov	lr, r3
 800f6f8:	462e      	mov	r6, r5
 800f6fa:	4566      	cmp	r6, ip
 800f6fc:	d30e      	bcc.n	800f71c <__mdiff+0xec>
 800f6fe:	f10c 0203 	add.w	r2, ip, #3
 800f702:	1b52      	subs	r2, r2, r5
 800f704:	f022 0203 	bic.w	r2, r2, #3
 800f708:	3d03      	subs	r5, #3
 800f70a:	45ac      	cmp	ip, r5
 800f70c:	bf38      	it	cc
 800f70e:	2200      	movcc	r2, #0
 800f710:	441a      	add	r2, r3
 800f712:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f716:	b17b      	cbz	r3, 800f738 <__mdiff+0x108>
 800f718:	6107      	str	r7, [r0, #16]
 800f71a:	e7a3      	b.n	800f664 <__mdiff+0x34>
 800f71c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f720:	fa11 f288 	uxtah	r2, r1, r8
 800f724:	1414      	asrs	r4, r2, #16
 800f726:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f72a:	b292      	uxth	r2, r2
 800f72c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f730:	f84e 2b04 	str.w	r2, [lr], #4
 800f734:	1421      	asrs	r1, r4, #16
 800f736:	e7e0      	b.n	800f6fa <__mdiff+0xca>
 800f738:	3f01      	subs	r7, #1
 800f73a:	e7ea      	b.n	800f712 <__mdiff+0xe2>
 800f73c:	080115ef 	.word	0x080115ef
 800f740:	08011600 	.word	0x08011600

0800f744 <__d2b>:
 800f744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f748:	4689      	mov	r9, r1
 800f74a:	2101      	movs	r1, #1
 800f74c:	ec57 6b10 	vmov	r6, r7, d0
 800f750:	4690      	mov	r8, r2
 800f752:	f7ff fccf 	bl	800f0f4 <_Balloc>
 800f756:	4604      	mov	r4, r0
 800f758:	b930      	cbnz	r0, 800f768 <__d2b+0x24>
 800f75a:	4602      	mov	r2, r0
 800f75c:	4b25      	ldr	r3, [pc, #148]	; (800f7f4 <__d2b+0xb0>)
 800f75e:	4826      	ldr	r0, [pc, #152]	; (800f7f8 <__d2b+0xb4>)
 800f760:	f240 310a 	movw	r1, #778	; 0x30a
 800f764:	f000 faac 	bl	800fcc0 <__assert_func>
 800f768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f76c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f770:	bb35      	cbnz	r5, 800f7c0 <__d2b+0x7c>
 800f772:	2e00      	cmp	r6, #0
 800f774:	9301      	str	r3, [sp, #4]
 800f776:	d028      	beq.n	800f7ca <__d2b+0x86>
 800f778:	4668      	mov	r0, sp
 800f77a:	9600      	str	r6, [sp, #0]
 800f77c:	f7ff fd82 	bl	800f284 <__lo0bits>
 800f780:	9900      	ldr	r1, [sp, #0]
 800f782:	b300      	cbz	r0, 800f7c6 <__d2b+0x82>
 800f784:	9a01      	ldr	r2, [sp, #4]
 800f786:	f1c0 0320 	rsb	r3, r0, #32
 800f78a:	fa02 f303 	lsl.w	r3, r2, r3
 800f78e:	430b      	orrs	r3, r1
 800f790:	40c2      	lsrs	r2, r0
 800f792:	6163      	str	r3, [r4, #20]
 800f794:	9201      	str	r2, [sp, #4]
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	61a3      	str	r3, [r4, #24]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	bf14      	ite	ne
 800f79e:	2202      	movne	r2, #2
 800f7a0:	2201      	moveq	r2, #1
 800f7a2:	6122      	str	r2, [r4, #16]
 800f7a4:	b1d5      	cbz	r5, 800f7dc <__d2b+0x98>
 800f7a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f7aa:	4405      	add	r5, r0
 800f7ac:	f8c9 5000 	str.w	r5, [r9]
 800f7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f7b4:	f8c8 0000 	str.w	r0, [r8]
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	b003      	add	sp, #12
 800f7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7c4:	e7d5      	b.n	800f772 <__d2b+0x2e>
 800f7c6:	6161      	str	r1, [r4, #20]
 800f7c8:	e7e5      	b.n	800f796 <__d2b+0x52>
 800f7ca:	a801      	add	r0, sp, #4
 800f7cc:	f7ff fd5a 	bl	800f284 <__lo0bits>
 800f7d0:	9b01      	ldr	r3, [sp, #4]
 800f7d2:	6163      	str	r3, [r4, #20]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	6122      	str	r2, [r4, #16]
 800f7d8:	3020      	adds	r0, #32
 800f7da:	e7e3      	b.n	800f7a4 <__d2b+0x60>
 800f7dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7e4:	f8c9 0000 	str.w	r0, [r9]
 800f7e8:	6918      	ldr	r0, [r3, #16]
 800f7ea:	f7ff fd2b 	bl	800f244 <__hi0bits>
 800f7ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7f2:	e7df      	b.n	800f7b4 <__d2b+0x70>
 800f7f4:	080115ef 	.word	0x080115ef
 800f7f8:	08011600 	.word	0x08011600

0800f7fc <_calloc_r>:
 800f7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7fe:	fba1 2402 	umull	r2, r4, r1, r2
 800f802:	b94c      	cbnz	r4, 800f818 <_calloc_r+0x1c>
 800f804:	4611      	mov	r1, r2
 800f806:	9201      	str	r2, [sp, #4]
 800f808:	f000 f87a 	bl	800f900 <_malloc_r>
 800f80c:	9a01      	ldr	r2, [sp, #4]
 800f80e:	4605      	mov	r5, r0
 800f810:	b930      	cbnz	r0, 800f820 <_calloc_r+0x24>
 800f812:	4628      	mov	r0, r5
 800f814:	b003      	add	sp, #12
 800f816:	bd30      	pop	{r4, r5, pc}
 800f818:	220c      	movs	r2, #12
 800f81a:	6002      	str	r2, [r0, #0]
 800f81c:	2500      	movs	r5, #0
 800f81e:	e7f8      	b.n	800f812 <_calloc_r+0x16>
 800f820:	4621      	mov	r1, r4
 800f822:	f7fe f9c1 	bl	800dba8 <memset>
 800f826:	e7f4      	b.n	800f812 <_calloc_r+0x16>

0800f828 <_free_r>:
 800f828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f82a:	2900      	cmp	r1, #0
 800f82c:	d044      	beq.n	800f8b8 <_free_r+0x90>
 800f82e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f832:	9001      	str	r0, [sp, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	f1a1 0404 	sub.w	r4, r1, #4
 800f83a:	bfb8      	it	lt
 800f83c:	18e4      	addlt	r4, r4, r3
 800f83e:	f000 fa9b 	bl	800fd78 <__malloc_lock>
 800f842:	4a1e      	ldr	r2, [pc, #120]	; (800f8bc <_free_r+0x94>)
 800f844:	9801      	ldr	r0, [sp, #4]
 800f846:	6813      	ldr	r3, [r2, #0]
 800f848:	b933      	cbnz	r3, 800f858 <_free_r+0x30>
 800f84a:	6063      	str	r3, [r4, #4]
 800f84c:	6014      	str	r4, [r2, #0]
 800f84e:	b003      	add	sp, #12
 800f850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f854:	f000 ba96 	b.w	800fd84 <__malloc_unlock>
 800f858:	42a3      	cmp	r3, r4
 800f85a:	d908      	bls.n	800f86e <_free_r+0x46>
 800f85c:	6825      	ldr	r5, [r4, #0]
 800f85e:	1961      	adds	r1, r4, r5
 800f860:	428b      	cmp	r3, r1
 800f862:	bf01      	itttt	eq
 800f864:	6819      	ldreq	r1, [r3, #0]
 800f866:	685b      	ldreq	r3, [r3, #4]
 800f868:	1949      	addeq	r1, r1, r5
 800f86a:	6021      	streq	r1, [r4, #0]
 800f86c:	e7ed      	b.n	800f84a <_free_r+0x22>
 800f86e:	461a      	mov	r2, r3
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	b10b      	cbz	r3, 800f878 <_free_r+0x50>
 800f874:	42a3      	cmp	r3, r4
 800f876:	d9fa      	bls.n	800f86e <_free_r+0x46>
 800f878:	6811      	ldr	r1, [r2, #0]
 800f87a:	1855      	adds	r5, r2, r1
 800f87c:	42a5      	cmp	r5, r4
 800f87e:	d10b      	bne.n	800f898 <_free_r+0x70>
 800f880:	6824      	ldr	r4, [r4, #0]
 800f882:	4421      	add	r1, r4
 800f884:	1854      	adds	r4, r2, r1
 800f886:	42a3      	cmp	r3, r4
 800f888:	6011      	str	r1, [r2, #0]
 800f88a:	d1e0      	bne.n	800f84e <_free_r+0x26>
 800f88c:	681c      	ldr	r4, [r3, #0]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	6053      	str	r3, [r2, #4]
 800f892:	4421      	add	r1, r4
 800f894:	6011      	str	r1, [r2, #0]
 800f896:	e7da      	b.n	800f84e <_free_r+0x26>
 800f898:	d902      	bls.n	800f8a0 <_free_r+0x78>
 800f89a:	230c      	movs	r3, #12
 800f89c:	6003      	str	r3, [r0, #0]
 800f89e:	e7d6      	b.n	800f84e <_free_r+0x26>
 800f8a0:	6825      	ldr	r5, [r4, #0]
 800f8a2:	1961      	adds	r1, r4, r5
 800f8a4:	428b      	cmp	r3, r1
 800f8a6:	bf04      	itt	eq
 800f8a8:	6819      	ldreq	r1, [r3, #0]
 800f8aa:	685b      	ldreq	r3, [r3, #4]
 800f8ac:	6063      	str	r3, [r4, #4]
 800f8ae:	bf04      	itt	eq
 800f8b0:	1949      	addeq	r1, r1, r5
 800f8b2:	6021      	streq	r1, [r4, #0]
 800f8b4:	6054      	str	r4, [r2, #4]
 800f8b6:	e7ca      	b.n	800f84e <_free_r+0x26>
 800f8b8:	b003      	add	sp, #12
 800f8ba:	bd30      	pop	{r4, r5, pc}
 800f8bc:	24003670 	.word	0x24003670

0800f8c0 <sbrk_aligned>:
 800f8c0:	b570      	push	{r4, r5, r6, lr}
 800f8c2:	4e0e      	ldr	r6, [pc, #56]	; (800f8fc <sbrk_aligned+0x3c>)
 800f8c4:	460c      	mov	r4, r1
 800f8c6:	6831      	ldr	r1, [r6, #0]
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	b911      	cbnz	r1, 800f8d2 <sbrk_aligned+0x12>
 800f8cc:	f000 f9e8 	bl	800fca0 <_sbrk_r>
 800f8d0:	6030      	str	r0, [r6, #0]
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f000 f9e3 	bl	800fca0 <_sbrk_r>
 800f8da:	1c43      	adds	r3, r0, #1
 800f8dc:	d00a      	beq.n	800f8f4 <sbrk_aligned+0x34>
 800f8de:	1cc4      	adds	r4, r0, #3
 800f8e0:	f024 0403 	bic.w	r4, r4, #3
 800f8e4:	42a0      	cmp	r0, r4
 800f8e6:	d007      	beq.n	800f8f8 <sbrk_aligned+0x38>
 800f8e8:	1a21      	subs	r1, r4, r0
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f000 f9d8 	bl	800fca0 <_sbrk_r>
 800f8f0:	3001      	adds	r0, #1
 800f8f2:	d101      	bne.n	800f8f8 <sbrk_aligned+0x38>
 800f8f4:	f04f 34ff 	mov.w	r4, #4294967295
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	bd70      	pop	{r4, r5, r6, pc}
 800f8fc:	24003674 	.word	0x24003674

0800f900 <_malloc_r>:
 800f900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f904:	1ccd      	adds	r5, r1, #3
 800f906:	f025 0503 	bic.w	r5, r5, #3
 800f90a:	3508      	adds	r5, #8
 800f90c:	2d0c      	cmp	r5, #12
 800f90e:	bf38      	it	cc
 800f910:	250c      	movcc	r5, #12
 800f912:	2d00      	cmp	r5, #0
 800f914:	4607      	mov	r7, r0
 800f916:	db01      	blt.n	800f91c <_malloc_r+0x1c>
 800f918:	42a9      	cmp	r1, r5
 800f91a:	d905      	bls.n	800f928 <_malloc_r+0x28>
 800f91c:	230c      	movs	r3, #12
 800f91e:	603b      	str	r3, [r7, #0]
 800f920:	2600      	movs	r6, #0
 800f922:	4630      	mov	r0, r6
 800f924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f928:	4e2e      	ldr	r6, [pc, #184]	; (800f9e4 <_malloc_r+0xe4>)
 800f92a:	f000 fa25 	bl	800fd78 <__malloc_lock>
 800f92e:	6833      	ldr	r3, [r6, #0]
 800f930:	461c      	mov	r4, r3
 800f932:	bb34      	cbnz	r4, 800f982 <_malloc_r+0x82>
 800f934:	4629      	mov	r1, r5
 800f936:	4638      	mov	r0, r7
 800f938:	f7ff ffc2 	bl	800f8c0 <sbrk_aligned>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	4604      	mov	r4, r0
 800f940:	d14d      	bne.n	800f9de <_malloc_r+0xde>
 800f942:	6834      	ldr	r4, [r6, #0]
 800f944:	4626      	mov	r6, r4
 800f946:	2e00      	cmp	r6, #0
 800f948:	d140      	bne.n	800f9cc <_malloc_r+0xcc>
 800f94a:	6823      	ldr	r3, [r4, #0]
 800f94c:	4631      	mov	r1, r6
 800f94e:	4638      	mov	r0, r7
 800f950:	eb04 0803 	add.w	r8, r4, r3
 800f954:	f000 f9a4 	bl	800fca0 <_sbrk_r>
 800f958:	4580      	cmp	r8, r0
 800f95a:	d13a      	bne.n	800f9d2 <_malloc_r+0xd2>
 800f95c:	6821      	ldr	r1, [r4, #0]
 800f95e:	3503      	adds	r5, #3
 800f960:	1a6d      	subs	r5, r5, r1
 800f962:	f025 0503 	bic.w	r5, r5, #3
 800f966:	3508      	adds	r5, #8
 800f968:	2d0c      	cmp	r5, #12
 800f96a:	bf38      	it	cc
 800f96c:	250c      	movcc	r5, #12
 800f96e:	4629      	mov	r1, r5
 800f970:	4638      	mov	r0, r7
 800f972:	f7ff ffa5 	bl	800f8c0 <sbrk_aligned>
 800f976:	3001      	adds	r0, #1
 800f978:	d02b      	beq.n	800f9d2 <_malloc_r+0xd2>
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	442b      	add	r3, r5
 800f97e:	6023      	str	r3, [r4, #0]
 800f980:	e00e      	b.n	800f9a0 <_malloc_r+0xa0>
 800f982:	6822      	ldr	r2, [r4, #0]
 800f984:	1b52      	subs	r2, r2, r5
 800f986:	d41e      	bmi.n	800f9c6 <_malloc_r+0xc6>
 800f988:	2a0b      	cmp	r2, #11
 800f98a:	d916      	bls.n	800f9ba <_malloc_r+0xba>
 800f98c:	1961      	adds	r1, r4, r5
 800f98e:	42a3      	cmp	r3, r4
 800f990:	6025      	str	r5, [r4, #0]
 800f992:	bf18      	it	ne
 800f994:	6059      	strne	r1, [r3, #4]
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	bf08      	it	eq
 800f99a:	6031      	streq	r1, [r6, #0]
 800f99c:	5162      	str	r2, [r4, r5]
 800f99e:	604b      	str	r3, [r1, #4]
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f104 060b 	add.w	r6, r4, #11
 800f9a6:	f000 f9ed 	bl	800fd84 <__malloc_unlock>
 800f9aa:	f026 0607 	bic.w	r6, r6, #7
 800f9ae:	1d23      	adds	r3, r4, #4
 800f9b0:	1af2      	subs	r2, r6, r3
 800f9b2:	d0b6      	beq.n	800f922 <_malloc_r+0x22>
 800f9b4:	1b9b      	subs	r3, r3, r6
 800f9b6:	50a3      	str	r3, [r4, r2]
 800f9b8:	e7b3      	b.n	800f922 <_malloc_r+0x22>
 800f9ba:	6862      	ldr	r2, [r4, #4]
 800f9bc:	42a3      	cmp	r3, r4
 800f9be:	bf0c      	ite	eq
 800f9c0:	6032      	streq	r2, [r6, #0]
 800f9c2:	605a      	strne	r2, [r3, #4]
 800f9c4:	e7ec      	b.n	800f9a0 <_malloc_r+0xa0>
 800f9c6:	4623      	mov	r3, r4
 800f9c8:	6864      	ldr	r4, [r4, #4]
 800f9ca:	e7b2      	b.n	800f932 <_malloc_r+0x32>
 800f9cc:	4634      	mov	r4, r6
 800f9ce:	6876      	ldr	r6, [r6, #4]
 800f9d0:	e7b9      	b.n	800f946 <_malloc_r+0x46>
 800f9d2:	230c      	movs	r3, #12
 800f9d4:	603b      	str	r3, [r7, #0]
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f000 f9d4 	bl	800fd84 <__malloc_unlock>
 800f9dc:	e7a1      	b.n	800f922 <_malloc_r+0x22>
 800f9de:	6025      	str	r5, [r4, #0]
 800f9e0:	e7de      	b.n	800f9a0 <_malloc_r+0xa0>
 800f9e2:	bf00      	nop
 800f9e4:	24003670 	.word	0x24003670

0800f9e8 <__ssputs_r>:
 800f9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ec:	688e      	ldr	r6, [r1, #8]
 800f9ee:	429e      	cmp	r6, r3
 800f9f0:	4682      	mov	sl, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	4690      	mov	r8, r2
 800f9f6:	461f      	mov	r7, r3
 800f9f8:	d838      	bhi.n	800fa6c <__ssputs_r+0x84>
 800f9fa:	898a      	ldrh	r2, [r1, #12]
 800f9fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa00:	d032      	beq.n	800fa68 <__ssputs_r+0x80>
 800fa02:	6825      	ldr	r5, [r4, #0]
 800fa04:	6909      	ldr	r1, [r1, #16]
 800fa06:	eba5 0901 	sub.w	r9, r5, r1
 800fa0a:	6965      	ldr	r5, [r4, #20]
 800fa0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa14:	3301      	adds	r3, #1
 800fa16:	444b      	add	r3, r9
 800fa18:	106d      	asrs	r5, r5, #1
 800fa1a:	429d      	cmp	r5, r3
 800fa1c:	bf38      	it	cc
 800fa1e:	461d      	movcc	r5, r3
 800fa20:	0553      	lsls	r3, r2, #21
 800fa22:	d531      	bpl.n	800fa88 <__ssputs_r+0xa0>
 800fa24:	4629      	mov	r1, r5
 800fa26:	f7ff ff6b 	bl	800f900 <_malloc_r>
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	b950      	cbnz	r0, 800fa44 <__ssputs_r+0x5c>
 800fa2e:	230c      	movs	r3, #12
 800fa30:	f8ca 3000 	str.w	r3, [sl]
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa44:	6921      	ldr	r1, [r4, #16]
 800fa46:	464a      	mov	r2, r9
 800fa48:	f7fe f8a0 	bl	800db8c <memcpy>
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa56:	81a3      	strh	r3, [r4, #12]
 800fa58:	6126      	str	r6, [r4, #16]
 800fa5a:	6165      	str	r5, [r4, #20]
 800fa5c:	444e      	add	r6, r9
 800fa5e:	eba5 0509 	sub.w	r5, r5, r9
 800fa62:	6026      	str	r6, [r4, #0]
 800fa64:	60a5      	str	r5, [r4, #8]
 800fa66:	463e      	mov	r6, r7
 800fa68:	42be      	cmp	r6, r7
 800fa6a:	d900      	bls.n	800fa6e <__ssputs_r+0x86>
 800fa6c:	463e      	mov	r6, r7
 800fa6e:	6820      	ldr	r0, [r4, #0]
 800fa70:	4632      	mov	r2, r6
 800fa72:	4641      	mov	r1, r8
 800fa74:	f000 f966 	bl	800fd44 <memmove>
 800fa78:	68a3      	ldr	r3, [r4, #8]
 800fa7a:	1b9b      	subs	r3, r3, r6
 800fa7c:	60a3      	str	r3, [r4, #8]
 800fa7e:	6823      	ldr	r3, [r4, #0]
 800fa80:	4433      	add	r3, r6
 800fa82:	6023      	str	r3, [r4, #0]
 800fa84:	2000      	movs	r0, #0
 800fa86:	e7db      	b.n	800fa40 <__ssputs_r+0x58>
 800fa88:	462a      	mov	r2, r5
 800fa8a:	f000 f981 	bl	800fd90 <_realloc_r>
 800fa8e:	4606      	mov	r6, r0
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1e1      	bne.n	800fa58 <__ssputs_r+0x70>
 800fa94:	6921      	ldr	r1, [r4, #16]
 800fa96:	4650      	mov	r0, sl
 800fa98:	f7ff fec6 	bl	800f828 <_free_r>
 800fa9c:	e7c7      	b.n	800fa2e <__ssputs_r+0x46>
	...

0800faa0 <_svfiprintf_r>:
 800faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa4:	4698      	mov	r8, r3
 800faa6:	898b      	ldrh	r3, [r1, #12]
 800faa8:	061b      	lsls	r3, r3, #24
 800faaa:	b09d      	sub	sp, #116	; 0x74
 800faac:	4607      	mov	r7, r0
 800faae:	460d      	mov	r5, r1
 800fab0:	4614      	mov	r4, r2
 800fab2:	d50e      	bpl.n	800fad2 <_svfiprintf_r+0x32>
 800fab4:	690b      	ldr	r3, [r1, #16]
 800fab6:	b963      	cbnz	r3, 800fad2 <_svfiprintf_r+0x32>
 800fab8:	2140      	movs	r1, #64	; 0x40
 800faba:	f7ff ff21 	bl	800f900 <_malloc_r>
 800fabe:	6028      	str	r0, [r5, #0]
 800fac0:	6128      	str	r0, [r5, #16]
 800fac2:	b920      	cbnz	r0, 800face <_svfiprintf_r+0x2e>
 800fac4:	230c      	movs	r3, #12
 800fac6:	603b      	str	r3, [r7, #0]
 800fac8:	f04f 30ff 	mov.w	r0, #4294967295
 800facc:	e0d1      	b.n	800fc72 <_svfiprintf_r+0x1d2>
 800face:	2340      	movs	r3, #64	; 0x40
 800fad0:	616b      	str	r3, [r5, #20]
 800fad2:	2300      	movs	r3, #0
 800fad4:	9309      	str	r3, [sp, #36]	; 0x24
 800fad6:	2320      	movs	r3, #32
 800fad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fae0:	2330      	movs	r3, #48	; 0x30
 800fae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc8c <_svfiprintf_r+0x1ec>
 800fae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800faea:	f04f 0901 	mov.w	r9, #1
 800faee:	4623      	mov	r3, r4
 800faf0:	469a      	mov	sl, r3
 800faf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faf6:	b10a      	cbz	r2, 800fafc <_svfiprintf_r+0x5c>
 800faf8:	2a25      	cmp	r2, #37	; 0x25
 800fafa:	d1f9      	bne.n	800faf0 <_svfiprintf_r+0x50>
 800fafc:	ebba 0b04 	subs.w	fp, sl, r4
 800fb00:	d00b      	beq.n	800fb1a <_svfiprintf_r+0x7a>
 800fb02:	465b      	mov	r3, fp
 800fb04:	4622      	mov	r2, r4
 800fb06:	4629      	mov	r1, r5
 800fb08:	4638      	mov	r0, r7
 800fb0a:	f7ff ff6d 	bl	800f9e8 <__ssputs_r>
 800fb0e:	3001      	adds	r0, #1
 800fb10:	f000 80aa 	beq.w	800fc68 <_svfiprintf_r+0x1c8>
 800fb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb16:	445a      	add	r2, fp
 800fb18:	9209      	str	r2, [sp, #36]	; 0x24
 800fb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f000 80a2 	beq.w	800fc68 <_svfiprintf_r+0x1c8>
 800fb24:	2300      	movs	r3, #0
 800fb26:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb2e:	f10a 0a01 	add.w	sl, sl, #1
 800fb32:	9304      	str	r3, [sp, #16]
 800fb34:	9307      	str	r3, [sp, #28]
 800fb36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb3a:	931a      	str	r3, [sp, #104]	; 0x68
 800fb3c:	4654      	mov	r4, sl
 800fb3e:	2205      	movs	r2, #5
 800fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb44:	4851      	ldr	r0, [pc, #324]	; (800fc8c <_svfiprintf_r+0x1ec>)
 800fb46:	f7f0 fbd3 	bl	80002f0 <memchr>
 800fb4a:	9a04      	ldr	r2, [sp, #16]
 800fb4c:	b9d8      	cbnz	r0, 800fb86 <_svfiprintf_r+0xe6>
 800fb4e:	06d0      	lsls	r0, r2, #27
 800fb50:	bf44      	itt	mi
 800fb52:	2320      	movmi	r3, #32
 800fb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb58:	0711      	lsls	r1, r2, #28
 800fb5a:	bf44      	itt	mi
 800fb5c:	232b      	movmi	r3, #43	; 0x2b
 800fb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb62:	f89a 3000 	ldrb.w	r3, [sl]
 800fb66:	2b2a      	cmp	r3, #42	; 0x2a
 800fb68:	d015      	beq.n	800fb96 <_svfiprintf_r+0xf6>
 800fb6a:	9a07      	ldr	r2, [sp, #28]
 800fb6c:	4654      	mov	r4, sl
 800fb6e:	2000      	movs	r0, #0
 800fb70:	f04f 0c0a 	mov.w	ip, #10
 800fb74:	4621      	mov	r1, r4
 800fb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb7a:	3b30      	subs	r3, #48	; 0x30
 800fb7c:	2b09      	cmp	r3, #9
 800fb7e:	d94e      	bls.n	800fc1e <_svfiprintf_r+0x17e>
 800fb80:	b1b0      	cbz	r0, 800fbb0 <_svfiprintf_r+0x110>
 800fb82:	9207      	str	r2, [sp, #28]
 800fb84:	e014      	b.n	800fbb0 <_svfiprintf_r+0x110>
 800fb86:	eba0 0308 	sub.w	r3, r0, r8
 800fb8a:	fa09 f303 	lsl.w	r3, r9, r3
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	9304      	str	r3, [sp, #16]
 800fb92:	46a2      	mov	sl, r4
 800fb94:	e7d2      	b.n	800fb3c <_svfiprintf_r+0x9c>
 800fb96:	9b03      	ldr	r3, [sp, #12]
 800fb98:	1d19      	adds	r1, r3, #4
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	9103      	str	r1, [sp, #12]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	bfbb      	ittet	lt
 800fba2:	425b      	neglt	r3, r3
 800fba4:	f042 0202 	orrlt.w	r2, r2, #2
 800fba8:	9307      	strge	r3, [sp, #28]
 800fbaa:	9307      	strlt	r3, [sp, #28]
 800fbac:	bfb8      	it	lt
 800fbae:	9204      	strlt	r2, [sp, #16]
 800fbb0:	7823      	ldrb	r3, [r4, #0]
 800fbb2:	2b2e      	cmp	r3, #46	; 0x2e
 800fbb4:	d10c      	bne.n	800fbd0 <_svfiprintf_r+0x130>
 800fbb6:	7863      	ldrb	r3, [r4, #1]
 800fbb8:	2b2a      	cmp	r3, #42	; 0x2a
 800fbba:	d135      	bne.n	800fc28 <_svfiprintf_r+0x188>
 800fbbc:	9b03      	ldr	r3, [sp, #12]
 800fbbe:	1d1a      	adds	r2, r3, #4
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	9203      	str	r2, [sp, #12]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	bfb8      	it	lt
 800fbc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbcc:	3402      	adds	r4, #2
 800fbce:	9305      	str	r3, [sp, #20]
 800fbd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc9c <_svfiprintf_r+0x1fc>
 800fbd4:	7821      	ldrb	r1, [r4, #0]
 800fbd6:	2203      	movs	r2, #3
 800fbd8:	4650      	mov	r0, sl
 800fbda:	f7f0 fb89 	bl	80002f0 <memchr>
 800fbde:	b140      	cbz	r0, 800fbf2 <_svfiprintf_r+0x152>
 800fbe0:	2340      	movs	r3, #64	; 0x40
 800fbe2:	eba0 000a 	sub.w	r0, r0, sl
 800fbe6:	fa03 f000 	lsl.w	r0, r3, r0
 800fbea:	9b04      	ldr	r3, [sp, #16]
 800fbec:	4303      	orrs	r3, r0
 800fbee:	3401      	adds	r4, #1
 800fbf0:	9304      	str	r3, [sp, #16]
 800fbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbf6:	4826      	ldr	r0, [pc, #152]	; (800fc90 <_svfiprintf_r+0x1f0>)
 800fbf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbfc:	2206      	movs	r2, #6
 800fbfe:	f7f0 fb77 	bl	80002f0 <memchr>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d038      	beq.n	800fc78 <_svfiprintf_r+0x1d8>
 800fc06:	4b23      	ldr	r3, [pc, #140]	; (800fc94 <_svfiprintf_r+0x1f4>)
 800fc08:	bb1b      	cbnz	r3, 800fc52 <_svfiprintf_r+0x1b2>
 800fc0a:	9b03      	ldr	r3, [sp, #12]
 800fc0c:	3307      	adds	r3, #7
 800fc0e:	f023 0307 	bic.w	r3, r3, #7
 800fc12:	3308      	adds	r3, #8
 800fc14:	9303      	str	r3, [sp, #12]
 800fc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc18:	4433      	add	r3, r6
 800fc1a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc1c:	e767      	b.n	800faee <_svfiprintf_r+0x4e>
 800fc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc22:	460c      	mov	r4, r1
 800fc24:	2001      	movs	r0, #1
 800fc26:	e7a5      	b.n	800fb74 <_svfiprintf_r+0xd4>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	3401      	adds	r4, #1
 800fc2c:	9305      	str	r3, [sp, #20]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	f04f 0c0a 	mov.w	ip, #10
 800fc34:	4620      	mov	r0, r4
 800fc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc3a:	3a30      	subs	r2, #48	; 0x30
 800fc3c:	2a09      	cmp	r2, #9
 800fc3e:	d903      	bls.n	800fc48 <_svfiprintf_r+0x1a8>
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d0c5      	beq.n	800fbd0 <_svfiprintf_r+0x130>
 800fc44:	9105      	str	r1, [sp, #20]
 800fc46:	e7c3      	b.n	800fbd0 <_svfiprintf_r+0x130>
 800fc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e7f0      	b.n	800fc34 <_svfiprintf_r+0x194>
 800fc52:	ab03      	add	r3, sp, #12
 800fc54:	9300      	str	r3, [sp, #0]
 800fc56:	462a      	mov	r2, r5
 800fc58:	4b0f      	ldr	r3, [pc, #60]	; (800fc98 <_svfiprintf_r+0x1f8>)
 800fc5a:	a904      	add	r1, sp, #16
 800fc5c:	4638      	mov	r0, r7
 800fc5e:	f7fe f83b 	bl	800dcd8 <_printf_float>
 800fc62:	1c42      	adds	r2, r0, #1
 800fc64:	4606      	mov	r6, r0
 800fc66:	d1d6      	bne.n	800fc16 <_svfiprintf_r+0x176>
 800fc68:	89ab      	ldrh	r3, [r5, #12]
 800fc6a:	065b      	lsls	r3, r3, #25
 800fc6c:	f53f af2c 	bmi.w	800fac8 <_svfiprintf_r+0x28>
 800fc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc72:	b01d      	add	sp, #116	; 0x74
 800fc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc78:	ab03      	add	r3, sp, #12
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	462a      	mov	r2, r5
 800fc7e:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <_svfiprintf_r+0x1f8>)
 800fc80:	a904      	add	r1, sp, #16
 800fc82:	4638      	mov	r0, r7
 800fc84:	f7fe fab4 	bl	800e1f0 <_printf_i>
 800fc88:	e7eb      	b.n	800fc62 <_svfiprintf_r+0x1c2>
 800fc8a:	bf00      	nop
 800fc8c:	0801175c 	.word	0x0801175c
 800fc90:	08011766 	.word	0x08011766
 800fc94:	0800dcd9 	.word	0x0800dcd9
 800fc98:	0800f9e9 	.word	0x0800f9e9
 800fc9c:	08011762 	.word	0x08011762

0800fca0 <_sbrk_r>:
 800fca0:	b538      	push	{r3, r4, r5, lr}
 800fca2:	4d06      	ldr	r5, [pc, #24]	; (800fcbc <_sbrk_r+0x1c>)
 800fca4:	2300      	movs	r3, #0
 800fca6:	4604      	mov	r4, r0
 800fca8:	4608      	mov	r0, r1
 800fcaa:	602b      	str	r3, [r5, #0]
 800fcac:	f7f1 ffee 	bl	8001c8c <_sbrk>
 800fcb0:	1c43      	adds	r3, r0, #1
 800fcb2:	d102      	bne.n	800fcba <_sbrk_r+0x1a>
 800fcb4:	682b      	ldr	r3, [r5, #0]
 800fcb6:	b103      	cbz	r3, 800fcba <_sbrk_r+0x1a>
 800fcb8:	6023      	str	r3, [r4, #0]
 800fcba:	bd38      	pop	{r3, r4, r5, pc}
 800fcbc:	24003678 	.word	0x24003678

0800fcc0 <__assert_func>:
 800fcc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcc2:	4614      	mov	r4, r2
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	4b09      	ldr	r3, [pc, #36]	; (800fcec <__assert_func+0x2c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4605      	mov	r5, r0
 800fccc:	68d8      	ldr	r0, [r3, #12]
 800fcce:	b14c      	cbz	r4, 800fce4 <__assert_func+0x24>
 800fcd0:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <__assert_func+0x30>)
 800fcd2:	9100      	str	r1, [sp, #0]
 800fcd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcd8:	4906      	ldr	r1, [pc, #24]	; (800fcf4 <__assert_func+0x34>)
 800fcda:	462b      	mov	r3, r5
 800fcdc:	f000 f80e 	bl	800fcfc <fiprintf>
 800fce0:	f000 faac 	bl	801023c <abort>
 800fce4:	4b04      	ldr	r3, [pc, #16]	; (800fcf8 <__assert_func+0x38>)
 800fce6:	461c      	mov	r4, r3
 800fce8:	e7f3      	b.n	800fcd2 <__assert_func+0x12>
 800fcea:	bf00      	nop
 800fcec:	24000010 	.word	0x24000010
 800fcf0:	0801176d 	.word	0x0801176d
 800fcf4:	0801177a 	.word	0x0801177a
 800fcf8:	080117a8 	.word	0x080117a8

0800fcfc <fiprintf>:
 800fcfc:	b40e      	push	{r1, r2, r3}
 800fcfe:	b503      	push	{r0, r1, lr}
 800fd00:	4601      	mov	r1, r0
 800fd02:	ab03      	add	r3, sp, #12
 800fd04:	4805      	ldr	r0, [pc, #20]	; (800fd1c <fiprintf+0x20>)
 800fd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0a:	6800      	ldr	r0, [r0, #0]
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	f000 f897 	bl	800fe40 <_vfiprintf_r>
 800fd12:	b002      	add	sp, #8
 800fd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd18:	b003      	add	sp, #12
 800fd1a:	4770      	bx	lr
 800fd1c:	24000010 	.word	0x24000010

0800fd20 <__ascii_mbtowc>:
 800fd20:	b082      	sub	sp, #8
 800fd22:	b901      	cbnz	r1, 800fd26 <__ascii_mbtowc+0x6>
 800fd24:	a901      	add	r1, sp, #4
 800fd26:	b142      	cbz	r2, 800fd3a <__ascii_mbtowc+0x1a>
 800fd28:	b14b      	cbz	r3, 800fd3e <__ascii_mbtowc+0x1e>
 800fd2a:	7813      	ldrb	r3, [r2, #0]
 800fd2c:	600b      	str	r3, [r1, #0]
 800fd2e:	7812      	ldrb	r2, [r2, #0]
 800fd30:	1e10      	subs	r0, r2, #0
 800fd32:	bf18      	it	ne
 800fd34:	2001      	movne	r0, #1
 800fd36:	b002      	add	sp, #8
 800fd38:	4770      	bx	lr
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	e7fb      	b.n	800fd36 <__ascii_mbtowc+0x16>
 800fd3e:	f06f 0001 	mvn.w	r0, #1
 800fd42:	e7f8      	b.n	800fd36 <__ascii_mbtowc+0x16>

0800fd44 <memmove>:
 800fd44:	4288      	cmp	r0, r1
 800fd46:	b510      	push	{r4, lr}
 800fd48:	eb01 0402 	add.w	r4, r1, r2
 800fd4c:	d902      	bls.n	800fd54 <memmove+0x10>
 800fd4e:	4284      	cmp	r4, r0
 800fd50:	4623      	mov	r3, r4
 800fd52:	d807      	bhi.n	800fd64 <memmove+0x20>
 800fd54:	1e43      	subs	r3, r0, #1
 800fd56:	42a1      	cmp	r1, r4
 800fd58:	d008      	beq.n	800fd6c <memmove+0x28>
 800fd5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd62:	e7f8      	b.n	800fd56 <memmove+0x12>
 800fd64:	4402      	add	r2, r0
 800fd66:	4601      	mov	r1, r0
 800fd68:	428a      	cmp	r2, r1
 800fd6a:	d100      	bne.n	800fd6e <memmove+0x2a>
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd76:	e7f7      	b.n	800fd68 <memmove+0x24>

0800fd78 <__malloc_lock>:
 800fd78:	4801      	ldr	r0, [pc, #4]	; (800fd80 <__malloc_lock+0x8>)
 800fd7a:	f000 bc1f 	b.w	80105bc <__retarget_lock_acquire_recursive>
 800fd7e:	bf00      	nop
 800fd80:	2400367c 	.word	0x2400367c

0800fd84 <__malloc_unlock>:
 800fd84:	4801      	ldr	r0, [pc, #4]	; (800fd8c <__malloc_unlock+0x8>)
 800fd86:	f000 bc1a 	b.w	80105be <__retarget_lock_release_recursive>
 800fd8a:	bf00      	nop
 800fd8c:	2400367c 	.word	0x2400367c

0800fd90 <_realloc_r>:
 800fd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd94:	4680      	mov	r8, r0
 800fd96:	4614      	mov	r4, r2
 800fd98:	460e      	mov	r6, r1
 800fd9a:	b921      	cbnz	r1, 800fda6 <_realloc_r+0x16>
 800fd9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fda0:	4611      	mov	r1, r2
 800fda2:	f7ff bdad 	b.w	800f900 <_malloc_r>
 800fda6:	b92a      	cbnz	r2, 800fdb4 <_realloc_r+0x24>
 800fda8:	f7ff fd3e 	bl	800f828 <_free_r>
 800fdac:	4625      	mov	r5, r4
 800fdae:	4628      	mov	r0, r5
 800fdb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb4:	f000 fc6a 	bl	801068c <_malloc_usable_size_r>
 800fdb8:	4284      	cmp	r4, r0
 800fdba:	4607      	mov	r7, r0
 800fdbc:	d802      	bhi.n	800fdc4 <_realloc_r+0x34>
 800fdbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdc2:	d812      	bhi.n	800fdea <_realloc_r+0x5a>
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	4640      	mov	r0, r8
 800fdc8:	f7ff fd9a 	bl	800f900 <_malloc_r>
 800fdcc:	4605      	mov	r5, r0
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d0ed      	beq.n	800fdae <_realloc_r+0x1e>
 800fdd2:	42bc      	cmp	r4, r7
 800fdd4:	4622      	mov	r2, r4
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	bf28      	it	cs
 800fdda:	463a      	movcs	r2, r7
 800fddc:	f7fd fed6 	bl	800db8c <memcpy>
 800fde0:	4631      	mov	r1, r6
 800fde2:	4640      	mov	r0, r8
 800fde4:	f7ff fd20 	bl	800f828 <_free_r>
 800fde8:	e7e1      	b.n	800fdae <_realloc_r+0x1e>
 800fdea:	4635      	mov	r5, r6
 800fdec:	e7df      	b.n	800fdae <_realloc_r+0x1e>

0800fdee <__sfputc_r>:
 800fdee:	6893      	ldr	r3, [r2, #8]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	b410      	push	{r4}
 800fdf6:	6093      	str	r3, [r2, #8]
 800fdf8:	da08      	bge.n	800fe0c <__sfputc_r+0x1e>
 800fdfa:	6994      	ldr	r4, [r2, #24]
 800fdfc:	42a3      	cmp	r3, r4
 800fdfe:	db01      	blt.n	800fe04 <__sfputc_r+0x16>
 800fe00:	290a      	cmp	r1, #10
 800fe02:	d103      	bne.n	800fe0c <__sfputc_r+0x1e>
 800fe04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe08:	f000 b94a 	b.w	80100a0 <__swbuf_r>
 800fe0c:	6813      	ldr	r3, [r2, #0]
 800fe0e:	1c58      	adds	r0, r3, #1
 800fe10:	6010      	str	r0, [r2, #0]
 800fe12:	7019      	strb	r1, [r3, #0]
 800fe14:	4608      	mov	r0, r1
 800fe16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <__sfputs_r>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	4606      	mov	r6, r0
 800fe20:	460f      	mov	r7, r1
 800fe22:	4614      	mov	r4, r2
 800fe24:	18d5      	adds	r5, r2, r3
 800fe26:	42ac      	cmp	r4, r5
 800fe28:	d101      	bne.n	800fe2e <__sfputs_r+0x12>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	e007      	b.n	800fe3e <__sfputs_r+0x22>
 800fe2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe32:	463a      	mov	r2, r7
 800fe34:	4630      	mov	r0, r6
 800fe36:	f7ff ffda 	bl	800fdee <__sfputc_r>
 800fe3a:	1c43      	adds	r3, r0, #1
 800fe3c:	d1f3      	bne.n	800fe26 <__sfputs_r+0xa>
 800fe3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe40 <_vfiprintf_r>:
 800fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	460d      	mov	r5, r1
 800fe46:	b09d      	sub	sp, #116	; 0x74
 800fe48:	4614      	mov	r4, r2
 800fe4a:	4698      	mov	r8, r3
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	b118      	cbz	r0, 800fe58 <_vfiprintf_r+0x18>
 800fe50:	6983      	ldr	r3, [r0, #24]
 800fe52:	b90b      	cbnz	r3, 800fe58 <_vfiprintf_r+0x18>
 800fe54:	f000 fb14 	bl	8010480 <__sinit>
 800fe58:	4b89      	ldr	r3, [pc, #548]	; (8010080 <_vfiprintf_r+0x240>)
 800fe5a:	429d      	cmp	r5, r3
 800fe5c:	d11b      	bne.n	800fe96 <_vfiprintf_r+0x56>
 800fe5e:	6875      	ldr	r5, [r6, #4]
 800fe60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe62:	07d9      	lsls	r1, r3, #31
 800fe64:	d405      	bmi.n	800fe72 <_vfiprintf_r+0x32>
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	059a      	lsls	r2, r3, #22
 800fe6a:	d402      	bmi.n	800fe72 <_vfiprintf_r+0x32>
 800fe6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe6e:	f000 fba5 	bl	80105bc <__retarget_lock_acquire_recursive>
 800fe72:	89ab      	ldrh	r3, [r5, #12]
 800fe74:	071b      	lsls	r3, r3, #28
 800fe76:	d501      	bpl.n	800fe7c <_vfiprintf_r+0x3c>
 800fe78:	692b      	ldr	r3, [r5, #16]
 800fe7a:	b9eb      	cbnz	r3, 800feb8 <_vfiprintf_r+0x78>
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f000 f96e 	bl	8010160 <__swsetup_r>
 800fe84:	b1c0      	cbz	r0, 800feb8 <_vfiprintf_r+0x78>
 800fe86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe88:	07dc      	lsls	r4, r3, #31
 800fe8a:	d50e      	bpl.n	800feaa <_vfiprintf_r+0x6a>
 800fe8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe90:	b01d      	add	sp, #116	; 0x74
 800fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe96:	4b7b      	ldr	r3, [pc, #492]	; (8010084 <_vfiprintf_r+0x244>)
 800fe98:	429d      	cmp	r5, r3
 800fe9a:	d101      	bne.n	800fea0 <_vfiprintf_r+0x60>
 800fe9c:	68b5      	ldr	r5, [r6, #8]
 800fe9e:	e7df      	b.n	800fe60 <_vfiprintf_r+0x20>
 800fea0:	4b79      	ldr	r3, [pc, #484]	; (8010088 <_vfiprintf_r+0x248>)
 800fea2:	429d      	cmp	r5, r3
 800fea4:	bf08      	it	eq
 800fea6:	68f5      	ldreq	r5, [r6, #12]
 800fea8:	e7da      	b.n	800fe60 <_vfiprintf_r+0x20>
 800feaa:	89ab      	ldrh	r3, [r5, #12]
 800feac:	0598      	lsls	r0, r3, #22
 800feae:	d4ed      	bmi.n	800fe8c <_vfiprintf_r+0x4c>
 800feb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feb2:	f000 fb84 	bl	80105be <__retarget_lock_release_recursive>
 800feb6:	e7e9      	b.n	800fe8c <_vfiprintf_r+0x4c>
 800feb8:	2300      	movs	r3, #0
 800feba:	9309      	str	r3, [sp, #36]	; 0x24
 800febc:	2320      	movs	r3, #32
 800febe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fec2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fec6:	2330      	movs	r3, #48	; 0x30
 800fec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801008c <_vfiprintf_r+0x24c>
 800fecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fed0:	f04f 0901 	mov.w	r9, #1
 800fed4:	4623      	mov	r3, r4
 800fed6:	469a      	mov	sl, r3
 800fed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fedc:	b10a      	cbz	r2, 800fee2 <_vfiprintf_r+0xa2>
 800fede:	2a25      	cmp	r2, #37	; 0x25
 800fee0:	d1f9      	bne.n	800fed6 <_vfiprintf_r+0x96>
 800fee2:	ebba 0b04 	subs.w	fp, sl, r4
 800fee6:	d00b      	beq.n	800ff00 <_vfiprintf_r+0xc0>
 800fee8:	465b      	mov	r3, fp
 800feea:	4622      	mov	r2, r4
 800feec:	4629      	mov	r1, r5
 800feee:	4630      	mov	r0, r6
 800fef0:	f7ff ff94 	bl	800fe1c <__sfputs_r>
 800fef4:	3001      	adds	r0, #1
 800fef6:	f000 80aa 	beq.w	801004e <_vfiprintf_r+0x20e>
 800fefa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fefc:	445a      	add	r2, fp
 800fefe:	9209      	str	r2, [sp, #36]	; 0x24
 800ff00:	f89a 3000 	ldrb.w	r3, [sl]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 80a2 	beq.w	801004e <_vfiprintf_r+0x20e>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff14:	f10a 0a01 	add.w	sl, sl, #1
 800ff18:	9304      	str	r3, [sp, #16]
 800ff1a:	9307      	str	r3, [sp, #28]
 800ff1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff20:	931a      	str	r3, [sp, #104]	; 0x68
 800ff22:	4654      	mov	r4, sl
 800ff24:	2205      	movs	r2, #5
 800ff26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff2a:	4858      	ldr	r0, [pc, #352]	; (801008c <_vfiprintf_r+0x24c>)
 800ff2c:	f7f0 f9e0 	bl	80002f0 <memchr>
 800ff30:	9a04      	ldr	r2, [sp, #16]
 800ff32:	b9d8      	cbnz	r0, 800ff6c <_vfiprintf_r+0x12c>
 800ff34:	06d1      	lsls	r1, r2, #27
 800ff36:	bf44      	itt	mi
 800ff38:	2320      	movmi	r3, #32
 800ff3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff3e:	0713      	lsls	r3, r2, #28
 800ff40:	bf44      	itt	mi
 800ff42:	232b      	movmi	r3, #43	; 0x2b
 800ff44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff48:	f89a 3000 	ldrb.w	r3, [sl]
 800ff4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff4e:	d015      	beq.n	800ff7c <_vfiprintf_r+0x13c>
 800ff50:	9a07      	ldr	r2, [sp, #28]
 800ff52:	4654      	mov	r4, sl
 800ff54:	2000      	movs	r0, #0
 800ff56:	f04f 0c0a 	mov.w	ip, #10
 800ff5a:	4621      	mov	r1, r4
 800ff5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff60:	3b30      	subs	r3, #48	; 0x30
 800ff62:	2b09      	cmp	r3, #9
 800ff64:	d94e      	bls.n	8010004 <_vfiprintf_r+0x1c4>
 800ff66:	b1b0      	cbz	r0, 800ff96 <_vfiprintf_r+0x156>
 800ff68:	9207      	str	r2, [sp, #28]
 800ff6a:	e014      	b.n	800ff96 <_vfiprintf_r+0x156>
 800ff6c:	eba0 0308 	sub.w	r3, r0, r8
 800ff70:	fa09 f303 	lsl.w	r3, r9, r3
 800ff74:	4313      	orrs	r3, r2
 800ff76:	9304      	str	r3, [sp, #16]
 800ff78:	46a2      	mov	sl, r4
 800ff7a:	e7d2      	b.n	800ff22 <_vfiprintf_r+0xe2>
 800ff7c:	9b03      	ldr	r3, [sp, #12]
 800ff7e:	1d19      	adds	r1, r3, #4
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	9103      	str	r1, [sp, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	bfbb      	ittet	lt
 800ff88:	425b      	neglt	r3, r3
 800ff8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ff8e:	9307      	strge	r3, [sp, #28]
 800ff90:	9307      	strlt	r3, [sp, #28]
 800ff92:	bfb8      	it	lt
 800ff94:	9204      	strlt	r2, [sp, #16]
 800ff96:	7823      	ldrb	r3, [r4, #0]
 800ff98:	2b2e      	cmp	r3, #46	; 0x2e
 800ff9a:	d10c      	bne.n	800ffb6 <_vfiprintf_r+0x176>
 800ff9c:	7863      	ldrb	r3, [r4, #1]
 800ff9e:	2b2a      	cmp	r3, #42	; 0x2a
 800ffa0:	d135      	bne.n	801000e <_vfiprintf_r+0x1ce>
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	1d1a      	adds	r2, r3, #4
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	9203      	str	r2, [sp, #12]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	bfb8      	it	lt
 800ffae:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffb2:	3402      	adds	r4, #2
 800ffb4:	9305      	str	r3, [sp, #20]
 800ffb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801009c <_vfiprintf_r+0x25c>
 800ffba:	7821      	ldrb	r1, [r4, #0]
 800ffbc:	2203      	movs	r2, #3
 800ffbe:	4650      	mov	r0, sl
 800ffc0:	f7f0 f996 	bl	80002f0 <memchr>
 800ffc4:	b140      	cbz	r0, 800ffd8 <_vfiprintf_r+0x198>
 800ffc6:	2340      	movs	r3, #64	; 0x40
 800ffc8:	eba0 000a 	sub.w	r0, r0, sl
 800ffcc:	fa03 f000 	lsl.w	r0, r3, r0
 800ffd0:	9b04      	ldr	r3, [sp, #16]
 800ffd2:	4303      	orrs	r3, r0
 800ffd4:	3401      	adds	r4, #1
 800ffd6:	9304      	str	r3, [sp, #16]
 800ffd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffdc:	482c      	ldr	r0, [pc, #176]	; (8010090 <_vfiprintf_r+0x250>)
 800ffde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffe2:	2206      	movs	r2, #6
 800ffe4:	f7f0 f984 	bl	80002f0 <memchr>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d03f      	beq.n	801006c <_vfiprintf_r+0x22c>
 800ffec:	4b29      	ldr	r3, [pc, #164]	; (8010094 <_vfiprintf_r+0x254>)
 800ffee:	bb1b      	cbnz	r3, 8010038 <_vfiprintf_r+0x1f8>
 800fff0:	9b03      	ldr	r3, [sp, #12]
 800fff2:	3307      	adds	r3, #7
 800fff4:	f023 0307 	bic.w	r3, r3, #7
 800fff8:	3308      	adds	r3, #8
 800fffa:	9303      	str	r3, [sp, #12]
 800fffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fffe:	443b      	add	r3, r7
 8010000:	9309      	str	r3, [sp, #36]	; 0x24
 8010002:	e767      	b.n	800fed4 <_vfiprintf_r+0x94>
 8010004:	fb0c 3202 	mla	r2, ip, r2, r3
 8010008:	460c      	mov	r4, r1
 801000a:	2001      	movs	r0, #1
 801000c:	e7a5      	b.n	800ff5a <_vfiprintf_r+0x11a>
 801000e:	2300      	movs	r3, #0
 8010010:	3401      	adds	r4, #1
 8010012:	9305      	str	r3, [sp, #20]
 8010014:	4619      	mov	r1, r3
 8010016:	f04f 0c0a 	mov.w	ip, #10
 801001a:	4620      	mov	r0, r4
 801001c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010020:	3a30      	subs	r2, #48	; 0x30
 8010022:	2a09      	cmp	r2, #9
 8010024:	d903      	bls.n	801002e <_vfiprintf_r+0x1ee>
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0c5      	beq.n	800ffb6 <_vfiprintf_r+0x176>
 801002a:	9105      	str	r1, [sp, #20]
 801002c:	e7c3      	b.n	800ffb6 <_vfiprintf_r+0x176>
 801002e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010032:	4604      	mov	r4, r0
 8010034:	2301      	movs	r3, #1
 8010036:	e7f0      	b.n	801001a <_vfiprintf_r+0x1da>
 8010038:	ab03      	add	r3, sp, #12
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	462a      	mov	r2, r5
 801003e:	4b16      	ldr	r3, [pc, #88]	; (8010098 <_vfiprintf_r+0x258>)
 8010040:	a904      	add	r1, sp, #16
 8010042:	4630      	mov	r0, r6
 8010044:	f7fd fe48 	bl	800dcd8 <_printf_float>
 8010048:	4607      	mov	r7, r0
 801004a:	1c78      	adds	r0, r7, #1
 801004c:	d1d6      	bne.n	800fffc <_vfiprintf_r+0x1bc>
 801004e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010050:	07d9      	lsls	r1, r3, #31
 8010052:	d405      	bmi.n	8010060 <_vfiprintf_r+0x220>
 8010054:	89ab      	ldrh	r3, [r5, #12]
 8010056:	059a      	lsls	r2, r3, #22
 8010058:	d402      	bmi.n	8010060 <_vfiprintf_r+0x220>
 801005a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801005c:	f000 faaf 	bl	80105be <__retarget_lock_release_recursive>
 8010060:	89ab      	ldrh	r3, [r5, #12]
 8010062:	065b      	lsls	r3, r3, #25
 8010064:	f53f af12 	bmi.w	800fe8c <_vfiprintf_r+0x4c>
 8010068:	9809      	ldr	r0, [sp, #36]	; 0x24
 801006a:	e711      	b.n	800fe90 <_vfiprintf_r+0x50>
 801006c:	ab03      	add	r3, sp, #12
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	462a      	mov	r2, r5
 8010072:	4b09      	ldr	r3, [pc, #36]	; (8010098 <_vfiprintf_r+0x258>)
 8010074:	a904      	add	r1, sp, #16
 8010076:	4630      	mov	r0, r6
 8010078:	f7fe f8ba 	bl	800e1f0 <_printf_i>
 801007c:	e7e4      	b.n	8010048 <_vfiprintf_r+0x208>
 801007e:	bf00      	nop
 8010080:	080118d4 	.word	0x080118d4
 8010084:	080118f4 	.word	0x080118f4
 8010088:	080118b4 	.word	0x080118b4
 801008c:	0801175c 	.word	0x0801175c
 8010090:	08011766 	.word	0x08011766
 8010094:	0800dcd9 	.word	0x0800dcd9
 8010098:	0800fe1d 	.word	0x0800fe1d
 801009c:	08011762 	.word	0x08011762

080100a0 <__swbuf_r>:
 80100a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a2:	460e      	mov	r6, r1
 80100a4:	4614      	mov	r4, r2
 80100a6:	4605      	mov	r5, r0
 80100a8:	b118      	cbz	r0, 80100b2 <__swbuf_r+0x12>
 80100aa:	6983      	ldr	r3, [r0, #24]
 80100ac:	b90b      	cbnz	r3, 80100b2 <__swbuf_r+0x12>
 80100ae:	f000 f9e7 	bl	8010480 <__sinit>
 80100b2:	4b21      	ldr	r3, [pc, #132]	; (8010138 <__swbuf_r+0x98>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	d12b      	bne.n	8010110 <__swbuf_r+0x70>
 80100b8:	686c      	ldr	r4, [r5, #4]
 80100ba:	69a3      	ldr	r3, [r4, #24]
 80100bc:	60a3      	str	r3, [r4, #8]
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	071a      	lsls	r2, r3, #28
 80100c2:	d52f      	bpl.n	8010124 <__swbuf_r+0x84>
 80100c4:	6923      	ldr	r3, [r4, #16]
 80100c6:	b36b      	cbz	r3, 8010124 <__swbuf_r+0x84>
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	6820      	ldr	r0, [r4, #0]
 80100cc:	1ac0      	subs	r0, r0, r3
 80100ce:	6963      	ldr	r3, [r4, #20]
 80100d0:	b2f6      	uxtb	r6, r6
 80100d2:	4283      	cmp	r3, r0
 80100d4:	4637      	mov	r7, r6
 80100d6:	dc04      	bgt.n	80100e2 <__swbuf_r+0x42>
 80100d8:	4621      	mov	r1, r4
 80100da:	4628      	mov	r0, r5
 80100dc:	f000 f93c 	bl	8010358 <_fflush_r>
 80100e0:	bb30      	cbnz	r0, 8010130 <__swbuf_r+0x90>
 80100e2:	68a3      	ldr	r3, [r4, #8]
 80100e4:	3b01      	subs	r3, #1
 80100e6:	60a3      	str	r3, [r4, #8]
 80100e8:	6823      	ldr	r3, [r4, #0]
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	6022      	str	r2, [r4, #0]
 80100ee:	701e      	strb	r6, [r3, #0]
 80100f0:	6963      	ldr	r3, [r4, #20]
 80100f2:	3001      	adds	r0, #1
 80100f4:	4283      	cmp	r3, r0
 80100f6:	d004      	beq.n	8010102 <__swbuf_r+0x62>
 80100f8:	89a3      	ldrh	r3, [r4, #12]
 80100fa:	07db      	lsls	r3, r3, #31
 80100fc:	d506      	bpl.n	801010c <__swbuf_r+0x6c>
 80100fe:	2e0a      	cmp	r6, #10
 8010100:	d104      	bne.n	801010c <__swbuf_r+0x6c>
 8010102:	4621      	mov	r1, r4
 8010104:	4628      	mov	r0, r5
 8010106:	f000 f927 	bl	8010358 <_fflush_r>
 801010a:	b988      	cbnz	r0, 8010130 <__swbuf_r+0x90>
 801010c:	4638      	mov	r0, r7
 801010e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010110:	4b0a      	ldr	r3, [pc, #40]	; (801013c <__swbuf_r+0x9c>)
 8010112:	429c      	cmp	r4, r3
 8010114:	d101      	bne.n	801011a <__swbuf_r+0x7a>
 8010116:	68ac      	ldr	r4, [r5, #8]
 8010118:	e7cf      	b.n	80100ba <__swbuf_r+0x1a>
 801011a:	4b09      	ldr	r3, [pc, #36]	; (8010140 <__swbuf_r+0xa0>)
 801011c:	429c      	cmp	r4, r3
 801011e:	bf08      	it	eq
 8010120:	68ec      	ldreq	r4, [r5, #12]
 8010122:	e7ca      	b.n	80100ba <__swbuf_r+0x1a>
 8010124:	4621      	mov	r1, r4
 8010126:	4628      	mov	r0, r5
 8010128:	f000 f81a 	bl	8010160 <__swsetup_r>
 801012c:	2800      	cmp	r0, #0
 801012e:	d0cb      	beq.n	80100c8 <__swbuf_r+0x28>
 8010130:	f04f 37ff 	mov.w	r7, #4294967295
 8010134:	e7ea      	b.n	801010c <__swbuf_r+0x6c>
 8010136:	bf00      	nop
 8010138:	080118d4 	.word	0x080118d4
 801013c:	080118f4 	.word	0x080118f4
 8010140:	080118b4 	.word	0x080118b4

08010144 <__ascii_wctomb>:
 8010144:	b149      	cbz	r1, 801015a <__ascii_wctomb+0x16>
 8010146:	2aff      	cmp	r2, #255	; 0xff
 8010148:	bf85      	ittet	hi
 801014a:	238a      	movhi	r3, #138	; 0x8a
 801014c:	6003      	strhi	r3, [r0, #0]
 801014e:	700a      	strbls	r2, [r1, #0]
 8010150:	f04f 30ff 	movhi.w	r0, #4294967295
 8010154:	bf98      	it	ls
 8010156:	2001      	movls	r0, #1
 8010158:	4770      	bx	lr
 801015a:	4608      	mov	r0, r1
 801015c:	4770      	bx	lr
	...

08010160 <__swsetup_r>:
 8010160:	4b32      	ldr	r3, [pc, #200]	; (801022c <__swsetup_r+0xcc>)
 8010162:	b570      	push	{r4, r5, r6, lr}
 8010164:	681d      	ldr	r5, [r3, #0]
 8010166:	4606      	mov	r6, r0
 8010168:	460c      	mov	r4, r1
 801016a:	b125      	cbz	r5, 8010176 <__swsetup_r+0x16>
 801016c:	69ab      	ldr	r3, [r5, #24]
 801016e:	b913      	cbnz	r3, 8010176 <__swsetup_r+0x16>
 8010170:	4628      	mov	r0, r5
 8010172:	f000 f985 	bl	8010480 <__sinit>
 8010176:	4b2e      	ldr	r3, [pc, #184]	; (8010230 <__swsetup_r+0xd0>)
 8010178:	429c      	cmp	r4, r3
 801017a:	d10f      	bne.n	801019c <__swsetup_r+0x3c>
 801017c:	686c      	ldr	r4, [r5, #4]
 801017e:	89a3      	ldrh	r3, [r4, #12]
 8010180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010184:	0719      	lsls	r1, r3, #28
 8010186:	d42c      	bmi.n	80101e2 <__swsetup_r+0x82>
 8010188:	06dd      	lsls	r5, r3, #27
 801018a:	d411      	bmi.n	80101b0 <__swsetup_r+0x50>
 801018c:	2309      	movs	r3, #9
 801018e:	6033      	str	r3, [r6, #0]
 8010190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010194:	81a3      	strh	r3, [r4, #12]
 8010196:	f04f 30ff 	mov.w	r0, #4294967295
 801019a:	e03e      	b.n	801021a <__swsetup_r+0xba>
 801019c:	4b25      	ldr	r3, [pc, #148]	; (8010234 <__swsetup_r+0xd4>)
 801019e:	429c      	cmp	r4, r3
 80101a0:	d101      	bne.n	80101a6 <__swsetup_r+0x46>
 80101a2:	68ac      	ldr	r4, [r5, #8]
 80101a4:	e7eb      	b.n	801017e <__swsetup_r+0x1e>
 80101a6:	4b24      	ldr	r3, [pc, #144]	; (8010238 <__swsetup_r+0xd8>)
 80101a8:	429c      	cmp	r4, r3
 80101aa:	bf08      	it	eq
 80101ac:	68ec      	ldreq	r4, [r5, #12]
 80101ae:	e7e6      	b.n	801017e <__swsetup_r+0x1e>
 80101b0:	0758      	lsls	r0, r3, #29
 80101b2:	d512      	bpl.n	80101da <__swsetup_r+0x7a>
 80101b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101b6:	b141      	cbz	r1, 80101ca <__swsetup_r+0x6a>
 80101b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101bc:	4299      	cmp	r1, r3
 80101be:	d002      	beq.n	80101c6 <__swsetup_r+0x66>
 80101c0:	4630      	mov	r0, r6
 80101c2:	f7ff fb31 	bl	800f828 <_free_r>
 80101c6:	2300      	movs	r3, #0
 80101c8:	6363      	str	r3, [r4, #52]	; 0x34
 80101ca:	89a3      	ldrh	r3, [r4, #12]
 80101cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101d0:	81a3      	strh	r3, [r4, #12]
 80101d2:	2300      	movs	r3, #0
 80101d4:	6063      	str	r3, [r4, #4]
 80101d6:	6923      	ldr	r3, [r4, #16]
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	89a3      	ldrh	r3, [r4, #12]
 80101dc:	f043 0308 	orr.w	r3, r3, #8
 80101e0:	81a3      	strh	r3, [r4, #12]
 80101e2:	6923      	ldr	r3, [r4, #16]
 80101e4:	b94b      	cbnz	r3, 80101fa <__swsetup_r+0x9a>
 80101e6:	89a3      	ldrh	r3, [r4, #12]
 80101e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101f0:	d003      	beq.n	80101fa <__swsetup_r+0x9a>
 80101f2:	4621      	mov	r1, r4
 80101f4:	4630      	mov	r0, r6
 80101f6:	f000 fa09 	bl	801060c <__smakebuf_r>
 80101fa:	89a0      	ldrh	r0, [r4, #12]
 80101fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010200:	f010 0301 	ands.w	r3, r0, #1
 8010204:	d00a      	beq.n	801021c <__swsetup_r+0xbc>
 8010206:	2300      	movs	r3, #0
 8010208:	60a3      	str	r3, [r4, #8]
 801020a:	6963      	ldr	r3, [r4, #20]
 801020c:	425b      	negs	r3, r3
 801020e:	61a3      	str	r3, [r4, #24]
 8010210:	6923      	ldr	r3, [r4, #16]
 8010212:	b943      	cbnz	r3, 8010226 <__swsetup_r+0xc6>
 8010214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010218:	d1ba      	bne.n	8010190 <__swsetup_r+0x30>
 801021a:	bd70      	pop	{r4, r5, r6, pc}
 801021c:	0781      	lsls	r1, r0, #30
 801021e:	bf58      	it	pl
 8010220:	6963      	ldrpl	r3, [r4, #20]
 8010222:	60a3      	str	r3, [r4, #8]
 8010224:	e7f4      	b.n	8010210 <__swsetup_r+0xb0>
 8010226:	2000      	movs	r0, #0
 8010228:	e7f7      	b.n	801021a <__swsetup_r+0xba>
 801022a:	bf00      	nop
 801022c:	24000010 	.word	0x24000010
 8010230:	080118d4 	.word	0x080118d4
 8010234:	080118f4 	.word	0x080118f4
 8010238:	080118b4 	.word	0x080118b4

0801023c <abort>:
 801023c:	b508      	push	{r3, lr}
 801023e:	2006      	movs	r0, #6
 8010240:	f000 fa54 	bl	80106ec <raise>
 8010244:	2001      	movs	r0, #1
 8010246:	f7f1 fca9 	bl	8001b9c <_exit>
	...

0801024c <__sflush_r>:
 801024c:	898a      	ldrh	r2, [r1, #12]
 801024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010252:	4605      	mov	r5, r0
 8010254:	0710      	lsls	r0, r2, #28
 8010256:	460c      	mov	r4, r1
 8010258:	d458      	bmi.n	801030c <__sflush_r+0xc0>
 801025a:	684b      	ldr	r3, [r1, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	dc05      	bgt.n	801026c <__sflush_r+0x20>
 8010260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010262:	2b00      	cmp	r3, #0
 8010264:	dc02      	bgt.n	801026c <__sflush_r+0x20>
 8010266:	2000      	movs	r0, #0
 8010268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801026c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801026e:	2e00      	cmp	r6, #0
 8010270:	d0f9      	beq.n	8010266 <__sflush_r+0x1a>
 8010272:	2300      	movs	r3, #0
 8010274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010278:	682f      	ldr	r7, [r5, #0]
 801027a:	602b      	str	r3, [r5, #0]
 801027c:	d032      	beq.n	80102e4 <__sflush_r+0x98>
 801027e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010280:	89a3      	ldrh	r3, [r4, #12]
 8010282:	075a      	lsls	r2, r3, #29
 8010284:	d505      	bpl.n	8010292 <__sflush_r+0x46>
 8010286:	6863      	ldr	r3, [r4, #4]
 8010288:	1ac0      	subs	r0, r0, r3
 801028a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801028c:	b10b      	cbz	r3, 8010292 <__sflush_r+0x46>
 801028e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010290:	1ac0      	subs	r0, r0, r3
 8010292:	2300      	movs	r3, #0
 8010294:	4602      	mov	r2, r0
 8010296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010298:	6a21      	ldr	r1, [r4, #32]
 801029a:	4628      	mov	r0, r5
 801029c:	47b0      	blx	r6
 801029e:	1c43      	adds	r3, r0, #1
 80102a0:	89a3      	ldrh	r3, [r4, #12]
 80102a2:	d106      	bne.n	80102b2 <__sflush_r+0x66>
 80102a4:	6829      	ldr	r1, [r5, #0]
 80102a6:	291d      	cmp	r1, #29
 80102a8:	d82c      	bhi.n	8010304 <__sflush_r+0xb8>
 80102aa:	4a2a      	ldr	r2, [pc, #168]	; (8010354 <__sflush_r+0x108>)
 80102ac:	40ca      	lsrs	r2, r1
 80102ae:	07d6      	lsls	r6, r2, #31
 80102b0:	d528      	bpl.n	8010304 <__sflush_r+0xb8>
 80102b2:	2200      	movs	r2, #0
 80102b4:	6062      	str	r2, [r4, #4]
 80102b6:	04d9      	lsls	r1, r3, #19
 80102b8:	6922      	ldr	r2, [r4, #16]
 80102ba:	6022      	str	r2, [r4, #0]
 80102bc:	d504      	bpl.n	80102c8 <__sflush_r+0x7c>
 80102be:	1c42      	adds	r2, r0, #1
 80102c0:	d101      	bne.n	80102c6 <__sflush_r+0x7a>
 80102c2:	682b      	ldr	r3, [r5, #0]
 80102c4:	b903      	cbnz	r3, 80102c8 <__sflush_r+0x7c>
 80102c6:	6560      	str	r0, [r4, #84]	; 0x54
 80102c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ca:	602f      	str	r7, [r5, #0]
 80102cc:	2900      	cmp	r1, #0
 80102ce:	d0ca      	beq.n	8010266 <__sflush_r+0x1a>
 80102d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102d4:	4299      	cmp	r1, r3
 80102d6:	d002      	beq.n	80102de <__sflush_r+0x92>
 80102d8:	4628      	mov	r0, r5
 80102da:	f7ff faa5 	bl	800f828 <_free_r>
 80102de:	2000      	movs	r0, #0
 80102e0:	6360      	str	r0, [r4, #52]	; 0x34
 80102e2:	e7c1      	b.n	8010268 <__sflush_r+0x1c>
 80102e4:	6a21      	ldr	r1, [r4, #32]
 80102e6:	2301      	movs	r3, #1
 80102e8:	4628      	mov	r0, r5
 80102ea:	47b0      	blx	r6
 80102ec:	1c41      	adds	r1, r0, #1
 80102ee:	d1c7      	bne.n	8010280 <__sflush_r+0x34>
 80102f0:	682b      	ldr	r3, [r5, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d0c4      	beq.n	8010280 <__sflush_r+0x34>
 80102f6:	2b1d      	cmp	r3, #29
 80102f8:	d001      	beq.n	80102fe <__sflush_r+0xb2>
 80102fa:	2b16      	cmp	r3, #22
 80102fc:	d101      	bne.n	8010302 <__sflush_r+0xb6>
 80102fe:	602f      	str	r7, [r5, #0]
 8010300:	e7b1      	b.n	8010266 <__sflush_r+0x1a>
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010308:	81a3      	strh	r3, [r4, #12]
 801030a:	e7ad      	b.n	8010268 <__sflush_r+0x1c>
 801030c:	690f      	ldr	r7, [r1, #16]
 801030e:	2f00      	cmp	r7, #0
 8010310:	d0a9      	beq.n	8010266 <__sflush_r+0x1a>
 8010312:	0793      	lsls	r3, r2, #30
 8010314:	680e      	ldr	r6, [r1, #0]
 8010316:	bf08      	it	eq
 8010318:	694b      	ldreq	r3, [r1, #20]
 801031a:	600f      	str	r7, [r1, #0]
 801031c:	bf18      	it	ne
 801031e:	2300      	movne	r3, #0
 8010320:	eba6 0807 	sub.w	r8, r6, r7
 8010324:	608b      	str	r3, [r1, #8]
 8010326:	f1b8 0f00 	cmp.w	r8, #0
 801032a:	dd9c      	ble.n	8010266 <__sflush_r+0x1a>
 801032c:	6a21      	ldr	r1, [r4, #32]
 801032e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010330:	4643      	mov	r3, r8
 8010332:	463a      	mov	r2, r7
 8010334:	4628      	mov	r0, r5
 8010336:	47b0      	blx	r6
 8010338:	2800      	cmp	r0, #0
 801033a:	dc06      	bgt.n	801034a <__sflush_r+0xfe>
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	f04f 30ff 	mov.w	r0, #4294967295
 8010348:	e78e      	b.n	8010268 <__sflush_r+0x1c>
 801034a:	4407      	add	r7, r0
 801034c:	eba8 0800 	sub.w	r8, r8, r0
 8010350:	e7e9      	b.n	8010326 <__sflush_r+0xda>
 8010352:	bf00      	nop
 8010354:	20400001 	.word	0x20400001

08010358 <_fflush_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	690b      	ldr	r3, [r1, #16]
 801035c:	4605      	mov	r5, r0
 801035e:	460c      	mov	r4, r1
 8010360:	b913      	cbnz	r3, 8010368 <_fflush_r+0x10>
 8010362:	2500      	movs	r5, #0
 8010364:	4628      	mov	r0, r5
 8010366:	bd38      	pop	{r3, r4, r5, pc}
 8010368:	b118      	cbz	r0, 8010372 <_fflush_r+0x1a>
 801036a:	6983      	ldr	r3, [r0, #24]
 801036c:	b90b      	cbnz	r3, 8010372 <_fflush_r+0x1a>
 801036e:	f000 f887 	bl	8010480 <__sinit>
 8010372:	4b14      	ldr	r3, [pc, #80]	; (80103c4 <_fflush_r+0x6c>)
 8010374:	429c      	cmp	r4, r3
 8010376:	d11b      	bne.n	80103b0 <_fflush_r+0x58>
 8010378:	686c      	ldr	r4, [r5, #4]
 801037a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d0ef      	beq.n	8010362 <_fflush_r+0xa>
 8010382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010384:	07d0      	lsls	r0, r2, #31
 8010386:	d404      	bmi.n	8010392 <_fflush_r+0x3a>
 8010388:	0599      	lsls	r1, r3, #22
 801038a:	d402      	bmi.n	8010392 <_fflush_r+0x3a>
 801038c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801038e:	f000 f915 	bl	80105bc <__retarget_lock_acquire_recursive>
 8010392:	4628      	mov	r0, r5
 8010394:	4621      	mov	r1, r4
 8010396:	f7ff ff59 	bl	801024c <__sflush_r>
 801039a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801039c:	07da      	lsls	r2, r3, #31
 801039e:	4605      	mov	r5, r0
 80103a0:	d4e0      	bmi.n	8010364 <_fflush_r+0xc>
 80103a2:	89a3      	ldrh	r3, [r4, #12]
 80103a4:	059b      	lsls	r3, r3, #22
 80103a6:	d4dd      	bmi.n	8010364 <_fflush_r+0xc>
 80103a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103aa:	f000 f908 	bl	80105be <__retarget_lock_release_recursive>
 80103ae:	e7d9      	b.n	8010364 <_fflush_r+0xc>
 80103b0:	4b05      	ldr	r3, [pc, #20]	; (80103c8 <_fflush_r+0x70>)
 80103b2:	429c      	cmp	r4, r3
 80103b4:	d101      	bne.n	80103ba <_fflush_r+0x62>
 80103b6:	68ac      	ldr	r4, [r5, #8]
 80103b8:	e7df      	b.n	801037a <_fflush_r+0x22>
 80103ba:	4b04      	ldr	r3, [pc, #16]	; (80103cc <_fflush_r+0x74>)
 80103bc:	429c      	cmp	r4, r3
 80103be:	bf08      	it	eq
 80103c0:	68ec      	ldreq	r4, [r5, #12]
 80103c2:	e7da      	b.n	801037a <_fflush_r+0x22>
 80103c4:	080118d4 	.word	0x080118d4
 80103c8:	080118f4 	.word	0x080118f4
 80103cc:	080118b4 	.word	0x080118b4

080103d0 <std>:
 80103d0:	2300      	movs	r3, #0
 80103d2:	b510      	push	{r4, lr}
 80103d4:	4604      	mov	r4, r0
 80103d6:	e9c0 3300 	strd	r3, r3, [r0]
 80103da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103de:	6083      	str	r3, [r0, #8]
 80103e0:	8181      	strh	r1, [r0, #12]
 80103e2:	6643      	str	r3, [r0, #100]	; 0x64
 80103e4:	81c2      	strh	r2, [r0, #14]
 80103e6:	6183      	str	r3, [r0, #24]
 80103e8:	4619      	mov	r1, r3
 80103ea:	2208      	movs	r2, #8
 80103ec:	305c      	adds	r0, #92	; 0x5c
 80103ee:	f7fd fbdb 	bl	800dba8 <memset>
 80103f2:	4b05      	ldr	r3, [pc, #20]	; (8010408 <std+0x38>)
 80103f4:	6263      	str	r3, [r4, #36]	; 0x24
 80103f6:	4b05      	ldr	r3, [pc, #20]	; (801040c <std+0x3c>)
 80103f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80103fa:	4b05      	ldr	r3, [pc, #20]	; (8010410 <std+0x40>)
 80103fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103fe:	4b05      	ldr	r3, [pc, #20]	; (8010414 <std+0x44>)
 8010400:	6224      	str	r4, [r4, #32]
 8010402:	6323      	str	r3, [r4, #48]	; 0x30
 8010404:	bd10      	pop	{r4, pc}
 8010406:	bf00      	nop
 8010408:	08010725 	.word	0x08010725
 801040c:	08010747 	.word	0x08010747
 8010410:	0801077f 	.word	0x0801077f
 8010414:	080107a3 	.word	0x080107a3

08010418 <_cleanup_r>:
 8010418:	4901      	ldr	r1, [pc, #4]	; (8010420 <_cleanup_r+0x8>)
 801041a:	f000 b8af 	b.w	801057c <_fwalk_reent>
 801041e:	bf00      	nop
 8010420:	08010359 	.word	0x08010359

08010424 <__sfmoreglue>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	2268      	movs	r2, #104	; 0x68
 8010428:	1e4d      	subs	r5, r1, #1
 801042a:	4355      	muls	r5, r2
 801042c:	460e      	mov	r6, r1
 801042e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010432:	f7ff fa65 	bl	800f900 <_malloc_r>
 8010436:	4604      	mov	r4, r0
 8010438:	b140      	cbz	r0, 801044c <__sfmoreglue+0x28>
 801043a:	2100      	movs	r1, #0
 801043c:	e9c0 1600 	strd	r1, r6, [r0]
 8010440:	300c      	adds	r0, #12
 8010442:	60a0      	str	r0, [r4, #8]
 8010444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010448:	f7fd fbae 	bl	800dba8 <memset>
 801044c:	4620      	mov	r0, r4
 801044e:	bd70      	pop	{r4, r5, r6, pc}

08010450 <__sfp_lock_acquire>:
 8010450:	4801      	ldr	r0, [pc, #4]	; (8010458 <__sfp_lock_acquire+0x8>)
 8010452:	f000 b8b3 	b.w	80105bc <__retarget_lock_acquire_recursive>
 8010456:	bf00      	nop
 8010458:	2400367d 	.word	0x2400367d

0801045c <__sfp_lock_release>:
 801045c:	4801      	ldr	r0, [pc, #4]	; (8010464 <__sfp_lock_release+0x8>)
 801045e:	f000 b8ae 	b.w	80105be <__retarget_lock_release_recursive>
 8010462:	bf00      	nop
 8010464:	2400367d 	.word	0x2400367d

08010468 <__sinit_lock_acquire>:
 8010468:	4801      	ldr	r0, [pc, #4]	; (8010470 <__sinit_lock_acquire+0x8>)
 801046a:	f000 b8a7 	b.w	80105bc <__retarget_lock_acquire_recursive>
 801046e:	bf00      	nop
 8010470:	2400367e 	.word	0x2400367e

08010474 <__sinit_lock_release>:
 8010474:	4801      	ldr	r0, [pc, #4]	; (801047c <__sinit_lock_release+0x8>)
 8010476:	f000 b8a2 	b.w	80105be <__retarget_lock_release_recursive>
 801047a:	bf00      	nop
 801047c:	2400367e 	.word	0x2400367e

08010480 <__sinit>:
 8010480:	b510      	push	{r4, lr}
 8010482:	4604      	mov	r4, r0
 8010484:	f7ff fff0 	bl	8010468 <__sinit_lock_acquire>
 8010488:	69a3      	ldr	r3, [r4, #24]
 801048a:	b11b      	cbz	r3, 8010494 <__sinit+0x14>
 801048c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010490:	f7ff bff0 	b.w	8010474 <__sinit_lock_release>
 8010494:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010498:	6523      	str	r3, [r4, #80]	; 0x50
 801049a:	4b13      	ldr	r3, [pc, #76]	; (80104e8 <__sinit+0x68>)
 801049c:	4a13      	ldr	r2, [pc, #76]	; (80104ec <__sinit+0x6c>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80104a2:	42a3      	cmp	r3, r4
 80104a4:	bf04      	itt	eq
 80104a6:	2301      	moveq	r3, #1
 80104a8:	61a3      	streq	r3, [r4, #24]
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 f820 	bl	80104f0 <__sfp>
 80104b0:	6060      	str	r0, [r4, #4]
 80104b2:	4620      	mov	r0, r4
 80104b4:	f000 f81c 	bl	80104f0 <__sfp>
 80104b8:	60a0      	str	r0, [r4, #8]
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 f818 	bl	80104f0 <__sfp>
 80104c0:	2200      	movs	r2, #0
 80104c2:	60e0      	str	r0, [r4, #12]
 80104c4:	2104      	movs	r1, #4
 80104c6:	6860      	ldr	r0, [r4, #4]
 80104c8:	f7ff ff82 	bl	80103d0 <std>
 80104cc:	68a0      	ldr	r0, [r4, #8]
 80104ce:	2201      	movs	r2, #1
 80104d0:	2109      	movs	r1, #9
 80104d2:	f7ff ff7d 	bl	80103d0 <std>
 80104d6:	68e0      	ldr	r0, [r4, #12]
 80104d8:	2202      	movs	r2, #2
 80104da:	2112      	movs	r1, #18
 80104dc:	f7ff ff78 	bl	80103d0 <std>
 80104e0:	2301      	movs	r3, #1
 80104e2:	61a3      	str	r3, [r4, #24]
 80104e4:	e7d2      	b.n	801048c <__sinit+0xc>
 80104e6:	bf00      	nop
 80104e8:	08011538 	.word	0x08011538
 80104ec:	08010419 	.word	0x08010419

080104f0 <__sfp>:
 80104f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f2:	4607      	mov	r7, r0
 80104f4:	f7ff ffac 	bl	8010450 <__sfp_lock_acquire>
 80104f8:	4b1e      	ldr	r3, [pc, #120]	; (8010574 <__sfp+0x84>)
 80104fa:	681e      	ldr	r6, [r3, #0]
 80104fc:	69b3      	ldr	r3, [r6, #24]
 80104fe:	b913      	cbnz	r3, 8010506 <__sfp+0x16>
 8010500:	4630      	mov	r0, r6
 8010502:	f7ff ffbd 	bl	8010480 <__sinit>
 8010506:	3648      	adds	r6, #72	; 0x48
 8010508:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801050c:	3b01      	subs	r3, #1
 801050e:	d503      	bpl.n	8010518 <__sfp+0x28>
 8010510:	6833      	ldr	r3, [r6, #0]
 8010512:	b30b      	cbz	r3, 8010558 <__sfp+0x68>
 8010514:	6836      	ldr	r6, [r6, #0]
 8010516:	e7f7      	b.n	8010508 <__sfp+0x18>
 8010518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801051c:	b9d5      	cbnz	r5, 8010554 <__sfp+0x64>
 801051e:	4b16      	ldr	r3, [pc, #88]	; (8010578 <__sfp+0x88>)
 8010520:	60e3      	str	r3, [r4, #12]
 8010522:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010526:	6665      	str	r5, [r4, #100]	; 0x64
 8010528:	f000 f847 	bl	80105ba <__retarget_lock_init_recursive>
 801052c:	f7ff ff96 	bl	801045c <__sfp_lock_release>
 8010530:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010534:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010538:	6025      	str	r5, [r4, #0]
 801053a:	61a5      	str	r5, [r4, #24]
 801053c:	2208      	movs	r2, #8
 801053e:	4629      	mov	r1, r5
 8010540:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010544:	f7fd fb30 	bl	800dba8 <memset>
 8010548:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801054c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010550:	4620      	mov	r0, r4
 8010552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010554:	3468      	adds	r4, #104	; 0x68
 8010556:	e7d9      	b.n	801050c <__sfp+0x1c>
 8010558:	2104      	movs	r1, #4
 801055a:	4638      	mov	r0, r7
 801055c:	f7ff ff62 	bl	8010424 <__sfmoreglue>
 8010560:	4604      	mov	r4, r0
 8010562:	6030      	str	r0, [r6, #0]
 8010564:	2800      	cmp	r0, #0
 8010566:	d1d5      	bne.n	8010514 <__sfp+0x24>
 8010568:	f7ff ff78 	bl	801045c <__sfp_lock_release>
 801056c:	230c      	movs	r3, #12
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	e7ee      	b.n	8010550 <__sfp+0x60>
 8010572:	bf00      	nop
 8010574:	08011538 	.word	0x08011538
 8010578:	ffff0001 	.word	0xffff0001

0801057c <_fwalk_reent>:
 801057c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010580:	4606      	mov	r6, r0
 8010582:	4688      	mov	r8, r1
 8010584:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010588:	2700      	movs	r7, #0
 801058a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801058e:	f1b9 0901 	subs.w	r9, r9, #1
 8010592:	d505      	bpl.n	80105a0 <_fwalk_reent+0x24>
 8010594:	6824      	ldr	r4, [r4, #0]
 8010596:	2c00      	cmp	r4, #0
 8010598:	d1f7      	bne.n	801058a <_fwalk_reent+0xe>
 801059a:	4638      	mov	r0, r7
 801059c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105a0:	89ab      	ldrh	r3, [r5, #12]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d907      	bls.n	80105b6 <_fwalk_reent+0x3a>
 80105a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105aa:	3301      	adds	r3, #1
 80105ac:	d003      	beq.n	80105b6 <_fwalk_reent+0x3a>
 80105ae:	4629      	mov	r1, r5
 80105b0:	4630      	mov	r0, r6
 80105b2:	47c0      	blx	r8
 80105b4:	4307      	orrs	r7, r0
 80105b6:	3568      	adds	r5, #104	; 0x68
 80105b8:	e7e9      	b.n	801058e <_fwalk_reent+0x12>

080105ba <__retarget_lock_init_recursive>:
 80105ba:	4770      	bx	lr

080105bc <__retarget_lock_acquire_recursive>:
 80105bc:	4770      	bx	lr

080105be <__retarget_lock_release_recursive>:
 80105be:	4770      	bx	lr

080105c0 <__swhatbuf_r>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	460e      	mov	r6, r1
 80105c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105c8:	2900      	cmp	r1, #0
 80105ca:	b096      	sub	sp, #88	; 0x58
 80105cc:	4614      	mov	r4, r2
 80105ce:	461d      	mov	r5, r3
 80105d0:	da08      	bge.n	80105e4 <__swhatbuf_r+0x24>
 80105d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105d6:	2200      	movs	r2, #0
 80105d8:	602a      	str	r2, [r5, #0]
 80105da:	061a      	lsls	r2, r3, #24
 80105dc:	d410      	bmi.n	8010600 <__swhatbuf_r+0x40>
 80105de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105e2:	e00e      	b.n	8010602 <__swhatbuf_r+0x42>
 80105e4:	466a      	mov	r2, sp
 80105e6:	f000 f903 	bl	80107f0 <_fstat_r>
 80105ea:	2800      	cmp	r0, #0
 80105ec:	dbf1      	blt.n	80105d2 <__swhatbuf_r+0x12>
 80105ee:	9a01      	ldr	r2, [sp, #4]
 80105f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105f8:	425a      	negs	r2, r3
 80105fa:	415a      	adcs	r2, r3
 80105fc:	602a      	str	r2, [r5, #0]
 80105fe:	e7ee      	b.n	80105de <__swhatbuf_r+0x1e>
 8010600:	2340      	movs	r3, #64	; 0x40
 8010602:	2000      	movs	r0, #0
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	b016      	add	sp, #88	; 0x58
 8010608:	bd70      	pop	{r4, r5, r6, pc}
	...

0801060c <__smakebuf_r>:
 801060c:	898b      	ldrh	r3, [r1, #12]
 801060e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010610:	079d      	lsls	r5, r3, #30
 8010612:	4606      	mov	r6, r0
 8010614:	460c      	mov	r4, r1
 8010616:	d507      	bpl.n	8010628 <__smakebuf_r+0x1c>
 8010618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	6123      	str	r3, [r4, #16]
 8010620:	2301      	movs	r3, #1
 8010622:	6163      	str	r3, [r4, #20]
 8010624:	b002      	add	sp, #8
 8010626:	bd70      	pop	{r4, r5, r6, pc}
 8010628:	ab01      	add	r3, sp, #4
 801062a:	466a      	mov	r2, sp
 801062c:	f7ff ffc8 	bl	80105c0 <__swhatbuf_r>
 8010630:	9900      	ldr	r1, [sp, #0]
 8010632:	4605      	mov	r5, r0
 8010634:	4630      	mov	r0, r6
 8010636:	f7ff f963 	bl	800f900 <_malloc_r>
 801063a:	b948      	cbnz	r0, 8010650 <__smakebuf_r+0x44>
 801063c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010640:	059a      	lsls	r2, r3, #22
 8010642:	d4ef      	bmi.n	8010624 <__smakebuf_r+0x18>
 8010644:	f023 0303 	bic.w	r3, r3, #3
 8010648:	f043 0302 	orr.w	r3, r3, #2
 801064c:	81a3      	strh	r3, [r4, #12]
 801064e:	e7e3      	b.n	8010618 <__smakebuf_r+0xc>
 8010650:	4b0d      	ldr	r3, [pc, #52]	; (8010688 <__smakebuf_r+0x7c>)
 8010652:	62b3      	str	r3, [r6, #40]	; 0x28
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	6020      	str	r0, [r4, #0]
 8010658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	9b00      	ldr	r3, [sp, #0]
 8010660:	6163      	str	r3, [r4, #20]
 8010662:	9b01      	ldr	r3, [sp, #4]
 8010664:	6120      	str	r0, [r4, #16]
 8010666:	b15b      	cbz	r3, 8010680 <__smakebuf_r+0x74>
 8010668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801066c:	4630      	mov	r0, r6
 801066e:	f000 f8d1 	bl	8010814 <_isatty_r>
 8010672:	b128      	cbz	r0, 8010680 <__smakebuf_r+0x74>
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	f023 0303 	bic.w	r3, r3, #3
 801067a:	f043 0301 	orr.w	r3, r3, #1
 801067e:	81a3      	strh	r3, [r4, #12]
 8010680:	89a0      	ldrh	r0, [r4, #12]
 8010682:	4305      	orrs	r5, r0
 8010684:	81a5      	strh	r5, [r4, #12]
 8010686:	e7cd      	b.n	8010624 <__smakebuf_r+0x18>
 8010688:	08010419 	.word	0x08010419

0801068c <_malloc_usable_size_r>:
 801068c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010690:	1f18      	subs	r0, r3, #4
 8010692:	2b00      	cmp	r3, #0
 8010694:	bfbc      	itt	lt
 8010696:	580b      	ldrlt	r3, [r1, r0]
 8010698:	18c0      	addlt	r0, r0, r3
 801069a:	4770      	bx	lr

0801069c <_raise_r>:
 801069c:	291f      	cmp	r1, #31
 801069e:	b538      	push	{r3, r4, r5, lr}
 80106a0:	4604      	mov	r4, r0
 80106a2:	460d      	mov	r5, r1
 80106a4:	d904      	bls.n	80106b0 <_raise_r+0x14>
 80106a6:	2316      	movs	r3, #22
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	f04f 30ff 	mov.w	r0, #4294967295
 80106ae:	bd38      	pop	{r3, r4, r5, pc}
 80106b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106b2:	b112      	cbz	r2, 80106ba <_raise_r+0x1e>
 80106b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106b8:	b94b      	cbnz	r3, 80106ce <_raise_r+0x32>
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 f830 	bl	8010720 <_getpid_r>
 80106c0:	462a      	mov	r2, r5
 80106c2:	4601      	mov	r1, r0
 80106c4:	4620      	mov	r0, r4
 80106c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106ca:	f000 b817 	b.w	80106fc <_kill_r>
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d00a      	beq.n	80106e8 <_raise_r+0x4c>
 80106d2:	1c59      	adds	r1, r3, #1
 80106d4:	d103      	bne.n	80106de <_raise_r+0x42>
 80106d6:	2316      	movs	r3, #22
 80106d8:	6003      	str	r3, [r0, #0]
 80106da:	2001      	movs	r0, #1
 80106dc:	e7e7      	b.n	80106ae <_raise_r+0x12>
 80106de:	2400      	movs	r4, #0
 80106e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106e4:	4628      	mov	r0, r5
 80106e6:	4798      	blx	r3
 80106e8:	2000      	movs	r0, #0
 80106ea:	e7e0      	b.n	80106ae <_raise_r+0x12>

080106ec <raise>:
 80106ec:	4b02      	ldr	r3, [pc, #8]	; (80106f8 <raise+0xc>)
 80106ee:	4601      	mov	r1, r0
 80106f0:	6818      	ldr	r0, [r3, #0]
 80106f2:	f7ff bfd3 	b.w	801069c <_raise_r>
 80106f6:	bf00      	nop
 80106f8:	24000010 	.word	0x24000010

080106fc <_kill_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d07      	ldr	r5, [pc, #28]	; (801071c <_kill_r+0x20>)
 8010700:	2300      	movs	r3, #0
 8010702:	4604      	mov	r4, r0
 8010704:	4608      	mov	r0, r1
 8010706:	4611      	mov	r1, r2
 8010708:	602b      	str	r3, [r5, #0]
 801070a:	f7f1 fa37 	bl	8001b7c <_kill>
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	d102      	bne.n	8010718 <_kill_r+0x1c>
 8010712:	682b      	ldr	r3, [r5, #0]
 8010714:	b103      	cbz	r3, 8010718 <_kill_r+0x1c>
 8010716:	6023      	str	r3, [r4, #0]
 8010718:	bd38      	pop	{r3, r4, r5, pc}
 801071a:	bf00      	nop
 801071c:	24003678 	.word	0x24003678

08010720 <_getpid_r>:
 8010720:	f7f1 ba24 	b.w	8001b6c <_getpid>

08010724 <__sread>:
 8010724:	b510      	push	{r4, lr}
 8010726:	460c      	mov	r4, r1
 8010728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801072c:	f000 f894 	bl	8010858 <_read_r>
 8010730:	2800      	cmp	r0, #0
 8010732:	bfab      	itete	ge
 8010734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010736:	89a3      	ldrhlt	r3, [r4, #12]
 8010738:	181b      	addge	r3, r3, r0
 801073a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801073e:	bfac      	ite	ge
 8010740:	6563      	strge	r3, [r4, #84]	; 0x54
 8010742:	81a3      	strhlt	r3, [r4, #12]
 8010744:	bd10      	pop	{r4, pc}

08010746 <__swrite>:
 8010746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074a:	461f      	mov	r7, r3
 801074c:	898b      	ldrh	r3, [r1, #12]
 801074e:	05db      	lsls	r3, r3, #23
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	4616      	mov	r6, r2
 8010756:	d505      	bpl.n	8010764 <__swrite+0x1e>
 8010758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801075c:	2302      	movs	r3, #2
 801075e:	2200      	movs	r2, #0
 8010760:	f000 f868 	bl	8010834 <_lseek_r>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801076a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801076e:	81a3      	strh	r3, [r4, #12]
 8010770:	4632      	mov	r2, r6
 8010772:	463b      	mov	r3, r7
 8010774:	4628      	mov	r0, r5
 8010776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801077a:	f000 b817 	b.w	80107ac <_write_r>

0801077e <__sseek>:
 801077e:	b510      	push	{r4, lr}
 8010780:	460c      	mov	r4, r1
 8010782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010786:	f000 f855 	bl	8010834 <_lseek_r>
 801078a:	1c43      	adds	r3, r0, #1
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	bf15      	itete	ne
 8010790:	6560      	strne	r0, [r4, #84]	; 0x54
 8010792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801079a:	81a3      	strheq	r3, [r4, #12]
 801079c:	bf18      	it	ne
 801079e:	81a3      	strhne	r3, [r4, #12]
 80107a0:	bd10      	pop	{r4, pc}

080107a2 <__sclose>:
 80107a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a6:	f000 b813 	b.w	80107d0 <_close_r>
	...

080107ac <_write_r>:
 80107ac:	b538      	push	{r3, r4, r5, lr}
 80107ae:	4d07      	ldr	r5, [pc, #28]	; (80107cc <_write_r+0x20>)
 80107b0:	4604      	mov	r4, r0
 80107b2:	4608      	mov	r0, r1
 80107b4:	4611      	mov	r1, r2
 80107b6:	2200      	movs	r2, #0
 80107b8:	602a      	str	r2, [r5, #0]
 80107ba:	461a      	mov	r2, r3
 80107bc:	f7f1 fa15 	bl	8001bea <_write>
 80107c0:	1c43      	adds	r3, r0, #1
 80107c2:	d102      	bne.n	80107ca <_write_r+0x1e>
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	b103      	cbz	r3, 80107ca <_write_r+0x1e>
 80107c8:	6023      	str	r3, [r4, #0]
 80107ca:	bd38      	pop	{r3, r4, r5, pc}
 80107cc:	24003678 	.word	0x24003678

080107d0 <_close_r>:
 80107d0:	b538      	push	{r3, r4, r5, lr}
 80107d2:	4d06      	ldr	r5, [pc, #24]	; (80107ec <_close_r+0x1c>)
 80107d4:	2300      	movs	r3, #0
 80107d6:	4604      	mov	r4, r0
 80107d8:	4608      	mov	r0, r1
 80107da:	602b      	str	r3, [r5, #0]
 80107dc:	f7f1 fa21 	bl	8001c22 <_close>
 80107e0:	1c43      	adds	r3, r0, #1
 80107e2:	d102      	bne.n	80107ea <_close_r+0x1a>
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	b103      	cbz	r3, 80107ea <_close_r+0x1a>
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	bd38      	pop	{r3, r4, r5, pc}
 80107ec:	24003678 	.word	0x24003678

080107f0 <_fstat_r>:
 80107f0:	b538      	push	{r3, r4, r5, lr}
 80107f2:	4d07      	ldr	r5, [pc, #28]	; (8010810 <_fstat_r+0x20>)
 80107f4:	2300      	movs	r3, #0
 80107f6:	4604      	mov	r4, r0
 80107f8:	4608      	mov	r0, r1
 80107fa:	4611      	mov	r1, r2
 80107fc:	602b      	str	r3, [r5, #0]
 80107fe:	f7f1 fa1c 	bl	8001c3a <_fstat>
 8010802:	1c43      	adds	r3, r0, #1
 8010804:	d102      	bne.n	801080c <_fstat_r+0x1c>
 8010806:	682b      	ldr	r3, [r5, #0]
 8010808:	b103      	cbz	r3, 801080c <_fstat_r+0x1c>
 801080a:	6023      	str	r3, [r4, #0]
 801080c:	bd38      	pop	{r3, r4, r5, pc}
 801080e:	bf00      	nop
 8010810:	24003678 	.word	0x24003678

08010814 <_isatty_r>:
 8010814:	b538      	push	{r3, r4, r5, lr}
 8010816:	4d06      	ldr	r5, [pc, #24]	; (8010830 <_isatty_r+0x1c>)
 8010818:	2300      	movs	r3, #0
 801081a:	4604      	mov	r4, r0
 801081c:	4608      	mov	r0, r1
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	f7f1 fa1b 	bl	8001c5a <_isatty>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d102      	bne.n	801082e <_isatty_r+0x1a>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	b103      	cbz	r3, 801082e <_isatty_r+0x1a>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	24003678 	.word	0x24003678

08010834 <_lseek_r>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	4d07      	ldr	r5, [pc, #28]	; (8010854 <_lseek_r+0x20>)
 8010838:	4604      	mov	r4, r0
 801083a:	4608      	mov	r0, r1
 801083c:	4611      	mov	r1, r2
 801083e:	2200      	movs	r2, #0
 8010840:	602a      	str	r2, [r5, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	f7f1 fa14 	bl	8001c70 <_lseek>
 8010848:	1c43      	adds	r3, r0, #1
 801084a:	d102      	bne.n	8010852 <_lseek_r+0x1e>
 801084c:	682b      	ldr	r3, [r5, #0]
 801084e:	b103      	cbz	r3, 8010852 <_lseek_r+0x1e>
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	24003678 	.word	0x24003678

08010858 <_read_r>:
 8010858:	b538      	push	{r3, r4, r5, lr}
 801085a:	4d07      	ldr	r5, [pc, #28]	; (8010878 <_read_r+0x20>)
 801085c:	4604      	mov	r4, r0
 801085e:	4608      	mov	r0, r1
 8010860:	4611      	mov	r1, r2
 8010862:	2200      	movs	r2, #0
 8010864:	602a      	str	r2, [r5, #0]
 8010866:	461a      	mov	r2, r3
 8010868:	f7f1 f9a2 	bl	8001bb0 <_read>
 801086c:	1c43      	adds	r3, r0, #1
 801086e:	d102      	bne.n	8010876 <_read_r+0x1e>
 8010870:	682b      	ldr	r3, [r5, #0]
 8010872:	b103      	cbz	r3, 8010876 <_read_r+0x1e>
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	bd38      	pop	{r3, r4, r5, pc}
 8010878:	24003678 	.word	0x24003678

0801087c <_init>:
 801087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801087e:	bf00      	nop
 8010880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010882:	bc08      	pop	{r3}
 8010884:	469e      	mov	lr, r3
 8010886:	4770      	bx	lr

08010888 <_fini>:
 8010888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088a:	bf00      	nop
 801088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801088e:	bc08      	pop	{r3}
 8010890:	469e      	mov	lr, r3
 8010892:	4770      	bx	lr
