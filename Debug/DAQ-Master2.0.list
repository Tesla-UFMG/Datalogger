
DAQ-Master2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080061a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  24000010  080061b4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000218  080061b4  00020218  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e193  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002db0  00000000  00000000  0003e1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e88  00000000  00000000  00040f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000db0  00000000  00000000  00041e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003676d  00000000  00000000  00042bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001054f  00000000  00000000  0007932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e1e7  00000000  00000000  0008987c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e7a63  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d78  00000000  00000000  001e7ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080060e8 	.word	0x080060e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080060e8 	.word	0x080060e8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	68f8      	ldr	r0, [r7, #12]
 80005e0:	f001 f868 	bl	80016b4 <HAL_FDCAN_RegisterRxFifo0Callback>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80005ea:	f000 fa4d 	bl	8000a88 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f001 f890 	bl	8001714 <HAL_FDCAN_Start>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 80005fa:	f000 fa45 	bl	8000a88 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f001 fa7a 	bl	8001afc <HAL_FDCAN_ActivateNotification>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 800060e:	f000 fa3b 	bl	8000a88 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000624:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <can_transmit>:


//função que realiza a transmissão da mensagem
void can_transmit(FDCAN_HandleTypeDef* hfdcan, FDCAN_TxHeaderTypeDef* TxHeader, uint32_t id, uint16_t* data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
	TxHeader->Identifier = id;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]
	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, TxHeader, (uint8_t*)data) != HAL_OK) {
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	68b9      	ldr	r1, [r7, #8]
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f001 f880 	bl	800176a <HAL_FDCAN_AddMessageToTxFifoQ>
		//deu ruim
		//TODO: tratar quando falhar envio de mensagem de can ao inversor
	}
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <init_CAN+0x10>)
 800067a:	f000 f805 	bl	8000688 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000090 	.word	0x24000090

08000688 <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <initialize_general_CAN+0x24>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <initialize_general_CAN+0x24>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <initialize_general_CAN+0x28>)
 800069c:	4905      	ldr	r1, [pc, #20]	; (80006b4 <initialize_general_CAN+0x2c>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff96 	bl	80005d0 <initialize_CAN>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2400002c 	.word	0x2400002c
 80006b0:	24000030 	.word	0x24000030
 80006b4:	080006e1 	.word	0x080006e1

080006b8 <general_can_transmit>:



//função usada para transmitir alguma mensagem
void general_can_transmit(uint32_t id, uint16_t* data) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	can_transmit(can_ptr, &TxHeader, id, data);
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <general_can_transmit+0x20>)
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4904      	ldr	r1, [pc, #16]	; (80006dc <general_can_transmit+0x24>)
 80006cc:	f7ff ffbe 	bl	800064c <can_transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2400002c 	.word	0x2400002c
 80006dc:	24000030 	.word	0x24000030

080006e0 <CAN_general_receive_callback>:



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d038      	beq.n	8000766 <CAN_general_receive_callback+0x86>
	//	GPIOD->ODR &= ~ (1<<6); //reseta o pino PD6
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <CAN_general_receive_callback+0x90>)
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <CAN_general_receive_callback+0x94>)
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f001 f890 	bl	8001820 <HAL_FDCAN_GetRxMessage>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <CAN_general_receive_callback+0x2a>
			/* Reception Error */
			Error_Handler();
 8000706:	f000 f9bf 	bl	8000a88 <Error_Handler>

		//TESTAR HABILITAR SÓ UMA DAS INTERRUPÇÕES NO .IOC

		//TENTAR SETAR A LED APAGADA ANTES DA MAIN, USANDO REGISTRADOR E A LÓGICA INVERTIDA DO CÓDIGO DO LAB 2 DE EMBUTIDOS

		idgeneral = RxHeader.Identifier;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <CAN_general_receive_callback+0x94>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <CAN_general_receive_callback+0x98>)
 8000710:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e019      	b.n	800074c <CAN_general_receive_callback+0x6c>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <CAN_general_receive_callback+0x90>)
 800071e:	5cd3      	ldrb	r3, [r2, r3]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	b219      	sxth	r1, r3
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <CAN_general_receive_callback+0x90>)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b21a      	sxth	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	da00      	bge.n	8000736 <CAN_general_receive_callback+0x56>
 8000734:	3301      	adds	r3, #1
 8000736:	105b      	asrs	r3, r3, #1
 8000738:	4618      	mov	r0, r3
 800073a:	ea41 0302 	orr.w	r3, r1, r2
 800073e:	b21a      	sxth	r2, r3
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <CAN_general_receive_callback+0x9c>)
 8000742:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3302      	adds	r3, #2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b07      	cmp	r3, #7
 8000750:	dde2      	ble.n	8000718 <CAN_general_receive_callback+0x38>
		}
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000752:	2200      	movs	r2, #0
 8000754:	2101      	movs	r1, #1
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f001 f9d0 	bl	8001afc <HAL_FDCAN_ActivateNotification>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <CAN_general_receive_callback+0x86>
			/* Notification Error */
			Error_Handler();
 8000762:	f000 f991 	bl	8000a88 <Error_Handler>
		}
	}
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	24000060 	.word	0x24000060
 8000774:	24000068 	.word	0x24000068
 8000778:	24000054 	.word	0x24000054
 800077c:	24000058 	.word	0x24000058

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fb6d 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f81b 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f943 	bl	8000a18 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000792:	f000 f891 	bl	80008b8 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000796:	f000 f8f3 	bl	8000980 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  init_CAN();
 800079a:	f7ff ff6b 	bl	8000674 <init_CAN>

  uint16_t vet_tx[4]={0,0,0,0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  uint16_t id = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	81fb      	strh	r3, [r7, #14]


  while (1)
  {
    /* USER CODE END WHILE */
	  id++;
 80007aa:	89fb      	ldrh	r3, [r7, #14]
 80007ac:	3301      	adds	r3, #1
 80007ae:	81fb      	strh	r3, [r7, #14]
	  general_can_transmit(id, vet_tx);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff7e 	bl	80006b8 <general_can_transmit>
	  HAL_Delay(50);
 80007bc:	2032      	movs	r0, #50	; 0x32
 80007be:	f000 fbe3 	bl	8000f88 <HAL_Delay>
	  id++;
 80007c2:	e7f2      	b.n	80007aa <main+0x2a>

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	; 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	224c      	movs	r2, #76	; 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 fc80 	bl	80060d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fc7a 	bl	80060d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f002 f8ed 	bl	80029c4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <SystemClock_Config+0xec>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <SystemClock_Config+0xec>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <SystemClock_Config+0xec>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <SystemClock_Config+0xf0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <SystemClock_Config+0xf0>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <SystemClock_Config+0xf0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <SystemClock_Config+0xf0>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084a:	2304      	movs	r3, #4
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f8e8 	bl	8002a38 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086e:	f000 f90b 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087e:	2308      	movs	r3, #8
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2102      	movs	r1, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fcdd 	bl	8003258 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008a4:	f000 f8f0 	bl	8000a88 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	; 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <MX_FDCAN1_Init+0xc4>)
 80008c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008da:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008ee:	220d      	movs	r2, #13
 80008f0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000900:	2202      	movs	r2, #2
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000906:	220d      	movs	r2, #13
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 800090c:	2202      	movs	r2, #2
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000924:	2220      	movs	r2, #32
 8000926:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 800092a:	2204      	movs	r2, #4
 800092c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000930:	2220      	movs	r2, #32
 8000932:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000936:	2204      	movs	r2, #4
 8000938:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 800093c:	2220      	movs	r2, #32
 800093e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000942:	2204      	movs	r2, #4
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000948:	2220      	movs	r2, #32
 800094a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 800094e:	2220      	movs	r2, #32
 8000950:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000954:	2220      	movs	r2, #32
 8000956:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000960:	2204      	movs	r2, #4
 8000962:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_FDCAN1_Init+0xc0>)
 8000966:	f000 fc4f 	bl	8001208 <HAL_FDCAN_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000970:	f000 f88a 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000090 	.word	0x24000090
 800097c:	4000a000 	.word	0x4000a000

08000980 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_UART4_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_UART4_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_UART4_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_UART4_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_UART4_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_UART4_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_UART4_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_UART4_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_UART4_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_UART4_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_UART4_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_UART4_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_UART4_Init+0x90>)
 80009ca:	f004 fb33 	bl	8005034 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f858 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_UART4_Init+0x90>)
 80009dc:	f005 fa80 	bl	8005ee0 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f84f 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_UART4_Init+0x90>)
 80009ee:	f005 fab5 	bl	8005f5c <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f846 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_UART4_Init+0x90>)
 80009fe:	f005 fa36 	bl	8005e6e <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f83e 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000184 	.word	0x24000184
 8000a14:	40004c00 	.word	0x40004c00

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_GPIO_Init+0x6c>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	58024400 	.word	0x58024400

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_MspInit+0x30>)
 8000a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x30>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x30>)
 8000aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b8      	sub	sp, #224	; 0xe0
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	22bc      	movs	r2, #188	; 0xbc
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 faf5 	bl	80060d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <HAL_FDCAN_MspInit+0xe0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d152      	bne.n	8000b9e <HAL_FDCAN_MspInit+0xd6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000afc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 ff32 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_FDCAN_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff ffb9 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_FDCAN_MspInit+0xe4>)
 8000b18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b1c:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_FDCAN_MspInit+0xe4>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_FDCAN_MspInit+0xe4>)
 8000b28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_FDCAN_MspInit+0xe4>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_FDCAN_MspInit+0xe4>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_FDCAN_MspInit+0xe4>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b6c:	2309      	movs	r3, #9
 8000b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b76:	4619      	mov	r1, r3
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <HAL_FDCAN_MspInit+0xe8>)
 8000b7a:	f001 fd73 	bl	8002664 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2013      	movs	r0, #19
 8000b84:	f000 fb0b 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b88:	2013      	movs	r0, #19
 8000b8a:	f000 fb22 	bl	80011d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2015      	movs	r0, #21
 8000b94:	f000 fb03 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000b98:	2015      	movs	r0, #21
 8000b9a:	f000 fb1a 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	37e0      	adds	r7, #224	; 0xe0
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	4000a000 	.word	0x4000a000
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58020400 	.word	0x58020400

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0b8      	sub	sp, #224	; 0xe0
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	22bc      	movs	r2, #188	; 0xbc
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f005 fa7f 	bl	80060d8 <memset>
  if(huart->Instance==UART4)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <HAL_UART_MspInit+0xbc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d141      	bne.n	8000c68 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 febc 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bfe:	f7ff ff43 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_UART_MspInit+0xc0>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0xc0>)
 8000c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0xc0>)
 8000c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0xc0>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_UART_MspInit+0xc0>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_UART_MspInit+0xc0>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c56:	2308      	movs	r3, #8
 8000c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0xc4>)
 8000c64:	f001 fcfe 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	37e0      	adds	r7, #224	; 0xe0
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40004c00 	.word	0x40004c00
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020000 	.word	0x58020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f93e 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000cd6:	f000 ff8b 	bl	8001bf0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000090 	.word	0x24000090

08000ce4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <FDCAN1_IT1_IRQHandler+0x10>)
 8000cea:	f000 ff81 	bl	8001bf0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000090 	.word	0x24000090

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <SystemInit+0xec>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a38      	ldr	r2, [pc, #224]	; (8000de4 <SystemInit+0xec>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <SystemInit+0xf0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	2b06      	cmp	r3, #6
 8000d16:	d807      	bhi.n	8000d28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <SystemInit+0xf0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 030f 	bic.w	r3, r3, #15
 8000d20:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <SystemInit+0xf0>)
 8000d22:	f043 0307 	orr.w	r3, r3, #7
 8000d26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <SystemInit+0xf4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <SystemInit+0xf4>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <SystemInit+0xf4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <SystemInit+0xf4>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	492b      	ldr	r1, [pc, #172]	; (8000dec <SystemInit+0xf4>)
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <SystemInit+0xf8>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <SystemInit+0xf0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <SystemInit+0xf0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 030f 	bic.w	r3, r3, #15
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <SystemInit+0xf0>)
 8000d5c:	f043 0307 	orr.w	r3, r3, #7
 8000d60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <SystemInit+0xf4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <SystemInit+0xf4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <SystemInit+0xf4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <SystemInit+0xf4>)
 8000d76:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <SystemInit+0xfc>)
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <SystemInit+0xf4>)
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <SystemInit+0x100>)
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <SystemInit+0xf4>)
 8000d82:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <SystemInit+0x104>)
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <SystemInit+0xf4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <SystemInit+0xf4>)
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <SystemInit+0x104>)
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <SystemInit+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <SystemInit+0xf4>)
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <SystemInit+0x104>)
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <SystemInit+0xf4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <SystemInit+0xf4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a10      	ldr	r2, [pc, #64]	; (8000dec <SystemInit+0xf4>)
 8000daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <SystemInit+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <SystemInit+0x108>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <SystemInit+0x10c>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dc2:	d202      	bcs.n	8000dca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <SystemInit+0x110>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <SystemInit+0x114>)
 8000dcc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dd0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SystemInit+0xec>)
 8000dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	52002000 	.word	0x52002000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000df4:	02020200 	.word	0x02020200
 8000df8:	01ff0000 	.word	0x01ff0000
 8000dfc:	01010280 	.word	0x01010280
 8000e00:	5c001000 	.word	0x5c001000
 8000e04:	ffff0000 	.word	0xffff0000
 8000e08:	51008108 	.word	0x51008108
 8000e0c:	52004000 	.word	0x52004000

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e14:	f7ff ff70 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	; (8000e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f005 f919 	bl	8006074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fc9d 	bl	8000780 <main>
  bx  lr
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e50:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e54:	080061a4 	.word	0x080061a4
  ldr r2, =_sbss
 8000e58:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e5c:	24000218 	.word	0x24000218

08000e60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC3_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f98c 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e70:	f002 fba8 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_Init+0x68>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	f003 030f 	and.w	r3, r3, #15
 8000e80:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <HAL_Init+0x6c>)
 8000e82:	5ccb      	ldrb	r3, [r1, r3]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_Init+0x68>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_Init+0x6c>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_Init+0x70>)
 8000ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_Init+0x74>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f814 	bl	8000edc <HAL_InitTick>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e002      	b.n	8000ec4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebe:	f7ff fde9 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	0800614c 	.word	0x0800614c
 8000ed4:	24000004 	.word	0x24000004
 8000ed8:	24000000 	.word	0x24000000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_InitTick+0x60>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e021      	b.n	8000f34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_InitTick+0x64>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_InitTick+0x60>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f971 	bl	80011ee <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f93b 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x68>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2400000c 	.word	0x2400000c
 8000f40:	24000000 	.word	0x24000000
 8000f44:	24000008 	.word	0x24000008

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2400000c 	.word	0x2400000c
 8000f6c:	24000214 	.word	0x24000214

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	24000214 	.word	0x24000214

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2400000c 	.word	0x2400000c

08000fd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetREVID+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0c1b      	lsrs	r3, r3, #16
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	5c001000 	.word	0x5c001000

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	4313      	orrs	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	05fa0000 	.word	0x05fa0000

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff40 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff90 	bl	80010dc <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5f 	bl	8001088 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff33 	bl	800104c <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa4 	bl	8001144 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b098      	sub	sp, #96	; 0x60
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001210:	4a99      	ldr	r2, [pc, #612]	; (8001478 <HAL_FDCAN_Init+0x270>)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	224c      	movs	r2, #76	; 0x4c
 800121a:	4618      	mov	r0, r3
 800121c:	f004 ff4e 	bl	80060bc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e23d      	b.n	80016a6 <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a93      	ldr	r2, [pc, #588]	; (800147c <HAL_FDCAN_Init+0x274>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d106      	bne.n	8001242 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d155      	bne.n	80012fa <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a89      	ldr	r2, [pc, #548]	; (8001480 <HAL_FDCAN_Init+0x278>)
 800125a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a88      	ldr	r2, [pc, #544]	; (8001484 <HAL_FDCAN_Init+0x27c>)
 8001262:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a87      	ldr	r2, [pc, #540]	; (8001488 <HAL_FDCAN_Init+0x280>)
 800126a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a86      	ldr	r2, [pc, #536]	; (800148c <HAL_FDCAN_Init+0x284>)
 8001272:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a85      	ldr	r2, [pc, #532]	; (8001490 <HAL_FDCAN_Init+0x288>)
 800127a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a84      	ldr	r2, [pc, #528]	; (8001494 <HAL_FDCAN_Init+0x28c>)
 8001282:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a83      	ldr	r2, [pc, #524]	; (8001498 <HAL_FDCAN_Init+0x290>)
 800128a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a82      	ldr	r2, [pc, #520]	; (800149c <HAL_FDCAN_Init+0x294>)
 8001292:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a81      	ldr	r2, [pc, #516]	; (80014a0 <HAL_FDCAN_Init+0x298>)
 800129a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a80      	ldr	r2, [pc, #512]	; (80014a4 <HAL_FDCAN_Init+0x29c>)
 80012a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a7f      	ldr	r2, [pc, #508]	; (80014a8 <HAL_FDCAN_Init+0x2a0>)
 80012aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a7e      	ldr	r2, [pc, #504]	; (80014ac <HAL_FDCAN_Init+0x2a4>)
 80012b2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a7d      	ldr	r2, [pc, #500]	; (80014b0 <HAL_FDCAN_Init+0x2a8>)
 80012ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a7c      	ldr	r2, [pc, #496]	; (80014b4 <HAL_FDCAN_Init+0x2ac>)
 80012c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a7b      	ldr	r2, [pc, #492]	; (80014b8 <HAL_FDCAN_Init+0x2b0>)
 80012ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a7a      	ldr	r2, [pc, #488]	; (80014bc <HAL_FDCAN_Init+0x2b4>)
 80012d2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a79      	ldr	r2, [pc, #484]	; (80014c0 <HAL_FDCAN_Init+0x2b8>)
 80012da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a76      	ldr	r2, [pc, #472]	; (80014c4 <HAL_FDCAN_Init+0x2bc>)
 80012ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0210 	bic.w	r2, r2, #16
 8001308:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130a:	f7ff fe31 	bl	8000f70 <HAL_GetTick>
 800130e:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001310:	e014      	b.n	800133c <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001312:	f7ff fe2d 	bl	8000f70 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d90d      	bls.n	800133c <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e1b4      	b.n	80016a6 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b08      	cmp	r3, #8
 8001348:	d0e3      	beq.n	8001312 <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135a:	f7ff fe09 	bl	8000f70 <HAL_GetTick>
 800135e:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001360:	e014      	b.n	800138c <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001362:	f7ff fe05 	bl	8000f70 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b0a      	cmp	r3, #10
 800136e:	d90d      	bls.n	800138c <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e18c      	b.n	80016a6 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0e3      	beq.n	8001362 <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0202 	orr.w	r2, r2, #2
 80013a8:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7c1b      	ldrb	r3, [r3, #16]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c0:	619a      	str	r2, [r3, #24]
 80013c2:	e007      	b.n	80013d4 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699a      	ldr	r2, [r3, #24]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7c5b      	ldrb	r3, [r3, #17]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d108      	bne.n	80013ee <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013ea:	619a      	str	r2, [r3, #24]
 80013ec:	e007      	b.n	80013fe <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7c9b      	ldrb	r3, [r3, #18]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001414:	619a      	str	r2, [r3, #24]
 8001416:	e007      	b.n	8001428 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001426:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800144c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d130      	bne.n	80014c8 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0204 	orr.w	r2, r2, #4
 8001474:	619a      	str	r2, [r3, #24]
 8001476:	e054      	b.n	8001522 <HAL_FDCAN_Init+0x31a>
 8001478:	08006100 	.word	0x08006100
 800147c:	4000a000 	.word	0x4000a000
 8001480:	080020f1 	.word	0x080020f1
 8001484:	08002107 	.word	0x08002107
 8001488:	0800211d 	.word	0x0800211d
 800148c:	08002133 	.word	0x08002133
 8001490:	08002149 	.word	0x08002149
 8001494:	0800215d 	.word	0x0800215d
 8001498:	08002173 	.word	0x08002173
 800149c:	08002189 	.word	0x08002189
 80014a0:	080021c5 	.word	0x080021c5
 80014a4:	0800219d 	.word	0x0800219d
 80014a8:	080021b1 	.word	0x080021b1
 80014ac:	080021d9 	.word	0x080021d9
 80014b0:	080021ed 	.word	0x080021ed
 80014b4:	08002203 	.word	0x08002203
 80014b8:	08002219 	.word	0x08002219
 80014bc:	0800222f 	.word	0x0800222f
 80014c0:	08002247 	.word	0x08002247
 80014c4:	08000ac9 	.word	0x08000ac9
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d028      	beq.n	8001522 <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d01c      	beq.n	8001512 <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014e6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0210 	orr.w	r2, r2, #16
 80014f6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d110      	bne.n	8001522 <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0220 	orr.w	r2, r2, #32
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	e007      	b.n	8001522 <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699a      	ldr	r2, [r3, #24]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	3b01      	subs	r3, #1
 8001528:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	3b01      	subs	r3, #1
 8001530:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001532:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800153a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	3b01      	subs	r3, #1
 8001544:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800154a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800154c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001556:	d115      	bne.n	8001584 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	3b01      	subs	r3, #1
 8001564:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001566:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	3b01      	subs	r3, #1
 800156e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001570:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	3b01      	subs	r3, #1
 800157a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001580:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001582:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00a      	beq.n	80015a2 <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	4413      	add	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d012      	beq.n	80015d6 <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015b8:	f023 0107 	bic.w	r1, r3, #7
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015c6:	4413      	add	r3, r2
 80015c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d012      	beq.n	8001604 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80015e6:	f023 0107 	bic.w	r1, r3, #7
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015f4:	4413      	add	r3, r2
 80015f6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001614:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001622:	4413      	add	r3, r2
 8001624:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001628:	011a      	lsls	r2, r3, #4
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001644:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001652:	4413      	add	r3, r2
 8001654:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001658:	021a      	lsls	r2, r3, #8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_FDCAN_Init+0x4a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d107      	bne.n	800167e <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f022 0203 	bic.w	r2, r2, #3
 800167c:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fde0 	bl	800225c <FDCAN_CalcultateRamBlockAddresses>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80016a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3760      	adds	r7, #96	; 0x60
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	4000a000 	.word	0x4000a000

080016b4 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e015      	b.n	8001708 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d104      	bne.n	80016f2 <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80016f0:	e009      	b.n	8001706 <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d111      	bne.n	800174c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e008      	b.n	800175e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001752:	f043 0204 	orr.w	r2, r3, #4
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800178a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e038      	b.n	8001818 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e026      	b.n	8001818 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fec1 	bl	8002568 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2101      	movs	r1, #1
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e008      	b.n	8001818 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800180c:	f043 0208 	orr.w	r2, r3, #8
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	; 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001838:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800183a:	7efb      	ldrb	r3, [r7, #27]
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 814b 	bne.w	8001ad8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b40      	cmp	r3, #64	; 0x40
 8001846:	d14d      	bne.n	80018e4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001850:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800185e:	f043 0220 	orr.w	r2, r3, #32
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e13e      	b.n	8001aea <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001882:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e12c      	b.n	8001aea <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001898:	0e1b      	lsrs	r3, r3, #24
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10b      	bne.n	80018ba <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018aa:	0fdb      	lsrs	r3, r3, #31
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018b4:	d101      	bne.n	80018ba <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	69f9      	ldr	r1, [r7, #28]
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	e069      	b.n	80019b8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b41      	cmp	r3, #65	; 0x41
 80018e8:	d14d      	bne.n	8001986 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0ed      	b.n	8001aea <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001924:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0db      	b.n	8001aea <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800193a:	0e1b      	lsrs	r3, r3, #24
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10b      	bne.n	800195c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800194c:	0fdb      	lsrs	r3, r3, #31
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001956:	d101      	bne.n	800195c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001958:	2301      	movs	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	69f9      	ldr	r1, [r7, #28]
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	e018      	b.n	80019b8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	429a      	cmp	r2, r3
 800198e:	d309      	bcc.n	80019a4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001996:	f043 0220 	orr.w	r2, r3, #32
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0a2      	b.n	8001aea <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d107      	bne.n	80019dc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0c9b      	lsrs	r3, r3, #18
 80019d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e005      	b.n	80019e8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	3304      	adds	r3, #4
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0e1b      	lsrs	r3, r3, #24
 8001a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0fda      	lsrs	r2, r3, #31
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3304      	adds	r3, #4
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	e00a      	b.n	8001a72 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	441a      	add	r2, r3
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	440b      	add	r3, r1
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d3eb      	bcc.n	8001a5c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d105      	bne.n	8001a96 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001a94:	e01e      	b.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b41      	cmp	r3, #65	; 0x41
 8001a9a:	d105      	bne.n	8001aa8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001aa6:	e015      	b.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b1f      	cmp	r3, #31
 8001aac:	d808      	bhi.n	8001ac0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001abe:	e009      	b.n	8001ad4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e008      	b.n	8001aea <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ade:	f043 0208 	orr.w	r2, r3, #8
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	372c      	adds	r7, #44	; 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	0800615c 	.word	0x0800615c

08001afc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b0e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d002      	beq.n	8001b1c <HAL_FDCAN_ActivateNotification+0x20>
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d155      	bne.n	8001bc8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b3a:	e014      	b.n	8001b66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d108      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0202 	orr.w	r2, r2, #2
 8001b5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b5c:	e003      	b.n	8001b66 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2203      	movs	r2, #3
 8001b64:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_FDCAN_ActivateNotification+0xec>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	6553      	str	r3, [r2, #84]	; 0x54
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_FDCAN_ActivateNotification+0xf0>)
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	0f9b      	lsrs	r3, r3, #30
 8001bbe:	490b      	ldr	r1, [pc, #44]	; (8001bec <HAL_FDCAN_ActivateNotification+0xf0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e008      	b.n	8001bda <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bce:	f043 0202 	orr.w	r2, r3, #2
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	3fcfffff 	.word	0x3fcfffff
 8001bec:	4000a800 	.word	0x4000a800

08001bf0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b092      	sub	sp, #72	; 0x48
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001bf8:	4b98      	ldr	r3, [pc, #608]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	079b      	lsls	r3, r3, #30
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001c00:	4b96      	ldr	r3, [pc, #600]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	079b      	lsls	r3, r3, #30
 8001c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c08:	4013      	ands	r3, r2
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c20:	4013      	ands	r3, r2
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c38:	4013      	ands	r3, r2
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c50:	4013      	ands	r3, r2
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c68:	4013      	ands	r3, r2
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c72:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c80:	4013      	ands	r3, r2
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d013      	beq.n	8001cba <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00c      	beq.n	8001cba <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca8:	651a      	str	r2, [r3, #80]	; 0x50
 8001caa:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d019      	beq.n	8001d0a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	4013      	ands	r3, r2
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf8:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001d04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00f      	beq.n	8001d30 <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <HAL_FDCAN_IRQHandler+0x270>)
 8001d18:	400b      	ands	r3, r1
 8001d1a:	6513      	str	r3, [r2, #80]	; 0x50
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d20:	0f9b      	lsrs	r3, r3, #30
 8001d22:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00f      	beq.n	8001d56 <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d3c:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_FDCAN_IRQHandler+0x270>)
 8001d3e:	400b      	ands	r3, r1
 8001d40:	6513      	str	r3, [r2, #80]	; 0x50
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d46:	0f9b      	lsrs	r3, r3, #30
 8001d48:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00f      	beq.n	8001d7c <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_FDCAN_IRQHandler+0x270>)
 8001d64:	400b      	ands	r3, r1
 8001d66:	6513      	str	r3, [r2, #80]	; 0x50
 8001d68:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6c:	0f9b      	lsrs	r3, r3, #30
 8001d6e:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00f      	beq.n	8001da2 <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_FDCAN_IRQHandler+0x270>)
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	6513      	str	r3, [r2, #80]	; 0x50
 8001d8e:	4a33      	ldr	r2, [pc, #204]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d92:	0f9b      	lsrs	r3, r3, #30
 8001d94:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc6:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d020      	beq.n	8001e28 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d019      	beq.n	8001e28 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e08:	4013      	ands	r3, r2
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d018      	beq.n	8001e68 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d011      	beq.n	8001e68 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_FDCAN_IRQHandler+0x26c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001e5a:	e003      	b.n	8001e64 <HAL_FDCAN_IRQHandler+0x274>
 8001e5c:	4000a800 	.word	0x4000a800
 8001e60:	3fcfffff 	.word	0x3fcfffff
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d013      	beq.n	8001e9e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001e8e:	4b95      	ldr	r3, [pc, #596]	; (80020e4 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ec4:	4b87      	ldr	r3, [pc, #540]	; (80020e4 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00f      	beq.n	8001f10 <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8001efa:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00f      	beq.n	8001f36 <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f1c:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_FDCAN_IRQHandler+0x4f8>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	6513      	str	r3, [r2, #80]	; 0x50
 8001f22:	4a70      	ldr	r2, [pc, #448]	; (80020e4 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f26:	0f9b      	lsrs	r3, r3, #30
 8001f28:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d011      	beq.n	8001f60 <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f42:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_FDCAN_IRQHandler+0x4f8>)
 8001f44:	400b      	ands	r3, r1
 8001f46:	6513      	str	r3, [r2, #80]	; 0x50
 8001f48:	4a66      	ldr	r2, [pc, #408]	; (80020e4 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4c:	0f9b      	lsrs	r3, r3, #30
 8001f4e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a61      	ldr	r2, [pc, #388]	; (80020ec <HAL_FDCAN_IRQHandler+0x4fc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	f040 80ae 	bne.w	80020c8 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80a6 	beq.w	80020c8 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f90:	4013      	ands	r3, r2
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f9e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	6a3a      	ldr	r2, [r7, #32]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001fb6:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001fce:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001fe6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01d      	beq.n	8002072 <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d016      	beq.n	8002072 <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	b29b      	uxth	r3, r3
 800204e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800205a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6939      	ldr	r1, [r7, #16]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002086:	69f9      	ldr	r1, [r7, #28]
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80020dc:	bf00      	nop
 80020de:	3748      	adds	r7, #72	; 0x48
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	4000a800 	.word	0x4000a800
 80020e8:	3fcfffff 	.word	0x3fcfffff
 80020ec:	4000a000 	.word	0x4000a000

080020f0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002272:	4ba7      	ldr	r3, [pc, #668]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002274:	4013      	ands	r3, r2
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	0091      	lsls	r1, r2, #2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	430b      	orrs	r3, r1
 8002280:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	4413      	add	r3, r2
 80022a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b2:	4b97      	ldr	r3, [pc, #604]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	0091      	lsls	r1, r2, #2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	430b      	orrs	r3, r1
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80022f4:	4b86      	ldr	r3, [pc, #536]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	0091      	lsls	r1, r2, #2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	430b      	orrs	r3, r1
 8002302:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800230e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800233c:	4b74      	ldr	r3, [pc, #464]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800233e:	4013      	ands	r3, r2
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	0091      	lsls	r1, r2, #2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002356:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	041a      	lsls	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	4413      	add	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002384:	4b62      	ldr	r3, [pc, #392]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002386:	4013      	ands	r3, r2
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	0091      	lsls	r1, r2, #2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80023b0:	4b57      	ldr	r3, [pc, #348]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	0091      	lsls	r1, r2, #2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	041a      	lsls	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	4413      	add	r3, r2
 80023e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	0091      	lsls	r1, r2, #2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	430b      	orrs	r3, r1
 8002400:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800240c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002428:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	061a      	lsls	r2, r3, #24
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002442:	4413      	add	r3, r2
 8002444:	009a      	lsls	r2, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	441a      	add	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d915      	bls.n	8002538 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800250c:	e006      	b.n	800251c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800250e:	bf00      	nop
 8002510:	ffff0003 	.word	0xffff0003
 8002514:	10002b00 	.word	0x10002b00
 8002518:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2203      	movs	r2, #3
 8002530:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e010      	b.n	800255a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e005      	b.n	800254c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3304      	adds	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3f3      	bcc.n	8002540 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002586:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800258e:	4313      	orrs	r3, r2
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e00a      	b.n	80025aa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800259c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80025a2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80025a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025a8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80025b4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80025ba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80025c0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3304      	adds	r3, #4
 80025ea:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3304      	adds	r3, #4
 80025f6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e020      	b.n	8002640 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3303      	adds	r3, #3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3302      	adds	r3, #2
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	440b      	add	r3, r1
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002616:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	440b      	add	r3, r1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002624:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	440a      	add	r2, r1
 800262c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800262e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	3304      	adds	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3304      	adds	r3, #4
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <FDCAN_CopyMessageToRAM+0xf8>)
 8002648:	5cd3      	ldrb	r3, [r2, r3]
 800264a:	461a      	mov	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	4293      	cmp	r3, r2
 8002650:	d3d5      	bcc.n	80025fe <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	3724      	adds	r7, #36	; 0x24
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	0800615c 	.word	0x0800615c

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002672:	4b89      	ldr	r3, [pc, #548]	; (8002898 <HAL_GPIO_Init+0x234>)
 8002674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002676:	e194      	b.n	80029a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8186 	beq.w	800299c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00b      	beq.n	80026b0 <HAL_GPIO_Init+0x4c>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a4:	2b11      	cmp	r3, #17
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d130      	bne.n	8002712 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e6:	2201      	movs	r2, #1
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0201 	and.w	r2, r3, #1
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0xee>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b12      	cmp	r3, #18
 8002750:	d123      	bne.n	800279a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80e0 	beq.w	800299c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_GPIO_Init+0x238>)
 80027de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027e2:	4a2e      	ldr	r2, [pc, #184]	; (800289c <HAL_GPIO_Init+0x238>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_GPIO_Init+0x238>)
 80027ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fa:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <HAL_GPIO_Init+0x23c>)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <HAL_GPIO_Init+0x240>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d052      	beq.n	80028cc <HAL_GPIO_Init+0x268>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_GPIO_Init+0x244>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_GPIO_Init+0x22e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_GPIO_Init+0x248>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d02b      	beq.n	800288e <HAL_GPIO_Init+0x22a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_GPIO_Init+0x24c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d025      	beq.n	800288a <HAL_GPIO_Init+0x226>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_GPIO_Init+0x250>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01f      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_GPIO_Init+0x254>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d019      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <HAL_GPIO_Init+0x258>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_GPIO_Init+0x25c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00d      	beq.n	800287a <HAL_GPIO_Init+0x216>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_GPIO_Init+0x260>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_GPIO_Init+0x264>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_GPIO_Init+0x20e>
 800286e:	2309      	movs	r3, #9
 8002870:	e02d      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 8002872:	230a      	movs	r3, #10
 8002874:	e02b      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 8002876:	2308      	movs	r3, #8
 8002878:	e029      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 800287a:	2307      	movs	r3, #7
 800287c:	e027      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 800287e:	2306      	movs	r3, #6
 8002880:	e025      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 8002882:	2305      	movs	r3, #5
 8002884:	e023      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 8002886:	2304      	movs	r3, #4
 8002888:	e021      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 800288a:	2303      	movs	r3, #3
 800288c:	e01f      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 800288e:	2302      	movs	r3, #2
 8002890:	e01d      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 8002892:	2301      	movs	r3, #1
 8002894:	e01b      	b.n	80028ce <HAL_GPIO_Init+0x26a>
 8002896:	bf00      	nop
 8002898:	58000080 	.word	0x58000080
 800289c:	58024400 	.word	0x58024400
 80028a0:	58000400 	.word	0x58000400
 80028a4:	58020000 	.word	0x58020000
 80028a8:	58020400 	.word	0x58020400
 80028ac:	58020800 	.word	0x58020800
 80028b0:	58020c00 	.word	0x58020c00
 80028b4:	58021000 	.word	0x58021000
 80028b8:	58021400 	.word	0x58021400
 80028bc:	58021800 	.word	0x58021800
 80028c0:	58021c00 	.word	0x58021c00
 80028c4:	58022000 	.word	0x58022000
 80028c8:	58022400 	.word	0x58022400
 80028cc:	2300      	movs	r3, #0
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f002 0203 	and.w	r2, r2, #3
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	4093      	lsls	r3, r2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028de:	4938      	ldr	r1, [pc, #224]	; (80029c0 <HAL_GPIO_Init+0x35c>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	3301      	adds	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f ae63 	bne.w	8002678 <HAL_GPIO_Init+0x14>
  }
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	3724      	adds	r7, #36	; 0x24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	58000400 	.word	0x58000400

080029c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00a      	beq.n	80029ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e01f      	b.n	8002a2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e01d      	b.n	8002a2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	490f      	ldr	r1, [pc, #60]	; (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029fe:	f7fe fab7 	bl	8000f70 <HAL_GetTick>
 8002a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a04:	e009      	b.n	8002a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a06:	f7fe fab3 	bl	8000f70 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a14:	d901      	bls.n	8002a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e007      	b.n	8002a2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a26:	d1ee      	bne.n	8002a06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58024800 	.word	0x58024800

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08c      	sub	sp, #48	; 0x30
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e3ff      	b.n	800324a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8087 	beq.w	8002b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a58:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a62:	4b97      	ldr	r3, [pc, #604]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46>
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	2b18      	cmp	r3, #24
 8002a72:	d110      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4b90      	ldr	r3, [pc, #576]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x12c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d168      	bne.n	8002b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e3d9      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x76>
 8002aa0:	4b87      	ldr	r3, [pc, #540]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a86      	ldr	r2, [pc, #536]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	e02e      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a81      	ldr	r2, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7e      	ldr	r2, [pc, #504]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0xbc>
 8002ada:	4b79      	ldr	r3, [pc, #484]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a75      	ldr	r2, [pc, #468]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xd4>
 8002af4:	4b72      	ldr	r3, [pc, #456]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a71      	ldr	r2, [pc, #452]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b6f      	ldr	r3, [pc, #444]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fa2c 	bl	8000f70 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fa28 	bl	8000f70 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e38d      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b2e:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xe4>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fa18 	bl	8000f70 <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe fa14 	bl	8000f70 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e379      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b56:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x10c>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80ae 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b74:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b7e:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_RCC_OscConfig+0x162>
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2b18      	cmp	r3, #24
 8002b8e:	d13a      	bne.n	8002c06 <HAL_RCC_OscConfig+0x1ce>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d135      	bne.n	8002c06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e34b      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	f7fe fa0d 	bl	8000fd0 <HAL_GetREVID>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d817      	bhi.n	8002bf0 <HAL_RCC_OscConfig+0x1b8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d108      	bne.n	8002bda <HAL_RCC_OscConfig+0x1a2>
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bd0:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd8:	e07a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	031b      	lsls	r3, r3, #12
 8002be8:	4935      	ldr	r1, [pc, #212]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bee:	e06f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4930      	ldr	r1, [pc, #192]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	e064      	b.n	8002cd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d045      	beq.n	8002c9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0219 	bic.w	r2, r3, #25
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4929      	ldr	r1, [pc, #164]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe f9a6 	bl	8000f70 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe f9a2 	bl	8000f70 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e307      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	f7fe f9c3 	bl	8000fd0 <HAL_GetREVID>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d817      	bhi.n	8002c84 <HAL_RCC_OscConfig+0x24c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d108      	bne.n	8002c6e <HAL_RCC_OscConfig+0x236>
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6a:	6053      	str	r3, [r2, #4]
 8002c6c:	e030      	b.n	8002cd0 <HAL_RCC_OscConfig+0x298>
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	4910      	ldr	r1, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
 8002c82:	e025      	b.n	8002cd0 <HAL_RCC_OscConfig+0x298>
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	490b      	ldr	r1, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e01a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f963 	bl	8000f70 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe f95f 	bl	8000f70 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d903      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e2c4      	b.n	800324a <HAL_RCC_OscConfig+0x812>
 8002cc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc4:	4ba4      	ldr	r3, [pc, #656]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a9 	beq.w	8002e30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	4b9e      	ldr	r3, [pc, #632]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ce8:	4b9b      	ldr	r3, [pc, #620]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d007      	beq.n	8002d04 <HAL_RCC_OscConfig+0x2cc>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b18      	cmp	r3, #24
 8002cf8:	d13a      	bne.n	8002d70 <HAL_RCC_OscConfig+0x338>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d135      	bne.n	8002d70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d04:	4b94      	ldr	r3, [pc, #592]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e296      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d1c:	f7fe f958 	bl	8000fd0 <HAL_GetREVID>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d817      	bhi.n	8002d5a <HAL_RCC_OscConfig+0x322>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d108      	bne.n	8002d44 <HAL_RCC_OscConfig+0x30c>
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d3a:	4a87      	ldr	r2, [pc, #540]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d42:	e075      	b.n	8002e30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d44:	4b84      	ldr	r3, [pc, #528]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	069b      	lsls	r3, r3, #26
 8002d52:	4981      	ldr	r1, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d58:	e06a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	497b      	ldr	r1, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d6e:	e05f      	b.n	8002e30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d042      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d78:	4b77      	ldr	r3, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a76      	ldr	r2, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe f8f4 	bl	8000f70 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d8c:	f7fe f8f0 	bl	8000f70 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e255      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9e:	4b6e      	ldr	r3, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002daa:	f7fe f911 	bl	8000fd0 <HAL_GetREVID>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d817      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x3b0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d108      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x39a>
 8002dc0:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002dc8:	4a63      	ldr	r2, [pc, #396]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dce:	6053      	str	r3, [r2, #4]
 8002dd0:	e02e      	b.n	8002e30 <HAL_RCC_OscConfig+0x3f8>
 8002dd2:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	495d      	ldr	r1, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
 8002de6:	e023      	b.n	8002e30 <HAL_RCC_OscConfig+0x3f8>
 8002de8:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4958      	ldr	r1, [pc, #352]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60cb      	str	r3, [r1, #12]
 8002dfc:	e018      	b.n	8002e30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dfe:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a55      	ldr	r2, [pc, #340]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f8b1 	bl	8000f70 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e12:	f7fe f8ad 	bl	8000f70 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e212      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e24:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d036      	beq.n	8002eaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d019      	beq.n	8002e78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e44:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e48:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe f88e 	bl	8000f70 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fe f88a 	bl	8000f70 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1ef      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x420>
 8002e76:	e018      	b.n	8002eaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	4a36      	ldr	r2, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f874 	bl	8000f70 <HAL_GetTick>
 8002e88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe f870 	bl	8000f70 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1d5      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d036      	beq.n	8002f24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d019      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eca:	f7fe f851 	bl	8000f70 <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ed2:	f7fe f84d 	bl	8000f70 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1b2      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x49a>
 8002ef0:	e018      	b.n	8002f24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002efc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002efe:	f7fe f837 	bl	8000f70 <HAL_GetTick>
 8002f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f06:	f7fe f833 	bl	8000f70 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e198      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_RCC_OscConfig+0x520>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8085 	beq.w	800303c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_OscConfig+0x524>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_OscConfig+0x524>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe f817 	bl	8000f70 <HAL_GetTick>
 8002f42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f44:	e00c      	b.n	8002f60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f46:	f7fe f813 	bl	8000f70 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b64      	cmp	r3, #100	; 0x64
 8002f52:	d905      	bls.n	8002f60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e178      	b.n	800324a <HAL_RCC_OscConfig+0x812>
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f60:	4b96      	ldr	r3, [pc, #600]	; (80031bc <HAL_RCC_OscConfig+0x784>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ec      	beq.n	8002f46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x54a>
 8002f74:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a91      	ldr	r2, [pc, #580]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	e02d      	b.n	8002fde <HAL_RCC_OscConfig+0x5a6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x56c>
 8002f8a:	4b8d      	ldr	r3, [pc, #564]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	4a8c      	ldr	r2, [pc, #560]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70
 8002f96:	4b8a      	ldr	r3, [pc, #552]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a89      	ldr	r2, [pc, #548]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	e01c      	b.n	8002fde <HAL_RCC_OscConfig+0x5a6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x58e>
 8002fac:	4b84      	ldr	r3, [pc, #528]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a83      	ldr	r2, [pc, #524]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a80      	ldr	r2, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc4:	e00b      	b.n	8002fde <HAL_RCC_OscConfig+0x5a6>
 8002fc6:	4b7e      	ldr	r3, [pc, #504]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a7d      	ldr	r2, [pc, #500]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a7a      	ldr	r2, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fd ffc3 	bl	8000f70 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fd ffbf 	bl	8000f70 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e122      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003004:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ee      	beq.n	8002fee <HAL_RCC_OscConfig+0x5b6>
 8003010:	e014      	b.n	800303c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003012:	f7fd ffad 	bl	8000f70 <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fd ffa9 	bl	8000f70 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e10c      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003030:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8101 	beq.w	8003248 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003046:	4b5e      	ldr	r3, [pc, #376]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800304e:	2b18      	cmp	r3, #24
 8003050:	f000 80bc 	beq.w	80031cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b02      	cmp	r3, #2
 800305a:	f040 8095 	bne.w	8003188 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b58      	ldr	r3, [pc, #352]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a57      	ldr	r2, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd ff81 	bl	8000f70 <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7fd ff7d 	bl	8000f70 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e0e2      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003084:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003094:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <HAL_RCC_OscConfig+0x78c>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	430a      	orrs	r2, r1
 80030a4:	4946      	ldr	r1, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	628b      	str	r3, [r1, #40]	; 0x28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	3b01      	subs	r3, #1
 80030ba:	025b      	lsls	r3, r3, #9
 80030bc:	b29b      	uxth	r3, r3
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	3b01      	subs	r3, #1
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030da:	4939      	ldr	r1, [pc, #228]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	4a36      	ldr	r2, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ec:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80030ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <HAL_RCC_OscConfig+0x790>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	4931      	ldr	r1, [pc, #196]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003100:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f023 020c 	bic.w	r2, r3, #12
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	492c      	ldr	r1, [pc, #176]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800310e:	4313      	orrs	r3, r2
 8003110:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003112:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f023 0202 	bic.w	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4928      	ldr	r1, [pc, #160]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003120:	4313      	orrs	r3, r2
 8003122:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800313c:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fd ff06 	bl	8000f70 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003168:	f7fd ff02 	bl	8000f70 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e067      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x730>
 8003186:	e05f      	b.n	8003248 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 800318e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fd feec 	bl	8000f70 <HAL_GetTick>
 8003198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd fee8 	bl	8000f70 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04d      	b.n	800324a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_OscConfig+0x788>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x764>
 80031ba:	e045      	b.n	8003248 <HAL_RCC_OscConfig+0x810>
 80031bc:	58024800 	.word	0x58024800
 80031c0:	58024400 	.word	0x58024400
 80031c4:	fffffc0c 	.word	0xfffffc0c
 80031c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_RCC_OscConfig+0x81c>)
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_OscConfig+0x81c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d031      	beq.n	8003244 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0203 	and.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d12a      	bne.n	8003244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d122      	bne.n	8003244 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d11a      	bne.n	8003244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	0a5b      	lsrs	r3, r3, #9
 8003212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d111      	bne.n	8003244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0e1b      	lsrs	r3, r3, #24
 8003236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3730      	adds	r7, #48	; 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	58024400 	.word	0x58024400

08003258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e19c      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d910      	bls.n	800329c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b87      	ldr	r3, [pc, #540]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 020f 	bic.w	r2, r3, #15
 8003282:	4985      	ldr	r1, [pc, #532]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e184      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	4b7b      	ldr	r3, [pc, #492]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d908      	bls.n	80032ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032b8:	4b78      	ldr	r3, [pc, #480]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	4975      	ldr	r1, [pc, #468]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d010      	beq.n	80032f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032e6:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	496a      	ldr	r1, [pc, #424]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	4b64      	ldr	r3, [pc, #400]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003310:	429a      	cmp	r2, r3
 8003312:	d908      	bls.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003314:	4b61      	ldr	r3, [pc, #388]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	495e      	ldr	r1, [pc, #376]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003322:	4313      	orrs	r3, r2
 8003324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800333e:	429a      	cmp	r2, r3
 8003340:	d908      	bls.n	8003354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003342:	4b56      	ldr	r3, [pc, #344]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4953      	ldr	r1, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003350:	4313      	orrs	r3, r2
 8003352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	429a      	cmp	r2, r3
 800336e:	d908      	bls.n	8003382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003370:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f023 020f 	bic.w	r2, r3, #15
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4947      	ldr	r1, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d055      	beq.n	800343a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	4940      	ldr	r1, [pc, #256]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 800339c:	4313      	orrs	r3, r2
 800339e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d121      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0f6      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033c0:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d115      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0ea      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033d8:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0de      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d6      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f023 0207 	bic.w	r2, r3, #7
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4925      	ldr	r1, [pc, #148]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003406:	4313      	orrs	r3, r2
 8003408:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7fd fdb1 	bl	8000f70 <HAL_GetTick>
 800340e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003410:	e00a      	b.n	8003428 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f7fd fdad 	bl	8000f70 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0be      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003428:	4b1c      	ldr	r3, [pc, #112]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	429a      	cmp	r2, r3
 8003438:	d1eb      	bne.n	8003412 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	429a      	cmp	r2, r3
 8003454:	d208      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f023 020f 	bic.w	r2, r3, #15
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x244>)
 8003464:	4313      	orrs	r3, r2
 8003466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d214      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	4906      	ldr	r1, [pc, #24]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCC_ClockConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e086      	b.n	80035a6 <HAL_RCC_ClockConfig+0x34e>
 8003498:	52002000 	.word	0x52002000
 800349c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d010      	beq.n	80034ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d208      	bcs.n	80034ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034bc:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	4939      	ldr	r1, [pc, #228]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d208      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	492e      	ldr	r1, [pc, #184]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003514:	429a      	cmp	r2, r3
 8003516:	d208      	bcs.n	800352a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	4922      	ldr	r1, [pc, #136]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 8003526:	4313      	orrs	r3, r2
 8003528:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003542:	429a      	cmp	r2, r3
 8003544:	d208      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4917      	ldr	r1, [pc, #92]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 8003554:	4313      	orrs	r3, r2
 8003556:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003558:	f000 f834 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	4912      	ldr	r1, [pc, #72]	; (80035b4 <HAL_RCC_ClockConfig+0x35c>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x358>)
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <HAL_RCC_ClockConfig+0x35c>)
 8003580:	5cd3      	ldrb	r3, [r2, r3]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x360>)
 800358e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x364>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_RCC_ClockConfig+0x368>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fc9e 	bl	8000edc <HAL_InitTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	58024400 	.word	0x58024400
 80035b4:	0800614c 	.word	0x0800614c
 80035b8:	24000004 	.word	0x24000004
 80035bc:	24000000 	.word	0x24000000
 80035c0:	24000008 	.word	0x24000008

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ca:	4bb3      	ldr	r3, [pc, #716]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d2:	2b18      	cmp	r3, #24
 80035d4:	f200 8155 	bhi.w	8003882 <HAL_RCC_GetSysClockFreq+0x2be>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003645 	.word	0x08003645
 80035e4:	08003883 	.word	0x08003883
 80035e8:	08003883 	.word	0x08003883
 80035ec:	08003883 	.word	0x08003883
 80035f0:	08003883 	.word	0x08003883
 80035f4:	08003883 	.word	0x08003883
 80035f8:	08003883 	.word	0x08003883
 80035fc:	08003883 	.word	0x08003883
 8003600:	0800366b 	.word	0x0800366b
 8003604:	08003883 	.word	0x08003883
 8003608:	08003883 	.word	0x08003883
 800360c:	08003883 	.word	0x08003883
 8003610:	08003883 	.word	0x08003883
 8003614:	08003883 	.word	0x08003883
 8003618:	08003883 	.word	0x08003883
 800361c:	08003883 	.word	0x08003883
 8003620:	08003671 	.word	0x08003671
 8003624:	08003883 	.word	0x08003883
 8003628:	08003883 	.word	0x08003883
 800362c:	08003883 	.word	0x08003883
 8003630:	08003883 	.word	0x08003883
 8003634:	08003883 	.word	0x08003883
 8003638:	08003883 	.word	0x08003883
 800363c:	08003883 	.word	0x08003883
 8003640:	08003677 	.word	0x08003677
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003644:	4b94      	ldr	r3, [pc, #592]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003650:	4b91      	ldr	r3, [pc, #580]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	4a90      	ldr	r2, [pc, #576]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003662:	e111      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003664:	4b8d      	ldr	r3, [pc, #564]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003666:	61bb      	str	r3, [r7, #24]
    break;
 8003668:	e10e      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800366a:	4b8d      	ldr	r3, [pc, #564]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800366c:	61bb      	str	r3, [r7, #24]
    break;
 800366e:	e10b      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003670:	4b8c      	ldr	r3, [pc, #560]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003672:	61bb      	str	r3, [r7, #24]
    break;
 8003674:	e108      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800368a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800368c:	4b82      	ldr	r3, [pc, #520]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003696:	4b80      	ldr	r3, [pc, #512]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	08db      	lsrs	r3, r3, #3
 800369c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80e1 	beq.w	800387c <HAL_RCC_GetSysClockFreq+0x2b8>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f000 8083 	beq.w	80037c8 <HAL_RCC_GetSysClockFreq+0x204>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	f200 80a1 	bhi.w	800380c <HAL_RCC_GetSysClockFreq+0x248>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x114>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d056      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036d6:	e099      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d8:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02d      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036e4:	4b6c      	ldr	r3, [pc, #432]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	08db      	lsrs	r3, r3, #3
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	4a6b      	ldr	r2, [pc, #428]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b62      	ldr	r3, [pc, #392]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003722:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800373e:	e087      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	4b51      	ldr	r3, [pc, #324]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	ed97 6a02 	vldr	s12, [r7, #8]
 8003766:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003782:	e065      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003796:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037c6:	e043      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037da:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800380a:	e021      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800381a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800384e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	0a5b      	lsrs	r3, r3, #9
 8003856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385a:	3301      	adds	r3, #1
 800385c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003868:	edd7 6a07 	vldr	s13, [r7, #28]
 800386c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003874:	ee17 3a90 	vmov	r3, s15
 8003878:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
    break;
 8003880:	e002      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003884:	61bb      	str	r3, [r7, #24]
    break;
 8003886:	bf00      	nop
  }

  return sysclockfreq;
 8003888:	69bb      	ldr	r3, [r7, #24]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58024400 	.word	0x58024400
 800389c:	03d09000 	.word	0x03d09000
 80038a0:	003d0900 	.word	0x003d0900
 80038a4:	007a1200 	.word	0x007a1200
 80038a8:	46000000 	.word	0x46000000
 80038ac:	4c742400 	.word	0x4c742400
 80038b0:	4a742400 	.word	0x4a742400
 80038b4:	4af42400 	.word	0x4af42400

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038be:	f7ff fe81 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b10      	ldr	r3, [pc, #64]	; (8003908 <HAL_RCC_GetHCLKFreq+0x50>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490f      	ldr	r1, [pc, #60]	; (800390c <HAL_RCC_GetHCLKFreq+0x54>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_RCC_GetHCLKFreq+0x50>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_GetHCLKFreq+0x54>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_RCC_GetHCLKFreq+0x58>)
 80038f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_RCC_GetHCLKFreq+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	58024400 	.word	0x58024400
 800390c:	0800614c 	.word	0x0800614c
 8003910:	24000004 	.word	0x24000004
 8003914:	24000000 	.word	0x24000000

08003918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800391c:	f7ff ffcc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4904      	ldr	r1, [pc, #16]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	58024400 	.word	0x58024400
 8003940:	0800614c 	.word	0x0800614c

08003944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003948:	f7ff ffb6 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4904      	ldr	r1, [pc, #16]	; (800396c <HAL_RCC_GetPCLK2Freq+0x28>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	58024400 	.word	0x58024400
 800396c:	0800614c 	.word	0x0800614c

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003978:	2300      	movs	r3, #0
 800397a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800397c:	2300      	movs	r3, #0
 800397e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003994:	d02a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800399a:	d824      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800399c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a0:	d018      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a6:	d81e      	bhi.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b0:	d007      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039b2:	e018      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b4:	4bab      	ldr	r3, [pc, #684]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4aaa      	ldr	r2, [pc, #680]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2102      	movs	r1, #2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 f9cf 	bl	8004d6c <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039d2:	e00c      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3324      	adds	r3, #36	; 0x24
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fa78 	bl	8004ed0 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039f4:	4b9b      	ldr	r3, [pc, #620]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a00:	4998      	ldr	r1, [pc, #608]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	650b      	str	r3, [r1, #80]	; 0x50
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03d      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d826      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a3d 	.word	0x08003a3d
 8003a2c:	08003a4b 	.word	0x08003a4b
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a75 	.word	0x08003a75
 8003a38:	08003a75 	.word	0x08003a75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3c:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	4a88      	ldr	r2, [pc, #544]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a48:	e015      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 f98b 	bl	8004d6c <RCCEx_PLL2_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3324      	adds	r3, #36	; 0x24
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fa34 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a7c:	4b79      	ldr	r3, [pc, #484]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	f023 0207 	bic.w	r2, r3, #7
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	4976      	ldr	r1, [pc, #472]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d042      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa8:	d02b      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	d825      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab2:	d028      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab6:	d821      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d016      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d81d      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d007      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ac8:	e018      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aca:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	4a65      	ldr	r2, [pc, #404]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ad6:	e017      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f944 	bl	8004d6c <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ae8:	e00e      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	; 0x24
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 f9ed 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b0e:	4b55      	ldr	r3, [pc, #340]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4952      	ldr	r1, [pc, #328]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8003b20:	e001      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d049      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b3c:	d030      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b42:	d82a      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b48:	d02c      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003b4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003b4e:	d824      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b54:	d018      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5a:	d81e      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b64:	d007      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003b66:	e018      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b74:	e017      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f8f5 	bl	8004d6c <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b86:	e00e      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3324      	adds	r3, #36	; 0x24
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 f99e 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b98:	e005      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bac:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bba:	492a      	ldr	r1, [pc, #168]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc0:	e001      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d04c      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be2:	d82a      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003be8:	d02c      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003bea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bee:	d824      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf4:	d018      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfa:	d81e      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c04:	d007      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003c06:	e018      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c14:	e017      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 f8a5 	bl	8004d6c <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c26:	e00e      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f94e 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c38:	e005      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c40:	bf00      	nop
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10d      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c5a:	4902      	ldr	r1, [pc, #8]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8003c60:	e004      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d032      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d01c      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d817      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d813      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d10f      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4baf      	ldr	r3, [pc, #700]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4aae      	ldr	r2, [pc, #696]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 f85f 	bl	8004d6c <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb8:	e002      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003cc6:	4ba3      	ldr	r3, [pc, #652]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	49a0      	ldr	r1, [pc, #640]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cd8:	e001      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d047      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf2:	d030      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf8:	d82a      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003cfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cfe:	d02c      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d04:	d824      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0a:	d018      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d10:	d81e      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1a:	d007      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003d1c:	e018      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	4a8c      	ldr	r2, [pc, #560]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d2a:	e017      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 f81a 	bl	8004d6c <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d3c:	e00e      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3324      	adds	r3, #36	; 0x24
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f8c3 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003d4e:	e005      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
      break;
 8003d54:	e002      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d62:	4b7c      	ldr	r3, [pc, #496]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	4979      	ldr	r1, [pc, #484]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	650b      	str	r3, [r1, #80]	; 0x50
 8003d74:	e001      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d049      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d8e:	d02e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d828      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9a:	d02a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003da0:	d822      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003da2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003da6:	d026      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dac:	d81c      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db2:	d010      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db8:	d816      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01d      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 ffce 	bl	8004d6c <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003dd4:	e012      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3324      	adds	r3, #36	; 0x24
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 f877 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003de6:	e009      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
      break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003dee:	bf00      	nop
 8003df0:	e004      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003df2:	bf00      	nop
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e02:	4b54      	ldr	r3, [pc, #336]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0e:	4951      	ldr	r1, [pc, #324]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	650b      	str	r3, [r1, #80]	; 0x50
 8003e14:	e001      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d04b      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e30:	d02e      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e36:	d828      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d02a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e42:	d822      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e48:	d026      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e4e:	d81c      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e54:	d010      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5a:	d816      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e64:	d111      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 ff7d 	bl	8004d6c <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e76:	e012      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3324      	adds	r3, #36	; 0x24
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 f826 	bl	8004ed0 <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e88:	e009      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8e:	e006      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e90:	bf00      	nop
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eb2:	4928      	ldr	r1, [pc, #160]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	658b      	str	r3, [r1, #88]	; 0x58
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02f      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d814      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d015      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee2:	d10f      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ef0:	e00c      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 ff37 	bl	8004d6c <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f02:	e003      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
      break;
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1e:	490d      	ldr	r1, [pc, #52]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	650b      	str	r3, [r1, #80]	; 0x50
 8003f24:	e001      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d033      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d81c      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f7f 	.word	0x08003f7f
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f67 	.word	0x08003f67
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f58:	4bb8      	ldr	r3, [pc, #736]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4ab7      	ldr	r2, [pc, #732]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f64:	e00c      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fefd 	bl	8004d6c <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f86:	4bad      	ldr	r3, [pc, #692]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	49aa      	ldr	r1, [pc, #680]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f98:	e001      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8086 	beq.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fac:	4ba4      	ldr	r3, [pc, #656]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4aa3      	ldr	r2, [pc, #652]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fc ffda 	bl	8000f70 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fc ffd6 	bl	8000f70 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd4:	4b9a      	ldr	r3, [pc, #616]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d166      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fe6:	4b95      	ldr	r3, [pc, #596]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ff0:	4053      	eors	r3, r2
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ffa:	4b90      	ldr	r3, [pc, #576]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004004:	4b8d      	ldr	r3, [pc, #564]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a8c      	ldr	r2, [pc, #560]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004010:	4b8a      	ldr	r3, [pc, #552]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a89      	ldr	r2, [pc, #548]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800401c:	4a87      	ldr	r2, [pc, #540]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402c:	d115      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fc ff9f 	bl	8000f70 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004034:	e00b      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fc ff9b 	bl	8000f70 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d902      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	75fb      	strb	r3, [r7, #23]
            break;
 800404c:	e005      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800404e:	4b7b      	ldr	r3, [pc, #492]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ed      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d126      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406e:	d10d      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004070:	4b72      	ldr	r3, [pc, #456]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800407e:	0919      	lsrs	r1, r3, #4
 8004080:	4b70      	ldr	r3, [pc, #448]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004082:	400b      	ands	r3, r1
 8004084:	496d      	ldr	r1, [pc, #436]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	610b      	str	r3, [r1, #16]
 800408a:	e005      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800408c:	4b6b      	ldr	r3, [pc, #428]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	4a6a      	ldr	r2, [pc, #424]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004096:	6113      	str	r3, [r2, #16]
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800409a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a6:	4965      	ldr	r1, [pc, #404]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	670b      	str	r3, [r1, #112]	; 0x70
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	75bb      	strb	r3, [r7, #22]
 80040b2:	e001      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d07e      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c8:	2b28      	cmp	r3, #40	; 0x28
 80040ca:	d867      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080041a3 	.word	0x080041a3
 80040d8:	0800419d 	.word	0x0800419d
 80040dc:	0800419d 	.word	0x0800419d
 80040e0:	0800419d 	.word	0x0800419d
 80040e4:	0800419d 	.word	0x0800419d
 80040e8:	0800419d 	.word	0x0800419d
 80040ec:	0800419d 	.word	0x0800419d
 80040f0:	0800419d 	.word	0x0800419d
 80040f4:	08004179 	.word	0x08004179
 80040f8:	0800419d 	.word	0x0800419d
 80040fc:	0800419d 	.word	0x0800419d
 8004100:	0800419d 	.word	0x0800419d
 8004104:	0800419d 	.word	0x0800419d
 8004108:	0800419d 	.word	0x0800419d
 800410c:	0800419d 	.word	0x0800419d
 8004110:	0800419d 	.word	0x0800419d
 8004114:	0800418b 	.word	0x0800418b
 8004118:	0800419d 	.word	0x0800419d
 800411c:	0800419d 	.word	0x0800419d
 8004120:	0800419d 	.word	0x0800419d
 8004124:	0800419d 	.word	0x0800419d
 8004128:	0800419d 	.word	0x0800419d
 800412c:	0800419d 	.word	0x0800419d
 8004130:	0800419d 	.word	0x0800419d
 8004134:	080041a3 	.word	0x080041a3
 8004138:	0800419d 	.word	0x0800419d
 800413c:	0800419d 	.word	0x0800419d
 8004140:	0800419d 	.word	0x0800419d
 8004144:	0800419d 	.word	0x0800419d
 8004148:	0800419d 	.word	0x0800419d
 800414c:	0800419d 	.word	0x0800419d
 8004150:	0800419d 	.word	0x0800419d
 8004154:	080041a3 	.word	0x080041a3
 8004158:	0800419d 	.word	0x0800419d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	0800419d 	.word	0x0800419d
 8004164:	0800419d 	.word	0x0800419d
 8004168:	0800419d 	.word	0x0800419d
 800416c:	0800419d 	.word	0x0800419d
 8004170:	0800419d 	.word	0x0800419d
 8004174:	080041a3 	.word	0x080041a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fdf4 	bl	8004d6c <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004188:	e00c      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3324      	adds	r3, #36	; 0x24
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fe9d 	bl	8004ed0 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800419a:	e003      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b6:	4921      	ldr	r1, [pc, #132]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	654b      	str	r3, [r1, #84]	; 0x54
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d03e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d820      	bhi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	0800421f 	.word	0x0800421f
 80041e0:	080041f5 	.word	0x080041f5
 80041e4:	08004207 	.word	0x08004207
 80041e8:	0800421f 	.word	0x0800421f
 80041ec:	0800421f 	.word	0x0800421f
 80041f0:	0800421f 	.word	0x0800421f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fdb6 	bl	8004d6c <RCCEx_PLL2_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004204:	e00c      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3324      	adds	r3, #36	; 0x24
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe5f 	bl	8004ed0 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004216:	e003      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
      break;
 800421c:	e000      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800421e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d110      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004226:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f023 0207 	bic.w	r2, r3, #7
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	4902      	ldr	r1, [pc, #8]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	654b      	str	r3, [r1, #84]	; 0x54
 8004238:	e008      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800423a:	bf00      	nop
 800423c:	58024400 	.word	0x58024400
 8004240:	58024800 	.word	0x58024800
 8004244:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d039      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	2b05      	cmp	r3, #5
 8004260:	d820      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	080042ab 	.word	0x080042ab
 800426c:	08004281 	.word	0x08004281
 8004270:	08004293 	.word	0x08004293
 8004274:	080042ab 	.word	0x080042ab
 8004278:	080042ab 	.word	0x080042ab
 800427c:	080042ab 	.word	0x080042ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fd70 	bl	8004d6c <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004290:	e00c      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2101      	movs	r1, #1
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fe19 	bl	8004ed0 <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80042a2:	e003      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
      break;
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80042aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b2:	4bb7      	ldr	r3, [pc, #732]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f023 0207 	bic.w	r2, r3, #7
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	49b3      	ldr	r1, [pc, #716]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	658b      	str	r3, [r1, #88]	; 0x58
 80042c6:	e001      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d04b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042e2:	d02e      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80042e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042e8:	d828      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d02a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d822      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80042f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042fa:	d026      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80042fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004300:	d81c      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004306:	d010      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430c:	d816      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01d      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004316:	d111      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fd24 	bl	8004d6c <RCCEx_PLL2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004328:	e012      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3324      	adds	r3, #36	; 0x24
 800432e:	2102      	movs	r1, #2
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fdcd 	bl	8004ed0 <RCCEx_PLL3_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800433a:	e009      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
      break;
 8004340:	e006      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004342:	bf00      	nop
 8004344:	e004      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004346:	bf00      	nop
 8004348:	e002      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800434e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004356:	4b8e      	ldr	r3, [pc, #568]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004364:	498a      	ldr	r1, [pc, #552]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004366:	4313      	orrs	r3, r2
 8004368:	654b      	str	r3, [r1, #84]	; 0x54
 800436a:	e001      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d04b      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004386:	d02e      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800438c:	d828      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004392:	d02a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d822      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800439a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800439e:	d026      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80043a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043a4:	d81c      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043aa:	d010      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	d816      	bhi.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01d      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d111      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fcd2 	bl	8004d6c <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043cc:	e012      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3324      	adds	r3, #36	; 0x24
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fd7b 	bl	8004ed0 <RCCEx_PLL3_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80043de:	e009      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
      break;
 80043e4:	e006      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043e6:	bf00      	nop
 80043e8:	e004      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80043f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004408:	4961      	ldr	r1, [pc, #388]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800440a:	4313      	orrs	r3, r2
 800440c:	658b      	str	r3, [r1, #88]	; 0x58
 800440e:	e001      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d04b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800442a:	d02e      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800442c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004430:	d828      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004436:	d02a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	d822      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800443e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004442:	d026      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004444:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004448:	d81c      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800444a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800444e:	d010      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004454:	d816      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01d      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800445a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445e:	d111      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	2100      	movs	r1, #0
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fc80 	bl	8004d6c <RCCEx_PLL2_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004470:	e012      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd29 	bl	8004ed0 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004482:	e009      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      break;
 8004488:	e006      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800448a:	bf00      	nop
 800448c:	e004      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800448e:	bf00      	nop
 8004490:	e002      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004492:	bf00      	nop
 8004494:	e000      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800449e:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ac:	4938      	ldr	r1, [pc, #224]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	658b      	str	r3, [r1, #88]	; 0x58
 80044b2:	e001      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d10a      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fcfa 	bl	8004ed0 <RCCEx_PLL3_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044e6:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f4:	4926      	ldr	r1, [pc, #152]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004510:	d10a      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3324      	adds	r3, #36	; 0x24
 8004516:	2102      	movs	r1, #2
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fcd9 	bl	8004ed0 <RCCEx_PLL3_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	4916      	ldr	r1, [pc, #88]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004538:	4313      	orrs	r3, r2
 800453a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d036      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800454e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004552:	d01f      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004558:	d817      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800455e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004562:	d009      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004564:	e011      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fbfd 	bl	8004d6c <RCCEx_PLL2_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004576:	e00e      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3324      	adds	r3, #36	; 0x24
 800457c:	2102      	movs	r1, #2
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fca6 	bl	8004ed0 <RCCEx_PLL3_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004588:	e005      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	75fb      	strb	r3, [r7, #23]
      break;
 800458e:	e002      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004590:	58024400 	.word	0x58024400
      break;
 8004594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800459c:	4b93      	ldr	r3, [pc, #588]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045aa:	4990      	ldr	r1, [pc, #576]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	658b      	str	r3, [r1, #88]	; 0x58
 80045b0:	e001      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d033      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045cc:	d01c      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80045ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045d2:	d816      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80045d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d8:	d003      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80045da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045de:	d007      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80045e0:	e00f      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e2:	4b82      	ldr	r3, [pc, #520]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	4a81      	ldr	r2, [pc, #516]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80045ee:	e00c      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3324      	adds	r3, #36	; 0x24
 80045f4:	2101      	movs	r1, #1
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fc6a 	bl	8004ed0 <RCCEx_PLL3_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004600:	e003      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
      break;
 8004606:	e000      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461e:	4973      	ldr	r1, [pc, #460]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	654b      	str	r3, [r1, #84]	; 0x54
 8004624:	e001      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d029      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d007      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004644:	e00f      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004646:	4b69      	ldr	r3, [pc, #420]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a68      	ldr	r2, [pc, #416]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800464c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004652:	e00b      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fb86 	bl	8004d6c <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004664:	e002      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
      break;
 800466a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004672:	4b5e      	ldr	r3, [pc, #376]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	495b      	ldr	r1, [pc, #364]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004684:	e001      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3324      	adds	r3, #36	; 0x24
 800469a:	2102      	movs	r1, #2
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fc17 	bl	8004ed0 <RCCEx_PLL3_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d030      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c0:	d017      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c6:	d811      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d013      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80046ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d2:	d80b      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80046d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046dc:	d106      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046de:	4b43      	ldr	r3, [pc, #268]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	4a42      	ldr	r2, [pc, #264]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80046ea:	e007      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	e004      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80046f2:	bf00      	nop
 80046f4:	e002      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80046fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004702:	4b3a      	ldr	r3, [pc, #232]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470e:	4937      	ldr	r1, [pc, #220]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004710:	4313      	orrs	r3, r2
 8004712:	654b      	str	r3, [r1, #84]	; 0x54
 8004714:	e001      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	492e      	ldr	r1, [pc, #184]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004734:	4313      	orrs	r3, r2
 8004736:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004744:	4b29      	ldr	r3, [pc, #164]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004752:	4926      	ldr	r1, [pc, #152]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004754:	4313      	orrs	r3, r2
 8004756:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004770:	491e      	ldr	r1, [pc, #120]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	4a19      	ldr	r2, [pc, #100]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800478c:	6113      	str	r3, [r2, #16]
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004798:	4914      	ldr	r1, [pc, #80]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800479a:	4313      	orrs	r3, r2
 800479c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da08      	bge.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	490e      	ldr	r1, [pc, #56]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	4906      	ldr	r1, [pc, #24]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80047d8:	7dbb      	ldrb	r3, [r7, #22]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	58024400 	.word	0x58024400

080047f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047f4:	f7ff f860 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4904      	ldr	r1, [pc, #16]	; (8004818 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	58024400 	.word	0x58024400
 8004818:	0800614c 	.word	0x0800614c

0800481c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004824:	4ba1      	ldr	r3, [pc, #644]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800482e:	4b9f      	ldr	r3, [pc, #636]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	0b1b      	lsrs	r3, r3, #12
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800483a:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004846:	4b99      	ldr	r3, [pc, #612]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	08db      	lsrs	r3, r3, #3
 800484c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8111 	beq.w	8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b02      	cmp	r3, #2
 800486e:	f000 8083 	beq.w	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b02      	cmp	r3, #2
 8004876:	f200 80a1 	bhi.w	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d056      	beq.n	8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004886:	e099      	b.n	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004888:	4b88      	ldr	r3, [pc, #544]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d02d      	beq.n	80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004894:	4b85      	ldr	r3, [pc, #532]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	08db      	lsrs	r3, r3, #3
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	4a84      	ldr	r2, [pc, #528]	; (8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048be:	4b7b      	ldr	r3, [pc, #492]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048ee:	e087      	b.n	8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004902:	4b6a      	ldr	r3, [pc, #424]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004912:	ed97 6a03 	vldr	s12, [r7, #12]
 8004916:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800491a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004932:	e065      	b.n	8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004946:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004956:	ed97 6a03 	vldr	s12, [r7, #12]
 800495a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800495e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004976:	e043      	b.n	8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498a:	4b48      	ldr	r3, [pc, #288]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499a:	ed97 6a03 	vldr	s12, [r7, #12]
 800499e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ba:	e021      	b.n	8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ce:	4b37      	ldr	r3, [pc, #220]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049de:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004a00:	4b2a      	ldr	r3, [pc, #168]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	0a5b      	lsrs	r3, r3, #9
 8004a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a26:	ee17 2a90 	vmov	r2, s15
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a54:	ee17 2a90 	vmov	r2, s15
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a5c:	4b13      	ldr	r3, [pc, #76]	; (8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	0e1b      	lsrs	r3, r3, #24
 8004a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a82:	ee17 2a90 	vmov	r2, s15
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a8a:	e008      	b.n	8004a9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	609a      	str	r2, [r3, #8]
}
 8004a9e:	bf00      	nop
 8004aa0:	3724      	adds	r7, #36	; 0x24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	03d09000 	.word	0x03d09000
 8004ab4:	46000000 	.word	0x46000000
 8004ab8:	4c742400 	.word	0x4c742400
 8004abc:	4a742400 	.word	0x4a742400
 8004ac0:	4af42400 	.word	0x4af42400

08004ac4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004acc:	4ba1      	ldr	r3, [pc, #644]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ad6:	4b9f      	ldr	r3, [pc, #636]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	0d1b      	lsrs	r3, r3, #20
 8004adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ae2:	4b9c      	ldr	r3, [pc, #624]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004aee:	4b99      	ldr	r3, [pc, #612]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	08db      	lsrs	r3, r3, #3
 8004af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8111 	beq.w	8004d34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	f000 8083 	beq.w	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	f200 80a1 	bhi.w	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d056      	beq.n	8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b2e:	e099      	b.n	8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b30:	4b88      	ldr	r3, [pc, #544]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d02d      	beq.n	8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b3c:	4b85      	ldr	r3, [pc, #532]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	08db      	lsrs	r3, r3, #3
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	4a84      	ldr	r2, [pc, #528]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b96:	e087      	b.n	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bda:	e065      	b.n	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bee:	4b59      	ldr	r3, [pc, #356]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c1e:	e043      	b.n	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c32:	4b48      	ldr	r3, [pc, #288]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c62:	e021      	b.n	8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ca6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	0a5b      	lsrs	r3, r3, #9
 8004cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cce:	ee17 2a90 	vmov	r2, s15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 2a90 	vmov	r2, s15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	0e1b      	lsrs	r3, r3, #24
 8004d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2a:	ee17 2a90 	vmov	r2, s15
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d32:	e008      	b.n	8004d46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	609a      	str	r2, [r3, #8]
}
 8004d46:	bf00      	nop
 8004d48:	3724      	adds	r7, #36	; 0x24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	03d09000 	.word	0x03d09000
 8004d5c:	46000000 	.word	0x46000000
 8004d60:	4c742400 	.word	0x4c742400
 8004d64:	4a742400 	.word	0x4a742400
 8004d68:	4af42400 	.word	0x4af42400

08004d6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d7a:	4b53      	ldr	r3, [pc, #332]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d101      	bne.n	8004d8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e099      	b.n	8004ebe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d8a:	4b4f      	ldr	r3, [pc, #316]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a4e      	ldr	r2, [pc, #312]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fc f8eb 	bl	8000f70 <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d9e:	f7fc f8e7 	bl	8000f70 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e086      	b.n	8004ebe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004db0:	4b45      	ldr	r3, [pc, #276]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dbc:	4b42      	ldr	r3, [pc, #264]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	493f      	ldr	r1, [pc, #252]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	628b      	str	r3, [r1, #40]	; 0x28
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	025b      	lsls	r3, r3, #9
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	061b      	lsls	r3, r3, #24
 8004dfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e00:	4931      	ldr	r1, [pc, #196]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	492d      	ldr	r1, [pc, #180]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e18:	4b2b      	ldr	r3, [pc, #172]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	f023 0220 	bic.w	r2, r3, #32
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4928      	ldr	r1, [pc, #160]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	f023 0310 	bic.w	r3, r3, #16
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <RCCEx_PLL2_Config+0x160>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	69d2      	ldr	r2, [r2, #28]
 8004e42:	00d2      	lsls	r2, r2, #3
 8004e44:	4920      	ldr	r1, [pc, #128]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e50:	f043 0310 	orr.w	r3, r3, #16
 8004e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e68:	e00f      	b.n	8004e8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d106      	bne.n	8004e7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e70:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e7c:	e005      	b.n	8004e8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004e90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e96:	f7fc f86b 	bl	8000f70 <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e9c:	e008      	b.n	8004eb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e9e:	f7fc f867 	bl	8000f70 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e006      	b.n	8004ebe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <RCCEx_PLL2_Config+0x15c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	ffff0007 	.word	0xffff0007

08004ed0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ede:	4b53      	ldr	r3, [pc, #332]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d101      	bne.n	8004eee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e099      	b.n	8005022 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eee:	4b4f      	ldr	r3, [pc, #316]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a4e      	ldr	r2, [pc, #312]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efa:	f7fc f839 	bl	8000f70 <HAL_GetTick>
 8004efe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f02:	f7fc f835 	bl	8000f70 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e086      	b.n	8005022 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f14:	4b45      	ldr	r3, [pc, #276]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	051b      	lsls	r3, r3, #20
 8004f2e:	493f      	ldr	r1, [pc, #252]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	628b      	str	r3, [r1, #40]	; 0x28
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	025b      	lsls	r3, r3, #9
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f64:	4931      	ldr	r1, [pc, #196]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f6a:	4b30      	ldr	r3, [pc, #192]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	492d      	ldr	r1, [pc, #180]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	4928      	ldr	r1, [pc, #160]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f8e:	4b27      	ldr	r3, [pc, #156]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	4a26      	ldr	r2, [pc, #152]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f9a:	4b24      	ldr	r3, [pc, #144]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	4b24      	ldr	r3, [pc, #144]	; (8005030 <RCCEx_PLL3_Config+0x160>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	69d2      	ldr	r2, [r2, #28]
 8004fa6:	00d2      	lsls	r2, r2, #3
 8004fa8:	4920      	ldr	r1, [pc, #128]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fae:	4b1f      	ldr	r3, [pc, #124]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4a19      	ldr	r2, [pc, #100]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fcc:	e00f      	b.n	8004fee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d106      	bne.n	8004fe2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fd4:	4b15      	ldr	r3, [pc, #84]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	4a14      	ldr	r2, [pc, #80]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fe0:	e005      	b.n	8004fee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	4a11      	ldr	r2, [pc, #68]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fee:	4b0f      	ldr	r3, [pc, #60]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a0e      	ldr	r2, [pc, #56]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fb ffb9 	bl	8000f70 <HAL_GetTick>
 8004ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005000:	e008      	b.n	8005014 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005002:	f7fb ffb5 	bl	8000f70 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e006      	b.n	8005022 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <RCCEx_PLL3_Config+0x15c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	ffff0007 	.word	0xffff0007

08005034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e042      	b.n	80050cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fb fdab 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2224      	movs	r2, #36	; 0x24
 8005062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f82c 	bl	80050d4 <UART_SetConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e022      	b.n	80050cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd80 	bl	8005b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fe07 	bl	8005cd8 <UART_CheckIdleState>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d4:	b5b0      	push	{r4, r5, r7, lr}
 80050d6:	b08e      	sub	sp, #56	; 0x38
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4bbf      	ldr	r3, [pc, #764]	; (8005400 <UART_SetConfig+0x32c>)
 8005102:	4013      	ands	r3, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800510a:	430b      	orrs	r3, r1
 800510c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4ab5      	ldr	r2, [pc, #724]	; (8005404 <UART_SetConfig+0x330>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800513a:	4313      	orrs	r3, r2
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	4bb0      	ldr	r3, [pc, #704]	; (8005408 <UART_SetConfig+0x334>)
 8005146:	4013      	ands	r3, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800514e:	430b      	orrs	r3, r1
 8005150:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f023 010f 	bic.w	r1, r3, #15
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4aa7      	ldr	r2, [pc, #668]	; (800540c <UART_SetConfig+0x338>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d176      	bne.n	8005260 <UART_SetConfig+0x18c>
 8005172:	4ba7      	ldr	r3, [pc, #668]	; (8005410 <UART_SetConfig+0x33c>)
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517a:	2b28      	cmp	r3, #40	; 0x28
 800517c:	d86c      	bhi.n	8005258 <UART_SetConfig+0x184>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0xb0>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005229 	.word	0x08005229
 8005188:	08005259 	.word	0x08005259
 800518c:	08005259 	.word	0x08005259
 8005190:	08005259 	.word	0x08005259
 8005194:	08005259 	.word	0x08005259
 8005198:	08005259 	.word	0x08005259
 800519c:	08005259 	.word	0x08005259
 80051a0:	08005259 	.word	0x08005259
 80051a4:	08005231 	.word	0x08005231
 80051a8:	08005259 	.word	0x08005259
 80051ac:	08005259 	.word	0x08005259
 80051b0:	08005259 	.word	0x08005259
 80051b4:	08005259 	.word	0x08005259
 80051b8:	08005259 	.word	0x08005259
 80051bc:	08005259 	.word	0x08005259
 80051c0:	08005259 	.word	0x08005259
 80051c4:	08005239 	.word	0x08005239
 80051c8:	08005259 	.word	0x08005259
 80051cc:	08005259 	.word	0x08005259
 80051d0:	08005259 	.word	0x08005259
 80051d4:	08005259 	.word	0x08005259
 80051d8:	08005259 	.word	0x08005259
 80051dc:	08005259 	.word	0x08005259
 80051e0:	08005259 	.word	0x08005259
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005259 	.word	0x08005259
 80051ec:	08005259 	.word	0x08005259
 80051f0:	08005259 	.word	0x08005259
 80051f4:	08005259 	.word	0x08005259
 80051f8:	08005259 	.word	0x08005259
 80051fc:	08005259 	.word	0x08005259
 8005200:	08005259 	.word	0x08005259
 8005204:	08005249 	.word	0x08005249
 8005208:	08005259 	.word	0x08005259
 800520c:	08005259 	.word	0x08005259
 8005210:	08005259 	.word	0x08005259
 8005214:	08005259 	.word	0x08005259
 8005218:	08005259 	.word	0x08005259
 800521c:	08005259 	.word	0x08005259
 8005220:	08005259 	.word	0x08005259
 8005224:	08005251 	.word	0x08005251
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800522e:	e222      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005236:	e21e      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e21a      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005246:	e216      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524e:	e212      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e20e      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525e:	e20a      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a6b      	ldr	r2, [pc, #428]	; (8005414 <UART_SetConfig+0x340>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <UART_SetConfig+0x1f8>
 800526a:	4b69      	ldr	r3, [pc, #420]	; (8005410 <UART_SetConfig+0x33c>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b05      	cmp	r3, #5
 8005274:	d826      	bhi.n	80052c4 <UART_SetConfig+0x1f0>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <UART_SetConfig+0x1a8>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529a:	e1ec      	b.n	8005676 <UART_SetConfig+0x5a2>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052a2:	e1e8      	b.n	8005676 <UART_SetConfig+0x5a2>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052aa:	e1e4      	b.n	8005676 <UART_SetConfig+0x5a2>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e1e0      	b.n	8005676 <UART_SetConfig+0x5a2>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e1dc      	b.n	8005676 <UART_SetConfig+0x5a2>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e1d8      	b.n	8005676 <UART_SetConfig+0x5a2>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e1d4      	b.n	8005676 <UART_SetConfig+0x5a2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a51      	ldr	r2, [pc, #324]	; (8005418 <UART_SetConfig+0x344>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d130      	bne.n	8005338 <UART_SetConfig+0x264>
 80052d6:	4b4e      	ldr	r3, [pc, #312]	; (8005410 <UART_SetConfig+0x33c>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d826      	bhi.n	8005330 <UART_SetConfig+0x25c>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x214>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005306:	e1b6      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800530e:	e1b2      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005316:	e1ae      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531e:	e1aa      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005320:	2320      	movs	r3, #32
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005326:	e1a6      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532e:	e1a2      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005336:	e19e      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a37      	ldr	r2, [pc, #220]	; (800541c <UART_SetConfig+0x348>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d130      	bne.n	80053a4 <UART_SetConfig+0x2d0>
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <UART_SetConfig+0x33c>)
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b05      	cmp	r3, #5
 800534c:	d826      	bhi.n	800539c <UART_SetConfig+0x2c8>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0x280>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005395 	.word	0x08005395
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	e180      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537a:	e17c      	b.n	8005676 <UART_SetConfig+0x5a2>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005382:	e178      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e174      	b.n	8005676 <UART_SetConfig+0x5a2>
 800538c:	2320      	movs	r3, #32
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e170      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e16c      	b.n	8005676 <UART_SetConfig+0x5a2>
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e168      	b.n	8005676 <UART_SetConfig+0x5a2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <UART_SetConfig+0x34c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d142      	bne.n	8005434 <UART_SetConfig+0x360>
 80053ae:	4b18      	ldr	r3, [pc, #96]	; (8005410 <UART_SetConfig+0x33c>)
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b05      	cmp	r3, #5
 80053b8:	d838      	bhi.n	800542c <UART_SetConfig+0x358>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <UART_SetConfig+0x2ec>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053d9 	.word	0x080053d9
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	080053e9 	.word	0x080053e9
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	08005425 	.word	0x08005425
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e14a      	b.n	8005676 <UART_SetConfig+0x5a2>
 80053e0:	2304      	movs	r3, #4
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	e146      	b.n	8005676 <UART_SetConfig+0x5a2>
 80053e8:	2308      	movs	r3, #8
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ee:	e142      	b.n	8005676 <UART_SetConfig+0x5a2>
 80053f0:	2310      	movs	r3, #16
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e13e      	b.n	8005676 <UART_SetConfig+0x5a2>
 80053f8:	2320      	movs	r3, #32
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e13a      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005400:	cfff69f3 	.word	0xcfff69f3
 8005404:	58000c00 	.word	0x58000c00
 8005408:	11fff4ff 	.word	0x11fff4ff
 800540c:	40011000 	.word	0x40011000
 8005410:	58024400 	.word	0x58024400
 8005414:	40004400 	.word	0x40004400
 8005418:	40004800 	.word	0x40004800
 800541c:	40004c00 	.word	0x40004c00
 8005420:	40005000 	.word	0x40005000
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e124      	b.n	8005676 <UART_SetConfig+0x5a2>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e120      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4acc      	ldr	r2, [pc, #816]	; (800576c <UART_SetConfig+0x698>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d176      	bne.n	800552c <UART_SetConfig+0x458>
 800543e:	4bcc      	ldr	r3, [pc, #816]	; (8005770 <UART_SetConfig+0x69c>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005446:	2b28      	cmp	r3, #40	; 0x28
 8005448:	d86c      	bhi.n	8005524 <UART_SetConfig+0x450>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <UART_SetConfig+0x37c>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	080054f5 	.word	0x080054f5
 8005454:	08005525 	.word	0x08005525
 8005458:	08005525 	.word	0x08005525
 800545c:	08005525 	.word	0x08005525
 8005460:	08005525 	.word	0x08005525
 8005464:	08005525 	.word	0x08005525
 8005468:	08005525 	.word	0x08005525
 800546c:	08005525 	.word	0x08005525
 8005470:	080054fd 	.word	0x080054fd
 8005474:	08005525 	.word	0x08005525
 8005478:	08005525 	.word	0x08005525
 800547c:	08005525 	.word	0x08005525
 8005480:	08005525 	.word	0x08005525
 8005484:	08005525 	.word	0x08005525
 8005488:	08005525 	.word	0x08005525
 800548c:	08005525 	.word	0x08005525
 8005490:	08005505 	.word	0x08005505
 8005494:	08005525 	.word	0x08005525
 8005498:	08005525 	.word	0x08005525
 800549c:	08005525 	.word	0x08005525
 80054a0:	08005525 	.word	0x08005525
 80054a4:	08005525 	.word	0x08005525
 80054a8:	08005525 	.word	0x08005525
 80054ac:	08005525 	.word	0x08005525
 80054b0:	0800550d 	.word	0x0800550d
 80054b4:	08005525 	.word	0x08005525
 80054b8:	08005525 	.word	0x08005525
 80054bc:	08005525 	.word	0x08005525
 80054c0:	08005525 	.word	0x08005525
 80054c4:	08005525 	.word	0x08005525
 80054c8:	08005525 	.word	0x08005525
 80054cc:	08005525 	.word	0x08005525
 80054d0:	08005515 	.word	0x08005515
 80054d4:	08005525 	.word	0x08005525
 80054d8:	08005525 	.word	0x08005525
 80054dc:	08005525 	.word	0x08005525
 80054e0:	08005525 	.word	0x08005525
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005525 	.word	0x08005525
 80054ec:	08005525 	.word	0x08005525
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fa:	e0bc      	b.n	8005676 <UART_SetConfig+0x5a2>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005502:	e0b8      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550a:	e0b4      	b.n	8005676 <UART_SetConfig+0x5a2>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005512:	e0b0      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005514:	2320      	movs	r3, #32
 8005516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551a:	e0ac      	b.n	8005676 <UART_SetConfig+0x5a2>
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005522:	e0a8      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552a:	e0a4      	b.n	8005676 <UART_SetConfig+0x5a2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a90      	ldr	r2, [pc, #576]	; (8005774 <UART_SetConfig+0x6a0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d130      	bne.n	8005598 <UART_SetConfig+0x4c4>
 8005536:	4b8e      	ldr	r3, [pc, #568]	; (8005770 <UART_SetConfig+0x69c>)
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b05      	cmp	r3, #5
 8005540:	d826      	bhi.n	8005590 <UART_SetConfig+0x4bc>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x474>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005561 	.word	0x08005561
 800554c:	08005569 	.word	0x08005569
 8005550:	08005571 	.word	0x08005571
 8005554:	08005579 	.word	0x08005579
 8005558:	08005581 	.word	0x08005581
 800555c:	08005589 	.word	0x08005589
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e086      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005568:	2304      	movs	r3, #4
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e082      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005570:	2308      	movs	r3, #8
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e07e      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005578:	2310      	movs	r3, #16
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e07a      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005580:	2320      	movs	r3, #32
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e076      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e072      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005596:	e06e      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a76      	ldr	r2, [pc, #472]	; (8005778 <UART_SetConfig+0x6a4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d130      	bne.n	8005604 <UART_SetConfig+0x530>
 80055a2:	4b73      	ldr	r3, [pc, #460]	; (8005770 <UART_SetConfig+0x69c>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d826      	bhi.n	80055fc <UART_SetConfig+0x528>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x4e0>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055cd 	.word	0x080055cd
 80055b8:	080055d5 	.word	0x080055d5
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e050      	b.n	8005676 <UART_SetConfig+0x5a2>
 80055d4:	2304      	movs	r3, #4
 80055d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055da:	e04c      	b.n	8005676 <UART_SetConfig+0x5a2>
 80055dc:	2308      	movs	r3, #8
 80055de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e2:	e048      	b.n	8005676 <UART_SetConfig+0x5a2>
 80055e4:	2310      	movs	r3, #16
 80055e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ea:	e044      	b.n	8005676 <UART_SetConfig+0x5a2>
 80055ec:	2320      	movs	r3, #32
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f2:	e040      	b.n	8005676 <UART_SetConfig+0x5a2>
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e03c      	b.n	8005676 <UART_SetConfig+0x5a2>
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e038      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5c      	ldr	r2, [pc, #368]	; (800577c <UART_SetConfig+0x6a8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d130      	bne.n	8005670 <UART_SetConfig+0x59c>
 800560e:	4b58      	ldr	r3, [pc, #352]	; (8005770 <UART_SetConfig+0x69c>)
 8005610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	2b05      	cmp	r3, #5
 8005618:	d826      	bhi.n	8005668 <UART_SetConfig+0x594>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x54c>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005639 	.word	0x08005639
 8005624:	08005641 	.word	0x08005641
 8005628:	08005649 	.word	0x08005649
 800562c:	08005651 	.word	0x08005651
 8005630:	08005659 	.word	0x08005659
 8005634:	08005661 	.word	0x08005661
 8005638:	2302      	movs	r3, #2
 800563a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563e:	e01a      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005646:	e016      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564e:	e012      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005656:	e00e      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005658:	2320      	movs	r3, #32
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e00a      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e006      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e002      	b.n	8005676 <UART_SetConfig+0x5a2>
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a40      	ldr	r2, [pc, #256]	; (800577c <UART_SetConfig+0x6a8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	f040 80ef 	bne.w	8005860 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005682:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005686:	2b20      	cmp	r3, #32
 8005688:	dc46      	bgt.n	8005718 <UART_SetConfig+0x644>
 800568a:	2b02      	cmp	r3, #2
 800568c:	f2c0 8081 	blt.w	8005792 <UART_SetConfig+0x6be>
 8005690:	3b02      	subs	r3, #2
 8005692:	2b1e      	cmp	r3, #30
 8005694:	d87d      	bhi.n	8005792 <UART_SetConfig+0x6be>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x5c8>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	0800571f 	.word	0x0800571f
 80056a0:	08005793 	.word	0x08005793
 80056a4:	08005727 	.word	0x08005727
 80056a8:	08005793 	.word	0x08005793
 80056ac:	08005793 	.word	0x08005793
 80056b0:	08005793 	.word	0x08005793
 80056b4:	08005737 	.word	0x08005737
 80056b8:	08005793 	.word	0x08005793
 80056bc:	08005793 	.word	0x08005793
 80056c0:	08005793 	.word	0x08005793
 80056c4:	08005793 	.word	0x08005793
 80056c8:	08005793 	.word	0x08005793
 80056cc:	08005793 	.word	0x08005793
 80056d0:	08005793 	.word	0x08005793
 80056d4:	08005747 	.word	0x08005747
 80056d8:	08005793 	.word	0x08005793
 80056dc:	08005793 	.word	0x08005793
 80056e0:	08005793 	.word	0x08005793
 80056e4:	08005793 	.word	0x08005793
 80056e8:	08005793 	.word	0x08005793
 80056ec:	08005793 	.word	0x08005793
 80056f0:	08005793 	.word	0x08005793
 80056f4:	08005793 	.word	0x08005793
 80056f8:	08005793 	.word	0x08005793
 80056fc:	08005793 	.word	0x08005793
 8005700:	08005793 	.word	0x08005793
 8005704:	08005793 	.word	0x08005793
 8005708:	08005793 	.word	0x08005793
 800570c:	08005793 	.word	0x08005793
 8005710:	08005793 	.word	0x08005793
 8005714:	08005785 	.word	0x08005785
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d036      	beq.n	800578a <UART_SetConfig+0x6b6>
 800571c:	e039      	b.n	8005792 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800571e:	f7ff f867 	bl	80047f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005722:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005724:	e03b      	b.n	800579e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005726:	f107 0314 	add.w	r3, r7, #20
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff f876 	bl	800481c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005734:	e033      	b.n	800579e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005736:	f107 0308 	add.w	r3, r7, #8
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff f9c2 	bl	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005744:	e02b      	b.n	800579e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005746:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <UART_SetConfig+0x69c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <UART_SetConfig+0x69c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	4a08      	ldr	r2, [pc, #32]	; (8005780 <UART_SetConfig+0x6ac>)
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005764:	e01b      	b.n	800579e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <UART_SetConfig+0x6ac>)
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800576a:	e018      	b.n	800579e <UART_SetConfig+0x6ca>
 800576c:	40011400 	.word	0x40011400
 8005770:	58024400 	.word	0x58024400
 8005774:	40007800 	.word	0x40007800
 8005778:	40007c00 	.word	0x40007c00
 800577c:	58000c00 	.word	0x58000c00
 8005780:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005784:	4bc4      	ldr	r3, [pc, #784]	; (8005a98 <UART_SetConfig+0x9c4>)
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005788:	e009      	b.n	800579e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005790:	e005      	b.n	800579e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800579c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 81da 	beq.w	8005b5a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	4abc      	ldr	r2, [pc, #752]	; (8005a9c <UART_SetConfig+0x9c8>)
 80057ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057d0:	6a3a      	ldr	r2, [r7, #32]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d903      	bls.n	80057de <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057dc:	e1bd      	b.n	8005b5a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	4618      	mov	r0, r3
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	4aac      	ldr	r2, [pc, #688]	; (8005a9c <UART_SetConfig+0x9c8>)
 80057ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f7fa fd6f 	bl	80002d8 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	020b      	lsls	r3, r1, #8
 800580c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005810:	0202      	lsls	r2, r0, #8
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	6849      	ldr	r1, [r1, #4]
 8005816:	0849      	lsrs	r1, r1, #1
 8005818:	4608      	mov	r0, r1
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	1814      	adds	r4, r2, r0
 8005820:	eb43 0501 	adc.w	r5, r3, r1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	461a      	mov	r2, r3
 800582a:	f04f 0300 	mov.w	r3, #0
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fa fd51 	bl	80002d8 <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4613      	mov	r3, r2
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005844:	d308      	bcc.n	8005858 <UART_SetConfig+0x784>
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584c:	d204      	bcs.n	8005858 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005854:	60da      	str	r2, [r3, #12]
 8005856:	e180      	b.n	8005b5a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800585e:	e17c      	b.n	8005b5a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	f040 80bf 	bne.w	80059ea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800586c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005870:	2b20      	cmp	r3, #32
 8005872:	dc49      	bgt.n	8005908 <UART_SetConfig+0x834>
 8005874:	2b00      	cmp	r3, #0
 8005876:	db7c      	blt.n	8005972 <UART_SetConfig+0x89e>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d87a      	bhi.n	8005972 <UART_SetConfig+0x89e>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <UART_SetConfig+0x7b0>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	0800590f 	.word	0x0800590f
 8005888:	08005917 	.word	0x08005917
 800588c:	08005973 	.word	0x08005973
 8005890:	08005973 	.word	0x08005973
 8005894:	0800591f 	.word	0x0800591f
 8005898:	08005973 	.word	0x08005973
 800589c:	08005973 	.word	0x08005973
 80058a0:	08005973 	.word	0x08005973
 80058a4:	0800592f 	.word	0x0800592f
 80058a8:	08005973 	.word	0x08005973
 80058ac:	08005973 	.word	0x08005973
 80058b0:	08005973 	.word	0x08005973
 80058b4:	08005973 	.word	0x08005973
 80058b8:	08005973 	.word	0x08005973
 80058bc:	08005973 	.word	0x08005973
 80058c0:	08005973 	.word	0x08005973
 80058c4:	0800593f 	.word	0x0800593f
 80058c8:	08005973 	.word	0x08005973
 80058cc:	08005973 	.word	0x08005973
 80058d0:	08005973 	.word	0x08005973
 80058d4:	08005973 	.word	0x08005973
 80058d8:	08005973 	.word	0x08005973
 80058dc:	08005973 	.word	0x08005973
 80058e0:	08005973 	.word	0x08005973
 80058e4:	08005973 	.word	0x08005973
 80058e8:	08005973 	.word	0x08005973
 80058ec:	08005973 	.word	0x08005973
 80058f0:	08005973 	.word	0x08005973
 80058f4:	08005973 	.word	0x08005973
 80058f8:	08005973 	.word	0x08005973
 80058fc:	08005973 	.word	0x08005973
 8005900:	08005973 	.word	0x08005973
 8005904:	08005965 	.word	0x08005965
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d02e      	beq.n	800596a <UART_SetConfig+0x896>
 800590c:	e031      	b.n	8005972 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590e:	f7fe f803 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8005912:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005914:	e033      	b.n	800597e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005916:	f7fe f815 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 800591a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800591c:	e02f      	b.n	800597e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800591e:	f107 0314 	add.w	r3, r7, #20
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe ff7a 	bl	800481c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800592c:	e027      	b.n	800597e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800592e:	f107 0308 	add.w	r3, r7, #8
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff f8c6 	bl	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800593c:	e01f      	b.n	800597e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800593e:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <UART_SetConfig+0x9cc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800594a:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <UART_SetConfig+0x9cc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	08db      	lsrs	r3, r3, #3
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	4a53      	ldr	r2, [pc, #332]	; (8005aa4 <UART_SetConfig+0x9d0>)
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800595c:	e00f      	b.n	800597e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800595e:	4b51      	ldr	r3, [pc, #324]	; (8005aa4 <UART_SetConfig+0x9d0>)
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005962:	e00c      	b.n	800597e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005964:	4b4c      	ldr	r3, [pc, #304]	; (8005a98 <UART_SetConfig+0x9c4>)
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005968:	e009      	b.n	800597e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005970:	e005      	b.n	800597e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800597c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80ea 	beq.w	8005b5a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	4a44      	ldr	r2, [pc, #272]	; (8005a9c <UART_SetConfig+0x9c8>)
 800598c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005990:	461a      	mov	r2, r3
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	fbb3 f3f2 	udiv	r3, r3, r2
 8005998:	005a      	lsls	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	2b0f      	cmp	r3, #15
 80059b2:	d916      	bls.n	80059e2 <UART_SetConfig+0x90e>
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ba:	d212      	bcs.n	80059e2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f023 030f 	bic.w	r3, r3, #15
 80059c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d4:	4313      	orrs	r3, r2
 80059d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059de:	60da      	str	r2, [r3, #12]
 80059e0:	e0bb      	b.n	8005b5a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059e8:	e0b7      	b.n	8005b5a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	dc4a      	bgt.n	8005a88 <UART_SetConfig+0x9b4>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f2c0 8086 	blt.w	8005b04 <UART_SetConfig+0xa30>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	f200 8083 	bhi.w	8005b04 <UART_SetConfig+0xa30>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x930>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a8f 	.word	0x08005a8f
 8005a08:	08005aa9 	.word	0x08005aa9
 8005a0c:	08005b05 	.word	0x08005b05
 8005a10:	08005b05 	.word	0x08005b05
 8005a14:	08005ab1 	.word	0x08005ab1
 8005a18:	08005b05 	.word	0x08005b05
 8005a1c:	08005b05 	.word	0x08005b05
 8005a20:	08005b05 	.word	0x08005b05
 8005a24:	08005ac1 	.word	0x08005ac1
 8005a28:	08005b05 	.word	0x08005b05
 8005a2c:	08005b05 	.word	0x08005b05
 8005a30:	08005b05 	.word	0x08005b05
 8005a34:	08005b05 	.word	0x08005b05
 8005a38:	08005b05 	.word	0x08005b05
 8005a3c:	08005b05 	.word	0x08005b05
 8005a40:	08005b05 	.word	0x08005b05
 8005a44:	08005ad1 	.word	0x08005ad1
 8005a48:	08005b05 	.word	0x08005b05
 8005a4c:	08005b05 	.word	0x08005b05
 8005a50:	08005b05 	.word	0x08005b05
 8005a54:	08005b05 	.word	0x08005b05
 8005a58:	08005b05 	.word	0x08005b05
 8005a5c:	08005b05 	.word	0x08005b05
 8005a60:	08005b05 	.word	0x08005b05
 8005a64:	08005b05 	.word	0x08005b05
 8005a68:	08005b05 	.word	0x08005b05
 8005a6c:	08005b05 	.word	0x08005b05
 8005a70:	08005b05 	.word	0x08005b05
 8005a74:	08005b05 	.word	0x08005b05
 8005a78:	08005b05 	.word	0x08005b05
 8005a7c:	08005b05 	.word	0x08005b05
 8005a80:	08005b05 	.word	0x08005b05
 8005a84:	08005af7 	.word	0x08005af7
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d037      	beq.n	8005afc <UART_SetConfig+0xa28>
 8005a8c:	e03a      	b.n	8005b04 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a8e:	f7fd ff43 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8005a92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a94:	e03c      	b.n	8005b10 <UART_SetConfig+0xa3c>
 8005a96:	bf00      	nop
 8005a98:	003d0900 	.word	0x003d0900
 8005a9c:	0800616c 	.word	0x0800616c
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa8:	f7fd ff4c 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8005aac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005aae:	e02f      	b.n	8005b10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab0:	f107 0314 	add.w	r3, r7, #20
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe feb1 	bl	800481c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005abe:	e027      	b.n	8005b10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac0:	f107 0308 	add.w	r3, r7, #8
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fffd 	bl	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ace:	e01f      	b.n	8005b10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ad0:	4b2c      	ldr	r3, [pc, #176]	; (8005b84 <UART_SetConfig+0xab0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005adc:	4b29      	ldr	r3, [pc, #164]	; (8005b84 <UART_SetConfig+0xab0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	08db      	lsrs	r3, r3, #3
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <UART_SetConfig+0xab4>)
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aee:	e00f      	b.n	8005b10 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <UART_SetConfig+0xab4>)
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005af4:	e00c      	b.n	8005b10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <UART_SetConfig+0xab8>)
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005afa:	e009      	b.n	8005b10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b02:	e005      	b.n	8005b10 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d021      	beq.n	8005b5a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <UART_SetConfig+0xabc>)
 8005b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	085b      	lsrs	r3, r3, #1
 8005b2e:	441a      	add	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b0f      	cmp	r3, #15
 8005b40:	d908      	bls.n	8005b54 <UART_SetConfig+0xa80>
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d204      	bcs.n	8005b54 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b50:	60da      	str	r2, [r3, #12]
 8005b52:	e002      	b.n	8005b5a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3738      	adds	r7, #56	; 0x38
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bdb0      	pop	{r4, r5, r7, pc}
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400
 8005b88:	03d09000 	.word	0x03d09000
 8005b8c:	003d0900 	.word	0x003d0900
 8005b90:	0800616c 	.word	0x0800616c

08005b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01a      	beq.n	8005caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c92:	d10a      	bne.n	8005caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce8:	f7fb f942 	bl	8000f70 <HAL_GetTick>
 8005cec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d10e      	bne.n	8005d1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f82f 	bl	8005d6e <UART_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e025      	b.n	8005d66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d10e      	bne.n	8005d46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f819 	bl	8005d6e <UART_WaitOnFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	603b      	str	r3, [r7, #0]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7e:	e062      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d05e      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d88:	f7fb f8f2 	bl	8000f70 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d302      	bcc.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11d      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e045      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02e      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df6:	d126      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e00f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d08d      	beq.n	8005d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e027      	b.n	8005ed4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2224      	movs	r2, #36	; 0x24
 8005e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005eb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e02d      	b.n	8005f54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	; 0x24
 8005f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f84f 	bl	8005fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e02d      	b.n	8005fd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f811 	bl	8005fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d108      	bne.n	8005ffa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ff8:	e031      	b.n	800605e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ffe:	2310      	movs	r3, #16
 8006000:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	0e5b      	lsrs	r3, r3, #25
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	0f5b      	lsrs	r3, r3, #29
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	7b3a      	ldrb	r2, [r7, #12]
 8006026:	4911      	ldr	r1, [pc, #68]	; (800606c <UARTEx_SetNbDataToProcess+0x94>)
 8006028:	5c8a      	ldrb	r2, [r1, r2]
 800602a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800602e:	7b3a      	ldrb	r2, [r7, #12]
 8006030:	490f      	ldr	r1, [pc, #60]	; (8006070 <UARTEx_SetNbDataToProcess+0x98>)
 8006032:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006034:	fb93 f3f2 	sdiv	r3, r3, r2
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	7b7a      	ldrb	r2, [r7, #13]
 8006044:	4909      	ldr	r1, [pc, #36]	; (800606c <UARTEx_SetNbDataToProcess+0x94>)
 8006046:	5c8a      	ldrb	r2, [r1, r2]
 8006048:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800604c:	7b7a      	ldrb	r2, [r7, #13]
 800604e:	4908      	ldr	r1, [pc, #32]	; (8006070 <UARTEx_SetNbDataToProcess+0x98>)
 8006050:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006052:	fb93 f3f2 	sdiv	r3, r3, r2
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	08006184 	.word	0x08006184
 8006070:	0800618c 	.word	0x0800618c

08006074 <__libc_init_array>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4d0d      	ldr	r5, [pc, #52]	; (80060ac <__libc_init_array+0x38>)
 8006078:	4c0d      	ldr	r4, [pc, #52]	; (80060b0 <__libc_init_array+0x3c>)
 800607a:	1b64      	subs	r4, r4, r5
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	2600      	movs	r6, #0
 8006080:	42a6      	cmp	r6, r4
 8006082:	d109      	bne.n	8006098 <__libc_init_array+0x24>
 8006084:	4d0b      	ldr	r5, [pc, #44]	; (80060b4 <__libc_init_array+0x40>)
 8006086:	4c0c      	ldr	r4, [pc, #48]	; (80060b8 <__libc_init_array+0x44>)
 8006088:	f000 f82e 	bl	80060e8 <_init>
 800608c:	1b64      	subs	r4, r4, r5
 800608e:	10a4      	asrs	r4, r4, #2
 8006090:	2600      	movs	r6, #0
 8006092:	42a6      	cmp	r6, r4
 8006094:	d105      	bne.n	80060a2 <__libc_init_array+0x2e>
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	f855 3b04 	ldr.w	r3, [r5], #4
 800609c:	4798      	blx	r3
 800609e:	3601      	adds	r6, #1
 80060a0:	e7ee      	b.n	8006080 <__libc_init_array+0xc>
 80060a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a6:	4798      	blx	r3
 80060a8:	3601      	adds	r6, #1
 80060aa:	e7f2      	b.n	8006092 <__libc_init_array+0x1e>
 80060ac:	0800619c 	.word	0x0800619c
 80060b0:	0800619c 	.word	0x0800619c
 80060b4:	0800619c 	.word	0x0800619c
 80060b8:	080061a0 	.word	0x080061a0

080060bc <memcpy>:
 80060bc:	440a      	add	r2, r1
 80060be:	4291      	cmp	r1, r2
 80060c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c4:	d100      	bne.n	80060c8 <memcpy+0xc>
 80060c6:	4770      	bx	lr
 80060c8:	b510      	push	{r4, lr}
 80060ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060d2:	4291      	cmp	r1, r2
 80060d4:	d1f9      	bne.n	80060ca <memcpy+0xe>
 80060d6:	bd10      	pop	{r4, pc}

080060d8 <memset>:
 80060d8:	4402      	add	r2, r0
 80060da:	4603      	mov	r3, r0
 80060dc:	4293      	cmp	r3, r2
 80060de:	d100      	bne.n	80060e2 <memset+0xa>
 80060e0:	4770      	bx	lr
 80060e2:	f803 1b01 	strb.w	r1, [r3], #1
 80060e6:	e7f9      	b.n	80060dc <memset+0x4>

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
